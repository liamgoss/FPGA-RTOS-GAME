
Final.elf:     file format elf32-littlenios2
Final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000043cc memsz 0x000043cc flags r-x
    LOAD off    0x000053ec vaddr 0x080043ec paddr 0x08005ca4 align 2**12
         filesz 0x000018b8 memsz 0x000018b8 flags rw-
    LOAD off    0x0000755c vaddr 0x0800755c paddr 0x0800755c align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004064  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  080042a8  080042a8  000052a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018b8  080043ec  08005ca4  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  0800755c  0800755c  0000755c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00200000  00200000  00006ca4  2**0
                  CONTENTS
  7 .sdram        00000000  080076cc  080076cc  00006ca4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006ca4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000750  00000000  00000000  00006cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000951b  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000036df  00000000  00000000  00010933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000037ce  00000000  00000000  00014012  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001100  00000000  00000000  000177e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002406  00000000  00000000  000188e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002289  00000000  00000000  0001ace6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0001cf70  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000004c0  00000000  00000000  0001cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001fa3e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001fa41  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001fa4d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001fa4e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001fa4f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001fa53  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001fa57  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001fa5b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001fa66  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001fa71  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0001fa7c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  0001fa86  2**0
                  CONTENTS, READONLY
 30 .jdi          000048e1  00000000  00000000  0001faae  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009522d  00000000  00000000  0002438f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
080042a8 l    d  .rodata	00000000 .rodata
080043ec l    d  .rwdata	00000000 .rwdata
0800755c l    d  .bss	00000000 .bss
00200000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080076cc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
080007f4 l     F .text	000000f0 timer_init
08000788 l     F .text	0000006c pio_init
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
08001a48 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08001be0 l     F .text	00000034 alt_dev_reg
080045f4 l     O .rwdata	00001060 jtag_uart_0
08005654 l     O .rwdata	0000002c lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08001eec l     F .text	0000020c altera_avalon_jtag_uart_irq
080020f8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08002730 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08002f9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080030f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800311c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800341c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0800355c l     F .text	0000003c alt_get_errno
08003598 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08005828 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
080075a8 g     O .bss	00000004 alt_instruction_exception_handler
08001b34 g     F .text	0000007c alt_main
08007580 g     O .bss	00000004 t
080075cc g     O .bss	00000100 alt_irq
08000678 g     F .text	0000004c key_isr1
08005ca4 g       *ABS*	00000000 __flash_rwdata_start
08002898 g     F .text	00000040 alt_up_character_lcd_send_cmd
08005c58 g     O .rwdata	00000004 clock_period_l
0800442c g     O .rwdata	00000018 Pattern2
08005c6c g     O .rwdata	00000001 character
08007584 g     O .bss	00000004 time_capture
08001518 g     F .text	00000070 .hidden __fixsfsi
080039b8 g     F .text	00000024 altera_nios2_gen2_irq_init
08002824 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08007588 g     O .bss	00000004 edge_capture
08005c50 g     O .rwdata	00000006 text_hello
08000020 g       *ABS*	00000000 __flash_exceptions_start
080075b4 g     O .bss	00000004 errno
080075a0 g     O .bss	00000004 alt_argv
0800dc4c g       *ABS*	00000000 _gp
08005c74 g     O .rwdata	00000001 bullet
08001bb0 g     F .text	00000030 usleep
08001034 g     F .text	000004e4 .hidden __subsf3
080056a8 g     O .rwdata	00000180 alt_fd_list
08007574 g     O .bss	00000004 flag_timer
080032bc g     F .text	00000090 alt_find_dev
08003ce0 g     F .text	00000148 memcpy
08002a40 g     F .text	00000050 alt_up_character_lcd_write_fd
08000308 g     F .text	000000a8 moveBullet
080034e0 g     F .text	0000007c alt_io_redirect
080042a8 g       *ABS*	00000000 __DTOR_END__
080045d4 g     O .rwdata	00000020 tombstone
08003380 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08000630 g     F .text	00000048 key_isr
080022f0 g     F .text	0000021c altera_avalon_jtag_uart_read
00200000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080041b8 g     F .text	00000064 .hidden __udivsi3
08003b88 g     F .text	00000090 alt_icache_flush
08007570 g     O .bss	00000004 flag
080075b8 g     O .bss	00000014 customPattern
08005c70 g     O .rwdata	00000004 bulletPosition
08005c8c g     O .rwdata	00000004 alt_max_fd
08005c60 g     O .rwdata	00000004 second
080006c4 g     F .text	0000004c key_isr2
08004514 g     O .rwdata	00000020 customChar
08005c9c g     O .rwdata	00000004 _global_impure_ptr
080076cc g       *ABS*	00000000 __bss_end
08001958 g     F .text	000000f0 alt_iic_isr_register
080038b0 g     F .text	00000108 alt_tick
08004534 g     O .rwdata	00000020 player_still
0800190c g     F .text	0000004c alt_ic_irq_enabled
08003814 g     F .text	0000009c alt_alarm_stop
08007598 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08005680 g     O .rwdata	00000028 alt_dev_null
08002ce0 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
080030a8 g     F .text	00000048 alt_dcache_flush_all
08005ca4 g       *ABS*	00000000 __ram_rwdata_end
08005c84 g     O .rwdata	00000008 alt_dev_list
08007578 g     O .bss	00000004 bulletActive
08000b7c g     F .text	000000bc .hidden __gtsf2
080043ec g       *ABS*	00000000 __ram_rodata_end
0800421c g     F .text	00000058 .hidden __umodsi3
08004554 g     O .rwdata	00000020 player_walk
080076cc g       *ABS*	00000000 end
08001e2c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080042a8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080027a8 g     F .text	0000007c alt_avalon_timer_sc_init
080016ac g     F .text	00000064 .hidden __clzsi2
0800250c g     F .text	00000224 altera_avalon_jtag_uart_write
0800294c g     F .text	0000007c alt_up_character_lcd_write
080043ec g     O .rwdata	00000040 HEX_DISPLAY
08003f40 g     F .text	00000180 __call_exitprocs
0800755c g     O .bss	00000004 out_LED
08000244 g     F .text	0000004c _start
080075ac g     O .bss	00000004 _alt_tick_rate
080075b0 g     O .bss	00000004 _alt_nticks
08001c4c g     F .text	0000007c alt_sys_init
08002b90 g     F .text	0000008c alt_up_character_lcd_shift_display
08001588 g     F .text	00000124 .hidden __floatsisf
08003e28 g     F .text	00000118 __register_exitproc
08002c1c g     F .text	0000008c alt_up_character_lcd_erase_pos
0800758c g     O .bss	00000004 clock_period
08002198 g     F .text	00000068 altera_avalon_jtag_uart_close
080043ec g       *ABS*	00000000 __ram_rwdata_start
080042a8 g       *ABS*	00000000 __ram_rodata_start
08007590 g     O .bss	00000004 push_val
08001cc8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08003ae4 g     F .text	000000a4 alt_get_fd
080008e4 g     F .text	00000084 handle_key_interrupts
08002e44 g     F .text	00000158 alt_busy_sleep
08005c68 g     O .rwdata	00000004 pattern3
080003b0 g     F .text	000000dc movePlayer
08003c64 g     F .text	0000007c memcmp
08001d88 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080076cc g       *ABS*	00000000 __alt_stack_base
08001dd8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800757c g     O .bss	00000004 playerPosition
080039dc g     F .text	00000108 alt_find_file
08003158 g     F .text	000000a4 alt_dev_llist_insert
08007594 g     O .bss	00000001 jtag_capture
0800755c g       *ABS*	00000000 __bss_start
0800048c g     F .text	000001a4 main
080075a4 g     O .bss	00000004 alt_envp
08001d28 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08004444 g     O .rwdata	000000d0 sevseg_list
08002b04 g     F .text	0000008c alt_up_character_lcd_shift_cursor
08004574 g     O .rwdata	00000020 zombie_still
08005c90 g     O .rwdata	00000004 alt_errno
080040c0 g     F .text	00000084 .hidden __divsi3
08002910 g     F .text	0000003c alt_up_character_lcd_open_dev
08005c4c g     O .rwdata	00000004 mask_LED
080042a8 g       *ABS*	00000000 __CTOR_END__
08000c38 g     F .text	000003fc .hidden __mulsf3
08005c64 g     O .rwdata	00000004 Pattern1
080028d8 g     F .text	00000038 alt_up_character_lcd_init
080042a8 g       *ABS*	00000000 __flash_rodata_start
080042a8 g       *ABS*	00000000 __DTOR_LIST__
08004594 g     O .rwdata	00000020 zombie_walk
08001c14 g     F .text	00000038 alt_irq_init
080037b0 g     F .text	00000064 alt_release_fd
08002ca8 g     F .text	00000038 alt_up_character_lcd_cursor_off
080042a8 g     O .rodata	00000100 .hidden __clz_tab
08003c18 g     F .text	00000014 atexit
08000b7c g     F .text	000000bc .hidden __gesf2
08005ca0 g     O .rwdata	00000004 _impure_ptr
0800759c g     O .bss	00000004 alt_argc
0800325c g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08000968 g     F .text	000000a4 display_init
08005c7c g     O .rwdata	00000008 alt_fs_list
08007564 g     O .bss	00000004 offset
08000020 g       *ABS*	00000000 __ram_exceptions_start
080017a8 g     F .text	00000050 alt_ic_isr_register
08005ca4 g       *ABS*	00000000 _edata
080076cc g       *ABS*	00000000 _end
08005c5c g     O .rwdata	00000004 clock_period_h
08000244 g       *ABS*	00000000 __ram_exceptions_end
08000290 g     F .text	00000078 shootBullet
08002200 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08001880 g     F .text	0000008c alt_ic_irq_disable
08007568 g     O .bss	00000004 time_sec
08003c2c g     F .text	00000038 exit
08004144 g     F .text	00000074 .hidden __modsi3
080045b4 g     O .rwdata	00000020 bullet_move
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
080029c8 g     F .text	00000078 alt_up_character_lcd_string
08000b1c g     F .text	00000060 .hidden __fixunssfsi
08004274 g     F .text	00000034 _exit
08000710 g     F .text	00000078 timer_isr
08002d18 g     F .text	0000012c alt_alarm_start
08001710 g     F .text	00000098 strlen
0800365c g     F .text	00000154 open
0800334c g     F .text	00000034 alt_icache_flush_all
08002a90 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08005c78 g     O .rwdata	00000004 alt_priority_mask
080017f8 g     F .text	00000088 alt_ic_irq_enable
0800756c g     O .bss	00000004 sample
08000a0c g     F .text	00000110 printword
08007560 g     O .bss	00000004 currTime
08005c94 g     O .rwdata	00000008 alt_alarm_list
080031fc g     F .text	00000060 _do_ctors
08002fd8 g     F .text	000000d0 close
08001ab0 g     F .text	00000084 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820034 	movhi	r2,2048
 8000140:	109d7304 	addi	r2,r2,30156
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820034 	movhi	r2,2048
 8000158:	109d7304 	addi	r2,r2,30156
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a65717 	ldw	r2,-26276(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a65717 	ldw	r2,-26276(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xf8000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 8000260:	d6b71314 	ori	gp,gp,56396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	109d5714 	ori	r2,r2,30044

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18ddb314 	ori	r3,r3,30412

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xf8000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	8001ab00 	call	8001ab0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	8001b340 	call	8001b34 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xf800028c>

08000290 <shootBullet>:
int bulletActive = 0;     // Flag to indicate if a bullet is currently active
int playerPosition = 0;  // Initial position of the player character

char bullet = '-';

void shootBullet() {
 8000290:	defffe04 	addi	sp,sp,-8
 8000294:	dfc00115 	stw	ra,4(sp)
 8000298:	df000015 	stw	fp,0(sp)
 800029c:	d839883a 	mov	fp,sp
    // Check if a bullet is already active
    if (bulletActive) {
 80002a0:	d0a64b17 	ldw	r2,-26324(gp)
 80002a4:	1000121e 	bne	r2,zero,80002f0 <shootBullet+0x60>
        return;  // Skip shooting if a bullet is still active
    }

    // Set the bullet position to the player's position
    bulletPosition = playerPosition;
 80002a8:	d0a64c17 	ldw	r2,-26320(gp)
 80002ac:	d0a00915 	stw	r2,-32732(gp)
    bulletActive = 1;  // Set the flag to indicate an active bullet
 80002b0:	00800044 	movi	r2,1
 80002b4:	d0a64b15 	stw	r2,-26324(gp)

    // Display the bullet at the initial position
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + bulletPosition);
 80002b8:	d0a00917 	ldw	r2,-32732(gp)
 80002bc:	10c02004 	addi	r3,r2,128
 80002c0:	00840404 	movi	r2,4112
 80002c4:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG, bullet);
 80002c8:	d0a00a03 	ldbu	r2,-32728(gp)
 80002cc:	10c03fcc 	andi	r3,r2,255
 80002d0:	18c0201c 	xori	r3,r3,128
 80002d4:	18ffe004 	addi	r3,r3,-128
 80002d8:	00840444 	movi	r2,4113
 80002dc:	10c00025 	stbio	r3,0(r2)

    // Introduce a delay (you may need to adjust the duration)
    usleep(100000);  // Sleep for 100ms (adjust as needed)
 80002e0:	010000b4 	movhi	r4,2
 80002e4:	2121a804 	addi	r4,r4,-31072
 80002e8:	8001bb00 	call	8001bb0 <usleep>
 80002ec:	00000106 	br	80002f4 <shootBullet+0x64>
char bullet = '-';

void shootBullet() {
    // Check if a bullet is already active
    if (bulletActive) {
        return;  // Skip shooting if a bullet is still active
 80002f0:	0001883a 	nop
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + bulletPosition);
    IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG, bullet);

    // Introduce a delay (you may need to adjust the duration)
    usleep(100000);  // Sleep for 100ms (adjust as needed)
}
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	dfc00117 	ldw	ra,4(sp)
 80002fc:	df000017 	ldw	fp,0(sp)
 8000300:	dec00204 	addi	sp,sp,8
 8000304:	f800283a 	ret

08000308 <moveBullet>:

void moveBullet() {
 8000308:	defffe04 	addi	sp,sp,-8
 800030c:	dfc00115 	stw	ra,4(sp)
 8000310:	df000015 	stw	fp,0(sp)
 8000314:	d839883a 	mov	fp,sp
    // Check if a bullet is active
    if (bulletActive) {
 8000318:	d0a64b17 	ldw	r2,-26324(gp)
 800031c:	10001e26 	beq	r2,zero,8000398 <moveBullet+0x90>
        while (bulletPosition >= 0) {
 8000320:	00001a06 	br	800038c <moveBullet+0x84>
            // Clear the bullet at the current position


            // Update the bullet position
            bulletPosition--;
 8000324:	d0a00917 	ldw	r2,-32732(gp)
 8000328:	10bfffc4 	addi	r2,r2,-1
 800032c:	d0a00915 	stw	r2,-32732(gp)

            // Display the bullet at the new position
            IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8000330:	00c00044 	movi	r3,1
 8000334:	00840404 	movi	r2,4112
 8000338:	10c00025 	stbio	r3,0(r2)

            IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + playerPosition);
 800033c:	d0a64c17 	ldw	r2,-26320(gp)
 8000340:	10c02004 	addi	r3,r2,128
 8000344:	00840404 	movi	r2,4112
 8000348:	10c00025 	stbio	r3,0(r2)
            IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, 0x1);
 800034c:	00c00044 	movi	r3,1
 8000350:	00840444 	movi	r2,4113
 8000354:	10c00025 	stbio	r3,0(r2)
            IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + bulletPosition);
 8000358:	d0a00917 	ldw	r2,-32732(gp)
 800035c:	10c02004 	addi	r3,r2,128
 8000360:	00840404 	movi	r2,4112
 8000364:	10c00025 	stbio	r3,0(r2)
            IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG, bullet);
 8000368:	d0a00a03 	ldbu	r2,-32728(gp)
 800036c:	10c03fcc 	andi	r3,r2,255
 8000370:	18c0201c 	xori	r3,r3,128
 8000374:	18ffe004 	addi	r3,r3,-128
 8000378:	00840444 	movi	r2,4113
 800037c:	10c00025 	stbio	r3,0(r2)

            // Introduce a delay (you may need to adjust the duration)
            usleep(100000);  // Sleep for 100ms (adjust as needed)
 8000380:	010000b4 	movhi	r4,2
 8000384:	2121a804 	addi	r4,r4,-31072
 8000388:	8001bb00 	call	8001bb0 <usleep>
}

void moveBullet() {
    // Check if a bullet is active
    if (bulletActive) {
        while (bulletPosition >= 0) {
 800038c:	d0a00917 	ldw	r2,-32732(gp)
 8000390:	103fe40e 	bge	r2,zero,8000324 <__alt_data_end+0xf8000324>

            // Introduce a delay (you may need to adjust the duration)
            usleep(100000);  // Sleep for 100ms (adjust as needed)
        }

        bulletActive = 0;  // Deactivate the bullet once it goes off the display
 8000394:	d0264b15 	stw	zero,-26324(gp)
    }
}
 8000398:	0001883a 	nop
 800039c:	e037883a 	mov	sp,fp
 80003a0:	dfc00117 	ldw	ra,4(sp)
 80003a4:	df000017 	ldw	fp,0(sp)
 80003a8:	dec00204 	addi	sp,sp,8
 80003ac:	f800283a 	ret

080003b0 <movePlayer>:





void movePlayer(int direction) {
 80003b0:	defffd04 	addi	sp,sp,-12
 80003b4:	df000215 	stw	fp,8(sp)
 80003b8:	df000204 	addi	fp,sp,8
 80003bc:	e13fff15 	stw	r4,-4(fp)
    // Direction: 0 for left, 1 for right

    // Clear the entire display
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80003c0:	00c00044 	movi	r3,1
 80003c4:	00840404 	movi	r2,4112
 80003c8:	10c00025 	stbio	r3,0(r2)

    // Update the player position based on the direction
    if (direction == 0 && playerPosition > 0) {
 80003cc:	e0bfff17 	ldw	r2,-4(fp)
 80003d0:	1000061e 	bne	r2,zero,80003ec <movePlayer+0x3c>
 80003d4:	d0a64c17 	ldw	r2,-26320(gp)
 80003d8:	0080040e 	bge	zero,r2,80003ec <movePlayer+0x3c>
        playerPosition--;
 80003dc:	d0a64c17 	ldw	r2,-26320(gp)
 80003e0:	10bfffc4 	addi	r2,r2,-1
 80003e4:	d0a64c15 	stw	r2,-26320(gp)
 80003e8:	00000906 	br	8000410 <movePlayer+0x60>
    } else if (direction == 1 && playerPosition < 15) {
 80003ec:	e0bfff17 	ldw	r2,-4(fp)
 80003f0:	10800058 	cmpnei	r2,r2,1
 80003f4:	1000061e 	bne	r2,zero,8000410 <movePlayer+0x60>
 80003f8:	d0a64c17 	ldw	r2,-26320(gp)
 80003fc:	108003c8 	cmpgei	r2,r2,15
 8000400:	1000031e 	bne	r2,zero,8000410 <movePlayer+0x60>
        playerPosition++;
 8000404:	d0a64c17 	ldw	r2,-26320(gp)
 8000408:	10800044 	addi	r2,r2,1
 800040c:	d0a64c15 	stw	r2,-26320(gp)
    }

    // Display the player character at the new position

    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + playerPosition);
 8000410:	d0a64c17 	ldw	r2,-26320(gp)
 8000414:	10c02004 	addi	r3,r2,128
 8000418:	00840404 	movi	r2,4112
 800041c:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG,0x1);
 8000420:	00c00044 	movi	r3,1
 8000424:	00840444 	movi	r2,4113
 8000428:	10c00025 	stbio	r3,0(r2)
    for(int i =0;i<300000;i++){}
 800042c:	e03ffe15 	stw	zero,-8(fp)
 8000430:	00000306 	br	8000440 <movePlayer+0x90>
 8000434:	e0bffe17 	ldw	r2,-8(fp)
 8000438:	10800044 	addi	r2,r2,1
 800043c:	e0bffe15 	stw	r2,-8(fp)
 8000440:	e0fffe17 	ldw	r3,-8(fp)
 8000444:	00800174 	movhi	r2,5
 8000448:	10a4f7c4 	addi	r2,r2,-27681
 800044c:	10fff90e 	bge	r2,r3,8000434 <__alt_data_end+0xf8000434>
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8000450:	00c00044 	movi	r3,1
 8000454:	00840404 	movi	r2,4112
 8000458:	10c00025 	stbio	r3,0(r2)
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x80 + playerPosition);
 800045c:	d0a64c17 	ldw	r2,-26320(gp)
 8000460:	10c02004 	addi	r3,r2,128
 8000464:	00840404 	movi	r2,4112
 8000468:	10c00025 	stbio	r3,0(r2)
    IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG,0x0);
 800046c:	0007883a 	mov	r3,zero
 8000470:	00840444 	movi	r2,4113
 8000474:	10c00025 	stbio	r3,0(r2)


}
 8000478:	0001883a 	nop
 800047c:	e037883a 	mov	sp,fp
 8000480:	df000017 	ldw	fp,0(sp)
 8000484:	dec00104 	addi	sp,sp,4
 8000488:	f800283a 	ret

0800048c <main>:

int main()
{
 800048c:	defff804 	addi	sp,sp,-32
 8000490:	dfc00715 	stw	ra,28(sp)
 8000494:	df000615 	stw	fp,24(sp)
 8000498:	df000604 	addi	fp,sp,24


	char hello[] = "Hello" ;
 800049c:	009b1b34 	movhi	r2,27756
 80004a0:	10995204 	addi	r2,r2,25928
 80004a4:	e0bffe15 	stw	r2,-8(fp)
 80004a8:	00801bc4 	movi	r2,111
 80004ac:	e0bfff0d 	sth	r2,-4(fp)
	display_init();
 80004b0:	80009680 	call	8000968 <display_init>
	timer_init(second);
 80004b4:	d0a00517 	ldw	r2,-32748(gp)
 80004b8:	1009883a 	mov	r4,r2
 80004bc:	80015880 	call	8001588 <__floatsisf>
 80004c0:	1007883a 	mov	r3,r2
 80004c4:	1809883a 	mov	r4,r3
 80004c8:	80007f40 	call	80007f4 <timer_init>
	pio_init();
 80004cc:	80007880 	call	8000788 <pio_init>
	//IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG, character);
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x40);
 80004d0:	00c01004 	movi	r3,64
 80004d4:	00840404 	movi	r2,4112
 80004d8:	10c00025 	stbio	r3,0(r2)
	for (int i = 0; i < 8; ++i)
 80004dc:	e03ffa15 	stw	zero,-24(fp)
 80004e0:	00000c06 	br	8000514 <main+0x88>
	{
	        IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_still[i]);
 80004e4:	00820034 	movhi	r2,2048
 80004e8:	10914d04 	addi	r2,r2,17716
 80004ec:	e0fffa17 	ldw	r3,-24(fp)
 80004f0:	18c7883a 	add	r3,r3,r3
 80004f4:	18c7883a 	add	r3,r3,r3
 80004f8:	10c5883a 	add	r2,r2,r3
 80004fc:	10c00017 	ldw	r3,0(r2)
 8000500:	00840444 	movi	r2,4113
 8000504:	10c00025 	stbio	r3,0(r2)
	display_init();
	timer_init(second);
	pio_init();
	//IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG, character);
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x40);
	for (int i = 0; i < 8; ++i)
 8000508:	e0bffa17 	ldw	r2,-24(fp)
 800050c:	10800044 	addi	r2,r2,1
 8000510:	e0bffa15 	stw	r2,-24(fp)
 8000514:	e0bffa17 	ldw	r2,-24(fp)
 8000518:	10800210 	cmplti	r2,r2,8
 800051c:	103ff11e 	bne	r2,zero,80004e4 <__alt_data_end+0xf80004e4>
	{
	        IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_still[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x48);
 8000520:	00c01204 	movi	r3,72
 8000524:	00840404 	movi	r2,4112
 8000528:	10c00025 	stbio	r3,0(r2)
	for (int i = 0; i < 8; ++i)
 800052c:	e03ffb15 	stw	zero,-20(fp)
 8000530:	00000c06 	br	8000564 <main+0xd8>
	{
		    IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_walk[i]);
 8000534:	00820034 	movhi	r2,2048
 8000538:	10915504 	addi	r2,r2,17748
 800053c:	e0fffb17 	ldw	r3,-20(fp)
 8000540:	18c7883a 	add	r3,r3,r3
 8000544:	18c7883a 	add	r3,r3,r3
 8000548:	10c5883a 	add	r2,r2,r3
 800054c:	10c00017 	ldw	r3,0(r2)
 8000550:	00840444 	movi	r2,4113
 8000554:	10c00025 	stbio	r3,0(r2)
	{
	        IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_still[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x48);
	for (int i = 0; i < 8; ++i)
 8000558:	e0bffb17 	ldw	r2,-20(fp)
 800055c:	10800044 	addi	r2,r2,1
 8000560:	e0bffb15 	stw	r2,-20(fp)
 8000564:	e0bffb17 	ldw	r2,-20(fp)
 8000568:	10800210 	cmplti	r2,r2,8
 800056c:	103ff11e 	bne	r2,zero,8000534 <__alt_data_end+0xf8000534>
	{
		    IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_walk[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x56);
 8000570:	00c01584 	movi	r3,86
 8000574:	00840404 	movi	r2,4112
 8000578:	10c00025 	stbio	r3,0(r2)
	for (int i = 0; i < 8; ++i)
 800057c:	e03ffc15 	stw	zero,-16(fp)
 8000580:	00000c06 	br	80005b4 <main+0x128>
	{
		   IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, bullet_move[i]);
 8000584:	00820034 	movhi	r2,2048
 8000588:	10916d04 	addi	r2,r2,17844
 800058c:	e0fffc17 	ldw	r3,-16(fp)
 8000590:	18c7883a 	add	r3,r3,r3
 8000594:	18c7883a 	add	r3,r3,r3
 8000598:	10c5883a 	add	r2,r2,r3
 800059c:	10c00017 	ldw	r3,0(r2)
 80005a0:	00840444 	movi	r2,4113
 80005a4:	10c00025 	stbio	r3,0(r2)
	{
		    IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, player_walk[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x56);
	for (int i = 0; i < 8; ++i)
 80005a8:	e0bffc17 	ldw	r2,-16(fp)
 80005ac:	10800044 	addi	r2,r2,1
 80005b0:	e0bffc15 	stw	r2,-16(fp)
 80005b4:	e0bffc17 	ldw	r2,-16(fp)
 80005b8:	10800210 	cmplti	r2,r2,8
 80005bc:	103ff11e 	bne	r2,zero,8000584 <__alt_data_end+0xf8000584>
	{
		   IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, bullet_move[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x64);
 80005c0:	00c01904 	movi	r3,100
 80005c4:	00840404 	movi	r2,4112
 80005c8:	10c00025 	stbio	r3,0(r2)
		for (int i = 0; i < 8; ++i)
 80005cc:	e03ffd15 	stw	zero,-12(fp)
 80005d0:	00000c06 	br	8000604 <main+0x178>
		{
			   IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, bullet_move[i]);
 80005d4:	00820034 	movhi	r2,2048
 80005d8:	10916d04 	addi	r2,r2,17844
 80005dc:	e0fffd17 	ldw	r3,-12(fp)
 80005e0:	18c7883a 	add	r3,r3,r3
 80005e4:	18c7883a 	add	r3,r3,r3
 80005e8:	10c5883a 	add	r2,r2,r3
 80005ec:	10c00017 	ldw	r3,0(r2)
 80005f0:	00840444 	movi	r2,4113
 80005f4:	10c00025 	stbio	r3,0(r2)
	{
		   IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, bullet_move[i]);
	}

	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x64);
		for (int i = 0; i < 8; ++i)
 80005f8:	e0bffd17 	ldw	r2,-12(fp)
 80005fc:	10800044 	addi	r2,r2,1
 8000600:	e0bffd15 	stw	r2,-12(fp)
 8000604:	e0bffd17 	ldw	r2,-12(fp)
 8000608:	10800210 	cmplti	r2,r2,8
 800060c:	103ff11e 	bne	r2,zero,80005d4 <__alt_data_end+0xf80005d4>
			   IOWR_ALT_UP_CHARACTER_LCD_DATA(LCD_BASE, bullet_move[i]);
		}


	  // Set DDRAM address back to the start (cursor position)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, ALT_UP_CHARACTER_LCD_COMM_RETURN_HOME);
 8000610:	00c00084 	movi	r3,2
 8000614:	00840404 	movi	r2,4112
 8000618:	10c00025 	stbio	r3,0(r2)
    IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x0c);
 800061c:	00c00304 	movi	r3,12
 8000620:	00840404 	movi	r2,4112
 8000624:	10c00025 	stbio	r3,0(r2)


    while (1) {
           moveBullet();
 8000628:	80003080 	call	8000308 <moveBullet>
       }
 800062c:	003ffe06 	br	8000628 <__alt_data_end+0xf8000628>

08000630 <key_isr>:




void key_isr(void) // reset interrupt
{
 8000630:	defffe04 	addi	sp,sp,-8
 8000634:	dfc00115 	stw	ra,4(sp)
 8000638:	df000015 	stw	fp,0(sp)
 800063c:	d839883a 	mov	fp,sp
	shootBullet();
 8000640:	80002900 	call	8000290 <shootBullet>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x0);
 8000644:	0007883a 	mov	r3,zero
 8000648:	00800834 	movhi	r2,32
 800064c:	10841b04 	addi	r2,r2,4204
 8000650:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 8000654:	00800834 	movhi	r2,32
 8000658:	10841b04 	addi	r2,r2,4204
 800065c:	10800037 	ldwio	r2,0(r2)
	return;
 8000660:	0001883a 	nop
}
 8000664:	e037883a 	mov	sp,fp
 8000668:	dfc00117 	ldw	ra,4(sp)
 800066c:	df000017 	ldw	fp,0(sp)
 8000670:	dec00204 	addi	sp,sp,8
 8000674:	f800283a 	ret

08000678 <key_isr1>:

void key_isr1(void)
{
 8000678:	defffe04 	addi	sp,sp,-8
 800067c:	dfc00115 	stw	ra,4(sp)
 8000680:	df000015 	stw	fp,0(sp)
 8000684:	d839883a 	mov	fp,sp
	movePlayer(1);
 8000688:	01000044 	movi	r4,1
 800068c:	80003b00 	call	80003b0 <movePlayer>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x0);
 8000690:	0007883a 	mov	r3,zero
 8000694:	00800834 	movhi	r2,32
 8000698:	10841b04 	addi	r2,r2,4204
 800069c:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 80006a0:	00800834 	movhi	r2,32
 80006a4:	10841b04 	addi	r2,r2,4204
 80006a8:	10800037 	ldwio	r2,0(r2)
	return;
 80006ac:	0001883a 	nop
}
 80006b0:	e037883a 	mov	sp,fp
 80006b4:	dfc00117 	ldw	ra,4(sp)
 80006b8:	df000017 	ldw	fp,0(sp)
 80006bc:	dec00204 	addi	sp,sp,8
 80006c0:	f800283a 	ret

080006c4 <key_isr2>:

void key_isr2(void)
{
 80006c4:	defffe04 	addi	sp,sp,-8
 80006c8:	dfc00115 	stw	ra,4(sp)
 80006cc:	df000015 	stw	fp,0(sp)
 80006d0:	d839883a 	mov	fp,sp
	movePlayer(0);
 80006d4:	0009883a 	mov	r4,zero
 80006d8:	80003b00 	call	80003b0 <movePlayer>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x0);
 80006dc:	0007883a 	mov	r3,zero
 80006e0:	00800834 	movhi	r2,32
 80006e4:	10841b04 	addi	r2,r2,4204
 80006e8:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 80006ec:	00800834 	movhi	r2,32
 80006f0:	10841b04 	addi	r2,r2,4204
 80006f4:	10800037 	ldwio	r2,0(r2)
	return;
 80006f8:	0001883a 	nop
}
 80006fc:	e037883a 	mov	sp,fp
 8000700:	dfc00117 	ldw	ra,4(sp)
 8000704:	df000017 	ldw	fp,0(sp)
 8000708:	dec00204 	addi	sp,sp,8
 800070c:	f800283a 	ret

08000710 <timer_isr>:


void timer_isr(void)
{
 8000710:	deffff04 	addi	sp,sp,-4
 8000714:	df000015 	stw	fp,0(sp)
 8000718:	d839883a 	mov	fp,sp

	switch(flag_timer)
 800071c:	d0a64a17 	ldw	r2,-26328(gp)
 8000720:	10000326 	beq	r2,zero,8000730 <timer_isr+0x20>
 8000724:	10800060 	cmpeqi	r2,r2,1
 8000728:	1000041e 	bne	r2,zero,800073c <timer_isr+0x2c>
 800072c:	00000506 	br	8000744 <timer_isr+0x34>
	{
	case 0: // wait state

		flag_timer = 1;
 8000730:	00800044 	movi	r2,1
 8000734:	d0a64a15 	stw	r2,-26328(gp)
		break;
 8000738:	00000206 	br	8000744 <timer_isr+0x34>
	case 1:
		//IOWR_8DIRECT(LCD_BASE, ALT_UP_CHARACTER_LCD_DATA_REG,0x1);
		//IOWR_ALT_UP_CHARACTER_LCD_COMMAND(LCD_BASE, 0x10);
		flag_timer = 0;
 800073c:	d0264a15 	stw	zero,-26328(gp)
		break;
 8000740:	0001883a 	nop
	}

	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYSTEM_TIMER_BASE, 0x09); // Stop timer
 8000744:	00c00244 	movi	r3,9
 8000748:	00800834 	movhi	r2,32
 800074c:	10843904 	addi	r2,r2,4324
 8000750:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYSTEM_TIMER_BASE, 0x0);	// Reset TO bit
 8000754:	0007883a 	mov	r3,zero
 8000758:	00800834 	movhi	r2,32
 800075c:	10843804 	addi	r2,r2,4320
 8000760:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYSTEM_TIMER_BASE, 0x07); // Stop timer
 8000764:	00c001c4 	movi	r3,7
 8000768:	00800834 	movhi	r2,32
 800076c:	10843904 	addi	r2,r2,4324
 8000770:	10c00035 	stwio	r3,0(r2)
	return;
 8000774:	0001883a 	nop
}
 8000778:	e037883a 	mov	sp,fp
 800077c:	df000017 	ldw	fp,0(sp)
 8000780:	dec00104 	addi	sp,sp,4
 8000784:	f800283a 	ret

08000788 <pio_init>:

static void pio_init()
{
 8000788:	defffc04 	addi	sp,sp,-16
 800078c:	dfc00315 	stw	ra,12(sp)
 8000790:	df000215 	stw	fp,8(sp)
 8000794:	df000204 	addi	fp,sp,8
	void* edge_capture_ptr = (void*) &edge_capture;
 8000798:	d0a64f04 	addi	r2,gp,-26308
 800079c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
 80007a0:	00c001c4 	movi	r3,7
 80007a4:	00800834 	movhi	r2,32
 80007a8:	10841a04 	addi	r2,r2,4200
 80007ac:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x00);
 80007b0:	0007883a 	mov	r3,zero
 80007b4:	00800834 	movhi	r2,32
 80007b8:	10841b04 	addi	r2,r2,4204
 80007bc:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(KEYS_IRQ_INTERRUPT_CONTROLLER_ID, KEYS_IRQ, handle_key_interrupts, edge_capture_ptr, 0);
 80007c0:	d8000015 	stw	zero,0(sp)
 80007c4:	e1ffff17 	ldw	r7,-4(fp)
 80007c8:	01820034 	movhi	r6,2048
 80007cc:	31823904 	addi	r6,r6,2276
 80007d0:	000b883a 	mov	r5,zero
 80007d4:	0009883a 	mov	r4,zero
 80007d8:	80017a80 	call	80017a8 <alt_ic_isr_register>
}
 80007dc:	0001883a 	nop
 80007e0:	e037883a 	mov	sp,fp
 80007e4:	dfc00117 	ldw	ra,4(sp)
 80007e8:	df000017 	ldw	fp,0(sp)
 80007ec:	dec00204 	addi	sp,sp,8
 80007f0:	f800283a 	ret

080007f4 <timer_init>:

static void timer_init(float n)
{ //timer initializer function
 80007f4:	defffb04 	addi	sp,sp,-20
 80007f8:	dfc00415 	stw	ra,16(sp)
 80007fc:	df000315 	stw	fp,12(sp)
 8000800:	df000304 	addi	fp,sp,12
 8000804:	e13fff15 	stw	r4,-4(fp)
	void* time_capture_ptr = (void*) &time_capture;
 8000808:	d0a64e04 	addi	r2,gp,-26312
 800080c:	e0bffe15 	stw	r2,-8(fp)
	clock_period = 0xC350 * n; //calculates period in terms of ms
 8000810:	0151d0f4 	movhi	r5,18243
 8000814:	29540004 	addi	r5,r5,20480
 8000818:	e13fff17 	ldw	r4,-4(fp)
 800081c:	8000c380 	call	8000c38 <__mulsf3>
 8000820:	1007883a 	mov	r3,r2
 8000824:	1805883a 	mov	r2,r3
 8000828:	1009883a 	mov	r4,r2
 800082c:	8000b1c0 	call	8000b1c <__fixunssfsi>
 8000830:	d0a65015 	stw	r2,-26304(gp)
	clock_period_l = clock_period & 0x0000ffff;
 8000834:	d0a65017 	ldw	r2,-26304(gp)
 8000838:	10bfffcc 	andi	r2,r2,65535
 800083c:	d0a00315 	stw	r2,-32756(gp)
	clock_period = clock_period >> 16;
 8000840:	d0a65017 	ldw	r2,-26304(gp)
 8000844:	1004d43a 	srli	r2,r2,16
 8000848:	d0a65015 	stw	r2,-26304(gp)
	clock_period_h = clock_period & 0xffff;
 800084c:	d0a65017 	ldw	r2,-26304(gp)
 8000850:	10bfffcc 	andi	r2,r2,65535
 8000854:	d0a00415 	stw	r2,-32752(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYSTEM_TIMER_BASE,0x9);
 8000858:	00c00244 	movi	r3,9
 800085c:	00800834 	movhi	r2,32
 8000860:	10843904 	addi	r2,r2,4324
 8000864:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(SYSTEM_TIMER_BASE,clock_period_l); //0xb280
 8000868:	d0a00317 	ldw	r2,-32756(gp)
 800086c:	1007883a 	mov	r3,r2
 8000870:	00800834 	movhi	r2,32
 8000874:	10843a04 	addi	r2,r2,4328
 8000878:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(SYSTEM_TIMER_BASE,clock_period_h); //0x0EE6
 800087c:	d0a00417 	ldw	r2,-32752(gp)
 8000880:	1007883a 	mov	r3,r2
 8000884:	00800834 	movhi	r2,32
 8000888:	10843b04 	addi	r2,r2,4332
 800088c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYSTEM_TIMER_BASE,0x0);
 8000890:	0007883a 	mov	r3,zero
 8000894:	00800834 	movhi	r2,32
 8000898:	10843804 	addi	r2,r2,4320
 800089c:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(SYSTEM_TIMER_IRQ_INTERRUPT_CONTROLLER_ID, SYSTEM_TIMER_IRQ, timer_isr, time_capture_ptr, 0x0);
 80008a0:	d8000015 	stw	zero,0(sp)
 80008a4:	e1fffe17 	ldw	r7,-8(fp)
 80008a8:	01820034 	movhi	r6,2048
 80008ac:	3181c404 	addi	r6,r6,1808
 80008b0:	01400044 	movi	r5,1
 80008b4:	0009883a 	mov	r4,zero
 80008b8:	80017a80 	call	80017a8 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYSTEM_TIMER_BASE,0x5);
 80008bc:	00c00144 	movi	r3,5
 80008c0:	00800834 	movhi	r2,32
 80008c4:	10843904 	addi	r2,r2,4324
 80008c8:	10c00035 	stwio	r3,0(r2)
}
 80008cc:	0001883a 	nop
 80008d0:	e037883a 	mov	sp,fp
 80008d4:	dfc00117 	ldw	ra,4(sp)
 80008d8:	df000017 	ldw	fp,0(sp)
 80008dc:	dec00204 	addi	sp,sp,8
 80008e0:	f800283a 	ret

080008e4 <handle_key_interrupts>:

void handle_key_interrupts(void* context)
{ // key interrupt handler
 80008e4:	defffc04 	addi	sp,sp,-16
 80008e8:	dfc00315 	stw	ra,12(sp)
 80008ec:	df000215 	stw	fp,8(sp)
 80008f0:	df000204 	addi	fp,sp,8
 80008f4:	e13fff15 	stw	r4,-4(fp)
	volatile int *edge_capture_ptr = (volatile int*)context;
 80008f8:	e0bfff17 	ldw	r2,-4(fp)
 80008fc:	e0bffe15 	stw	r2,-8(fp)
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 8000900:	00800834 	movhi	r2,32
 8000904:	10841b04 	addi	r2,r2,4204
 8000908:	10c00037 	ldwio	r3,0(r2)
 800090c:	e0bffe17 	ldw	r2,-8(fp)
 8000910:	10c00015 	stw	r3,0(r2)
	switch(*edge_capture_ptr)
 8000914:	e0bffe17 	ldw	r2,-8(fp)
 8000918:	10800017 	ldw	r2,0(r2)
 800091c:	10c000a0 	cmpeqi	r3,r2,2
 8000920:	1800071e 	bne	r3,zero,8000940 <handle_key_interrupts+0x5c>
 8000924:	10c00120 	cmpeqi	r3,r2,4
 8000928:	1800071e 	bne	r3,zero,8000948 <handle_key_interrupts+0x64>
 800092c:	10800060 	cmpeqi	r2,r2,1
 8000930:	1000011e 	bne	r2,zero,8000938 <handle_key_interrupts+0x54>
			key_isr2();
			break;
	}


	return;
 8000934:	00000706 	br	8000954 <handle_key_interrupts+0x70>
	volatile int *edge_capture_ptr = (volatile int*)context;
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
	switch(*edge_capture_ptr)
	{
		case 1:
			key_isr();
 8000938:	80006300 	call	8000630 <key_isr>
			break;
 800093c:	00000406 	br	8000950 <handle_key_interrupts+0x6c>
		case 2:
			key_isr1();
 8000940:	80006780 	call	8000678 <key_isr1>
			break;
 8000944:	00000206 	br	8000950 <handle_key_interrupts+0x6c>
		case 4:
			key_isr2();
 8000948:	80006c40 	call	80006c4 <key_isr2>
			break;
 800094c:	0001883a 	nop
	}


	return;
 8000950:	0001883a 	nop
}
 8000954:	e037883a 	mov	sp,fp
 8000958:	dfc00117 	ldw	ra,4(sp)
 800095c:	df000017 	ldw	fp,0(sp)
 8000960:	dec00204 	addi	sp,sp,8
 8000964:	f800283a 	ret

08000968 <display_init>:




void display_init()
{//funciton to shut off seven segment display
 8000968:	defffe04 	addi	sp,sp,-8
 800096c:	df000115 	stw	fp,4(sp)
 8000970:	df000104 	addi	fp,sp,4
	int hex_off = 0xff;
 8000974:	00803fc4 	movi	r2,255
 8000978:	e0bfff15 	stw	r2,-4(fp)
	IOWR_8DIRECT(SEVEN_SEG_0_BASE,0,hex_off);
 800097c:	00800834 	movhi	r2,32
 8000980:	10843404 	addi	r2,r2,4304
 8000984:	e0ffff03 	ldbu	r3,-4(fp)
 8000988:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_1_BASE,0,hex_off);
 800098c:	00800834 	movhi	r2,32
 8000990:	10843004 	addi	r2,r2,4288
 8000994:	e0ffff03 	ldbu	r3,-4(fp)
 8000998:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_2_BASE,0,hex_off);
 800099c:	00800834 	movhi	r2,32
 80009a0:	10842c04 	addi	r2,r2,4272
 80009a4:	e0ffff03 	ldbu	r3,-4(fp)
 80009a8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_3_BASE,0,hex_off);
 80009ac:	00800834 	movhi	r2,32
 80009b0:	10842804 	addi	r2,r2,4256
 80009b4:	e0ffff03 	ldbu	r3,-4(fp)
 80009b8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_4_BASE,0,hex_off);
 80009bc:	00800834 	movhi	r2,32
 80009c0:	10842404 	addi	r2,r2,4240
 80009c4:	e0ffff03 	ldbu	r3,-4(fp)
 80009c8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_5_BASE,0,hex_off);
 80009cc:	00800834 	movhi	r2,32
 80009d0:	10842004 	addi	r2,r2,4224
 80009d4:	e0ffff03 	ldbu	r3,-4(fp)
 80009d8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_6_BASE,0,hex_off);
 80009dc:	00800834 	movhi	r2,32
 80009e0:	10841c04 	addi	r2,r2,4208
 80009e4:	e0ffff03 	ldbu	r3,-4(fp)
 80009e8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(SEVEN_SEG_7_BASE,0,hex_off);
 80009ec:	00840004 	movi	r2,4096
 80009f0:	e0ffff03 	ldbu	r3,-4(fp)
 80009f4:	10c00025 	stbio	r3,0(r2)
};
 80009f8:	0001883a 	nop
 80009fc:	e037883a 	mov	sp,fp
 8000a00:	df000017 	ldw	fp,0(sp)
 8000a04:	dec00104 	addi	sp,sp,4
 8000a08:	f800283a 	ret

08000a0c <printword>:

void printword(char string[]){//display text to the seven segment
 8000a0c:	defff704 	addi	sp,sp,-36
 8000a10:	dfc00815 	stw	ra,32(sp)
 8000a14:	df000715 	stw	fp,28(sp)
 8000a18:	df000704 	addi	fp,sp,28
 8000a1c:	e13fff15 	stw	r4,-4(fp)
	display_init();
 8000a20:	80009680 	call	8000968 <display_init>
	int len = strlen(string);
 8000a24:	e13fff17 	ldw	r4,-4(fp)
 8000a28:	80017100 	call	8001710 <strlen>
 8000a2c:	e0bffd15 	stw	r2,-12(fp)
	char temp_1 = '!'; // holds char of string
 8000a30:	00800844 	movi	r2,33
 8000a34:	e0bffe05 	stb	r2,-8(fp)
	char temp_2 = '!'; // finds same char form alpha pattern array
 8000a38:	00800844 	movi	r2,33
 8000a3c:	e0bffe45 	stb	r2,-7(fp)
	int hex_out = 0;
 8000a40:	e03ff915 	stw	zero,-28(fp)
	int offset = 0;
 8000a44:	e03ffa15 	stw	zero,-24(fp)

	for(int i = 0; i<len;i++)
 8000a48:	e03ffb15 	stw	zero,-20(fp)
 8000a4c:	00002a06 	br	8000af8 <printword+0xec>
	{
		temp_1 = string[i]; // gets the current char of the string
 8000a50:	e0bffb17 	ldw	r2,-20(fp)
 8000a54:	e0ffff17 	ldw	r3,-4(fp)
 8000a58:	1885883a 	add	r2,r3,r2
 8000a5c:	10800003 	ldbu	r2,0(r2)
 8000a60:	e0bffe05 	stb	r2,-8(fp)
		for(int j = 0;j<26;j++)
 8000a64:	e03ffc15 	stw	zero,-16(fp)
 8000a68:	00001606 	br	8000ac4 <printword+0xb8>
		{
			temp_2 = sevseg_list[j].value_alpha;
 8000a6c:	00820034 	movhi	r2,2048
 8000a70:	10911104 	addi	r2,r2,17476
 8000a74:	e0fffc17 	ldw	r3,-16(fp)
 8000a78:	180690fa 	slli	r3,r3,3
 8000a7c:	10c5883a 	add	r2,r2,r3
 8000a80:	10800104 	addi	r2,r2,4
 8000a84:	10800003 	ldbu	r2,0(r2)
 8000a88:	e0bffe45 	stb	r2,-7(fp)
			if (temp_1 == temp_2)
 8000a8c:	e0fffe07 	ldb	r3,-8(fp)
 8000a90:	e0bffe47 	ldb	r2,-7(fp)
 8000a94:	1880081e 	bne	r3,r2,8000ab8 <printword+0xac>
			{
				hex_out = (sevseg_list[j].value_hex);
 8000a98:	00820034 	movhi	r2,2048
 8000a9c:	10911104 	addi	r2,r2,17476
 8000aa0:	e0fffc17 	ldw	r3,-16(fp)
 8000aa4:	180690fa 	slli	r3,r3,3
 8000aa8:	10c5883a 	add	r2,r2,r3
 8000aac:	10800017 	ldw	r2,0(r2)
 8000ab0:	e0bff915 	stw	r2,-28(fp)
				break;
 8000ab4:	00000606 	br	8000ad0 <printword+0xc4>
	int offset = 0;

	for(int i = 0; i<len;i++)
	{
		temp_1 = string[i]; // gets the current char of the string
		for(int j = 0;j<26;j++)
 8000ab8:	e0bffc17 	ldw	r2,-16(fp)
 8000abc:	10800044 	addi	r2,r2,1
 8000ac0:	e0bffc15 	stw	r2,-16(fp)
 8000ac4:	e0bffc17 	ldw	r2,-16(fp)
 8000ac8:	10800690 	cmplti	r2,r2,26
 8000acc:	103fe71e 	bne	r2,zero,8000a6c <__alt_data_end+0xf8000a6c>
				hex_out = (sevseg_list[j].value_hex);
				break;
			}
		}

		IOWR_8DIRECT(SEVEN_SEG_7_BASE,offset,hex_out);
 8000ad0:	e0bffa17 	ldw	r2,-24(fp)
 8000ad4:	10840004 	addi	r2,r2,4096
 8000ad8:	e0fff903 	ldbu	r3,-28(fp)
 8000adc:	10c00025 	stbio	r3,0(r2)
		offset = offset + 16;
 8000ae0:	e0bffa17 	ldw	r2,-24(fp)
 8000ae4:	10800404 	addi	r2,r2,16
 8000ae8:	e0bffa15 	stw	r2,-24(fp)
	char temp_1 = '!'; // holds char of string
	char temp_2 = '!'; // finds same char form alpha pattern array
	int hex_out = 0;
	int offset = 0;

	for(int i = 0; i<len;i++)
 8000aec:	e0bffb17 	ldw	r2,-20(fp)
 8000af0:	10800044 	addi	r2,r2,1
 8000af4:	e0bffb15 	stw	r2,-20(fp)
 8000af8:	e0fffb17 	ldw	r3,-20(fp)
 8000afc:	e0bffd17 	ldw	r2,-12(fp)
 8000b00:	18bfd316 	blt	r3,r2,8000a50 <__alt_data_end+0xf8000a50>

		IOWR_8DIRECT(SEVEN_SEG_7_BASE,offset,hex_out);
		offset = offset + 16;
	}

}
 8000b04:	0001883a 	nop
 8000b08:	e037883a 	mov	sp,fp
 8000b0c:	dfc00117 	ldw	ra,4(sp)
 8000b10:	df000017 	ldw	fp,0(sp)
 8000b14:	dec00204 	addi	sp,sp,8
 8000b18:	f800283a 	ret

08000b1c <__fixunssfsi>:
 8000b1c:	defffd04 	addi	sp,sp,-12
 8000b20:	dc000015 	stw	r16,0(sp)
 8000b24:	0413c034 	movhi	r16,20224
 8000b28:	800b883a 	mov	r5,r16
 8000b2c:	dc400115 	stw	r17,4(sp)
 8000b30:	dfc00215 	stw	ra,8(sp)
 8000b34:	2023883a 	mov	r17,r4
 8000b38:	8000b7c0 	call	8000b7c <__gesf2>
 8000b3c:	1000070e 	bge	r2,zero,8000b5c <__fixunssfsi+0x40>
 8000b40:	8809883a 	mov	r4,r17
 8000b44:	80015180 	call	8001518 <__fixsfsi>
 8000b48:	dfc00217 	ldw	ra,8(sp)
 8000b4c:	dc400117 	ldw	r17,4(sp)
 8000b50:	dc000017 	ldw	r16,0(sp)
 8000b54:	dec00304 	addi	sp,sp,12
 8000b58:	f800283a 	ret
 8000b5c:	800b883a 	mov	r5,r16
 8000b60:	8809883a 	mov	r4,r17
 8000b64:	80010340 	call	8001034 <__subsf3>
 8000b68:	1009883a 	mov	r4,r2
 8000b6c:	80015180 	call	8001518 <__fixsfsi>
 8000b70:	00e00034 	movhi	r3,32768
 8000b74:	10c5883a 	add	r2,r2,r3
 8000b78:	003ff306 	br	8000b48 <__alt_data_end+0xf8000b48>

08000b7c <__gesf2>:
 8000b7c:	2004d5fa 	srli	r2,r4,23
 8000b80:	2806d5fa 	srli	r3,r5,23
 8000b84:	01802034 	movhi	r6,128
 8000b88:	31bfffc4 	addi	r6,r6,-1
 8000b8c:	10803fcc 	andi	r2,r2,255
 8000b90:	01c03fc4 	movi	r7,255
 8000b94:	3110703a 	and	r8,r6,r4
 8000b98:	18c03fcc 	andi	r3,r3,255
 8000b9c:	314c703a 	and	r6,r6,r5
 8000ba0:	2008d7fa 	srli	r4,r4,31
 8000ba4:	280ad7fa 	srli	r5,r5,31
 8000ba8:	11c01926 	beq	r2,r7,8000c10 <__gesf2+0x94>
 8000bac:	01c03fc4 	movi	r7,255
 8000bb0:	19c00f26 	beq	r3,r7,8000bf0 <__gesf2+0x74>
 8000bb4:	1000061e 	bne	r2,zero,8000bd0 <__gesf2+0x54>
 8000bb8:	400f003a 	cmpeq	r7,r8,zero
 8000bbc:	1800071e 	bne	r3,zero,8000bdc <__gesf2+0x60>
 8000bc0:	3000061e 	bne	r6,zero,8000bdc <__gesf2+0x60>
 8000bc4:	0005883a 	mov	r2,zero
 8000bc8:	40000e1e 	bne	r8,zero,8000c04 <__gesf2+0x88>
 8000bcc:	f800283a 	ret
 8000bd0:	18000a1e 	bne	r3,zero,8000bfc <__gesf2+0x80>
 8000bd4:	30000b26 	beq	r6,zero,8000c04 <__gesf2+0x88>
 8000bd8:	000f883a 	mov	r7,zero
 8000bdc:	29403fcc 	andi	r5,r5,255
 8000be0:	38000726 	beq	r7,zero,8000c00 <__gesf2+0x84>
 8000be4:	28000826 	beq	r5,zero,8000c08 <__gesf2+0x8c>
 8000be8:	00800044 	movi	r2,1
 8000bec:	f800283a 	ret
 8000bf0:	303ff026 	beq	r6,zero,8000bb4 <__alt_data_end+0xf8000bb4>
 8000bf4:	00bfff84 	movi	r2,-2
 8000bf8:	f800283a 	ret
 8000bfc:	29403fcc 	andi	r5,r5,255
 8000c00:	21400526 	beq	r4,r5,8000c18 <__gesf2+0x9c>
 8000c04:	203ff826 	beq	r4,zero,8000be8 <__alt_data_end+0xf8000be8>
 8000c08:	00bfffc4 	movi	r2,-1
 8000c0c:	f800283a 	ret
 8000c10:	403fe626 	beq	r8,zero,8000bac <__alt_data_end+0xf8000bac>
 8000c14:	003ff706 	br	8000bf4 <__alt_data_end+0xf8000bf4>
 8000c18:	18bffa16 	blt	r3,r2,8000c04 <__alt_data_end+0xf8000c04>
 8000c1c:	10c00216 	blt	r2,r3,8000c28 <__gesf2+0xac>
 8000c20:	323ff836 	bltu	r6,r8,8000c04 <__alt_data_end+0xf8000c04>
 8000c24:	4180022e 	bgeu	r8,r6,8000c30 <__gesf2+0xb4>
 8000c28:	203fef1e 	bne	r4,zero,8000be8 <__alt_data_end+0xf8000be8>
 8000c2c:	003ff606 	br	8000c08 <__alt_data_end+0xf8000c08>
 8000c30:	0005883a 	mov	r2,zero
 8000c34:	f800283a 	ret

08000c38 <__mulsf3>:
 8000c38:	defff504 	addi	sp,sp,-44
 8000c3c:	dc000115 	stw	r16,4(sp)
 8000c40:	2020d5fa 	srli	r16,r4,23
 8000c44:	dd400615 	stw	r21,24(sp)
 8000c48:	202ad7fa 	srli	r21,r4,31
 8000c4c:	dc800315 	stw	r18,12(sp)
 8000c50:	04802034 	movhi	r18,128
 8000c54:	df000915 	stw	fp,36(sp)
 8000c58:	dd000515 	stw	r20,20(sp)
 8000c5c:	94bfffc4 	addi	r18,r18,-1
 8000c60:	dfc00a15 	stw	ra,40(sp)
 8000c64:	ddc00815 	stw	r23,32(sp)
 8000c68:	dd800715 	stw	r22,28(sp)
 8000c6c:	dcc00415 	stw	r19,16(sp)
 8000c70:	dc400215 	stw	r17,8(sp)
 8000c74:	84003fcc 	andi	r16,r16,255
 8000c78:	9124703a 	and	r18,r18,r4
 8000c7c:	a829883a 	mov	r20,r21
 8000c80:	af003fcc 	andi	fp,r21,255
 8000c84:	80005426 	beq	r16,zero,8000dd8 <__mulsf3+0x1a0>
 8000c88:	00803fc4 	movi	r2,255
 8000c8c:	80802f26 	beq	r16,r2,8000d4c <__mulsf3+0x114>
 8000c90:	91002034 	orhi	r4,r18,128
 8000c94:	202490fa 	slli	r18,r4,3
 8000c98:	843fe044 	addi	r16,r16,-127
 8000c9c:	0023883a 	mov	r17,zero
 8000ca0:	002f883a 	mov	r23,zero
 8000ca4:	2804d5fa 	srli	r2,r5,23
 8000ca8:	282cd7fa 	srli	r22,r5,31
 8000cac:	01002034 	movhi	r4,128
 8000cb0:	213fffc4 	addi	r4,r4,-1
 8000cb4:	10803fcc 	andi	r2,r2,255
 8000cb8:	2166703a 	and	r19,r4,r5
 8000cbc:	b1803fcc 	andi	r6,r22,255
 8000cc0:	10004c26 	beq	r2,zero,8000df4 <__mulsf3+0x1bc>
 8000cc4:	00c03fc4 	movi	r3,255
 8000cc8:	10c04726 	beq	r2,r3,8000de8 <__mulsf3+0x1b0>
 8000ccc:	99002034 	orhi	r4,r19,128
 8000cd0:	202690fa 	slli	r19,r4,3
 8000cd4:	10bfe044 	addi	r2,r2,-127
 8000cd8:	0007883a 	mov	r3,zero
 8000cdc:	80a1883a 	add	r16,r16,r2
 8000ce0:	010003c4 	movi	r4,15
 8000ce4:	1c44b03a 	or	r2,r3,r17
 8000ce8:	b56af03a 	xor	r21,r22,r21
 8000cec:	81c00044 	addi	r7,r16,1
 8000cf0:	20806b36 	bltu	r4,r2,8000ea0 <__mulsf3+0x268>
 8000cf4:	100490ba 	slli	r2,r2,2
 8000cf8:	01020034 	movhi	r4,2048
 8000cfc:	21034304 	addi	r4,r4,3340
 8000d00:	1105883a 	add	r2,r2,r4
 8000d04:	10800017 	ldw	r2,0(r2)
 8000d08:	1000683a 	jmp	r2
 8000d0c:	08000ea0 	cmpeqi	zero,at,58
 8000d10:	08000d60 	cmpeqi	zero,at,53
 8000d14:	08000d60 	cmpeqi	zero,at,53
 8000d18:	08000d5c 	xori	zero,at,53
 8000d1c:	08000e84 	addi	zero,at,58
 8000d20:	08000e84 	addi	zero,at,58
 8000d24:	08000e70 	cmpltui	zero,at,57
 8000d28:	08000d5c 	xori	zero,at,53
 8000d2c:	08000e84 	addi	zero,at,58
 8000d30:	08000e70 	cmpltui	zero,at,57
 8000d34:	08000e84 	addi	zero,at,58
 8000d38:	08000d5c 	xori	zero,at,53
 8000d3c:	08000e90 	cmplti	zero,at,58
 8000d40:	08000e90 	cmplti	zero,at,58
 8000d44:	08000e90 	cmplti	zero,at,58
 8000d48:	08000f6c 	andhi	zero,at,61
 8000d4c:	90003b1e 	bne	r18,zero,8000e3c <__mulsf3+0x204>
 8000d50:	04400204 	movi	r17,8
 8000d54:	05c00084 	movi	r23,2
 8000d58:	003fd206 	br	8000ca4 <__alt_data_end+0xf8000ca4>
 8000d5c:	302b883a 	mov	r21,r6
 8000d60:	00800084 	movi	r2,2
 8000d64:	18802626 	beq	r3,r2,8000e00 <__mulsf3+0x1c8>
 8000d68:	008000c4 	movi	r2,3
 8000d6c:	1880ab26 	beq	r3,r2,800101c <__mulsf3+0x3e4>
 8000d70:	00800044 	movi	r2,1
 8000d74:	1880a21e 	bne	r3,r2,8001000 <__mulsf3+0x3c8>
 8000d78:	a829883a 	mov	r20,r21
 8000d7c:	0007883a 	mov	r3,zero
 8000d80:	0009883a 	mov	r4,zero
 8000d84:	18803fcc 	andi	r2,r3,255
 8000d88:	100695fa 	slli	r3,r2,23
 8000d8c:	a0803fcc 	andi	r2,r20,255
 8000d90:	100a97fa 	slli	r5,r2,31
 8000d94:	00802034 	movhi	r2,128
 8000d98:	10bfffc4 	addi	r2,r2,-1
 8000d9c:	2084703a 	and	r2,r4,r2
 8000da0:	10c4b03a 	or	r2,r2,r3
 8000da4:	1144b03a 	or	r2,r2,r5
 8000da8:	dfc00a17 	ldw	ra,40(sp)
 8000dac:	df000917 	ldw	fp,36(sp)
 8000db0:	ddc00817 	ldw	r23,32(sp)
 8000db4:	dd800717 	ldw	r22,28(sp)
 8000db8:	dd400617 	ldw	r21,24(sp)
 8000dbc:	dd000517 	ldw	r20,20(sp)
 8000dc0:	dcc00417 	ldw	r19,16(sp)
 8000dc4:	dc800317 	ldw	r18,12(sp)
 8000dc8:	dc400217 	ldw	r17,8(sp)
 8000dcc:	dc000117 	ldw	r16,4(sp)
 8000dd0:	dec00b04 	addi	sp,sp,44
 8000dd4:	f800283a 	ret
 8000dd8:	90000d1e 	bne	r18,zero,8000e10 <__mulsf3+0x1d8>
 8000ddc:	04400104 	movi	r17,4
 8000de0:	05c00044 	movi	r23,1
 8000de4:	003faf06 	br	8000ca4 <__alt_data_end+0xf8000ca4>
 8000de8:	9806c03a 	cmpne	r3,r19,zero
 8000dec:	18c00084 	addi	r3,r3,2
 8000df0:	003fba06 	br	8000cdc <__alt_data_end+0xf8000cdc>
 8000df4:	9800141e 	bne	r19,zero,8000e48 <__mulsf3+0x210>
 8000df8:	00c00044 	movi	r3,1
 8000dfc:	003fb706 	br	8000cdc <__alt_data_end+0xf8000cdc>
 8000e00:	a829883a 	mov	r20,r21
 8000e04:	00ffffc4 	movi	r3,-1
 8000e08:	0009883a 	mov	r4,zero
 8000e0c:	003fdd06 	br	8000d84 <__alt_data_end+0xf8000d84>
 8000e10:	9009883a 	mov	r4,r18
 8000e14:	d9400015 	stw	r5,0(sp)
 8000e18:	80016ac0 	call	80016ac <__clzsi2>
 8000e1c:	10fffec4 	addi	r3,r2,-5
 8000e20:	10801d84 	addi	r2,r2,118
 8000e24:	90e4983a 	sll	r18,r18,r3
 8000e28:	00a1c83a 	sub	r16,zero,r2
 8000e2c:	0023883a 	mov	r17,zero
 8000e30:	002f883a 	mov	r23,zero
 8000e34:	d9400017 	ldw	r5,0(sp)
 8000e38:	003f9a06 	br	8000ca4 <__alt_data_end+0xf8000ca4>
 8000e3c:	04400304 	movi	r17,12
 8000e40:	05c000c4 	movi	r23,3
 8000e44:	003f9706 	br	8000ca4 <__alt_data_end+0xf8000ca4>
 8000e48:	9809883a 	mov	r4,r19
 8000e4c:	d9800015 	stw	r6,0(sp)
 8000e50:	80016ac0 	call	80016ac <__clzsi2>
 8000e54:	10fffec4 	addi	r3,r2,-5
 8000e58:	10801d84 	addi	r2,r2,118
 8000e5c:	98e6983a 	sll	r19,r19,r3
 8000e60:	0085c83a 	sub	r2,zero,r2
 8000e64:	0007883a 	mov	r3,zero
 8000e68:	d9800017 	ldw	r6,0(sp)
 8000e6c:	003f9b06 	br	8000cdc <__alt_data_end+0xf8000cdc>
 8000e70:	01002034 	movhi	r4,128
 8000e74:	0029883a 	mov	r20,zero
 8000e78:	213fffc4 	addi	r4,r4,-1
 8000e7c:	00ffffc4 	movi	r3,-1
 8000e80:	003fc006 	br	8000d84 <__alt_data_end+0xf8000d84>
 8000e84:	9027883a 	mov	r19,r18
 8000e88:	b807883a 	mov	r3,r23
 8000e8c:	003fb406 	br	8000d60 <__alt_data_end+0xf8000d60>
 8000e90:	9027883a 	mov	r19,r18
 8000e94:	e02b883a 	mov	r21,fp
 8000e98:	b807883a 	mov	r3,r23
 8000e9c:	003fb006 	br	8000d60 <__alt_data_end+0xf8000d60>
 8000ea0:	9004d43a 	srli	r2,r18,16
 8000ea4:	9810d43a 	srli	r8,r19,16
 8000ea8:	94bfffcc 	andi	r18,r18,65535
 8000eac:	993fffcc 	andi	r4,r19,65535
 8000eb0:	910d383a 	mul	r6,r18,r4
 8000eb4:	20a7383a 	mul	r19,r4,r2
 8000eb8:	9225383a 	mul	r18,r18,r8
 8000ebc:	3006d43a 	srli	r3,r6,16
 8000ec0:	1211383a 	mul	r8,r2,r8
 8000ec4:	94e5883a 	add	r18,r18,r19
 8000ec8:	1c87883a 	add	r3,r3,r18
 8000ecc:	1cc0022e 	bgeu	r3,r19,8000ed8 <__mulsf3+0x2a0>
 8000ed0:	00800074 	movhi	r2,1
 8000ed4:	4091883a 	add	r8,r8,r2
 8000ed8:	1804943a 	slli	r2,r3,16
 8000edc:	31bfffcc 	andi	r6,r6,65535
 8000ee0:	1806d43a 	srli	r3,r3,16
 8000ee4:	1185883a 	add	r2,r2,r6
 8000ee8:	102691ba 	slli	r19,r2,6
 8000eec:	1a07883a 	add	r3,r3,r8
 8000ef0:	1004d6ba 	srli	r2,r2,26
 8000ef4:	180891ba 	slli	r4,r3,6
 8000ef8:	9826c03a 	cmpne	r19,r19,zero
 8000efc:	9884b03a 	or	r2,r19,r2
 8000f00:	1126b03a 	or	r19,r2,r4
 8000f04:	9882002c 	andhi	r2,r19,2048
 8000f08:	10000426 	beq	r2,zero,8000f1c <__mulsf3+0x2e4>
 8000f0c:	9804d07a 	srli	r2,r19,1
 8000f10:	9900004c 	andi	r4,r19,1
 8000f14:	3821883a 	mov	r16,r7
 8000f18:	1126b03a 	or	r19,r2,r4
 8000f1c:	80c01fc4 	addi	r3,r16,127
 8000f20:	00c0210e 	bge	zero,r3,8000fa8 <__mulsf3+0x370>
 8000f24:	988001cc 	andi	r2,r19,7
 8000f28:	10000426 	beq	r2,zero,8000f3c <__mulsf3+0x304>
 8000f2c:	988003cc 	andi	r2,r19,15
 8000f30:	01000104 	movi	r4,4
 8000f34:	11000126 	beq	r2,r4,8000f3c <__mulsf3+0x304>
 8000f38:	9927883a 	add	r19,r19,r4
 8000f3c:	9882002c 	andhi	r2,r19,2048
 8000f40:	10000426 	beq	r2,zero,8000f54 <__mulsf3+0x31c>
 8000f44:	00be0034 	movhi	r2,63488
 8000f48:	10bfffc4 	addi	r2,r2,-1
 8000f4c:	80c02004 	addi	r3,r16,128
 8000f50:	98a6703a 	and	r19,r19,r2
 8000f54:	00803f84 	movi	r2,254
 8000f58:	10ffa916 	blt	r2,r3,8000e00 <__alt_data_end+0xf8000e00>
 8000f5c:	980891ba 	slli	r4,r19,6
 8000f60:	a829883a 	mov	r20,r21
 8000f64:	2008d27a 	srli	r4,r4,9
 8000f68:	003f8606 	br	8000d84 <__alt_data_end+0xf8000d84>
 8000f6c:	9080102c 	andhi	r2,r18,64
 8000f70:	10000826 	beq	r2,zero,8000f94 <__mulsf3+0x35c>
 8000f74:	9880102c 	andhi	r2,r19,64
 8000f78:	1000061e 	bne	r2,zero,8000f94 <__mulsf3+0x35c>
 8000f7c:	00802034 	movhi	r2,128
 8000f80:	99001034 	orhi	r4,r19,64
 8000f84:	10bfffc4 	addi	r2,r2,-1
 8000f88:	b029883a 	mov	r20,r22
 8000f8c:	2088703a 	and	r4,r4,r2
 8000f90:	003fba06 	br	8000e7c <__alt_data_end+0xf8000e7c>
 8000f94:	00802034 	movhi	r2,128
 8000f98:	91001034 	orhi	r4,r18,64
 8000f9c:	10bfffc4 	addi	r2,r2,-1
 8000fa0:	2088703a 	and	r4,r4,r2
 8000fa4:	003fb506 	br	8000e7c <__alt_data_end+0xf8000e7c>
 8000fa8:	00800044 	movi	r2,1
 8000fac:	10c7c83a 	sub	r3,r2,r3
 8000fb0:	008006c4 	movi	r2,27
 8000fb4:	10ff7016 	blt	r2,r3,8000d78 <__alt_data_end+0xf8000d78>
 8000fb8:	00800804 	movi	r2,32
 8000fbc:	10c5c83a 	sub	r2,r2,r3
 8000fc0:	9884983a 	sll	r2,r19,r2
 8000fc4:	98c6d83a 	srl	r3,r19,r3
 8000fc8:	1004c03a 	cmpne	r2,r2,zero
 8000fcc:	1884b03a 	or	r2,r3,r2
 8000fd0:	10c001cc 	andi	r3,r2,7
 8000fd4:	18000426 	beq	r3,zero,8000fe8 <__mulsf3+0x3b0>
 8000fd8:	10c003cc 	andi	r3,r2,15
 8000fdc:	01000104 	movi	r4,4
 8000fe0:	19000126 	beq	r3,r4,8000fe8 <__mulsf3+0x3b0>
 8000fe4:	1105883a 	add	r2,r2,r4
 8000fe8:	10c1002c 	andhi	r3,r2,1024
 8000fec:	18000626 	beq	r3,zero,8001008 <__mulsf3+0x3d0>
 8000ff0:	a829883a 	mov	r20,r21
 8000ff4:	00c00044 	movi	r3,1
 8000ff8:	0009883a 	mov	r4,zero
 8000ffc:	003f6106 	br	8000d84 <__alt_data_end+0xf8000d84>
 8001000:	3821883a 	mov	r16,r7
 8001004:	003fc506 	br	8000f1c <__alt_data_end+0xf8000f1c>
 8001008:	100491ba 	slli	r2,r2,6
 800100c:	a829883a 	mov	r20,r21
 8001010:	0007883a 	mov	r3,zero
 8001014:	1008d27a 	srli	r4,r2,9
 8001018:	003f5a06 	br	8000d84 <__alt_data_end+0xf8000d84>
 800101c:	00802034 	movhi	r2,128
 8001020:	99001034 	orhi	r4,r19,64
 8001024:	10bfffc4 	addi	r2,r2,-1
 8001028:	a829883a 	mov	r20,r21
 800102c:	2088703a 	and	r4,r4,r2
 8001030:	003f9206 	br	8000e7c <__alt_data_end+0xf8000e7c>

08001034 <__subsf3>:
 8001034:	defffc04 	addi	sp,sp,-16
 8001038:	280cd5fa 	srli	r6,r5,23
 800103c:	dc000015 	stw	r16,0(sp)
 8001040:	01c02034 	movhi	r7,128
 8001044:	2020d5fa 	srli	r16,r4,23
 8001048:	39ffffc4 	addi	r7,r7,-1
 800104c:	3906703a 	and	r3,r7,r4
 8001050:	dc400115 	stw	r17,4(sp)
 8001054:	394e703a 	and	r7,r7,r5
 8001058:	2022d7fa 	srli	r17,r4,31
 800105c:	dfc00315 	stw	ra,12(sp)
 8001060:	dc800215 	stw	r18,8(sp)
 8001064:	31803fcc 	andi	r6,r6,255
 8001068:	01003fc4 	movi	r4,255
 800106c:	84003fcc 	andi	r16,r16,255
 8001070:	180690fa 	slli	r3,r3,3
 8001074:	2804d7fa 	srli	r2,r5,31
 8001078:	380e90fa 	slli	r7,r7,3
 800107c:	31006d26 	beq	r6,r4,8001234 <__subsf3+0x200>
 8001080:	1080005c 	xori	r2,r2,1
 8001084:	8189c83a 	sub	r4,r16,r6
 8001088:	14404f26 	beq	r2,r17,80011c8 <__subsf3+0x194>
 800108c:	0100770e 	bge	zero,r4,800126c <__subsf3+0x238>
 8001090:	30001e1e 	bne	r6,zero,800110c <__subsf3+0xd8>
 8001094:	38006a1e 	bne	r7,zero,8001240 <__subsf3+0x20c>
 8001098:	188001cc 	andi	r2,r3,7
 800109c:	10000426 	beq	r2,zero,80010b0 <__subsf3+0x7c>
 80010a0:	188003cc 	andi	r2,r3,15
 80010a4:	01000104 	movi	r4,4
 80010a8:	11000126 	beq	r2,r4,80010b0 <__subsf3+0x7c>
 80010ac:	1907883a 	add	r3,r3,r4
 80010b0:	1881002c 	andhi	r2,r3,1024
 80010b4:	10003926 	beq	r2,zero,800119c <__subsf3+0x168>
 80010b8:	84000044 	addi	r16,r16,1
 80010bc:	00803fc4 	movi	r2,255
 80010c0:	80807526 	beq	r16,r2,8001298 <__subsf3+0x264>
 80010c4:	180691ba 	slli	r3,r3,6
 80010c8:	8880004c 	andi	r2,r17,1
 80010cc:	180ad27a 	srli	r5,r3,9
 80010d0:	84003fcc 	andi	r16,r16,255
 80010d4:	800695fa 	slli	r3,r16,23
 80010d8:	10803fcc 	andi	r2,r2,255
 80010dc:	01002034 	movhi	r4,128
 80010e0:	213fffc4 	addi	r4,r4,-1
 80010e4:	100497fa 	slli	r2,r2,31
 80010e8:	2920703a 	and	r16,r5,r4
 80010ec:	80e0b03a 	or	r16,r16,r3
 80010f0:	8084b03a 	or	r2,r16,r2
 80010f4:	dfc00317 	ldw	ra,12(sp)
 80010f8:	dc800217 	ldw	r18,8(sp)
 80010fc:	dc400117 	ldw	r17,4(sp)
 8001100:	dc000017 	ldw	r16,0(sp)
 8001104:	dec00404 	addi	sp,sp,16
 8001108:	f800283a 	ret
 800110c:	00803fc4 	movi	r2,255
 8001110:	80bfe126 	beq	r16,r2,8001098 <__alt_data_end+0xf8001098>
 8001114:	39c10034 	orhi	r7,r7,1024
 8001118:	008006c4 	movi	r2,27
 800111c:	11007416 	blt	r2,r4,80012f0 <__subsf3+0x2bc>
 8001120:	00800804 	movi	r2,32
 8001124:	1105c83a 	sub	r2,r2,r4
 8001128:	3884983a 	sll	r2,r7,r2
 800112c:	390ed83a 	srl	r7,r7,r4
 8001130:	1008c03a 	cmpne	r4,r2,zero
 8001134:	390eb03a 	or	r7,r7,r4
 8001138:	19c7c83a 	sub	r3,r3,r7
 800113c:	1881002c 	andhi	r2,r3,1024
 8001140:	10001426 	beq	r2,zero,8001194 <__subsf3+0x160>
 8001144:	04810034 	movhi	r18,1024
 8001148:	94bfffc4 	addi	r18,r18,-1
 800114c:	1ca4703a 	and	r18,r3,r18
 8001150:	9009883a 	mov	r4,r18
 8001154:	80016ac0 	call	80016ac <__clzsi2>
 8001158:	10bffec4 	addi	r2,r2,-5
 800115c:	90a4983a 	sll	r18,r18,r2
 8001160:	14005116 	blt	r2,r16,80012a8 <__subsf3+0x274>
 8001164:	1405c83a 	sub	r2,r2,r16
 8001168:	10c00044 	addi	r3,r2,1
 800116c:	00800804 	movi	r2,32
 8001170:	10c5c83a 	sub	r2,r2,r3
 8001174:	9084983a 	sll	r2,r18,r2
 8001178:	90e4d83a 	srl	r18,r18,r3
 800117c:	0021883a 	mov	r16,zero
 8001180:	1006c03a 	cmpne	r3,r2,zero
 8001184:	90c6b03a 	or	r3,r18,r3
 8001188:	003fc306 	br	8001098 <__alt_data_end+0xf8001098>
 800118c:	2000e026 	beq	r4,zero,8001510 <__subsf3+0x4dc>
 8001190:	2007883a 	mov	r3,r4
 8001194:	188001cc 	andi	r2,r3,7
 8001198:	103fc11e 	bne	r2,zero,80010a0 <__alt_data_end+0xf80010a0>
 800119c:	180ad0fa 	srli	r5,r3,3
 80011a0:	00c03fc4 	movi	r3,255
 80011a4:	8880004c 	andi	r2,r17,1
 80011a8:	80c0031e 	bne	r16,r3,80011b8 <__subsf3+0x184>
 80011ac:	28006d26 	beq	r5,zero,8001364 <__subsf3+0x330>
 80011b0:	29401034 	orhi	r5,r5,64
 80011b4:	043fffc4 	movi	r16,-1
 80011b8:	00c02034 	movhi	r3,128
 80011bc:	18ffffc4 	addi	r3,r3,-1
 80011c0:	28ca703a 	and	r5,r5,r3
 80011c4:	003fc206 	br	80010d0 <__alt_data_end+0xf80010d0>
 80011c8:	01003c0e 	bge	zero,r4,80012bc <__subsf3+0x288>
 80011cc:	30002126 	beq	r6,zero,8001254 <__subsf3+0x220>
 80011d0:	01403fc4 	movi	r5,255
 80011d4:	817fb026 	beq	r16,r5,8001098 <__alt_data_end+0xf8001098>
 80011d8:	39c10034 	orhi	r7,r7,1024
 80011dc:	014006c4 	movi	r5,27
 80011e0:	29007416 	blt	r5,r4,80013b4 <__subsf3+0x380>
 80011e4:	01400804 	movi	r5,32
 80011e8:	290bc83a 	sub	r5,r5,r4
 80011ec:	394a983a 	sll	r5,r7,r5
 80011f0:	390ed83a 	srl	r7,r7,r4
 80011f4:	2808c03a 	cmpne	r4,r5,zero
 80011f8:	390eb03a 	or	r7,r7,r4
 80011fc:	19c7883a 	add	r3,r3,r7
 8001200:	1901002c 	andhi	r4,r3,1024
 8001204:	20003826 	beq	r4,zero,80012e8 <__subsf3+0x2b4>
 8001208:	84000044 	addi	r16,r16,1
 800120c:	01003fc4 	movi	r4,255
 8001210:	81005426 	beq	r16,r4,8001364 <__subsf3+0x330>
 8001214:	1023883a 	mov	r17,r2
 8001218:	00bf0034 	movhi	r2,64512
 800121c:	10bfffc4 	addi	r2,r2,-1
 8001220:	1900004c 	andi	r4,r3,1
 8001224:	1886703a 	and	r3,r3,r2
 8001228:	1806d07a 	srli	r3,r3,1
 800122c:	1906b03a 	or	r3,r3,r4
 8001230:	003f9906 	br	8001098 <__alt_data_end+0xf8001098>
 8001234:	383f9226 	beq	r7,zero,8001080 <__alt_data_end+0xf8001080>
 8001238:	10803fcc 	andi	r2,r2,255
 800123c:	003f9106 	br	8001084 <__alt_data_end+0xf8001084>
 8001240:	213fffc4 	addi	r4,r4,-1
 8001244:	203fbc26 	beq	r4,zero,8001138 <__alt_data_end+0xf8001138>
 8001248:	00803fc4 	movi	r2,255
 800124c:	80bfb21e 	bne	r16,r2,8001118 <__alt_data_end+0xf8001118>
 8001250:	003f9106 	br	8001098 <__alt_data_end+0xf8001098>
 8001254:	383f9026 	beq	r7,zero,8001098 <__alt_data_end+0xf8001098>
 8001258:	213fffc4 	addi	r4,r4,-1
 800125c:	203fe726 	beq	r4,zero,80011fc <__alt_data_end+0xf80011fc>
 8001260:	01403fc4 	movi	r5,255
 8001264:	817fdd1e 	bne	r16,r5,80011dc <__alt_data_end+0xf80011dc>
 8001268:	003f8b06 	br	8001098 <__alt_data_end+0xf8001098>
 800126c:	2000221e 	bne	r4,zero,80012f8 <__subsf3+0x2c4>
 8001270:	81000044 	addi	r4,r16,1
 8001274:	21003fcc 	andi	r4,r4,255
 8001278:	01400044 	movi	r5,1
 800127c:	2900470e 	bge	r5,r4,800139c <__subsf3+0x368>
 8001280:	19e5c83a 	sub	r18,r3,r7
 8001284:	9141002c 	andhi	r5,r18,1024
 8001288:	28002d26 	beq	r5,zero,8001340 <__subsf3+0x30c>
 800128c:	38e5c83a 	sub	r18,r7,r3
 8001290:	1023883a 	mov	r17,r2
 8001294:	003fae06 	br	8001150 <__alt_data_end+0xf8001150>
 8001298:	8880004c 	andi	r2,r17,1
 800129c:	043fffc4 	movi	r16,-1
 80012a0:	000b883a 	mov	r5,zero
 80012a4:	003f8a06 	br	80010d0 <__alt_data_end+0xf80010d0>
 80012a8:	00ff0034 	movhi	r3,64512
 80012ac:	18ffffc4 	addi	r3,r3,-1
 80012b0:	80a1c83a 	sub	r16,r16,r2
 80012b4:	90c6703a 	and	r3,r18,r3
 80012b8:	003f7706 	br	8001098 <__alt_data_end+0xf8001098>
 80012bc:	2000431e 	bne	r4,zero,80013cc <__subsf3+0x398>
 80012c0:	81000044 	addi	r4,r16,1
 80012c4:	21803fcc 	andi	r6,r4,255
 80012c8:	01400044 	movi	r5,1
 80012cc:	2980280e 	bge	r5,r6,8001370 <__subsf3+0x33c>
 80012d0:	01403fc4 	movi	r5,255
 80012d4:	21402326 	beq	r4,r5,8001364 <__subsf3+0x330>
 80012d8:	19c7883a 	add	r3,r3,r7
 80012dc:	1806d07a 	srli	r3,r3,1
 80012e0:	2021883a 	mov	r16,r4
 80012e4:	003f6c06 	br	8001098 <__alt_data_end+0xf8001098>
 80012e8:	1023883a 	mov	r17,r2
 80012ec:	003fa906 	br	8001194 <__alt_data_end+0xf8001194>
 80012f0:	01c00044 	movi	r7,1
 80012f4:	003f9006 	br	8001138 <__alt_data_end+0xf8001138>
 80012f8:	8000151e 	bne	r16,zero,8001350 <__subsf3+0x31c>
 80012fc:	18002f26 	beq	r3,zero,80013bc <__subsf3+0x388>
 8001300:	0108303a 	nor	r4,zero,r4
 8001304:	20000a26 	beq	r4,zero,8001330 <__subsf3+0x2fc>
 8001308:	01403fc4 	movi	r5,255
 800130c:	31402b26 	beq	r6,r5,80013bc <__subsf3+0x388>
 8001310:	014006c4 	movi	r5,27
 8001314:	29006e16 	blt	r5,r4,80014d0 <__subsf3+0x49c>
 8001318:	01400804 	movi	r5,32
 800131c:	290bc83a 	sub	r5,r5,r4
 8001320:	194a983a 	sll	r5,r3,r5
 8001324:	1908d83a 	srl	r4,r3,r4
 8001328:	2806c03a 	cmpne	r3,r5,zero
 800132c:	20c6b03a 	or	r3,r4,r3
 8001330:	38c7c83a 	sub	r3,r7,r3
 8001334:	3021883a 	mov	r16,r6
 8001338:	1023883a 	mov	r17,r2
 800133c:	003f7f06 	br	800113c <__alt_data_end+0xf800113c>
 8001340:	903f831e 	bne	r18,zero,8001150 <__alt_data_end+0xf8001150>
 8001344:	0005883a 	mov	r2,zero
 8001348:	0021883a 	mov	r16,zero
 800134c:	003f9a06 	br	80011b8 <__alt_data_end+0xf80011b8>
 8001350:	01403fc4 	movi	r5,255
 8001354:	31401926 	beq	r6,r5,80013bc <__subsf3+0x388>
 8001358:	0109c83a 	sub	r4,zero,r4
 800135c:	18c10034 	orhi	r3,r3,1024
 8001360:	003feb06 	br	8001310 <__alt_data_end+0xf8001310>
 8001364:	043fffc4 	movi	r16,-1
 8001368:	000b883a 	mov	r5,zero
 800136c:	003f5806 	br	80010d0 <__alt_data_end+0xf80010d0>
 8001370:	8000481e 	bne	r16,zero,8001494 <__subsf3+0x460>
 8001374:	18006226 	beq	r3,zero,8001500 <__subsf3+0x4cc>
 8001378:	383f4726 	beq	r7,zero,8001098 <__alt_data_end+0xf8001098>
 800137c:	19c7883a 	add	r3,r3,r7
 8001380:	1881002c 	andhi	r2,r3,1024
 8001384:	103f8326 	beq	r2,zero,8001194 <__alt_data_end+0xf8001194>
 8001388:	00bf0034 	movhi	r2,64512
 800138c:	10bfffc4 	addi	r2,r2,-1
 8001390:	2821883a 	mov	r16,r5
 8001394:	1886703a 	and	r3,r3,r2
 8001398:	003f3f06 	br	8001098 <__alt_data_end+0xf8001098>
 800139c:	80001c1e 	bne	r16,zero,8001410 <__subsf3+0x3dc>
 80013a0:	1800261e 	bne	r3,zero,800143c <__subsf3+0x408>
 80013a4:	38004c26 	beq	r7,zero,80014d8 <__subsf3+0x4a4>
 80013a8:	3807883a 	mov	r3,r7
 80013ac:	1023883a 	mov	r17,r2
 80013b0:	003f3906 	br	8001098 <__alt_data_end+0xf8001098>
 80013b4:	01c00044 	movi	r7,1
 80013b8:	003f9006 	br	80011fc <__alt_data_end+0xf80011fc>
 80013bc:	3807883a 	mov	r3,r7
 80013c0:	3021883a 	mov	r16,r6
 80013c4:	1023883a 	mov	r17,r2
 80013c8:	003f3306 	br	8001098 <__alt_data_end+0xf8001098>
 80013cc:	8000161e 	bne	r16,zero,8001428 <__subsf3+0x3f4>
 80013d0:	18002d26 	beq	r3,zero,8001488 <__subsf3+0x454>
 80013d4:	0108303a 	nor	r4,zero,r4
 80013d8:	20000a26 	beq	r4,zero,8001404 <__subsf3+0x3d0>
 80013dc:	01403fc4 	movi	r5,255
 80013e0:	31402926 	beq	r6,r5,8001488 <__subsf3+0x454>
 80013e4:	014006c4 	movi	r5,27
 80013e8:	29004716 	blt	r5,r4,8001508 <__subsf3+0x4d4>
 80013ec:	01400804 	movi	r5,32
 80013f0:	290bc83a 	sub	r5,r5,r4
 80013f4:	194a983a 	sll	r5,r3,r5
 80013f8:	1908d83a 	srl	r4,r3,r4
 80013fc:	2806c03a 	cmpne	r3,r5,zero
 8001400:	20c6b03a 	or	r3,r4,r3
 8001404:	19c7883a 	add	r3,r3,r7
 8001408:	3021883a 	mov	r16,r6
 800140c:	003f7c06 	br	8001200 <__alt_data_end+0xf8001200>
 8001410:	1800111e 	bne	r3,zero,8001458 <__subsf3+0x424>
 8001414:	38003326 	beq	r7,zero,80014e4 <__subsf3+0x4b0>
 8001418:	3807883a 	mov	r3,r7
 800141c:	1023883a 	mov	r17,r2
 8001420:	04003fc4 	movi	r16,255
 8001424:	003f1c06 	br	8001098 <__alt_data_end+0xf8001098>
 8001428:	01403fc4 	movi	r5,255
 800142c:	31401626 	beq	r6,r5,8001488 <__subsf3+0x454>
 8001430:	0109c83a 	sub	r4,zero,r4
 8001434:	18c10034 	orhi	r3,r3,1024
 8001438:	003fea06 	br	80013e4 <__alt_data_end+0xf80013e4>
 800143c:	383f1626 	beq	r7,zero,8001098 <__alt_data_end+0xf8001098>
 8001440:	19c9c83a 	sub	r4,r3,r7
 8001444:	2141002c 	andhi	r5,r4,1024
 8001448:	283f5026 	beq	r5,zero,800118c <__alt_data_end+0xf800118c>
 800144c:	38c7c83a 	sub	r3,r7,r3
 8001450:	1023883a 	mov	r17,r2
 8001454:	003f1006 	br	8001098 <__alt_data_end+0xf8001098>
 8001458:	38001b26 	beq	r7,zero,80014c8 <__subsf3+0x494>
 800145c:	1806d0fa 	srli	r3,r3,3
 8001460:	1900102c 	andhi	r4,r3,64
 8001464:	20000526 	beq	r4,zero,800147c <__subsf3+0x448>
 8001468:	380ed0fa 	srli	r7,r7,3
 800146c:	3900102c 	andhi	r4,r7,64
 8001470:	2000021e 	bne	r4,zero,800147c <__subsf3+0x448>
 8001474:	3807883a 	mov	r3,r7
 8001478:	1023883a 	mov	r17,r2
 800147c:	180690fa 	slli	r3,r3,3
 8001480:	04003fc4 	movi	r16,255
 8001484:	003f0406 	br	8001098 <__alt_data_end+0xf8001098>
 8001488:	3807883a 	mov	r3,r7
 800148c:	3021883a 	mov	r16,r6
 8001490:	003f0106 	br	8001098 <__alt_data_end+0xf8001098>
 8001494:	18001726 	beq	r3,zero,80014f4 <__subsf3+0x4c0>
 8001498:	38000b26 	beq	r7,zero,80014c8 <__subsf3+0x494>
 800149c:	1806d0fa 	srli	r3,r3,3
 80014a0:	1900102c 	andhi	r4,r3,64
 80014a4:	20000426 	beq	r4,zero,80014b8 <__subsf3+0x484>
 80014a8:	380ed0fa 	srli	r7,r7,3
 80014ac:	3900102c 	andhi	r4,r7,64
 80014b0:	2000011e 	bne	r4,zero,80014b8 <__subsf3+0x484>
 80014b4:	3807883a 	mov	r3,r7
 80014b8:	180690fa 	slli	r3,r3,3
 80014bc:	1023883a 	mov	r17,r2
 80014c0:	04003fc4 	movi	r16,255
 80014c4:	003ef406 	br	8001098 <__alt_data_end+0xf8001098>
 80014c8:	04003fc4 	movi	r16,255
 80014cc:	003ef206 	br	8001098 <__alt_data_end+0xf8001098>
 80014d0:	00c00044 	movi	r3,1
 80014d4:	003f9606 	br	8001330 <__alt_data_end+0xf8001330>
 80014d8:	000b883a 	mov	r5,zero
 80014dc:	0005883a 	mov	r2,zero
 80014e0:	003f3506 	br	80011b8 <__alt_data_end+0xf80011b8>
 80014e4:	01402034 	movhi	r5,128
 80014e8:	297fffc4 	addi	r5,r5,-1
 80014ec:	0005883a 	mov	r2,zero
 80014f0:	003f2f06 	br	80011b0 <__alt_data_end+0xf80011b0>
 80014f4:	3807883a 	mov	r3,r7
 80014f8:	04003fc4 	movi	r16,255
 80014fc:	003ee606 	br	8001098 <__alt_data_end+0xf8001098>
 8001500:	3807883a 	mov	r3,r7
 8001504:	003ee406 	br	8001098 <__alt_data_end+0xf8001098>
 8001508:	00c00044 	movi	r3,1
 800150c:	003fbd06 	br	8001404 <__alt_data_end+0xf8001404>
 8001510:	0005883a 	mov	r2,zero
 8001514:	003f2806 	br	80011b8 <__alt_data_end+0xf80011b8>

08001518 <__fixsfsi>:
 8001518:	200ad5fa 	srli	r5,r4,23
 800151c:	00c02034 	movhi	r3,128
 8001520:	18ffffc4 	addi	r3,r3,-1
 8001524:	29403fcc 	andi	r5,r5,255
 8001528:	00801f84 	movi	r2,126
 800152c:	1906703a 	and	r3,r3,r4
 8001530:	2008d7fa 	srli	r4,r4,31
 8001534:	11400e0e 	bge	r2,r5,8001570 <__fixsfsi+0x58>
 8001538:	00802744 	movi	r2,157
 800153c:	11400816 	blt	r2,r5,8001560 <__fixsfsi+0x48>
 8001540:	00802544 	movi	r2,149
 8001544:	18c02034 	orhi	r3,r3,128
 8001548:	11400b0e 	bge	r2,r5,8001578 <__fixsfsi+0x60>
 800154c:	28bfda84 	addi	r2,r5,-150
 8001550:	1884983a 	sll	r2,r3,r2
 8001554:	20000726 	beq	r4,zero,8001574 <__fixsfsi+0x5c>
 8001558:	0085c83a 	sub	r2,zero,r2
 800155c:	f800283a 	ret
 8001560:	00a00034 	movhi	r2,32768
 8001564:	10bfffc4 	addi	r2,r2,-1
 8001568:	2085883a 	add	r2,r4,r2
 800156c:	f800283a 	ret
 8001570:	0005883a 	mov	r2,zero
 8001574:	f800283a 	ret
 8001578:	00802584 	movi	r2,150
 800157c:	1145c83a 	sub	r2,r2,r5
 8001580:	1884d83a 	srl	r2,r3,r2
 8001584:	003ff306 	br	8001554 <__alt_data_end+0xf8001554>

08001588 <__floatsisf>:
 8001588:	defffd04 	addi	sp,sp,-12
 800158c:	dfc00215 	stw	ra,8(sp)
 8001590:	dc400115 	stw	r17,4(sp)
 8001594:	dc000015 	stw	r16,0(sp)
 8001598:	20003526 	beq	r4,zero,8001670 <__floatsisf+0xe8>
 800159c:	2021883a 	mov	r16,r4
 80015a0:	2022d7fa 	srli	r17,r4,31
 80015a4:	20003616 	blt	r4,zero,8001680 <__floatsisf+0xf8>
 80015a8:	8009883a 	mov	r4,r16
 80015ac:	80016ac0 	call	80016ac <__clzsi2>
 80015b0:	00c02784 	movi	r3,158
 80015b4:	1887c83a 	sub	r3,r3,r2
 80015b8:	01002584 	movi	r4,150
 80015bc:	20c01416 	blt	r4,r3,8001610 <__floatsisf+0x88>
 80015c0:	20c9c83a 	sub	r4,r4,r3
 80015c4:	8120983a 	sll	r16,r16,r4
 80015c8:	00802034 	movhi	r2,128
 80015cc:	10bfffc4 	addi	r2,r2,-1
 80015d0:	8809883a 	mov	r4,r17
 80015d4:	80a0703a 	and	r16,r16,r2
 80015d8:	18803fcc 	andi	r2,r3,255
 80015dc:	100695fa 	slli	r3,r2,23
 80015e0:	20803fcc 	andi	r2,r4,255
 80015e4:	100897fa 	slli	r4,r2,31
 80015e8:	00802034 	movhi	r2,128
 80015ec:	10bfffc4 	addi	r2,r2,-1
 80015f0:	8084703a 	and	r2,r16,r2
 80015f4:	10c4b03a 	or	r2,r2,r3
 80015f8:	1104b03a 	or	r2,r2,r4
 80015fc:	dfc00217 	ldw	ra,8(sp)
 8001600:	dc400117 	ldw	r17,4(sp)
 8001604:	dc000017 	ldw	r16,0(sp)
 8001608:	dec00304 	addi	sp,sp,12
 800160c:	f800283a 	ret
 8001610:	01002644 	movi	r4,153
 8001614:	20c01c16 	blt	r4,r3,8001688 <__floatsisf+0x100>
 8001618:	20c9c83a 	sub	r4,r4,r3
 800161c:	8120983a 	sll	r16,r16,r4
 8001620:	013f0034 	movhi	r4,64512
 8001624:	213fffc4 	addi	r4,r4,-1
 8001628:	814001cc 	andi	r5,r16,7
 800162c:	8108703a 	and	r4,r16,r4
 8001630:	28000426 	beq	r5,zero,8001644 <__floatsisf+0xbc>
 8001634:	840003cc 	andi	r16,r16,15
 8001638:	01400104 	movi	r5,4
 800163c:	81400126 	beq	r16,r5,8001644 <__floatsisf+0xbc>
 8001640:	2149883a 	add	r4,r4,r5
 8001644:	2141002c 	andhi	r5,r4,1024
 8001648:	28000526 	beq	r5,zero,8001660 <__floatsisf+0xd8>
 800164c:	00c027c4 	movi	r3,159
 8001650:	1887c83a 	sub	r3,r3,r2
 8001654:	00bf0034 	movhi	r2,64512
 8001658:	10bfffc4 	addi	r2,r2,-1
 800165c:	2088703a 	and	r4,r4,r2
 8001660:	202091ba 	slli	r16,r4,6
 8001664:	8809883a 	mov	r4,r17
 8001668:	8020d27a 	srli	r16,r16,9
 800166c:	003fda06 	br	80015d8 <__alt_data_end+0xf80015d8>
 8001670:	0009883a 	mov	r4,zero
 8001674:	0007883a 	mov	r3,zero
 8001678:	0021883a 	mov	r16,zero
 800167c:	003fd606 	br	80015d8 <__alt_data_end+0xf80015d8>
 8001680:	0121c83a 	sub	r16,zero,r4
 8001684:	003fc806 	br	80015a8 <__alt_data_end+0xf80015a8>
 8001688:	01002e44 	movi	r4,185
 800168c:	20c9c83a 	sub	r4,r4,r3
 8001690:	01400144 	movi	r5,5
 8001694:	8108983a 	sll	r4,r16,r4
 8001698:	288bc83a 	sub	r5,r5,r2
 800169c:	8160d83a 	srl	r16,r16,r5
 80016a0:	2008c03a 	cmpne	r4,r4,zero
 80016a4:	8120b03a 	or	r16,r16,r4
 80016a8:	003fdd06 	br	8001620 <__alt_data_end+0xf8001620>

080016ac <__clzsi2>:
 80016ac:	00bfffd4 	movui	r2,65535
 80016b0:	11000536 	bltu	r2,r4,80016c8 <__clzsi2+0x1c>
 80016b4:	00803fc4 	movi	r2,255
 80016b8:	11000f36 	bltu	r2,r4,80016f8 <__clzsi2+0x4c>
 80016bc:	00800804 	movi	r2,32
 80016c0:	0007883a 	mov	r3,zero
 80016c4:	00000506 	br	80016dc <__clzsi2+0x30>
 80016c8:	00804034 	movhi	r2,256
 80016cc:	10bfffc4 	addi	r2,r2,-1
 80016d0:	11000c2e 	bgeu	r2,r4,8001704 <__clzsi2+0x58>
 80016d4:	00800204 	movi	r2,8
 80016d8:	00c00604 	movi	r3,24
 80016dc:	20c8d83a 	srl	r4,r4,r3
 80016e0:	00c20034 	movhi	r3,2048
 80016e4:	18d0aa04 	addi	r3,r3,17064
 80016e8:	1909883a 	add	r4,r3,r4
 80016ec:	20c00003 	ldbu	r3,0(r4)
 80016f0:	10c5c83a 	sub	r2,r2,r3
 80016f4:	f800283a 	ret
 80016f8:	00800604 	movi	r2,24
 80016fc:	00c00204 	movi	r3,8
 8001700:	003ff606 	br	80016dc <__alt_data_end+0xf80016dc>
 8001704:	00800404 	movi	r2,16
 8001708:	1007883a 	mov	r3,r2
 800170c:	003ff306 	br	80016dc <__alt_data_end+0xf80016dc>

08001710 <strlen>:
 8001710:	208000cc 	andi	r2,r4,3
 8001714:	10002026 	beq	r2,zero,8001798 <strlen+0x88>
 8001718:	20800007 	ldb	r2,0(r4)
 800171c:	10002026 	beq	r2,zero,80017a0 <strlen+0x90>
 8001720:	2005883a 	mov	r2,r4
 8001724:	00000206 	br	8001730 <strlen+0x20>
 8001728:	10c00007 	ldb	r3,0(r2)
 800172c:	18001826 	beq	r3,zero,8001790 <strlen+0x80>
 8001730:	10800044 	addi	r2,r2,1
 8001734:	10c000cc 	andi	r3,r2,3
 8001738:	183ffb1e 	bne	r3,zero,8001728 <__alt_data_end+0xf8001728>
 800173c:	10c00017 	ldw	r3,0(r2)
 8001740:	01ffbff4 	movhi	r7,65279
 8001744:	39ffbfc4 	addi	r7,r7,-257
 8001748:	00ca303a 	nor	r5,zero,r3
 800174c:	01a02074 	movhi	r6,32897
 8001750:	19c7883a 	add	r3,r3,r7
 8001754:	31a02004 	addi	r6,r6,-32640
 8001758:	1946703a 	and	r3,r3,r5
 800175c:	1986703a 	and	r3,r3,r6
 8001760:	1800091e 	bne	r3,zero,8001788 <strlen+0x78>
 8001764:	10800104 	addi	r2,r2,4
 8001768:	10c00017 	ldw	r3,0(r2)
 800176c:	19cb883a 	add	r5,r3,r7
 8001770:	00c6303a 	nor	r3,zero,r3
 8001774:	28c6703a 	and	r3,r5,r3
 8001778:	1986703a 	and	r3,r3,r6
 800177c:	183ff926 	beq	r3,zero,8001764 <__alt_data_end+0xf8001764>
 8001780:	00000106 	br	8001788 <strlen+0x78>
 8001784:	10800044 	addi	r2,r2,1
 8001788:	10c00007 	ldb	r3,0(r2)
 800178c:	183ffd1e 	bne	r3,zero,8001784 <__alt_data_end+0xf8001784>
 8001790:	1105c83a 	sub	r2,r2,r4
 8001794:	f800283a 	ret
 8001798:	2005883a 	mov	r2,r4
 800179c:	003fe706 	br	800173c <__alt_data_end+0xf800173c>
 80017a0:	0005883a 	mov	r2,zero
 80017a4:	f800283a 	ret

080017a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80017a8:	defff904 	addi	sp,sp,-28
 80017ac:	dfc00615 	stw	ra,24(sp)
 80017b0:	df000515 	stw	fp,20(sp)
 80017b4:	df000504 	addi	fp,sp,20
 80017b8:	e13ffc15 	stw	r4,-16(fp)
 80017bc:	e17ffd15 	stw	r5,-12(fp)
 80017c0:	e1bffe15 	stw	r6,-8(fp)
 80017c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80017c8:	e0800217 	ldw	r2,8(fp)
 80017cc:	d8800015 	stw	r2,0(sp)
 80017d0:	e1ffff17 	ldw	r7,-4(fp)
 80017d4:	e1bffe17 	ldw	r6,-8(fp)
 80017d8:	e17ffd17 	ldw	r5,-12(fp)
 80017dc:	e13ffc17 	ldw	r4,-16(fp)
 80017e0:	80019580 	call	8001958 <alt_iic_isr_register>
}  
 80017e4:	e037883a 	mov	sp,fp
 80017e8:	dfc00117 	ldw	ra,4(sp)
 80017ec:	df000017 	ldw	fp,0(sp)
 80017f0:	dec00204 	addi	sp,sp,8
 80017f4:	f800283a 	ret

080017f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80017f8:	defff904 	addi	sp,sp,-28
 80017fc:	df000615 	stw	fp,24(sp)
 8001800:	df000604 	addi	fp,sp,24
 8001804:	e13ffe15 	stw	r4,-8(fp)
 8001808:	e17fff15 	stw	r5,-4(fp)
 800180c:	e0bfff17 	ldw	r2,-4(fp)
 8001810:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001814:	0005303a 	rdctl	r2,status
 8001818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800181c:	e0fffb17 	ldw	r3,-20(fp)
 8001820:	00bfff84 	movi	r2,-2
 8001824:	1884703a 	and	r2,r3,r2
 8001828:	1001703a 	wrctl	status,r2
  
  return context;
 800182c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001830:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8001834:	00c00044 	movi	r3,1
 8001838:	e0bffa17 	ldw	r2,-24(fp)
 800183c:	1884983a 	sll	r2,r3,r2
 8001840:	1007883a 	mov	r3,r2
 8001844:	d0a65317 	ldw	r2,-26292(gp)
 8001848:	1884b03a 	or	r2,r3,r2
 800184c:	d0a65315 	stw	r2,-26292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001850:	d0a65317 	ldw	r2,-26292(gp)
 8001854:	100170fa 	wrctl	ienable,r2
 8001858:	e0bffc17 	ldw	r2,-16(fp)
 800185c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001860:	e0bffd17 	ldw	r2,-12(fp)
 8001864:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001868:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800186c:	0001883a 	nop
}
 8001870:	e037883a 	mov	sp,fp
 8001874:	df000017 	ldw	fp,0(sp)
 8001878:	dec00104 	addi	sp,sp,4
 800187c:	f800283a 	ret

08001880 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8001880:	defff904 	addi	sp,sp,-28
 8001884:	df000615 	stw	fp,24(sp)
 8001888:	df000604 	addi	fp,sp,24
 800188c:	e13ffe15 	stw	r4,-8(fp)
 8001890:	e17fff15 	stw	r5,-4(fp)
 8001894:	e0bfff17 	ldw	r2,-4(fp)
 8001898:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800189c:	0005303a 	rdctl	r2,status
 80018a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80018a4:	e0fffb17 	ldw	r3,-20(fp)
 80018a8:	00bfff84 	movi	r2,-2
 80018ac:	1884703a 	and	r2,r3,r2
 80018b0:	1001703a 	wrctl	status,r2
  
  return context;
 80018b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80018b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80018bc:	00c00044 	movi	r3,1
 80018c0:	e0bffa17 	ldw	r2,-24(fp)
 80018c4:	1884983a 	sll	r2,r3,r2
 80018c8:	0084303a 	nor	r2,zero,r2
 80018cc:	1007883a 	mov	r3,r2
 80018d0:	d0a65317 	ldw	r2,-26292(gp)
 80018d4:	1884703a 	and	r2,r3,r2
 80018d8:	d0a65315 	stw	r2,-26292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80018dc:	d0a65317 	ldw	r2,-26292(gp)
 80018e0:	100170fa 	wrctl	ienable,r2
 80018e4:	e0bffc17 	ldw	r2,-16(fp)
 80018e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80018ec:	e0bffd17 	ldw	r2,-12(fp)
 80018f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80018f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80018f8:	0001883a 	nop
}
 80018fc:	e037883a 	mov	sp,fp
 8001900:	df000017 	ldw	fp,0(sp)
 8001904:	dec00104 	addi	sp,sp,4
 8001908:	f800283a 	ret

0800190c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800190c:	defffc04 	addi	sp,sp,-16
 8001910:	df000315 	stw	fp,12(sp)
 8001914:	df000304 	addi	fp,sp,12
 8001918:	e13ffe15 	stw	r4,-8(fp)
 800191c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8001920:	000530fa 	rdctl	r2,ienable
 8001924:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8001928:	00c00044 	movi	r3,1
 800192c:	e0bfff17 	ldw	r2,-4(fp)
 8001930:	1884983a 	sll	r2,r3,r2
 8001934:	1007883a 	mov	r3,r2
 8001938:	e0bffd17 	ldw	r2,-12(fp)
 800193c:	1884703a 	and	r2,r3,r2
 8001940:	1004c03a 	cmpne	r2,r2,zero
 8001944:	10803fcc 	andi	r2,r2,255
}
 8001948:	e037883a 	mov	sp,fp
 800194c:	df000017 	ldw	fp,0(sp)
 8001950:	dec00104 	addi	sp,sp,4
 8001954:	f800283a 	ret

08001958 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8001958:	defff504 	addi	sp,sp,-44
 800195c:	dfc00a15 	stw	ra,40(sp)
 8001960:	df000915 	stw	fp,36(sp)
 8001964:	df000904 	addi	fp,sp,36
 8001968:	e13ffc15 	stw	r4,-16(fp)
 800196c:	e17ffd15 	stw	r5,-12(fp)
 8001970:	e1bffe15 	stw	r6,-8(fp)
 8001974:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8001978:	00bffa84 	movi	r2,-22
 800197c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8001980:	e0bffd17 	ldw	r2,-12(fp)
 8001984:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8001988:	e0bff817 	ldw	r2,-32(fp)
 800198c:	10800808 	cmpgei	r2,r2,32
 8001990:	1000271e 	bne	r2,zero,8001a30 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001994:	0005303a 	rdctl	r2,status
 8001998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800199c:	e0fffb17 	ldw	r3,-20(fp)
 80019a0:	00bfff84 	movi	r2,-2
 80019a4:	1884703a 	and	r2,r3,r2
 80019a8:	1001703a 	wrctl	status,r2
  
  return context;
 80019ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80019b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80019b4:	00820034 	movhi	r2,2048
 80019b8:	109d7304 	addi	r2,r2,30156
 80019bc:	e0fff817 	ldw	r3,-32(fp)
 80019c0:	180690fa 	slli	r3,r3,3
 80019c4:	10c5883a 	add	r2,r2,r3
 80019c8:	e0fffe17 	ldw	r3,-8(fp)
 80019cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80019d0:	00820034 	movhi	r2,2048
 80019d4:	109d7304 	addi	r2,r2,30156
 80019d8:	e0fff817 	ldw	r3,-32(fp)
 80019dc:	180690fa 	slli	r3,r3,3
 80019e0:	10c5883a 	add	r2,r2,r3
 80019e4:	10800104 	addi	r2,r2,4
 80019e8:	e0ffff17 	ldw	r3,-4(fp)
 80019ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80019f0:	e0bffe17 	ldw	r2,-8(fp)
 80019f4:	10000526 	beq	r2,zero,8001a0c <alt_iic_isr_register+0xb4>
 80019f8:	e0bff817 	ldw	r2,-32(fp)
 80019fc:	100b883a 	mov	r5,r2
 8001a00:	e13ffc17 	ldw	r4,-16(fp)
 8001a04:	80017f80 	call	80017f8 <alt_ic_irq_enable>
 8001a08:	00000406 	br	8001a1c <alt_iic_isr_register+0xc4>
 8001a0c:	e0bff817 	ldw	r2,-32(fp)
 8001a10:	100b883a 	mov	r5,r2
 8001a14:	e13ffc17 	ldw	r4,-16(fp)
 8001a18:	80018800 	call	8001880 <alt_ic_irq_disable>
 8001a1c:	e0bff715 	stw	r2,-36(fp)
 8001a20:	e0bffa17 	ldw	r2,-24(fp)
 8001a24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001a28:	e0bff917 	ldw	r2,-28(fp)
 8001a2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8001a30:	e0bff717 	ldw	r2,-36(fp)
}
 8001a34:	e037883a 	mov	sp,fp
 8001a38:	dfc00117 	ldw	ra,4(sp)
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00204 	addi	sp,sp,8
 8001a44:	f800283a 	ret

08001a48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8001a48:	defffc04 	addi	sp,sp,-16
 8001a4c:	df000315 	stw	fp,12(sp)
 8001a50:	df000304 	addi	fp,sp,12
 8001a54:	e13ffd15 	stw	r4,-12(fp)
 8001a58:	e17ffe15 	stw	r5,-8(fp)
 8001a5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8001a60:	e0fffe17 	ldw	r3,-8(fp)
 8001a64:	e0bffd17 	ldw	r2,-12(fp)
 8001a68:	18800c26 	beq	r3,r2,8001a9c <alt_load_section+0x54>
  {
    while( to != end )
 8001a6c:	00000806 	br	8001a90 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8001a70:	e0bffe17 	ldw	r2,-8(fp)
 8001a74:	10c00104 	addi	r3,r2,4
 8001a78:	e0fffe15 	stw	r3,-8(fp)
 8001a7c:	e0fffd17 	ldw	r3,-12(fp)
 8001a80:	19000104 	addi	r4,r3,4
 8001a84:	e13ffd15 	stw	r4,-12(fp)
 8001a88:	18c00017 	ldw	r3,0(r3)
 8001a8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8001a90:	e0fffe17 	ldw	r3,-8(fp)
 8001a94:	e0bfff17 	ldw	r2,-4(fp)
 8001a98:	18bff51e 	bne	r3,r2,8001a70 <__alt_data_end+0xf8001a70>
    {
      *to++ = *from++;
    }
  }
}
 8001a9c:	0001883a 	nop
 8001aa0:	e037883a 	mov	sp,fp
 8001aa4:	df000017 	ldw	fp,0(sp)
 8001aa8:	dec00104 	addi	sp,sp,4
 8001aac:	f800283a 	ret

08001ab0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8001ab0:	defffe04 	addi	sp,sp,-8
 8001ab4:	dfc00115 	stw	ra,4(sp)
 8001ab8:	df000015 	stw	fp,0(sp)
 8001abc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8001ac0:	01820034 	movhi	r6,2048
 8001ac4:	31972904 	addi	r6,r6,23716
 8001ac8:	01420034 	movhi	r5,2048
 8001acc:	2950fb04 	addi	r5,r5,17388
 8001ad0:	01020034 	movhi	r4,2048
 8001ad4:	21172904 	addi	r4,r4,23716
 8001ad8:	8001a480 	call	8001a48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8001adc:	01820034 	movhi	r6,2048
 8001ae0:	31809104 	addi	r6,r6,580
 8001ae4:	01420034 	movhi	r5,2048
 8001ae8:	29400804 	addi	r5,r5,32
 8001aec:	01020034 	movhi	r4,2048
 8001af0:	21000804 	addi	r4,r4,32
 8001af4:	8001a480 	call	8001a48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8001af8:	01820034 	movhi	r6,2048
 8001afc:	3190fb04 	addi	r6,r6,17388
 8001b00:	01420034 	movhi	r5,2048
 8001b04:	2950aa04 	addi	r5,r5,17064
 8001b08:	01020034 	movhi	r4,2048
 8001b0c:	2110aa04 	addi	r4,r4,17064
 8001b10:	8001a480 	call	8001a48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8001b14:	80030a80 	call	80030a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8001b18:	800334c0 	call	800334c <alt_icache_flush_all>
}
 8001b1c:	0001883a 	nop
 8001b20:	e037883a 	mov	sp,fp
 8001b24:	dfc00117 	ldw	ra,4(sp)
 8001b28:	df000017 	ldw	fp,0(sp)
 8001b2c:	dec00204 	addi	sp,sp,8
 8001b30:	f800283a 	ret

08001b34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8001b34:	defffd04 	addi	sp,sp,-12
 8001b38:	dfc00215 	stw	ra,8(sp)
 8001b3c:	df000115 	stw	fp,4(sp)
 8001b40:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8001b44:	0009883a 	mov	r4,zero
 8001b48:	8001c140 	call	8001c14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8001b4c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8001b50:	8001c4c0 	call	8001c4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8001b54:	01820034 	movhi	r6,2048
 8001b58:	3190ea04 	addi	r6,r6,17320
 8001b5c:	01420034 	movhi	r5,2048
 8001b60:	2950ea04 	addi	r5,r5,17320
 8001b64:	01020034 	movhi	r4,2048
 8001b68:	2110ea04 	addi	r4,r4,17320
 8001b6c:	80034e00 	call	80034e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8001b70:	80031fc0 	call	80031fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8001b74:	01020034 	movhi	r4,2048
 8001b78:	210c9704 	addi	r4,r4,12892
 8001b7c:	8003c180 	call	8003c18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8001b80:	d0a65417 	ldw	r2,-26288(gp)
 8001b84:	d0e65517 	ldw	r3,-26284(gp)
 8001b88:	d1265617 	ldw	r4,-26280(gp)
 8001b8c:	200d883a 	mov	r6,r4
 8001b90:	180b883a 	mov	r5,r3
 8001b94:	1009883a 	mov	r4,r2
 8001b98:	800048c0 	call	800048c <main>
 8001b9c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8001ba0:	01000044 	movi	r4,1
 8001ba4:	8002fd80 	call	8002fd8 <close>
  exit (result);
 8001ba8:	e13fff17 	ldw	r4,-4(fp)
 8001bac:	8003c2c0 	call	8003c2c <exit>

08001bb0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8001bb0:	defffd04 	addi	sp,sp,-12
 8001bb4:	dfc00215 	stw	ra,8(sp)
 8001bb8:	df000115 	stw	fp,4(sp)
 8001bbc:	df000104 	addi	fp,sp,4
 8001bc0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8001bc4:	e13fff17 	ldw	r4,-4(fp)
 8001bc8:	8002e440 	call	8002e44 <alt_busy_sleep>
}
 8001bcc:	e037883a 	mov	sp,fp
 8001bd0:	dfc00117 	ldw	ra,4(sp)
 8001bd4:	df000017 	ldw	fp,0(sp)
 8001bd8:	dec00204 	addi	sp,sp,8
 8001bdc:	f800283a 	ret

08001be0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8001be0:	defffd04 	addi	sp,sp,-12
 8001be4:	dfc00215 	stw	ra,8(sp)
 8001be8:	df000115 	stw	fp,4(sp)
 8001bec:	df000104 	addi	fp,sp,4
 8001bf0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8001bf4:	d1600e04 	addi	r5,gp,-32712
 8001bf8:	e13fff17 	ldw	r4,-4(fp)
 8001bfc:	80031580 	call	8003158 <alt_dev_llist_insert>
}
 8001c00:	e037883a 	mov	sp,fp
 8001c04:	dfc00117 	ldw	ra,4(sp)
 8001c08:	df000017 	ldw	fp,0(sp)
 8001c0c:	dec00204 	addi	sp,sp,8
 8001c10:	f800283a 	ret

08001c14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8001c14:	defffd04 	addi	sp,sp,-12
 8001c18:	dfc00215 	stw	ra,8(sp)
 8001c1c:	df000115 	stw	fp,4(sp)
 8001c20:	df000104 	addi	fp,sp,4
 8001c24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8001c28:	80039b80 	call	80039b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8001c2c:	00800044 	movi	r2,1
 8001c30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8001c34:	0001883a 	nop
 8001c38:	e037883a 	mov	sp,fp
 8001c3c:	dfc00117 	ldw	ra,4(sp)
 8001c40:	df000017 	ldw	fp,0(sp)
 8001c44:	dec00204 	addi	sp,sp,8
 8001c48:	f800283a 	ret

08001c4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8001c4c:	defffe04 	addi	sp,sp,-8
 8001c50:	dfc00115 	stw	ra,4(sp)
 8001c54:	df000015 	stw	fp,0(sp)
 8001c58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
 8001c5c:	01c0fa04 	movi	r7,1000
 8001c60:	01800044 	movi	r6,1
 8001c64:	000b883a 	mov	r5,zero
 8001c68:	01000834 	movhi	r4,32
 8001c6c:	21043804 	addi	r4,r4,4320
 8001c70:	80027a80 	call	80027a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8001c74:	018000c4 	movi	r6,3
 8001c78:	000b883a 	mov	r5,zero
 8001c7c:	01020034 	movhi	r4,2048
 8001c80:	21118704 	addi	r4,r4,17948
 8001c84:	8001e2c0 	call	8001e2c <altera_avalon_jtag_uart_init>
 8001c88:	01020034 	movhi	r4,2048
 8001c8c:	21117d04 	addi	r4,r4,17908
 8001c90:	8001be00 	call	8001be0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8001c94:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
 8001c98:	01020034 	movhi	r4,2048
 8001c9c:	21159504 	addi	r4,r4,22100
 8001ca0:	80028d80 	call	80028d8 <alt_up_character_lcd_init>
 8001ca4:	01020034 	movhi	r4,2048
 8001ca8:	21159504 	addi	r4,r4,22100
 8001cac:	8001be00 	call	8001be0 <alt_dev_reg>
}
 8001cb0:	0001883a 	nop
 8001cb4:	e037883a 	mov	sp,fp
 8001cb8:	dfc00117 	ldw	ra,4(sp)
 8001cbc:	df000017 	ldw	fp,0(sp)
 8001cc0:	dec00204 	addi	sp,sp,8
 8001cc4:	f800283a 	ret

08001cc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8001cc8:	defffa04 	addi	sp,sp,-24
 8001ccc:	dfc00515 	stw	ra,20(sp)
 8001cd0:	df000415 	stw	fp,16(sp)
 8001cd4:	df000404 	addi	fp,sp,16
 8001cd8:	e13ffd15 	stw	r4,-12(fp)
 8001cdc:	e17ffe15 	stw	r5,-8(fp)
 8001ce0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8001ce4:	e0bffd17 	ldw	r2,-12(fp)
 8001ce8:	10800017 	ldw	r2,0(r2)
 8001cec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8001cf0:	e0bffc17 	ldw	r2,-16(fp)
 8001cf4:	10c00a04 	addi	r3,r2,40
 8001cf8:	e0bffd17 	ldw	r2,-12(fp)
 8001cfc:	10800217 	ldw	r2,8(r2)
 8001d00:	100f883a 	mov	r7,r2
 8001d04:	e1bfff17 	ldw	r6,-4(fp)
 8001d08:	e17ffe17 	ldw	r5,-8(fp)
 8001d0c:	1809883a 	mov	r4,r3
 8001d10:	80022f00 	call	80022f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8001d14:	e037883a 	mov	sp,fp
 8001d18:	dfc00117 	ldw	ra,4(sp)
 8001d1c:	df000017 	ldw	fp,0(sp)
 8001d20:	dec00204 	addi	sp,sp,8
 8001d24:	f800283a 	ret

08001d28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8001d28:	defffa04 	addi	sp,sp,-24
 8001d2c:	dfc00515 	stw	ra,20(sp)
 8001d30:	df000415 	stw	fp,16(sp)
 8001d34:	df000404 	addi	fp,sp,16
 8001d38:	e13ffd15 	stw	r4,-12(fp)
 8001d3c:	e17ffe15 	stw	r5,-8(fp)
 8001d40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8001d44:	e0bffd17 	ldw	r2,-12(fp)
 8001d48:	10800017 	ldw	r2,0(r2)
 8001d4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8001d50:	e0bffc17 	ldw	r2,-16(fp)
 8001d54:	10c00a04 	addi	r3,r2,40
 8001d58:	e0bffd17 	ldw	r2,-12(fp)
 8001d5c:	10800217 	ldw	r2,8(r2)
 8001d60:	100f883a 	mov	r7,r2
 8001d64:	e1bfff17 	ldw	r6,-4(fp)
 8001d68:	e17ffe17 	ldw	r5,-8(fp)
 8001d6c:	1809883a 	mov	r4,r3
 8001d70:	800250c0 	call	800250c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8001d74:	e037883a 	mov	sp,fp
 8001d78:	dfc00117 	ldw	ra,4(sp)
 8001d7c:	df000017 	ldw	fp,0(sp)
 8001d80:	dec00204 	addi	sp,sp,8
 8001d84:	f800283a 	ret

08001d88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8001d88:	defffc04 	addi	sp,sp,-16
 8001d8c:	dfc00315 	stw	ra,12(sp)
 8001d90:	df000215 	stw	fp,8(sp)
 8001d94:	df000204 	addi	fp,sp,8
 8001d98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8001d9c:	e0bfff17 	ldw	r2,-4(fp)
 8001da0:	10800017 	ldw	r2,0(r2)
 8001da4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8001da8:	e0bffe17 	ldw	r2,-8(fp)
 8001dac:	10c00a04 	addi	r3,r2,40
 8001db0:	e0bfff17 	ldw	r2,-4(fp)
 8001db4:	10800217 	ldw	r2,8(r2)
 8001db8:	100b883a 	mov	r5,r2
 8001dbc:	1809883a 	mov	r4,r3
 8001dc0:	80021980 	call	8002198 <altera_avalon_jtag_uart_close>
}
 8001dc4:	e037883a 	mov	sp,fp
 8001dc8:	dfc00117 	ldw	ra,4(sp)
 8001dcc:	df000017 	ldw	fp,0(sp)
 8001dd0:	dec00204 	addi	sp,sp,8
 8001dd4:	f800283a 	ret

08001dd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8001dd8:	defffa04 	addi	sp,sp,-24
 8001ddc:	dfc00515 	stw	ra,20(sp)
 8001de0:	df000415 	stw	fp,16(sp)
 8001de4:	df000404 	addi	fp,sp,16
 8001de8:	e13ffd15 	stw	r4,-12(fp)
 8001dec:	e17ffe15 	stw	r5,-8(fp)
 8001df0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8001df4:	e0bffd17 	ldw	r2,-12(fp)
 8001df8:	10800017 	ldw	r2,0(r2)
 8001dfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8001e00:	e0bffc17 	ldw	r2,-16(fp)
 8001e04:	10800a04 	addi	r2,r2,40
 8001e08:	e1bfff17 	ldw	r6,-4(fp)
 8001e0c:	e17ffe17 	ldw	r5,-8(fp)
 8001e10:	1009883a 	mov	r4,r2
 8001e14:	80022000 	call	8002200 <altera_avalon_jtag_uart_ioctl>
}
 8001e18:	e037883a 	mov	sp,fp
 8001e1c:	dfc00117 	ldw	ra,4(sp)
 8001e20:	df000017 	ldw	fp,0(sp)
 8001e24:	dec00204 	addi	sp,sp,8
 8001e28:	f800283a 	ret

08001e2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8001e2c:	defffa04 	addi	sp,sp,-24
 8001e30:	dfc00515 	stw	ra,20(sp)
 8001e34:	df000415 	stw	fp,16(sp)
 8001e38:	df000404 	addi	fp,sp,16
 8001e3c:	e13ffd15 	stw	r4,-12(fp)
 8001e40:	e17ffe15 	stw	r5,-8(fp)
 8001e44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8001e48:	e0bffd17 	ldw	r2,-12(fp)
 8001e4c:	00c00044 	movi	r3,1
 8001e50:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8001e54:	e0bffd17 	ldw	r2,-12(fp)
 8001e58:	10800017 	ldw	r2,0(r2)
 8001e5c:	10800104 	addi	r2,r2,4
 8001e60:	1007883a 	mov	r3,r2
 8001e64:	e0bffd17 	ldw	r2,-12(fp)
 8001e68:	10800817 	ldw	r2,32(r2)
 8001e6c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8001e70:	e0bffe17 	ldw	r2,-8(fp)
 8001e74:	e0ffff17 	ldw	r3,-4(fp)
 8001e78:	d8000015 	stw	zero,0(sp)
 8001e7c:	e1fffd17 	ldw	r7,-12(fp)
 8001e80:	01820034 	movhi	r6,2048
 8001e84:	3187bb04 	addi	r6,r6,7916
 8001e88:	180b883a 	mov	r5,r3
 8001e8c:	1009883a 	mov	r4,r2
 8001e90:	80017a80 	call	80017a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8001e94:	e0bffd17 	ldw	r2,-12(fp)
 8001e98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8001e9c:	e0bffd17 	ldw	r2,-12(fp)
 8001ea0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001ea4:	d0e65817 	ldw	r3,-26272(gp)
 8001ea8:	e1fffd17 	ldw	r7,-12(fp)
 8001eac:	01820034 	movhi	r6,2048
 8001eb0:	31883e04 	addi	r6,r6,8440
 8001eb4:	180b883a 	mov	r5,r3
 8001eb8:	1009883a 	mov	r4,r2
 8001ebc:	8002d180 	call	8002d18 <alt_alarm_start>
 8001ec0:	1000040e 	bge	r2,zero,8001ed4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8001ec4:	e0fffd17 	ldw	r3,-12(fp)
 8001ec8:	00a00034 	movhi	r2,32768
 8001ecc:	10bfffc4 	addi	r2,r2,-1
 8001ed0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8001ed4:	0001883a 	nop
 8001ed8:	e037883a 	mov	sp,fp
 8001edc:	dfc00117 	ldw	ra,4(sp)
 8001ee0:	df000017 	ldw	fp,0(sp)
 8001ee4:	dec00204 	addi	sp,sp,8
 8001ee8:	f800283a 	ret

08001eec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8001eec:	defff804 	addi	sp,sp,-32
 8001ef0:	df000715 	stw	fp,28(sp)
 8001ef4:	df000704 	addi	fp,sp,28
 8001ef8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8001efc:	e0bfff17 	ldw	r2,-4(fp)
 8001f00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8001f04:	e0bffb17 	ldw	r2,-20(fp)
 8001f08:	10800017 	ldw	r2,0(r2)
 8001f0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8001f10:	e0bffc17 	ldw	r2,-16(fp)
 8001f14:	10800104 	addi	r2,r2,4
 8001f18:	10800037 	ldwio	r2,0(r2)
 8001f1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8001f20:	e0bffd17 	ldw	r2,-12(fp)
 8001f24:	1080c00c 	andi	r2,r2,768
 8001f28:	10006d26 	beq	r2,zero,80020e0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8001f2c:	e0bffd17 	ldw	r2,-12(fp)
 8001f30:	1080400c 	andi	r2,r2,256
 8001f34:	10003526 	beq	r2,zero,800200c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8001f38:	00800074 	movhi	r2,1
 8001f3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8001f40:	e0bffb17 	ldw	r2,-20(fp)
 8001f44:	10800a17 	ldw	r2,40(r2)
 8001f48:	10800044 	addi	r2,r2,1
 8001f4c:	1081ffcc 	andi	r2,r2,2047
 8001f50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8001f54:	e0bffb17 	ldw	r2,-20(fp)
 8001f58:	10c00b17 	ldw	r3,44(r2)
 8001f5c:	e0bffe17 	ldw	r2,-8(fp)
 8001f60:	18801526 	beq	r3,r2,8001fb8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8001f64:	e0bffc17 	ldw	r2,-16(fp)
 8001f68:	10800037 	ldwio	r2,0(r2)
 8001f6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8001f70:	e0bff917 	ldw	r2,-28(fp)
 8001f74:	10a0000c 	andi	r2,r2,32768
 8001f78:	10001126 	beq	r2,zero,8001fc0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8001f7c:	e0bffb17 	ldw	r2,-20(fp)
 8001f80:	10800a17 	ldw	r2,40(r2)
 8001f84:	e0fff917 	ldw	r3,-28(fp)
 8001f88:	1809883a 	mov	r4,r3
 8001f8c:	e0fffb17 	ldw	r3,-20(fp)
 8001f90:	1885883a 	add	r2,r3,r2
 8001f94:	10800e04 	addi	r2,r2,56
 8001f98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8001f9c:	e0bffb17 	ldw	r2,-20(fp)
 8001fa0:	10800a17 	ldw	r2,40(r2)
 8001fa4:	10800044 	addi	r2,r2,1
 8001fa8:	10c1ffcc 	andi	r3,r2,2047
 8001fac:	e0bffb17 	ldw	r2,-20(fp)
 8001fb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8001fb4:	003fe206 	br	8001f40 <__alt_data_end+0xf8001f40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8001fb8:	0001883a 	nop
 8001fbc:	00000106 	br	8001fc4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8001fc0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8001fc4:	e0bff917 	ldw	r2,-28(fp)
 8001fc8:	10bfffec 	andhi	r2,r2,65535
 8001fcc:	10000f26 	beq	r2,zero,800200c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8001fd0:	e0bffb17 	ldw	r2,-20(fp)
 8001fd4:	10c00817 	ldw	r3,32(r2)
 8001fd8:	00bfff84 	movi	r2,-2
 8001fdc:	1886703a 	and	r3,r3,r2
 8001fe0:	e0bffb17 	ldw	r2,-20(fp)
 8001fe4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8001fe8:	e0bffc17 	ldw	r2,-16(fp)
 8001fec:	10800104 	addi	r2,r2,4
 8001ff0:	1007883a 	mov	r3,r2
 8001ff4:	e0bffb17 	ldw	r2,-20(fp)
 8001ff8:	10800817 	ldw	r2,32(r2)
 8001ffc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8002000:	e0bffc17 	ldw	r2,-16(fp)
 8002004:	10800104 	addi	r2,r2,4
 8002008:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800200c:	e0bffd17 	ldw	r2,-12(fp)
 8002010:	1080800c 	andi	r2,r2,512
 8002014:	103fbe26 	beq	r2,zero,8001f10 <__alt_data_end+0xf8001f10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8002018:	e0bffd17 	ldw	r2,-12(fp)
 800201c:	1004d43a 	srli	r2,r2,16
 8002020:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8002024:	00001406 	br	8002078 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8002028:	e0bffc17 	ldw	r2,-16(fp)
 800202c:	e0fffb17 	ldw	r3,-20(fp)
 8002030:	18c00d17 	ldw	r3,52(r3)
 8002034:	e13ffb17 	ldw	r4,-20(fp)
 8002038:	20c7883a 	add	r3,r4,r3
 800203c:	18c20e04 	addi	r3,r3,2104
 8002040:	18c00003 	ldbu	r3,0(r3)
 8002044:	18c03fcc 	andi	r3,r3,255
 8002048:	18c0201c 	xori	r3,r3,128
 800204c:	18ffe004 	addi	r3,r3,-128
 8002050:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8002054:	e0bffb17 	ldw	r2,-20(fp)
 8002058:	10800d17 	ldw	r2,52(r2)
 800205c:	10800044 	addi	r2,r2,1
 8002060:	10c1ffcc 	andi	r3,r2,2047
 8002064:	e0bffb17 	ldw	r2,-20(fp)
 8002068:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800206c:	e0bffa17 	ldw	r2,-24(fp)
 8002070:	10bfffc4 	addi	r2,r2,-1
 8002074:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8002078:	e0bffa17 	ldw	r2,-24(fp)
 800207c:	10000526 	beq	r2,zero,8002094 <altera_avalon_jtag_uart_irq+0x1a8>
 8002080:	e0bffb17 	ldw	r2,-20(fp)
 8002084:	10c00d17 	ldw	r3,52(r2)
 8002088:	e0bffb17 	ldw	r2,-20(fp)
 800208c:	10800c17 	ldw	r2,48(r2)
 8002090:	18bfe51e 	bne	r3,r2,8002028 <__alt_data_end+0xf8002028>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8002094:	e0bffa17 	ldw	r2,-24(fp)
 8002098:	103f9d26 	beq	r2,zero,8001f10 <__alt_data_end+0xf8001f10>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800209c:	e0bffb17 	ldw	r2,-20(fp)
 80020a0:	10c00817 	ldw	r3,32(r2)
 80020a4:	00bfff44 	movi	r2,-3
 80020a8:	1886703a 	and	r3,r3,r2
 80020ac:	e0bffb17 	ldw	r2,-20(fp)
 80020b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80020b4:	e0bffb17 	ldw	r2,-20(fp)
 80020b8:	10800017 	ldw	r2,0(r2)
 80020bc:	10800104 	addi	r2,r2,4
 80020c0:	1007883a 	mov	r3,r2
 80020c4:	e0bffb17 	ldw	r2,-20(fp)
 80020c8:	10800817 	ldw	r2,32(r2)
 80020cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80020d0:	e0bffc17 	ldw	r2,-16(fp)
 80020d4:	10800104 	addi	r2,r2,4
 80020d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80020dc:	003f8c06 	br	8001f10 <__alt_data_end+0xf8001f10>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80020e0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80020e4:	0001883a 	nop
 80020e8:	e037883a 	mov	sp,fp
 80020ec:	df000017 	ldw	fp,0(sp)
 80020f0:	dec00104 	addi	sp,sp,4
 80020f4:	f800283a 	ret

080020f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80020f8:	defff804 	addi	sp,sp,-32
 80020fc:	df000715 	stw	fp,28(sp)
 8002100:	df000704 	addi	fp,sp,28
 8002104:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8002108:	e0bffb17 	ldw	r2,-20(fp)
 800210c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8002110:	e0bff917 	ldw	r2,-28(fp)
 8002114:	10800017 	ldw	r2,0(r2)
 8002118:	10800104 	addi	r2,r2,4
 800211c:	10800037 	ldwio	r2,0(r2)
 8002120:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8002124:	e0bffa17 	ldw	r2,-24(fp)
 8002128:	1081000c 	andi	r2,r2,1024
 800212c:	10000b26 	beq	r2,zero,800215c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8002130:	e0bff917 	ldw	r2,-28(fp)
 8002134:	10800017 	ldw	r2,0(r2)
 8002138:	10800104 	addi	r2,r2,4
 800213c:	1007883a 	mov	r3,r2
 8002140:	e0bff917 	ldw	r2,-28(fp)
 8002144:	10800817 	ldw	r2,32(r2)
 8002148:	10810014 	ori	r2,r2,1024
 800214c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8002150:	e0bff917 	ldw	r2,-28(fp)
 8002154:	10000915 	stw	zero,36(r2)
 8002158:	00000a06 	br	8002184 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800215c:	e0bff917 	ldw	r2,-28(fp)
 8002160:	10c00917 	ldw	r3,36(r2)
 8002164:	00a00034 	movhi	r2,32768
 8002168:	10bfff04 	addi	r2,r2,-4
 800216c:	10c00536 	bltu	r2,r3,8002184 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8002170:	e0bff917 	ldw	r2,-28(fp)
 8002174:	10800917 	ldw	r2,36(r2)
 8002178:	10c00044 	addi	r3,r2,1
 800217c:	e0bff917 	ldw	r2,-28(fp)
 8002180:	10c00915 	stw	r3,36(r2)
 8002184:	d0a65817 	ldw	r2,-26272(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8002188:	e037883a 	mov	sp,fp
 800218c:	df000017 	ldw	fp,0(sp)
 8002190:	dec00104 	addi	sp,sp,4
 8002194:	f800283a 	ret

08002198 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8002198:	defffd04 	addi	sp,sp,-12
 800219c:	df000215 	stw	fp,8(sp)
 80021a0:	df000204 	addi	fp,sp,8
 80021a4:	e13ffe15 	stw	r4,-8(fp)
 80021a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80021ac:	00000506 	br	80021c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80021b0:	e0bfff17 	ldw	r2,-4(fp)
 80021b4:	1090000c 	andi	r2,r2,16384
 80021b8:	10000226 	beq	r2,zero,80021c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80021bc:	00bffd44 	movi	r2,-11
 80021c0:	00000b06 	br	80021f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80021c4:	e0bffe17 	ldw	r2,-8(fp)
 80021c8:	10c00d17 	ldw	r3,52(r2)
 80021cc:	e0bffe17 	ldw	r2,-8(fp)
 80021d0:	10800c17 	ldw	r2,48(r2)
 80021d4:	18800526 	beq	r3,r2,80021ec <altera_avalon_jtag_uart_close+0x54>
 80021d8:	e0bffe17 	ldw	r2,-8(fp)
 80021dc:	10c00917 	ldw	r3,36(r2)
 80021e0:	e0bffe17 	ldw	r2,-8(fp)
 80021e4:	10800117 	ldw	r2,4(r2)
 80021e8:	18bff136 	bltu	r3,r2,80021b0 <__alt_data_end+0xf80021b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80021ec:	0005883a 	mov	r2,zero
}
 80021f0:	e037883a 	mov	sp,fp
 80021f4:	df000017 	ldw	fp,0(sp)
 80021f8:	dec00104 	addi	sp,sp,4
 80021fc:	f800283a 	ret

08002200 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8002200:	defffa04 	addi	sp,sp,-24
 8002204:	df000515 	stw	fp,20(sp)
 8002208:	df000504 	addi	fp,sp,20
 800220c:	e13ffd15 	stw	r4,-12(fp)
 8002210:	e17ffe15 	stw	r5,-8(fp)
 8002214:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8002218:	00bff9c4 	movi	r2,-25
 800221c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8002220:	e0bffe17 	ldw	r2,-8(fp)
 8002224:	10da8060 	cmpeqi	r3,r2,27137
 8002228:	1800031e 	bne	r3,zero,8002238 <altera_avalon_jtag_uart_ioctl+0x38>
 800222c:	109a80a0 	cmpeqi	r2,r2,27138
 8002230:	1000181e 	bne	r2,zero,8002294 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8002234:	00002906 	br	80022dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8002238:	e0bffd17 	ldw	r2,-12(fp)
 800223c:	10c00117 	ldw	r3,4(r2)
 8002240:	00a00034 	movhi	r2,32768
 8002244:	10bfffc4 	addi	r2,r2,-1
 8002248:	18802126 	beq	r3,r2,80022d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800224c:	e0bfff17 	ldw	r2,-4(fp)
 8002250:	10800017 	ldw	r2,0(r2)
 8002254:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8002258:	e0bffc17 	ldw	r2,-16(fp)
 800225c:	10800090 	cmplti	r2,r2,2
 8002260:	1000061e 	bne	r2,zero,800227c <altera_avalon_jtag_uart_ioctl+0x7c>
 8002264:	e0fffc17 	ldw	r3,-16(fp)
 8002268:	00a00034 	movhi	r2,32768
 800226c:	10bfffc4 	addi	r2,r2,-1
 8002270:	18800226 	beq	r3,r2,800227c <altera_avalon_jtag_uart_ioctl+0x7c>
 8002274:	e0bffc17 	ldw	r2,-16(fp)
 8002278:	00000206 	br	8002284 <altera_avalon_jtag_uart_ioctl+0x84>
 800227c:	00a00034 	movhi	r2,32768
 8002280:	10bfff84 	addi	r2,r2,-2
 8002284:	e0fffd17 	ldw	r3,-12(fp)
 8002288:	18800115 	stw	r2,4(r3)
      rc = 0;
 800228c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8002290:	00000f06 	br	80022d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8002294:	e0bffd17 	ldw	r2,-12(fp)
 8002298:	10c00117 	ldw	r3,4(r2)
 800229c:	00a00034 	movhi	r2,32768
 80022a0:	10bfffc4 	addi	r2,r2,-1
 80022a4:	18800c26 	beq	r3,r2,80022d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80022a8:	e0bffd17 	ldw	r2,-12(fp)
 80022ac:	10c00917 	ldw	r3,36(r2)
 80022b0:	e0bffd17 	ldw	r2,-12(fp)
 80022b4:	10800117 	ldw	r2,4(r2)
 80022b8:	1885803a 	cmpltu	r2,r3,r2
 80022bc:	10c03fcc 	andi	r3,r2,255
 80022c0:	e0bfff17 	ldw	r2,-4(fp)
 80022c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80022c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80022cc:	00000206 	br	80022d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80022d0:	0001883a 	nop
 80022d4:	00000106 	br	80022dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80022d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80022dc:	e0bffb17 	ldw	r2,-20(fp)
}
 80022e0:	e037883a 	mov	sp,fp
 80022e4:	df000017 	ldw	fp,0(sp)
 80022e8:	dec00104 	addi	sp,sp,4
 80022ec:	f800283a 	ret

080022f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80022f0:	defff304 	addi	sp,sp,-52
 80022f4:	dfc00c15 	stw	ra,48(sp)
 80022f8:	df000b15 	stw	fp,44(sp)
 80022fc:	df000b04 	addi	fp,sp,44
 8002300:	e13ffc15 	stw	r4,-16(fp)
 8002304:	e17ffd15 	stw	r5,-12(fp)
 8002308:	e1bffe15 	stw	r6,-8(fp)
 800230c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8002310:	e0bffd17 	ldw	r2,-12(fp)
 8002314:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8002318:	00004706 	br	8002438 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800231c:	e0bffc17 	ldw	r2,-16(fp)
 8002320:	10800a17 	ldw	r2,40(r2)
 8002324:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8002328:	e0bffc17 	ldw	r2,-16(fp)
 800232c:	10800b17 	ldw	r2,44(r2)
 8002330:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8002334:	e0fff717 	ldw	r3,-36(fp)
 8002338:	e0bff817 	ldw	r2,-32(fp)
 800233c:	18800536 	bltu	r3,r2,8002354 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8002340:	e0fff717 	ldw	r3,-36(fp)
 8002344:	e0bff817 	ldw	r2,-32(fp)
 8002348:	1885c83a 	sub	r2,r3,r2
 800234c:	e0bff615 	stw	r2,-40(fp)
 8002350:	00000406 	br	8002364 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8002354:	00c20004 	movi	r3,2048
 8002358:	e0bff817 	ldw	r2,-32(fp)
 800235c:	1885c83a 	sub	r2,r3,r2
 8002360:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8002364:	e0bff617 	ldw	r2,-40(fp)
 8002368:	10001e26 	beq	r2,zero,80023e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800236c:	e0fffe17 	ldw	r3,-8(fp)
 8002370:	e0bff617 	ldw	r2,-40(fp)
 8002374:	1880022e 	bgeu	r3,r2,8002380 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8002378:	e0bffe17 	ldw	r2,-8(fp)
 800237c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8002380:	e0bffc17 	ldw	r2,-16(fp)
 8002384:	10c00e04 	addi	r3,r2,56
 8002388:	e0bff817 	ldw	r2,-32(fp)
 800238c:	1885883a 	add	r2,r3,r2
 8002390:	e1bff617 	ldw	r6,-40(fp)
 8002394:	100b883a 	mov	r5,r2
 8002398:	e13ff517 	ldw	r4,-44(fp)
 800239c:	8003ce00 	call	8003ce0 <memcpy>
      ptr   += n;
 80023a0:	e0fff517 	ldw	r3,-44(fp)
 80023a4:	e0bff617 	ldw	r2,-40(fp)
 80023a8:	1885883a 	add	r2,r3,r2
 80023ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80023b0:	e0fffe17 	ldw	r3,-8(fp)
 80023b4:	e0bff617 	ldw	r2,-40(fp)
 80023b8:	1885c83a 	sub	r2,r3,r2
 80023bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80023c0:	e0fff817 	ldw	r3,-32(fp)
 80023c4:	e0bff617 	ldw	r2,-40(fp)
 80023c8:	1885883a 	add	r2,r3,r2
 80023cc:	10c1ffcc 	andi	r3,r2,2047
 80023d0:	e0bffc17 	ldw	r2,-16(fp)
 80023d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80023d8:	e0bffe17 	ldw	r2,-8(fp)
 80023dc:	00bfcf16 	blt	zero,r2,800231c <__alt_data_end+0xf800231c>
 80023e0:	00000106 	br	80023e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80023e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80023e8:	e0fff517 	ldw	r3,-44(fp)
 80023ec:	e0bffd17 	ldw	r2,-12(fp)
 80023f0:	1880141e 	bne	r3,r2,8002444 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80023f4:	e0bfff17 	ldw	r2,-4(fp)
 80023f8:	1090000c 	andi	r2,r2,16384
 80023fc:	1000131e 	bne	r2,zero,800244c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8002400:	0001883a 	nop
 8002404:	e0bffc17 	ldw	r2,-16(fp)
 8002408:	10c00a17 	ldw	r3,40(r2)
 800240c:	e0bff717 	ldw	r2,-36(fp)
 8002410:	1880051e 	bne	r3,r2,8002428 <altera_avalon_jtag_uart_read+0x138>
 8002414:	e0bffc17 	ldw	r2,-16(fp)
 8002418:	10c00917 	ldw	r3,36(r2)
 800241c:	e0bffc17 	ldw	r2,-16(fp)
 8002420:	10800117 	ldw	r2,4(r2)
 8002424:	18bff736 	bltu	r3,r2,8002404 <__alt_data_end+0xf8002404>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8002428:	e0bffc17 	ldw	r2,-16(fp)
 800242c:	10c00a17 	ldw	r3,40(r2)
 8002430:	e0bff717 	ldw	r2,-36(fp)
 8002434:	18800726 	beq	r3,r2,8002454 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8002438:	e0bffe17 	ldw	r2,-8(fp)
 800243c:	00bfb716 	blt	zero,r2,800231c <__alt_data_end+0xf800231c>
 8002440:	00000506 	br	8002458 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8002444:	0001883a 	nop
 8002448:	00000306 	br	8002458 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800244c:	0001883a 	nop
 8002450:	00000106 	br	8002458 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8002454:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8002458:	e0fff517 	ldw	r3,-44(fp)
 800245c:	e0bffd17 	ldw	r2,-12(fp)
 8002460:	18801826 	beq	r3,r2,80024c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002464:	0005303a 	rdctl	r2,status
 8002468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800246c:	e0fffb17 	ldw	r3,-20(fp)
 8002470:	00bfff84 	movi	r2,-2
 8002474:	1884703a 	and	r2,r3,r2
 8002478:	1001703a 	wrctl	status,r2
  
  return context;
 800247c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8002480:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8002484:	e0bffc17 	ldw	r2,-16(fp)
 8002488:	10800817 	ldw	r2,32(r2)
 800248c:	10c00054 	ori	r3,r2,1
 8002490:	e0bffc17 	ldw	r2,-16(fp)
 8002494:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8002498:	e0bffc17 	ldw	r2,-16(fp)
 800249c:	10800017 	ldw	r2,0(r2)
 80024a0:	10800104 	addi	r2,r2,4
 80024a4:	1007883a 	mov	r3,r2
 80024a8:	e0bffc17 	ldw	r2,-16(fp)
 80024ac:	10800817 	ldw	r2,32(r2)
 80024b0:	18800035 	stwio	r2,0(r3)
 80024b4:	e0bffa17 	ldw	r2,-24(fp)
 80024b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80024bc:	e0bff917 	ldw	r2,-28(fp)
 80024c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80024c4:	e0fff517 	ldw	r3,-44(fp)
 80024c8:	e0bffd17 	ldw	r2,-12(fp)
 80024cc:	18800426 	beq	r3,r2,80024e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80024d0:	e0fff517 	ldw	r3,-44(fp)
 80024d4:	e0bffd17 	ldw	r2,-12(fp)
 80024d8:	1885c83a 	sub	r2,r3,r2
 80024dc:	00000606 	br	80024f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80024e0:	e0bfff17 	ldw	r2,-4(fp)
 80024e4:	1090000c 	andi	r2,r2,16384
 80024e8:	10000226 	beq	r2,zero,80024f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80024ec:	00bffd44 	movi	r2,-11
 80024f0:	00000106 	br	80024f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80024f4:	00bffec4 	movi	r2,-5
}
 80024f8:	e037883a 	mov	sp,fp
 80024fc:	dfc00117 	ldw	ra,4(sp)
 8002500:	df000017 	ldw	fp,0(sp)
 8002504:	dec00204 	addi	sp,sp,8
 8002508:	f800283a 	ret

0800250c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800250c:	defff304 	addi	sp,sp,-52
 8002510:	dfc00c15 	stw	ra,48(sp)
 8002514:	df000b15 	stw	fp,44(sp)
 8002518:	df000b04 	addi	fp,sp,44
 800251c:	e13ffc15 	stw	r4,-16(fp)
 8002520:	e17ffd15 	stw	r5,-12(fp)
 8002524:	e1bffe15 	stw	r6,-8(fp)
 8002528:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800252c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8002530:	e0bffd17 	ldw	r2,-12(fp)
 8002534:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8002538:	00003706 	br	8002618 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800253c:	e0bffc17 	ldw	r2,-16(fp)
 8002540:	10800c17 	ldw	r2,48(r2)
 8002544:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8002548:	e0bffc17 	ldw	r2,-16(fp)
 800254c:	10800d17 	ldw	r2,52(r2)
 8002550:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8002554:	e0fff917 	ldw	r3,-28(fp)
 8002558:	e0bff517 	ldw	r2,-44(fp)
 800255c:	1880062e 	bgeu	r3,r2,8002578 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8002560:	e0fff517 	ldw	r3,-44(fp)
 8002564:	e0bff917 	ldw	r2,-28(fp)
 8002568:	1885c83a 	sub	r2,r3,r2
 800256c:	10bfffc4 	addi	r2,r2,-1
 8002570:	e0bff615 	stw	r2,-40(fp)
 8002574:	00000b06 	br	80025a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8002578:	e0bff517 	ldw	r2,-44(fp)
 800257c:	10000526 	beq	r2,zero,8002594 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8002580:	00c20004 	movi	r3,2048
 8002584:	e0bff917 	ldw	r2,-28(fp)
 8002588:	1885c83a 	sub	r2,r3,r2
 800258c:	e0bff615 	stw	r2,-40(fp)
 8002590:	00000406 	br	80025a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8002594:	00c1ffc4 	movi	r3,2047
 8002598:	e0bff917 	ldw	r2,-28(fp)
 800259c:	1885c83a 	sub	r2,r3,r2
 80025a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80025a4:	e0bff617 	ldw	r2,-40(fp)
 80025a8:	10001e26 	beq	r2,zero,8002624 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80025ac:	e0fffe17 	ldw	r3,-8(fp)
 80025b0:	e0bff617 	ldw	r2,-40(fp)
 80025b4:	1880022e 	bgeu	r3,r2,80025c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80025b8:	e0bffe17 	ldw	r2,-8(fp)
 80025bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80025c0:	e0bffc17 	ldw	r2,-16(fp)
 80025c4:	10c20e04 	addi	r3,r2,2104
 80025c8:	e0bff917 	ldw	r2,-28(fp)
 80025cc:	1885883a 	add	r2,r3,r2
 80025d0:	e1bff617 	ldw	r6,-40(fp)
 80025d4:	e17ffd17 	ldw	r5,-12(fp)
 80025d8:	1009883a 	mov	r4,r2
 80025dc:	8003ce00 	call	8003ce0 <memcpy>
      ptr   += n;
 80025e0:	e0fffd17 	ldw	r3,-12(fp)
 80025e4:	e0bff617 	ldw	r2,-40(fp)
 80025e8:	1885883a 	add	r2,r3,r2
 80025ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80025f0:	e0fffe17 	ldw	r3,-8(fp)
 80025f4:	e0bff617 	ldw	r2,-40(fp)
 80025f8:	1885c83a 	sub	r2,r3,r2
 80025fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8002600:	e0fff917 	ldw	r3,-28(fp)
 8002604:	e0bff617 	ldw	r2,-40(fp)
 8002608:	1885883a 	add	r2,r3,r2
 800260c:	10c1ffcc 	andi	r3,r2,2047
 8002610:	e0bffc17 	ldw	r2,-16(fp)
 8002614:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8002618:	e0bffe17 	ldw	r2,-8(fp)
 800261c:	00bfc716 	blt	zero,r2,800253c <__alt_data_end+0xf800253c>
 8002620:	00000106 	br	8002628 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8002624:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002628:	0005303a 	rdctl	r2,status
 800262c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002630:	e0fffb17 	ldw	r3,-20(fp)
 8002634:	00bfff84 	movi	r2,-2
 8002638:	1884703a 	and	r2,r3,r2
 800263c:	1001703a 	wrctl	status,r2
  
  return context;
 8002640:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8002644:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8002648:	e0bffc17 	ldw	r2,-16(fp)
 800264c:	10800817 	ldw	r2,32(r2)
 8002650:	10c00094 	ori	r3,r2,2
 8002654:	e0bffc17 	ldw	r2,-16(fp)
 8002658:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800265c:	e0bffc17 	ldw	r2,-16(fp)
 8002660:	10800017 	ldw	r2,0(r2)
 8002664:	10800104 	addi	r2,r2,4
 8002668:	1007883a 	mov	r3,r2
 800266c:	e0bffc17 	ldw	r2,-16(fp)
 8002670:	10800817 	ldw	r2,32(r2)
 8002674:	18800035 	stwio	r2,0(r3)
 8002678:	e0bffa17 	ldw	r2,-24(fp)
 800267c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002680:	e0bff817 	ldw	r2,-32(fp)
 8002684:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8002688:	e0bffe17 	ldw	r2,-8(fp)
 800268c:	0080100e 	bge	zero,r2,80026d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8002690:	e0bfff17 	ldw	r2,-4(fp)
 8002694:	1090000c 	andi	r2,r2,16384
 8002698:	1000101e 	bne	r2,zero,80026dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800269c:	0001883a 	nop
 80026a0:	e0bffc17 	ldw	r2,-16(fp)
 80026a4:	10c00d17 	ldw	r3,52(r2)
 80026a8:	e0bff517 	ldw	r2,-44(fp)
 80026ac:	1880051e 	bne	r3,r2,80026c4 <altera_avalon_jtag_uart_write+0x1b8>
 80026b0:	e0bffc17 	ldw	r2,-16(fp)
 80026b4:	10c00917 	ldw	r3,36(r2)
 80026b8:	e0bffc17 	ldw	r2,-16(fp)
 80026bc:	10800117 	ldw	r2,4(r2)
 80026c0:	18bff736 	bltu	r3,r2,80026a0 <__alt_data_end+0xf80026a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80026c4:	e0bffc17 	ldw	r2,-16(fp)
 80026c8:	10800917 	ldw	r2,36(r2)
 80026cc:	1000051e 	bne	r2,zero,80026e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80026d0:	e0bffe17 	ldw	r2,-8(fp)
 80026d4:	00bfd016 	blt	zero,r2,8002618 <__alt_data_end+0xf8002618>
 80026d8:	00000306 	br	80026e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80026dc:	0001883a 	nop
 80026e0:	00000106 	br	80026e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80026e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80026e8:	e0fffd17 	ldw	r3,-12(fp)
 80026ec:	e0bff717 	ldw	r2,-36(fp)
 80026f0:	18800426 	beq	r3,r2,8002704 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80026f4:	e0fffd17 	ldw	r3,-12(fp)
 80026f8:	e0bff717 	ldw	r2,-36(fp)
 80026fc:	1885c83a 	sub	r2,r3,r2
 8002700:	00000606 	br	800271c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8002704:	e0bfff17 	ldw	r2,-4(fp)
 8002708:	1090000c 	andi	r2,r2,16384
 800270c:	10000226 	beq	r2,zero,8002718 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8002710:	00bffd44 	movi	r2,-11
 8002714:	00000106 	br	800271c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8002718:	00bffec4 	movi	r2,-5
}
 800271c:	e037883a 	mov	sp,fp
 8002720:	dfc00117 	ldw	ra,4(sp)
 8002724:	df000017 	ldw	fp,0(sp)
 8002728:	dec00204 	addi	sp,sp,8
 800272c:	f800283a 	ret

08002730 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8002730:	defffa04 	addi	sp,sp,-24
 8002734:	dfc00515 	stw	ra,20(sp)
 8002738:	df000415 	stw	fp,16(sp)
 800273c:	df000404 	addi	fp,sp,16
 8002740:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8002744:	0007883a 	mov	r3,zero
 8002748:	e0bfff17 	ldw	r2,-4(fp)
 800274c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8002750:	e0bfff17 	ldw	r2,-4(fp)
 8002754:	10800104 	addi	r2,r2,4
 8002758:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800275c:	0005303a 	rdctl	r2,status
 8002760:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002764:	e0fffd17 	ldw	r3,-12(fp)
 8002768:	00bfff84 	movi	r2,-2
 800276c:	1884703a 	and	r2,r3,r2
 8002770:	1001703a 	wrctl	status,r2
  
  return context;
 8002774:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8002778:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800277c:	80038b00 	call	80038b0 <alt_tick>
 8002780:	e0bffc17 	ldw	r2,-16(fp)
 8002784:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002788:	e0bffe17 	ldw	r2,-8(fp)
 800278c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8002790:	0001883a 	nop
 8002794:	e037883a 	mov	sp,fp
 8002798:	dfc00117 	ldw	ra,4(sp)
 800279c:	df000017 	ldw	fp,0(sp)
 80027a0:	dec00204 	addi	sp,sp,8
 80027a4:	f800283a 	ret

080027a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80027a8:	defff804 	addi	sp,sp,-32
 80027ac:	dfc00715 	stw	ra,28(sp)
 80027b0:	df000615 	stw	fp,24(sp)
 80027b4:	df000604 	addi	fp,sp,24
 80027b8:	e13ffc15 	stw	r4,-16(fp)
 80027bc:	e17ffd15 	stw	r5,-12(fp)
 80027c0:	e1bffe15 	stw	r6,-8(fp)
 80027c4:	e1ffff15 	stw	r7,-4(fp)
 80027c8:	e0bfff17 	ldw	r2,-4(fp)
 80027cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80027d0:	d0a65817 	ldw	r2,-26272(gp)
 80027d4:	1000021e 	bne	r2,zero,80027e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80027d8:	e0bffb17 	ldw	r2,-20(fp)
 80027dc:	d0a65815 	stw	r2,-26272(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80027e0:	e0bffc17 	ldw	r2,-16(fp)
 80027e4:	10800104 	addi	r2,r2,4
 80027e8:	00c001c4 	movi	r3,7
 80027ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80027f0:	d8000015 	stw	zero,0(sp)
 80027f4:	e1fffc17 	ldw	r7,-16(fp)
 80027f8:	01820034 	movhi	r6,2048
 80027fc:	3189cc04 	addi	r6,r6,10032
 8002800:	e17ffe17 	ldw	r5,-8(fp)
 8002804:	e13ffd17 	ldw	r4,-12(fp)
 8002808:	80017a80 	call	80017a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800280c:	0001883a 	nop
 8002810:	e037883a 	mov	sp,fp
 8002814:	dfc00117 	ldw	ra,4(sp)
 8002818:	df000017 	ldw	fp,0(sp)
 800281c:	dec00204 	addi	sp,sp,8
 8002820:	f800283a 	ret

08002824 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8002824:	defffc04 	addi	sp,sp,-16
 8002828:	df000315 	stw	fp,12(sp)
 800282c:	df000304 	addi	fp,sp,12
 8002830:	e13ffe15 	stw	r4,-8(fp)
 8002834:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8002838:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800283c:	e0bfff17 	ldw	r2,-4(fp)
 8002840:	1000061e 	bne	r2,zero,800285c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8002844:	e0bffe17 	ldw	r2,-8(fp)
 8002848:	1007883a 	mov	r3,r2
 800284c:	e0bffd03 	ldbu	r2,-12(fp)
 8002850:	1884b03a 	or	r2,r3,r2
 8002854:	e0bffd05 	stb	r2,-12(fp)
 8002858:	00000806 	br	800287c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800285c:	e0bffe17 	ldw	r2,-8(fp)
 8002860:	1007883a 	mov	r3,r2
 8002864:	e0bffd03 	ldbu	r2,-12(fp)
 8002868:	1884b03a 	or	r2,r3,r2
 800286c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8002870:	e0bffd03 	ldbu	r2,-12(fp)
 8002874:	10801014 	ori	r2,r2,64
 8002878:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800287c:	e0fffd03 	ldbu	r3,-12(fp)
 8002880:	00bfe004 	movi	r2,-128
 8002884:	1884b03a 	or	r2,r3,r2
}
 8002888:	e037883a 	mov	sp,fp
 800288c:	df000017 	ldw	fp,0(sp)
 8002890:	dec00104 	addi	sp,sp,4
 8002894:	f800283a 	ret

08002898 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8002898:	defffd04 	addi	sp,sp,-12
 800289c:	df000215 	stw	fp,8(sp)
 80028a0:	df000204 	addi	fp,sp,8
 80028a4:	e13ffe15 	stw	r4,-8(fp)
 80028a8:	2805883a 	mov	r2,r5
 80028ac:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80028b0:	e0bffe17 	ldw	r2,-8(fp)
 80028b4:	10800a17 	ldw	r2,40(r2)
 80028b8:	1007883a 	mov	r3,r2
 80028bc:	e0bfff03 	ldbu	r2,-4(fp)
 80028c0:	18800025 	stbio	r2,0(r3)
}
 80028c4:	0001883a 	nop
 80028c8:	e037883a 	mov	sp,fp
 80028cc:	df000017 	ldw	fp,0(sp)
 80028d0:	dec00104 	addi	sp,sp,4
 80028d4:	f800283a 	ret

080028d8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80028d8:	defffe04 	addi	sp,sp,-8
 80028dc:	df000115 	stw	fp,4(sp)
 80028e0:	df000104 	addi	fp,sp,4
 80028e4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80028e8:	e0bfff17 	ldw	r2,-4(fp)
 80028ec:	10800a17 	ldw	r2,40(r2)
 80028f0:	1007883a 	mov	r3,r2
 80028f4:	00800044 	movi	r2,1
 80028f8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 80028fc:	0001883a 	nop
 8002900:	e037883a 	mov	sp,fp
 8002904:	df000017 	ldw	fp,0(sp)
 8002908:	dec00104 	addi	sp,sp,4
 800290c:	f800283a 	ret

08002910 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8002910:	defffc04 	addi	sp,sp,-16
 8002914:	dfc00315 	stw	ra,12(sp)
 8002918:	df000215 	stw	fp,8(sp)
 800291c:	df000204 	addi	fp,sp,8
 8002920:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8002924:	d1600e04 	addi	r5,gp,-32712
 8002928:	e13fff17 	ldw	r4,-4(fp)
 800292c:	80032bc0 	call	80032bc <alt_find_dev>
 8002930:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8002934:	e0bffe17 	ldw	r2,-8(fp)
}
 8002938:	e037883a 	mov	sp,fp
 800293c:	dfc00117 	ldw	ra,4(sp)
 8002940:	df000017 	ldw	fp,0(sp)
 8002944:	dec00204 	addi	sp,sp,8
 8002948:	f800283a 	ret

0800294c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800294c:	defffb04 	addi	sp,sp,-20
 8002950:	df000415 	stw	fp,16(sp)
 8002954:	df000404 	addi	fp,sp,16
 8002958:	e13ffd15 	stw	r4,-12(fp)
 800295c:	e17ffe15 	stw	r5,-8(fp)
 8002960:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8002964:	e03ffc15 	stw	zero,-16(fp)
 8002968:	00000f06 	br	80029a8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800296c:	e0bffd17 	ldw	r2,-12(fp)
 8002970:	10800a17 	ldw	r2,40(r2)
 8002974:	10800044 	addi	r2,r2,1
 8002978:	1009883a 	mov	r4,r2
 800297c:	e0fffe17 	ldw	r3,-8(fp)
 8002980:	e0bffc17 	ldw	r2,-16(fp)
 8002984:	1885883a 	add	r2,r3,r2
 8002988:	10800003 	ldbu	r2,0(r2)
 800298c:	10803fcc 	andi	r2,r2,255
 8002990:	1080201c 	xori	r2,r2,128
 8002994:	10bfe004 	addi	r2,r2,-128
 8002998:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800299c:	e0bffc17 	ldw	r2,-16(fp)
 80029a0:	10800044 	addi	r2,r2,1
 80029a4:	e0bffc15 	stw	r2,-16(fp)
 80029a8:	e0fffc17 	ldw	r3,-16(fp)
 80029ac:	e0bfff17 	ldw	r2,-4(fp)
 80029b0:	18bfee36 	bltu	r3,r2,800296c <__alt_data_end+0xf800296c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 80029b4:	0001883a 	nop
 80029b8:	e037883a 	mov	sp,fp
 80029bc:	df000017 	ldw	fp,0(sp)
 80029c0:	dec00104 	addi	sp,sp,4
 80029c4:	f800283a 	ret

080029c8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 80029c8:	defffd04 	addi	sp,sp,-12
 80029cc:	df000215 	stw	fp,8(sp)
 80029d0:	df000204 	addi	fp,sp,8
 80029d4:	e13ffe15 	stw	r4,-8(fp)
 80029d8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 80029dc:	00000d06 	br	8002a14 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80029e0:	e0bffe17 	ldw	r2,-8(fp)
 80029e4:	10800a17 	ldw	r2,40(r2)
 80029e8:	10800044 	addi	r2,r2,1
 80029ec:	1007883a 	mov	r3,r2
 80029f0:	e0bfff17 	ldw	r2,-4(fp)
 80029f4:	10800003 	ldbu	r2,0(r2)
 80029f8:	10803fcc 	andi	r2,r2,255
 80029fc:	1080201c 	xori	r2,r2,128
 8002a00:	10bfe004 	addi	r2,r2,-128
 8002a04:	18800025 	stbio	r2,0(r3)
		++ptr;
 8002a08:	e0bfff17 	ldw	r2,-4(fp)
 8002a0c:	10800044 	addi	r2,r2,1
 8002a10:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8002a14:	e0bfff17 	ldw	r2,-4(fp)
 8002a18:	10800003 	ldbu	r2,0(r2)
 8002a1c:	10803fcc 	andi	r2,r2,255
 8002a20:	1080201c 	xori	r2,r2,128
 8002a24:	10bfe004 	addi	r2,r2,-128
 8002a28:	103fed1e 	bne	r2,zero,80029e0 <__alt_data_end+0xf80029e0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8002a2c:	0001883a 	nop
 8002a30:	e037883a 	mov	sp,fp
 8002a34:	df000017 	ldw	fp,0(sp)
 8002a38:	dec00104 	addi	sp,sp,4
 8002a3c:	f800283a 	ret

08002a40 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8002a40:	defffb04 	addi	sp,sp,-20
 8002a44:	dfc00415 	stw	ra,16(sp)
 8002a48:	df000315 	stw	fp,12(sp)
 8002a4c:	df000304 	addi	fp,sp,12
 8002a50:	e13ffd15 	stw	r4,-12(fp)
 8002a54:	e17ffe15 	stw	r5,-8(fp)
 8002a58:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8002a5c:	e0bffd17 	ldw	r2,-12(fp)
 8002a60:	10800017 	ldw	r2,0(r2)
 8002a64:	e0ffff17 	ldw	r3,-4(fp)
 8002a68:	180d883a 	mov	r6,r3
 8002a6c:	e17ffe17 	ldw	r5,-8(fp)
 8002a70:	1009883a 	mov	r4,r2
 8002a74:	800294c0 	call	800294c <alt_up_character_lcd_write>
	return 0;
 8002a78:	0005883a 	mov	r2,zero
}
 8002a7c:	e037883a 	mov	sp,fp
 8002a80:	dfc00117 	ldw	ra,4(sp)
 8002a84:	df000017 	ldw	fp,0(sp)
 8002a88:	dec00204 	addi	sp,sp,8
 8002a8c:	f800283a 	ret

08002a90 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8002a90:	defffa04 	addi	sp,sp,-24
 8002a94:	dfc00515 	stw	ra,20(sp)
 8002a98:	df000415 	stw	fp,16(sp)
 8002a9c:	df000404 	addi	fp,sp,16
 8002aa0:	e13ffd15 	stw	r4,-12(fp)
 8002aa4:	e17ffe15 	stw	r5,-8(fp)
 8002aa8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8002aac:	e0bffe17 	ldw	r2,-8(fp)
 8002ab0:	10800a28 	cmpgeui	r2,r2,40
 8002ab4:	1000031e 	bne	r2,zero,8002ac4 <alt_up_character_lcd_set_cursor_pos+0x34>
 8002ab8:	e0bfff17 	ldw	r2,-4(fp)
 8002abc:	108000b0 	cmpltui	r2,r2,2
 8002ac0:	1000021e 	bne	r2,zero,8002acc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8002ac4:	00bfffc4 	movi	r2,-1
 8002ac8:	00000906 	br	8002af0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8002acc:	e17fff17 	ldw	r5,-4(fp)
 8002ad0:	e13ffe17 	ldw	r4,-8(fp)
 8002ad4:	80028240 	call	8002824 <get_DDRAM_addr>
 8002ad8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8002adc:	e0bffc03 	ldbu	r2,-16(fp)
 8002ae0:	100b883a 	mov	r5,r2
 8002ae4:	e13ffd17 	ldw	r4,-12(fp)
 8002ae8:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
	return 0;
 8002aec:	0005883a 	mov	r2,zero
}
 8002af0:	e037883a 	mov	sp,fp
 8002af4:	dfc00117 	ldw	ra,4(sp)
 8002af8:	df000017 	ldw	fp,0(sp)
 8002afc:	dec00204 	addi	sp,sp,8
 8002b00:	f800283a 	ret

08002b04 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8002b04:	defffb04 	addi	sp,sp,-20
 8002b08:	dfc00415 	stw	ra,16(sp)
 8002b0c:	df000315 	stw	fp,12(sp)
 8002b10:	df000304 	addi	fp,sp,12
 8002b14:	e13ffe15 	stw	r4,-8(fp)
 8002b18:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8002b1c:	e0bfff17 	ldw	r2,-4(fp)
 8002b20:	10001526 	beq	r2,zero,8002b78 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8002b24:	e0bfff17 	ldw	r2,-4(fp)
 8002b28:	0080020e 	bge	zero,r2,8002b34 <alt_up_character_lcd_shift_cursor+0x30>
 8002b2c:	00800504 	movi	r2,20
 8002b30:	00000106 	br	8002b38 <alt_up_character_lcd_shift_cursor+0x34>
 8002b34:	00800404 	movi	r2,16
 8002b38:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8002b3c:	e0bfff17 	ldw	r2,-4(fp)
 8002b40:	1000010e 	bge	r2,zero,8002b48 <alt_up_character_lcd_shift_cursor+0x44>
 8002b44:	0085c83a 	sub	r2,zero,r2
 8002b48:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8002b4c:	00000406 	br	8002b60 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8002b50:	e0bffd43 	ldbu	r2,-11(fp)
 8002b54:	100b883a 	mov	r5,r2
 8002b58:	e13ffe17 	ldw	r4,-8(fp)
 8002b5c:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8002b60:	e0bffd03 	ldbu	r2,-12(fp)
 8002b64:	10ffffc4 	addi	r3,r2,-1
 8002b68:	e0fffd05 	stb	r3,-12(fp)
 8002b6c:	10803fcc 	andi	r2,r2,255
 8002b70:	103ff71e 	bne	r2,zero,8002b50 <__alt_data_end+0xf8002b50>
 8002b74:	00000106 	br	8002b7c <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 8002b78:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8002b7c:	e037883a 	mov	sp,fp
 8002b80:	dfc00117 	ldw	ra,4(sp)
 8002b84:	df000017 	ldw	fp,0(sp)
 8002b88:	dec00204 	addi	sp,sp,8
 8002b8c:	f800283a 	ret

08002b90 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8002b90:	defffb04 	addi	sp,sp,-20
 8002b94:	dfc00415 	stw	ra,16(sp)
 8002b98:	df000315 	stw	fp,12(sp)
 8002b9c:	df000304 	addi	fp,sp,12
 8002ba0:	e13ffe15 	stw	r4,-8(fp)
 8002ba4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8002ba8:	e0bfff17 	ldw	r2,-4(fp)
 8002bac:	10001526 	beq	r2,zero,8002c04 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8002bb0:	e0bfff17 	ldw	r2,-4(fp)
 8002bb4:	0080020e 	bge	zero,r2,8002bc0 <alt_up_character_lcd_shift_display+0x30>
 8002bb8:	00800704 	movi	r2,28
 8002bbc:	00000106 	br	8002bc4 <alt_up_character_lcd_shift_display+0x34>
 8002bc0:	00800604 	movi	r2,24
 8002bc4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8002bc8:	e0bfff17 	ldw	r2,-4(fp)
 8002bcc:	1000010e 	bge	r2,zero,8002bd4 <alt_up_character_lcd_shift_display+0x44>
 8002bd0:	0085c83a 	sub	r2,zero,r2
 8002bd4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8002bd8:	00000406 	br	8002bec <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8002bdc:	e0bffd43 	ldbu	r2,-11(fp)
 8002be0:	100b883a 	mov	r5,r2
 8002be4:	e13ffe17 	ldw	r4,-8(fp)
 8002be8:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8002bec:	e0bffd03 	ldbu	r2,-12(fp)
 8002bf0:	10ffffc4 	addi	r3,r2,-1
 8002bf4:	e0fffd05 	stb	r3,-12(fp)
 8002bf8:	10803fcc 	andi	r2,r2,255
 8002bfc:	103ff71e 	bne	r2,zero,8002bdc <__alt_data_end+0xf8002bdc>
 8002c00:	00000106 	br	8002c08 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 8002c04:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8002c08:	e037883a 	mov	sp,fp
 8002c0c:	dfc00117 	ldw	ra,4(sp)
 8002c10:	df000017 	ldw	fp,0(sp)
 8002c14:	dec00204 	addi	sp,sp,8
 8002c18:	f800283a 	ret

08002c1c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8002c1c:	defffa04 	addi	sp,sp,-24
 8002c20:	dfc00515 	stw	ra,20(sp)
 8002c24:	df000415 	stw	fp,16(sp)
 8002c28:	df000404 	addi	fp,sp,16
 8002c2c:	e13ffd15 	stw	r4,-12(fp)
 8002c30:	e17ffe15 	stw	r5,-8(fp)
 8002c34:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8002c38:	e0bffe17 	ldw	r2,-8(fp)
 8002c3c:	10800a28 	cmpgeui	r2,r2,40
 8002c40:	1000031e 	bne	r2,zero,8002c50 <alt_up_character_lcd_erase_pos+0x34>
 8002c44:	e0bfff17 	ldw	r2,-4(fp)
 8002c48:	108000b0 	cmpltui	r2,r2,2
 8002c4c:	1000021e 	bne	r2,zero,8002c58 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8002c50:	00bfffc4 	movi	r2,-1
 8002c54:	00000f06 	br	8002c94 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8002c58:	e17fff17 	ldw	r5,-4(fp)
 8002c5c:	e13ffe17 	ldw	r4,-8(fp)
 8002c60:	80028240 	call	8002824 <get_DDRAM_addr>
 8002c64:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8002c68:	e0bffc03 	ldbu	r2,-16(fp)
 8002c6c:	100b883a 	mov	r5,r2
 8002c70:	e13ffd17 	ldw	r4,-12(fp)
 8002c74:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8002c78:	e0bffd17 	ldw	r2,-12(fp)
 8002c7c:	10800a17 	ldw	r2,40(r2)
 8002c80:	10800044 	addi	r2,r2,1
 8002c84:	1007883a 	mov	r3,r2
 8002c88:	00800084 	movi	r2,2
 8002c8c:	18800025 	stbio	r2,0(r3)
	return 0;
 8002c90:	0005883a 	mov	r2,zero
}
 8002c94:	e037883a 	mov	sp,fp
 8002c98:	dfc00117 	ldw	ra,4(sp)
 8002c9c:	df000017 	ldw	fp,0(sp)
 8002ca0:	dec00204 	addi	sp,sp,8
 8002ca4:	f800283a 	ret

08002ca8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8002ca8:	defffd04 	addi	sp,sp,-12
 8002cac:	dfc00215 	stw	ra,8(sp)
 8002cb0:	df000115 	stw	fp,4(sp)
 8002cb4:	df000104 	addi	fp,sp,4
 8002cb8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8002cbc:	01400304 	movi	r5,12
 8002cc0:	e13fff17 	ldw	r4,-4(fp)
 8002cc4:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
}
 8002cc8:	0001883a 	nop
 8002ccc:	e037883a 	mov	sp,fp
 8002cd0:	dfc00117 	ldw	ra,4(sp)
 8002cd4:	df000017 	ldw	fp,0(sp)
 8002cd8:	dec00204 	addi	sp,sp,8
 8002cdc:	f800283a 	ret

08002ce0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8002ce0:	defffd04 	addi	sp,sp,-12
 8002ce4:	dfc00215 	stw	ra,8(sp)
 8002ce8:	df000115 	stw	fp,4(sp)
 8002cec:	df000104 	addi	fp,sp,4
 8002cf0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8002cf4:	014003c4 	movi	r5,15
 8002cf8:	e13fff17 	ldw	r4,-4(fp)
 8002cfc:	80028980 	call	8002898 <alt_up_character_lcd_send_cmd>
}
 8002d00:	0001883a 	nop
 8002d04:	e037883a 	mov	sp,fp
 8002d08:	dfc00117 	ldw	ra,4(sp)
 8002d0c:	df000017 	ldw	fp,0(sp)
 8002d10:	dec00204 	addi	sp,sp,8
 8002d14:	f800283a 	ret

08002d18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8002d18:	defff504 	addi	sp,sp,-44
 8002d1c:	df000a15 	stw	fp,40(sp)
 8002d20:	df000a04 	addi	fp,sp,40
 8002d24:	e13ffc15 	stw	r4,-16(fp)
 8002d28:	e17ffd15 	stw	r5,-12(fp)
 8002d2c:	e1bffe15 	stw	r6,-8(fp)
 8002d30:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8002d34:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002d38:	d0a65817 	ldw	r2,-26272(gp)
  
  if (alt_ticks_per_second ())
 8002d3c:	10003c26 	beq	r2,zero,8002e30 <alt_alarm_start+0x118>
  {
    if (alarm)
 8002d40:	e0bffc17 	ldw	r2,-16(fp)
 8002d44:	10003826 	beq	r2,zero,8002e28 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8002d48:	e0bffc17 	ldw	r2,-16(fp)
 8002d4c:	e0fffe17 	ldw	r3,-8(fp)
 8002d50:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8002d54:	e0bffc17 	ldw	r2,-16(fp)
 8002d58:	e0ffff17 	ldw	r3,-4(fp)
 8002d5c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002d60:	0005303a 	rdctl	r2,status
 8002d64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002d68:	e0fff917 	ldw	r3,-28(fp)
 8002d6c:	00bfff84 	movi	r2,-2
 8002d70:	1884703a 	and	r2,r3,r2
 8002d74:	1001703a 	wrctl	status,r2
  
  return context;
 8002d78:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8002d7c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002d80:	d0a65917 	ldw	r2,-26268(gp)
      
      current_nticks = alt_nticks();
 8002d84:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8002d88:	e0fffd17 	ldw	r3,-12(fp)
 8002d8c:	e0bff617 	ldw	r2,-40(fp)
 8002d90:	1885883a 	add	r2,r3,r2
 8002d94:	10c00044 	addi	r3,r2,1
 8002d98:	e0bffc17 	ldw	r2,-16(fp)
 8002d9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8002da0:	e0bffc17 	ldw	r2,-16(fp)
 8002da4:	10c00217 	ldw	r3,8(r2)
 8002da8:	e0bff617 	ldw	r2,-40(fp)
 8002dac:	1880042e 	bgeu	r3,r2,8002dc0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8002db0:	e0bffc17 	ldw	r2,-16(fp)
 8002db4:	00c00044 	movi	r3,1
 8002db8:	10c00405 	stb	r3,16(r2)
 8002dbc:	00000206 	br	8002dc8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8002dc0:	e0bffc17 	ldw	r2,-16(fp)
 8002dc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8002dc8:	e0bffc17 	ldw	r2,-16(fp)
 8002dcc:	d0e01204 	addi	r3,gp,-32696
 8002dd0:	e0fffa15 	stw	r3,-24(fp)
 8002dd4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8002dd8:	e0bffb17 	ldw	r2,-20(fp)
 8002ddc:	e0fffa17 	ldw	r3,-24(fp)
 8002de0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8002de4:	e0bffa17 	ldw	r2,-24(fp)
 8002de8:	10c00017 	ldw	r3,0(r2)
 8002dec:	e0bffb17 	ldw	r2,-20(fp)
 8002df0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8002df4:	e0bffa17 	ldw	r2,-24(fp)
 8002df8:	10800017 	ldw	r2,0(r2)
 8002dfc:	e0fffb17 	ldw	r3,-20(fp)
 8002e00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8002e04:	e0bffa17 	ldw	r2,-24(fp)
 8002e08:	e0fffb17 	ldw	r3,-20(fp)
 8002e0c:	10c00015 	stw	r3,0(r2)
 8002e10:	e0bff817 	ldw	r2,-32(fp)
 8002e14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002e18:	e0bff717 	ldw	r2,-36(fp)
 8002e1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8002e20:	0005883a 	mov	r2,zero
 8002e24:	00000306 	br	8002e34 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8002e28:	00bffa84 	movi	r2,-22
 8002e2c:	00000106 	br	8002e34 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8002e30:	00bfde84 	movi	r2,-134
  }
}
 8002e34:	e037883a 	mov	sp,fp
 8002e38:	df000017 	ldw	fp,0(sp)
 8002e3c:	dec00104 	addi	sp,sp,4
 8002e40:	f800283a 	ret

08002e44 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8002e44:	defffa04 	addi	sp,sp,-24
 8002e48:	dfc00515 	stw	ra,20(sp)
 8002e4c:	df000415 	stw	fp,16(sp)
 8002e50:	df000404 	addi	fp,sp,16
 8002e54:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8002e58:	008000c4 	movi	r2,3
 8002e5c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8002e60:	e0fffd17 	ldw	r3,-12(fp)
 8002e64:	008003f4 	movhi	r2,15
 8002e68:	10909004 	addi	r2,r2,16960
 8002e6c:	1885383a 	mul	r2,r3,r2
 8002e70:	100b883a 	mov	r5,r2
 8002e74:	0100bef4 	movhi	r4,763
 8002e78:	213c2004 	addi	r4,r4,-3968
 8002e7c:	80041b80 	call	80041b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8002e80:	100b883a 	mov	r5,r2
 8002e84:	01200034 	movhi	r4,32768
 8002e88:	213fffc4 	addi	r4,r4,-1
 8002e8c:	80041b80 	call	80041b8 <__udivsi3>
 8002e90:	100b883a 	mov	r5,r2
 8002e94:	e13fff17 	ldw	r4,-4(fp)
 8002e98:	80041b80 	call	80041b8 <__udivsi3>
 8002e9c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8002ea0:	e0bffe17 	ldw	r2,-8(fp)
 8002ea4:	10002a26 	beq	r2,zero,8002f50 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8002ea8:	e03ffc15 	stw	zero,-16(fp)
 8002eac:	00001706 	br	8002f0c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8002eb0:	00a00034 	movhi	r2,32768
 8002eb4:	10bfffc4 	addi	r2,r2,-1
 8002eb8:	10bfffc4 	addi	r2,r2,-1
 8002ebc:	103ffe1e 	bne	r2,zero,8002eb8 <__alt_data_end+0xf8002eb8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8002ec0:	e0fffd17 	ldw	r3,-12(fp)
 8002ec4:	008003f4 	movhi	r2,15
 8002ec8:	10909004 	addi	r2,r2,16960
 8002ecc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8002ed0:	100b883a 	mov	r5,r2
 8002ed4:	0100bef4 	movhi	r4,763
 8002ed8:	213c2004 	addi	r4,r4,-3968
 8002edc:	80041b80 	call	80041b8 <__udivsi3>
 8002ee0:	100b883a 	mov	r5,r2
 8002ee4:	01200034 	movhi	r4,32768
 8002ee8:	213fffc4 	addi	r4,r4,-1
 8002eec:	80041b80 	call	80041b8 <__udivsi3>
 8002ef0:	1007883a 	mov	r3,r2
 8002ef4:	e0bfff17 	ldw	r2,-4(fp)
 8002ef8:	10c5c83a 	sub	r2,r2,r3
 8002efc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8002f00:	e0bffc17 	ldw	r2,-16(fp)
 8002f04:	10800044 	addi	r2,r2,1
 8002f08:	e0bffc15 	stw	r2,-16(fp)
 8002f0c:	e0fffc17 	ldw	r3,-16(fp)
 8002f10:	e0bffe17 	ldw	r2,-8(fp)
 8002f14:	18bfe616 	blt	r3,r2,8002eb0 <__alt_data_end+0xf8002eb0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8002f18:	e0fffd17 	ldw	r3,-12(fp)
 8002f1c:	008003f4 	movhi	r2,15
 8002f20:	10909004 	addi	r2,r2,16960
 8002f24:	1885383a 	mul	r2,r3,r2
 8002f28:	100b883a 	mov	r5,r2
 8002f2c:	0100bef4 	movhi	r4,763
 8002f30:	213c2004 	addi	r4,r4,-3968
 8002f34:	80041b80 	call	80041b8 <__udivsi3>
 8002f38:	1007883a 	mov	r3,r2
 8002f3c:	e0bfff17 	ldw	r2,-4(fp)
 8002f40:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8002f44:	10bfffc4 	addi	r2,r2,-1
 8002f48:	103ffe1e 	bne	r2,zero,8002f44 <__alt_data_end+0xf8002f44>
 8002f4c:	00000d06 	br	8002f84 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8002f50:	e0fffd17 	ldw	r3,-12(fp)
 8002f54:	008003f4 	movhi	r2,15
 8002f58:	10909004 	addi	r2,r2,16960
 8002f5c:	1885383a 	mul	r2,r3,r2
 8002f60:	100b883a 	mov	r5,r2
 8002f64:	0100bef4 	movhi	r4,763
 8002f68:	213c2004 	addi	r4,r4,-3968
 8002f6c:	80041b80 	call	80041b8 <__udivsi3>
 8002f70:	1007883a 	mov	r3,r2
 8002f74:	e0bfff17 	ldw	r2,-4(fp)
 8002f78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8002f7c:	10bfffc4 	addi	r2,r2,-1
 8002f80:	00bffe16 	blt	zero,r2,8002f7c <__alt_data_end+0xf8002f7c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8002f84:	0005883a 	mov	r2,zero
}
 8002f88:	e037883a 	mov	sp,fp
 8002f8c:	dfc00117 	ldw	ra,4(sp)
 8002f90:	df000017 	ldw	fp,0(sp)
 8002f94:	dec00204 	addi	sp,sp,8
 8002f98:	f800283a 	ret

08002f9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002f9c:	defffe04 	addi	sp,sp,-8
 8002fa0:	dfc00115 	stw	ra,4(sp)
 8002fa4:	df000015 	stw	fp,0(sp)
 8002fa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002fac:	d0a01117 	ldw	r2,-32700(gp)
 8002fb0:	10000326 	beq	r2,zero,8002fc0 <alt_get_errno+0x24>
 8002fb4:	d0a01117 	ldw	r2,-32700(gp)
 8002fb8:	103ee83a 	callr	r2
 8002fbc:	00000106 	br	8002fc4 <alt_get_errno+0x28>
 8002fc0:	d0a65a04 	addi	r2,gp,-26264
}
 8002fc4:	e037883a 	mov	sp,fp
 8002fc8:	dfc00117 	ldw	ra,4(sp)
 8002fcc:	df000017 	ldw	fp,0(sp)
 8002fd0:	dec00204 	addi	sp,sp,8
 8002fd4:	f800283a 	ret

08002fd8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002fd8:	defffb04 	addi	sp,sp,-20
 8002fdc:	dfc00415 	stw	ra,16(sp)
 8002fe0:	df000315 	stw	fp,12(sp)
 8002fe4:	df000304 	addi	fp,sp,12
 8002fe8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8002fec:	e0bfff17 	ldw	r2,-4(fp)
 8002ff0:	10000616 	blt	r2,zero,800300c <close+0x34>
 8002ff4:	e0bfff17 	ldw	r2,-4(fp)
 8002ff8:	10c00324 	muli	r3,r2,12
 8002ffc:	00820034 	movhi	r2,2048
 8003000:	1095aa04 	addi	r2,r2,22184
 8003004:	1885883a 	add	r2,r3,r2
 8003008:	00000106 	br	8003010 <close+0x38>
 800300c:	0005883a 	mov	r2,zero
 8003010:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8003014:	e0bffd17 	ldw	r2,-12(fp)
 8003018:	10001926 	beq	r2,zero,8003080 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800301c:	e0bffd17 	ldw	r2,-12(fp)
 8003020:	10800017 	ldw	r2,0(r2)
 8003024:	10800417 	ldw	r2,16(r2)
 8003028:	10000626 	beq	r2,zero,8003044 <close+0x6c>
 800302c:	e0bffd17 	ldw	r2,-12(fp)
 8003030:	10800017 	ldw	r2,0(r2)
 8003034:	10800417 	ldw	r2,16(r2)
 8003038:	e13ffd17 	ldw	r4,-12(fp)
 800303c:	103ee83a 	callr	r2
 8003040:	00000106 	br	8003048 <close+0x70>
 8003044:	0005883a 	mov	r2,zero
 8003048:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800304c:	e13fff17 	ldw	r4,-4(fp)
 8003050:	80037b00 	call	80037b0 <alt_release_fd>
    if (rval < 0)
 8003054:	e0bffe17 	ldw	r2,-8(fp)
 8003058:	1000070e 	bge	r2,zero,8003078 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800305c:	8002f9c0 	call	8002f9c <alt_get_errno>
 8003060:	1007883a 	mov	r3,r2
 8003064:	e0bffe17 	ldw	r2,-8(fp)
 8003068:	0085c83a 	sub	r2,zero,r2
 800306c:	18800015 	stw	r2,0(r3)
      return -1;
 8003070:	00bfffc4 	movi	r2,-1
 8003074:	00000706 	br	8003094 <close+0xbc>
    }
    return 0;
 8003078:	0005883a 	mov	r2,zero
 800307c:	00000506 	br	8003094 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003080:	8002f9c0 	call	8002f9c <alt_get_errno>
 8003084:	1007883a 	mov	r3,r2
 8003088:	00801444 	movi	r2,81
 800308c:	18800015 	stw	r2,0(r3)
    return -1;
 8003090:	00bfffc4 	movi	r2,-1
  }
}
 8003094:	e037883a 	mov	sp,fp
 8003098:	dfc00117 	ldw	ra,4(sp)
 800309c:	df000017 	ldw	fp,0(sp)
 80030a0:	dec00204 	addi	sp,sp,8
 80030a4:	f800283a 	ret

080030a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80030a8:	defffe04 	addi	sp,sp,-8
 80030ac:	df000115 	stw	fp,4(sp)
 80030b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80030b4:	e03fff15 	stw	zero,-4(fp)
 80030b8:	00000506 	br	80030d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80030bc:	e0bfff17 	ldw	r2,-4(fp)
 80030c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80030c4:	e0bfff17 	ldw	r2,-4(fp)
 80030c8:	10800804 	addi	r2,r2,32
 80030cc:	e0bfff15 	stw	r2,-4(fp)
 80030d0:	e0bfff17 	ldw	r2,-4(fp)
 80030d4:	10820030 	cmpltui	r2,r2,2048
 80030d8:	103ff81e 	bne	r2,zero,80030bc <__alt_data_end+0xf80030bc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80030dc:	0001883a 	nop
 80030e0:	e037883a 	mov	sp,fp
 80030e4:	df000017 	ldw	fp,0(sp)
 80030e8:	dec00104 	addi	sp,sp,4
 80030ec:	f800283a 	ret

080030f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80030f0:	defffc04 	addi	sp,sp,-16
 80030f4:	df000315 	stw	fp,12(sp)
 80030f8:	df000304 	addi	fp,sp,12
 80030fc:	e13ffd15 	stw	r4,-12(fp)
 8003100:	e17ffe15 	stw	r5,-8(fp)
 8003104:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8003108:	e0bfff17 	ldw	r2,-4(fp)
}
 800310c:	e037883a 	mov	sp,fp
 8003110:	df000017 	ldw	fp,0(sp)
 8003114:	dec00104 	addi	sp,sp,4
 8003118:	f800283a 	ret

0800311c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800311c:	defffe04 	addi	sp,sp,-8
 8003120:	dfc00115 	stw	ra,4(sp)
 8003124:	df000015 	stw	fp,0(sp)
 8003128:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800312c:	d0a01117 	ldw	r2,-32700(gp)
 8003130:	10000326 	beq	r2,zero,8003140 <alt_get_errno+0x24>
 8003134:	d0a01117 	ldw	r2,-32700(gp)
 8003138:	103ee83a 	callr	r2
 800313c:	00000106 	br	8003144 <alt_get_errno+0x28>
 8003140:	d0a65a04 	addi	r2,gp,-26264
}
 8003144:	e037883a 	mov	sp,fp
 8003148:	dfc00117 	ldw	ra,4(sp)
 800314c:	df000017 	ldw	fp,0(sp)
 8003150:	dec00204 	addi	sp,sp,8
 8003154:	f800283a 	ret

08003158 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8003158:	defffa04 	addi	sp,sp,-24
 800315c:	dfc00515 	stw	ra,20(sp)
 8003160:	df000415 	stw	fp,16(sp)
 8003164:	df000404 	addi	fp,sp,16
 8003168:	e13ffe15 	stw	r4,-8(fp)
 800316c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8003170:	e0bffe17 	ldw	r2,-8(fp)
 8003174:	10000326 	beq	r2,zero,8003184 <alt_dev_llist_insert+0x2c>
 8003178:	e0bffe17 	ldw	r2,-8(fp)
 800317c:	10800217 	ldw	r2,8(r2)
 8003180:	1000061e 	bne	r2,zero,800319c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8003184:	800311c0 	call	800311c <alt_get_errno>
 8003188:	1007883a 	mov	r3,r2
 800318c:	00800584 	movi	r2,22
 8003190:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8003194:	00bffa84 	movi	r2,-22
 8003198:	00001306 	br	80031e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800319c:	e0bffe17 	ldw	r2,-8(fp)
 80031a0:	e0ffff17 	ldw	r3,-4(fp)
 80031a4:	e0fffc15 	stw	r3,-16(fp)
 80031a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80031ac:	e0bffd17 	ldw	r2,-12(fp)
 80031b0:	e0fffc17 	ldw	r3,-16(fp)
 80031b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80031b8:	e0bffc17 	ldw	r2,-16(fp)
 80031bc:	10c00017 	ldw	r3,0(r2)
 80031c0:	e0bffd17 	ldw	r2,-12(fp)
 80031c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80031c8:	e0bffc17 	ldw	r2,-16(fp)
 80031cc:	10800017 	ldw	r2,0(r2)
 80031d0:	e0fffd17 	ldw	r3,-12(fp)
 80031d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80031d8:	e0bffc17 	ldw	r2,-16(fp)
 80031dc:	e0fffd17 	ldw	r3,-12(fp)
 80031e0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80031e4:	0005883a 	mov	r2,zero
}
 80031e8:	e037883a 	mov	sp,fp
 80031ec:	dfc00117 	ldw	ra,4(sp)
 80031f0:	df000017 	ldw	fp,0(sp)
 80031f4:	dec00204 	addi	sp,sp,8
 80031f8:	f800283a 	ret

080031fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80031fc:	defffd04 	addi	sp,sp,-12
 8003200:	dfc00215 	stw	ra,8(sp)
 8003204:	df000115 	stw	fp,4(sp)
 8003208:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800320c:	00820034 	movhi	r2,2048
 8003210:	1090a904 	addi	r2,r2,17060
 8003214:	e0bfff15 	stw	r2,-4(fp)
 8003218:	00000606 	br	8003234 <_do_ctors+0x38>
        (*ctor) (); 
 800321c:	e0bfff17 	ldw	r2,-4(fp)
 8003220:	10800017 	ldw	r2,0(r2)
 8003224:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8003228:	e0bfff17 	ldw	r2,-4(fp)
 800322c:	10bfff04 	addi	r2,r2,-4
 8003230:	e0bfff15 	stw	r2,-4(fp)
 8003234:	e0ffff17 	ldw	r3,-4(fp)
 8003238:	00820034 	movhi	r2,2048
 800323c:	1090aa04 	addi	r2,r2,17064
 8003240:	18bff62e 	bgeu	r3,r2,800321c <__alt_data_end+0xf800321c>
        (*ctor) (); 
}
 8003244:	0001883a 	nop
 8003248:	e037883a 	mov	sp,fp
 800324c:	dfc00117 	ldw	ra,4(sp)
 8003250:	df000017 	ldw	fp,0(sp)
 8003254:	dec00204 	addi	sp,sp,8
 8003258:	f800283a 	ret

0800325c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800325c:	defffd04 	addi	sp,sp,-12
 8003260:	dfc00215 	stw	ra,8(sp)
 8003264:	df000115 	stw	fp,4(sp)
 8003268:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800326c:	00820034 	movhi	r2,2048
 8003270:	1090a904 	addi	r2,r2,17060
 8003274:	e0bfff15 	stw	r2,-4(fp)
 8003278:	00000606 	br	8003294 <_do_dtors+0x38>
        (*dtor) (); 
 800327c:	e0bfff17 	ldw	r2,-4(fp)
 8003280:	10800017 	ldw	r2,0(r2)
 8003284:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8003288:	e0bfff17 	ldw	r2,-4(fp)
 800328c:	10bfff04 	addi	r2,r2,-4
 8003290:	e0bfff15 	stw	r2,-4(fp)
 8003294:	e0ffff17 	ldw	r3,-4(fp)
 8003298:	00820034 	movhi	r2,2048
 800329c:	1090aa04 	addi	r2,r2,17064
 80032a0:	18bff62e 	bgeu	r3,r2,800327c <__alt_data_end+0xf800327c>
        (*dtor) (); 
}
 80032a4:	0001883a 	nop
 80032a8:	e037883a 	mov	sp,fp
 80032ac:	dfc00117 	ldw	ra,4(sp)
 80032b0:	df000017 	ldw	fp,0(sp)
 80032b4:	dec00204 	addi	sp,sp,8
 80032b8:	f800283a 	ret

080032bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80032bc:	defffa04 	addi	sp,sp,-24
 80032c0:	dfc00515 	stw	ra,20(sp)
 80032c4:	df000415 	stw	fp,16(sp)
 80032c8:	df000404 	addi	fp,sp,16
 80032cc:	e13ffe15 	stw	r4,-8(fp)
 80032d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80032d4:	e0bfff17 	ldw	r2,-4(fp)
 80032d8:	10800017 	ldw	r2,0(r2)
 80032dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80032e0:	e13ffe17 	ldw	r4,-8(fp)
 80032e4:	80017100 	call	8001710 <strlen>
 80032e8:	10800044 	addi	r2,r2,1
 80032ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80032f0:	00000d06 	br	8003328 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80032f4:	e0bffc17 	ldw	r2,-16(fp)
 80032f8:	10800217 	ldw	r2,8(r2)
 80032fc:	e0fffd17 	ldw	r3,-12(fp)
 8003300:	180d883a 	mov	r6,r3
 8003304:	e17ffe17 	ldw	r5,-8(fp)
 8003308:	1009883a 	mov	r4,r2
 800330c:	8003c640 	call	8003c64 <memcmp>
 8003310:	1000021e 	bne	r2,zero,800331c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8003314:	e0bffc17 	ldw	r2,-16(fp)
 8003318:	00000706 	br	8003338 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800331c:	e0bffc17 	ldw	r2,-16(fp)
 8003320:	10800017 	ldw	r2,0(r2)
 8003324:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8003328:	e0fffc17 	ldw	r3,-16(fp)
 800332c:	e0bfff17 	ldw	r2,-4(fp)
 8003330:	18bff01e 	bne	r3,r2,80032f4 <__alt_data_end+0xf80032f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8003334:	0005883a 	mov	r2,zero
}
 8003338:	e037883a 	mov	sp,fp
 800333c:	dfc00117 	ldw	ra,4(sp)
 8003340:	df000017 	ldw	fp,0(sp)
 8003344:	dec00204 	addi	sp,sp,8
 8003348:	f800283a 	ret

0800334c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800334c:	defffe04 	addi	sp,sp,-8
 8003350:	dfc00115 	stw	ra,4(sp)
 8003354:	df000015 	stw	fp,0(sp)
 8003358:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800335c:	01440004 	movi	r5,4096
 8003360:	0009883a 	mov	r4,zero
 8003364:	8003b880 	call	8003b88 <alt_icache_flush>
#endif
}
 8003368:	0001883a 	nop
 800336c:	e037883a 	mov	sp,fp
 8003370:	dfc00117 	ldw	ra,4(sp)
 8003374:	df000017 	ldw	fp,0(sp)
 8003378:	dec00204 	addi	sp,sp,8
 800337c:	f800283a 	ret

08003380 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8003380:	defffe04 	addi	sp,sp,-8
 8003384:	df000115 	stw	fp,4(sp)
 8003388:	df000104 	addi	fp,sp,4
 800338c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8003390:	e0bfff17 	ldw	r2,-4(fp)
 8003394:	10bffe84 	addi	r2,r2,-6
 8003398:	10c00428 	cmpgeui	r3,r2,16
 800339c:	18001a1e 	bne	r3,zero,8003408 <alt_exception_cause_generated_bad_addr+0x88>
 80033a0:	100690ba 	slli	r3,r2,2
 80033a4:	00820034 	movhi	r2,2048
 80033a8:	108cee04 	addi	r2,r2,13240
 80033ac:	1885883a 	add	r2,r3,r2
 80033b0:	10800017 	ldw	r2,0(r2)
 80033b4:	1000683a 	jmp	r2
 80033b8:	080033f8 	rdprs	zero,at,207
 80033bc:	080033f8 	rdprs	zero,at,207
 80033c0:	08003408 	cmpgei	zero,at,208
 80033c4:	08003408 	cmpgei	zero,at,208
 80033c8:	08003408 	cmpgei	zero,at,208
 80033cc:	080033f8 	rdprs	zero,at,207
 80033d0:	08003400 	call	800340 <__alt_mem_onchip_memory2_0+0x600340>
 80033d4:	08003408 	cmpgei	zero,at,208
 80033d8:	080033f8 	rdprs	zero,at,207
 80033dc:	080033f8 	rdprs	zero,at,207
 80033e0:	08003408 	cmpgei	zero,at,208
 80033e4:	080033f8 	rdprs	zero,at,207
 80033e8:	08003400 	call	800340 <__alt_mem_onchip_memory2_0+0x600340>
 80033ec:	08003408 	cmpgei	zero,at,208
 80033f0:	08003408 	cmpgei	zero,at,208
 80033f4:	080033f8 	rdprs	zero,at,207
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80033f8:	00800044 	movi	r2,1
 80033fc:	00000306 	br	800340c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8003400:	0005883a 	mov	r2,zero
 8003404:	00000106 	br	800340c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8003408:	0005883a 	mov	r2,zero
  }
}
 800340c:	e037883a 	mov	sp,fp
 8003410:	df000017 	ldw	fp,0(sp)
 8003414:	dec00104 	addi	sp,sp,4
 8003418:	f800283a 	ret

0800341c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800341c:	defff904 	addi	sp,sp,-28
 8003420:	dfc00615 	stw	ra,24(sp)
 8003424:	df000515 	stw	fp,20(sp)
 8003428:	df000504 	addi	fp,sp,20
 800342c:	e13ffc15 	stw	r4,-16(fp)
 8003430:	e17ffd15 	stw	r5,-12(fp)
 8003434:	e1bffe15 	stw	r6,-8(fp)
 8003438:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800343c:	e1bfff17 	ldw	r6,-4(fp)
 8003440:	e17ffe17 	ldw	r5,-8(fp)
 8003444:	e13ffd17 	ldw	r4,-12(fp)
 8003448:	800365c0 	call	800365c <open>
 800344c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8003450:	e0bffb17 	ldw	r2,-20(fp)
 8003454:	10001c16 	blt	r2,zero,80034c8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8003458:	00820034 	movhi	r2,2048
 800345c:	1095aa04 	addi	r2,r2,22184
 8003460:	e0fffb17 	ldw	r3,-20(fp)
 8003464:	18c00324 	muli	r3,r3,12
 8003468:	10c5883a 	add	r2,r2,r3
 800346c:	10c00017 	ldw	r3,0(r2)
 8003470:	e0bffc17 	ldw	r2,-16(fp)
 8003474:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8003478:	00820034 	movhi	r2,2048
 800347c:	1095aa04 	addi	r2,r2,22184
 8003480:	e0fffb17 	ldw	r3,-20(fp)
 8003484:	18c00324 	muli	r3,r3,12
 8003488:	10c5883a 	add	r2,r2,r3
 800348c:	10800104 	addi	r2,r2,4
 8003490:	10c00017 	ldw	r3,0(r2)
 8003494:	e0bffc17 	ldw	r2,-16(fp)
 8003498:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800349c:	00820034 	movhi	r2,2048
 80034a0:	1095aa04 	addi	r2,r2,22184
 80034a4:	e0fffb17 	ldw	r3,-20(fp)
 80034a8:	18c00324 	muli	r3,r3,12
 80034ac:	10c5883a 	add	r2,r2,r3
 80034b0:	10800204 	addi	r2,r2,8
 80034b4:	10c00017 	ldw	r3,0(r2)
 80034b8:	e0bffc17 	ldw	r2,-16(fp)
 80034bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80034c0:	e13ffb17 	ldw	r4,-20(fp)
 80034c4:	80037b00 	call	80037b0 <alt_release_fd>
  }
} 
 80034c8:	0001883a 	nop
 80034cc:	e037883a 	mov	sp,fp
 80034d0:	dfc00117 	ldw	ra,4(sp)
 80034d4:	df000017 	ldw	fp,0(sp)
 80034d8:	dec00204 	addi	sp,sp,8
 80034dc:	f800283a 	ret

080034e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80034e0:	defffb04 	addi	sp,sp,-20
 80034e4:	dfc00415 	stw	ra,16(sp)
 80034e8:	df000315 	stw	fp,12(sp)
 80034ec:	df000304 	addi	fp,sp,12
 80034f0:	e13ffd15 	stw	r4,-12(fp)
 80034f4:	e17ffe15 	stw	r5,-8(fp)
 80034f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80034fc:	01c07fc4 	movi	r7,511
 8003500:	01800044 	movi	r6,1
 8003504:	e17ffd17 	ldw	r5,-12(fp)
 8003508:	01020034 	movhi	r4,2048
 800350c:	2115ad04 	addi	r4,r4,22196
 8003510:	800341c0 	call	800341c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8003514:	01c07fc4 	movi	r7,511
 8003518:	000d883a 	mov	r6,zero
 800351c:	e17ffe17 	ldw	r5,-8(fp)
 8003520:	01020034 	movhi	r4,2048
 8003524:	2115aa04 	addi	r4,r4,22184
 8003528:	800341c0 	call	800341c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800352c:	01c07fc4 	movi	r7,511
 8003530:	01800044 	movi	r6,1
 8003534:	e17fff17 	ldw	r5,-4(fp)
 8003538:	01020034 	movhi	r4,2048
 800353c:	2115b004 	addi	r4,r4,22208
 8003540:	800341c0 	call	800341c <alt_open_fd>
}  
 8003544:	0001883a 	nop
 8003548:	e037883a 	mov	sp,fp
 800354c:	dfc00117 	ldw	ra,4(sp)
 8003550:	df000017 	ldw	fp,0(sp)
 8003554:	dec00204 	addi	sp,sp,8
 8003558:	f800283a 	ret

0800355c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800355c:	defffe04 	addi	sp,sp,-8
 8003560:	dfc00115 	stw	ra,4(sp)
 8003564:	df000015 	stw	fp,0(sp)
 8003568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800356c:	d0a01117 	ldw	r2,-32700(gp)
 8003570:	10000326 	beq	r2,zero,8003580 <alt_get_errno+0x24>
 8003574:	d0a01117 	ldw	r2,-32700(gp)
 8003578:	103ee83a 	callr	r2
 800357c:	00000106 	br	8003584 <alt_get_errno+0x28>
 8003580:	d0a65a04 	addi	r2,gp,-26264
}
 8003584:	e037883a 	mov	sp,fp
 8003588:	dfc00117 	ldw	ra,4(sp)
 800358c:	df000017 	ldw	fp,0(sp)
 8003590:	dec00204 	addi	sp,sp,8
 8003594:	f800283a 	ret

08003598 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8003598:	defffd04 	addi	sp,sp,-12
 800359c:	df000215 	stw	fp,8(sp)
 80035a0:	df000204 	addi	fp,sp,8
 80035a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80035a8:	e0bfff17 	ldw	r2,-4(fp)
 80035ac:	10800217 	ldw	r2,8(r2)
 80035b0:	10d00034 	orhi	r3,r2,16384
 80035b4:	e0bfff17 	ldw	r2,-4(fp)
 80035b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80035bc:	e03ffe15 	stw	zero,-8(fp)
 80035c0:	00001d06 	br	8003638 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80035c4:	00820034 	movhi	r2,2048
 80035c8:	1095aa04 	addi	r2,r2,22184
 80035cc:	e0fffe17 	ldw	r3,-8(fp)
 80035d0:	18c00324 	muli	r3,r3,12
 80035d4:	10c5883a 	add	r2,r2,r3
 80035d8:	10c00017 	ldw	r3,0(r2)
 80035dc:	e0bfff17 	ldw	r2,-4(fp)
 80035e0:	10800017 	ldw	r2,0(r2)
 80035e4:	1880111e 	bne	r3,r2,800362c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80035e8:	00820034 	movhi	r2,2048
 80035ec:	1095aa04 	addi	r2,r2,22184
 80035f0:	e0fffe17 	ldw	r3,-8(fp)
 80035f4:	18c00324 	muli	r3,r3,12
 80035f8:	10c5883a 	add	r2,r2,r3
 80035fc:	10800204 	addi	r2,r2,8
 8003600:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8003604:	1000090e 	bge	r2,zero,800362c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8003608:	e0bffe17 	ldw	r2,-8(fp)
 800360c:	10c00324 	muli	r3,r2,12
 8003610:	00820034 	movhi	r2,2048
 8003614:	1095aa04 	addi	r2,r2,22184
 8003618:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800361c:	e0bfff17 	ldw	r2,-4(fp)
 8003620:	18800226 	beq	r3,r2,800362c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8003624:	00bffcc4 	movi	r2,-13
 8003628:	00000806 	br	800364c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800362c:	e0bffe17 	ldw	r2,-8(fp)
 8003630:	10800044 	addi	r2,r2,1
 8003634:	e0bffe15 	stw	r2,-8(fp)
 8003638:	d0a01017 	ldw	r2,-32704(gp)
 800363c:	1007883a 	mov	r3,r2
 8003640:	e0bffe17 	ldw	r2,-8(fp)
 8003644:	18bfdf2e 	bgeu	r3,r2,80035c4 <__alt_data_end+0xf80035c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8003648:	0005883a 	mov	r2,zero
}
 800364c:	e037883a 	mov	sp,fp
 8003650:	df000017 	ldw	fp,0(sp)
 8003654:	dec00104 	addi	sp,sp,4
 8003658:	f800283a 	ret

0800365c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800365c:	defff604 	addi	sp,sp,-40
 8003660:	dfc00915 	stw	ra,36(sp)
 8003664:	df000815 	stw	fp,32(sp)
 8003668:	df000804 	addi	fp,sp,32
 800366c:	e13ffd15 	stw	r4,-12(fp)
 8003670:	e17ffe15 	stw	r5,-8(fp)
 8003674:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8003678:	00bfffc4 	movi	r2,-1
 800367c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8003680:	00bffb44 	movi	r2,-19
 8003684:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8003688:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800368c:	d1600e04 	addi	r5,gp,-32712
 8003690:	e13ffd17 	ldw	r4,-12(fp)
 8003694:	80032bc0 	call	80032bc <alt_find_dev>
 8003698:	e0bff815 	stw	r2,-32(fp)
 800369c:	e0bff817 	ldw	r2,-32(fp)
 80036a0:	1000051e 	bne	r2,zero,80036b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80036a4:	e13ffd17 	ldw	r4,-12(fp)
 80036a8:	80039dc0 	call	80039dc <alt_find_file>
 80036ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80036b0:	00800044 	movi	r2,1
 80036b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80036b8:	e0bff817 	ldw	r2,-32(fp)
 80036bc:	10002926 	beq	r2,zero,8003764 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80036c0:	e13ff817 	ldw	r4,-32(fp)
 80036c4:	8003ae40 	call	8003ae4 <alt_get_fd>
 80036c8:	e0bff915 	stw	r2,-28(fp)
 80036cc:	e0bff917 	ldw	r2,-28(fp)
 80036d0:	1000030e 	bge	r2,zero,80036e0 <open+0x84>
    {
      status = index;
 80036d4:	e0bff917 	ldw	r2,-28(fp)
 80036d8:	e0bffa15 	stw	r2,-24(fp)
 80036dc:	00002306 	br	800376c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80036e0:	e0bff917 	ldw	r2,-28(fp)
 80036e4:	10c00324 	muli	r3,r2,12
 80036e8:	00820034 	movhi	r2,2048
 80036ec:	1095aa04 	addi	r2,r2,22184
 80036f0:	1885883a 	add	r2,r3,r2
 80036f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80036f8:	e0fffe17 	ldw	r3,-8(fp)
 80036fc:	00900034 	movhi	r2,16384
 8003700:	10bfffc4 	addi	r2,r2,-1
 8003704:	1886703a 	and	r3,r3,r2
 8003708:	e0bffc17 	ldw	r2,-16(fp)
 800370c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8003710:	e0bffb17 	ldw	r2,-20(fp)
 8003714:	1000051e 	bne	r2,zero,800372c <open+0xd0>
 8003718:	e13ffc17 	ldw	r4,-16(fp)
 800371c:	80035980 	call	8003598 <alt_file_locked>
 8003720:	e0bffa15 	stw	r2,-24(fp)
 8003724:	e0bffa17 	ldw	r2,-24(fp)
 8003728:	10001016 	blt	r2,zero,800376c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800372c:	e0bff817 	ldw	r2,-32(fp)
 8003730:	10800317 	ldw	r2,12(r2)
 8003734:	10000826 	beq	r2,zero,8003758 <open+0xfc>
 8003738:	e0bff817 	ldw	r2,-32(fp)
 800373c:	10800317 	ldw	r2,12(r2)
 8003740:	e1ffff17 	ldw	r7,-4(fp)
 8003744:	e1bffe17 	ldw	r6,-8(fp)
 8003748:	e17ffd17 	ldw	r5,-12(fp)
 800374c:	e13ffc17 	ldw	r4,-16(fp)
 8003750:	103ee83a 	callr	r2
 8003754:	00000106 	br	800375c <open+0x100>
 8003758:	0005883a 	mov	r2,zero
 800375c:	e0bffa15 	stw	r2,-24(fp)
 8003760:	00000206 	br	800376c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8003764:	00bffb44 	movi	r2,-19
 8003768:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800376c:	e0bffa17 	ldw	r2,-24(fp)
 8003770:	1000090e 	bge	r2,zero,8003798 <open+0x13c>
  {
    alt_release_fd (index);  
 8003774:	e13ff917 	ldw	r4,-28(fp)
 8003778:	80037b00 	call	80037b0 <alt_release_fd>
    ALT_ERRNO = -status;
 800377c:	800355c0 	call	800355c <alt_get_errno>
 8003780:	1007883a 	mov	r3,r2
 8003784:	e0bffa17 	ldw	r2,-24(fp)
 8003788:	0085c83a 	sub	r2,zero,r2
 800378c:	18800015 	stw	r2,0(r3)
    return -1;
 8003790:	00bfffc4 	movi	r2,-1
 8003794:	00000106 	br	800379c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8003798:	e0bff917 	ldw	r2,-28(fp)
}
 800379c:	e037883a 	mov	sp,fp
 80037a0:	dfc00117 	ldw	ra,4(sp)
 80037a4:	df000017 	ldw	fp,0(sp)
 80037a8:	dec00204 	addi	sp,sp,8
 80037ac:	f800283a 	ret

080037b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80037b0:	defffe04 	addi	sp,sp,-8
 80037b4:	df000115 	stw	fp,4(sp)
 80037b8:	df000104 	addi	fp,sp,4
 80037bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80037c0:	e0bfff17 	ldw	r2,-4(fp)
 80037c4:	108000d0 	cmplti	r2,r2,3
 80037c8:	10000d1e 	bne	r2,zero,8003800 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80037cc:	00820034 	movhi	r2,2048
 80037d0:	1095aa04 	addi	r2,r2,22184
 80037d4:	e0ffff17 	ldw	r3,-4(fp)
 80037d8:	18c00324 	muli	r3,r3,12
 80037dc:	10c5883a 	add	r2,r2,r3
 80037e0:	10800204 	addi	r2,r2,8
 80037e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80037e8:	00820034 	movhi	r2,2048
 80037ec:	1095aa04 	addi	r2,r2,22184
 80037f0:	e0ffff17 	ldw	r3,-4(fp)
 80037f4:	18c00324 	muli	r3,r3,12
 80037f8:	10c5883a 	add	r2,r2,r3
 80037fc:	10000015 	stw	zero,0(r2)
  }
}
 8003800:	0001883a 	nop
 8003804:	e037883a 	mov	sp,fp
 8003808:	df000017 	ldw	fp,0(sp)
 800380c:	dec00104 	addi	sp,sp,4
 8003810:	f800283a 	ret

08003814 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8003814:	defffa04 	addi	sp,sp,-24
 8003818:	df000515 	stw	fp,20(sp)
 800381c:	df000504 	addi	fp,sp,20
 8003820:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003824:	0005303a 	rdctl	r2,status
 8003828:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800382c:	e0fffc17 	ldw	r3,-16(fp)
 8003830:	00bfff84 	movi	r2,-2
 8003834:	1884703a 	and	r2,r3,r2
 8003838:	1001703a 	wrctl	status,r2
  
  return context;
 800383c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8003840:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8003844:	e0bfff17 	ldw	r2,-4(fp)
 8003848:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800384c:	e0bffd17 	ldw	r2,-12(fp)
 8003850:	10800017 	ldw	r2,0(r2)
 8003854:	e0fffd17 	ldw	r3,-12(fp)
 8003858:	18c00117 	ldw	r3,4(r3)
 800385c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8003860:	e0bffd17 	ldw	r2,-12(fp)
 8003864:	10800117 	ldw	r2,4(r2)
 8003868:	e0fffd17 	ldw	r3,-12(fp)
 800386c:	18c00017 	ldw	r3,0(r3)
 8003870:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8003874:	e0bffd17 	ldw	r2,-12(fp)
 8003878:	e0fffd17 	ldw	r3,-12(fp)
 800387c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8003880:	e0bffd17 	ldw	r2,-12(fp)
 8003884:	e0fffd17 	ldw	r3,-12(fp)
 8003888:	10c00015 	stw	r3,0(r2)
 800388c:	e0bffb17 	ldw	r2,-20(fp)
 8003890:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003894:	e0bffe17 	ldw	r2,-8(fp)
 8003898:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800389c:	0001883a 	nop
 80038a0:	e037883a 	mov	sp,fp
 80038a4:	df000017 	ldw	fp,0(sp)
 80038a8:	dec00104 	addi	sp,sp,4
 80038ac:	f800283a 	ret

080038b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80038b0:	defffb04 	addi	sp,sp,-20
 80038b4:	dfc00415 	stw	ra,16(sp)
 80038b8:	df000315 	stw	fp,12(sp)
 80038bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80038c0:	d0a01217 	ldw	r2,-32696(gp)
 80038c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80038c8:	d0a65917 	ldw	r2,-26268(gp)
 80038cc:	10800044 	addi	r2,r2,1
 80038d0:	d0a65915 	stw	r2,-26268(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80038d4:	00002e06 	br	8003990 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80038d8:	e0bffd17 	ldw	r2,-12(fp)
 80038dc:	10800017 	ldw	r2,0(r2)
 80038e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80038e4:	e0bffd17 	ldw	r2,-12(fp)
 80038e8:	10800403 	ldbu	r2,16(r2)
 80038ec:	10803fcc 	andi	r2,r2,255
 80038f0:	10000426 	beq	r2,zero,8003904 <alt_tick+0x54>
 80038f4:	d0a65917 	ldw	r2,-26268(gp)
 80038f8:	1000021e 	bne	r2,zero,8003904 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80038fc:	e0bffd17 	ldw	r2,-12(fp)
 8003900:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8003904:	e0bffd17 	ldw	r2,-12(fp)
 8003908:	10800217 	ldw	r2,8(r2)
 800390c:	d0e65917 	ldw	r3,-26268(gp)
 8003910:	18801d36 	bltu	r3,r2,8003988 <alt_tick+0xd8>
 8003914:	e0bffd17 	ldw	r2,-12(fp)
 8003918:	10800403 	ldbu	r2,16(r2)
 800391c:	10803fcc 	andi	r2,r2,255
 8003920:	1000191e 	bne	r2,zero,8003988 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8003924:	e0bffd17 	ldw	r2,-12(fp)
 8003928:	10800317 	ldw	r2,12(r2)
 800392c:	e0fffd17 	ldw	r3,-12(fp)
 8003930:	18c00517 	ldw	r3,20(r3)
 8003934:	1809883a 	mov	r4,r3
 8003938:	103ee83a 	callr	r2
 800393c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8003940:	e0bfff17 	ldw	r2,-4(fp)
 8003944:	1000031e 	bne	r2,zero,8003954 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8003948:	e13ffd17 	ldw	r4,-12(fp)
 800394c:	80038140 	call	8003814 <alt_alarm_stop>
 8003950:	00000d06 	br	8003988 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8003954:	e0bffd17 	ldw	r2,-12(fp)
 8003958:	10c00217 	ldw	r3,8(r2)
 800395c:	e0bfff17 	ldw	r2,-4(fp)
 8003960:	1887883a 	add	r3,r3,r2
 8003964:	e0bffd17 	ldw	r2,-12(fp)
 8003968:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800396c:	e0bffd17 	ldw	r2,-12(fp)
 8003970:	10c00217 	ldw	r3,8(r2)
 8003974:	d0a65917 	ldw	r2,-26268(gp)
 8003978:	1880032e 	bgeu	r3,r2,8003988 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800397c:	e0bffd17 	ldw	r2,-12(fp)
 8003980:	00c00044 	movi	r3,1
 8003984:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8003988:	e0bffe17 	ldw	r2,-8(fp)
 800398c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8003990:	e0fffd17 	ldw	r3,-12(fp)
 8003994:	d0a01204 	addi	r2,gp,-32696
 8003998:	18bfcf1e 	bne	r3,r2,80038d8 <__alt_data_end+0xf80038d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800399c:	0001883a 	nop
}
 80039a0:	0001883a 	nop
 80039a4:	e037883a 	mov	sp,fp
 80039a8:	dfc00117 	ldw	ra,4(sp)
 80039ac:	df000017 	ldw	fp,0(sp)
 80039b0:	dec00204 	addi	sp,sp,8
 80039b4:	f800283a 	ret

080039b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80039b8:	deffff04 	addi	sp,sp,-4
 80039bc:	df000015 	stw	fp,0(sp)
 80039c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80039c4:	000170fa 	wrctl	ienable,zero
}
 80039c8:	0001883a 	nop
 80039cc:	e037883a 	mov	sp,fp
 80039d0:	df000017 	ldw	fp,0(sp)
 80039d4:	dec00104 	addi	sp,sp,4
 80039d8:	f800283a 	ret

080039dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80039dc:	defffb04 	addi	sp,sp,-20
 80039e0:	dfc00415 	stw	ra,16(sp)
 80039e4:	df000315 	stw	fp,12(sp)
 80039e8:	df000304 	addi	fp,sp,12
 80039ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80039f0:	d0a00c17 	ldw	r2,-32720(gp)
 80039f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80039f8:	00003106 	br	8003ac0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80039fc:	e0bffd17 	ldw	r2,-12(fp)
 8003a00:	10800217 	ldw	r2,8(r2)
 8003a04:	1009883a 	mov	r4,r2
 8003a08:	80017100 	call	8001710 <strlen>
 8003a0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8003a10:	e0bffd17 	ldw	r2,-12(fp)
 8003a14:	10c00217 	ldw	r3,8(r2)
 8003a18:	e0bffe17 	ldw	r2,-8(fp)
 8003a1c:	10bfffc4 	addi	r2,r2,-1
 8003a20:	1885883a 	add	r2,r3,r2
 8003a24:	10800003 	ldbu	r2,0(r2)
 8003a28:	10803fcc 	andi	r2,r2,255
 8003a2c:	1080201c 	xori	r2,r2,128
 8003a30:	10bfe004 	addi	r2,r2,-128
 8003a34:	10800bd8 	cmpnei	r2,r2,47
 8003a38:	1000031e 	bne	r2,zero,8003a48 <alt_find_file+0x6c>
    {
      len -= 1;
 8003a3c:	e0bffe17 	ldw	r2,-8(fp)
 8003a40:	10bfffc4 	addi	r2,r2,-1
 8003a44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8003a48:	e0bffe17 	ldw	r2,-8(fp)
 8003a4c:	e0ffff17 	ldw	r3,-4(fp)
 8003a50:	1885883a 	add	r2,r3,r2
 8003a54:	10800003 	ldbu	r2,0(r2)
 8003a58:	10803fcc 	andi	r2,r2,255
 8003a5c:	1080201c 	xori	r2,r2,128
 8003a60:	10bfe004 	addi	r2,r2,-128
 8003a64:	10800be0 	cmpeqi	r2,r2,47
 8003a68:	1000081e 	bne	r2,zero,8003a8c <alt_find_file+0xb0>
 8003a6c:	e0bffe17 	ldw	r2,-8(fp)
 8003a70:	e0ffff17 	ldw	r3,-4(fp)
 8003a74:	1885883a 	add	r2,r3,r2
 8003a78:	10800003 	ldbu	r2,0(r2)
 8003a7c:	10803fcc 	andi	r2,r2,255
 8003a80:	1080201c 	xori	r2,r2,128
 8003a84:	10bfe004 	addi	r2,r2,-128
 8003a88:	10000a1e 	bne	r2,zero,8003ab4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8003a8c:	e0bffd17 	ldw	r2,-12(fp)
 8003a90:	10800217 	ldw	r2,8(r2)
 8003a94:	e0fffe17 	ldw	r3,-8(fp)
 8003a98:	180d883a 	mov	r6,r3
 8003a9c:	e17fff17 	ldw	r5,-4(fp)
 8003aa0:	1009883a 	mov	r4,r2
 8003aa4:	8003c640 	call	8003c64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8003aa8:	1000021e 	bne	r2,zero,8003ab4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8003aac:	e0bffd17 	ldw	r2,-12(fp)
 8003ab0:	00000706 	br	8003ad0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8003ab4:	e0bffd17 	ldw	r2,-12(fp)
 8003ab8:	10800017 	ldw	r2,0(r2)
 8003abc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8003ac0:	e0fffd17 	ldw	r3,-12(fp)
 8003ac4:	d0a00c04 	addi	r2,gp,-32720
 8003ac8:	18bfcc1e 	bne	r3,r2,80039fc <__alt_data_end+0xf80039fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8003acc:	0005883a 	mov	r2,zero
}
 8003ad0:	e037883a 	mov	sp,fp
 8003ad4:	dfc00117 	ldw	ra,4(sp)
 8003ad8:	df000017 	ldw	fp,0(sp)
 8003adc:	dec00204 	addi	sp,sp,8
 8003ae0:	f800283a 	ret

08003ae4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8003ae4:	defffc04 	addi	sp,sp,-16
 8003ae8:	df000315 	stw	fp,12(sp)
 8003aec:	df000304 	addi	fp,sp,12
 8003af0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8003af4:	00bffa04 	movi	r2,-24
 8003af8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8003afc:	e03ffd15 	stw	zero,-12(fp)
 8003b00:	00001906 	br	8003b68 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8003b04:	00820034 	movhi	r2,2048
 8003b08:	1095aa04 	addi	r2,r2,22184
 8003b0c:	e0fffd17 	ldw	r3,-12(fp)
 8003b10:	18c00324 	muli	r3,r3,12
 8003b14:	10c5883a 	add	r2,r2,r3
 8003b18:	10800017 	ldw	r2,0(r2)
 8003b1c:	10000f1e 	bne	r2,zero,8003b5c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8003b20:	00820034 	movhi	r2,2048
 8003b24:	1095aa04 	addi	r2,r2,22184
 8003b28:	e0fffd17 	ldw	r3,-12(fp)
 8003b2c:	18c00324 	muli	r3,r3,12
 8003b30:	10c5883a 	add	r2,r2,r3
 8003b34:	e0ffff17 	ldw	r3,-4(fp)
 8003b38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8003b3c:	d0e01017 	ldw	r3,-32704(gp)
 8003b40:	e0bffd17 	ldw	r2,-12(fp)
 8003b44:	1880020e 	bge	r3,r2,8003b50 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8003b48:	e0bffd17 	ldw	r2,-12(fp)
 8003b4c:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 8003b50:	e0bffd17 	ldw	r2,-12(fp)
 8003b54:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8003b58:	00000606 	br	8003b74 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8003b5c:	e0bffd17 	ldw	r2,-12(fp)
 8003b60:	10800044 	addi	r2,r2,1
 8003b64:	e0bffd15 	stw	r2,-12(fp)
 8003b68:	e0bffd17 	ldw	r2,-12(fp)
 8003b6c:	10800810 	cmplti	r2,r2,32
 8003b70:	103fe41e 	bne	r2,zero,8003b04 <__alt_data_end+0xf8003b04>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8003b74:	e0bffe17 	ldw	r2,-8(fp)
}
 8003b78:	e037883a 	mov	sp,fp
 8003b7c:	df000017 	ldw	fp,0(sp)
 8003b80:	dec00104 	addi	sp,sp,4
 8003b84:	f800283a 	ret

08003b88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8003b88:	defffb04 	addi	sp,sp,-20
 8003b8c:	df000415 	stw	fp,16(sp)
 8003b90:	df000404 	addi	fp,sp,16
 8003b94:	e13ffe15 	stw	r4,-8(fp)
 8003b98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8003b9c:	e0bfff17 	ldw	r2,-4(fp)
 8003ba0:	10840070 	cmpltui	r2,r2,4097
 8003ba4:	1000021e 	bne	r2,zero,8003bb0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8003ba8:	00840004 	movi	r2,4096
 8003bac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8003bb0:	e0fffe17 	ldw	r3,-8(fp)
 8003bb4:	e0bfff17 	ldw	r2,-4(fp)
 8003bb8:	1885883a 	add	r2,r3,r2
 8003bbc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8003bc0:	e0bffe17 	ldw	r2,-8(fp)
 8003bc4:	e0bffc15 	stw	r2,-16(fp)
 8003bc8:	00000506 	br	8003be0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8003bcc:	e0bffc17 	ldw	r2,-16(fp)
 8003bd0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8003bd4:	e0bffc17 	ldw	r2,-16(fp)
 8003bd8:	10800804 	addi	r2,r2,32
 8003bdc:	e0bffc15 	stw	r2,-16(fp)
 8003be0:	e0fffc17 	ldw	r3,-16(fp)
 8003be4:	e0bffd17 	ldw	r2,-12(fp)
 8003be8:	18bff836 	bltu	r3,r2,8003bcc <__alt_data_end+0xf8003bcc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8003bec:	e0bffe17 	ldw	r2,-8(fp)
 8003bf0:	108007cc 	andi	r2,r2,31
 8003bf4:	10000226 	beq	r2,zero,8003c00 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8003bf8:	e0bffc17 	ldw	r2,-16(fp)
 8003bfc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8003c00:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8003c04:	0001883a 	nop
 8003c08:	e037883a 	mov	sp,fp
 8003c0c:	df000017 	ldw	fp,0(sp)
 8003c10:	dec00104 	addi	sp,sp,4
 8003c14:	f800283a 	ret

08003c18 <atexit>:
 8003c18:	200b883a 	mov	r5,r4
 8003c1c:	000f883a 	mov	r7,zero
 8003c20:	000d883a 	mov	r6,zero
 8003c24:	0009883a 	mov	r4,zero
 8003c28:	8003e281 	jmpi	8003e28 <__register_exitproc>

08003c2c <exit>:
 8003c2c:	defffe04 	addi	sp,sp,-8
 8003c30:	000b883a 	mov	r5,zero
 8003c34:	dc000015 	stw	r16,0(sp)
 8003c38:	dfc00115 	stw	ra,4(sp)
 8003c3c:	2021883a 	mov	r16,r4
 8003c40:	8003f400 	call	8003f40 <__call_exitprocs>
 8003c44:	00820034 	movhi	r2,2048
 8003c48:	10972704 	addi	r2,r2,23708
 8003c4c:	11000017 	ldw	r4,0(r2)
 8003c50:	20800f17 	ldw	r2,60(r4)
 8003c54:	10000126 	beq	r2,zero,8003c5c <exit+0x30>
 8003c58:	103ee83a 	callr	r2
 8003c5c:	8009883a 	mov	r4,r16
 8003c60:	80042740 	call	8004274 <_exit>

08003c64 <memcmp>:
 8003c64:	01c000c4 	movi	r7,3
 8003c68:	3980192e 	bgeu	r7,r6,8003cd0 <memcmp+0x6c>
 8003c6c:	2144b03a 	or	r2,r4,r5
 8003c70:	11c4703a 	and	r2,r2,r7
 8003c74:	10000f26 	beq	r2,zero,8003cb4 <memcmp+0x50>
 8003c78:	20800003 	ldbu	r2,0(r4)
 8003c7c:	28c00003 	ldbu	r3,0(r5)
 8003c80:	10c0151e 	bne	r2,r3,8003cd8 <memcmp+0x74>
 8003c84:	31bfff84 	addi	r6,r6,-2
 8003c88:	01ffffc4 	movi	r7,-1
 8003c8c:	00000406 	br	8003ca0 <memcmp+0x3c>
 8003c90:	20800003 	ldbu	r2,0(r4)
 8003c94:	28c00003 	ldbu	r3,0(r5)
 8003c98:	31bfffc4 	addi	r6,r6,-1
 8003c9c:	10c00e1e 	bne	r2,r3,8003cd8 <memcmp+0x74>
 8003ca0:	21000044 	addi	r4,r4,1
 8003ca4:	29400044 	addi	r5,r5,1
 8003ca8:	31fff91e 	bne	r6,r7,8003c90 <__alt_data_end+0xf8003c90>
 8003cac:	0005883a 	mov	r2,zero
 8003cb0:	f800283a 	ret
 8003cb4:	20c00017 	ldw	r3,0(r4)
 8003cb8:	28800017 	ldw	r2,0(r5)
 8003cbc:	18bfee1e 	bne	r3,r2,8003c78 <__alt_data_end+0xf8003c78>
 8003cc0:	31bfff04 	addi	r6,r6,-4
 8003cc4:	21000104 	addi	r4,r4,4
 8003cc8:	29400104 	addi	r5,r5,4
 8003ccc:	39bff936 	bltu	r7,r6,8003cb4 <__alt_data_end+0xf8003cb4>
 8003cd0:	303fe91e 	bne	r6,zero,8003c78 <__alt_data_end+0xf8003c78>
 8003cd4:	003ff506 	br	8003cac <__alt_data_end+0xf8003cac>
 8003cd8:	10c5c83a 	sub	r2,r2,r3
 8003cdc:	f800283a 	ret

08003ce0 <memcpy>:
 8003ce0:	defffd04 	addi	sp,sp,-12
 8003ce4:	dfc00215 	stw	ra,8(sp)
 8003ce8:	dc400115 	stw	r17,4(sp)
 8003cec:	dc000015 	stw	r16,0(sp)
 8003cf0:	00c003c4 	movi	r3,15
 8003cf4:	2005883a 	mov	r2,r4
 8003cf8:	1980452e 	bgeu	r3,r6,8003e10 <memcpy+0x130>
 8003cfc:	2906b03a 	or	r3,r5,r4
 8003d00:	18c000cc 	andi	r3,r3,3
 8003d04:	1800441e 	bne	r3,zero,8003e18 <memcpy+0x138>
 8003d08:	347ffc04 	addi	r17,r6,-16
 8003d0c:	8822d13a 	srli	r17,r17,4
 8003d10:	28c00104 	addi	r3,r5,4
 8003d14:	23400104 	addi	r13,r4,4
 8003d18:	8820913a 	slli	r16,r17,4
 8003d1c:	2b000204 	addi	r12,r5,8
 8003d20:	22c00204 	addi	r11,r4,8
 8003d24:	84000504 	addi	r16,r16,20
 8003d28:	2a800304 	addi	r10,r5,12
 8003d2c:	22400304 	addi	r9,r4,12
 8003d30:	2c21883a 	add	r16,r5,r16
 8003d34:	2811883a 	mov	r8,r5
 8003d38:	200f883a 	mov	r7,r4
 8003d3c:	41000017 	ldw	r4,0(r8)
 8003d40:	1fc00017 	ldw	ra,0(r3)
 8003d44:	63c00017 	ldw	r15,0(r12)
 8003d48:	39000015 	stw	r4,0(r7)
 8003d4c:	53800017 	ldw	r14,0(r10)
 8003d50:	6fc00015 	stw	ra,0(r13)
 8003d54:	5bc00015 	stw	r15,0(r11)
 8003d58:	4b800015 	stw	r14,0(r9)
 8003d5c:	18c00404 	addi	r3,r3,16
 8003d60:	39c00404 	addi	r7,r7,16
 8003d64:	42000404 	addi	r8,r8,16
 8003d68:	6b400404 	addi	r13,r13,16
 8003d6c:	63000404 	addi	r12,r12,16
 8003d70:	5ac00404 	addi	r11,r11,16
 8003d74:	52800404 	addi	r10,r10,16
 8003d78:	4a400404 	addi	r9,r9,16
 8003d7c:	1c3fef1e 	bne	r3,r16,8003d3c <__alt_data_end+0xf8003d3c>
 8003d80:	89c00044 	addi	r7,r17,1
 8003d84:	380e913a 	slli	r7,r7,4
 8003d88:	310003cc 	andi	r4,r6,15
 8003d8c:	02c000c4 	movi	r11,3
 8003d90:	11c7883a 	add	r3,r2,r7
 8003d94:	29cb883a 	add	r5,r5,r7
 8003d98:	5900212e 	bgeu	r11,r4,8003e20 <memcpy+0x140>
 8003d9c:	1813883a 	mov	r9,r3
 8003da0:	2811883a 	mov	r8,r5
 8003da4:	200f883a 	mov	r7,r4
 8003da8:	42800017 	ldw	r10,0(r8)
 8003dac:	4a400104 	addi	r9,r9,4
 8003db0:	39ffff04 	addi	r7,r7,-4
 8003db4:	4abfff15 	stw	r10,-4(r9)
 8003db8:	42000104 	addi	r8,r8,4
 8003dbc:	59fffa36 	bltu	r11,r7,8003da8 <__alt_data_end+0xf8003da8>
 8003dc0:	213fff04 	addi	r4,r4,-4
 8003dc4:	2008d0ba 	srli	r4,r4,2
 8003dc8:	318000cc 	andi	r6,r6,3
 8003dcc:	21000044 	addi	r4,r4,1
 8003dd0:	2109883a 	add	r4,r4,r4
 8003dd4:	2109883a 	add	r4,r4,r4
 8003dd8:	1907883a 	add	r3,r3,r4
 8003ddc:	290b883a 	add	r5,r5,r4
 8003de0:	30000626 	beq	r6,zero,8003dfc <memcpy+0x11c>
 8003de4:	198d883a 	add	r6,r3,r6
 8003de8:	29c00003 	ldbu	r7,0(r5)
 8003dec:	18c00044 	addi	r3,r3,1
 8003df0:	29400044 	addi	r5,r5,1
 8003df4:	19ffffc5 	stb	r7,-1(r3)
 8003df8:	19bffb1e 	bne	r3,r6,8003de8 <__alt_data_end+0xf8003de8>
 8003dfc:	dfc00217 	ldw	ra,8(sp)
 8003e00:	dc400117 	ldw	r17,4(sp)
 8003e04:	dc000017 	ldw	r16,0(sp)
 8003e08:	dec00304 	addi	sp,sp,12
 8003e0c:	f800283a 	ret
 8003e10:	2007883a 	mov	r3,r4
 8003e14:	003ff206 	br	8003de0 <__alt_data_end+0xf8003de0>
 8003e18:	2007883a 	mov	r3,r4
 8003e1c:	003ff106 	br	8003de4 <__alt_data_end+0xf8003de4>
 8003e20:	200d883a 	mov	r6,r4
 8003e24:	003fee06 	br	8003de0 <__alt_data_end+0xf8003de0>

08003e28 <__register_exitproc>:
 8003e28:	defffa04 	addi	sp,sp,-24
 8003e2c:	dc000315 	stw	r16,12(sp)
 8003e30:	04020034 	movhi	r16,2048
 8003e34:	84172704 	addi	r16,r16,23708
 8003e38:	80c00017 	ldw	r3,0(r16)
 8003e3c:	dc400415 	stw	r17,16(sp)
 8003e40:	dfc00515 	stw	ra,20(sp)
 8003e44:	18805217 	ldw	r2,328(r3)
 8003e48:	2023883a 	mov	r17,r4
 8003e4c:	10003726 	beq	r2,zero,8003f2c <__register_exitproc+0x104>
 8003e50:	10c00117 	ldw	r3,4(r2)
 8003e54:	010007c4 	movi	r4,31
 8003e58:	20c00e16 	blt	r4,r3,8003e94 <__register_exitproc+0x6c>
 8003e5c:	1a000044 	addi	r8,r3,1
 8003e60:	8800221e 	bne	r17,zero,8003eec <__register_exitproc+0xc4>
 8003e64:	18c00084 	addi	r3,r3,2
 8003e68:	18c7883a 	add	r3,r3,r3
 8003e6c:	18c7883a 	add	r3,r3,r3
 8003e70:	12000115 	stw	r8,4(r2)
 8003e74:	10c7883a 	add	r3,r2,r3
 8003e78:	19400015 	stw	r5,0(r3)
 8003e7c:	0005883a 	mov	r2,zero
 8003e80:	dfc00517 	ldw	ra,20(sp)
 8003e84:	dc400417 	ldw	r17,16(sp)
 8003e88:	dc000317 	ldw	r16,12(sp)
 8003e8c:	dec00604 	addi	sp,sp,24
 8003e90:	f800283a 	ret
 8003e94:	00800034 	movhi	r2,0
 8003e98:	10800004 	addi	r2,r2,0
 8003e9c:	10002626 	beq	r2,zero,8003f38 <__register_exitproc+0x110>
 8003ea0:	01006404 	movi	r4,400
 8003ea4:	d9400015 	stw	r5,0(sp)
 8003ea8:	d9800115 	stw	r6,4(sp)
 8003eac:	d9c00215 	stw	r7,8(sp)
 8003eb0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8003eb4:	d9400017 	ldw	r5,0(sp)
 8003eb8:	d9800117 	ldw	r6,4(sp)
 8003ebc:	d9c00217 	ldw	r7,8(sp)
 8003ec0:	10001d26 	beq	r2,zero,8003f38 <__register_exitproc+0x110>
 8003ec4:	81000017 	ldw	r4,0(r16)
 8003ec8:	10000115 	stw	zero,4(r2)
 8003ecc:	02000044 	movi	r8,1
 8003ed0:	22405217 	ldw	r9,328(r4)
 8003ed4:	0007883a 	mov	r3,zero
 8003ed8:	12400015 	stw	r9,0(r2)
 8003edc:	20805215 	stw	r2,328(r4)
 8003ee0:	10006215 	stw	zero,392(r2)
 8003ee4:	10006315 	stw	zero,396(r2)
 8003ee8:	883fde26 	beq	r17,zero,8003e64 <__alt_data_end+0xf8003e64>
 8003eec:	18c9883a 	add	r4,r3,r3
 8003ef0:	2109883a 	add	r4,r4,r4
 8003ef4:	1109883a 	add	r4,r2,r4
 8003ef8:	21802215 	stw	r6,136(r4)
 8003efc:	01800044 	movi	r6,1
 8003f00:	12406217 	ldw	r9,392(r2)
 8003f04:	30cc983a 	sll	r6,r6,r3
 8003f08:	4992b03a 	or	r9,r9,r6
 8003f0c:	12406215 	stw	r9,392(r2)
 8003f10:	21c04215 	stw	r7,264(r4)
 8003f14:	01000084 	movi	r4,2
 8003f18:	893fd21e 	bne	r17,r4,8003e64 <__alt_data_end+0xf8003e64>
 8003f1c:	11006317 	ldw	r4,396(r2)
 8003f20:	218cb03a 	or	r6,r4,r6
 8003f24:	11806315 	stw	r6,396(r2)
 8003f28:	003fce06 	br	8003e64 <__alt_data_end+0xf8003e64>
 8003f2c:	18805304 	addi	r2,r3,332
 8003f30:	18805215 	stw	r2,328(r3)
 8003f34:	003fc606 	br	8003e50 <__alt_data_end+0xf8003e50>
 8003f38:	00bfffc4 	movi	r2,-1
 8003f3c:	003fd006 	br	8003e80 <__alt_data_end+0xf8003e80>

08003f40 <__call_exitprocs>:
 8003f40:	defff504 	addi	sp,sp,-44
 8003f44:	df000915 	stw	fp,36(sp)
 8003f48:	dd400615 	stw	r21,24(sp)
 8003f4c:	dc800315 	stw	r18,12(sp)
 8003f50:	dfc00a15 	stw	ra,40(sp)
 8003f54:	ddc00815 	stw	r23,32(sp)
 8003f58:	dd800715 	stw	r22,28(sp)
 8003f5c:	dd000515 	stw	r20,20(sp)
 8003f60:	dcc00415 	stw	r19,16(sp)
 8003f64:	dc400215 	stw	r17,8(sp)
 8003f68:	dc000115 	stw	r16,4(sp)
 8003f6c:	d9000015 	stw	r4,0(sp)
 8003f70:	2839883a 	mov	fp,r5
 8003f74:	04800044 	movi	r18,1
 8003f78:	057fffc4 	movi	r21,-1
 8003f7c:	00820034 	movhi	r2,2048
 8003f80:	10972704 	addi	r2,r2,23708
 8003f84:	12000017 	ldw	r8,0(r2)
 8003f88:	45005217 	ldw	r20,328(r8)
 8003f8c:	44c05204 	addi	r19,r8,328
 8003f90:	a0001c26 	beq	r20,zero,8004004 <__call_exitprocs+0xc4>
 8003f94:	a0800117 	ldw	r2,4(r20)
 8003f98:	15ffffc4 	addi	r23,r2,-1
 8003f9c:	b8000d16 	blt	r23,zero,8003fd4 <__call_exitprocs+0x94>
 8003fa0:	14000044 	addi	r16,r2,1
 8003fa4:	8421883a 	add	r16,r16,r16
 8003fa8:	8421883a 	add	r16,r16,r16
 8003fac:	84402004 	addi	r17,r16,128
 8003fb0:	a463883a 	add	r17,r20,r17
 8003fb4:	a421883a 	add	r16,r20,r16
 8003fb8:	e0001e26 	beq	fp,zero,8004034 <__call_exitprocs+0xf4>
 8003fbc:	80804017 	ldw	r2,256(r16)
 8003fc0:	e0801c26 	beq	fp,r2,8004034 <__call_exitprocs+0xf4>
 8003fc4:	bdffffc4 	addi	r23,r23,-1
 8003fc8:	843fff04 	addi	r16,r16,-4
 8003fcc:	8c7fff04 	addi	r17,r17,-4
 8003fd0:	bd7ff91e 	bne	r23,r21,8003fb8 <__alt_data_end+0xf8003fb8>
 8003fd4:	00800034 	movhi	r2,0
 8003fd8:	10800004 	addi	r2,r2,0
 8003fdc:	10000926 	beq	r2,zero,8004004 <__call_exitprocs+0xc4>
 8003fe0:	a0800117 	ldw	r2,4(r20)
 8003fe4:	1000301e 	bne	r2,zero,80040a8 <__call_exitprocs+0x168>
 8003fe8:	a0800017 	ldw	r2,0(r20)
 8003fec:	10003226 	beq	r2,zero,80040b8 <__call_exitprocs+0x178>
 8003ff0:	a009883a 	mov	r4,r20
 8003ff4:	98800015 	stw	r2,0(r19)
 8003ff8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8003ffc:	9d000017 	ldw	r20,0(r19)
 8004000:	a03fe41e 	bne	r20,zero,8003f94 <__alt_data_end+0xf8003f94>
 8004004:	dfc00a17 	ldw	ra,40(sp)
 8004008:	df000917 	ldw	fp,36(sp)
 800400c:	ddc00817 	ldw	r23,32(sp)
 8004010:	dd800717 	ldw	r22,28(sp)
 8004014:	dd400617 	ldw	r21,24(sp)
 8004018:	dd000517 	ldw	r20,20(sp)
 800401c:	dcc00417 	ldw	r19,16(sp)
 8004020:	dc800317 	ldw	r18,12(sp)
 8004024:	dc400217 	ldw	r17,8(sp)
 8004028:	dc000117 	ldw	r16,4(sp)
 800402c:	dec00b04 	addi	sp,sp,44
 8004030:	f800283a 	ret
 8004034:	a0800117 	ldw	r2,4(r20)
 8004038:	80c00017 	ldw	r3,0(r16)
 800403c:	10bfffc4 	addi	r2,r2,-1
 8004040:	15c01426 	beq	r2,r23,8004094 <__call_exitprocs+0x154>
 8004044:	80000015 	stw	zero,0(r16)
 8004048:	183fde26 	beq	r3,zero,8003fc4 <__alt_data_end+0xf8003fc4>
 800404c:	95c8983a 	sll	r4,r18,r23
 8004050:	a0806217 	ldw	r2,392(r20)
 8004054:	a5800117 	ldw	r22,4(r20)
 8004058:	2084703a 	and	r2,r4,r2
 800405c:	10000b26 	beq	r2,zero,800408c <__call_exitprocs+0x14c>
 8004060:	a0806317 	ldw	r2,396(r20)
 8004064:	2088703a 	and	r4,r4,r2
 8004068:	20000c1e 	bne	r4,zero,800409c <__call_exitprocs+0x15c>
 800406c:	89400017 	ldw	r5,0(r17)
 8004070:	d9000017 	ldw	r4,0(sp)
 8004074:	183ee83a 	callr	r3
 8004078:	a0800117 	ldw	r2,4(r20)
 800407c:	15bfbf1e 	bne	r2,r22,8003f7c <__alt_data_end+0xf8003f7c>
 8004080:	98800017 	ldw	r2,0(r19)
 8004084:	153fcf26 	beq	r2,r20,8003fc4 <__alt_data_end+0xf8003fc4>
 8004088:	003fbc06 	br	8003f7c <__alt_data_end+0xf8003f7c>
 800408c:	183ee83a 	callr	r3
 8004090:	003ff906 	br	8004078 <__alt_data_end+0xf8004078>
 8004094:	a5c00115 	stw	r23,4(r20)
 8004098:	003feb06 	br	8004048 <__alt_data_end+0xf8004048>
 800409c:	89000017 	ldw	r4,0(r17)
 80040a0:	183ee83a 	callr	r3
 80040a4:	003ff406 	br	8004078 <__alt_data_end+0xf8004078>
 80040a8:	a0800017 	ldw	r2,0(r20)
 80040ac:	a027883a 	mov	r19,r20
 80040b0:	1029883a 	mov	r20,r2
 80040b4:	003fb606 	br	8003f90 <__alt_data_end+0xf8003f90>
 80040b8:	0005883a 	mov	r2,zero
 80040bc:	003ffb06 	br	80040ac <__alt_data_end+0xf80040ac>

080040c0 <__divsi3>:
 80040c0:	20001b16 	blt	r4,zero,8004130 <__divsi3+0x70>
 80040c4:	000f883a 	mov	r7,zero
 80040c8:	28001616 	blt	r5,zero,8004124 <__divsi3+0x64>
 80040cc:	200d883a 	mov	r6,r4
 80040d0:	29001a2e 	bgeu	r5,r4,800413c <__divsi3+0x7c>
 80040d4:	00800804 	movi	r2,32
 80040d8:	00c00044 	movi	r3,1
 80040dc:	00000106 	br	80040e4 <__divsi3+0x24>
 80040e0:	10000d26 	beq	r2,zero,8004118 <__divsi3+0x58>
 80040e4:	294b883a 	add	r5,r5,r5
 80040e8:	10bfffc4 	addi	r2,r2,-1
 80040ec:	18c7883a 	add	r3,r3,r3
 80040f0:	293ffb36 	bltu	r5,r4,80040e0 <__alt_data_end+0xf80040e0>
 80040f4:	0005883a 	mov	r2,zero
 80040f8:	18000726 	beq	r3,zero,8004118 <__divsi3+0x58>
 80040fc:	0005883a 	mov	r2,zero
 8004100:	31400236 	bltu	r6,r5,800410c <__divsi3+0x4c>
 8004104:	314dc83a 	sub	r6,r6,r5
 8004108:	10c4b03a 	or	r2,r2,r3
 800410c:	1806d07a 	srli	r3,r3,1
 8004110:	280ad07a 	srli	r5,r5,1
 8004114:	183ffa1e 	bne	r3,zero,8004100 <__alt_data_end+0xf8004100>
 8004118:	38000126 	beq	r7,zero,8004120 <__divsi3+0x60>
 800411c:	0085c83a 	sub	r2,zero,r2
 8004120:	f800283a 	ret
 8004124:	014bc83a 	sub	r5,zero,r5
 8004128:	39c0005c 	xori	r7,r7,1
 800412c:	003fe706 	br	80040cc <__alt_data_end+0xf80040cc>
 8004130:	0109c83a 	sub	r4,zero,r4
 8004134:	01c00044 	movi	r7,1
 8004138:	003fe306 	br	80040c8 <__alt_data_end+0xf80040c8>
 800413c:	00c00044 	movi	r3,1
 8004140:	003fee06 	br	80040fc <__alt_data_end+0xf80040fc>

08004144 <__modsi3>:
 8004144:	20001716 	blt	r4,zero,80041a4 <__modsi3+0x60>
 8004148:	000f883a 	mov	r7,zero
 800414c:	2005883a 	mov	r2,r4
 8004150:	28001216 	blt	r5,zero,800419c <__modsi3+0x58>
 8004154:	2900162e 	bgeu	r5,r4,80041b0 <__modsi3+0x6c>
 8004158:	01800804 	movi	r6,32
 800415c:	00c00044 	movi	r3,1
 8004160:	00000106 	br	8004168 <__modsi3+0x24>
 8004164:	30000a26 	beq	r6,zero,8004190 <__modsi3+0x4c>
 8004168:	294b883a 	add	r5,r5,r5
 800416c:	31bfffc4 	addi	r6,r6,-1
 8004170:	18c7883a 	add	r3,r3,r3
 8004174:	293ffb36 	bltu	r5,r4,8004164 <__alt_data_end+0xf8004164>
 8004178:	18000526 	beq	r3,zero,8004190 <__modsi3+0x4c>
 800417c:	1806d07a 	srli	r3,r3,1
 8004180:	11400136 	bltu	r2,r5,8004188 <__modsi3+0x44>
 8004184:	1145c83a 	sub	r2,r2,r5
 8004188:	280ad07a 	srli	r5,r5,1
 800418c:	183ffb1e 	bne	r3,zero,800417c <__alt_data_end+0xf800417c>
 8004190:	38000126 	beq	r7,zero,8004198 <__modsi3+0x54>
 8004194:	0085c83a 	sub	r2,zero,r2
 8004198:	f800283a 	ret
 800419c:	014bc83a 	sub	r5,zero,r5
 80041a0:	003fec06 	br	8004154 <__alt_data_end+0xf8004154>
 80041a4:	0109c83a 	sub	r4,zero,r4
 80041a8:	01c00044 	movi	r7,1
 80041ac:	003fe706 	br	800414c <__alt_data_end+0xf800414c>
 80041b0:	00c00044 	movi	r3,1
 80041b4:	003ff106 	br	800417c <__alt_data_end+0xf800417c>

080041b8 <__udivsi3>:
 80041b8:	200d883a 	mov	r6,r4
 80041bc:	2900152e 	bgeu	r5,r4,8004214 <__udivsi3+0x5c>
 80041c0:	28001416 	blt	r5,zero,8004214 <__udivsi3+0x5c>
 80041c4:	00800804 	movi	r2,32
 80041c8:	00c00044 	movi	r3,1
 80041cc:	00000206 	br	80041d8 <__udivsi3+0x20>
 80041d0:	10000e26 	beq	r2,zero,800420c <__udivsi3+0x54>
 80041d4:	28000516 	blt	r5,zero,80041ec <__udivsi3+0x34>
 80041d8:	294b883a 	add	r5,r5,r5
 80041dc:	10bfffc4 	addi	r2,r2,-1
 80041e0:	18c7883a 	add	r3,r3,r3
 80041e4:	293ffa36 	bltu	r5,r4,80041d0 <__alt_data_end+0xf80041d0>
 80041e8:	18000826 	beq	r3,zero,800420c <__udivsi3+0x54>
 80041ec:	0005883a 	mov	r2,zero
 80041f0:	31400236 	bltu	r6,r5,80041fc <__udivsi3+0x44>
 80041f4:	314dc83a 	sub	r6,r6,r5
 80041f8:	10c4b03a 	or	r2,r2,r3
 80041fc:	1806d07a 	srli	r3,r3,1
 8004200:	280ad07a 	srli	r5,r5,1
 8004204:	183ffa1e 	bne	r3,zero,80041f0 <__alt_data_end+0xf80041f0>
 8004208:	f800283a 	ret
 800420c:	0005883a 	mov	r2,zero
 8004210:	f800283a 	ret
 8004214:	00c00044 	movi	r3,1
 8004218:	003ff406 	br	80041ec <__alt_data_end+0xf80041ec>

0800421c <__umodsi3>:
 800421c:	2005883a 	mov	r2,r4
 8004220:	2900122e 	bgeu	r5,r4,800426c <__umodsi3+0x50>
 8004224:	28001116 	blt	r5,zero,800426c <__umodsi3+0x50>
 8004228:	01800804 	movi	r6,32
 800422c:	00c00044 	movi	r3,1
 8004230:	00000206 	br	800423c <__umodsi3+0x20>
 8004234:	30000c26 	beq	r6,zero,8004268 <__umodsi3+0x4c>
 8004238:	28000516 	blt	r5,zero,8004250 <__umodsi3+0x34>
 800423c:	294b883a 	add	r5,r5,r5
 8004240:	31bfffc4 	addi	r6,r6,-1
 8004244:	18c7883a 	add	r3,r3,r3
 8004248:	293ffa36 	bltu	r5,r4,8004234 <__alt_data_end+0xf8004234>
 800424c:	18000626 	beq	r3,zero,8004268 <__umodsi3+0x4c>
 8004250:	1806d07a 	srli	r3,r3,1
 8004254:	11400136 	bltu	r2,r5,800425c <__umodsi3+0x40>
 8004258:	1145c83a 	sub	r2,r2,r5
 800425c:	280ad07a 	srli	r5,r5,1
 8004260:	183ffb1e 	bne	r3,zero,8004250 <__alt_data_end+0xf8004250>
 8004264:	f800283a 	ret
 8004268:	f800283a 	ret
 800426c:	00c00044 	movi	r3,1
 8004270:	003ff706 	br	8004250 <__alt_data_end+0xf8004250>

08004274 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8004274:	defffd04 	addi	sp,sp,-12
 8004278:	df000215 	stw	fp,8(sp)
 800427c:	df000204 	addi	fp,sp,8
 8004280:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8004284:	0001883a 	nop
 8004288:	e0bfff17 	ldw	r2,-4(fp)
 800428c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8004290:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8004294:	10000226 	beq	r2,zero,80042a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8004298:	002af070 	cmpltui	zero,zero,43969
 800429c:	00000106 	br	80042a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80042a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80042a4:	003fff06 	br	80042a4 <__alt_data_end+0xf80042a4>

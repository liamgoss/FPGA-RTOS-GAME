
sdtest.elf:     file format elf32-littlenios2
sdtest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00016008 memsz 0x00016008 flags r-x
    LOAD off    0x00017028 vaddr 0x08016028 paddr 0x08017b6c align 2**12
         filesz 0x00001b44 memsz 0x00001b44 flags rw-
    LOAD off    0x000196b0 vaddr 0x080196b0 paddr 0x080196b0 align 2**12
         filesz 0x00000000 memsz 0x00000700 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001522c  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bb8  08015470  08015470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b44  08016028  08017b6c  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000700  080196b0  080196b0  000196b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00200000  00200000  00018b6c  2**0
                  CONTENTS
  7 .sdram        00000000  08019db0  08019db0  00018b6c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018b6c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001110  00000000  00000000  00018b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e0f1  00000000  00000000  00019ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b27f  00000000  00000000  00047d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e067  00000000  00000000  00053010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002c60  00000000  00000000  00061078  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004931  00000000  00000000  00063cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019250  00000000  00000000  00068609  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0008185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b00  00000000  00000000  00081890  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008737e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00087381  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008738d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008738e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008738f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00087393  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00087397  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008739b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000873a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000873b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000873bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  000873c6  2**0
                  CONTENTS, READONLY
 30 .jdi          000048e1  00000000  00000000  000873e1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009a3b8  00000000  00000000  0008bcc2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08015470 l    d  .rodata	00000000 .rodata
08016028 l    d  .rwdata	00000000 .rwdata
080196b0 l    d  .bss	00000000 .bss
00200000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08019db0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sdtest_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08000a30 l     F .text	00000008 __fp_unlock
08000a44 l     F .text	0000019c __sinit.part.1
08000be0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08016028 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08002a60 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08015d56 l     O .rodata	00000010 zeroes.4404
0800570c l     F .text	000000bc __sbprintf
08015d66 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
080059d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
08016874 l     O .rwdata	00000020 lc_ctype_charset
08016854 l     O .rwdata	00000020 lc_message_charset
08016894 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08015d94 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800955c l     F .text	000000fc __sprint_r.part.0
08015ec8 l     O .rodata	00000010 blanks.4348
08015eb8 l     O .rodata	00000010 zeroes.4349
0800aae8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e588 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e5b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e6a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800e780 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800e86c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0800ea40 l     F .text	0000003c alt_get_errno
0800ea7c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0800ec94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08017b5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800eee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f014 l     F .text	00000034 alt_dev_reg
08016a74 l     O .rwdata	00001060 jtag_uart_0
08017ad4 l     O .rwdata	0000002c lcd
08017b00 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08013658 l     F .text	0000020c altera_avalon_jtag_uart_irq
08013864 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08013e9c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080145f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08014ca8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801971c g     O .bss	00000004 alt_instruction_exception_handler
080196e4 g     O .bss	00000004 aux_status_register
08002974 g     F .text	00000018 putchar
08008b68 g     F .text	00000074 _mprec_log10
08008c54 g     F .text	0000008c __any_on
08007914 g     F .text	00000054 _isatty_r
08015da0 g     O .rodata	00000028 __mprec_tinytens
0800e97c g     F .text	0000007c alt_main
0800298c g     F .text	000000c0 _puts_r
08019cb0 g     O .bss	00000100 alt_irq
08007a44 g     F .text	00000060 _lseek_r
08017b6c g       *ABS*	00000000 __flash_rwdata_start
08014004 g     F .text	00000040 alt_up_character_lcd_send_cmd
08007258 g     F .text	000000ac __sflags
0800cfa8 g     F .text	00000088 .hidden __eqdf2
0800f474 g     F .text	000001a4 Check_for_Master_Boot_Record
08019db0 g       *ABS*	00000000 __alt_heap_start
08000450 g     F .text	00000060 init_SD_card
08013278 g     F .text	000001bc alt_up_sd_card_fclose
08002930 g     F .text	0000003c printf
0800afc8 g     F .text	0000009c _wcrtomb_r
08002d7c g     F .text	0000005c __sseek
08000d80 g     F .text	00000010 __sinit
0800aba4 g     F .text	00000140 __swbuf_r
08007968 g     F .text	0000007c _setlocale_r
08000be8 g     F .text	00000068 __sfmoreglue
0800ea1c g     F .text	00000024 __malloc_unlock
08019708 g     O .bss	00000004 current_sector_modified
0800343c g     F .text	0000001c strerror
08007b88 g     F .text	0000015c memmove
08000d68 g     F .text	00000018 _cleanup
08007ce4 g     F .text	000000a8 _Balloc
08011e80 g     F .text	000000c4 alt_up_sd_card_is_Present
0800f1bc g     F .text	0000004c Save_Modified_Sector
0800d030 g     F .text	000000dc .hidden __gtdf2
08014f8c g     F .text	00000024 altera_nios2_gen2_irq_init
08013f90 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08019700 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
08000020 g       *ABS*	00000000 __flash_exceptions_start
080019f0 g     F .text	0000005c _fstat_r
080196b4 g     O .bss	00000004 errno
08002cf8 g     F .text	00000008 __seofread
080196d4 g     O .bss	00000004 alt_argv
0801fb2c g       *ABS*	00000000 _gp
08012440 g     F .text	0000037c alt_up_sd_card_fopen
08011fb0 g     F .text	000000d0 alt_up_sd_card_find_first
080196f4 g     O .bss	00000004 command_argument_register
080168f4 g     O .rwdata	00000180 alt_fd_list
0800296c g     F .text	00000008 _putchar_r
080116f4 g     F .text	00000134 find_first_empty_record_in_root_directory
08014798 g     F .text	00000090 alt_find_dev
0800259c g     F .text	00000148 memcpy
080141ac g     F .text	00000050 alt_up_character_lcd_write_fd
08000a38 g     F .text	0000000c _cleanup_r
0800e294 g     F .text	000000dc .hidden __floatsidf
080028ec g     F .text	00000014 perror
08014d6c g     F .text	0000007c alt_io_redirect
0800d10c g     F .text	000000f4 .hidden __ltdf2
08015470 g       *ABS*	00000000 __DTOR_END__
08002a4c g     F .text	00000014 puts
08015040 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080112ec g     F .text	000001bc find_first_empty_cluster
08002de0 g     F .text	0000065c _strerror_r
0800940c g     F .text	00000074 __fpclassifyd
08008ac4 g     F .text	000000a4 __ratio
08011dc4 g     F .text	000000bc alt_up_sd_card_open_dev
0800aacc g     F .text	0000001c __vfiprintf_internal
08013a5c g     F .text	0000021c altera_avalon_jtag_uart_read
08002900 g     F .text	00000030 _printf_r
00200000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800bd58 g     F .text	00000064 .hidden __udivsi3
0800e6dc g     F .text	000000a4 isatty
08015df0 g     O .rodata	000000c8 __mprec_tens
080079e4 g     F .text	0000000c __locale_charset
08014fb0 g     F .text	00000090 alt_icache_flush
080196c0 g     O .bss	00000004 __malloc_top_pad
08017b3c g     O .rwdata	00000004 __mb_cur_max
08007a14 g     F .text	0000000c _localeconv_r
080080f0 g     F .text	0000003c __i2b
08007458 g     F .text	000004bc __sfvwrite_r
080105dc g     F .text	000000b8 get_dir_divider_location
08002c50 g     F .text	00000054 _sbrk_r
080102ac g     F .text	000000c4 filename_to_upper_case
080127bc g     F .text	00000088 alt_up_sd_card_set_attributes
0800f618 g     F .text	0000027c Read_File_Record_At_Offset
08008e48 g     F .text	00000060 _read_r
08017b54 g     O .rwdata	00000004 alt_max_fd
08010e70 g     F .text	0000047c find_file_in_directory
08000684 g     F .text	000000f0 _fclose_r
08000a00 g     F .text	00000030 fflush
080196bc g     O .bss	00000004 __malloc_max_sbrked_mem
08011f44 g     F .text	0000006c alt_up_sd_card_is_FAT16
0800be14 g     F .text	000008ac .hidden __adddf3
0800886c g     F .text	0000010c __b2d
0800b728 g     F .text	00000538 .hidden __umoddi3
0800e8a8 g     F .text	000000d4 lseek
08017b2c g     O .rwdata	00000004 _global_impure_ptr
08010930 g     F .text	00000540 get_home_directory_cluster_for_file
08008ea8 g     F .text	00000564 _realloc_r
08019db0 g       *ABS*	00000000 __bss_end
08014bb8 g     F .text	000000f0 alt_iic_isr_register
08014e84 g     F .text	00000108 alt_tick
0800b1b0 g     F .text	00000578 .hidden __udivdi3
0800af24 g     F .text	00000024 _fputwc_r
08015dc8 g     O .rodata	00000028 __mprec_bigtens
08007ed4 g     F .text	00000104 __s2b
0800050c g     F .text	00000068 SD_write
0800e370 g     F .text	000000a8 .hidden __floatunsidf
080085ac g     F .text	00000060 __mcmp
0801970c g     O .bss	00000004 current_sector_index
08000da0 g     F .text	00000018 __fp_lock_all
08014b6c g     F .text	0000004c alt_ic_irq_enabled
08014de8 g     F .text	0000009c alt_alarm_stop
0800f394 g     F .text	000000e0 mark_cluster
08019710 g     O .bss	00000004 alt_irq_active
08001590 g     F .text	00000444 _fseeko_r
080000fc g     F .exceptions	000000d4 alt_irq_handler
080168cc g     O .rwdata	00000028 alt_dev_null
08011828 g     F .text	0000018c convert_filename_to_name_extension
0801444c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
080145b0 g     F .text	00000048 alt_dcache_flush_all
08007fd8 g     F .text	00000068 __hi0bits
080196e0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0800e214 g     F .text	00000080 .hidden __fixdfsi
080114a8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
08017b6c g       *ABS*	00000000 __ram_rwdata_end
08017b4c g     O .rwdata	00000008 alt_dev_list
08007304 g     F .text	00000044 _fputc_r
0800ef1c g     F .text	000000f8 write
08008ce0 g     F .text	000000a0 _putc_r
08019704 g     O .bss	00000004 device_pointer
08016028 g       *ABS*	00000000 __ram_rodata_end
0800e5f0 g     F .text	000000b0 fstat
0800d10c g     F .text	000000f4 .hidden __ledf2
08008324 g     F .text	00000140 __pow5mult
08009670 g     F .text	0000145c ___vfiprintf_internal_r
080196cc g     O .bss	00000004 __nlocale_changed
0800bdbc g     F .text	00000058 .hidden __umodsi3
08019db0 g       *ABS*	00000000 end
080019d4 g     F .text	0000001c fseeko
08001574 g     F .text	0000001c fseek
08013598 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08015470 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08013f14 g     F .text	0000007c alt_avalon_timer_sc_init
0800e418 g     F .text	00000064 .hidden __clzsi2
08013c78 g     F .text	00000224 altera_avalon_jtag_uart_write
08000d90 g     F .text	00000004 __sfp_lock_acquire
08007aa4 g     F .text	000000e4 memchr
080140b8 g     F .text	0000007c alt_up_character_lcd_write
080034f8 g     F .text	000021f8 ___vfprintf_internal_r
08001260 g     F .text	00000310 _free_r
080079f0 g     F .text	00000010 __locale_mb_cur_max
080152bc g     F .text	00000180 __call_exitprocs
080196c8 g     O .bss	00000004 __mlocale_changed
08017b34 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
08019714 g     O .bss	00000004 _alt_tick_rate
080034f0 g     F .text	00000008 _user_strerror
080002d8 g     F .text	00000178 read_file
08008464 g     F .text	00000148 __lshift
08019718 g     O .bss	00000004 _alt_nticks
0800ecd0 g     F .text	000000fc read
0800f080 g     F .text	00000088 alt_sys_init
080142fc g     F .text	0000008c alt_up_character_lcd_shift_display
0800280c g     F .text	00000060 _open_r
080151a4 g     F .text	00000118 __register_exitproc
0800812c g     F .text	000001f8 __multiply
08014388 g     F .text	0000008c alt_up_character_lcd_erase_pos
08013904 g     F .text	00000068 altera_avalon_jtag_uart_close
08016028 g       *ABS*	00000000 __ram_rwdata_start
08015470 g       *ABS*	00000000 __ram_rodata_start
08019720 g     O .bss	00000028 __malloc_current_mallinfo
08008978 g     F .text	0000014c __d2b
080196dc g     O .bss	00000004 initialized
08013434 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08014930 g     F .text	000000a4 alt_get_fd
08019748 g     O .bss	00000014 search_data
0800597c g     F .text	00000054 _close_r
08015128 g     F .text	0000007c memcmp
080134f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08019db0 g       *ABS*	00000000 __alt_stack_base
08013544 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08005828 g     F .text	00000154 __swsetup_r
0800c6c0 g     F .text	000008e8 .hidden __divdf3
08000c50 g     F .text	00000118 __sfp
0801975c g     O .bss	00000054 boot_sector_data
08008bdc g     F .text	00000078 __copybits
0801644c g     O .rwdata	00000408 __malloc_av_
08000d9c g     F .text	00000004 __sinit_lock_release
0800d200 g     F .text	00000718 .hidden __muldf3
08002ca4 g     F .text	00000054 __sread
08001108 g     F .text	00000034 fread
08014828 g     F .text	00000108 alt_find_file
08014634 g     F .text	000000a4 alt_dev_llist_insert
0800e9f8 g     F .text	00000024 __malloc_lock
0800ee30 g     F .text	000000b0 sbrk
080009a4 g     F .text	0000005c _fflush_r
0800acfc g     F .text	000000c4 _calloc_r
08000ec4 g     F .text	00000018 fopen
080196b0 g       *ABS*	00000000 __bss_start
080026e4 g     F .text	00000128 memset
08000630 g     F .text	00000054 main
080196d8 g     O .bss	00000004 alt_envp
080196b8 g     O .bss	00000004 __malloc_max_total_mem
08013494 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800ace4 g     F .text	00000018 __swbuf
08012844 g     F .text	00000088 alt_up_sd_card_get_attributes
08000edc g     F .text	0000022c _fread_r
0800f108 g     F .text	000000b4 Write_Sector_Data
08012c44 g     F .text	00000634 alt_up_sd_card_write
08014270 g     F .text	0000008c alt_up_character_lcd_shift_cursor
08002dd8 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08000774 g     F .text	00000014 fclose
08005bd0 g     F .text	00001688 _dtoa_r
08001d90 g     F .text	0000080c _malloc_r
0800b124 g     F .text	00000030 __ascii_wctomb
08017b58 g     O .rwdata	00000004 alt_errno
08001a4c g     F .text	000000c4 _fwalk
08008d80 g     F .text	000000c8 putc
0800bc60 g     F .text	00000084 .hidden __divsi3
0801407c g     F .text	0000003c alt_up_character_lcd_open_dev
0800113c g     F .text	00000124 _malloc_trim_r
08015470 g       *ABS*	00000000 __CTOR_END__
080196e8 g     O .bss	00000004 status_register
08014044 g     F .text	00000038 alt_up_character_lcd_init
08009480 g     F .text	000000dc strcmp
080196f0 g     O .bss	00000004 command_register
08015470 g       *ABS*	00000000 __flash_rodata_start
08015470 g       *ABS*	00000000 __DTOR_LIST__
0800cfa8 g     F .text	00000088 .hidden __nedf2
0800f048 g     F .text	00000038 alt_irq_init
0800edcc g     F .text	00000064 alt_release_fd
0800f2e0 g     F .text	000000b4 get_cluster_flag
08014414 g     F .text	00000038 alt_up_character_lcd_cursor_off
08015ed8 g     O .rodata	00000100 .hidden __clz_tab
0800f894 g     F .text	0000028c Write_File_Record_At_Offset
080196c4 g     O .bss	00000004 _PathLocale
080004b0 g     F .text	0000005c SD_read
080150dc g     F .text	00000014 atexit
080057c8 g     F .text	00000060 _write_r
08007a20 g     F .text	00000018 setlocale
0800fb20 g     F .text	000006a0 Check_for_DOS_FAT
080119b4 g     F .text	000002c8 create_file
08017b30 g     O .rwdata	00000004 _impure_ptr
080196ec g     O .bss	00000004 CSD_register_w0
080196d0 g     O .bss	00000004 alt_argc
08000788 g     F .text	0000021c __sflush_r
08014738 g     F .text	00000060 _do_dtors
08007a0c g     F .text	00000008 __locale_cjk_lang
08000290 g     F .text	00000048 SD_init
08001570 g     F .text	00000004 _fseek_r
08002a7c g     F .text	000001d4 __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
08008808 g     F .text	00000064 __ulp
08000db8 g     F .text	00000018 __fp_unlock_all
08007348 g     F .text	0000005c fputc
08017b44 g     O .rwdata	00000008 alt_fs_list
08010370 g     F .text	0000026c check_file_name_for_FAT16_compliance
080196f8 g     O .bss	00000004 buffer_memory
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007a38 g     F .text	0000000c localeconv
08014a08 g     F .text	00000050 alt_ic_isr_register
080196fc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
08017b6c g       *ABS*	00000000 _edata
08019db0 g       *ABS*	00000000 _end
080197b0 g     O .bss	00000500 active_files
0800adc0 g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
08011c7c g     F .text	00000148 copy_file_record_name_to_string
0801396c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080073a4 g     F .text	0000009c _fputs_r
080101c0 g     F .text	000000ec Look_for_FAT16
08014ae0 g     F .text	0000008c alt_ic_irq_disable
080196b0 g     O .bss	00000002 tfile
08002d00 g     F .text	0000007c __swrite
08017b38 g     O .rwdata	00000004 __malloc_trim_threshold
0800286c g     F .text	00000080 _perror_r
08007a00 g     F .text	0000000c __locale_msgcharset
080150f0 g     F .text	00000038 exit
08012080 g     F .text	000003c0 alt_up_sd_card_find_next
08001b10 g     F .text	000000c4 _fwalk_reent
0800860c g     F .text	000001fc __mdiff
0800bce4 g     F .text	00000074 .hidden __modsi3
0800f208 g     F .text	000000d8 Read_Sector_Data
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000d94 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08014134 g     F .text	00000078 alt_up_character_lcd_string
08000dd0 g     F .text	000000f4 _fopen_r
0801543c g     F .text	00000034 _exit
08014484 g     F .text	0000012c alt_alarm_start
080128cc g     F .text	00000378 alt_up_sd_card_read
08001bd4 g     F .text	000001bc __smakebuf_r
08003458 g     F .text	00000098 strlen
0800eb40 g     F .text	00000154 open
0800d030 g     F .text	000000dc .hidden __gedf2
08017b40 g     O .rwdata	00000004 __wctomb
08009658 g     F .text	00000018 __sprint_r
080149d4 g     F .text	00000034 alt_icache_flush_all
08007440 g     F .text	00000018 fputs
080141fc g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08017b60 g     O .rwdata	00000004 alt_priority_mask
08014a58 g     F .text	00000088 alt_ic_irq_enable
080056f0 g     F .text	0000001c __vfprintf_internal
0800b154 g     F .text	0000005c _wctomb_r
0800d918 g     F .text	000008fc .hidden __subdf3
08008040 g     F .text	000000b0 __lo0bits
08017b64 g     O .rwdata	00000008 alt_alarm_list
080146d8 g     F .text	00000060 _do_ctors
0800b064 g     F .text	000000c0 wcrtomb
0800e4b8 g     F .text	000000d0 close
0800e7e8 g     F .text	00000084 alt_load
08010694 g     F .text	0000029c match_file_record_to_name_ext
0800af48 g     F .text	00000080 fputwc
08000574 g     F .text	000000bc read_sector
08000d98 g     F .text	00000004 __sinit_lock_acquire
08007db4 g     F .text	00000120 __multadd
08007d8c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10a72c04 	addi	r2,r2,-25424
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10a72c04 	addi	r2,r2,-25424
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6fc17 	ldw	r2,-25616(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6fc17 	ldw	r2,-25616(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xf8000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6becb14 	ori	gp,gp,64300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	10a5ac14 	ori	r2,r2,38576

    movhi r3, %hi(__bss_end)
 800026c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000270:	18e76c14 	ori	r3,r3,40368

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xf8000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800e7e80 	call	800e7e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800e97c0 	call	800e97c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xf800028c>

08000290 <SD_init>:
int SD_read();
void SD_write(int);

//initializing SD card for read/write
void SD_init()
{
 8000290:	defffe04 	addi	sp,sp,-8
 8000294:	dfc00115 	stw	ra,4(sp)
 8000298:	df000015 	stw	fp,0(sp)
 800029c:	d839883a 	mov	fp,sp
	// device is named SD_Card in Qsys
	alt_up_sd_card_open_dev("/dev/SD_Card");
 80002a0:	01020074 	movhi	r4,2049
 80002a4:	21151c04 	addi	r4,r4,21616
 80002a8:	8011dc40 	call	8011dc4 <alt_up_sd_card_open_dev>
	if(alt_up_sd_card_is_FAT16())
 80002ac:	8011f440 	call	8011f44 <alt_up_sd_card_is_FAT16>
 80002b0:	10000326 	beq	r2,zero,80002c0 <SD_init+0x30>
		printf("Fat16 detected\n");
 80002b4:	01020074 	movhi	r4,2049
 80002b8:	21152004 	addi	r4,r4,21632
 80002bc:	8002a4c0 	call	8002a4c <puts>
}
 80002c0:	0001883a 	nop
 80002c4:	e037883a 	mov	sp,fp
 80002c8:	dfc00117 	ldw	ra,4(sp)
 80002cc:	df000017 	ldw	fp,0(sp)
 80002d0:	dec00204 	addi	sp,sp,8
 80002d4:	f800283a 	ret

080002d8 <read_file>:


void read_file(alt_up_sd_card_dev *device, const char *filename) {
 80002d8:	defff704 	addi	sp,sp,-36
 80002dc:	dfc00815 	stw	ra,32(sp)
 80002e0:	df000715 	stw	fp,28(sp)
 80002e4:	df000704 	addi	fp,sp,28
 80002e8:	e13ffe15 	stw	r4,-8(fp)
 80002ec:	e17fff15 	stw	r5,-4(fp)
    int connected = 0;
 80002f0:	e03ff915 	stw	zero,-28(fp)

    while (1) {
        if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 80002f4:	e0bff917 	ldw	r2,-28(fp)
 80002f8:	10004b1e 	bne	r2,zero,8000428 <read_file+0x150>
 80002fc:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8000300:	10004926 	beq	r2,zero,8000428 <read_file+0x150>
            printf("Card connected.\n");
 8000304:	01020074 	movhi	r4,2049
 8000308:	21152404 	addi	r4,r4,21648
 800030c:	8002a4c0 	call	8002a4c <puts>

            if (alt_up_sd_card_is_FAT16()) {
 8000310:	8011f440 	call	8011f44 <alt_up_sd_card_is_FAT16>
 8000314:	10003e26 	beq	r2,zero,8000410 <read_file+0x138>
                printf("FAT16 file system detected.\n");
 8000318:	01020074 	movhi	r4,2049
 800031c:	21152804 	addi	r4,r4,21664
 8000320:	8002a4c0 	call	8002a4c <puts>
                printf("Looking for file: '%s'\n", filename);
 8000324:	e17fff17 	ldw	r5,-4(fp)
 8000328:	01020074 	movhi	r4,2049
 800032c:	21152f04 	addi	r4,r4,21692
 8000330:	80029300 	call	8002930 <printf>

                char *firstFile = filename;
 8000334:	e0bfff17 	ldw	r2,-4(fp)
 8000338:	e0bffb15 	stw	r2,-20(fp)
                alt_up_sd_card_find_first(".", firstFile);
 800033c:	e17ffb17 	ldw	r5,-20(fp)
 8000340:	01020074 	movhi	r4,2049
 8000344:	21153504 	addi	r4,r4,21716
 8000348:	8011fb00 	call	8011fb0 <alt_up_sd_card_find_first>

                short file;
                while ((file = alt_up_sd_card_find_next(firstFile)) != -1) {
 800034c:	00002906 	br	80003f4 <read_file+0x11c>
                    int contentCount = 0;
 8000350:	e03ffa15 	stw	zero,-24(fp)
                    printf("===========================\n");
 8000354:	01020074 	movhi	r4,2049
 8000358:	21153604 	addi	r4,r4,21720
 800035c:	8002a4c0 	call	8002a4c <puts>
                    printf("Found file: '%s'\n", firstFile);
 8000360:	e17ffb17 	ldw	r5,-20(fp)
 8000364:	01020074 	movhi	r4,2049
 8000368:	21153d04 	addi	r4,r4,21748
 800036c:	80029300 	call	8002930 <printf>

                    short fileHandle = alt_up_sd_card_fopen(firstFile, false);
 8000370:	000b883a 	mov	r5,zero
 8000374:	e13ffb17 	ldw	r4,-20(fp)
 8000378:	80124400 	call	8012440 <alt_up_sd_card_fopen>
 800037c:	e0bffc8d 	sth	r2,-14(fp)
                    printf("File handle: %i\n", fileHandle);
 8000380:	e0bffc8f 	ldh	r2,-14(fp)
 8000384:	100b883a 	mov	r5,r2
 8000388:	01020074 	movhi	r4,2049
 800038c:	21154204 	addi	r4,r4,21768
 8000390:	80029300 	call	8002930 <printf>
                    printf("Contents:\n");
 8000394:	01020074 	movhi	r4,2049
 8000398:	21154704 	addi	r4,r4,21788
 800039c:	8002a4c0 	call	8002a4c <puts>

                    short int readCharacter;
                    while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1) {
 80003a0:	00000606 	br	80003bc <read_file+0xe4>
                        printf("%c", readCharacter);
 80003a4:	e0bffd0f 	ldh	r2,-12(fp)
 80003a8:	1009883a 	mov	r4,r2
 80003ac:	80029740 	call	8002974 <putchar>
                        ++contentCount;
 80003b0:	e0bffa17 	ldw	r2,-24(fp)
 80003b4:	10800044 	addi	r2,r2,1
 80003b8:	e0bffa15 	stw	r2,-24(fp)
                    short fileHandle = alt_up_sd_card_fopen(firstFile, false);
                    printf("File handle: %i\n", fileHandle);
                    printf("Contents:\n");

                    short int readCharacter;
                    while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1) {
 80003bc:	e0bffc8f 	ldh	r2,-14(fp)
 80003c0:	1009883a 	mov	r4,r2
 80003c4:	80128cc0 	call	80128cc <alt_up_sd_card_read>
 80003c8:	e0bffd0d 	sth	r2,-12(fp)
 80003cc:	e0bffd0f 	ldh	r2,-12(fp)
 80003d0:	10bfffd8 	cmpnei	r2,r2,-1
 80003d4:	103ff31e 	bne	r2,zero,80003a4 <__alt_data_end+0xf80003a4>
                        printf("%c", readCharacter);
                        ++contentCount;
                    }

                    printf("\nContent size: %i", contentCount);
 80003d8:	e17ffa17 	ldw	r5,-24(fp)
 80003dc:	01020074 	movhi	r4,2049
 80003e0:	21154a04 	addi	r4,r4,21800
 80003e4:	80029300 	call	8002930 <printf>
                    printf("\n===========================\n\n");
 80003e8:	01020074 	movhi	r4,2049
 80003ec:	21154f04 	addi	r4,r4,21820
 80003f0:	8002a4c0 	call	8002a4c <puts>

                char *firstFile = filename;
                alt_up_sd_card_find_first(".", firstFile);

                short file;
                while ((file = alt_up_sd_card_find_next(firstFile)) != -1) {
 80003f4:	e13ffb17 	ldw	r4,-20(fp)
 80003f8:	80120800 	call	8012080 <alt_up_sd_card_find_next>
 80003fc:	e0bffc0d 	sth	r2,-16(fp)
 8000400:	e0bffc0f 	ldh	r2,-16(fp)
 8000404:	10bfffd8 	cmpnei	r2,r2,-1
 8000408:	103fd11e 	bne	r2,zero,8000350 <__alt_data_end+0xf8000350>
 800040c:	00000306 	br	800041c <read_file+0x144>

                    printf("\nContent size: %i", contentCount);
                    printf("\n===========================\n\n");
                }
            } else {
                printf("Unknown file system.\n");
 8000410:	01020074 	movhi	r4,2049
 8000414:	21155704 	addi	r4,r4,21852
 8000418:	8002a4c0 	call	8002a4c <puts>
            }
            connected = 1;
 800041c:	00800044 	movi	r2,1
 8000420:	e0bff915 	stw	r2,-28(fp)
 8000424:	00000906 	br	800044c <read_file+0x174>
        } else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)) {
 8000428:	e0bff917 	ldw	r2,-28(fp)
 800042c:	10800058 	cmpnei	r2,r2,1
 8000430:	103fb01e 	bne	r2,zero,80002f4 <__alt_data_end+0xf80002f4>
 8000434:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8000438:	103fae1e 	bne	r2,zero,80002f4 <__alt_data_end+0xf80002f4>
            printf("Card disconnected.\n");
 800043c:	01020074 	movhi	r4,2049
 8000440:	21155d04 	addi	r4,r4,21876
 8000444:	8002a4c0 	call	8002a4c <puts>
            connected = 0;
 8000448:	e03ff915 	stw	zero,-28(fp)
        }
    }
 800044c:	003fa906 	br	80002f4 <__alt_data_end+0xf80002f4>

08000450 <init_SD_card>:
}


alt_up_sd_card_dev *init_SD_card(void) {
 8000450:	defffd04 	addi	sp,sp,-12
 8000454:	dfc00215 	stw	ra,8(sp)
 8000458:	df000115 	stw	fp,4(sp)
 800045c:	df000104 	addi	fp,sp,4
    alt_up_sd_card_dev *device = alt_up_sd_card_open_dev("/dev/SD_Card");
 8000460:	01020074 	movhi	r4,2049
 8000464:	21151c04 	addi	r4,r4,21616
 8000468:	8011dc40 	call	8011dc4 <alt_up_sd_card_open_dev>
 800046c:	e0bfff15 	stw	r2,-4(fp)
    if (device != NULL) {
 8000470:	e0bfff17 	ldw	r2,-4(fp)
 8000474:	10000526 	beq	r2,zero,800048c <init_SD_card+0x3c>
        printf("Initialized. Waiting for SD card...\n");
 8000478:	01020074 	movhi	r4,2049
 800047c:	21156204 	addi	r4,r4,21896
 8000480:	8002a4c0 	call	8002a4c <puts>
        return device;
 8000484:	e0bfff17 	ldw	r2,-4(fp)
 8000488:	00000406 	br	800049c <init_SD_card+0x4c>
    } else {
        printf("Initialization failed.\n");
 800048c:	01020074 	movhi	r4,2049
 8000490:	21156b04 	addi	r4,r4,21932
 8000494:	8002a4c0 	call	8002a4c <puts>
        return NULL;
 8000498:	0005883a 	mov	r2,zero
    }
}
 800049c:	e037883a 	mov	sp,fp
 80004a0:	dfc00117 	ldw	ra,4(sp)
 80004a4:	df000017 	ldw	fp,0(sp)
 80004a8:	dec00204 	addi	sp,sp,8
 80004ac:	f800283a 	ret

080004b0 <SD_read>:
}

*/
//read SD card
int SD_read()
{
 80004b0:	defffc04 	addi	sp,sp,-16
 80004b4:	dfc00315 	stw	ra,12(sp)
 80004b8:	df000215 	stw	fp,8(sp)
 80004bc:	df000204 	addi	fp,sp,8
	int retval;
	char zero = '0';
 80004c0:	00800c04 	movi	r2,48
 80004c4:	e0bffe05 	stb	r2,-8(fp)
	char temp;
	temp = alt_up_sd_card_read(tfile);
 80004c8:	d0a6e10b 	ldhu	r2,-25724(gp)
 80004cc:	10bfffcc 	andi	r2,r2,65535
 80004d0:	10a0001c 	xori	r2,r2,32768
 80004d4:	10a00004 	addi	r2,r2,-32768
 80004d8:	1009883a 	mov	r4,r2
 80004dc:	80128cc0 	call	80128cc <alt_up_sd_card_read>
 80004e0:	e0bffe45 	stb	r2,-7(fp)
	retval = temp - zero;
 80004e4:	e0fffe47 	ldb	r3,-7(fp)
 80004e8:	e0bffe07 	ldb	r2,-8(fp)
 80004ec:	1885c83a 	sub	r2,r3,r2
 80004f0:	e0bfff15 	stw	r2,-4(fp)
	return retval;
 80004f4:	e0bfff17 	ldw	r2,-4(fp)
}
 80004f8:	e037883a 	mov	sp,fp
 80004fc:	dfc00117 	ldw	ra,4(sp)
 8000500:	df000017 	ldw	fp,0(sp)
 8000504:	dec00204 	addi	sp,sp,8
 8000508:	f800283a 	ret

0800050c <SD_write>:

//write SD card
void SD_write(int in)
{
 800050c:	defffc04 	addi	sp,sp,-16
 8000510:	dfc00315 	stw	ra,12(sp)
 8000514:	df000215 	stw	fp,8(sp)
 8000518:	df000204 	addi	fp,sp,8
 800051c:	e13fff15 	stw	r4,-4(fp)
	char zero = '0';
 8000520:	00800c04 	movi	r2,48
 8000524:	e0bffe05 	stb	r2,-8(fp)
	char intchar;
	intchar = in + zero;
 8000528:	e0bfff17 	ldw	r2,-4(fp)
 800052c:	1007883a 	mov	r3,r2
 8000530:	e0bffe03 	ldbu	r2,-8(fp)
 8000534:	1885883a 	add	r2,r3,r2
 8000538:	e0bffe45 	stb	r2,-7(fp)
	alt_up_sd_card_write(tfile, intchar);
 800053c:	d0a6e10b 	ldhu	r2,-25724(gp)
 8000540:	10bfffcc 	andi	r2,r2,65535
 8000544:	10a0001c 	xori	r2,r2,32768
 8000548:	10a00004 	addi	r2,r2,-32768
 800054c:	e0fffe47 	ldb	r3,-7(fp)
 8000550:	180b883a 	mov	r5,r3
 8000554:	1009883a 	mov	r4,r2
 8000558:	8012c440 	call	8012c44 <alt_up_sd_card_write>
}
 800055c:	0001883a 	nop
 8000560:	e037883a 	mov	sp,fp
 8000564:	dfc00117 	ldw	ra,4(sp)
 8000568:	df000017 	ldw	fp,0(sp)
 800056c:	dec00204 	addi	sp,sp,8
 8000570:	f800283a 	ret

08000574 <read_sector>:


#define SECTOR_SIZE 512

// Function to read a sector from the SD card
int read_sector(const char *file_path, int sector_number, char *buffer) {
 8000574:	defff904 	addi	sp,sp,-28
 8000578:	dfc00615 	stw	ra,24(sp)
 800057c:	df000515 	stw	fp,20(sp)
 8000580:	df000504 	addi	fp,sp,20
 8000584:	e13ffd15 	stw	r4,-12(fp)
 8000588:	e17ffe15 	stw	r5,-8(fp)
 800058c:	e1bfff15 	stw	r6,-4(fp)
    FILE *file = fopen(file_path, "rb");
 8000590:	01420074 	movhi	r5,2049
 8000594:	29557104 	addi	r5,r5,21956
 8000598:	e13ffd17 	ldw	r4,-12(fp)
 800059c:	8000ec40 	call	8000ec4 <fopen>
 80005a0:	e0bffb15 	stw	r2,-20(fp)

    if (file == NULL) {
 80005a4:	e0bffb17 	ldw	r2,-20(fp)
 80005a8:	1000051e 	bne	r2,zero,80005c0 <read_sector+0x4c>
        perror("Error opening file");
 80005ac:	01020074 	movhi	r4,2049
 80005b0:	21157204 	addi	r4,r4,21960
 80005b4:	80028ec0 	call	80028ec <perror>
        return -1;
 80005b8:	00bfffc4 	movi	r2,-1
 80005bc:	00001706 	br	800061c <read_sector+0xa8>
    }

    // Seek to the specified sector
    fseek(file, sector_number * SECTOR_SIZE, SEEK_SET);
 80005c0:	e0bffe17 	ldw	r2,-8(fp)
 80005c4:	1004927a 	slli	r2,r2,9
 80005c8:	000d883a 	mov	r6,zero
 80005cc:	100b883a 	mov	r5,r2
 80005d0:	e13ffb17 	ldw	r4,-20(fp)
 80005d4:	80015740 	call	8001574 <fseek>

    // Read the sector into the buffer
    size_t bytesRead = fread(buffer, 1, SECTOR_SIZE, file);
 80005d8:	e1fffb17 	ldw	r7,-20(fp)
 80005dc:	01808004 	movi	r6,512
 80005e0:	01400044 	movi	r5,1
 80005e4:	e13fff17 	ldw	r4,-4(fp)
 80005e8:	80011080 	call	8001108 <fread>
 80005ec:	e0bffc15 	stw	r2,-16(fp)

    fclose(file);
 80005f0:	e13ffb17 	ldw	r4,-20(fp)
 80005f4:	80007740 	call	8000774 <fclose>

    if (bytesRead != SECTOR_SIZE) {
 80005f8:	e0bffc17 	ldw	r2,-16(fp)
 80005fc:	10808020 	cmpeqi	r2,r2,512
 8000600:	1000051e 	bne	r2,zero,8000618 <read_sector+0xa4>
        perror("Error reading sector");
 8000604:	01020074 	movhi	r4,2049
 8000608:	21157704 	addi	r4,r4,21980
 800060c:	80028ec0 	call	80028ec <perror>
        return -1;
 8000610:	00bfffc4 	movi	r2,-1
 8000614:	00000106 	br	800061c <read_sector+0xa8>
    }

    return 0;
 8000618:	0005883a 	mov	r2,zero
}
 800061c:	e037883a 	mov	sp,fp
 8000620:	dfc00117 	ldw	ra,4(sp)
 8000624:	df000017 	ldw	fp,0(sp)
 8000628:	dec00204 	addi	sp,sp,8
 800062c:	f800283a 	ret

08000630 <main>:

int main() {
 8000630:	defffd04 	addi	sp,sp,-12
 8000634:	dfc00215 	stw	ra,8(sp)
 8000638:	df000115 	stw	fp,4(sp)
 800063c:	df000104 	addi	fp,sp,4
        }
        printf("\n");
    }
	*/

	alt_up_sd_card_dev *device = init_SD_card();
 8000640:	80004500 	call	8000450 <init_SD_card>
 8000644:	e0bfff15 	stw	r2,-4(fp)

	if (device != NULL) {
 8000648:	e0bfff17 	ldw	r2,-4(fp)
 800064c:	10000426 	beq	r2,zero,8000660 <main+0x30>
		read_file(device, "test.txt");
 8000650:	01420074 	movhi	r5,2049
 8000654:	29557d04 	addi	r5,r5,22004
 8000658:	e13fff17 	ldw	r4,-4(fp)
 800065c:	80002d80 	call	80002d8 <read_file>
	}
	printf("Done\n");
 8000660:	01020074 	movhi	r4,2049
 8000664:	21158004 	addi	r4,r4,22016
 8000668:	8002a4c0 	call	8002a4c <puts>

	//init_SD_and_load_file();
    return 0;
 800066c:	0005883a 	mov	r2,zero
}
 8000670:	e037883a 	mov	sp,fp
 8000674:	dfc00117 	ldw	ra,4(sp)
 8000678:	df000017 	ldw	fp,0(sp)
 800067c:	dec00204 	addi	sp,sp,8
 8000680:	f800283a 	ret

08000684 <_fclose_r>:
 8000684:	28003926 	beq	r5,zero,800076c <_fclose_r+0xe8>
 8000688:	defffc04 	addi	sp,sp,-16
 800068c:	dc400115 	stw	r17,4(sp)
 8000690:	dc000015 	stw	r16,0(sp)
 8000694:	dfc00315 	stw	ra,12(sp)
 8000698:	dc800215 	stw	r18,8(sp)
 800069c:	2023883a 	mov	r17,r4
 80006a0:	2821883a 	mov	r16,r5
 80006a4:	20000226 	beq	r4,zero,80006b0 <_fclose_r+0x2c>
 80006a8:	20800e17 	ldw	r2,56(r4)
 80006ac:	10002726 	beq	r2,zero,800074c <_fclose_r+0xc8>
 80006b0:	8080030f 	ldh	r2,12(r16)
 80006b4:	1000071e 	bne	r2,zero,80006d4 <_fclose_r+0x50>
 80006b8:	0005883a 	mov	r2,zero
 80006bc:	dfc00317 	ldw	ra,12(sp)
 80006c0:	dc800217 	ldw	r18,8(sp)
 80006c4:	dc400117 	ldw	r17,4(sp)
 80006c8:	dc000017 	ldw	r16,0(sp)
 80006cc:	dec00404 	addi	sp,sp,16
 80006d0:	f800283a 	ret
 80006d4:	800b883a 	mov	r5,r16
 80006d8:	8809883a 	mov	r4,r17
 80006dc:	80007880 	call	8000788 <__sflush_r>
 80006e0:	1025883a 	mov	r18,r2
 80006e4:	80800b17 	ldw	r2,44(r16)
 80006e8:	10000426 	beq	r2,zero,80006fc <_fclose_r+0x78>
 80006ec:	81400717 	ldw	r5,28(r16)
 80006f0:	8809883a 	mov	r4,r17
 80006f4:	103ee83a 	callr	r2
 80006f8:	10001616 	blt	r2,zero,8000754 <_fclose_r+0xd0>
 80006fc:	8080030b 	ldhu	r2,12(r16)
 8000700:	1080200c 	andi	r2,r2,128
 8000704:	1000151e 	bne	r2,zero,800075c <_fclose_r+0xd8>
 8000708:	81400c17 	ldw	r5,48(r16)
 800070c:	28000526 	beq	r5,zero,8000724 <_fclose_r+0xa0>
 8000710:	80801004 	addi	r2,r16,64
 8000714:	28800226 	beq	r5,r2,8000720 <_fclose_r+0x9c>
 8000718:	8809883a 	mov	r4,r17
 800071c:	80012600 	call	8001260 <_free_r>
 8000720:	80000c15 	stw	zero,48(r16)
 8000724:	81401117 	ldw	r5,68(r16)
 8000728:	28000326 	beq	r5,zero,8000738 <_fclose_r+0xb4>
 800072c:	8809883a 	mov	r4,r17
 8000730:	80012600 	call	8001260 <_free_r>
 8000734:	80001115 	stw	zero,68(r16)
 8000738:	8000d900 	call	8000d90 <__sfp_lock_acquire>
 800073c:	8000030d 	sth	zero,12(r16)
 8000740:	8000d940 	call	8000d94 <__sfp_lock_release>
 8000744:	9005883a 	mov	r2,r18
 8000748:	003fdc06 	br	80006bc <__alt_data_end+0xf80006bc>
 800074c:	8000d800 	call	8000d80 <__sinit>
 8000750:	003fd706 	br	80006b0 <__alt_data_end+0xf80006b0>
 8000754:	04bfffc4 	movi	r18,-1
 8000758:	003fe806 	br	80006fc <__alt_data_end+0xf80006fc>
 800075c:	81400417 	ldw	r5,16(r16)
 8000760:	8809883a 	mov	r4,r17
 8000764:	80012600 	call	8001260 <_free_r>
 8000768:	003fe706 	br	8000708 <__alt_data_end+0xf8000708>
 800076c:	0005883a 	mov	r2,zero
 8000770:	f800283a 	ret

08000774 <fclose>:
 8000774:	00820074 	movhi	r2,2049
 8000778:	109ecc04 	addi	r2,r2,31536
 800077c:	200b883a 	mov	r5,r4
 8000780:	11000017 	ldw	r4,0(r2)
 8000784:	80006841 	jmpi	8000684 <_fclose_r>

08000788 <__sflush_r>:
 8000788:	2880030b 	ldhu	r2,12(r5)
 800078c:	defffb04 	addi	sp,sp,-20
 8000790:	dcc00315 	stw	r19,12(sp)
 8000794:	dc400115 	stw	r17,4(sp)
 8000798:	dfc00415 	stw	ra,16(sp)
 800079c:	dc800215 	stw	r18,8(sp)
 80007a0:	dc000015 	stw	r16,0(sp)
 80007a4:	10c0020c 	andi	r3,r2,8
 80007a8:	2823883a 	mov	r17,r5
 80007ac:	2027883a 	mov	r19,r4
 80007b0:	1800311e 	bne	r3,zero,8000878 <__sflush_r+0xf0>
 80007b4:	28c00117 	ldw	r3,4(r5)
 80007b8:	10820014 	ori	r2,r2,2048
 80007bc:	2880030d 	sth	r2,12(r5)
 80007c0:	00c04b0e 	bge	zero,r3,80008f0 <__sflush_r+0x168>
 80007c4:	8a000a17 	ldw	r8,40(r17)
 80007c8:	40002326 	beq	r8,zero,8000858 <__sflush_r+0xd0>
 80007cc:	9c000017 	ldw	r16,0(r19)
 80007d0:	10c4000c 	andi	r3,r2,4096
 80007d4:	98000015 	stw	zero,0(r19)
 80007d8:	18004826 	beq	r3,zero,80008fc <__sflush_r+0x174>
 80007dc:	89801417 	ldw	r6,80(r17)
 80007e0:	10c0010c 	andi	r3,r2,4
 80007e4:	18000626 	beq	r3,zero,8000800 <__sflush_r+0x78>
 80007e8:	88c00117 	ldw	r3,4(r17)
 80007ec:	88800c17 	ldw	r2,48(r17)
 80007f0:	30cdc83a 	sub	r6,r6,r3
 80007f4:	10000226 	beq	r2,zero,8000800 <__sflush_r+0x78>
 80007f8:	88800f17 	ldw	r2,60(r17)
 80007fc:	308dc83a 	sub	r6,r6,r2
 8000800:	89400717 	ldw	r5,28(r17)
 8000804:	000f883a 	mov	r7,zero
 8000808:	9809883a 	mov	r4,r19
 800080c:	403ee83a 	callr	r8
 8000810:	00ffffc4 	movi	r3,-1
 8000814:	10c04426 	beq	r2,r3,8000928 <__sflush_r+0x1a0>
 8000818:	88c0030b 	ldhu	r3,12(r17)
 800081c:	89000417 	ldw	r4,16(r17)
 8000820:	88000115 	stw	zero,4(r17)
 8000824:	197dffcc 	andi	r5,r3,63487
 8000828:	8940030d 	sth	r5,12(r17)
 800082c:	89000015 	stw	r4,0(r17)
 8000830:	18c4000c 	andi	r3,r3,4096
 8000834:	18002c1e 	bne	r3,zero,80008e8 <__sflush_r+0x160>
 8000838:	89400c17 	ldw	r5,48(r17)
 800083c:	9c000015 	stw	r16,0(r19)
 8000840:	28000526 	beq	r5,zero,8000858 <__sflush_r+0xd0>
 8000844:	88801004 	addi	r2,r17,64
 8000848:	28800226 	beq	r5,r2,8000854 <__sflush_r+0xcc>
 800084c:	9809883a 	mov	r4,r19
 8000850:	80012600 	call	8001260 <_free_r>
 8000854:	88000c15 	stw	zero,48(r17)
 8000858:	0005883a 	mov	r2,zero
 800085c:	dfc00417 	ldw	ra,16(sp)
 8000860:	dcc00317 	ldw	r19,12(sp)
 8000864:	dc800217 	ldw	r18,8(sp)
 8000868:	dc400117 	ldw	r17,4(sp)
 800086c:	dc000017 	ldw	r16,0(sp)
 8000870:	dec00504 	addi	sp,sp,20
 8000874:	f800283a 	ret
 8000878:	2c800417 	ldw	r18,16(r5)
 800087c:	903ff626 	beq	r18,zero,8000858 <__alt_data_end+0xf8000858>
 8000880:	2c000017 	ldw	r16,0(r5)
 8000884:	108000cc 	andi	r2,r2,3
 8000888:	2c800015 	stw	r18,0(r5)
 800088c:	84a1c83a 	sub	r16,r16,r18
 8000890:	1000131e 	bne	r2,zero,80008e0 <__sflush_r+0x158>
 8000894:	28800517 	ldw	r2,20(r5)
 8000898:	88800215 	stw	r2,8(r17)
 800089c:	04000316 	blt	zero,r16,80008ac <__sflush_r+0x124>
 80008a0:	003fed06 	br	8000858 <__alt_data_end+0xf8000858>
 80008a4:	90a5883a 	add	r18,r18,r2
 80008a8:	043feb0e 	bge	zero,r16,8000858 <__alt_data_end+0xf8000858>
 80008ac:	88800917 	ldw	r2,36(r17)
 80008b0:	89400717 	ldw	r5,28(r17)
 80008b4:	800f883a 	mov	r7,r16
 80008b8:	900d883a 	mov	r6,r18
 80008bc:	9809883a 	mov	r4,r19
 80008c0:	103ee83a 	callr	r2
 80008c4:	80a1c83a 	sub	r16,r16,r2
 80008c8:	00bff616 	blt	zero,r2,80008a4 <__alt_data_end+0xf80008a4>
 80008cc:	88c0030b 	ldhu	r3,12(r17)
 80008d0:	00bfffc4 	movi	r2,-1
 80008d4:	18c01014 	ori	r3,r3,64
 80008d8:	88c0030d 	sth	r3,12(r17)
 80008dc:	003fdf06 	br	800085c <__alt_data_end+0xf800085c>
 80008e0:	0005883a 	mov	r2,zero
 80008e4:	003fec06 	br	8000898 <__alt_data_end+0xf8000898>
 80008e8:	88801415 	stw	r2,80(r17)
 80008ec:	003fd206 	br	8000838 <__alt_data_end+0xf8000838>
 80008f0:	28c00f17 	ldw	r3,60(r5)
 80008f4:	00ffb316 	blt	zero,r3,80007c4 <__alt_data_end+0xf80007c4>
 80008f8:	003fd706 	br	8000858 <__alt_data_end+0xf8000858>
 80008fc:	89400717 	ldw	r5,28(r17)
 8000900:	000d883a 	mov	r6,zero
 8000904:	01c00044 	movi	r7,1
 8000908:	9809883a 	mov	r4,r19
 800090c:	403ee83a 	callr	r8
 8000910:	100d883a 	mov	r6,r2
 8000914:	00bfffc4 	movi	r2,-1
 8000918:	30801426 	beq	r6,r2,800096c <__sflush_r+0x1e4>
 800091c:	8880030b 	ldhu	r2,12(r17)
 8000920:	8a000a17 	ldw	r8,40(r17)
 8000924:	003fae06 	br	80007e0 <__alt_data_end+0xf80007e0>
 8000928:	98c00017 	ldw	r3,0(r19)
 800092c:	183fba26 	beq	r3,zero,8000818 <__alt_data_end+0xf8000818>
 8000930:	01000744 	movi	r4,29
 8000934:	19000626 	beq	r3,r4,8000950 <__sflush_r+0x1c8>
 8000938:	01000584 	movi	r4,22
 800093c:	19000426 	beq	r3,r4,8000950 <__sflush_r+0x1c8>
 8000940:	88c0030b 	ldhu	r3,12(r17)
 8000944:	18c01014 	ori	r3,r3,64
 8000948:	88c0030d 	sth	r3,12(r17)
 800094c:	003fc306 	br	800085c <__alt_data_end+0xf800085c>
 8000950:	8880030b 	ldhu	r2,12(r17)
 8000954:	88c00417 	ldw	r3,16(r17)
 8000958:	88000115 	stw	zero,4(r17)
 800095c:	10bdffcc 	andi	r2,r2,63487
 8000960:	8880030d 	sth	r2,12(r17)
 8000964:	88c00015 	stw	r3,0(r17)
 8000968:	003fb306 	br	8000838 <__alt_data_end+0xf8000838>
 800096c:	98800017 	ldw	r2,0(r19)
 8000970:	103fea26 	beq	r2,zero,800091c <__alt_data_end+0xf800091c>
 8000974:	00c00744 	movi	r3,29
 8000978:	10c00226 	beq	r2,r3,8000984 <__sflush_r+0x1fc>
 800097c:	00c00584 	movi	r3,22
 8000980:	10c0031e 	bne	r2,r3,8000990 <__sflush_r+0x208>
 8000984:	9c000015 	stw	r16,0(r19)
 8000988:	0005883a 	mov	r2,zero
 800098c:	003fb306 	br	800085c <__alt_data_end+0xf800085c>
 8000990:	88c0030b 	ldhu	r3,12(r17)
 8000994:	3005883a 	mov	r2,r6
 8000998:	18c01014 	ori	r3,r3,64
 800099c:	88c0030d 	sth	r3,12(r17)
 80009a0:	003fae06 	br	800085c <__alt_data_end+0xf800085c>

080009a4 <_fflush_r>:
 80009a4:	defffd04 	addi	sp,sp,-12
 80009a8:	dc000115 	stw	r16,4(sp)
 80009ac:	dfc00215 	stw	ra,8(sp)
 80009b0:	2021883a 	mov	r16,r4
 80009b4:	20000226 	beq	r4,zero,80009c0 <_fflush_r+0x1c>
 80009b8:	20800e17 	ldw	r2,56(r4)
 80009bc:	10000c26 	beq	r2,zero,80009f0 <_fflush_r+0x4c>
 80009c0:	2880030f 	ldh	r2,12(r5)
 80009c4:	1000051e 	bne	r2,zero,80009dc <_fflush_r+0x38>
 80009c8:	0005883a 	mov	r2,zero
 80009cc:	dfc00217 	ldw	ra,8(sp)
 80009d0:	dc000117 	ldw	r16,4(sp)
 80009d4:	dec00304 	addi	sp,sp,12
 80009d8:	f800283a 	ret
 80009dc:	8009883a 	mov	r4,r16
 80009e0:	dfc00217 	ldw	ra,8(sp)
 80009e4:	dc000117 	ldw	r16,4(sp)
 80009e8:	dec00304 	addi	sp,sp,12
 80009ec:	80007881 	jmpi	8000788 <__sflush_r>
 80009f0:	d9400015 	stw	r5,0(sp)
 80009f4:	8000d800 	call	8000d80 <__sinit>
 80009f8:	d9400017 	ldw	r5,0(sp)
 80009fc:	003ff006 	br	80009c0 <__alt_data_end+0xf80009c0>

08000a00 <fflush>:
 8000a00:	20000526 	beq	r4,zero,8000a18 <fflush+0x18>
 8000a04:	00820074 	movhi	r2,2049
 8000a08:	109ecc04 	addi	r2,r2,31536
 8000a0c:	200b883a 	mov	r5,r4
 8000a10:	11000017 	ldw	r4,0(r2)
 8000a14:	80009a41 	jmpi	80009a4 <_fflush_r>
 8000a18:	00820074 	movhi	r2,2049
 8000a1c:	109ecb04 	addi	r2,r2,31532
 8000a20:	11000017 	ldw	r4,0(r2)
 8000a24:	01420034 	movhi	r5,2048
 8000a28:	29426904 	addi	r5,r5,2468
 8000a2c:	8001b101 	jmpi	8001b10 <_fwalk_reent>

08000a30 <__fp_unlock>:
 8000a30:	0005883a 	mov	r2,zero
 8000a34:	f800283a 	ret

08000a38 <_cleanup_r>:
 8000a38:	01420034 	movhi	r5,2048
 8000a3c:	2941a104 	addi	r5,r5,1668
 8000a40:	8001b101 	jmpi	8001b10 <_fwalk_reent>

08000a44 <__sinit.part.1>:
 8000a44:	defff704 	addi	sp,sp,-36
 8000a48:	00c20034 	movhi	r3,2048
 8000a4c:	dfc00815 	stw	ra,32(sp)
 8000a50:	ddc00715 	stw	r23,28(sp)
 8000a54:	dd800615 	stw	r22,24(sp)
 8000a58:	dd400515 	stw	r21,20(sp)
 8000a5c:	dd000415 	stw	r20,16(sp)
 8000a60:	dcc00315 	stw	r19,12(sp)
 8000a64:	dc800215 	stw	r18,8(sp)
 8000a68:	dc400115 	stw	r17,4(sp)
 8000a6c:	dc000015 	stw	r16,0(sp)
 8000a70:	18c28e04 	addi	r3,r3,2616
 8000a74:	24000117 	ldw	r16,4(r4)
 8000a78:	20c00f15 	stw	r3,60(r4)
 8000a7c:	2080bb04 	addi	r2,r4,748
 8000a80:	00c000c4 	movi	r3,3
 8000a84:	20c0b915 	stw	r3,740(r4)
 8000a88:	2080ba15 	stw	r2,744(r4)
 8000a8c:	2000b815 	stw	zero,736(r4)
 8000a90:	05c00204 	movi	r23,8
 8000a94:	00800104 	movi	r2,4
 8000a98:	2025883a 	mov	r18,r4
 8000a9c:	b80d883a 	mov	r6,r23
 8000aa0:	81001704 	addi	r4,r16,92
 8000aa4:	000b883a 	mov	r5,zero
 8000aa8:	80000015 	stw	zero,0(r16)
 8000aac:	80000115 	stw	zero,4(r16)
 8000ab0:	80000215 	stw	zero,8(r16)
 8000ab4:	8080030d 	sth	r2,12(r16)
 8000ab8:	80001915 	stw	zero,100(r16)
 8000abc:	8000038d 	sth	zero,14(r16)
 8000ac0:	80000415 	stw	zero,16(r16)
 8000ac4:	80000515 	stw	zero,20(r16)
 8000ac8:	80000615 	stw	zero,24(r16)
 8000acc:	80026e40 	call	80026e4 <memset>
 8000ad0:	05820034 	movhi	r22,2048
 8000ad4:	94400217 	ldw	r17,8(r18)
 8000ad8:	05420034 	movhi	r21,2048
 8000adc:	05020034 	movhi	r20,2048
 8000ae0:	04c20034 	movhi	r19,2048
 8000ae4:	b58b2904 	addi	r22,r22,11428
 8000ae8:	ad4b4004 	addi	r21,r21,11520
 8000aec:	a50b5f04 	addi	r20,r20,11644
 8000af0:	9ccb7604 	addi	r19,r19,11736
 8000af4:	85800815 	stw	r22,32(r16)
 8000af8:	85400915 	stw	r21,36(r16)
 8000afc:	85000a15 	stw	r20,40(r16)
 8000b00:	84c00b15 	stw	r19,44(r16)
 8000b04:	84000715 	stw	r16,28(r16)
 8000b08:	00800284 	movi	r2,10
 8000b0c:	8880030d 	sth	r2,12(r17)
 8000b10:	00800044 	movi	r2,1
 8000b14:	b80d883a 	mov	r6,r23
 8000b18:	89001704 	addi	r4,r17,92
 8000b1c:	000b883a 	mov	r5,zero
 8000b20:	88000015 	stw	zero,0(r17)
 8000b24:	88000115 	stw	zero,4(r17)
 8000b28:	88000215 	stw	zero,8(r17)
 8000b2c:	88001915 	stw	zero,100(r17)
 8000b30:	8880038d 	sth	r2,14(r17)
 8000b34:	88000415 	stw	zero,16(r17)
 8000b38:	88000515 	stw	zero,20(r17)
 8000b3c:	88000615 	stw	zero,24(r17)
 8000b40:	80026e40 	call	80026e4 <memset>
 8000b44:	94000317 	ldw	r16,12(r18)
 8000b48:	00800484 	movi	r2,18
 8000b4c:	8c400715 	stw	r17,28(r17)
 8000b50:	8d800815 	stw	r22,32(r17)
 8000b54:	8d400915 	stw	r21,36(r17)
 8000b58:	8d000a15 	stw	r20,40(r17)
 8000b5c:	8cc00b15 	stw	r19,44(r17)
 8000b60:	8080030d 	sth	r2,12(r16)
 8000b64:	00800084 	movi	r2,2
 8000b68:	80000015 	stw	zero,0(r16)
 8000b6c:	80000115 	stw	zero,4(r16)
 8000b70:	80000215 	stw	zero,8(r16)
 8000b74:	80001915 	stw	zero,100(r16)
 8000b78:	8080038d 	sth	r2,14(r16)
 8000b7c:	80000415 	stw	zero,16(r16)
 8000b80:	80000515 	stw	zero,20(r16)
 8000b84:	80000615 	stw	zero,24(r16)
 8000b88:	b80d883a 	mov	r6,r23
 8000b8c:	000b883a 	mov	r5,zero
 8000b90:	81001704 	addi	r4,r16,92
 8000b94:	80026e40 	call	80026e4 <memset>
 8000b98:	00800044 	movi	r2,1
 8000b9c:	84000715 	stw	r16,28(r16)
 8000ba0:	85800815 	stw	r22,32(r16)
 8000ba4:	85400915 	stw	r21,36(r16)
 8000ba8:	85000a15 	stw	r20,40(r16)
 8000bac:	84c00b15 	stw	r19,44(r16)
 8000bb0:	90800e15 	stw	r2,56(r18)
 8000bb4:	dfc00817 	ldw	ra,32(sp)
 8000bb8:	ddc00717 	ldw	r23,28(sp)
 8000bbc:	dd800617 	ldw	r22,24(sp)
 8000bc0:	dd400517 	ldw	r21,20(sp)
 8000bc4:	dd000417 	ldw	r20,16(sp)
 8000bc8:	dcc00317 	ldw	r19,12(sp)
 8000bcc:	dc800217 	ldw	r18,8(sp)
 8000bd0:	dc400117 	ldw	r17,4(sp)
 8000bd4:	dc000017 	ldw	r16,0(sp)
 8000bd8:	dec00904 	addi	sp,sp,36
 8000bdc:	f800283a 	ret

08000be0 <__fp_lock>:
 8000be0:	0005883a 	mov	r2,zero
 8000be4:	f800283a 	ret

08000be8 <__sfmoreglue>:
 8000be8:	defffc04 	addi	sp,sp,-16
 8000bec:	dc400115 	stw	r17,4(sp)
 8000bf0:	2c7fffc4 	addi	r17,r5,-1
 8000bf4:	8c401a24 	muli	r17,r17,104
 8000bf8:	dc800215 	stw	r18,8(sp)
 8000bfc:	2825883a 	mov	r18,r5
 8000c00:	89401d04 	addi	r5,r17,116
 8000c04:	dc000015 	stw	r16,0(sp)
 8000c08:	dfc00315 	stw	ra,12(sp)
 8000c0c:	8001d900 	call	8001d90 <_malloc_r>
 8000c10:	1021883a 	mov	r16,r2
 8000c14:	10000726 	beq	r2,zero,8000c34 <__sfmoreglue+0x4c>
 8000c18:	11000304 	addi	r4,r2,12
 8000c1c:	10000015 	stw	zero,0(r2)
 8000c20:	14800115 	stw	r18,4(r2)
 8000c24:	11000215 	stw	r4,8(r2)
 8000c28:	89801a04 	addi	r6,r17,104
 8000c2c:	000b883a 	mov	r5,zero
 8000c30:	80026e40 	call	80026e4 <memset>
 8000c34:	8005883a 	mov	r2,r16
 8000c38:	dfc00317 	ldw	ra,12(sp)
 8000c3c:	dc800217 	ldw	r18,8(sp)
 8000c40:	dc400117 	ldw	r17,4(sp)
 8000c44:	dc000017 	ldw	r16,0(sp)
 8000c48:	dec00404 	addi	sp,sp,16
 8000c4c:	f800283a 	ret

08000c50 <__sfp>:
 8000c50:	defffb04 	addi	sp,sp,-20
 8000c54:	dc000015 	stw	r16,0(sp)
 8000c58:	04020074 	movhi	r16,2049
 8000c5c:	841ecb04 	addi	r16,r16,31532
 8000c60:	dcc00315 	stw	r19,12(sp)
 8000c64:	2027883a 	mov	r19,r4
 8000c68:	81000017 	ldw	r4,0(r16)
 8000c6c:	dfc00415 	stw	ra,16(sp)
 8000c70:	dc800215 	stw	r18,8(sp)
 8000c74:	20800e17 	ldw	r2,56(r4)
 8000c78:	dc400115 	stw	r17,4(sp)
 8000c7c:	1000021e 	bne	r2,zero,8000c88 <__sfp+0x38>
 8000c80:	8000a440 	call	8000a44 <__sinit.part.1>
 8000c84:	81000017 	ldw	r4,0(r16)
 8000c88:	2480b804 	addi	r18,r4,736
 8000c8c:	047fffc4 	movi	r17,-1
 8000c90:	91000117 	ldw	r4,4(r18)
 8000c94:	94000217 	ldw	r16,8(r18)
 8000c98:	213fffc4 	addi	r4,r4,-1
 8000c9c:	20000a16 	blt	r4,zero,8000cc8 <__sfp+0x78>
 8000ca0:	8080030f 	ldh	r2,12(r16)
 8000ca4:	10000c26 	beq	r2,zero,8000cd8 <__sfp+0x88>
 8000ca8:	80c01d04 	addi	r3,r16,116
 8000cac:	00000206 	br	8000cb8 <__sfp+0x68>
 8000cb0:	18bfe60f 	ldh	r2,-104(r3)
 8000cb4:	10000826 	beq	r2,zero,8000cd8 <__sfp+0x88>
 8000cb8:	213fffc4 	addi	r4,r4,-1
 8000cbc:	1c3ffd04 	addi	r16,r3,-12
 8000cc0:	18c01a04 	addi	r3,r3,104
 8000cc4:	247ffa1e 	bne	r4,r17,8000cb0 <__alt_data_end+0xf8000cb0>
 8000cc8:	90800017 	ldw	r2,0(r18)
 8000ccc:	10001d26 	beq	r2,zero,8000d44 <__sfp+0xf4>
 8000cd0:	1025883a 	mov	r18,r2
 8000cd4:	003fee06 	br	8000c90 <__alt_data_end+0xf8000c90>
 8000cd8:	00bfffc4 	movi	r2,-1
 8000cdc:	8080038d 	sth	r2,14(r16)
 8000ce0:	00800044 	movi	r2,1
 8000ce4:	8080030d 	sth	r2,12(r16)
 8000ce8:	80001915 	stw	zero,100(r16)
 8000cec:	80000015 	stw	zero,0(r16)
 8000cf0:	80000215 	stw	zero,8(r16)
 8000cf4:	80000115 	stw	zero,4(r16)
 8000cf8:	80000415 	stw	zero,16(r16)
 8000cfc:	80000515 	stw	zero,20(r16)
 8000d00:	80000615 	stw	zero,24(r16)
 8000d04:	01800204 	movi	r6,8
 8000d08:	000b883a 	mov	r5,zero
 8000d0c:	81001704 	addi	r4,r16,92
 8000d10:	80026e40 	call	80026e4 <memset>
 8000d14:	8005883a 	mov	r2,r16
 8000d18:	80000c15 	stw	zero,48(r16)
 8000d1c:	80000d15 	stw	zero,52(r16)
 8000d20:	80001115 	stw	zero,68(r16)
 8000d24:	80001215 	stw	zero,72(r16)
 8000d28:	dfc00417 	ldw	ra,16(sp)
 8000d2c:	dcc00317 	ldw	r19,12(sp)
 8000d30:	dc800217 	ldw	r18,8(sp)
 8000d34:	dc400117 	ldw	r17,4(sp)
 8000d38:	dc000017 	ldw	r16,0(sp)
 8000d3c:	dec00504 	addi	sp,sp,20
 8000d40:	f800283a 	ret
 8000d44:	01400104 	movi	r5,4
 8000d48:	9809883a 	mov	r4,r19
 8000d4c:	8000be80 	call	8000be8 <__sfmoreglue>
 8000d50:	90800015 	stw	r2,0(r18)
 8000d54:	103fde1e 	bne	r2,zero,8000cd0 <__alt_data_end+0xf8000cd0>
 8000d58:	00800304 	movi	r2,12
 8000d5c:	98800015 	stw	r2,0(r19)
 8000d60:	0005883a 	mov	r2,zero
 8000d64:	003ff006 	br	8000d28 <__alt_data_end+0xf8000d28>

08000d68 <_cleanup>:
 8000d68:	00820074 	movhi	r2,2049
 8000d6c:	109ecb04 	addi	r2,r2,31532
 8000d70:	11000017 	ldw	r4,0(r2)
 8000d74:	01420034 	movhi	r5,2048
 8000d78:	2941a104 	addi	r5,r5,1668
 8000d7c:	8001b101 	jmpi	8001b10 <_fwalk_reent>

08000d80 <__sinit>:
 8000d80:	20800e17 	ldw	r2,56(r4)
 8000d84:	10000126 	beq	r2,zero,8000d8c <__sinit+0xc>
 8000d88:	f800283a 	ret
 8000d8c:	8000a441 	jmpi	8000a44 <__sinit.part.1>

08000d90 <__sfp_lock_acquire>:
 8000d90:	f800283a 	ret

08000d94 <__sfp_lock_release>:
 8000d94:	f800283a 	ret

08000d98 <__sinit_lock_acquire>:
 8000d98:	f800283a 	ret

08000d9c <__sinit_lock_release>:
 8000d9c:	f800283a 	ret

08000da0 <__fp_lock_all>:
 8000da0:	00820074 	movhi	r2,2049
 8000da4:	109ecc04 	addi	r2,r2,31536
 8000da8:	11000017 	ldw	r4,0(r2)
 8000dac:	01420034 	movhi	r5,2048
 8000db0:	2942f804 	addi	r5,r5,3040
 8000db4:	8001a4c1 	jmpi	8001a4c <_fwalk>

08000db8 <__fp_unlock_all>:
 8000db8:	00820074 	movhi	r2,2049
 8000dbc:	109ecc04 	addi	r2,r2,31536
 8000dc0:	11000017 	ldw	r4,0(r2)
 8000dc4:	01420034 	movhi	r5,2048
 8000dc8:	29428c04 	addi	r5,r5,2608
 8000dcc:	8001a4c1 	jmpi	8001a4c <_fwalk>

08000dd0 <_fopen_r>:
 8000dd0:	defffa04 	addi	sp,sp,-24
 8000dd4:	3005883a 	mov	r2,r6
 8000dd8:	dcc00415 	stw	r19,16(sp)
 8000ddc:	d80d883a 	mov	r6,sp
 8000de0:	2827883a 	mov	r19,r5
 8000de4:	100b883a 	mov	r5,r2
 8000de8:	dc800315 	stw	r18,12(sp)
 8000dec:	dfc00515 	stw	ra,20(sp)
 8000df0:	dc400215 	stw	r17,8(sp)
 8000df4:	dc000115 	stw	r16,4(sp)
 8000df8:	2025883a 	mov	r18,r4
 8000dfc:	80072580 	call	8007258 <__sflags>
 8000e00:	10002726 	beq	r2,zero,8000ea0 <_fopen_r+0xd0>
 8000e04:	9009883a 	mov	r4,r18
 8000e08:	1023883a 	mov	r17,r2
 8000e0c:	8000c500 	call	8000c50 <__sfp>
 8000e10:	1021883a 	mov	r16,r2
 8000e14:	10002226 	beq	r2,zero,8000ea0 <_fopen_r+0xd0>
 8000e18:	d9800017 	ldw	r6,0(sp)
 8000e1c:	01c06d84 	movi	r7,438
 8000e20:	980b883a 	mov	r5,r19
 8000e24:	9009883a 	mov	r4,r18
 8000e28:	800280c0 	call	800280c <_open_r>
 8000e2c:	10001916 	blt	r2,zero,8000e94 <_fopen_r+0xc4>
 8000e30:	8080038d 	sth	r2,14(r16)
 8000e34:	00820034 	movhi	r2,2048
 8000e38:	108b2904 	addi	r2,r2,11428
 8000e3c:	80800815 	stw	r2,32(r16)
 8000e40:	00820034 	movhi	r2,2048
 8000e44:	108b4004 	addi	r2,r2,11520
 8000e48:	80800915 	stw	r2,36(r16)
 8000e4c:	00820034 	movhi	r2,2048
 8000e50:	108b5f04 	addi	r2,r2,11644
 8000e54:	80800a15 	stw	r2,40(r16)
 8000e58:	00820034 	movhi	r2,2048
 8000e5c:	108b7604 	addi	r2,r2,11736
 8000e60:	8440030d 	sth	r17,12(r16)
 8000e64:	84000715 	stw	r16,28(r16)
 8000e68:	80800b15 	stw	r2,44(r16)
 8000e6c:	8c40400c 	andi	r17,r17,256
 8000e70:	88000d1e 	bne	r17,zero,8000ea8 <_fopen_r+0xd8>
 8000e74:	8005883a 	mov	r2,r16
 8000e78:	dfc00517 	ldw	ra,20(sp)
 8000e7c:	dcc00417 	ldw	r19,16(sp)
 8000e80:	dc800317 	ldw	r18,12(sp)
 8000e84:	dc400217 	ldw	r17,8(sp)
 8000e88:	dc000117 	ldw	r16,4(sp)
 8000e8c:	dec00604 	addi	sp,sp,24
 8000e90:	f800283a 	ret
 8000e94:	8000d900 	call	8000d90 <__sfp_lock_acquire>
 8000e98:	8000030d 	sth	zero,12(r16)
 8000e9c:	8000d940 	call	8000d94 <__sfp_lock_release>
 8000ea0:	0005883a 	mov	r2,zero
 8000ea4:	003ff406 	br	8000e78 <__alt_data_end+0xf8000e78>
 8000ea8:	01c00084 	movi	r7,2
 8000eac:	000d883a 	mov	r6,zero
 8000eb0:	800b883a 	mov	r5,r16
 8000eb4:	9009883a 	mov	r4,r18
 8000eb8:	80015700 	call	8001570 <_fseek_r>
 8000ebc:	8005883a 	mov	r2,r16
 8000ec0:	003fed06 	br	8000e78 <__alt_data_end+0xf8000e78>

08000ec4 <fopen>:
 8000ec4:	00820074 	movhi	r2,2049
 8000ec8:	109ecc04 	addi	r2,r2,31536
 8000ecc:	280d883a 	mov	r6,r5
 8000ed0:	200b883a 	mov	r5,r4
 8000ed4:	11000017 	ldw	r4,0(r2)
 8000ed8:	8000dd01 	jmpi	8000dd0 <_fopen_r>

08000edc <_fread_r>:
 8000edc:	defff404 	addi	sp,sp,-48
 8000ee0:	dd800815 	stw	r22,32(sp)
 8000ee4:	39ad383a 	mul	r22,r7,r6
 8000ee8:	dc000215 	stw	r16,8(sp)
 8000eec:	dfc00b15 	stw	ra,44(sp)
 8000ef0:	df000a15 	stw	fp,40(sp)
 8000ef4:	ddc00915 	stw	r23,36(sp)
 8000ef8:	dd400715 	stw	r21,28(sp)
 8000efc:	dd000615 	stw	r20,24(sp)
 8000f00:	dcc00515 	stw	r19,20(sp)
 8000f04:	dc800415 	stw	r18,16(sp)
 8000f08:	dc400315 	stw	r17,12(sp)
 8000f0c:	dc000c17 	ldw	r16,48(sp)
 8000f10:	b0003b26 	beq	r22,zero,8001000 <_fread_r+0x124>
 8000f14:	302f883a 	mov	r23,r6
 8000f18:	382b883a 	mov	r21,r7
 8000f1c:	2029883a 	mov	r20,r4
 8000f20:	2827883a 	mov	r19,r5
 8000f24:	20000226 	beq	r4,zero,8000f30 <_fread_r+0x54>
 8000f28:	20800e17 	ldw	r2,56(r4)
 8000f2c:	10006e26 	beq	r2,zero,80010e8 <_fread_r+0x20c>
 8000f30:	8080030b 	ldhu	r2,12(r16)
 8000f34:	10c8000c 	andi	r3,r2,8192
 8000f38:	1800061e 	bne	r3,zero,8000f54 <_fread_r+0x78>
 8000f3c:	81001917 	ldw	r4,100(r16)
 8000f40:	00f7ffc4 	movi	r3,-8193
 8000f44:	10880014 	ori	r2,r2,8192
 8000f48:	20c6703a 	and	r3,r4,r3
 8000f4c:	8080030d 	sth	r2,12(r16)
 8000f50:	80c01915 	stw	r3,100(r16)
 8000f54:	84400117 	ldw	r17,4(r16)
 8000f58:	88005f16 	blt	r17,zero,80010d8 <_fread_r+0x1fc>
 8000f5c:	8809883a 	mov	r4,r17
 8000f60:	1080008c 	andi	r2,r2,2
 8000f64:	1000281e 	bne	r2,zero,8001008 <_fread_r+0x12c>
 8000f68:	b025883a 	mov	r18,r22
 8000f6c:	00000b06 	br	8000f9c <_fread_r+0xc0>
 8000f70:	800259c0 	call	800259c <memcpy>
 8000f74:	80800017 	ldw	r2,0(r16)
 8000f78:	9c67883a 	add	r19,r19,r17
 8000f7c:	9465c83a 	sub	r18,r18,r17
 8000f80:	1463883a 	add	r17,r2,r17
 8000f84:	800b883a 	mov	r5,r16
 8000f88:	a009883a 	mov	r4,r20
 8000f8c:	84400015 	stw	r17,0(r16)
 8000f90:	8002a7c0 	call	8002a7c <__srefill_r>
 8000f94:	10004c1e 	bne	r2,zero,80010c8 <_fread_r+0x1ec>
 8000f98:	84400117 	ldw	r17,4(r16)
 8000f9c:	880d883a 	mov	r6,r17
 8000fa0:	9809883a 	mov	r4,r19
 8000fa4:	81400017 	ldw	r5,0(r16)
 8000fa8:	8cbff136 	bltu	r17,r18,8000f70 <__alt_data_end+0xf8000f70>
 8000fac:	900d883a 	mov	r6,r18
 8000fb0:	800259c0 	call	800259c <memcpy>
 8000fb4:	80c00117 	ldw	r3,4(r16)
 8000fb8:	81000017 	ldw	r4,0(r16)
 8000fbc:	a805883a 	mov	r2,r21
 8000fc0:	1c87c83a 	sub	r3,r3,r18
 8000fc4:	24a5883a 	add	r18,r4,r18
 8000fc8:	80c00115 	stw	r3,4(r16)
 8000fcc:	84800015 	stw	r18,0(r16)
 8000fd0:	dfc00b17 	ldw	ra,44(sp)
 8000fd4:	df000a17 	ldw	fp,40(sp)
 8000fd8:	ddc00917 	ldw	r23,36(sp)
 8000fdc:	dd800817 	ldw	r22,32(sp)
 8000fe0:	dd400717 	ldw	r21,28(sp)
 8000fe4:	dd000617 	ldw	r20,24(sp)
 8000fe8:	dcc00517 	ldw	r19,20(sp)
 8000fec:	dc800417 	ldw	r18,16(sp)
 8000ff0:	dc400317 	ldw	r17,12(sp)
 8000ff4:	dc000217 	ldw	r16,8(sp)
 8000ff8:	dec00c04 	addi	sp,sp,48
 8000ffc:	f800283a 	ret
 8001000:	0005883a 	mov	r2,zero
 8001004:	003ff206 	br	8000fd0 <__alt_data_end+0xf8000fd0>
 8001008:	b007883a 	mov	r3,r22
 800100c:	2580012e 	bgeu	r4,r22,8001014 <_fread_r+0x138>
 8001010:	2007883a 	mov	r3,r4
 8001014:	81400017 	ldw	r5,0(r16)
 8001018:	180d883a 	mov	r6,r3
 800101c:	9809883a 	mov	r4,r19
 8001020:	d8c00115 	stw	r3,4(sp)
 8001024:	800259c0 	call	800259c <memcpy>
 8001028:	d8c00117 	ldw	r3,4(sp)
 800102c:	84400017 	ldw	r17,0(r16)
 8001030:	80800117 	ldw	r2,4(r16)
 8001034:	81400c17 	ldw	r5,48(r16)
 8001038:	88e3883a 	add	r17,r17,r3
 800103c:	10c5c83a 	sub	r2,r2,r3
 8001040:	84400015 	stw	r17,0(r16)
 8001044:	80800115 	stw	r2,4(r16)
 8001048:	b0e5c83a 	sub	r18,r22,r3
 800104c:	28002b26 	beq	r5,zero,80010fc <_fread_r+0x220>
 8001050:	90002b26 	beq	r18,zero,8001100 <_fread_r+0x224>
 8001054:	80801004 	addi	r2,r16,64
 8001058:	28800526 	beq	r5,r2,8001070 <_fread_r+0x194>
 800105c:	a009883a 	mov	r4,r20
 8001060:	d8c00115 	stw	r3,4(sp)
 8001064:	80012600 	call	8001260 <_free_r>
 8001068:	d8c00117 	ldw	r3,4(sp)
 800106c:	84400017 	ldw	r17,0(r16)
 8001070:	80000c15 	stw	zero,48(r16)
 8001074:	80800517 	ldw	r2,20(r16)
 8001078:	87000417 	ldw	fp,16(r16)
 800107c:	98e7883a 	add	r19,r19,r3
 8001080:	d8800015 	stw	r2,0(sp)
 8001084:	00000106 	br	800108c <_fread_r+0x1b0>
 8001088:	90001d26 	beq	r18,zero,8001100 <_fread_r+0x224>
 800108c:	84c00415 	stw	r19,16(r16)
 8001090:	84800515 	stw	r18,20(r16)
 8001094:	84c00015 	stw	r19,0(r16)
 8001098:	a009883a 	mov	r4,r20
 800109c:	800b883a 	mov	r5,r16
 80010a0:	8002a7c0 	call	8002a7c <__srefill_r>
 80010a4:	d9000017 	ldw	r4,0(sp)
 80010a8:	80c00117 	ldw	r3,4(r16)
 80010ac:	87000415 	stw	fp,16(r16)
 80010b0:	81000515 	stw	r4,20(r16)
 80010b4:	84400015 	stw	r17,0(r16)
 80010b8:	80000115 	stw	zero,4(r16)
 80010bc:	90e5c83a 	sub	r18,r18,r3
 80010c0:	98e7883a 	add	r19,r19,r3
 80010c4:	103ff026 	beq	r2,zero,8001088 <__alt_data_end+0xf8001088>
 80010c8:	b80b883a 	mov	r5,r23
 80010cc:	b489c83a 	sub	r4,r22,r18
 80010d0:	800bd580 	call	800bd58 <__udivsi3>
 80010d4:	003fbe06 	br	8000fd0 <__alt_data_end+0xf8000fd0>
 80010d8:	80000115 	stw	zero,4(r16)
 80010dc:	0009883a 	mov	r4,zero
 80010e0:	0023883a 	mov	r17,zero
 80010e4:	003f9e06 	br	8000f60 <__alt_data_end+0xf8000f60>
 80010e8:	8000d800 	call	8000d80 <__sinit>
 80010ec:	8080030b 	ldhu	r2,12(r16)
 80010f0:	10c8000c 	andi	r3,r2,8192
 80010f4:	183f971e 	bne	r3,zero,8000f54 <__alt_data_end+0xf8000f54>
 80010f8:	003f9006 	br	8000f3c <__alt_data_end+0xf8000f3c>
 80010fc:	903fdd1e 	bne	r18,zero,8001074 <__alt_data_end+0xf8001074>
 8001100:	a805883a 	mov	r2,r21
 8001104:	003fb206 	br	8000fd0 <__alt_data_end+0xf8000fd0>

08001108 <fread>:
 8001108:	defffe04 	addi	sp,sp,-8
 800110c:	00820074 	movhi	r2,2049
 8001110:	d9c00015 	stw	r7,0(sp)
 8001114:	109ecc04 	addi	r2,r2,31536
 8001118:	300f883a 	mov	r7,r6
 800111c:	280d883a 	mov	r6,r5
 8001120:	200b883a 	mov	r5,r4
 8001124:	11000017 	ldw	r4,0(r2)
 8001128:	dfc00115 	stw	ra,4(sp)
 800112c:	8000edc0 	call	8000edc <_fread_r>
 8001130:	dfc00117 	ldw	ra,4(sp)
 8001134:	dec00204 	addi	sp,sp,8
 8001138:	f800283a 	ret

0800113c <_malloc_trim_r>:
 800113c:	defffb04 	addi	sp,sp,-20
 8001140:	dcc00315 	stw	r19,12(sp)
 8001144:	04c20074 	movhi	r19,2049
 8001148:	dc800215 	stw	r18,8(sp)
 800114c:	dc400115 	stw	r17,4(sp)
 8001150:	dc000015 	stw	r16,0(sp)
 8001154:	dfc00415 	stw	ra,16(sp)
 8001158:	2821883a 	mov	r16,r5
 800115c:	9cd91304 	addi	r19,r19,25676
 8001160:	2025883a 	mov	r18,r4
 8001164:	800e9f80 	call	800e9f8 <__malloc_lock>
 8001168:	98800217 	ldw	r2,8(r19)
 800116c:	14400117 	ldw	r17,4(r2)
 8001170:	00bfff04 	movi	r2,-4
 8001174:	88a2703a 	and	r17,r17,r2
 8001178:	8c21c83a 	sub	r16,r17,r16
 800117c:	8403fbc4 	addi	r16,r16,4079
 8001180:	8020d33a 	srli	r16,r16,12
 8001184:	0083ffc4 	movi	r2,4095
 8001188:	843fffc4 	addi	r16,r16,-1
 800118c:	8020933a 	slli	r16,r16,12
 8001190:	1400060e 	bge	r2,r16,80011ac <_malloc_trim_r+0x70>
 8001194:	000b883a 	mov	r5,zero
 8001198:	9009883a 	mov	r4,r18
 800119c:	8002c500 	call	8002c50 <_sbrk_r>
 80011a0:	98c00217 	ldw	r3,8(r19)
 80011a4:	1c47883a 	add	r3,r3,r17
 80011a8:	10c00a26 	beq	r2,r3,80011d4 <_malloc_trim_r+0x98>
 80011ac:	9009883a 	mov	r4,r18
 80011b0:	800ea1c0 	call	800ea1c <__malloc_unlock>
 80011b4:	0005883a 	mov	r2,zero
 80011b8:	dfc00417 	ldw	ra,16(sp)
 80011bc:	dcc00317 	ldw	r19,12(sp)
 80011c0:	dc800217 	ldw	r18,8(sp)
 80011c4:	dc400117 	ldw	r17,4(sp)
 80011c8:	dc000017 	ldw	r16,0(sp)
 80011cc:	dec00504 	addi	sp,sp,20
 80011d0:	f800283a 	ret
 80011d4:	040bc83a 	sub	r5,zero,r16
 80011d8:	9009883a 	mov	r4,r18
 80011dc:	8002c500 	call	8002c50 <_sbrk_r>
 80011e0:	00ffffc4 	movi	r3,-1
 80011e4:	10c00d26 	beq	r2,r3,800121c <_malloc_trim_r+0xe0>
 80011e8:	00c200b4 	movhi	r3,2050
 80011ec:	18e5c804 	addi	r3,r3,-26848
 80011f0:	18800017 	ldw	r2,0(r3)
 80011f4:	99000217 	ldw	r4,8(r19)
 80011f8:	8c23c83a 	sub	r17,r17,r16
 80011fc:	8c400054 	ori	r17,r17,1
 8001200:	1421c83a 	sub	r16,r2,r16
 8001204:	24400115 	stw	r17,4(r4)
 8001208:	9009883a 	mov	r4,r18
 800120c:	1c000015 	stw	r16,0(r3)
 8001210:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8001214:	00800044 	movi	r2,1
 8001218:	003fe706 	br	80011b8 <__alt_data_end+0xf80011b8>
 800121c:	000b883a 	mov	r5,zero
 8001220:	9009883a 	mov	r4,r18
 8001224:	8002c500 	call	8002c50 <_sbrk_r>
 8001228:	99000217 	ldw	r4,8(r19)
 800122c:	014003c4 	movi	r5,15
 8001230:	1107c83a 	sub	r3,r2,r4
 8001234:	28ffdd0e 	bge	r5,r3,80011ac <__alt_data_end+0xf80011ac>
 8001238:	01420074 	movhi	r5,2049
 800123c:	295ecd04 	addi	r5,r5,31540
 8001240:	29400017 	ldw	r5,0(r5)
 8001244:	18c00054 	ori	r3,r3,1
 8001248:	20c00115 	stw	r3,4(r4)
 800124c:	00c200b4 	movhi	r3,2050
 8001250:	1145c83a 	sub	r2,r2,r5
 8001254:	18e5c804 	addi	r3,r3,-26848
 8001258:	18800015 	stw	r2,0(r3)
 800125c:	003fd306 	br	80011ac <__alt_data_end+0xf80011ac>

08001260 <_free_r>:
 8001260:	28004126 	beq	r5,zero,8001368 <_free_r+0x108>
 8001264:	defffd04 	addi	sp,sp,-12
 8001268:	dc400115 	stw	r17,4(sp)
 800126c:	dc000015 	stw	r16,0(sp)
 8001270:	2023883a 	mov	r17,r4
 8001274:	2821883a 	mov	r16,r5
 8001278:	dfc00215 	stw	ra,8(sp)
 800127c:	800e9f80 	call	800e9f8 <__malloc_lock>
 8001280:	81ffff17 	ldw	r7,-4(r16)
 8001284:	00bfff84 	movi	r2,-2
 8001288:	01020074 	movhi	r4,2049
 800128c:	81bffe04 	addi	r6,r16,-8
 8001290:	3884703a 	and	r2,r7,r2
 8001294:	21191304 	addi	r4,r4,25676
 8001298:	308b883a 	add	r5,r6,r2
 800129c:	2a400117 	ldw	r9,4(r5)
 80012a0:	22000217 	ldw	r8,8(r4)
 80012a4:	00ffff04 	movi	r3,-4
 80012a8:	48c6703a 	and	r3,r9,r3
 80012ac:	2a005726 	beq	r5,r8,800140c <_free_r+0x1ac>
 80012b0:	28c00115 	stw	r3,4(r5)
 80012b4:	39c0004c 	andi	r7,r7,1
 80012b8:	3800091e 	bne	r7,zero,80012e0 <_free_r+0x80>
 80012bc:	823ffe17 	ldw	r8,-8(r16)
 80012c0:	22400204 	addi	r9,r4,8
 80012c4:	320dc83a 	sub	r6,r6,r8
 80012c8:	31c00217 	ldw	r7,8(r6)
 80012cc:	1205883a 	add	r2,r2,r8
 80012d0:	3a406526 	beq	r7,r9,8001468 <_free_r+0x208>
 80012d4:	32000317 	ldw	r8,12(r6)
 80012d8:	3a000315 	stw	r8,12(r7)
 80012dc:	41c00215 	stw	r7,8(r8)
 80012e0:	28cf883a 	add	r7,r5,r3
 80012e4:	39c00117 	ldw	r7,4(r7)
 80012e8:	39c0004c 	andi	r7,r7,1
 80012ec:	38003a26 	beq	r7,zero,80013d8 <_free_r+0x178>
 80012f0:	10c00054 	ori	r3,r2,1
 80012f4:	30c00115 	stw	r3,4(r6)
 80012f8:	3087883a 	add	r3,r6,r2
 80012fc:	18800015 	stw	r2,0(r3)
 8001300:	00c07fc4 	movi	r3,511
 8001304:	18801936 	bltu	r3,r2,800136c <_free_r+0x10c>
 8001308:	1004d0fa 	srli	r2,r2,3
 800130c:	01c00044 	movi	r7,1
 8001310:	21400117 	ldw	r5,4(r4)
 8001314:	10c00044 	addi	r3,r2,1
 8001318:	18c7883a 	add	r3,r3,r3
 800131c:	1005d0ba 	srai	r2,r2,2
 8001320:	18c7883a 	add	r3,r3,r3
 8001324:	18c7883a 	add	r3,r3,r3
 8001328:	1907883a 	add	r3,r3,r4
 800132c:	3884983a 	sll	r2,r7,r2
 8001330:	19c00017 	ldw	r7,0(r3)
 8001334:	1a3ffe04 	addi	r8,r3,-8
 8001338:	1144b03a 	or	r2,r2,r5
 800133c:	32000315 	stw	r8,12(r6)
 8001340:	31c00215 	stw	r7,8(r6)
 8001344:	20800115 	stw	r2,4(r4)
 8001348:	19800015 	stw	r6,0(r3)
 800134c:	39800315 	stw	r6,12(r7)
 8001350:	8809883a 	mov	r4,r17
 8001354:	dfc00217 	ldw	ra,8(sp)
 8001358:	dc400117 	ldw	r17,4(sp)
 800135c:	dc000017 	ldw	r16,0(sp)
 8001360:	dec00304 	addi	sp,sp,12
 8001364:	800ea1c1 	jmpi	800ea1c <__malloc_unlock>
 8001368:	f800283a 	ret
 800136c:	100ad27a 	srli	r5,r2,9
 8001370:	00c00104 	movi	r3,4
 8001374:	19404a36 	bltu	r3,r5,80014a0 <_free_r+0x240>
 8001378:	100ad1ba 	srli	r5,r2,6
 800137c:	28c00e44 	addi	r3,r5,57
 8001380:	18c7883a 	add	r3,r3,r3
 8001384:	29400e04 	addi	r5,r5,56
 8001388:	18c7883a 	add	r3,r3,r3
 800138c:	18c7883a 	add	r3,r3,r3
 8001390:	1909883a 	add	r4,r3,r4
 8001394:	20c00017 	ldw	r3,0(r4)
 8001398:	01c20074 	movhi	r7,2049
 800139c:	213ffe04 	addi	r4,r4,-8
 80013a0:	39d91304 	addi	r7,r7,25676
 80013a4:	20c04426 	beq	r4,r3,80014b8 <_free_r+0x258>
 80013a8:	01ffff04 	movi	r7,-4
 80013ac:	19400117 	ldw	r5,4(r3)
 80013b0:	29ca703a 	and	r5,r5,r7
 80013b4:	1140022e 	bgeu	r2,r5,80013c0 <_free_r+0x160>
 80013b8:	18c00217 	ldw	r3,8(r3)
 80013bc:	20fffb1e 	bne	r4,r3,80013ac <__alt_data_end+0xf80013ac>
 80013c0:	19000317 	ldw	r4,12(r3)
 80013c4:	31000315 	stw	r4,12(r6)
 80013c8:	30c00215 	stw	r3,8(r6)
 80013cc:	21800215 	stw	r6,8(r4)
 80013d0:	19800315 	stw	r6,12(r3)
 80013d4:	003fde06 	br	8001350 <__alt_data_end+0xf8001350>
 80013d8:	29c00217 	ldw	r7,8(r5)
 80013dc:	10c5883a 	add	r2,r2,r3
 80013e0:	00c20074 	movhi	r3,2049
 80013e4:	18d91504 	addi	r3,r3,25684
 80013e8:	38c03b26 	beq	r7,r3,80014d8 <_free_r+0x278>
 80013ec:	2a000317 	ldw	r8,12(r5)
 80013f0:	11400054 	ori	r5,r2,1
 80013f4:	3087883a 	add	r3,r6,r2
 80013f8:	3a000315 	stw	r8,12(r7)
 80013fc:	41c00215 	stw	r7,8(r8)
 8001400:	31400115 	stw	r5,4(r6)
 8001404:	18800015 	stw	r2,0(r3)
 8001408:	003fbd06 	br	8001300 <__alt_data_end+0xf8001300>
 800140c:	39c0004c 	andi	r7,r7,1
 8001410:	10c5883a 	add	r2,r2,r3
 8001414:	3800071e 	bne	r7,zero,8001434 <_free_r+0x1d4>
 8001418:	81fffe17 	ldw	r7,-8(r16)
 800141c:	31cdc83a 	sub	r6,r6,r7
 8001420:	30c00317 	ldw	r3,12(r6)
 8001424:	31400217 	ldw	r5,8(r6)
 8001428:	11c5883a 	add	r2,r2,r7
 800142c:	28c00315 	stw	r3,12(r5)
 8001430:	19400215 	stw	r5,8(r3)
 8001434:	10c00054 	ori	r3,r2,1
 8001438:	30c00115 	stw	r3,4(r6)
 800143c:	00c20074 	movhi	r3,2049
 8001440:	18dece04 	addi	r3,r3,31544
 8001444:	18c00017 	ldw	r3,0(r3)
 8001448:	21800215 	stw	r6,8(r4)
 800144c:	10ffc036 	bltu	r2,r3,8001350 <__alt_data_end+0xf8001350>
 8001450:	008200b4 	movhi	r2,2050
 8001454:	10a5b004 	addi	r2,r2,-26944
 8001458:	11400017 	ldw	r5,0(r2)
 800145c:	8809883a 	mov	r4,r17
 8001460:	800113c0 	call	800113c <_malloc_trim_r>
 8001464:	003fba06 	br	8001350 <__alt_data_end+0xf8001350>
 8001468:	28c9883a 	add	r4,r5,r3
 800146c:	21000117 	ldw	r4,4(r4)
 8001470:	2100004c 	andi	r4,r4,1
 8001474:	2000391e 	bne	r4,zero,800155c <_free_r+0x2fc>
 8001478:	29c00217 	ldw	r7,8(r5)
 800147c:	29000317 	ldw	r4,12(r5)
 8001480:	1885883a 	add	r2,r3,r2
 8001484:	10c00054 	ori	r3,r2,1
 8001488:	39000315 	stw	r4,12(r7)
 800148c:	21c00215 	stw	r7,8(r4)
 8001490:	30c00115 	stw	r3,4(r6)
 8001494:	308d883a 	add	r6,r6,r2
 8001498:	30800015 	stw	r2,0(r6)
 800149c:	003fac06 	br	8001350 <__alt_data_end+0xf8001350>
 80014a0:	00c00504 	movi	r3,20
 80014a4:	19401536 	bltu	r3,r5,80014fc <_free_r+0x29c>
 80014a8:	28c01704 	addi	r3,r5,92
 80014ac:	18c7883a 	add	r3,r3,r3
 80014b0:	294016c4 	addi	r5,r5,91
 80014b4:	003fb406 	br	8001388 <__alt_data_end+0xf8001388>
 80014b8:	280bd0ba 	srai	r5,r5,2
 80014bc:	00c00044 	movi	r3,1
 80014c0:	38800117 	ldw	r2,4(r7)
 80014c4:	194a983a 	sll	r5,r3,r5
 80014c8:	2007883a 	mov	r3,r4
 80014cc:	2884b03a 	or	r2,r5,r2
 80014d0:	38800115 	stw	r2,4(r7)
 80014d4:	003fbb06 	br	80013c4 <__alt_data_end+0xf80013c4>
 80014d8:	21800515 	stw	r6,20(r4)
 80014dc:	21800415 	stw	r6,16(r4)
 80014e0:	10c00054 	ori	r3,r2,1
 80014e4:	31c00315 	stw	r7,12(r6)
 80014e8:	31c00215 	stw	r7,8(r6)
 80014ec:	30c00115 	stw	r3,4(r6)
 80014f0:	308d883a 	add	r6,r6,r2
 80014f4:	30800015 	stw	r2,0(r6)
 80014f8:	003f9506 	br	8001350 <__alt_data_end+0xf8001350>
 80014fc:	00c01504 	movi	r3,84
 8001500:	19400536 	bltu	r3,r5,8001518 <_free_r+0x2b8>
 8001504:	100ad33a 	srli	r5,r2,12
 8001508:	28c01bc4 	addi	r3,r5,111
 800150c:	18c7883a 	add	r3,r3,r3
 8001510:	29401b84 	addi	r5,r5,110
 8001514:	003f9c06 	br	8001388 <__alt_data_end+0xf8001388>
 8001518:	00c05504 	movi	r3,340
 800151c:	19400536 	bltu	r3,r5,8001534 <_free_r+0x2d4>
 8001520:	100ad3fa 	srli	r5,r2,15
 8001524:	28c01e04 	addi	r3,r5,120
 8001528:	18c7883a 	add	r3,r3,r3
 800152c:	29401dc4 	addi	r5,r5,119
 8001530:	003f9506 	br	8001388 <__alt_data_end+0xf8001388>
 8001534:	00c15504 	movi	r3,1364
 8001538:	19400536 	bltu	r3,r5,8001550 <_free_r+0x2f0>
 800153c:	100ad4ba 	srli	r5,r2,18
 8001540:	28c01f44 	addi	r3,r5,125
 8001544:	18c7883a 	add	r3,r3,r3
 8001548:	29401f04 	addi	r5,r5,124
 800154c:	003f8e06 	br	8001388 <__alt_data_end+0xf8001388>
 8001550:	00c03f84 	movi	r3,254
 8001554:	01401f84 	movi	r5,126
 8001558:	003f8b06 	br	8001388 <__alt_data_end+0xf8001388>
 800155c:	10c00054 	ori	r3,r2,1
 8001560:	30c00115 	stw	r3,4(r6)
 8001564:	308d883a 	add	r6,r6,r2
 8001568:	30800015 	stw	r2,0(r6)
 800156c:	003f7806 	br	8001350 <__alt_data_end+0xf8001350>

08001570 <_fseek_r>:
 8001570:	80015901 	jmpi	8001590 <_fseeko_r>

08001574 <fseek>:
 8001574:	00820074 	movhi	r2,2049
 8001578:	109ecc04 	addi	r2,r2,31536
 800157c:	300f883a 	mov	r7,r6
 8001580:	280d883a 	mov	r6,r5
 8001584:	200b883a 	mov	r5,r4
 8001588:	11000017 	ldw	r4,0(r2)
 800158c:	80015901 	jmpi	8001590 <_fseeko_r>

08001590 <_fseeko_r>:
 8001590:	deffe804 	addi	sp,sp,-96
 8001594:	dd401415 	stw	r21,80(sp)
 8001598:	dc801115 	stw	r18,68(sp)
 800159c:	dc401015 	stw	r17,64(sp)
 80015a0:	dc000f15 	stw	r16,60(sp)
 80015a4:	dfc01715 	stw	ra,92(sp)
 80015a8:	ddc01615 	stw	r23,88(sp)
 80015ac:	dd801515 	stw	r22,84(sp)
 80015b0:	dd001315 	stw	r20,76(sp)
 80015b4:	dcc01215 	stw	r19,72(sp)
 80015b8:	2023883a 	mov	r17,r4
 80015bc:	2821883a 	mov	r16,r5
 80015c0:	302b883a 	mov	r21,r6
 80015c4:	3825883a 	mov	r18,r7
 80015c8:	20000226 	beq	r4,zero,80015d4 <_fseeko_r+0x44>
 80015cc:	20800e17 	ldw	r2,56(r4)
 80015d0:	10005a26 	beq	r2,zero,800173c <_fseeko_r+0x1ac>
 80015d4:	8080030b 	ldhu	r2,12(r16)
 80015d8:	00c04204 	movi	r3,264
 80015dc:	1080420c 	andi	r2,r2,264
 80015e0:	10c05b26 	beq	r2,r3,8001750 <_fseeko_r+0x1c0>
 80015e4:	85000a17 	ldw	r20,40(r16)
 80015e8:	a000f626 	beq	r20,zero,80019c4 <_fseeko_r+0x434>
 80015ec:	00800044 	movi	r2,1
 80015f0:	90803e26 	beq	r18,r2,80016ec <_fseeko_r+0x15c>
 80015f4:	00800084 	movi	r2,2
 80015f8:	90801026 	beq	r18,r2,800163c <_fseeko_r+0xac>
 80015fc:	90000f26 	beq	r18,zero,800163c <_fseeko_r+0xac>
 8001600:	00800584 	movi	r2,22
 8001604:	88800015 	stw	r2,0(r17)
 8001608:	04ffffc4 	movi	r19,-1
 800160c:	9805883a 	mov	r2,r19
 8001610:	dfc01717 	ldw	ra,92(sp)
 8001614:	ddc01617 	ldw	r23,88(sp)
 8001618:	dd801517 	ldw	r22,84(sp)
 800161c:	dd401417 	ldw	r21,80(sp)
 8001620:	dd001317 	ldw	r20,76(sp)
 8001624:	dcc01217 	ldw	r19,72(sp)
 8001628:	dc801117 	ldw	r18,68(sp)
 800162c:	dc401017 	ldw	r17,64(sp)
 8001630:	dc000f17 	ldw	r16,60(sp)
 8001634:	dec01804 	addi	sp,sp,96
 8001638:	f800283a 	ret
 800163c:	80800417 	ldw	r2,16(r16)
 8001640:	002f883a 	mov	r23,zero
 8001644:	0027883a 	mov	r19,zero
 8001648:	1000cb26 	beq	r2,zero,8001978 <_fseeko_r+0x3e8>
 800164c:	8080030b 	ldhu	r2,12(r16)
 8001650:	10c2068c 	andi	r3,r2,2074
 8001654:	1800071e 	bne	r3,zero,8001674 <_fseeko_r+0xe4>
 8001658:	10c1000c 	andi	r3,r2,1024
 800165c:	1800451e 	bne	r3,zero,8001774 <_fseeko_r+0x1e4>
 8001660:	00c20034 	movhi	r3,2048
 8001664:	18cb5f04 	addi	r3,r3,11644
 8001668:	a0c0b726 	beq	r20,r3,8001948 <_fseeko_r+0x3b8>
 800166c:	10820014 	ori	r2,r2,2048
 8001670:	8080030d 	sth	r2,12(r16)
 8001674:	800b883a 	mov	r5,r16
 8001678:	8809883a 	mov	r4,r17
 800167c:	80009a40 	call	80009a4 <_fflush_r>
 8001680:	1027883a 	mov	r19,r2
 8001684:	103fe01e 	bne	r2,zero,8001608 <__alt_data_end+0xf8001608>
 8001688:	81400717 	ldw	r5,28(r16)
 800168c:	900f883a 	mov	r7,r18
 8001690:	a80d883a 	mov	r6,r21
 8001694:	8809883a 	mov	r4,r17
 8001698:	a03ee83a 	callr	r20
 800169c:	00ffffc4 	movi	r3,-1
 80016a0:	10ffd926 	beq	r2,r3,8001608 <__alt_data_end+0xf8001608>
 80016a4:	81400c17 	ldw	r5,48(r16)
 80016a8:	28000526 	beq	r5,zero,80016c0 <_fseeko_r+0x130>
 80016ac:	80801004 	addi	r2,r16,64
 80016b0:	28800226 	beq	r5,r2,80016bc <_fseeko_r+0x12c>
 80016b4:	8809883a 	mov	r4,r17
 80016b8:	80012600 	call	8001260 <_free_r>
 80016bc:	80000c15 	stw	zero,48(r16)
 80016c0:	8080030b 	ldhu	r2,12(r16)
 80016c4:	80c00417 	ldw	r3,16(r16)
 80016c8:	80000115 	stw	zero,4(r16)
 80016cc:	10bdf7cc 	andi	r2,r2,63455
 80016d0:	80c00015 	stw	r3,0(r16)
 80016d4:	8080030d 	sth	r2,12(r16)
 80016d8:	01800204 	movi	r6,8
 80016dc:	000b883a 	mov	r5,zero
 80016e0:	81001704 	addi	r4,r16,92
 80016e4:	80026e40 	call	80026e4 <memset>
 80016e8:	003fc806 	br	800160c <__alt_data_end+0xf800160c>
 80016ec:	800b883a 	mov	r5,r16
 80016f0:	8809883a 	mov	r4,r17
 80016f4:	80009a40 	call	80009a4 <_fflush_r>
 80016f8:	8080030b 	ldhu	r2,12(r16)
 80016fc:	10c4000c 	andi	r3,r2,4096
 8001700:	18008726 	beq	r3,zero,8001920 <_fseeko_r+0x390>
 8001704:	84c01417 	ldw	r19,80(r16)
 8001708:	10c0010c 	andi	r3,r2,4
 800170c:	1800431e 	bne	r3,zero,800181c <_fseeko_r+0x28c>
 8001710:	1080020c 	andi	r2,r2,8
 8001714:	10008026 	beq	r2,zero,8001918 <_fseeko_r+0x388>
 8001718:	80c00017 	ldw	r3,0(r16)
 800171c:	80800417 	ldw	r2,16(r16)
 8001720:	18000226 	beq	r3,zero,800172c <_fseeko_r+0x19c>
 8001724:	1887c83a 	sub	r3,r3,r2
 8001728:	98e7883a 	add	r19,r19,r3
 800172c:	aceb883a 	add	r21,r21,r19
 8001730:	05c00044 	movi	r23,1
 8001734:	0025883a 	mov	r18,zero
 8001738:	003fc306 	br	8001648 <__alt_data_end+0xf8001648>
 800173c:	8000d800 	call	8000d80 <__sinit>
 8001740:	8080030b 	ldhu	r2,12(r16)
 8001744:	00c04204 	movi	r3,264
 8001748:	1080420c 	andi	r2,r2,264
 800174c:	10ffa51e 	bne	r2,r3,80015e4 <__alt_data_end+0xf80015e4>
 8001750:	800b883a 	mov	r5,r16
 8001754:	8809883a 	mov	r4,r17
 8001758:	80009a40 	call	80009a4 <_fflush_r>
 800175c:	003fa106 	br	80015e4 <__alt_data_end+0xf80015e4>
 8001760:	8080030b 	ldhu	r2,12(r16)
 8001764:	00c10004 	movi	r3,1024
 8001768:	80c01315 	stw	r3,76(r16)
 800176c:	10c4b03a 	or	r2,r2,r3
 8001770:	8080030d 	sth	r2,12(r16)
 8001774:	9000311e 	bne	r18,zero,800183c <_fseeko_r+0x2ac>
 8001778:	a82d883a 	mov	r22,r21
 800177c:	b800371e 	bne	r23,zero,800185c <_fseeko_r+0x2cc>
 8001780:	8080030b 	ldhu	r2,12(r16)
 8001784:	1084000c 	andi	r2,r2,4096
 8001788:	10007f26 	beq	r2,zero,8001988 <_fseeko_r+0x3f8>
 800178c:	80801417 	ldw	r2,80(r16)
 8001790:	81800117 	ldw	r6,4(r16)
 8001794:	81400c17 	ldw	r5,48(r16)
 8001798:	11a7c83a 	sub	r19,r2,r6
 800179c:	28008226 	beq	r5,zero,80019a8 <_fseeko_r+0x418>
 80017a0:	81c00f17 	ldw	r7,60(r16)
 80017a4:	99e7c83a 	sub	r19,r19,r7
 80017a8:	81000e17 	ldw	r4,56(r16)
 80017ac:	80800417 	ldw	r2,16(r16)
 80017b0:	99a7883a 	add	r19,r19,r6
 80017b4:	2087c83a 	sub	r3,r4,r2
 80017b8:	98e7c83a 	sub	r19,r19,r3
 80017bc:	38c7883a 	add	r3,r7,r3
 80017c0:	b4c02b16 	blt	r22,r19,8001870 <_fseeko_r+0x2e0>
 80017c4:	98c9883a 	add	r4,r19,r3
 80017c8:	b100292e 	bgeu	r22,r4,8001870 <_fseeko_r+0x2e0>
 80017cc:	b4e7c83a 	sub	r19,r22,r19
 80017d0:	14c5883a 	add	r2,r2,r19
 80017d4:	1ce7c83a 	sub	r19,r3,r19
 80017d8:	80800015 	stw	r2,0(r16)
 80017dc:	84c00115 	stw	r19,4(r16)
 80017e0:	28000526 	beq	r5,zero,80017f8 <_fseeko_r+0x268>
 80017e4:	80801004 	addi	r2,r16,64
 80017e8:	28800226 	beq	r5,r2,80017f4 <_fseeko_r+0x264>
 80017ec:	8809883a 	mov	r4,r17
 80017f0:	80012600 	call	8001260 <_free_r>
 80017f4:	80000c15 	stw	zero,48(r16)
 80017f8:	8080030b 	ldhu	r2,12(r16)
 80017fc:	01800204 	movi	r6,8
 8001800:	000b883a 	mov	r5,zero
 8001804:	10bff7cc 	andi	r2,r2,65503
 8001808:	8080030d 	sth	r2,12(r16)
 800180c:	81001704 	addi	r4,r16,92
 8001810:	80026e40 	call	80026e4 <memset>
 8001814:	0027883a 	mov	r19,zero
 8001818:	003f7c06 	br	800160c <__alt_data_end+0xf800160c>
 800181c:	80c00117 	ldw	r3,4(r16)
 8001820:	80800c17 	ldw	r2,48(r16)
 8001824:	98e7c83a 	sub	r19,r19,r3
 8001828:	10003b26 	beq	r2,zero,8001918 <_fseeko_r+0x388>
 800182c:	80c00f17 	ldw	r3,60(r16)
 8001830:	80800417 	ldw	r2,16(r16)
 8001834:	98e7c83a 	sub	r19,r19,r3
 8001838:	003fbc06 	br	800172c <__alt_data_end+0xf800172c>
 800183c:	8140038f 	ldh	r5,14(r16)
 8001840:	d80d883a 	mov	r6,sp
 8001844:	8809883a 	mov	r4,r17
 8001848:	80019f00 	call	80019f0 <_fstat_r>
 800184c:	103f891e 	bne	r2,zero,8001674 <__alt_data_end+0xf8001674>
 8001850:	dd800417 	ldw	r22,16(sp)
 8001854:	adad883a 	add	r22,r21,r22
 8001858:	b83fc926 	beq	r23,zero,8001780 <__alt_data_end+0xf8001780>
 800185c:	81400c17 	ldw	r5,48(r16)
 8001860:	81800117 	ldw	r6,4(r16)
 8001864:	28005026 	beq	r5,zero,80019a8 <_fseeko_r+0x418>
 8001868:	81c00f17 	ldw	r7,60(r16)
 800186c:	003fce06 	br	80017a8 <__alt_data_end+0xf80017a8>
 8001870:	84c01317 	ldw	r19,76(r16)
 8001874:	81400717 	ldw	r5,28(r16)
 8001878:	000f883a 	mov	r7,zero
 800187c:	04e7c83a 	sub	r19,zero,r19
 8001880:	9da6703a 	and	r19,r19,r22
 8001884:	980d883a 	mov	r6,r19
 8001888:	8809883a 	mov	r4,r17
 800188c:	a03ee83a 	callr	r20
 8001890:	00ffffc4 	movi	r3,-1
 8001894:	10ff7726 	beq	r2,r3,8001674 <__alt_data_end+0xf8001674>
 8001898:	80800417 	ldw	r2,16(r16)
 800189c:	81400c17 	ldw	r5,48(r16)
 80018a0:	80000115 	stw	zero,4(r16)
 80018a4:	80800015 	stw	r2,0(r16)
 80018a8:	28000526 	beq	r5,zero,80018c0 <_fseeko_r+0x330>
 80018ac:	80801004 	addi	r2,r16,64
 80018b0:	28800226 	beq	r5,r2,80018bc <_fseeko_r+0x32c>
 80018b4:	8809883a 	mov	r4,r17
 80018b8:	80012600 	call	8001260 <_free_r>
 80018bc:	80000c15 	stw	zero,48(r16)
 80018c0:	8080030b 	ldhu	r2,12(r16)
 80018c4:	b4e7c83a 	sub	r19,r22,r19
 80018c8:	10bff7cc 	andi	r2,r2,65503
 80018cc:	8080030d 	sth	r2,12(r16)
 80018d0:	98000b26 	beq	r19,zero,8001900 <_fseeko_r+0x370>
 80018d4:	800b883a 	mov	r5,r16
 80018d8:	8809883a 	mov	r4,r17
 80018dc:	8002a7c0 	call	8002a7c <__srefill_r>
 80018e0:	103f641e 	bne	r2,zero,8001674 <__alt_data_end+0xf8001674>
 80018e4:	80800117 	ldw	r2,4(r16)
 80018e8:	14ff6236 	bltu	r2,r19,8001674 <__alt_data_end+0xf8001674>
 80018ec:	80c00017 	ldw	r3,0(r16)
 80018f0:	14c5c83a 	sub	r2,r2,r19
 80018f4:	80800115 	stw	r2,4(r16)
 80018f8:	1ce7883a 	add	r19,r3,r19
 80018fc:	84c00015 	stw	r19,0(r16)
 8001900:	01800204 	movi	r6,8
 8001904:	000b883a 	mov	r5,zero
 8001908:	81001704 	addi	r4,r16,92
 800190c:	80026e40 	call	80026e4 <memset>
 8001910:	0027883a 	mov	r19,zero
 8001914:	003f3d06 	br	800160c <__alt_data_end+0xf800160c>
 8001918:	80800417 	ldw	r2,16(r16)
 800191c:	003f8306 	br	800172c <__alt_data_end+0xf800172c>
 8001920:	81400717 	ldw	r5,28(r16)
 8001924:	900f883a 	mov	r7,r18
 8001928:	000d883a 	mov	r6,zero
 800192c:	8809883a 	mov	r4,r17
 8001930:	a03ee83a 	callr	r20
 8001934:	1027883a 	mov	r19,r2
 8001938:	00bfffc4 	movi	r2,-1
 800193c:	98bf3226 	beq	r19,r2,8001608 <__alt_data_end+0xf8001608>
 8001940:	8080030b 	ldhu	r2,12(r16)
 8001944:	003f7006 	br	8001708 <__alt_data_end+0xf8001708>
 8001948:	8140038f 	ldh	r5,14(r16)
 800194c:	283f4716 	blt	r5,zero,800166c <__alt_data_end+0xf800166c>
 8001950:	d80d883a 	mov	r6,sp
 8001954:	8809883a 	mov	r4,r17
 8001958:	80019f00 	call	80019f0 <_fstat_r>
 800195c:	1000041e 	bne	r2,zero,8001970 <_fseeko_r+0x3e0>
 8001960:	d8800117 	ldw	r2,4(sp)
 8001964:	00e00014 	movui	r3,32768
 8001968:	10bc000c 	andi	r2,r2,61440
 800196c:	10ff7c26 	beq	r2,r3,8001760 <__alt_data_end+0xf8001760>
 8001970:	8080030b 	ldhu	r2,12(r16)
 8001974:	003f3d06 	br	800166c <__alt_data_end+0xf800166c>
 8001978:	800b883a 	mov	r5,r16
 800197c:	8809883a 	mov	r4,r17
 8001980:	8001bd40 	call	8001bd4 <__smakebuf_r>
 8001984:	003f3106 	br	800164c <__alt_data_end+0xf800164c>
 8001988:	81400717 	ldw	r5,28(r16)
 800198c:	01c00044 	movi	r7,1
 8001990:	000d883a 	mov	r6,zero
 8001994:	8809883a 	mov	r4,r17
 8001998:	a03ee83a 	callr	r20
 800199c:	00ffffc4 	movi	r3,-1
 80019a0:	10ff7b1e 	bne	r2,r3,8001790 <__alt_data_end+0xf8001790>
 80019a4:	003f3306 	br	8001674 <__alt_data_end+0xf8001674>
 80019a8:	80c00017 	ldw	r3,0(r16)
 80019ac:	80800417 	ldw	r2,16(r16)
 80019b0:	000b883a 	mov	r5,zero
 80019b4:	1887c83a 	sub	r3,r3,r2
 80019b8:	98e7c83a 	sub	r19,r19,r3
 80019bc:	30c7883a 	add	r3,r6,r3
 80019c0:	003f7f06 	br	80017c0 <__alt_data_end+0xf80017c0>
 80019c4:	00800744 	movi	r2,29
 80019c8:	88800015 	stw	r2,0(r17)
 80019cc:	04ffffc4 	movi	r19,-1
 80019d0:	003f0e06 	br	800160c <__alt_data_end+0xf800160c>

080019d4 <fseeko>:
 80019d4:	00820074 	movhi	r2,2049
 80019d8:	109ecc04 	addi	r2,r2,31536
 80019dc:	300f883a 	mov	r7,r6
 80019e0:	280d883a 	mov	r6,r5
 80019e4:	200b883a 	mov	r5,r4
 80019e8:	11000017 	ldw	r4,0(r2)
 80019ec:	80015901 	jmpi	8001590 <_fseeko_r>

080019f0 <_fstat_r>:
 80019f0:	defffd04 	addi	sp,sp,-12
 80019f4:	2805883a 	mov	r2,r5
 80019f8:	dc000015 	stw	r16,0(sp)
 80019fc:	040200b4 	movhi	r16,2050
 8001a00:	dc400115 	stw	r17,4(sp)
 8001a04:	8425ad04 	addi	r16,r16,-26956
 8001a08:	2023883a 	mov	r17,r4
 8001a0c:	300b883a 	mov	r5,r6
 8001a10:	1009883a 	mov	r4,r2
 8001a14:	dfc00215 	stw	ra,8(sp)
 8001a18:	80000015 	stw	zero,0(r16)
 8001a1c:	800e5f00 	call	800e5f0 <fstat>
 8001a20:	00ffffc4 	movi	r3,-1
 8001a24:	10c00526 	beq	r2,r3,8001a3c <_fstat_r+0x4c>
 8001a28:	dfc00217 	ldw	ra,8(sp)
 8001a2c:	dc400117 	ldw	r17,4(sp)
 8001a30:	dc000017 	ldw	r16,0(sp)
 8001a34:	dec00304 	addi	sp,sp,12
 8001a38:	f800283a 	ret
 8001a3c:	80c00017 	ldw	r3,0(r16)
 8001a40:	183ff926 	beq	r3,zero,8001a28 <__alt_data_end+0xf8001a28>
 8001a44:	88c00015 	stw	r3,0(r17)
 8001a48:	003ff706 	br	8001a28 <__alt_data_end+0xf8001a28>

08001a4c <_fwalk>:
 8001a4c:	defff704 	addi	sp,sp,-36
 8001a50:	dd000415 	stw	r20,16(sp)
 8001a54:	dfc00815 	stw	ra,32(sp)
 8001a58:	ddc00715 	stw	r23,28(sp)
 8001a5c:	dd800615 	stw	r22,24(sp)
 8001a60:	dd400515 	stw	r21,20(sp)
 8001a64:	dcc00315 	stw	r19,12(sp)
 8001a68:	dc800215 	stw	r18,8(sp)
 8001a6c:	dc400115 	stw	r17,4(sp)
 8001a70:	dc000015 	stw	r16,0(sp)
 8001a74:	2500b804 	addi	r20,r4,736
 8001a78:	a0002326 	beq	r20,zero,8001b08 <_fwalk+0xbc>
 8001a7c:	282b883a 	mov	r21,r5
 8001a80:	002f883a 	mov	r23,zero
 8001a84:	05800044 	movi	r22,1
 8001a88:	04ffffc4 	movi	r19,-1
 8001a8c:	a4400117 	ldw	r17,4(r20)
 8001a90:	a4800217 	ldw	r18,8(r20)
 8001a94:	8c7fffc4 	addi	r17,r17,-1
 8001a98:	88000d16 	blt	r17,zero,8001ad0 <_fwalk+0x84>
 8001a9c:	94000304 	addi	r16,r18,12
 8001aa0:	94800384 	addi	r18,r18,14
 8001aa4:	8080000b 	ldhu	r2,0(r16)
 8001aa8:	8c7fffc4 	addi	r17,r17,-1
 8001aac:	813ffd04 	addi	r4,r16,-12
 8001ab0:	b080042e 	bgeu	r22,r2,8001ac4 <_fwalk+0x78>
 8001ab4:	9080000f 	ldh	r2,0(r18)
 8001ab8:	14c00226 	beq	r2,r19,8001ac4 <_fwalk+0x78>
 8001abc:	a83ee83a 	callr	r21
 8001ac0:	b8aeb03a 	or	r23,r23,r2
 8001ac4:	84001a04 	addi	r16,r16,104
 8001ac8:	94801a04 	addi	r18,r18,104
 8001acc:	8cfff51e 	bne	r17,r19,8001aa4 <__alt_data_end+0xf8001aa4>
 8001ad0:	a5000017 	ldw	r20,0(r20)
 8001ad4:	a03fed1e 	bne	r20,zero,8001a8c <__alt_data_end+0xf8001a8c>
 8001ad8:	b805883a 	mov	r2,r23
 8001adc:	dfc00817 	ldw	ra,32(sp)
 8001ae0:	ddc00717 	ldw	r23,28(sp)
 8001ae4:	dd800617 	ldw	r22,24(sp)
 8001ae8:	dd400517 	ldw	r21,20(sp)
 8001aec:	dd000417 	ldw	r20,16(sp)
 8001af0:	dcc00317 	ldw	r19,12(sp)
 8001af4:	dc800217 	ldw	r18,8(sp)
 8001af8:	dc400117 	ldw	r17,4(sp)
 8001afc:	dc000017 	ldw	r16,0(sp)
 8001b00:	dec00904 	addi	sp,sp,36
 8001b04:	f800283a 	ret
 8001b08:	002f883a 	mov	r23,zero
 8001b0c:	003ff206 	br	8001ad8 <__alt_data_end+0xf8001ad8>

08001b10 <_fwalk_reent>:
 8001b10:	defff704 	addi	sp,sp,-36
 8001b14:	dd000415 	stw	r20,16(sp)
 8001b18:	dfc00815 	stw	ra,32(sp)
 8001b1c:	ddc00715 	stw	r23,28(sp)
 8001b20:	dd800615 	stw	r22,24(sp)
 8001b24:	dd400515 	stw	r21,20(sp)
 8001b28:	dcc00315 	stw	r19,12(sp)
 8001b2c:	dc800215 	stw	r18,8(sp)
 8001b30:	dc400115 	stw	r17,4(sp)
 8001b34:	dc000015 	stw	r16,0(sp)
 8001b38:	2500b804 	addi	r20,r4,736
 8001b3c:	a0002326 	beq	r20,zero,8001bcc <_fwalk_reent+0xbc>
 8001b40:	282b883a 	mov	r21,r5
 8001b44:	2027883a 	mov	r19,r4
 8001b48:	002f883a 	mov	r23,zero
 8001b4c:	05800044 	movi	r22,1
 8001b50:	04bfffc4 	movi	r18,-1
 8001b54:	a4400117 	ldw	r17,4(r20)
 8001b58:	a4000217 	ldw	r16,8(r20)
 8001b5c:	8c7fffc4 	addi	r17,r17,-1
 8001b60:	88000c16 	blt	r17,zero,8001b94 <_fwalk_reent+0x84>
 8001b64:	84000304 	addi	r16,r16,12
 8001b68:	8080000b 	ldhu	r2,0(r16)
 8001b6c:	8c7fffc4 	addi	r17,r17,-1
 8001b70:	817ffd04 	addi	r5,r16,-12
 8001b74:	b080052e 	bgeu	r22,r2,8001b8c <_fwalk_reent+0x7c>
 8001b78:	8080008f 	ldh	r2,2(r16)
 8001b7c:	9809883a 	mov	r4,r19
 8001b80:	14800226 	beq	r2,r18,8001b8c <_fwalk_reent+0x7c>
 8001b84:	a83ee83a 	callr	r21
 8001b88:	b8aeb03a 	or	r23,r23,r2
 8001b8c:	84001a04 	addi	r16,r16,104
 8001b90:	8cbff51e 	bne	r17,r18,8001b68 <__alt_data_end+0xf8001b68>
 8001b94:	a5000017 	ldw	r20,0(r20)
 8001b98:	a03fee1e 	bne	r20,zero,8001b54 <__alt_data_end+0xf8001b54>
 8001b9c:	b805883a 	mov	r2,r23
 8001ba0:	dfc00817 	ldw	ra,32(sp)
 8001ba4:	ddc00717 	ldw	r23,28(sp)
 8001ba8:	dd800617 	ldw	r22,24(sp)
 8001bac:	dd400517 	ldw	r21,20(sp)
 8001bb0:	dd000417 	ldw	r20,16(sp)
 8001bb4:	dcc00317 	ldw	r19,12(sp)
 8001bb8:	dc800217 	ldw	r18,8(sp)
 8001bbc:	dc400117 	ldw	r17,4(sp)
 8001bc0:	dc000017 	ldw	r16,0(sp)
 8001bc4:	dec00904 	addi	sp,sp,36
 8001bc8:	f800283a 	ret
 8001bcc:	002f883a 	mov	r23,zero
 8001bd0:	003ff206 	br	8001b9c <__alt_data_end+0xf8001b9c>

08001bd4 <__smakebuf_r>:
 8001bd4:	2880030b 	ldhu	r2,12(r5)
 8001bd8:	10c0008c 	andi	r3,r2,2
 8001bdc:	1800411e 	bne	r3,zero,8001ce4 <__smakebuf_r+0x110>
 8001be0:	deffec04 	addi	sp,sp,-80
 8001be4:	dc000f15 	stw	r16,60(sp)
 8001be8:	2821883a 	mov	r16,r5
 8001bec:	2940038f 	ldh	r5,14(r5)
 8001bf0:	dc401015 	stw	r17,64(sp)
 8001bf4:	dfc01315 	stw	ra,76(sp)
 8001bf8:	dcc01215 	stw	r19,72(sp)
 8001bfc:	dc801115 	stw	r18,68(sp)
 8001c00:	2023883a 	mov	r17,r4
 8001c04:	28001c16 	blt	r5,zero,8001c78 <__smakebuf_r+0xa4>
 8001c08:	d80d883a 	mov	r6,sp
 8001c0c:	80019f00 	call	80019f0 <_fstat_r>
 8001c10:	10001816 	blt	r2,zero,8001c74 <__smakebuf_r+0xa0>
 8001c14:	d8800117 	ldw	r2,4(sp)
 8001c18:	00e00014 	movui	r3,32768
 8001c1c:	10bc000c 	andi	r2,r2,61440
 8001c20:	14c80020 	cmpeqi	r19,r2,8192
 8001c24:	10c03726 	beq	r2,r3,8001d04 <__smakebuf_r+0x130>
 8001c28:	80c0030b 	ldhu	r3,12(r16)
 8001c2c:	18c20014 	ori	r3,r3,2048
 8001c30:	80c0030d 	sth	r3,12(r16)
 8001c34:	00c80004 	movi	r3,8192
 8001c38:	10c0521e 	bne	r2,r3,8001d84 <__smakebuf_r+0x1b0>
 8001c3c:	8140038f 	ldh	r5,14(r16)
 8001c40:	8809883a 	mov	r4,r17
 8001c44:	80079140 	call	8007914 <_isatty_r>
 8001c48:	10004c26 	beq	r2,zero,8001d7c <__smakebuf_r+0x1a8>
 8001c4c:	8080030b 	ldhu	r2,12(r16)
 8001c50:	80c010c4 	addi	r3,r16,67
 8001c54:	80c00015 	stw	r3,0(r16)
 8001c58:	10800054 	ori	r2,r2,1
 8001c5c:	8080030d 	sth	r2,12(r16)
 8001c60:	00800044 	movi	r2,1
 8001c64:	80c00415 	stw	r3,16(r16)
 8001c68:	80800515 	stw	r2,20(r16)
 8001c6c:	04810004 	movi	r18,1024
 8001c70:	00000706 	br	8001c90 <__smakebuf_r+0xbc>
 8001c74:	8080030b 	ldhu	r2,12(r16)
 8001c78:	10c0200c 	andi	r3,r2,128
 8001c7c:	18001f1e 	bne	r3,zero,8001cfc <__smakebuf_r+0x128>
 8001c80:	04810004 	movi	r18,1024
 8001c84:	10820014 	ori	r2,r2,2048
 8001c88:	8080030d 	sth	r2,12(r16)
 8001c8c:	0027883a 	mov	r19,zero
 8001c90:	900b883a 	mov	r5,r18
 8001c94:	8809883a 	mov	r4,r17
 8001c98:	8001d900 	call	8001d90 <_malloc_r>
 8001c9c:	10002c26 	beq	r2,zero,8001d50 <__smakebuf_r+0x17c>
 8001ca0:	80c0030b 	ldhu	r3,12(r16)
 8001ca4:	01020034 	movhi	r4,2048
 8001ca8:	21028e04 	addi	r4,r4,2616
 8001cac:	89000f15 	stw	r4,60(r17)
 8001cb0:	18c02014 	ori	r3,r3,128
 8001cb4:	80c0030d 	sth	r3,12(r16)
 8001cb8:	80800015 	stw	r2,0(r16)
 8001cbc:	80800415 	stw	r2,16(r16)
 8001cc0:	84800515 	stw	r18,20(r16)
 8001cc4:	98001a1e 	bne	r19,zero,8001d30 <__smakebuf_r+0x15c>
 8001cc8:	dfc01317 	ldw	ra,76(sp)
 8001ccc:	dcc01217 	ldw	r19,72(sp)
 8001cd0:	dc801117 	ldw	r18,68(sp)
 8001cd4:	dc401017 	ldw	r17,64(sp)
 8001cd8:	dc000f17 	ldw	r16,60(sp)
 8001cdc:	dec01404 	addi	sp,sp,80
 8001ce0:	f800283a 	ret
 8001ce4:	288010c4 	addi	r2,r5,67
 8001ce8:	28800015 	stw	r2,0(r5)
 8001cec:	28800415 	stw	r2,16(r5)
 8001cf0:	00800044 	movi	r2,1
 8001cf4:	28800515 	stw	r2,20(r5)
 8001cf8:	f800283a 	ret
 8001cfc:	04801004 	movi	r18,64
 8001d00:	003fe006 	br	8001c84 <__alt_data_end+0xf8001c84>
 8001d04:	81000a17 	ldw	r4,40(r16)
 8001d08:	00c20034 	movhi	r3,2048
 8001d0c:	18cb5f04 	addi	r3,r3,11644
 8001d10:	20ffc51e 	bne	r4,r3,8001c28 <__alt_data_end+0xf8001c28>
 8001d14:	8080030b 	ldhu	r2,12(r16)
 8001d18:	04810004 	movi	r18,1024
 8001d1c:	84801315 	stw	r18,76(r16)
 8001d20:	1484b03a 	or	r2,r2,r18
 8001d24:	8080030d 	sth	r2,12(r16)
 8001d28:	0027883a 	mov	r19,zero
 8001d2c:	003fd806 	br	8001c90 <__alt_data_end+0xf8001c90>
 8001d30:	8140038f 	ldh	r5,14(r16)
 8001d34:	8809883a 	mov	r4,r17
 8001d38:	80079140 	call	8007914 <_isatty_r>
 8001d3c:	103fe226 	beq	r2,zero,8001cc8 <__alt_data_end+0xf8001cc8>
 8001d40:	8080030b 	ldhu	r2,12(r16)
 8001d44:	10800054 	ori	r2,r2,1
 8001d48:	8080030d 	sth	r2,12(r16)
 8001d4c:	003fde06 	br	8001cc8 <__alt_data_end+0xf8001cc8>
 8001d50:	8080030b 	ldhu	r2,12(r16)
 8001d54:	10c0800c 	andi	r3,r2,512
 8001d58:	183fdb1e 	bne	r3,zero,8001cc8 <__alt_data_end+0xf8001cc8>
 8001d5c:	10800094 	ori	r2,r2,2
 8001d60:	80c010c4 	addi	r3,r16,67
 8001d64:	8080030d 	sth	r2,12(r16)
 8001d68:	00800044 	movi	r2,1
 8001d6c:	80c00015 	stw	r3,0(r16)
 8001d70:	80c00415 	stw	r3,16(r16)
 8001d74:	80800515 	stw	r2,20(r16)
 8001d78:	003fd306 	br	8001cc8 <__alt_data_end+0xf8001cc8>
 8001d7c:	04810004 	movi	r18,1024
 8001d80:	003fc306 	br	8001c90 <__alt_data_end+0xf8001c90>
 8001d84:	0027883a 	mov	r19,zero
 8001d88:	04810004 	movi	r18,1024
 8001d8c:	003fc006 	br	8001c90 <__alt_data_end+0xf8001c90>

08001d90 <_malloc_r>:
 8001d90:	defff504 	addi	sp,sp,-44
 8001d94:	dc800315 	stw	r18,12(sp)
 8001d98:	dfc00a15 	stw	ra,40(sp)
 8001d9c:	df000915 	stw	fp,36(sp)
 8001da0:	ddc00815 	stw	r23,32(sp)
 8001da4:	dd800715 	stw	r22,28(sp)
 8001da8:	dd400615 	stw	r21,24(sp)
 8001dac:	dd000515 	stw	r20,20(sp)
 8001db0:	dcc00415 	stw	r19,16(sp)
 8001db4:	dc400215 	stw	r17,8(sp)
 8001db8:	dc000115 	stw	r16,4(sp)
 8001dbc:	288002c4 	addi	r2,r5,11
 8001dc0:	00c00584 	movi	r3,22
 8001dc4:	2025883a 	mov	r18,r4
 8001dc8:	18807f2e 	bgeu	r3,r2,8001fc8 <_malloc_r+0x238>
 8001dcc:	047ffe04 	movi	r17,-8
 8001dd0:	1462703a 	and	r17,r2,r17
 8001dd4:	8800a316 	blt	r17,zero,8002064 <_malloc_r+0x2d4>
 8001dd8:	8940a236 	bltu	r17,r5,8002064 <_malloc_r+0x2d4>
 8001ddc:	800e9f80 	call	800e9f8 <__malloc_lock>
 8001de0:	00807dc4 	movi	r2,503
 8001de4:	1441e92e 	bgeu	r2,r17,800258c <_malloc_r+0x7fc>
 8001de8:	8804d27a 	srli	r2,r17,9
 8001dec:	1000a126 	beq	r2,zero,8002074 <_malloc_r+0x2e4>
 8001df0:	00c00104 	movi	r3,4
 8001df4:	18811e36 	bltu	r3,r2,8002270 <_malloc_r+0x4e0>
 8001df8:	8804d1ba 	srli	r2,r17,6
 8001dfc:	12000e44 	addi	r8,r2,57
 8001e00:	11c00e04 	addi	r7,r2,56
 8001e04:	4209883a 	add	r4,r8,r8
 8001e08:	04c20074 	movhi	r19,2049
 8001e0c:	2109883a 	add	r4,r4,r4
 8001e10:	9cd91304 	addi	r19,r19,25676
 8001e14:	2109883a 	add	r4,r4,r4
 8001e18:	9909883a 	add	r4,r19,r4
 8001e1c:	24000117 	ldw	r16,4(r4)
 8001e20:	213ffe04 	addi	r4,r4,-8
 8001e24:	24009726 	beq	r4,r16,8002084 <_malloc_r+0x2f4>
 8001e28:	80800117 	ldw	r2,4(r16)
 8001e2c:	01bfff04 	movi	r6,-4
 8001e30:	014003c4 	movi	r5,15
 8001e34:	1184703a 	and	r2,r2,r6
 8001e38:	1447c83a 	sub	r3,r2,r17
 8001e3c:	28c00716 	blt	r5,r3,8001e5c <_malloc_r+0xcc>
 8001e40:	1800920e 	bge	r3,zero,800208c <_malloc_r+0x2fc>
 8001e44:	84000317 	ldw	r16,12(r16)
 8001e48:	24008e26 	beq	r4,r16,8002084 <_malloc_r+0x2f4>
 8001e4c:	80800117 	ldw	r2,4(r16)
 8001e50:	1184703a 	and	r2,r2,r6
 8001e54:	1447c83a 	sub	r3,r2,r17
 8001e58:	28fff90e 	bge	r5,r3,8001e40 <__alt_data_end+0xf8001e40>
 8001e5c:	3809883a 	mov	r4,r7
 8001e60:	01820074 	movhi	r6,2049
 8001e64:	9c000417 	ldw	r16,16(r19)
 8001e68:	31991304 	addi	r6,r6,25676
 8001e6c:	32000204 	addi	r8,r6,8
 8001e70:	82013426 	beq	r16,r8,8002344 <_malloc_r+0x5b4>
 8001e74:	80c00117 	ldw	r3,4(r16)
 8001e78:	00bfff04 	movi	r2,-4
 8001e7c:	188e703a 	and	r7,r3,r2
 8001e80:	3c45c83a 	sub	r2,r7,r17
 8001e84:	00c003c4 	movi	r3,15
 8001e88:	18811f16 	blt	r3,r2,8002308 <_malloc_r+0x578>
 8001e8c:	32000515 	stw	r8,20(r6)
 8001e90:	32000415 	stw	r8,16(r6)
 8001e94:	10007f0e 	bge	r2,zero,8002094 <_malloc_r+0x304>
 8001e98:	00807fc4 	movi	r2,511
 8001e9c:	11c0fd36 	bltu	r2,r7,8002294 <_malloc_r+0x504>
 8001ea0:	3806d0fa 	srli	r3,r7,3
 8001ea4:	01c00044 	movi	r7,1
 8001ea8:	30800117 	ldw	r2,4(r6)
 8001eac:	19400044 	addi	r5,r3,1
 8001eb0:	294b883a 	add	r5,r5,r5
 8001eb4:	1807d0ba 	srai	r3,r3,2
 8001eb8:	294b883a 	add	r5,r5,r5
 8001ebc:	294b883a 	add	r5,r5,r5
 8001ec0:	298b883a 	add	r5,r5,r6
 8001ec4:	38c6983a 	sll	r3,r7,r3
 8001ec8:	29c00017 	ldw	r7,0(r5)
 8001ecc:	2a7ffe04 	addi	r9,r5,-8
 8001ed0:	1886b03a 	or	r3,r3,r2
 8001ed4:	82400315 	stw	r9,12(r16)
 8001ed8:	81c00215 	stw	r7,8(r16)
 8001edc:	30c00115 	stw	r3,4(r6)
 8001ee0:	2c000015 	stw	r16,0(r5)
 8001ee4:	3c000315 	stw	r16,12(r7)
 8001ee8:	2005d0ba 	srai	r2,r4,2
 8001eec:	01400044 	movi	r5,1
 8001ef0:	288a983a 	sll	r5,r5,r2
 8001ef4:	19406f36 	bltu	r3,r5,80020b4 <_malloc_r+0x324>
 8001ef8:	28c4703a 	and	r2,r5,r3
 8001efc:	10000a1e 	bne	r2,zero,8001f28 <_malloc_r+0x198>
 8001f00:	00bfff04 	movi	r2,-4
 8001f04:	294b883a 	add	r5,r5,r5
 8001f08:	2088703a 	and	r4,r4,r2
 8001f0c:	28c4703a 	and	r2,r5,r3
 8001f10:	21000104 	addi	r4,r4,4
 8001f14:	1000041e 	bne	r2,zero,8001f28 <_malloc_r+0x198>
 8001f18:	294b883a 	add	r5,r5,r5
 8001f1c:	28c4703a 	and	r2,r5,r3
 8001f20:	21000104 	addi	r4,r4,4
 8001f24:	103ffc26 	beq	r2,zero,8001f18 <__alt_data_end+0xf8001f18>
 8001f28:	02bfff04 	movi	r10,-4
 8001f2c:	024003c4 	movi	r9,15
 8001f30:	21800044 	addi	r6,r4,1
 8001f34:	318d883a 	add	r6,r6,r6
 8001f38:	318d883a 	add	r6,r6,r6
 8001f3c:	318d883a 	add	r6,r6,r6
 8001f40:	998d883a 	add	r6,r19,r6
 8001f44:	333ffe04 	addi	r12,r6,-8
 8001f48:	2017883a 	mov	r11,r4
 8001f4c:	31800104 	addi	r6,r6,4
 8001f50:	34000017 	ldw	r16,0(r6)
 8001f54:	31fffd04 	addi	r7,r6,-12
 8001f58:	81c0041e 	bne	r16,r7,8001f6c <_malloc_r+0x1dc>
 8001f5c:	0000fb06 	br	800234c <_malloc_r+0x5bc>
 8001f60:	1801030e 	bge	r3,zero,8002370 <_malloc_r+0x5e0>
 8001f64:	84000317 	ldw	r16,12(r16)
 8001f68:	81c0f826 	beq	r16,r7,800234c <_malloc_r+0x5bc>
 8001f6c:	80800117 	ldw	r2,4(r16)
 8001f70:	1284703a 	and	r2,r2,r10
 8001f74:	1447c83a 	sub	r3,r2,r17
 8001f78:	48fff90e 	bge	r9,r3,8001f60 <__alt_data_end+0xf8001f60>
 8001f7c:	80800317 	ldw	r2,12(r16)
 8001f80:	81000217 	ldw	r4,8(r16)
 8001f84:	89400054 	ori	r5,r17,1
 8001f88:	81400115 	stw	r5,4(r16)
 8001f8c:	20800315 	stw	r2,12(r4)
 8001f90:	11000215 	stw	r4,8(r2)
 8001f94:	8463883a 	add	r17,r16,r17
 8001f98:	9c400515 	stw	r17,20(r19)
 8001f9c:	9c400415 	stw	r17,16(r19)
 8001fa0:	18800054 	ori	r2,r3,1
 8001fa4:	88800115 	stw	r2,4(r17)
 8001fa8:	8a000315 	stw	r8,12(r17)
 8001fac:	8a000215 	stw	r8,8(r17)
 8001fb0:	88e3883a 	add	r17,r17,r3
 8001fb4:	88c00015 	stw	r3,0(r17)
 8001fb8:	9009883a 	mov	r4,r18
 8001fbc:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8001fc0:	80800204 	addi	r2,r16,8
 8001fc4:	00001b06 	br	8002034 <_malloc_r+0x2a4>
 8001fc8:	04400404 	movi	r17,16
 8001fcc:	89402536 	bltu	r17,r5,8002064 <_malloc_r+0x2d4>
 8001fd0:	800e9f80 	call	800e9f8 <__malloc_lock>
 8001fd4:	00800184 	movi	r2,6
 8001fd8:	01000084 	movi	r4,2
 8001fdc:	04c20074 	movhi	r19,2049
 8001fe0:	1085883a 	add	r2,r2,r2
 8001fe4:	9cd91304 	addi	r19,r19,25676
 8001fe8:	1085883a 	add	r2,r2,r2
 8001fec:	9885883a 	add	r2,r19,r2
 8001ff0:	14000117 	ldw	r16,4(r2)
 8001ff4:	10fffe04 	addi	r3,r2,-8
 8001ff8:	80c0d926 	beq	r16,r3,8002360 <_malloc_r+0x5d0>
 8001ffc:	80c00117 	ldw	r3,4(r16)
 8002000:	81000317 	ldw	r4,12(r16)
 8002004:	00bfff04 	movi	r2,-4
 8002008:	1884703a 	and	r2,r3,r2
 800200c:	81400217 	ldw	r5,8(r16)
 8002010:	8085883a 	add	r2,r16,r2
 8002014:	10c00117 	ldw	r3,4(r2)
 8002018:	29000315 	stw	r4,12(r5)
 800201c:	21400215 	stw	r5,8(r4)
 8002020:	18c00054 	ori	r3,r3,1
 8002024:	10c00115 	stw	r3,4(r2)
 8002028:	9009883a 	mov	r4,r18
 800202c:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8002030:	80800204 	addi	r2,r16,8
 8002034:	dfc00a17 	ldw	ra,40(sp)
 8002038:	df000917 	ldw	fp,36(sp)
 800203c:	ddc00817 	ldw	r23,32(sp)
 8002040:	dd800717 	ldw	r22,28(sp)
 8002044:	dd400617 	ldw	r21,24(sp)
 8002048:	dd000517 	ldw	r20,20(sp)
 800204c:	dcc00417 	ldw	r19,16(sp)
 8002050:	dc800317 	ldw	r18,12(sp)
 8002054:	dc400217 	ldw	r17,8(sp)
 8002058:	dc000117 	ldw	r16,4(sp)
 800205c:	dec00b04 	addi	sp,sp,44
 8002060:	f800283a 	ret
 8002064:	00800304 	movi	r2,12
 8002068:	90800015 	stw	r2,0(r18)
 800206c:	0005883a 	mov	r2,zero
 8002070:	003ff006 	br	8002034 <__alt_data_end+0xf8002034>
 8002074:	01002004 	movi	r4,128
 8002078:	02001004 	movi	r8,64
 800207c:	01c00fc4 	movi	r7,63
 8002080:	003f6106 	br	8001e08 <__alt_data_end+0xf8001e08>
 8002084:	4009883a 	mov	r4,r8
 8002088:	003f7506 	br	8001e60 <__alt_data_end+0xf8001e60>
 800208c:	81000317 	ldw	r4,12(r16)
 8002090:	003fde06 	br	800200c <__alt_data_end+0xf800200c>
 8002094:	81c5883a 	add	r2,r16,r7
 8002098:	11400117 	ldw	r5,4(r2)
 800209c:	9009883a 	mov	r4,r18
 80020a0:	29400054 	ori	r5,r5,1
 80020a4:	11400115 	stw	r5,4(r2)
 80020a8:	800ea1c0 	call	800ea1c <__malloc_unlock>
 80020ac:	80800204 	addi	r2,r16,8
 80020b0:	003fe006 	br	8002034 <__alt_data_end+0xf8002034>
 80020b4:	9c000217 	ldw	r16,8(r19)
 80020b8:	00bfff04 	movi	r2,-4
 80020bc:	85800117 	ldw	r22,4(r16)
 80020c0:	b0ac703a 	and	r22,r22,r2
 80020c4:	b4400336 	bltu	r22,r17,80020d4 <_malloc_r+0x344>
 80020c8:	b445c83a 	sub	r2,r22,r17
 80020cc:	00c003c4 	movi	r3,15
 80020d0:	18805d16 	blt	r3,r2,8002248 <_malloc_r+0x4b8>
 80020d4:	05c20074 	movhi	r23,2049
 80020d8:	008200b4 	movhi	r2,2050
 80020dc:	10a5b004 	addi	r2,r2,-26944
 80020e0:	bddecd04 	addi	r23,r23,31540
 80020e4:	15400017 	ldw	r21,0(r2)
 80020e8:	b8c00017 	ldw	r3,0(r23)
 80020ec:	00bfffc4 	movi	r2,-1
 80020f0:	858d883a 	add	r6,r16,r22
 80020f4:	8d6b883a 	add	r21,r17,r21
 80020f8:	1880ea26 	beq	r3,r2,80024a4 <_malloc_r+0x714>
 80020fc:	ad4403c4 	addi	r21,r21,4111
 8002100:	00bc0004 	movi	r2,-4096
 8002104:	a8aa703a 	and	r21,r21,r2
 8002108:	a80b883a 	mov	r5,r21
 800210c:	9009883a 	mov	r4,r18
 8002110:	d9800015 	stw	r6,0(sp)
 8002114:	8002c500 	call	8002c50 <_sbrk_r>
 8002118:	1029883a 	mov	r20,r2
 800211c:	00bfffc4 	movi	r2,-1
 8002120:	d9800017 	ldw	r6,0(sp)
 8002124:	a080e826 	beq	r20,r2,80024c8 <_malloc_r+0x738>
 8002128:	a180a636 	bltu	r20,r6,80023c4 <_malloc_r+0x634>
 800212c:	070200b4 	movhi	fp,2050
 8002130:	e725c804 	addi	fp,fp,-26848
 8002134:	e0800017 	ldw	r2,0(fp)
 8002138:	a887883a 	add	r3,r21,r2
 800213c:	e0c00015 	stw	r3,0(fp)
 8002140:	3500e626 	beq	r6,r20,80024dc <_malloc_r+0x74c>
 8002144:	b9000017 	ldw	r4,0(r23)
 8002148:	00bfffc4 	movi	r2,-1
 800214c:	2080ee26 	beq	r4,r2,8002508 <_malloc_r+0x778>
 8002150:	a185c83a 	sub	r2,r20,r6
 8002154:	10c5883a 	add	r2,r2,r3
 8002158:	e0800015 	stw	r2,0(fp)
 800215c:	a0c001cc 	andi	r3,r20,7
 8002160:	1800bc26 	beq	r3,zero,8002454 <_malloc_r+0x6c4>
 8002164:	a0e9c83a 	sub	r20,r20,r3
 8002168:	00840204 	movi	r2,4104
 800216c:	a5000204 	addi	r20,r20,8
 8002170:	10c7c83a 	sub	r3,r2,r3
 8002174:	a545883a 	add	r2,r20,r21
 8002178:	1083ffcc 	andi	r2,r2,4095
 800217c:	18abc83a 	sub	r21,r3,r2
 8002180:	a80b883a 	mov	r5,r21
 8002184:	9009883a 	mov	r4,r18
 8002188:	8002c500 	call	8002c50 <_sbrk_r>
 800218c:	00ffffc4 	movi	r3,-1
 8002190:	10c0e126 	beq	r2,r3,8002518 <_malloc_r+0x788>
 8002194:	1505c83a 	sub	r2,r2,r20
 8002198:	1545883a 	add	r2,r2,r21
 800219c:	10800054 	ori	r2,r2,1
 80021a0:	e0c00017 	ldw	r3,0(fp)
 80021a4:	9d000215 	stw	r20,8(r19)
 80021a8:	a0800115 	stw	r2,4(r20)
 80021ac:	a8c7883a 	add	r3,r21,r3
 80021b0:	e0c00015 	stw	r3,0(fp)
 80021b4:	84c00e26 	beq	r16,r19,80021f0 <_malloc_r+0x460>
 80021b8:	018003c4 	movi	r6,15
 80021bc:	3580a72e 	bgeu	r6,r22,800245c <_malloc_r+0x6cc>
 80021c0:	81400117 	ldw	r5,4(r16)
 80021c4:	013ffe04 	movi	r4,-8
 80021c8:	b0bffd04 	addi	r2,r22,-12
 80021cc:	1104703a 	and	r2,r2,r4
 80021d0:	2900004c 	andi	r4,r5,1
 80021d4:	2088b03a 	or	r4,r4,r2
 80021d8:	81000115 	stw	r4,4(r16)
 80021dc:	01400144 	movi	r5,5
 80021e0:	8089883a 	add	r4,r16,r2
 80021e4:	21400115 	stw	r5,4(r4)
 80021e8:	21400215 	stw	r5,8(r4)
 80021ec:	3080cd36 	bltu	r6,r2,8002524 <_malloc_r+0x794>
 80021f0:	008200b4 	movhi	r2,2050
 80021f4:	10a5af04 	addi	r2,r2,-26948
 80021f8:	11000017 	ldw	r4,0(r2)
 80021fc:	20c0012e 	bgeu	r4,r3,8002204 <_malloc_r+0x474>
 8002200:	10c00015 	stw	r3,0(r2)
 8002204:	008200b4 	movhi	r2,2050
 8002208:	10a5ae04 	addi	r2,r2,-26952
 800220c:	11000017 	ldw	r4,0(r2)
 8002210:	9c000217 	ldw	r16,8(r19)
 8002214:	20c0012e 	bgeu	r4,r3,800221c <_malloc_r+0x48c>
 8002218:	10c00015 	stw	r3,0(r2)
 800221c:	80c00117 	ldw	r3,4(r16)
 8002220:	00bfff04 	movi	r2,-4
 8002224:	1886703a 	and	r3,r3,r2
 8002228:	1c45c83a 	sub	r2,r3,r17
 800222c:	1c400236 	bltu	r3,r17,8002238 <_malloc_r+0x4a8>
 8002230:	00c003c4 	movi	r3,15
 8002234:	18800416 	blt	r3,r2,8002248 <_malloc_r+0x4b8>
 8002238:	9009883a 	mov	r4,r18
 800223c:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8002240:	0005883a 	mov	r2,zero
 8002244:	003f7b06 	br	8002034 <__alt_data_end+0xf8002034>
 8002248:	88c00054 	ori	r3,r17,1
 800224c:	80c00115 	stw	r3,4(r16)
 8002250:	8463883a 	add	r17,r16,r17
 8002254:	10800054 	ori	r2,r2,1
 8002258:	9c400215 	stw	r17,8(r19)
 800225c:	88800115 	stw	r2,4(r17)
 8002260:	9009883a 	mov	r4,r18
 8002264:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8002268:	80800204 	addi	r2,r16,8
 800226c:	003f7106 	br	8002034 <__alt_data_end+0xf8002034>
 8002270:	00c00504 	movi	r3,20
 8002274:	18804a2e 	bgeu	r3,r2,80023a0 <_malloc_r+0x610>
 8002278:	00c01504 	movi	r3,84
 800227c:	18806e36 	bltu	r3,r2,8002438 <_malloc_r+0x6a8>
 8002280:	8804d33a 	srli	r2,r17,12
 8002284:	12001bc4 	addi	r8,r2,111
 8002288:	11c01b84 	addi	r7,r2,110
 800228c:	4209883a 	add	r4,r8,r8
 8002290:	003edd06 	br	8001e08 <__alt_data_end+0xf8001e08>
 8002294:	3804d27a 	srli	r2,r7,9
 8002298:	00c00104 	movi	r3,4
 800229c:	1880442e 	bgeu	r3,r2,80023b0 <_malloc_r+0x620>
 80022a0:	00c00504 	movi	r3,20
 80022a4:	18808136 	bltu	r3,r2,80024ac <_malloc_r+0x71c>
 80022a8:	11401704 	addi	r5,r2,92
 80022ac:	10c016c4 	addi	r3,r2,91
 80022b0:	294b883a 	add	r5,r5,r5
 80022b4:	294b883a 	add	r5,r5,r5
 80022b8:	294b883a 	add	r5,r5,r5
 80022bc:	994b883a 	add	r5,r19,r5
 80022c0:	28800017 	ldw	r2,0(r5)
 80022c4:	01820074 	movhi	r6,2049
 80022c8:	297ffe04 	addi	r5,r5,-8
 80022cc:	31991304 	addi	r6,r6,25676
 80022d0:	28806526 	beq	r5,r2,8002468 <_malloc_r+0x6d8>
 80022d4:	01bfff04 	movi	r6,-4
 80022d8:	10c00117 	ldw	r3,4(r2)
 80022dc:	1986703a 	and	r3,r3,r6
 80022e0:	38c0022e 	bgeu	r7,r3,80022ec <_malloc_r+0x55c>
 80022e4:	10800217 	ldw	r2,8(r2)
 80022e8:	28bffb1e 	bne	r5,r2,80022d8 <__alt_data_end+0xf80022d8>
 80022ec:	11400317 	ldw	r5,12(r2)
 80022f0:	98c00117 	ldw	r3,4(r19)
 80022f4:	81400315 	stw	r5,12(r16)
 80022f8:	80800215 	stw	r2,8(r16)
 80022fc:	2c000215 	stw	r16,8(r5)
 8002300:	14000315 	stw	r16,12(r2)
 8002304:	003ef806 	br	8001ee8 <__alt_data_end+0xf8001ee8>
 8002308:	88c00054 	ori	r3,r17,1
 800230c:	80c00115 	stw	r3,4(r16)
 8002310:	8463883a 	add	r17,r16,r17
 8002314:	34400515 	stw	r17,20(r6)
 8002318:	34400415 	stw	r17,16(r6)
 800231c:	10c00054 	ori	r3,r2,1
 8002320:	8a000315 	stw	r8,12(r17)
 8002324:	8a000215 	stw	r8,8(r17)
 8002328:	88c00115 	stw	r3,4(r17)
 800232c:	88a3883a 	add	r17,r17,r2
 8002330:	88800015 	stw	r2,0(r17)
 8002334:	9009883a 	mov	r4,r18
 8002338:	800ea1c0 	call	800ea1c <__malloc_unlock>
 800233c:	80800204 	addi	r2,r16,8
 8002340:	003f3c06 	br	8002034 <__alt_data_end+0xf8002034>
 8002344:	30c00117 	ldw	r3,4(r6)
 8002348:	003ee706 	br	8001ee8 <__alt_data_end+0xf8001ee8>
 800234c:	5ac00044 	addi	r11,r11,1
 8002350:	588000cc 	andi	r2,r11,3
 8002354:	31800204 	addi	r6,r6,8
 8002358:	103efd1e 	bne	r2,zero,8001f50 <__alt_data_end+0xf8001f50>
 800235c:	00002406 	br	80023f0 <_malloc_r+0x660>
 8002360:	14000317 	ldw	r16,12(r2)
 8002364:	143f251e 	bne	r2,r16,8001ffc <__alt_data_end+0xf8001ffc>
 8002368:	21000084 	addi	r4,r4,2
 800236c:	003ebc06 	br	8001e60 <__alt_data_end+0xf8001e60>
 8002370:	8085883a 	add	r2,r16,r2
 8002374:	10c00117 	ldw	r3,4(r2)
 8002378:	81000317 	ldw	r4,12(r16)
 800237c:	81400217 	ldw	r5,8(r16)
 8002380:	18c00054 	ori	r3,r3,1
 8002384:	10c00115 	stw	r3,4(r2)
 8002388:	29000315 	stw	r4,12(r5)
 800238c:	21400215 	stw	r5,8(r4)
 8002390:	9009883a 	mov	r4,r18
 8002394:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8002398:	80800204 	addi	r2,r16,8
 800239c:	003f2506 	br	8002034 <__alt_data_end+0xf8002034>
 80023a0:	12001704 	addi	r8,r2,92
 80023a4:	11c016c4 	addi	r7,r2,91
 80023a8:	4209883a 	add	r4,r8,r8
 80023ac:	003e9606 	br	8001e08 <__alt_data_end+0xf8001e08>
 80023b0:	3804d1ba 	srli	r2,r7,6
 80023b4:	11400e44 	addi	r5,r2,57
 80023b8:	10c00e04 	addi	r3,r2,56
 80023bc:	294b883a 	add	r5,r5,r5
 80023c0:	003fbc06 	br	80022b4 <__alt_data_end+0xf80022b4>
 80023c4:	84ff5926 	beq	r16,r19,800212c <__alt_data_end+0xf800212c>
 80023c8:	00820074 	movhi	r2,2049
 80023cc:	10991304 	addi	r2,r2,25676
 80023d0:	14000217 	ldw	r16,8(r2)
 80023d4:	00bfff04 	movi	r2,-4
 80023d8:	80c00117 	ldw	r3,4(r16)
 80023dc:	1886703a 	and	r3,r3,r2
 80023e0:	003f9106 	br	8002228 <__alt_data_end+0xf8002228>
 80023e4:	60800217 	ldw	r2,8(r12)
 80023e8:	213fffc4 	addi	r4,r4,-1
 80023ec:	1300651e 	bne	r2,r12,8002584 <_malloc_r+0x7f4>
 80023f0:	208000cc 	andi	r2,r4,3
 80023f4:	633ffe04 	addi	r12,r12,-8
 80023f8:	103ffa1e 	bne	r2,zero,80023e4 <__alt_data_end+0xf80023e4>
 80023fc:	98800117 	ldw	r2,4(r19)
 8002400:	0146303a 	nor	r3,zero,r5
 8002404:	1884703a 	and	r2,r3,r2
 8002408:	98800115 	stw	r2,4(r19)
 800240c:	294b883a 	add	r5,r5,r5
 8002410:	117f2836 	bltu	r2,r5,80020b4 <__alt_data_end+0xf80020b4>
 8002414:	283f2726 	beq	r5,zero,80020b4 <__alt_data_end+0xf80020b4>
 8002418:	2886703a 	and	r3,r5,r2
 800241c:	5809883a 	mov	r4,r11
 8002420:	183ec31e 	bne	r3,zero,8001f30 <__alt_data_end+0xf8001f30>
 8002424:	294b883a 	add	r5,r5,r5
 8002428:	2886703a 	and	r3,r5,r2
 800242c:	21000104 	addi	r4,r4,4
 8002430:	183ffc26 	beq	r3,zero,8002424 <__alt_data_end+0xf8002424>
 8002434:	003ebe06 	br	8001f30 <__alt_data_end+0xf8001f30>
 8002438:	00c05504 	movi	r3,340
 800243c:	18801236 	bltu	r3,r2,8002488 <_malloc_r+0x6f8>
 8002440:	8804d3fa 	srli	r2,r17,15
 8002444:	12001e04 	addi	r8,r2,120
 8002448:	11c01dc4 	addi	r7,r2,119
 800244c:	4209883a 	add	r4,r8,r8
 8002450:	003e6d06 	br	8001e08 <__alt_data_end+0xf8001e08>
 8002454:	00c40004 	movi	r3,4096
 8002458:	003f4606 	br	8002174 <__alt_data_end+0xf8002174>
 800245c:	00800044 	movi	r2,1
 8002460:	a0800115 	stw	r2,4(r20)
 8002464:	003f7406 	br	8002238 <__alt_data_end+0xf8002238>
 8002468:	1805d0ba 	srai	r2,r3,2
 800246c:	01c00044 	movi	r7,1
 8002470:	30c00117 	ldw	r3,4(r6)
 8002474:	388e983a 	sll	r7,r7,r2
 8002478:	2805883a 	mov	r2,r5
 800247c:	38c6b03a 	or	r3,r7,r3
 8002480:	30c00115 	stw	r3,4(r6)
 8002484:	003f9b06 	br	80022f4 <__alt_data_end+0xf80022f4>
 8002488:	00c15504 	movi	r3,1364
 800248c:	18801a36 	bltu	r3,r2,80024f8 <_malloc_r+0x768>
 8002490:	8804d4ba 	srli	r2,r17,18
 8002494:	12001f44 	addi	r8,r2,125
 8002498:	11c01f04 	addi	r7,r2,124
 800249c:	4209883a 	add	r4,r8,r8
 80024a0:	003e5906 	br	8001e08 <__alt_data_end+0xf8001e08>
 80024a4:	ad400404 	addi	r21,r21,16
 80024a8:	003f1706 	br	8002108 <__alt_data_end+0xf8002108>
 80024ac:	00c01504 	movi	r3,84
 80024b0:	18802336 	bltu	r3,r2,8002540 <_malloc_r+0x7b0>
 80024b4:	3804d33a 	srli	r2,r7,12
 80024b8:	11401bc4 	addi	r5,r2,111
 80024bc:	10c01b84 	addi	r3,r2,110
 80024c0:	294b883a 	add	r5,r5,r5
 80024c4:	003f7b06 	br	80022b4 <__alt_data_end+0xf80022b4>
 80024c8:	9c000217 	ldw	r16,8(r19)
 80024cc:	00bfff04 	movi	r2,-4
 80024d0:	80c00117 	ldw	r3,4(r16)
 80024d4:	1886703a 	and	r3,r3,r2
 80024d8:	003f5306 	br	8002228 <__alt_data_end+0xf8002228>
 80024dc:	3083ffcc 	andi	r2,r6,4095
 80024e0:	103f181e 	bne	r2,zero,8002144 <__alt_data_end+0xf8002144>
 80024e4:	99000217 	ldw	r4,8(r19)
 80024e8:	b545883a 	add	r2,r22,r21
 80024ec:	10800054 	ori	r2,r2,1
 80024f0:	20800115 	stw	r2,4(r4)
 80024f4:	003f3e06 	br	80021f0 <__alt_data_end+0xf80021f0>
 80024f8:	01003f84 	movi	r4,254
 80024fc:	02001fc4 	movi	r8,127
 8002500:	01c01f84 	movi	r7,126
 8002504:	003e4006 	br	8001e08 <__alt_data_end+0xf8001e08>
 8002508:	00820074 	movhi	r2,2049
 800250c:	109ecd04 	addi	r2,r2,31540
 8002510:	15000015 	stw	r20,0(r2)
 8002514:	003f1106 	br	800215c <__alt_data_end+0xf800215c>
 8002518:	00800044 	movi	r2,1
 800251c:	002b883a 	mov	r21,zero
 8002520:	003f1f06 	br	80021a0 <__alt_data_end+0xf80021a0>
 8002524:	81400204 	addi	r5,r16,8
 8002528:	9009883a 	mov	r4,r18
 800252c:	80012600 	call	8001260 <_free_r>
 8002530:	008200b4 	movhi	r2,2050
 8002534:	10a5c804 	addi	r2,r2,-26848
 8002538:	10c00017 	ldw	r3,0(r2)
 800253c:	003f2c06 	br	80021f0 <__alt_data_end+0xf80021f0>
 8002540:	00c05504 	movi	r3,340
 8002544:	18800536 	bltu	r3,r2,800255c <_malloc_r+0x7cc>
 8002548:	3804d3fa 	srli	r2,r7,15
 800254c:	11401e04 	addi	r5,r2,120
 8002550:	10c01dc4 	addi	r3,r2,119
 8002554:	294b883a 	add	r5,r5,r5
 8002558:	003f5606 	br	80022b4 <__alt_data_end+0xf80022b4>
 800255c:	00c15504 	movi	r3,1364
 8002560:	18800536 	bltu	r3,r2,8002578 <_malloc_r+0x7e8>
 8002564:	3804d4ba 	srli	r2,r7,18
 8002568:	11401f44 	addi	r5,r2,125
 800256c:	10c01f04 	addi	r3,r2,124
 8002570:	294b883a 	add	r5,r5,r5
 8002574:	003f4f06 	br	80022b4 <__alt_data_end+0xf80022b4>
 8002578:	01403f84 	movi	r5,254
 800257c:	00c01f84 	movi	r3,126
 8002580:	003f4c06 	br	80022b4 <__alt_data_end+0xf80022b4>
 8002584:	98800117 	ldw	r2,4(r19)
 8002588:	003fa006 	br	800240c <__alt_data_end+0xf800240c>
 800258c:	8808d0fa 	srli	r4,r17,3
 8002590:	20800044 	addi	r2,r4,1
 8002594:	1085883a 	add	r2,r2,r2
 8002598:	003e9006 	br	8001fdc <__alt_data_end+0xf8001fdc>

0800259c <memcpy>:
 800259c:	defffd04 	addi	sp,sp,-12
 80025a0:	dfc00215 	stw	ra,8(sp)
 80025a4:	dc400115 	stw	r17,4(sp)
 80025a8:	dc000015 	stw	r16,0(sp)
 80025ac:	00c003c4 	movi	r3,15
 80025b0:	2005883a 	mov	r2,r4
 80025b4:	1980452e 	bgeu	r3,r6,80026cc <memcpy+0x130>
 80025b8:	2906b03a 	or	r3,r5,r4
 80025bc:	18c000cc 	andi	r3,r3,3
 80025c0:	1800441e 	bne	r3,zero,80026d4 <memcpy+0x138>
 80025c4:	347ffc04 	addi	r17,r6,-16
 80025c8:	8822d13a 	srli	r17,r17,4
 80025cc:	28c00104 	addi	r3,r5,4
 80025d0:	23400104 	addi	r13,r4,4
 80025d4:	8820913a 	slli	r16,r17,4
 80025d8:	2b000204 	addi	r12,r5,8
 80025dc:	22c00204 	addi	r11,r4,8
 80025e0:	84000504 	addi	r16,r16,20
 80025e4:	2a800304 	addi	r10,r5,12
 80025e8:	22400304 	addi	r9,r4,12
 80025ec:	2c21883a 	add	r16,r5,r16
 80025f0:	2811883a 	mov	r8,r5
 80025f4:	200f883a 	mov	r7,r4
 80025f8:	41000017 	ldw	r4,0(r8)
 80025fc:	1fc00017 	ldw	ra,0(r3)
 8002600:	63c00017 	ldw	r15,0(r12)
 8002604:	39000015 	stw	r4,0(r7)
 8002608:	53800017 	ldw	r14,0(r10)
 800260c:	6fc00015 	stw	ra,0(r13)
 8002610:	5bc00015 	stw	r15,0(r11)
 8002614:	4b800015 	stw	r14,0(r9)
 8002618:	18c00404 	addi	r3,r3,16
 800261c:	39c00404 	addi	r7,r7,16
 8002620:	42000404 	addi	r8,r8,16
 8002624:	6b400404 	addi	r13,r13,16
 8002628:	63000404 	addi	r12,r12,16
 800262c:	5ac00404 	addi	r11,r11,16
 8002630:	52800404 	addi	r10,r10,16
 8002634:	4a400404 	addi	r9,r9,16
 8002638:	1c3fef1e 	bne	r3,r16,80025f8 <__alt_data_end+0xf80025f8>
 800263c:	89c00044 	addi	r7,r17,1
 8002640:	380e913a 	slli	r7,r7,4
 8002644:	310003cc 	andi	r4,r6,15
 8002648:	02c000c4 	movi	r11,3
 800264c:	11c7883a 	add	r3,r2,r7
 8002650:	29cb883a 	add	r5,r5,r7
 8002654:	5900212e 	bgeu	r11,r4,80026dc <memcpy+0x140>
 8002658:	1813883a 	mov	r9,r3
 800265c:	2811883a 	mov	r8,r5
 8002660:	200f883a 	mov	r7,r4
 8002664:	42800017 	ldw	r10,0(r8)
 8002668:	4a400104 	addi	r9,r9,4
 800266c:	39ffff04 	addi	r7,r7,-4
 8002670:	4abfff15 	stw	r10,-4(r9)
 8002674:	42000104 	addi	r8,r8,4
 8002678:	59fffa36 	bltu	r11,r7,8002664 <__alt_data_end+0xf8002664>
 800267c:	213fff04 	addi	r4,r4,-4
 8002680:	2008d0ba 	srli	r4,r4,2
 8002684:	318000cc 	andi	r6,r6,3
 8002688:	21000044 	addi	r4,r4,1
 800268c:	2109883a 	add	r4,r4,r4
 8002690:	2109883a 	add	r4,r4,r4
 8002694:	1907883a 	add	r3,r3,r4
 8002698:	290b883a 	add	r5,r5,r4
 800269c:	30000626 	beq	r6,zero,80026b8 <memcpy+0x11c>
 80026a0:	198d883a 	add	r6,r3,r6
 80026a4:	29c00003 	ldbu	r7,0(r5)
 80026a8:	18c00044 	addi	r3,r3,1
 80026ac:	29400044 	addi	r5,r5,1
 80026b0:	19ffffc5 	stb	r7,-1(r3)
 80026b4:	19bffb1e 	bne	r3,r6,80026a4 <__alt_data_end+0xf80026a4>
 80026b8:	dfc00217 	ldw	ra,8(sp)
 80026bc:	dc400117 	ldw	r17,4(sp)
 80026c0:	dc000017 	ldw	r16,0(sp)
 80026c4:	dec00304 	addi	sp,sp,12
 80026c8:	f800283a 	ret
 80026cc:	2007883a 	mov	r3,r4
 80026d0:	003ff206 	br	800269c <__alt_data_end+0xf800269c>
 80026d4:	2007883a 	mov	r3,r4
 80026d8:	003ff106 	br	80026a0 <__alt_data_end+0xf80026a0>
 80026dc:	200d883a 	mov	r6,r4
 80026e0:	003fee06 	br	800269c <__alt_data_end+0xf800269c>

080026e4 <memset>:
 80026e4:	20c000cc 	andi	r3,r4,3
 80026e8:	2005883a 	mov	r2,r4
 80026ec:	18004426 	beq	r3,zero,8002800 <memset+0x11c>
 80026f0:	31ffffc4 	addi	r7,r6,-1
 80026f4:	30004026 	beq	r6,zero,80027f8 <memset+0x114>
 80026f8:	2813883a 	mov	r9,r5
 80026fc:	200d883a 	mov	r6,r4
 8002700:	2007883a 	mov	r3,r4
 8002704:	00000406 	br	8002718 <memset+0x34>
 8002708:	3a3fffc4 	addi	r8,r7,-1
 800270c:	31800044 	addi	r6,r6,1
 8002710:	38003926 	beq	r7,zero,80027f8 <memset+0x114>
 8002714:	400f883a 	mov	r7,r8
 8002718:	18c00044 	addi	r3,r3,1
 800271c:	32400005 	stb	r9,0(r6)
 8002720:	1a0000cc 	andi	r8,r3,3
 8002724:	403ff81e 	bne	r8,zero,8002708 <__alt_data_end+0xf8002708>
 8002728:	010000c4 	movi	r4,3
 800272c:	21c02d2e 	bgeu	r4,r7,80027e4 <memset+0x100>
 8002730:	29003fcc 	andi	r4,r5,255
 8002734:	200c923a 	slli	r6,r4,8
 8002738:	3108b03a 	or	r4,r6,r4
 800273c:	200c943a 	slli	r6,r4,16
 8002740:	218cb03a 	or	r6,r4,r6
 8002744:	010003c4 	movi	r4,15
 8002748:	21c0182e 	bgeu	r4,r7,80027ac <memset+0xc8>
 800274c:	3b3ffc04 	addi	r12,r7,-16
 8002750:	6018d13a 	srli	r12,r12,4
 8002754:	1a000104 	addi	r8,r3,4
 8002758:	1ac00204 	addi	r11,r3,8
 800275c:	6008913a 	slli	r4,r12,4
 8002760:	1a800304 	addi	r10,r3,12
 8002764:	1813883a 	mov	r9,r3
 8002768:	21000504 	addi	r4,r4,20
 800276c:	1909883a 	add	r4,r3,r4
 8002770:	49800015 	stw	r6,0(r9)
 8002774:	41800015 	stw	r6,0(r8)
 8002778:	59800015 	stw	r6,0(r11)
 800277c:	51800015 	stw	r6,0(r10)
 8002780:	42000404 	addi	r8,r8,16
 8002784:	4a400404 	addi	r9,r9,16
 8002788:	5ac00404 	addi	r11,r11,16
 800278c:	52800404 	addi	r10,r10,16
 8002790:	413ff71e 	bne	r8,r4,8002770 <__alt_data_end+0xf8002770>
 8002794:	63000044 	addi	r12,r12,1
 8002798:	6018913a 	slli	r12,r12,4
 800279c:	39c003cc 	andi	r7,r7,15
 80027a0:	010000c4 	movi	r4,3
 80027a4:	1b07883a 	add	r3,r3,r12
 80027a8:	21c00e2e 	bgeu	r4,r7,80027e4 <memset+0x100>
 80027ac:	1813883a 	mov	r9,r3
 80027b0:	3811883a 	mov	r8,r7
 80027b4:	010000c4 	movi	r4,3
 80027b8:	49800015 	stw	r6,0(r9)
 80027bc:	423fff04 	addi	r8,r8,-4
 80027c0:	4a400104 	addi	r9,r9,4
 80027c4:	223ffc36 	bltu	r4,r8,80027b8 <__alt_data_end+0xf80027b8>
 80027c8:	393fff04 	addi	r4,r7,-4
 80027cc:	2008d0ba 	srli	r4,r4,2
 80027d0:	39c000cc 	andi	r7,r7,3
 80027d4:	21000044 	addi	r4,r4,1
 80027d8:	2109883a 	add	r4,r4,r4
 80027dc:	2109883a 	add	r4,r4,r4
 80027e0:	1907883a 	add	r3,r3,r4
 80027e4:	38000526 	beq	r7,zero,80027fc <memset+0x118>
 80027e8:	19cf883a 	add	r7,r3,r7
 80027ec:	19400005 	stb	r5,0(r3)
 80027f0:	18c00044 	addi	r3,r3,1
 80027f4:	38fffd1e 	bne	r7,r3,80027ec <__alt_data_end+0xf80027ec>
 80027f8:	f800283a 	ret
 80027fc:	f800283a 	ret
 8002800:	2007883a 	mov	r3,r4
 8002804:	300f883a 	mov	r7,r6
 8002808:	003fc706 	br	8002728 <__alt_data_end+0xf8002728>

0800280c <_open_r>:
 800280c:	defffd04 	addi	sp,sp,-12
 8002810:	2805883a 	mov	r2,r5
 8002814:	dc000015 	stw	r16,0(sp)
 8002818:	040200b4 	movhi	r16,2050
 800281c:	dc400115 	stw	r17,4(sp)
 8002820:	300b883a 	mov	r5,r6
 8002824:	8425ad04 	addi	r16,r16,-26956
 8002828:	2023883a 	mov	r17,r4
 800282c:	380d883a 	mov	r6,r7
 8002830:	1009883a 	mov	r4,r2
 8002834:	dfc00215 	stw	ra,8(sp)
 8002838:	80000015 	stw	zero,0(r16)
 800283c:	800eb400 	call	800eb40 <open>
 8002840:	00ffffc4 	movi	r3,-1
 8002844:	10c00526 	beq	r2,r3,800285c <_open_r+0x50>
 8002848:	dfc00217 	ldw	ra,8(sp)
 800284c:	dc400117 	ldw	r17,4(sp)
 8002850:	dc000017 	ldw	r16,0(sp)
 8002854:	dec00304 	addi	sp,sp,12
 8002858:	f800283a 	ret
 800285c:	80c00017 	ldw	r3,0(r16)
 8002860:	183ff926 	beq	r3,zero,8002848 <__alt_data_end+0xf8002848>
 8002864:	88c00015 	stw	r3,0(r17)
 8002868:	003ff706 	br	8002848 <__alt_data_end+0xf8002848>

0800286c <_perror_r>:
 800286c:	defffd04 	addi	sp,sp,-12
 8002870:	dc000115 	stw	r16,4(sp)
 8002874:	dfc00215 	stw	ra,8(sp)
 8002878:	2021883a 	mov	r16,r4
 800287c:	28000326 	beq	r5,zero,800288c <_perror_r+0x20>
 8002880:	28c00007 	ldb	r3,0(r5)
 8002884:	2805883a 	mov	r2,r5
 8002888:	1800101e 	bne	r3,zero,80028cc <_perror_r+0x60>
 800288c:	81400017 	ldw	r5,0(r16)
 8002890:	d80f883a 	mov	r7,sp
 8002894:	01800044 	movi	r6,1
 8002898:	8009883a 	mov	r4,r16
 800289c:	8002de00 	call	8002de0 <_strerror_r>
 80028a0:	10000326 	beq	r2,zero,80028b0 <_perror_r+0x44>
 80028a4:	81400317 	ldw	r5,12(r16)
 80028a8:	1009883a 	mov	r4,r2
 80028ac:	80074400 	call	8007440 <fputs>
 80028b0:	81400317 	ldw	r5,12(r16)
 80028b4:	01000284 	movi	r4,10
 80028b8:	80073480 	call	8007348 <fputc>
 80028bc:	dfc00217 	ldw	ra,8(sp)
 80028c0:	dc000117 	ldw	r16,4(sp)
 80028c4:	dec00304 	addi	sp,sp,12
 80028c8:	f800283a 	ret
 80028cc:	21400317 	ldw	r5,12(r4)
 80028d0:	1009883a 	mov	r4,r2
 80028d4:	80074400 	call	8007440 <fputs>
 80028d8:	81400317 	ldw	r5,12(r16)
 80028dc:	01020074 	movhi	r4,2049
 80028e0:	21158304 	addi	r4,r4,22028
 80028e4:	80074400 	call	8007440 <fputs>
 80028e8:	003fe806 	br	800288c <__alt_data_end+0xf800288c>

080028ec <perror>:
 80028ec:	00820074 	movhi	r2,2049
 80028f0:	109ecc04 	addi	r2,r2,31536
 80028f4:	200b883a 	mov	r5,r4
 80028f8:	11000017 	ldw	r4,0(r2)
 80028fc:	800286c1 	jmpi	800286c <_perror_r>

08002900 <_printf_r>:
 8002900:	defffd04 	addi	sp,sp,-12
 8002904:	2805883a 	mov	r2,r5
 8002908:	dfc00015 	stw	ra,0(sp)
 800290c:	d9800115 	stw	r6,4(sp)
 8002910:	d9c00215 	stw	r7,8(sp)
 8002914:	21400217 	ldw	r5,8(r4)
 8002918:	d9c00104 	addi	r7,sp,4
 800291c:	100d883a 	mov	r6,r2
 8002920:	80034f80 	call	80034f8 <___vfprintf_internal_r>
 8002924:	dfc00017 	ldw	ra,0(sp)
 8002928:	dec00304 	addi	sp,sp,12
 800292c:	f800283a 	ret

08002930 <printf>:
 8002930:	defffc04 	addi	sp,sp,-16
 8002934:	dfc00015 	stw	ra,0(sp)
 8002938:	d9400115 	stw	r5,4(sp)
 800293c:	d9800215 	stw	r6,8(sp)
 8002940:	d9c00315 	stw	r7,12(sp)
 8002944:	00820074 	movhi	r2,2049
 8002948:	109ecc04 	addi	r2,r2,31536
 800294c:	10800017 	ldw	r2,0(r2)
 8002950:	200b883a 	mov	r5,r4
 8002954:	d9800104 	addi	r6,sp,4
 8002958:	11000217 	ldw	r4,8(r2)
 800295c:	80056f00 	call	80056f0 <__vfprintf_internal>
 8002960:	dfc00017 	ldw	ra,0(sp)
 8002964:	dec00404 	addi	sp,sp,16
 8002968:	f800283a 	ret

0800296c <_putchar_r>:
 800296c:	21800217 	ldw	r6,8(r4)
 8002970:	8008ce01 	jmpi	8008ce0 <_putc_r>

08002974 <putchar>:
 8002974:	00820074 	movhi	r2,2049
 8002978:	109ecc04 	addi	r2,r2,31536
 800297c:	200b883a 	mov	r5,r4
 8002980:	11000017 	ldw	r4,0(r2)
 8002984:	21800217 	ldw	r6,8(r4)
 8002988:	8008ce01 	jmpi	8008ce0 <_putc_r>

0800298c <_puts_r>:
 800298c:	defff604 	addi	sp,sp,-40
 8002990:	dc000715 	stw	r16,28(sp)
 8002994:	2021883a 	mov	r16,r4
 8002998:	2809883a 	mov	r4,r5
 800299c:	dc400815 	stw	r17,32(sp)
 80029a0:	dfc00915 	stw	ra,36(sp)
 80029a4:	2823883a 	mov	r17,r5
 80029a8:	80034580 	call	8003458 <strlen>
 80029ac:	10c00044 	addi	r3,r2,1
 80029b0:	d8800115 	stw	r2,4(sp)
 80029b4:	00820074 	movhi	r2,2049
 80029b8:	10958404 	addi	r2,r2,22032
 80029bc:	d8800215 	stw	r2,8(sp)
 80029c0:	00800044 	movi	r2,1
 80029c4:	d8800315 	stw	r2,12(sp)
 80029c8:	00800084 	movi	r2,2
 80029cc:	dc400015 	stw	r17,0(sp)
 80029d0:	d8c00615 	stw	r3,24(sp)
 80029d4:	dec00415 	stw	sp,16(sp)
 80029d8:	d8800515 	stw	r2,20(sp)
 80029dc:	80000226 	beq	r16,zero,80029e8 <_puts_r+0x5c>
 80029e0:	80800e17 	ldw	r2,56(r16)
 80029e4:	10001426 	beq	r2,zero,8002a38 <_puts_r+0xac>
 80029e8:	81400217 	ldw	r5,8(r16)
 80029ec:	2880030b 	ldhu	r2,12(r5)
 80029f0:	10c8000c 	andi	r3,r2,8192
 80029f4:	1800061e 	bne	r3,zero,8002a10 <_puts_r+0x84>
 80029f8:	29001917 	ldw	r4,100(r5)
 80029fc:	00f7ffc4 	movi	r3,-8193
 8002a00:	10880014 	ori	r2,r2,8192
 8002a04:	20c6703a 	and	r3,r4,r3
 8002a08:	2880030d 	sth	r2,12(r5)
 8002a0c:	28c01915 	stw	r3,100(r5)
 8002a10:	d9800404 	addi	r6,sp,16
 8002a14:	8009883a 	mov	r4,r16
 8002a18:	80074580 	call	8007458 <__sfvwrite_r>
 8002a1c:	1000091e 	bne	r2,zero,8002a44 <_puts_r+0xb8>
 8002a20:	00800284 	movi	r2,10
 8002a24:	dfc00917 	ldw	ra,36(sp)
 8002a28:	dc400817 	ldw	r17,32(sp)
 8002a2c:	dc000717 	ldw	r16,28(sp)
 8002a30:	dec00a04 	addi	sp,sp,40
 8002a34:	f800283a 	ret
 8002a38:	8009883a 	mov	r4,r16
 8002a3c:	8000d800 	call	8000d80 <__sinit>
 8002a40:	003fe906 	br	80029e8 <__alt_data_end+0xf80029e8>
 8002a44:	00bfffc4 	movi	r2,-1
 8002a48:	003ff606 	br	8002a24 <__alt_data_end+0xf8002a24>

08002a4c <puts>:
 8002a4c:	00820074 	movhi	r2,2049
 8002a50:	109ecc04 	addi	r2,r2,31536
 8002a54:	200b883a 	mov	r5,r4
 8002a58:	11000017 	ldw	r4,0(r2)
 8002a5c:	800298c1 	jmpi	800298c <_puts_r>

08002a60 <lflush>:
 8002a60:	2080030b 	ldhu	r2,12(r4)
 8002a64:	00c00244 	movi	r3,9
 8002a68:	1080024c 	andi	r2,r2,9
 8002a6c:	10c00226 	beq	r2,r3,8002a78 <lflush+0x18>
 8002a70:	0005883a 	mov	r2,zero
 8002a74:	f800283a 	ret
 8002a78:	8000a001 	jmpi	8000a00 <fflush>

08002a7c <__srefill_r>:
 8002a7c:	defffc04 	addi	sp,sp,-16
 8002a80:	dc400115 	stw	r17,4(sp)
 8002a84:	dc000015 	stw	r16,0(sp)
 8002a88:	dfc00315 	stw	ra,12(sp)
 8002a8c:	dc800215 	stw	r18,8(sp)
 8002a90:	2023883a 	mov	r17,r4
 8002a94:	2821883a 	mov	r16,r5
 8002a98:	20000226 	beq	r4,zero,8002aa4 <__srefill_r+0x28>
 8002a9c:	20800e17 	ldw	r2,56(r4)
 8002aa0:	10003c26 	beq	r2,zero,8002b94 <__srefill_r+0x118>
 8002aa4:	80c0030b 	ldhu	r3,12(r16)
 8002aa8:	1908000c 	andi	r4,r3,8192
 8002aac:	1805883a 	mov	r2,r3
 8002ab0:	2000071e 	bne	r4,zero,8002ad0 <__srefill_r+0x54>
 8002ab4:	81001917 	ldw	r4,100(r16)
 8002ab8:	18880014 	ori	r2,r3,8192
 8002abc:	00f7ffc4 	movi	r3,-8193
 8002ac0:	20c8703a 	and	r4,r4,r3
 8002ac4:	8080030d 	sth	r2,12(r16)
 8002ac8:	1007883a 	mov	r3,r2
 8002acc:	81001915 	stw	r4,100(r16)
 8002ad0:	80000115 	stw	zero,4(r16)
 8002ad4:	1100080c 	andi	r4,r2,32
 8002ad8:	2000571e 	bne	r4,zero,8002c38 <__srefill_r+0x1bc>
 8002adc:	1100010c 	andi	r4,r2,4
 8002ae0:	20001f26 	beq	r4,zero,8002b60 <__srefill_r+0xe4>
 8002ae4:	81400c17 	ldw	r5,48(r16)
 8002ae8:	28000826 	beq	r5,zero,8002b0c <__srefill_r+0x90>
 8002aec:	80801004 	addi	r2,r16,64
 8002af0:	28800226 	beq	r5,r2,8002afc <__srefill_r+0x80>
 8002af4:	8809883a 	mov	r4,r17
 8002af8:	80012600 	call	8001260 <_free_r>
 8002afc:	80800f17 	ldw	r2,60(r16)
 8002b00:	80000c15 	stw	zero,48(r16)
 8002b04:	80800115 	stw	r2,4(r16)
 8002b08:	1000391e 	bne	r2,zero,8002bf0 <__srefill_r+0x174>
 8002b0c:	80800417 	ldw	r2,16(r16)
 8002b10:	10004b26 	beq	r2,zero,8002c40 <__srefill_r+0x1c4>
 8002b14:	8480030b 	ldhu	r18,12(r16)
 8002b18:	908000cc 	andi	r2,r18,3
 8002b1c:	10001f1e 	bne	r2,zero,8002b9c <__srefill_r+0x120>
 8002b20:	81800417 	ldw	r6,16(r16)
 8002b24:	80800817 	ldw	r2,32(r16)
 8002b28:	81c00517 	ldw	r7,20(r16)
 8002b2c:	81400717 	ldw	r5,28(r16)
 8002b30:	81800015 	stw	r6,0(r16)
 8002b34:	8809883a 	mov	r4,r17
 8002b38:	103ee83a 	callr	r2
 8002b3c:	80800115 	stw	r2,4(r16)
 8002b40:	00800e0e 	bge	zero,r2,8002b7c <__srefill_r+0x100>
 8002b44:	0005883a 	mov	r2,zero
 8002b48:	dfc00317 	ldw	ra,12(sp)
 8002b4c:	dc800217 	ldw	r18,8(sp)
 8002b50:	dc400117 	ldw	r17,4(sp)
 8002b54:	dc000017 	ldw	r16,0(sp)
 8002b58:	dec00404 	addi	sp,sp,16
 8002b5c:	f800283a 	ret
 8002b60:	1100040c 	andi	r4,r2,16
 8002b64:	20003026 	beq	r4,zero,8002c28 <__srefill_r+0x1ac>
 8002b68:	1080020c 	andi	r2,r2,8
 8002b6c:	1000241e 	bne	r2,zero,8002c00 <__srefill_r+0x184>
 8002b70:	18c00114 	ori	r3,r3,4
 8002b74:	80c0030d 	sth	r3,12(r16)
 8002b78:	003fe406 	br	8002b0c <__alt_data_end+0xf8002b0c>
 8002b7c:	80c0030b 	ldhu	r3,12(r16)
 8002b80:	1000161e 	bne	r2,zero,8002bdc <__srefill_r+0x160>
 8002b84:	18c00814 	ori	r3,r3,32
 8002b88:	00bfffc4 	movi	r2,-1
 8002b8c:	80c0030d 	sth	r3,12(r16)
 8002b90:	003fed06 	br	8002b48 <__alt_data_end+0xf8002b48>
 8002b94:	8000d800 	call	8000d80 <__sinit>
 8002b98:	003fc206 	br	8002aa4 <__alt_data_end+0xf8002aa4>
 8002b9c:	00820074 	movhi	r2,2049
 8002ba0:	109ecb04 	addi	r2,r2,31532
 8002ba4:	11000017 	ldw	r4,0(r2)
 8002ba8:	01420034 	movhi	r5,2048
 8002bac:	00800044 	movi	r2,1
 8002bb0:	294a9804 	addi	r5,r5,10848
 8002bb4:	8080030d 	sth	r2,12(r16)
 8002bb8:	8001a4c0 	call	8001a4c <_fwalk>
 8002bbc:	00800244 	movi	r2,9
 8002bc0:	8480030d 	sth	r18,12(r16)
 8002bc4:	9480024c 	andi	r18,r18,9
 8002bc8:	90bfd51e 	bne	r18,r2,8002b20 <__alt_data_end+0xf8002b20>
 8002bcc:	800b883a 	mov	r5,r16
 8002bd0:	8809883a 	mov	r4,r17
 8002bd4:	80007880 	call	8000788 <__sflush_r>
 8002bd8:	003fd106 	br	8002b20 <__alt_data_end+0xf8002b20>
 8002bdc:	18c01014 	ori	r3,r3,64
 8002be0:	80000115 	stw	zero,4(r16)
 8002be4:	00bfffc4 	movi	r2,-1
 8002be8:	80c0030d 	sth	r3,12(r16)
 8002bec:	003fd606 	br	8002b48 <__alt_data_end+0xf8002b48>
 8002bf0:	80c00e17 	ldw	r3,56(r16)
 8002bf4:	0005883a 	mov	r2,zero
 8002bf8:	80c00015 	stw	r3,0(r16)
 8002bfc:	003fd206 	br	8002b48 <__alt_data_end+0xf8002b48>
 8002c00:	800b883a 	mov	r5,r16
 8002c04:	8809883a 	mov	r4,r17
 8002c08:	80009a40 	call	80009a4 <_fflush_r>
 8002c0c:	10000a1e 	bne	r2,zero,8002c38 <__srefill_r+0x1bc>
 8002c10:	8080030b 	ldhu	r2,12(r16)
 8002c14:	00fffdc4 	movi	r3,-9
 8002c18:	80000215 	stw	zero,8(r16)
 8002c1c:	1886703a 	and	r3,r3,r2
 8002c20:	80000615 	stw	zero,24(r16)
 8002c24:	003fd206 	br	8002b70 <__alt_data_end+0xf8002b70>
 8002c28:	00800244 	movi	r2,9
 8002c2c:	88800015 	stw	r2,0(r17)
 8002c30:	18c01014 	ori	r3,r3,64
 8002c34:	80c0030d 	sth	r3,12(r16)
 8002c38:	00bfffc4 	movi	r2,-1
 8002c3c:	003fc206 	br	8002b48 <__alt_data_end+0xf8002b48>
 8002c40:	800b883a 	mov	r5,r16
 8002c44:	8809883a 	mov	r4,r17
 8002c48:	8001bd40 	call	8001bd4 <__smakebuf_r>
 8002c4c:	003fb106 	br	8002b14 <__alt_data_end+0xf8002b14>

08002c50 <_sbrk_r>:
 8002c50:	defffd04 	addi	sp,sp,-12
 8002c54:	dc000015 	stw	r16,0(sp)
 8002c58:	040200b4 	movhi	r16,2050
 8002c5c:	dc400115 	stw	r17,4(sp)
 8002c60:	8425ad04 	addi	r16,r16,-26956
 8002c64:	2023883a 	mov	r17,r4
 8002c68:	2809883a 	mov	r4,r5
 8002c6c:	dfc00215 	stw	ra,8(sp)
 8002c70:	80000015 	stw	zero,0(r16)
 8002c74:	800ee300 	call	800ee30 <sbrk>
 8002c78:	00ffffc4 	movi	r3,-1
 8002c7c:	10c00526 	beq	r2,r3,8002c94 <_sbrk_r+0x44>
 8002c80:	dfc00217 	ldw	ra,8(sp)
 8002c84:	dc400117 	ldw	r17,4(sp)
 8002c88:	dc000017 	ldw	r16,0(sp)
 8002c8c:	dec00304 	addi	sp,sp,12
 8002c90:	f800283a 	ret
 8002c94:	80c00017 	ldw	r3,0(r16)
 8002c98:	183ff926 	beq	r3,zero,8002c80 <__alt_data_end+0xf8002c80>
 8002c9c:	88c00015 	stw	r3,0(r17)
 8002ca0:	003ff706 	br	8002c80 <__alt_data_end+0xf8002c80>

08002ca4 <__sread>:
 8002ca4:	defffe04 	addi	sp,sp,-8
 8002ca8:	dc000015 	stw	r16,0(sp)
 8002cac:	2821883a 	mov	r16,r5
 8002cb0:	2940038f 	ldh	r5,14(r5)
 8002cb4:	dfc00115 	stw	ra,4(sp)
 8002cb8:	8008e480 	call	8008e48 <_read_r>
 8002cbc:	10000716 	blt	r2,zero,8002cdc <__sread+0x38>
 8002cc0:	80c01417 	ldw	r3,80(r16)
 8002cc4:	1887883a 	add	r3,r3,r2
 8002cc8:	80c01415 	stw	r3,80(r16)
 8002ccc:	dfc00117 	ldw	ra,4(sp)
 8002cd0:	dc000017 	ldw	r16,0(sp)
 8002cd4:	dec00204 	addi	sp,sp,8
 8002cd8:	f800283a 	ret
 8002cdc:	80c0030b 	ldhu	r3,12(r16)
 8002ce0:	18fbffcc 	andi	r3,r3,61439
 8002ce4:	80c0030d 	sth	r3,12(r16)
 8002ce8:	dfc00117 	ldw	ra,4(sp)
 8002cec:	dc000017 	ldw	r16,0(sp)
 8002cf0:	dec00204 	addi	sp,sp,8
 8002cf4:	f800283a 	ret

08002cf8 <__seofread>:
 8002cf8:	0005883a 	mov	r2,zero
 8002cfc:	f800283a 	ret

08002d00 <__swrite>:
 8002d00:	2880030b 	ldhu	r2,12(r5)
 8002d04:	defffb04 	addi	sp,sp,-20
 8002d08:	dcc00315 	stw	r19,12(sp)
 8002d0c:	dc800215 	stw	r18,8(sp)
 8002d10:	dc400115 	stw	r17,4(sp)
 8002d14:	dc000015 	stw	r16,0(sp)
 8002d18:	dfc00415 	stw	ra,16(sp)
 8002d1c:	10c0400c 	andi	r3,r2,256
 8002d20:	2821883a 	mov	r16,r5
 8002d24:	2023883a 	mov	r17,r4
 8002d28:	3025883a 	mov	r18,r6
 8002d2c:	3827883a 	mov	r19,r7
 8002d30:	18000526 	beq	r3,zero,8002d48 <__swrite+0x48>
 8002d34:	2940038f 	ldh	r5,14(r5)
 8002d38:	01c00084 	movi	r7,2
 8002d3c:	000d883a 	mov	r6,zero
 8002d40:	8007a440 	call	8007a44 <_lseek_r>
 8002d44:	8080030b 	ldhu	r2,12(r16)
 8002d48:	8140038f 	ldh	r5,14(r16)
 8002d4c:	10bbffcc 	andi	r2,r2,61439
 8002d50:	980f883a 	mov	r7,r19
 8002d54:	900d883a 	mov	r6,r18
 8002d58:	8809883a 	mov	r4,r17
 8002d5c:	8080030d 	sth	r2,12(r16)
 8002d60:	dfc00417 	ldw	ra,16(sp)
 8002d64:	dcc00317 	ldw	r19,12(sp)
 8002d68:	dc800217 	ldw	r18,8(sp)
 8002d6c:	dc400117 	ldw	r17,4(sp)
 8002d70:	dc000017 	ldw	r16,0(sp)
 8002d74:	dec00504 	addi	sp,sp,20
 8002d78:	80057c81 	jmpi	80057c8 <_write_r>

08002d7c <__sseek>:
 8002d7c:	defffe04 	addi	sp,sp,-8
 8002d80:	dc000015 	stw	r16,0(sp)
 8002d84:	2821883a 	mov	r16,r5
 8002d88:	2940038f 	ldh	r5,14(r5)
 8002d8c:	dfc00115 	stw	ra,4(sp)
 8002d90:	8007a440 	call	8007a44 <_lseek_r>
 8002d94:	00ffffc4 	movi	r3,-1
 8002d98:	10c00826 	beq	r2,r3,8002dbc <__sseek+0x40>
 8002d9c:	80c0030b 	ldhu	r3,12(r16)
 8002da0:	80801415 	stw	r2,80(r16)
 8002da4:	18c40014 	ori	r3,r3,4096
 8002da8:	80c0030d 	sth	r3,12(r16)
 8002dac:	dfc00117 	ldw	ra,4(sp)
 8002db0:	dc000017 	ldw	r16,0(sp)
 8002db4:	dec00204 	addi	sp,sp,8
 8002db8:	f800283a 	ret
 8002dbc:	80c0030b 	ldhu	r3,12(r16)
 8002dc0:	18fbffcc 	andi	r3,r3,61439
 8002dc4:	80c0030d 	sth	r3,12(r16)
 8002dc8:	dfc00117 	ldw	ra,4(sp)
 8002dcc:	dc000017 	ldw	r16,0(sp)
 8002dd0:	dec00204 	addi	sp,sp,8
 8002dd4:	f800283a 	ret

08002dd8 <__sclose>:
 8002dd8:	2940038f 	ldh	r5,14(r5)
 8002ddc:	800597c1 	jmpi	800597c <_close_r>

08002de0 <_strerror_r>:
 8002de0:	deffff04 	addi	sp,sp,-4
 8002de4:	2807883a 	mov	r3,r5
 8002de8:	dfc00015 	stw	ra,0(sp)
 8002dec:	00802384 	movi	r2,142
 8002df0:	300b883a 	mov	r5,r6
 8002df4:	10c18736 	bltu	r2,r3,8003414 <_strerror_r+0x634>
 8002df8:	181090ba 	slli	r8,r3,2
 8002dfc:	00820034 	movhi	r2,2048
 8002e00:	108b8404 	addi	r2,r2,11792
 8002e04:	4085883a 	add	r2,r8,r2
 8002e08:	10800017 	ldw	r2,0(r2)
 8002e0c:	1000683a 	jmp	r2
 8002e10:	0800304c 	andi	zero,at,193
 8002e14:	08003408 	cmpgei	zero,at,208
 8002e18:	080033fc 	xorhi	zero,at,207
 8002e1c:	080033f0 	cmpltui	zero,at,207
 8002e20:	080033e4 	muli	zero,at,207
 8002e24:	080033d8 	cmpnei	zero,at,207
 8002e28:	080033cc 	andi	zero,at,207
 8002e2c:	080033c0 	call	80033c <__alt_mem_onchip_memory2_0+0x60033c>
 8002e30:	080033b4 	orhi	zero,at,206
 8002e34:	080033a8 	cmpgeui	zero,at,206
 8002e38:	0800339c 	xori	zero,at,206
 8002e3c:	08003390 	cmplti	zero,at,206
 8002e40:	08003384 	addi	zero,at,206
 8002e44:	08003378 	rdprs	zero,at,205
 8002e48:	0800336c 	andhi	zero,at,205
 8002e4c:	08003414 	ori	zero,at,208
 8002e50:	08003360 	cmpeqi	zero,at,205
 8002e54:	08003354 	ori	zero,at,205
 8002e58:	08003348 	cmpgei	zero,at,205
 8002e5c:	0800333c 	xorhi	zero,at,204
 8002e60:	08003330 	cmpltui	zero,at,204
 8002e64:	08003324 	muli	zero,at,204
 8002e68:	08003318 	cmpnei	zero,at,204
 8002e6c:	0800330c 	andi	zero,at,204
 8002e70:	08003300 	call	800330 <__alt_mem_onchip_memory2_0+0x600330>
 8002e74:	080032f4 	orhi	zero,at,203
 8002e78:	080032e8 	cmpgeui	zero,at,203
 8002e7c:	080032dc 	xori	zero,at,203
 8002e80:	080032d0 	cmplti	zero,at,203
 8002e84:	080032c4 	addi	zero,at,203
 8002e88:	080032b8 	rdprs	zero,at,202
 8002e8c:	080032ac 	andhi	zero,at,202
 8002e90:	080032a0 	cmpeqi	zero,at,202
 8002e94:	08003294 	ori	zero,at,202
 8002e98:	08003288 	cmpgei	zero,at,202
 8002e9c:	0800327c 	xorhi	zero,at,201
 8002ea0:	08003270 	cmpltui	zero,at,201
 8002ea4:	08003414 	ori	zero,at,208
 8002ea8:	08003414 	ori	zero,at,208
 8002eac:	08003414 	ori	zero,at,208
 8002eb0:	08003414 	ori	zero,at,208
 8002eb4:	08003414 	ori	zero,at,208
 8002eb8:	08003414 	ori	zero,at,208
 8002ebc:	08003414 	ori	zero,at,208
 8002ec0:	08003414 	ori	zero,at,208
 8002ec4:	08003264 	muli	zero,at,201
 8002ec8:	08003258 	cmpnei	zero,at,201
 8002ecc:	08003414 	ori	zero,at,208
 8002ed0:	08003414 	ori	zero,at,208
 8002ed4:	08003414 	ori	zero,at,208
 8002ed8:	08003414 	ori	zero,at,208
 8002edc:	08003414 	ori	zero,at,208
 8002ee0:	08003414 	ori	zero,at,208
 8002ee4:	08003414 	ori	zero,at,208
 8002ee8:	08003414 	ori	zero,at,208
 8002eec:	08003414 	ori	zero,at,208
 8002ef0:	08003414 	ori	zero,at,208
 8002ef4:	08003414 	ori	zero,at,208
 8002ef8:	08003414 	ori	zero,at,208
 8002efc:	08003414 	ori	zero,at,208
 8002f00:	0800324c 	andi	zero,at,201
 8002f04:	08003240 	call	800324 <__alt_mem_onchip_memory2_0+0x600324>
 8002f08:	08003234 	orhi	zero,at,200
 8002f0c:	08003228 	cmpgeui	zero,at,200
 8002f10:	08003414 	ori	zero,at,208
 8002f14:	08003414 	ori	zero,at,208
 8002f18:	08003414 	ori	zero,at,208
 8002f1c:	0800321c 	xori	zero,at,200
 8002f20:	08003414 	ori	zero,at,208
 8002f24:	08003414 	ori	zero,at,208
 8002f28:	08003414 	ori	zero,at,208
 8002f2c:	08003210 	cmplti	zero,at,200
 8002f30:	08003414 	ori	zero,at,208
 8002f34:	08003414 	ori	zero,at,208
 8002f38:	08003204 	addi	zero,at,200
 8002f3c:	08003414 	ori	zero,at,208
 8002f40:	08003414 	ori	zero,at,208
 8002f44:	080031f8 	rdprs	zero,at,199
 8002f48:	08003414 	ori	zero,at,208
 8002f4c:	08003414 	ori	zero,at,208
 8002f50:	08003414 	ori	zero,at,208
 8002f54:	08003414 	ori	zero,at,208
 8002f58:	08003414 	ori	zero,at,208
 8002f5c:	08003414 	ori	zero,at,208
 8002f60:	08003414 	ori	zero,at,208
 8002f64:	08003414 	ori	zero,at,208
 8002f68:	08003414 	ori	zero,at,208
 8002f6c:	08003414 	ori	zero,at,208
 8002f70:	080031ec 	andhi	zero,at,199
 8002f74:	08003414 	ori	zero,at,208
 8002f78:	080031e0 	cmpeqi	zero,at,199
 8002f7c:	080031d4 	ori	zero,at,199
 8002f80:	080031c8 	cmpgei	zero,at,199
 8002f84:	08003414 	ori	zero,at,208
 8002f88:	08003414 	ori	zero,at,208
 8002f8c:	080031bc 	xorhi	zero,at,198
 8002f90:	08003414 	ori	zero,at,208
 8002f94:	08003414 	ori	zero,at,208
 8002f98:	08003414 	ori	zero,at,208
 8002f9c:	08003414 	ori	zero,at,208
 8002fa0:	08003414 	ori	zero,at,208
 8002fa4:	08003414 	ori	zero,at,208
 8002fa8:	08003414 	ori	zero,at,208
 8002fac:	08003414 	ori	zero,at,208
 8002fb0:	080031b0 	cmpltui	zero,at,198
 8002fb4:	080031a4 	muli	zero,at,198
 8002fb8:	08003198 	cmpnei	zero,at,198
 8002fbc:	0800318c 	andi	zero,at,198
 8002fc0:	08003180 	call	800318 <__alt_mem_onchip_memory2_0+0x600318>
 8002fc4:	08003174 	orhi	zero,at,197
 8002fc8:	08003414 	ori	zero,at,208
 8002fcc:	08003168 	cmpgeui	zero,at,197
 8002fd0:	0800315c 	xori	zero,at,197
 8002fd4:	08003150 	cmplti	zero,at,197
 8002fd8:	08003144 	addi	zero,at,197
 8002fdc:	08003138 	rdprs	zero,at,196
 8002fe0:	0800312c 	andhi	zero,at,196
 8002fe4:	08003120 	cmpeqi	zero,at,196
 8002fe8:	08003114 	ori	zero,at,196
 8002fec:	08003108 	cmpgei	zero,at,196
 8002ff0:	080030fc 	xorhi	zero,at,195
 8002ff4:	080030f0 	cmpltui	zero,at,195
 8002ff8:	080030e4 	muli	zero,at,195
 8002ffc:	080030d8 	cmpnei	zero,at,195
 8003000:	08003414 	ori	zero,at,208
 8003004:	080030cc 	andi	zero,at,195
 8003008:	080030c0 	call	80030c <__alt_mem_onchip_memory2_0+0x60030c>
 800300c:	080030b4 	orhi	zero,at,194
 8003010:	080030a8 	cmpgeui	zero,at,194
 8003014:	08003414 	ori	zero,at,208
 8003018:	08003414 	ori	zero,at,208
 800301c:	08003414 	ori	zero,at,208
 8003020:	08003414 	ori	zero,at,208
 8003024:	08003414 	ori	zero,at,208
 8003028:	0800309c 	xori	zero,at,194
 800302c:	08003414 	ori	zero,at,208
 8003030:	08003414 	ori	zero,at,208
 8003034:	08003414 	ori	zero,at,208
 8003038:	08003090 	cmplti	zero,at,194
 800303c:	08003084 	addi	zero,at,194
 8003040:	08003078 	rdprs	zero,at,193
 8003044:	0800306c 	andhi	zero,at,193
 8003048:	08003060 	cmpeqi	zero,at,193
 800304c:	00820074 	movhi	r2,2049
 8003050:	10958504 	addi	r2,r2,22036
 8003054:	dfc00017 	ldw	ra,0(sp)
 8003058:	dec00104 	addi	sp,sp,4
 800305c:	f800283a 	ret
 8003060:	00820074 	movhi	r2,2049
 8003064:	10972204 	addi	r2,r2,23688
 8003068:	003ffa06 	br	8003054 <__alt_data_end+0xf8003054>
 800306c:	00820074 	movhi	r2,2049
 8003070:	10971c04 	addi	r2,r2,23664
 8003074:	003ff706 	br	8003054 <__alt_data_end+0xf8003054>
 8003078:	00820074 	movhi	r2,2049
 800307c:	10971704 	addi	r2,r2,23644
 8003080:	003ff406 	br	8003054 <__alt_data_end+0xf8003054>
 8003084:	00820074 	movhi	r2,2049
 8003088:	10973004 	addi	r2,r2,23744
 800308c:	003ff106 	br	8003054 <__alt_data_end+0xf8003054>
 8003090:	00820074 	movhi	r2,2049
 8003094:	10966e04 	addi	r2,r2,22968
 8003098:	003fee06 	br	8003054 <__alt_data_end+0xf8003054>
 800309c:	00820074 	movhi	r2,2049
 80030a0:	10963c04 	addi	r2,r2,22768
 80030a4:	003feb06 	br	8003054 <__alt_data_end+0xf8003054>
 80030a8:	00820074 	movhi	r2,2049
 80030ac:	10970a04 	addi	r2,r2,23592
 80030b0:	003fe806 	br	8003054 <__alt_data_end+0xf8003054>
 80030b4:	00820074 	movhi	r2,2049
 80030b8:	10971004 	addi	r2,r2,23616
 80030bc:	003fe506 	br	8003054 <__alt_data_end+0xf8003054>
 80030c0:	00820074 	movhi	r2,2049
 80030c4:	10960b04 	addi	r2,r2,22572
 80030c8:	003fe206 	br	8003054 <__alt_data_end+0xf8003054>
 80030cc:	00820074 	movhi	r2,2049
 80030d0:	1096fb04 	addi	r2,r2,23532
 80030d4:	003fdf06 	br	8003054 <__alt_data_end+0xf8003054>
 80030d8:	00820074 	movhi	r2,2049
 80030dc:	10969804 	addi	r2,r2,23136
 80030e0:	003fdc06 	br	8003054 <__alt_data_end+0xf8003054>
 80030e4:	00820074 	movhi	r2,2049
 80030e8:	10973a04 	addi	r2,r2,23784
 80030ec:	003fd906 	br	8003054 <__alt_data_end+0xf8003054>
 80030f0:	00820074 	movhi	r2,2049
 80030f4:	1095bd04 	addi	r2,r2,22260
 80030f8:	003fd606 	br	8003054 <__alt_data_end+0xf8003054>
 80030fc:	00820074 	movhi	r2,2049
 8003100:	1095af04 	addi	r2,r2,22204
 8003104:	003fd306 	br	8003054 <__alt_data_end+0xf8003054>
 8003108:	00820074 	movhi	r2,2049
 800310c:	1095f104 	addi	r2,r2,22468
 8003110:	003fd006 	br	8003054 <__alt_data_end+0xf8003054>
 8003114:	00820074 	movhi	r2,2049
 8003118:	10963104 	addi	r2,r2,22724
 800311c:	003fcd06 	br	8003054 <__alt_data_end+0xf8003054>
 8003120:	00820074 	movhi	r2,2049
 8003124:	1095ed04 	addi	r2,r2,22452
 8003128:	003fca06 	br	8003054 <__alt_data_end+0xf8003054>
 800312c:	00820074 	movhi	r2,2049
 8003130:	10973f04 	addi	r2,r2,23804
 8003134:	003fc706 	br	8003054 <__alt_data_end+0xf8003054>
 8003138:	00820074 	movhi	r2,2049
 800313c:	10960204 	addi	r2,r2,22536
 8003140:	003fc406 	br	8003054 <__alt_data_end+0xf8003054>
 8003144:	00820074 	movhi	r2,2049
 8003148:	10967704 	addi	r2,r2,23004
 800314c:	003fc106 	br	8003054 <__alt_data_end+0xf8003054>
 8003150:	00820074 	movhi	r2,2049
 8003154:	10970104 	addi	r2,r2,23556
 8003158:	003fbe06 	br	8003054 <__alt_data_end+0xf8003054>
 800315c:	00820074 	movhi	r2,2049
 8003160:	1096f504 	addi	r2,r2,23508
 8003164:	003fbb06 	br	8003054 <__alt_data_end+0xf8003054>
 8003168:	00820074 	movhi	r2,2049
 800316c:	1096e904 	addi	r2,r2,23460
 8003170:	003fb806 	br	8003054 <__alt_data_end+0xf8003054>
 8003174:	00820074 	movhi	r2,2049
 8003178:	1096e304 	addi	r2,r2,23436
 800317c:	003fb506 	br	8003054 <__alt_data_end+0xf8003054>
 8003180:	00820074 	movhi	r2,2049
 8003184:	1096db04 	addi	r2,r2,23404
 8003188:	003fb206 	br	8003054 <__alt_data_end+0xf8003054>
 800318c:	00820074 	movhi	r2,2049
 8003190:	1096d304 	addi	r2,r2,23372
 8003194:	003faf06 	br	8003054 <__alt_data_end+0xf8003054>
 8003198:	00820074 	movhi	r2,2049
 800319c:	1096c704 	addi	r2,r2,23324
 80031a0:	003fac06 	br	8003054 <__alt_data_end+0xf8003054>
 80031a4:	00820074 	movhi	r2,2049
 80031a8:	1096be04 	addi	r2,r2,23288
 80031ac:	003fa906 	br	8003054 <__alt_data_end+0xf8003054>
 80031b0:	00820074 	movhi	r2,2049
 80031b4:	1096ee04 	addi	r2,r2,23480
 80031b8:	003fa606 	br	8003054 <__alt_data_end+0xf8003054>
 80031bc:	00820074 	movhi	r2,2049
 80031c0:	10972704 	addi	r2,r2,23708
 80031c4:	003fa306 	br	8003054 <__alt_data_end+0xf8003054>
 80031c8:	00820074 	movhi	r2,2049
 80031cc:	1096b804 	addi	r2,r2,23264
 80031d0:	003fa006 	br	8003054 <__alt_data_end+0xf8003054>
 80031d4:	00820074 	movhi	r2,2049
 80031d8:	1096b104 	addi	r2,r2,23236
 80031dc:	003f9d06 	br	8003054 <__alt_data_end+0xf8003054>
 80031e0:	00820074 	movhi	r2,2049
 80031e4:	1096ac04 	addi	r2,r2,23216
 80031e8:	003f9a06 	br	8003054 <__alt_data_end+0xf8003054>
 80031ec:	00820074 	movhi	r2,2049
 80031f0:	1096a504 	addi	r2,r2,23188
 80031f4:	003f9706 	br	8003054 <__alt_data_end+0xf8003054>
 80031f8:	00820074 	movhi	r2,2049
 80031fc:	1096a204 	addi	r2,r2,23176
 8003200:	003f9406 	br	8003054 <__alt_data_end+0xf8003054>
 8003204:	00820074 	movhi	r2,2049
 8003208:	10969d04 	addi	r2,r2,23156
 800320c:	003f9106 	br	8003054 <__alt_data_end+0xf8003054>
 8003210:	00820074 	movhi	r2,2049
 8003214:	10969404 	addi	r2,r2,23120
 8003218:	003f8e06 	br	8003054 <__alt_data_end+0xf8003054>
 800321c:	00820074 	movhi	r2,2049
 8003220:	10968e04 	addi	r2,r2,23096
 8003224:	003f8b06 	br	8003054 <__alt_data_end+0xf8003054>
 8003228:	00820074 	movhi	r2,2049
 800322c:	10968904 	addi	r2,r2,23076
 8003230:	003f8806 	br	8003054 <__alt_data_end+0xf8003054>
 8003234:	00820074 	movhi	r2,2049
 8003238:	10968304 	addi	r2,r2,23052
 800323c:	003f8506 	br	8003054 <__alt_data_end+0xf8003054>
 8003240:	00820074 	movhi	r2,2049
 8003244:	1096c504 	addi	r2,r2,23316
 8003248:	003f8206 	br	8003054 <__alt_data_end+0xf8003054>
 800324c:	00820074 	movhi	r2,2049
 8003250:	10967f04 	addi	r2,r2,23036
 8003254:	003f7f06 	br	8003054 <__alt_data_end+0xf8003054>
 8003258:	00820074 	movhi	r2,2049
 800325c:	10967d04 	addi	r2,r2,23028
 8003260:	003f7c06 	br	8003054 <__alt_data_end+0xf8003054>
 8003264:	00820074 	movhi	r2,2049
 8003268:	10967404 	addi	r2,r2,22992
 800326c:	003f7906 	br	8003054 <__alt_data_end+0xf8003054>
 8003270:	00820074 	movhi	r2,2049
 8003274:	10966904 	addi	r2,r2,22948
 8003278:	003f7606 	br	8003054 <__alt_data_end+0xf8003054>
 800327c:	00820074 	movhi	r2,2049
 8003280:	10966204 	addi	r2,r2,22920
 8003284:	003f7306 	br	8003054 <__alt_data_end+0xf8003054>
 8003288:	00820074 	movhi	r2,2049
 800328c:	10965d04 	addi	r2,r2,22900
 8003290:	003f7006 	br	8003054 <__alt_data_end+0xf8003054>
 8003294:	00820074 	movhi	r2,2049
 8003298:	10965104 	addi	r2,r2,22852
 800329c:	003f6d06 	br	8003054 <__alt_data_end+0xf8003054>
 80032a0:	00820074 	movhi	r2,2049
 80032a4:	10964e04 	addi	r2,r2,22840
 80032a8:	003f6a06 	br	8003054 <__alt_data_end+0xf8003054>
 80032ac:	00820074 	movhi	r2,2049
 80032b0:	10964a04 	addi	r2,r2,22824
 80032b4:	003f6706 	br	8003054 <__alt_data_end+0xf8003054>
 80032b8:	00820074 	movhi	r2,2049
 80032bc:	10964404 	addi	r2,r2,22800
 80032c0:	003f6406 	br	8003054 <__alt_data_end+0xf8003054>
 80032c4:	00820074 	movhi	r2,2049
 80032c8:	10964004 	addi	r2,r2,22784
 80032cc:	003f6106 	br	8003054 <__alt_data_end+0xf8003054>
 80032d0:	00820074 	movhi	r2,2049
 80032d4:	10963604 	addi	r2,r2,22744
 80032d8:	003f5e06 	br	8003054 <__alt_data_end+0xf8003054>
 80032dc:	00820074 	movhi	r2,2049
 80032e0:	10962d04 	addi	r2,r2,22708
 80032e4:	003f5b06 	br	8003054 <__alt_data_end+0xf8003054>
 80032e8:	00820074 	movhi	r2,2049
 80032ec:	10962904 	addi	r2,r2,22692
 80032f0:	003f5806 	br	8003054 <__alt_data_end+0xf8003054>
 80032f4:	00820074 	movhi	r2,2049
 80032f8:	10962304 	addi	r2,r2,22668
 80032fc:	003f5506 	br	8003054 <__alt_data_end+0xf8003054>
 8003300:	00820074 	movhi	r2,2049
 8003304:	10961b04 	addi	r2,r2,22636
 8003308:	003f5206 	br	8003054 <__alt_data_end+0xf8003054>
 800330c:	00820074 	movhi	r2,2049
 8003310:	10961304 	addi	r2,r2,22604
 8003314:	003f4f06 	br	8003054 <__alt_data_end+0xf8003054>
 8003318:	00820074 	movhi	r2,2049
 800331c:	1095fd04 	addi	r2,r2,22516
 8003320:	003f4c06 	br	8003054 <__alt_data_end+0xf8003054>
 8003324:	00820074 	movhi	r2,2049
 8003328:	1095f904 	addi	r2,r2,22500
 800332c:	003f4906 	br	8003054 <__alt_data_end+0xf8003054>
 8003330:	00820074 	movhi	r2,2049
 8003334:	1095e904 	addi	r2,r2,22436
 8003338:	003f4606 	br	8003054 <__alt_data_end+0xf8003054>
 800333c:	00820074 	movhi	r2,2049
 8003340:	1095e504 	addi	r2,r2,22420
 8003344:	003f4306 	br	8003054 <__alt_data_end+0xf8003054>
 8003348:	00820074 	movhi	r2,2049
 800334c:	1095e004 	addi	r2,r2,22400
 8003350:	003f4006 	br	8003054 <__alt_data_end+0xf8003054>
 8003354:	00820074 	movhi	r2,2049
 8003358:	1095dd04 	addi	r2,r2,22388
 800335c:	003f3d06 	br	8003054 <__alt_data_end+0xf8003054>
 8003360:	00820074 	movhi	r2,2049
 8003364:	1095d704 	addi	r2,r2,22364
 8003368:	003f3a06 	br	8003054 <__alt_data_end+0xf8003054>
 800336c:	00820074 	movhi	r2,2049
 8003370:	1095d404 	addi	r2,r2,22352
 8003374:	003f3706 	br	8003054 <__alt_data_end+0xf8003054>
 8003378:	00820074 	movhi	r2,2049
 800337c:	1095cf04 	addi	r2,r2,22332
 8003380:	003f3406 	br	8003054 <__alt_data_end+0xf8003054>
 8003384:	00820074 	movhi	r2,2049
 8003388:	1095ca04 	addi	r2,r2,22312
 800338c:	003f3106 	br	8003054 <__alt_data_end+0xf8003054>
 8003390:	00820074 	movhi	r2,2049
 8003394:	1095c504 	addi	r2,r2,22292
 8003398:	003f2e06 	br	8003054 <__alt_data_end+0xf8003054>
 800339c:	00820074 	movhi	r2,2049
 80033a0:	1095ba04 	addi	r2,r2,22248
 80033a4:	003f2b06 	br	8003054 <__alt_data_end+0xf8003054>
 80033a8:	00820074 	movhi	r2,2049
 80033ac:	1095b604 	addi	r2,r2,22232
 80033b0:	003f2806 	br	8003054 <__alt_data_end+0xf8003054>
 80033b4:	00820074 	movhi	r2,2049
 80033b8:	1095aa04 	addi	r2,r2,22184
 80033bc:	003f2506 	br	8003054 <__alt_data_end+0xf8003054>
 80033c0:	00820074 	movhi	r2,2049
 80033c4:	1095a504 	addi	r2,r2,22164
 80033c8:	003f2206 	br	8003054 <__alt_data_end+0xf8003054>
 80033cc:	00820074 	movhi	r2,2049
 80033d0:	10959e04 	addi	r2,r2,22136
 80033d4:	003f1f06 	br	8003054 <__alt_data_end+0xf8003054>
 80033d8:	00820074 	movhi	r2,2049
 80033dc:	10959b04 	addi	r2,r2,22124
 80033e0:	003f1c06 	br	8003054 <__alt_data_end+0xf8003054>
 80033e4:	00820074 	movhi	r2,2049
 80033e8:	10959504 	addi	r2,r2,22100
 80033ec:	003f1906 	br	8003054 <__alt_data_end+0xf8003054>
 80033f0:	00820074 	movhi	r2,2049
 80033f4:	10959104 	addi	r2,r2,22084
 80033f8:	003f1606 	br	8003054 <__alt_data_end+0xf8003054>
 80033fc:	00820074 	movhi	r2,2049
 8003400:	10958a04 	addi	r2,r2,22056
 8003404:	003f1306 	br	8003054 <__alt_data_end+0xf8003054>
 8003408:	00820074 	movhi	r2,2049
 800340c:	10958704 	addi	r2,r2,22044
 8003410:	003f1006 	br	8003054 <__alt_data_end+0xf8003054>
 8003414:	38000726 	beq	r7,zero,8003434 <_strerror_r+0x654>
 8003418:	380d883a 	mov	r6,r7
 800341c:	1809883a 	mov	r4,r3
 8003420:	80034f00 	call	80034f0 <_user_strerror>
 8003424:	103f0b1e 	bne	r2,zero,8003054 <__alt_data_end+0xf8003054>
 8003428:	00820074 	movhi	r2,2049
 800342c:	10974d04 	addi	r2,r2,23860
 8003430:	003f0806 	br	8003054 <__alt_data_end+0xf8003054>
 8003434:	200f883a 	mov	r7,r4
 8003438:	003ff706 	br	8003418 <__alt_data_end+0xf8003418>

0800343c <strerror>:
 800343c:	00820074 	movhi	r2,2049
 8003440:	109ecc04 	addi	r2,r2,31536
 8003444:	200b883a 	mov	r5,r4
 8003448:	11000017 	ldw	r4,0(r2)
 800344c:	000f883a 	mov	r7,zero
 8003450:	000d883a 	mov	r6,zero
 8003454:	8002de01 	jmpi	8002de0 <_strerror_r>

08003458 <strlen>:
 8003458:	208000cc 	andi	r2,r4,3
 800345c:	10002026 	beq	r2,zero,80034e0 <strlen+0x88>
 8003460:	20800007 	ldb	r2,0(r4)
 8003464:	10002026 	beq	r2,zero,80034e8 <strlen+0x90>
 8003468:	2005883a 	mov	r2,r4
 800346c:	00000206 	br	8003478 <strlen+0x20>
 8003470:	10c00007 	ldb	r3,0(r2)
 8003474:	18001826 	beq	r3,zero,80034d8 <strlen+0x80>
 8003478:	10800044 	addi	r2,r2,1
 800347c:	10c000cc 	andi	r3,r2,3
 8003480:	183ffb1e 	bne	r3,zero,8003470 <__alt_data_end+0xf8003470>
 8003484:	10c00017 	ldw	r3,0(r2)
 8003488:	01ffbff4 	movhi	r7,65279
 800348c:	39ffbfc4 	addi	r7,r7,-257
 8003490:	00ca303a 	nor	r5,zero,r3
 8003494:	01a02074 	movhi	r6,32897
 8003498:	19c7883a 	add	r3,r3,r7
 800349c:	31a02004 	addi	r6,r6,-32640
 80034a0:	1946703a 	and	r3,r3,r5
 80034a4:	1986703a 	and	r3,r3,r6
 80034a8:	1800091e 	bne	r3,zero,80034d0 <strlen+0x78>
 80034ac:	10800104 	addi	r2,r2,4
 80034b0:	10c00017 	ldw	r3,0(r2)
 80034b4:	19cb883a 	add	r5,r3,r7
 80034b8:	00c6303a 	nor	r3,zero,r3
 80034bc:	28c6703a 	and	r3,r5,r3
 80034c0:	1986703a 	and	r3,r3,r6
 80034c4:	183ff926 	beq	r3,zero,80034ac <__alt_data_end+0xf80034ac>
 80034c8:	00000106 	br	80034d0 <strlen+0x78>
 80034cc:	10800044 	addi	r2,r2,1
 80034d0:	10c00007 	ldb	r3,0(r2)
 80034d4:	183ffd1e 	bne	r3,zero,80034cc <__alt_data_end+0xf80034cc>
 80034d8:	1105c83a 	sub	r2,r2,r4
 80034dc:	f800283a 	ret
 80034e0:	2005883a 	mov	r2,r4
 80034e4:	003fe706 	br	8003484 <__alt_data_end+0xf8003484>
 80034e8:	0005883a 	mov	r2,zero
 80034ec:	f800283a 	ret

080034f0 <_user_strerror>:
 80034f0:	0005883a 	mov	r2,zero
 80034f4:	f800283a 	ret

080034f8 <___vfprintf_internal_r>:
 80034f8:	deffb804 	addi	sp,sp,-288
 80034fc:	dfc04715 	stw	ra,284(sp)
 8003500:	ddc04515 	stw	r23,276(sp)
 8003504:	dd404315 	stw	r21,268(sp)
 8003508:	d9002c15 	stw	r4,176(sp)
 800350c:	282f883a 	mov	r23,r5
 8003510:	302b883a 	mov	r21,r6
 8003514:	d9c02d15 	stw	r7,180(sp)
 8003518:	df004615 	stw	fp,280(sp)
 800351c:	dd804415 	stw	r22,272(sp)
 8003520:	dd004215 	stw	r20,264(sp)
 8003524:	dcc04115 	stw	r19,260(sp)
 8003528:	dc804015 	stw	r18,256(sp)
 800352c:	dc403f15 	stw	r17,252(sp)
 8003530:	dc003e15 	stw	r16,248(sp)
 8003534:	8007a140 	call	8007a14 <_localeconv_r>
 8003538:	10800017 	ldw	r2,0(r2)
 800353c:	1009883a 	mov	r4,r2
 8003540:	d8803415 	stw	r2,208(sp)
 8003544:	80034580 	call	8003458 <strlen>
 8003548:	d8803715 	stw	r2,220(sp)
 800354c:	d8802c17 	ldw	r2,176(sp)
 8003550:	10000226 	beq	r2,zero,800355c <___vfprintf_internal_r+0x64>
 8003554:	10800e17 	ldw	r2,56(r2)
 8003558:	1000f926 	beq	r2,zero,8003940 <___vfprintf_internal_r+0x448>
 800355c:	b880030b 	ldhu	r2,12(r23)
 8003560:	10c8000c 	andi	r3,r2,8192
 8003564:	1800061e 	bne	r3,zero,8003580 <___vfprintf_internal_r+0x88>
 8003568:	b9001917 	ldw	r4,100(r23)
 800356c:	00f7ffc4 	movi	r3,-8193
 8003570:	10880014 	ori	r2,r2,8192
 8003574:	20c6703a 	and	r3,r4,r3
 8003578:	b880030d 	sth	r2,12(r23)
 800357c:	b8c01915 	stw	r3,100(r23)
 8003580:	10c0020c 	andi	r3,r2,8
 8003584:	1800c126 	beq	r3,zero,800388c <___vfprintf_internal_r+0x394>
 8003588:	b8c00417 	ldw	r3,16(r23)
 800358c:	1800bf26 	beq	r3,zero,800388c <___vfprintf_internal_r+0x394>
 8003590:	1080068c 	andi	r2,r2,26
 8003594:	00c00284 	movi	r3,10
 8003598:	10c0c426 	beq	r2,r3,80038ac <___vfprintf_internal_r+0x3b4>
 800359c:	d8c00404 	addi	r3,sp,16
 80035a0:	05020074 	movhi	r20,2049
 80035a4:	d9001e04 	addi	r4,sp,120
 80035a8:	a5175584 	addi	r20,r20,23894
 80035ac:	d8c01e15 	stw	r3,120(sp)
 80035b0:	d8002015 	stw	zero,128(sp)
 80035b4:	d8001f15 	stw	zero,124(sp)
 80035b8:	d8003315 	stw	zero,204(sp)
 80035bc:	d8003615 	stw	zero,216(sp)
 80035c0:	d8003815 	stw	zero,224(sp)
 80035c4:	1811883a 	mov	r8,r3
 80035c8:	d8003915 	stw	zero,228(sp)
 80035cc:	d8003a15 	stw	zero,232(sp)
 80035d0:	d8002f15 	stw	zero,188(sp)
 80035d4:	d9002815 	stw	r4,160(sp)
 80035d8:	a8800007 	ldb	r2,0(r21)
 80035dc:	10027b26 	beq	r2,zero,8003fcc <___vfprintf_internal_r+0xad4>
 80035e0:	00c00944 	movi	r3,37
 80035e4:	a821883a 	mov	r16,r21
 80035e8:	10c0021e 	bne	r2,r3,80035f4 <___vfprintf_internal_r+0xfc>
 80035ec:	00001406 	br	8003640 <___vfprintf_internal_r+0x148>
 80035f0:	10c00326 	beq	r2,r3,8003600 <___vfprintf_internal_r+0x108>
 80035f4:	84000044 	addi	r16,r16,1
 80035f8:	80800007 	ldb	r2,0(r16)
 80035fc:	103ffc1e 	bne	r2,zero,80035f0 <__alt_data_end+0xf80035f0>
 8003600:	8563c83a 	sub	r17,r16,r21
 8003604:	88000e26 	beq	r17,zero,8003640 <___vfprintf_internal_r+0x148>
 8003608:	d8c02017 	ldw	r3,128(sp)
 800360c:	d8801f17 	ldw	r2,124(sp)
 8003610:	45400015 	stw	r21,0(r8)
 8003614:	1c47883a 	add	r3,r3,r17
 8003618:	10800044 	addi	r2,r2,1
 800361c:	d8c02015 	stw	r3,128(sp)
 8003620:	44400115 	stw	r17,4(r8)
 8003624:	d8801f15 	stw	r2,124(sp)
 8003628:	00c001c4 	movi	r3,7
 800362c:	1880a716 	blt	r3,r2,80038cc <___vfprintf_internal_r+0x3d4>
 8003630:	42000204 	addi	r8,r8,8
 8003634:	d9402f17 	ldw	r5,188(sp)
 8003638:	2c4b883a 	add	r5,r5,r17
 800363c:	d9402f15 	stw	r5,188(sp)
 8003640:	80800007 	ldb	r2,0(r16)
 8003644:	1000a826 	beq	r2,zero,80038e8 <___vfprintf_internal_r+0x3f0>
 8003648:	84400047 	ldb	r17,1(r16)
 800364c:	00bfffc4 	movi	r2,-1
 8003650:	85400044 	addi	r21,r16,1
 8003654:	d8002785 	stb	zero,158(sp)
 8003658:	0007883a 	mov	r3,zero
 800365c:	000f883a 	mov	r7,zero
 8003660:	d8802915 	stw	r2,164(sp)
 8003664:	d8003115 	stw	zero,196(sp)
 8003668:	0025883a 	mov	r18,zero
 800366c:	01401604 	movi	r5,88
 8003670:	01800244 	movi	r6,9
 8003674:	02800a84 	movi	r10,42
 8003678:	02401b04 	movi	r9,108
 800367c:	ad400044 	addi	r21,r21,1
 8003680:	88bff804 	addi	r2,r17,-32
 8003684:	28830436 	bltu	r5,r2,8004298 <___vfprintf_internal_r+0xda0>
 8003688:	100490ba 	slli	r2,r2,2
 800368c:	01020034 	movhi	r4,2048
 8003690:	210da804 	addi	r4,r4,13984
 8003694:	1105883a 	add	r2,r2,r4
 8003698:	10800017 	ldw	r2,0(r2)
 800369c:	1000683a 	jmp	r2
 80036a0:	080041b8 	rdprs	zero,at,262
 80036a4:	08004298 	cmpnei	zero,at,266
 80036a8:	08004298 	cmpnei	zero,at,266
 80036ac:	080041d8 	cmpnei	zero,at,263
 80036b0:	08004298 	cmpnei	zero,at,266
 80036b4:	08004298 	cmpnei	zero,at,266
 80036b8:	08004298 	cmpnei	zero,at,266
 80036bc:	08004298 	cmpnei	zero,at,266
 80036c0:	08004298 	cmpnei	zero,at,266
 80036c4:	08004298 	cmpnei	zero,at,266
 80036c8:	0800394c 	andi	zero,at,229
 80036cc:	080040f4 	orhi	zero,at,259
 80036d0:	08004298 	cmpnei	zero,at,266
 80036d4:	08003814 	ori	zero,at,224
 80036d8:	08003974 	orhi	zero,at,229
 80036dc:	08004298 	cmpnei	zero,at,266
 80036e0:	080039b4 	orhi	zero,at,230
 80036e4:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036e8:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036ec:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036f0:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036f4:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036f8:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 80036fc:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 8003700:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 8003704:	080039c0 	call	80039c <__alt_mem_onchip_memory2_0+0x60039c>
 8003708:	08004298 	cmpnei	zero,at,266
 800370c:	08004298 	cmpnei	zero,at,266
 8003710:	08004298 	cmpnei	zero,at,266
 8003714:	08004298 	cmpnei	zero,at,266
 8003718:	08004298 	cmpnei	zero,at,266
 800371c:	08004298 	cmpnei	zero,at,266
 8003720:	08004298 	cmpnei	zero,at,266
 8003724:	08004298 	cmpnei	zero,at,266
 8003728:	08004298 	cmpnei	zero,at,266
 800372c:	08004298 	cmpnei	zero,at,266
 8003730:	080039f4 	orhi	zero,at,231
 8003734:	08003ab0 	cmpltui	zero,at,234
 8003738:	08004298 	cmpnei	zero,at,266
 800373c:	08003ab0 	cmpltui	zero,at,234
 8003740:	08004298 	cmpnei	zero,at,266
 8003744:	08004298 	cmpnei	zero,at,266
 8003748:	08004298 	cmpnei	zero,at,266
 800374c:	08004298 	cmpnei	zero,at,266
 8003750:	08003b50 	cmplti	zero,at,237
 8003754:	08004298 	cmpnei	zero,at,266
 8003758:	08004298 	cmpnei	zero,at,266
 800375c:	08003b5c 	xori	zero,at,237
 8003760:	08004298 	cmpnei	zero,at,266
 8003764:	08004298 	cmpnei	zero,at,266
 8003768:	08004298 	cmpnei	zero,at,266
 800376c:	08004298 	cmpnei	zero,at,266
 8003770:	08004298 	cmpnei	zero,at,266
 8003774:	08003fd4 	ori	zero,at,255
 8003778:	08004298 	cmpnei	zero,at,266
 800377c:	08004298 	cmpnei	zero,at,266
 8003780:	08004034 	orhi	zero,at,256
 8003784:	08004298 	cmpnei	zero,at,266
 8003788:	08004298 	cmpnei	zero,at,266
 800378c:	08004298 	cmpnei	zero,at,266
 8003790:	08004298 	cmpnei	zero,at,266
 8003794:	08004298 	cmpnei	zero,at,266
 8003798:	08004298 	cmpnei	zero,at,266
 800379c:	08004298 	cmpnei	zero,at,266
 80037a0:	08004298 	cmpnei	zero,at,266
 80037a4:	08004298 	cmpnei	zero,at,266
 80037a8:	08004298 	cmpnei	zero,at,266
 80037ac:	08004244 	addi	zero,at,265
 80037b0:	080041e4 	muli	zero,at,263
 80037b4:	08003ab0 	cmpltui	zero,at,234
 80037b8:	08003ab0 	cmpltui	zero,at,234
 80037bc:	08003ab0 	cmpltui	zero,at,234
 80037c0:	080041f4 	orhi	zero,at,263
 80037c4:	080041e4 	muli	zero,at,263
 80037c8:	08004298 	cmpnei	zero,at,266
 80037cc:	08004298 	cmpnei	zero,at,266
 80037d0:	08004200 	call	800420 <__alt_mem_onchip_memory2_0+0x600420>
 80037d4:	08004298 	cmpnei	zero,at,266
 80037d8:	08004210 	cmplti	zero,at,264
 80037dc:	080040e4 	muli	zero,at,259
 80037e0:	08003820 	cmpeqi	zero,at,224
 80037e4:	08004104 	addi	zero,at,260
 80037e8:	08004298 	cmpnei	zero,at,266
 80037ec:	08004110 	cmplti	zero,at,260
 80037f0:	08004298 	cmpnei	zero,at,266
 80037f4:	0800416c 	andhi	zero,at,261
 80037f8:	08004298 	cmpnei	zero,at,266
 80037fc:	08004298 	cmpnei	zero,at,266
 8003800:	0800417c 	xorhi	zero,at,261
 8003804:	d9003117 	ldw	r4,196(sp)
 8003808:	d8802d15 	stw	r2,180(sp)
 800380c:	0109c83a 	sub	r4,zero,r4
 8003810:	d9003115 	stw	r4,196(sp)
 8003814:	94800114 	ori	r18,r18,4
 8003818:	ac400007 	ldb	r17,0(r21)
 800381c:	003f9706 	br	800367c <__alt_data_end+0xf800367c>
 8003820:	00800c04 	movi	r2,48
 8003824:	d9002d17 	ldw	r4,180(sp)
 8003828:	d9402917 	ldw	r5,164(sp)
 800382c:	d8802705 	stb	r2,156(sp)
 8003830:	00801e04 	movi	r2,120
 8003834:	d8802745 	stb	r2,157(sp)
 8003838:	d8002785 	stb	zero,158(sp)
 800383c:	20c00104 	addi	r3,r4,4
 8003840:	24c00017 	ldw	r19,0(r4)
 8003844:	002d883a 	mov	r22,zero
 8003848:	90800094 	ori	r2,r18,2
 800384c:	28029a16 	blt	r5,zero,80042b8 <___vfprintf_internal_r+0xdc0>
 8003850:	00bfdfc4 	movi	r2,-129
 8003854:	90a4703a 	and	r18,r18,r2
 8003858:	d8c02d15 	stw	r3,180(sp)
 800385c:	94800094 	ori	r18,r18,2
 8003860:	9802871e 	bne	r19,zero,8004280 <___vfprintf_internal_r+0xd88>
 8003864:	00820074 	movhi	r2,2049
 8003868:	10974e04 	addi	r2,r2,23864
 800386c:	d8803915 	stw	r2,228(sp)
 8003870:	04401e04 	movi	r17,120
 8003874:	d8802917 	ldw	r2,164(sp)
 8003878:	0039883a 	mov	fp,zero
 800387c:	1001e926 	beq	r2,zero,8004024 <___vfprintf_internal_r+0xb2c>
 8003880:	0027883a 	mov	r19,zero
 8003884:	002d883a 	mov	r22,zero
 8003888:	00020506 	br	80040a0 <___vfprintf_internal_r+0xba8>
 800388c:	d9002c17 	ldw	r4,176(sp)
 8003890:	b80b883a 	mov	r5,r23
 8003894:	80058280 	call	8005828 <__swsetup_r>
 8003898:	1005ac1e 	bne	r2,zero,8004f4c <___vfprintf_internal_r+0x1a54>
 800389c:	b880030b 	ldhu	r2,12(r23)
 80038a0:	00c00284 	movi	r3,10
 80038a4:	1080068c 	andi	r2,r2,26
 80038a8:	10ff3c1e 	bne	r2,r3,800359c <__alt_data_end+0xf800359c>
 80038ac:	b880038f 	ldh	r2,14(r23)
 80038b0:	103f3a16 	blt	r2,zero,800359c <__alt_data_end+0xf800359c>
 80038b4:	d9c02d17 	ldw	r7,180(sp)
 80038b8:	d9002c17 	ldw	r4,176(sp)
 80038bc:	a80d883a 	mov	r6,r21
 80038c0:	b80b883a 	mov	r5,r23
 80038c4:	800570c0 	call	800570c <__sbprintf>
 80038c8:	00001106 	br	8003910 <___vfprintf_internal_r+0x418>
 80038cc:	d9002c17 	ldw	r4,176(sp)
 80038d0:	d9801e04 	addi	r6,sp,120
 80038d4:	b80b883a 	mov	r5,r23
 80038d8:	80096580 	call	8009658 <__sprint_r>
 80038dc:	1000081e 	bne	r2,zero,8003900 <___vfprintf_internal_r+0x408>
 80038e0:	da000404 	addi	r8,sp,16
 80038e4:	003f5306 	br	8003634 <__alt_data_end+0xf8003634>
 80038e8:	d8802017 	ldw	r2,128(sp)
 80038ec:	10000426 	beq	r2,zero,8003900 <___vfprintf_internal_r+0x408>
 80038f0:	d9002c17 	ldw	r4,176(sp)
 80038f4:	d9801e04 	addi	r6,sp,120
 80038f8:	b80b883a 	mov	r5,r23
 80038fc:	80096580 	call	8009658 <__sprint_r>
 8003900:	b880030b 	ldhu	r2,12(r23)
 8003904:	1080100c 	andi	r2,r2,64
 8003908:	1005901e 	bne	r2,zero,8004f4c <___vfprintf_internal_r+0x1a54>
 800390c:	d8802f17 	ldw	r2,188(sp)
 8003910:	dfc04717 	ldw	ra,284(sp)
 8003914:	df004617 	ldw	fp,280(sp)
 8003918:	ddc04517 	ldw	r23,276(sp)
 800391c:	dd804417 	ldw	r22,272(sp)
 8003920:	dd404317 	ldw	r21,268(sp)
 8003924:	dd004217 	ldw	r20,264(sp)
 8003928:	dcc04117 	ldw	r19,260(sp)
 800392c:	dc804017 	ldw	r18,256(sp)
 8003930:	dc403f17 	ldw	r17,252(sp)
 8003934:	dc003e17 	ldw	r16,248(sp)
 8003938:	dec04804 	addi	sp,sp,288
 800393c:	f800283a 	ret
 8003940:	d9002c17 	ldw	r4,176(sp)
 8003944:	8000d800 	call	8000d80 <__sinit>
 8003948:	003f0406 	br	800355c <__alt_data_end+0xf800355c>
 800394c:	d8802d17 	ldw	r2,180(sp)
 8003950:	d9002d17 	ldw	r4,180(sp)
 8003954:	10800017 	ldw	r2,0(r2)
 8003958:	d8803115 	stw	r2,196(sp)
 800395c:	20800104 	addi	r2,r4,4
 8003960:	d9003117 	ldw	r4,196(sp)
 8003964:	203fa716 	blt	r4,zero,8003804 <__alt_data_end+0xf8003804>
 8003968:	d8802d15 	stw	r2,180(sp)
 800396c:	ac400007 	ldb	r17,0(r21)
 8003970:	003f4206 	br	800367c <__alt_data_end+0xf800367c>
 8003974:	ac400007 	ldb	r17,0(r21)
 8003978:	aac00044 	addi	r11,r21,1
 800397c:	8a872826 	beq	r17,r10,8005620 <___vfprintf_internal_r+0x2128>
 8003980:	88bff404 	addi	r2,r17,-48
 8003984:	0009883a 	mov	r4,zero
 8003988:	30867d36 	bltu	r6,r2,8005380 <___vfprintf_internal_r+0x1e88>
 800398c:	5c400007 	ldb	r17,0(r11)
 8003990:	210002a4 	muli	r4,r4,10
 8003994:	5d400044 	addi	r21,r11,1
 8003998:	a817883a 	mov	r11,r21
 800399c:	2089883a 	add	r4,r4,r2
 80039a0:	88bff404 	addi	r2,r17,-48
 80039a4:	30bff92e 	bgeu	r6,r2,800398c <__alt_data_end+0xf800398c>
 80039a8:	2005c916 	blt	r4,zero,80050d0 <___vfprintf_internal_r+0x1bd8>
 80039ac:	d9002915 	stw	r4,164(sp)
 80039b0:	003f3306 	br	8003680 <__alt_data_end+0xf8003680>
 80039b4:	94802014 	ori	r18,r18,128
 80039b8:	ac400007 	ldb	r17,0(r21)
 80039bc:	003f2f06 	br	800367c <__alt_data_end+0xf800367c>
 80039c0:	a809883a 	mov	r4,r21
 80039c4:	d8003115 	stw	zero,196(sp)
 80039c8:	88bff404 	addi	r2,r17,-48
 80039cc:	0017883a 	mov	r11,zero
 80039d0:	24400007 	ldb	r17,0(r4)
 80039d4:	5ac002a4 	muli	r11,r11,10
 80039d8:	ad400044 	addi	r21,r21,1
 80039dc:	a809883a 	mov	r4,r21
 80039e0:	12d7883a 	add	r11,r2,r11
 80039e4:	88bff404 	addi	r2,r17,-48
 80039e8:	30bff92e 	bgeu	r6,r2,80039d0 <__alt_data_end+0xf80039d0>
 80039ec:	dac03115 	stw	r11,196(sp)
 80039f0:	003f2306 	br	8003680 <__alt_data_end+0xf8003680>
 80039f4:	18c03fcc 	andi	r3,r3,255
 80039f8:	18072b1e 	bne	r3,zero,80056a8 <___vfprintf_internal_r+0x21b0>
 80039fc:	94800414 	ori	r18,r18,16
 8003a00:	9080080c 	andi	r2,r18,32
 8003a04:	10037b26 	beq	r2,zero,80047f4 <___vfprintf_internal_r+0x12fc>
 8003a08:	d9402d17 	ldw	r5,180(sp)
 8003a0c:	28800117 	ldw	r2,4(r5)
 8003a10:	2cc00017 	ldw	r19,0(r5)
 8003a14:	29400204 	addi	r5,r5,8
 8003a18:	d9402d15 	stw	r5,180(sp)
 8003a1c:	102d883a 	mov	r22,r2
 8003a20:	10044b16 	blt	r2,zero,8004b50 <___vfprintf_internal_r+0x1658>
 8003a24:	d9402917 	ldw	r5,164(sp)
 8003a28:	df002783 	ldbu	fp,158(sp)
 8003a2c:	2803bc16 	blt	r5,zero,8004920 <___vfprintf_internal_r+0x1428>
 8003a30:	00ffdfc4 	movi	r3,-129
 8003a34:	9d84b03a 	or	r2,r19,r22
 8003a38:	90e4703a 	and	r18,r18,r3
 8003a3c:	10017726 	beq	r2,zero,800401c <___vfprintf_internal_r+0xb24>
 8003a40:	b0038326 	beq	r22,zero,8004850 <___vfprintf_internal_r+0x1358>
 8003a44:	dc402a15 	stw	r17,168(sp)
 8003a48:	dc001e04 	addi	r16,sp,120
 8003a4c:	b023883a 	mov	r17,r22
 8003a50:	402d883a 	mov	r22,r8
 8003a54:	9809883a 	mov	r4,r19
 8003a58:	880b883a 	mov	r5,r17
 8003a5c:	01800284 	movi	r6,10
 8003a60:	000f883a 	mov	r7,zero
 8003a64:	800b7280 	call	800b728 <__umoddi3>
 8003a68:	10800c04 	addi	r2,r2,48
 8003a6c:	843fffc4 	addi	r16,r16,-1
 8003a70:	9809883a 	mov	r4,r19
 8003a74:	880b883a 	mov	r5,r17
 8003a78:	80800005 	stb	r2,0(r16)
 8003a7c:	01800284 	movi	r6,10
 8003a80:	000f883a 	mov	r7,zero
 8003a84:	800b1b00 	call	800b1b0 <__udivdi3>
 8003a88:	1027883a 	mov	r19,r2
 8003a8c:	10c4b03a 	or	r2,r2,r3
 8003a90:	1823883a 	mov	r17,r3
 8003a94:	103fef1e 	bne	r2,zero,8003a54 <__alt_data_end+0xf8003a54>
 8003a98:	d8c02817 	ldw	r3,160(sp)
 8003a9c:	dc402a17 	ldw	r17,168(sp)
 8003aa0:	b011883a 	mov	r8,r22
 8003aa4:	1c07c83a 	sub	r3,r3,r16
 8003aa8:	d8c02e15 	stw	r3,184(sp)
 8003aac:	00005906 	br	8003c14 <___vfprintf_internal_r+0x71c>
 8003ab0:	18c03fcc 	andi	r3,r3,255
 8003ab4:	1806fa1e 	bne	r3,zero,80056a0 <___vfprintf_internal_r+0x21a8>
 8003ab8:	9080020c 	andi	r2,r18,8
 8003abc:	10048a26 	beq	r2,zero,8004ce8 <___vfprintf_internal_r+0x17f0>
 8003ac0:	d8c02d17 	ldw	r3,180(sp)
 8003ac4:	d9002d17 	ldw	r4,180(sp)
 8003ac8:	d9402d17 	ldw	r5,180(sp)
 8003acc:	18c00017 	ldw	r3,0(r3)
 8003ad0:	21000117 	ldw	r4,4(r4)
 8003ad4:	29400204 	addi	r5,r5,8
 8003ad8:	d8c03615 	stw	r3,216(sp)
 8003adc:	d9003815 	stw	r4,224(sp)
 8003ae0:	d9402d15 	stw	r5,180(sp)
 8003ae4:	d9003617 	ldw	r4,216(sp)
 8003ae8:	d9403817 	ldw	r5,224(sp)
 8003aec:	da003d15 	stw	r8,244(sp)
 8003af0:	04000044 	movi	r16,1
 8003af4:	800940c0 	call	800940c <__fpclassifyd>
 8003af8:	da003d17 	ldw	r8,244(sp)
 8003afc:	14041f1e 	bne	r2,r16,8004b7c <___vfprintf_internal_r+0x1684>
 8003b00:	d9003617 	ldw	r4,216(sp)
 8003b04:	d9403817 	ldw	r5,224(sp)
 8003b08:	000d883a 	mov	r6,zero
 8003b0c:	000f883a 	mov	r7,zero
 8003b10:	800d10c0 	call	800d10c <__ledf2>
 8003b14:	da003d17 	ldw	r8,244(sp)
 8003b18:	1005be16 	blt	r2,zero,8005214 <___vfprintf_internal_r+0x1d1c>
 8003b1c:	df002783 	ldbu	fp,158(sp)
 8003b20:	008011c4 	movi	r2,71
 8003b24:	1445330e 	bge	r2,r17,8004ff4 <___vfprintf_internal_r+0x1afc>
 8003b28:	04020074 	movhi	r16,2049
 8003b2c:	84174604 	addi	r16,r16,23832
 8003b30:	00c000c4 	movi	r3,3
 8003b34:	00bfdfc4 	movi	r2,-129
 8003b38:	d8c02a15 	stw	r3,168(sp)
 8003b3c:	90a4703a 	and	r18,r18,r2
 8003b40:	d8c02e15 	stw	r3,184(sp)
 8003b44:	d8002915 	stw	zero,164(sp)
 8003b48:	d8003215 	stw	zero,200(sp)
 8003b4c:	00003706 	br	8003c2c <___vfprintf_internal_r+0x734>
 8003b50:	94800214 	ori	r18,r18,8
 8003b54:	ac400007 	ldb	r17,0(r21)
 8003b58:	003ec806 	br	800367c <__alt_data_end+0xf800367c>
 8003b5c:	18c03fcc 	andi	r3,r3,255
 8003b60:	1806db1e 	bne	r3,zero,80056d0 <___vfprintf_internal_r+0x21d8>
 8003b64:	94800414 	ori	r18,r18,16
 8003b68:	9080080c 	andi	r2,r18,32
 8003b6c:	1002d826 	beq	r2,zero,80046d0 <___vfprintf_internal_r+0x11d8>
 8003b70:	d9402d17 	ldw	r5,180(sp)
 8003b74:	d8c02917 	ldw	r3,164(sp)
 8003b78:	d8002785 	stb	zero,158(sp)
 8003b7c:	28800204 	addi	r2,r5,8
 8003b80:	2cc00017 	ldw	r19,0(r5)
 8003b84:	2d800117 	ldw	r22,4(r5)
 8003b88:	18048f16 	blt	r3,zero,8004dc8 <___vfprintf_internal_r+0x18d0>
 8003b8c:	013fdfc4 	movi	r4,-129
 8003b90:	9d86b03a 	or	r3,r19,r22
 8003b94:	d8802d15 	stw	r2,180(sp)
 8003b98:	9124703a 	and	r18,r18,r4
 8003b9c:	1802d91e 	bne	r3,zero,8004704 <___vfprintf_internal_r+0x120c>
 8003ba0:	d8c02917 	ldw	r3,164(sp)
 8003ba4:	0039883a 	mov	fp,zero
 8003ba8:	1805c326 	beq	r3,zero,80052b8 <___vfprintf_internal_r+0x1dc0>
 8003bac:	0027883a 	mov	r19,zero
 8003bb0:	002d883a 	mov	r22,zero
 8003bb4:	dc001e04 	addi	r16,sp,120
 8003bb8:	9806d0fa 	srli	r3,r19,3
 8003bbc:	b008977a 	slli	r4,r22,29
 8003bc0:	b02cd0fa 	srli	r22,r22,3
 8003bc4:	9cc001cc 	andi	r19,r19,7
 8003bc8:	98800c04 	addi	r2,r19,48
 8003bcc:	843fffc4 	addi	r16,r16,-1
 8003bd0:	20e6b03a 	or	r19,r4,r3
 8003bd4:	80800005 	stb	r2,0(r16)
 8003bd8:	9d86b03a 	or	r3,r19,r22
 8003bdc:	183ff61e 	bne	r3,zero,8003bb8 <__alt_data_end+0xf8003bb8>
 8003be0:	90c0004c 	andi	r3,r18,1
 8003be4:	18013b26 	beq	r3,zero,80040d4 <___vfprintf_internal_r+0xbdc>
 8003be8:	10803fcc 	andi	r2,r2,255
 8003bec:	1080201c 	xori	r2,r2,128
 8003bf0:	10bfe004 	addi	r2,r2,-128
 8003bf4:	00c00c04 	movi	r3,48
 8003bf8:	10c13626 	beq	r2,r3,80040d4 <___vfprintf_internal_r+0xbdc>
 8003bfc:	80ffffc5 	stb	r3,-1(r16)
 8003c00:	d8c02817 	ldw	r3,160(sp)
 8003c04:	80bfffc4 	addi	r2,r16,-1
 8003c08:	1021883a 	mov	r16,r2
 8003c0c:	1887c83a 	sub	r3,r3,r2
 8003c10:	d8c02e15 	stw	r3,184(sp)
 8003c14:	d8802e17 	ldw	r2,184(sp)
 8003c18:	d9002917 	ldw	r4,164(sp)
 8003c1c:	1100010e 	bge	r2,r4,8003c24 <___vfprintf_internal_r+0x72c>
 8003c20:	2005883a 	mov	r2,r4
 8003c24:	d8802a15 	stw	r2,168(sp)
 8003c28:	d8003215 	stw	zero,200(sp)
 8003c2c:	e7003fcc 	andi	fp,fp,255
 8003c30:	e700201c 	xori	fp,fp,128
 8003c34:	e73fe004 	addi	fp,fp,-128
 8003c38:	e0000326 	beq	fp,zero,8003c48 <___vfprintf_internal_r+0x750>
 8003c3c:	d8c02a17 	ldw	r3,168(sp)
 8003c40:	18c00044 	addi	r3,r3,1
 8003c44:	d8c02a15 	stw	r3,168(sp)
 8003c48:	90c0008c 	andi	r3,r18,2
 8003c4c:	d8c02b15 	stw	r3,172(sp)
 8003c50:	18000326 	beq	r3,zero,8003c60 <___vfprintf_internal_r+0x768>
 8003c54:	d8c02a17 	ldw	r3,168(sp)
 8003c58:	18c00084 	addi	r3,r3,2
 8003c5c:	d8c02a15 	stw	r3,168(sp)
 8003c60:	90c0210c 	andi	r3,r18,132
 8003c64:	d8c03015 	stw	r3,192(sp)
 8003c68:	1801a31e 	bne	r3,zero,80042f8 <___vfprintf_internal_r+0xe00>
 8003c6c:	d9003117 	ldw	r4,196(sp)
 8003c70:	d8c02a17 	ldw	r3,168(sp)
 8003c74:	20e7c83a 	sub	r19,r4,r3
 8003c78:	04c19f0e 	bge	zero,r19,80042f8 <___vfprintf_internal_r+0xe00>
 8003c7c:	02400404 	movi	r9,16
 8003c80:	d8c02017 	ldw	r3,128(sp)
 8003c84:	d8801f17 	ldw	r2,124(sp)
 8003c88:	4cc50d0e 	bge	r9,r19,80050c0 <___vfprintf_internal_r+0x1bc8>
 8003c8c:	01420074 	movhi	r5,2049
 8003c90:	29575984 	addi	r5,r5,23910
 8003c94:	dc403b15 	stw	r17,236(sp)
 8003c98:	d9403515 	stw	r5,212(sp)
 8003c9c:	9823883a 	mov	r17,r19
 8003ca0:	482d883a 	mov	r22,r9
 8003ca4:	9027883a 	mov	r19,r18
 8003ca8:	070001c4 	movi	fp,7
 8003cac:	8025883a 	mov	r18,r16
 8003cb0:	dc002c17 	ldw	r16,176(sp)
 8003cb4:	00000306 	br	8003cc4 <___vfprintf_internal_r+0x7cc>
 8003cb8:	8c7ffc04 	addi	r17,r17,-16
 8003cbc:	42000204 	addi	r8,r8,8
 8003cc0:	b440130e 	bge	r22,r17,8003d10 <___vfprintf_internal_r+0x818>
 8003cc4:	01020074 	movhi	r4,2049
 8003cc8:	18c00404 	addi	r3,r3,16
 8003ccc:	10800044 	addi	r2,r2,1
 8003cd0:	21175984 	addi	r4,r4,23910
 8003cd4:	41000015 	stw	r4,0(r8)
 8003cd8:	45800115 	stw	r22,4(r8)
 8003cdc:	d8c02015 	stw	r3,128(sp)
 8003ce0:	d8801f15 	stw	r2,124(sp)
 8003ce4:	e0bff40e 	bge	fp,r2,8003cb8 <__alt_data_end+0xf8003cb8>
 8003ce8:	d9801e04 	addi	r6,sp,120
 8003cec:	b80b883a 	mov	r5,r23
 8003cf0:	8009883a 	mov	r4,r16
 8003cf4:	80096580 	call	8009658 <__sprint_r>
 8003cf8:	103f011e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8003cfc:	8c7ffc04 	addi	r17,r17,-16
 8003d00:	d8c02017 	ldw	r3,128(sp)
 8003d04:	d8801f17 	ldw	r2,124(sp)
 8003d08:	da000404 	addi	r8,sp,16
 8003d0c:	b47fed16 	blt	r22,r17,8003cc4 <__alt_data_end+0xf8003cc4>
 8003d10:	9021883a 	mov	r16,r18
 8003d14:	9825883a 	mov	r18,r19
 8003d18:	8827883a 	mov	r19,r17
 8003d1c:	dc403b17 	ldw	r17,236(sp)
 8003d20:	d9403517 	ldw	r5,212(sp)
 8003d24:	98c7883a 	add	r3,r19,r3
 8003d28:	10800044 	addi	r2,r2,1
 8003d2c:	41400015 	stw	r5,0(r8)
 8003d30:	44c00115 	stw	r19,4(r8)
 8003d34:	d8c02015 	stw	r3,128(sp)
 8003d38:	d8801f15 	stw	r2,124(sp)
 8003d3c:	010001c4 	movi	r4,7
 8003d40:	2082a316 	blt	r4,r2,80047d0 <___vfprintf_internal_r+0x12d8>
 8003d44:	df002787 	ldb	fp,158(sp)
 8003d48:	42000204 	addi	r8,r8,8
 8003d4c:	e0000c26 	beq	fp,zero,8003d80 <___vfprintf_internal_r+0x888>
 8003d50:	d8801f17 	ldw	r2,124(sp)
 8003d54:	d9002784 	addi	r4,sp,158
 8003d58:	18c00044 	addi	r3,r3,1
 8003d5c:	10800044 	addi	r2,r2,1
 8003d60:	41000015 	stw	r4,0(r8)
 8003d64:	01000044 	movi	r4,1
 8003d68:	41000115 	stw	r4,4(r8)
 8003d6c:	d8c02015 	stw	r3,128(sp)
 8003d70:	d8801f15 	stw	r2,124(sp)
 8003d74:	010001c4 	movi	r4,7
 8003d78:	20823c16 	blt	r4,r2,800466c <___vfprintf_internal_r+0x1174>
 8003d7c:	42000204 	addi	r8,r8,8
 8003d80:	d8802b17 	ldw	r2,172(sp)
 8003d84:	10000c26 	beq	r2,zero,8003db8 <___vfprintf_internal_r+0x8c0>
 8003d88:	d8801f17 	ldw	r2,124(sp)
 8003d8c:	d9002704 	addi	r4,sp,156
 8003d90:	18c00084 	addi	r3,r3,2
 8003d94:	10800044 	addi	r2,r2,1
 8003d98:	41000015 	stw	r4,0(r8)
 8003d9c:	01000084 	movi	r4,2
 8003da0:	41000115 	stw	r4,4(r8)
 8003da4:	d8c02015 	stw	r3,128(sp)
 8003da8:	d8801f15 	stw	r2,124(sp)
 8003dac:	010001c4 	movi	r4,7
 8003db0:	20823616 	blt	r4,r2,800468c <___vfprintf_internal_r+0x1194>
 8003db4:	42000204 	addi	r8,r8,8
 8003db8:	d9003017 	ldw	r4,192(sp)
 8003dbc:	00802004 	movi	r2,128
 8003dc0:	20819926 	beq	r4,r2,8004428 <___vfprintf_internal_r+0xf30>
 8003dc4:	d9402917 	ldw	r5,164(sp)
 8003dc8:	d8802e17 	ldw	r2,184(sp)
 8003dcc:	28adc83a 	sub	r22,r5,r2
 8003dd0:	0580310e 	bge	zero,r22,8003e98 <___vfprintf_internal_r+0x9a0>
 8003dd4:	07000404 	movi	fp,16
 8003dd8:	d8801f17 	ldw	r2,124(sp)
 8003ddc:	e584140e 	bge	fp,r22,8004e30 <___vfprintf_internal_r+0x1938>
 8003de0:	01420074 	movhi	r5,2049
 8003de4:	29575584 	addi	r5,r5,23894
 8003de8:	dc402915 	stw	r17,164(sp)
 8003dec:	d9402b15 	stw	r5,172(sp)
 8003df0:	b023883a 	mov	r17,r22
 8003df4:	04c001c4 	movi	r19,7
 8003df8:	a82d883a 	mov	r22,r21
 8003dfc:	902b883a 	mov	r21,r18
 8003e00:	8025883a 	mov	r18,r16
 8003e04:	dc002c17 	ldw	r16,176(sp)
 8003e08:	00000306 	br	8003e18 <___vfprintf_internal_r+0x920>
 8003e0c:	8c7ffc04 	addi	r17,r17,-16
 8003e10:	42000204 	addi	r8,r8,8
 8003e14:	e440110e 	bge	fp,r17,8003e5c <___vfprintf_internal_r+0x964>
 8003e18:	18c00404 	addi	r3,r3,16
 8003e1c:	10800044 	addi	r2,r2,1
 8003e20:	45000015 	stw	r20,0(r8)
 8003e24:	47000115 	stw	fp,4(r8)
 8003e28:	d8c02015 	stw	r3,128(sp)
 8003e2c:	d8801f15 	stw	r2,124(sp)
 8003e30:	98bff60e 	bge	r19,r2,8003e0c <__alt_data_end+0xf8003e0c>
 8003e34:	d9801e04 	addi	r6,sp,120
 8003e38:	b80b883a 	mov	r5,r23
 8003e3c:	8009883a 	mov	r4,r16
 8003e40:	80096580 	call	8009658 <__sprint_r>
 8003e44:	103eae1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8003e48:	8c7ffc04 	addi	r17,r17,-16
 8003e4c:	d8c02017 	ldw	r3,128(sp)
 8003e50:	d8801f17 	ldw	r2,124(sp)
 8003e54:	da000404 	addi	r8,sp,16
 8003e58:	e47fef16 	blt	fp,r17,8003e18 <__alt_data_end+0xf8003e18>
 8003e5c:	9021883a 	mov	r16,r18
 8003e60:	a825883a 	mov	r18,r21
 8003e64:	b02b883a 	mov	r21,r22
 8003e68:	882d883a 	mov	r22,r17
 8003e6c:	dc402917 	ldw	r17,164(sp)
 8003e70:	d9002b17 	ldw	r4,172(sp)
 8003e74:	1d87883a 	add	r3,r3,r22
 8003e78:	10800044 	addi	r2,r2,1
 8003e7c:	41000015 	stw	r4,0(r8)
 8003e80:	45800115 	stw	r22,4(r8)
 8003e84:	d8c02015 	stw	r3,128(sp)
 8003e88:	d8801f15 	stw	r2,124(sp)
 8003e8c:	010001c4 	movi	r4,7
 8003e90:	2081ee16 	blt	r4,r2,800464c <___vfprintf_internal_r+0x1154>
 8003e94:	42000204 	addi	r8,r8,8
 8003e98:	9080400c 	andi	r2,r18,256
 8003e9c:	1001181e 	bne	r2,zero,8004300 <___vfprintf_internal_r+0xe08>
 8003ea0:	d9402e17 	ldw	r5,184(sp)
 8003ea4:	d8801f17 	ldw	r2,124(sp)
 8003ea8:	44000015 	stw	r16,0(r8)
 8003eac:	1947883a 	add	r3,r3,r5
 8003eb0:	10800044 	addi	r2,r2,1
 8003eb4:	41400115 	stw	r5,4(r8)
 8003eb8:	d8c02015 	stw	r3,128(sp)
 8003ebc:	d8801f15 	stw	r2,124(sp)
 8003ec0:	010001c4 	movi	r4,7
 8003ec4:	2081d316 	blt	r4,r2,8004614 <___vfprintf_internal_r+0x111c>
 8003ec8:	42000204 	addi	r8,r8,8
 8003ecc:	9480010c 	andi	r18,r18,4
 8003ed0:	90003226 	beq	r18,zero,8003f9c <___vfprintf_internal_r+0xaa4>
 8003ed4:	d9403117 	ldw	r5,196(sp)
 8003ed8:	d8802a17 	ldw	r2,168(sp)
 8003edc:	28a1c83a 	sub	r16,r5,r2
 8003ee0:	04002e0e 	bge	zero,r16,8003f9c <___vfprintf_internal_r+0xaa4>
 8003ee4:	04400404 	movi	r17,16
 8003ee8:	d8801f17 	ldw	r2,124(sp)
 8003eec:	8c04a20e 	bge	r17,r16,8005178 <___vfprintf_internal_r+0x1c80>
 8003ef0:	01420074 	movhi	r5,2049
 8003ef4:	29575984 	addi	r5,r5,23910
 8003ef8:	d9403515 	stw	r5,212(sp)
 8003efc:	048001c4 	movi	r18,7
 8003f00:	dcc02c17 	ldw	r19,176(sp)
 8003f04:	00000306 	br	8003f14 <___vfprintf_internal_r+0xa1c>
 8003f08:	843ffc04 	addi	r16,r16,-16
 8003f0c:	42000204 	addi	r8,r8,8
 8003f10:	8c00130e 	bge	r17,r16,8003f60 <___vfprintf_internal_r+0xa68>
 8003f14:	01020074 	movhi	r4,2049
 8003f18:	18c00404 	addi	r3,r3,16
 8003f1c:	10800044 	addi	r2,r2,1
 8003f20:	21175984 	addi	r4,r4,23910
 8003f24:	41000015 	stw	r4,0(r8)
 8003f28:	44400115 	stw	r17,4(r8)
 8003f2c:	d8c02015 	stw	r3,128(sp)
 8003f30:	d8801f15 	stw	r2,124(sp)
 8003f34:	90bff40e 	bge	r18,r2,8003f08 <__alt_data_end+0xf8003f08>
 8003f38:	d9801e04 	addi	r6,sp,120
 8003f3c:	b80b883a 	mov	r5,r23
 8003f40:	9809883a 	mov	r4,r19
 8003f44:	80096580 	call	8009658 <__sprint_r>
 8003f48:	103e6d1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8003f4c:	843ffc04 	addi	r16,r16,-16
 8003f50:	d8c02017 	ldw	r3,128(sp)
 8003f54:	d8801f17 	ldw	r2,124(sp)
 8003f58:	da000404 	addi	r8,sp,16
 8003f5c:	8c3fed16 	blt	r17,r16,8003f14 <__alt_data_end+0xf8003f14>
 8003f60:	d9403517 	ldw	r5,212(sp)
 8003f64:	1c07883a 	add	r3,r3,r16
 8003f68:	10800044 	addi	r2,r2,1
 8003f6c:	41400015 	stw	r5,0(r8)
 8003f70:	44000115 	stw	r16,4(r8)
 8003f74:	d8c02015 	stw	r3,128(sp)
 8003f78:	d8801f15 	stw	r2,124(sp)
 8003f7c:	010001c4 	movi	r4,7
 8003f80:	2080060e 	bge	r4,r2,8003f9c <___vfprintf_internal_r+0xaa4>
 8003f84:	d9002c17 	ldw	r4,176(sp)
 8003f88:	d9801e04 	addi	r6,sp,120
 8003f8c:	b80b883a 	mov	r5,r23
 8003f90:	80096580 	call	8009658 <__sprint_r>
 8003f94:	103e5a1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8003f98:	d8c02017 	ldw	r3,128(sp)
 8003f9c:	d8803117 	ldw	r2,196(sp)
 8003fa0:	d9002a17 	ldw	r4,168(sp)
 8003fa4:	1100010e 	bge	r2,r4,8003fac <___vfprintf_internal_r+0xab4>
 8003fa8:	2005883a 	mov	r2,r4
 8003fac:	d9402f17 	ldw	r5,188(sp)
 8003fb0:	288b883a 	add	r5,r5,r2
 8003fb4:	d9402f15 	stw	r5,188(sp)
 8003fb8:	18019e1e 	bne	r3,zero,8004634 <___vfprintf_internal_r+0x113c>
 8003fbc:	a8800007 	ldb	r2,0(r21)
 8003fc0:	d8001f15 	stw	zero,124(sp)
 8003fc4:	da000404 	addi	r8,sp,16
 8003fc8:	103d851e 	bne	r2,zero,80035e0 <__alt_data_end+0xf80035e0>
 8003fcc:	a821883a 	mov	r16,r21
 8003fd0:	003d9b06 	br	8003640 <__alt_data_end+0xf8003640>
 8003fd4:	18c03fcc 	andi	r3,r3,255
 8003fd8:	1805c11e 	bne	r3,zero,80056e0 <___vfprintf_internal_r+0x21e8>
 8003fdc:	94800414 	ori	r18,r18,16
 8003fe0:	9080080c 	andi	r2,r18,32
 8003fe4:	10020c26 	beq	r2,zero,8004818 <___vfprintf_internal_r+0x1320>
 8003fe8:	d8802d17 	ldw	r2,180(sp)
 8003fec:	d9002917 	ldw	r4,164(sp)
 8003ff0:	d8002785 	stb	zero,158(sp)
 8003ff4:	10c00204 	addi	r3,r2,8
 8003ff8:	14c00017 	ldw	r19,0(r2)
 8003ffc:	15800117 	ldw	r22,4(r2)
 8004000:	20040f16 	blt	r4,zero,8005040 <___vfprintf_internal_r+0x1b48>
 8004004:	013fdfc4 	movi	r4,-129
 8004008:	9d84b03a 	or	r2,r19,r22
 800400c:	d8c02d15 	stw	r3,180(sp)
 8004010:	9124703a 	and	r18,r18,r4
 8004014:	0039883a 	mov	fp,zero
 8004018:	103e891e 	bne	r2,zero,8003a40 <__alt_data_end+0xf8003a40>
 800401c:	d9002917 	ldw	r4,164(sp)
 8004020:	2002c11e 	bne	r4,zero,8004b28 <___vfprintf_internal_r+0x1630>
 8004024:	d8002915 	stw	zero,164(sp)
 8004028:	d8002e15 	stw	zero,184(sp)
 800402c:	dc001e04 	addi	r16,sp,120
 8004030:	003ef806 	br	8003c14 <__alt_data_end+0xf8003c14>
 8004034:	18c03fcc 	andi	r3,r3,255
 8004038:	18059d1e 	bne	r3,zero,80056b0 <___vfprintf_internal_r+0x21b8>
 800403c:	01420074 	movhi	r5,2049
 8004040:	29574904 	addi	r5,r5,23844
 8004044:	d9403915 	stw	r5,228(sp)
 8004048:	9080080c 	andi	r2,r18,32
 800404c:	10005226 	beq	r2,zero,8004198 <___vfprintf_internal_r+0xca0>
 8004050:	d8802d17 	ldw	r2,180(sp)
 8004054:	14c00017 	ldw	r19,0(r2)
 8004058:	15800117 	ldw	r22,4(r2)
 800405c:	10800204 	addi	r2,r2,8
 8004060:	d8802d15 	stw	r2,180(sp)
 8004064:	9080004c 	andi	r2,r18,1
 8004068:	10019026 	beq	r2,zero,80046ac <___vfprintf_internal_r+0x11b4>
 800406c:	9d84b03a 	or	r2,r19,r22
 8004070:	10036926 	beq	r2,zero,8004e18 <___vfprintf_internal_r+0x1920>
 8004074:	d8c02917 	ldw	r3,164(sp)
 8004078:	00800c04 	movi	r2,48
 800407c:	d8802705 	stb	r2,156(sp)
 8004080:	dc402745 	stb	r17,157(sp)
 8004084:	d8002785 	stb	zero,158(sp)
 8004088:	90800094 	ori	r2,r18,2
 800408c:	18045d16 	blt	r3,zero,8005204 <___vfprintf_internal_r+0x1d0c>
 8004090:	00bfdfc4 	movi	r2,-129
 8004094:	90a4703a 	and	r18,r18,r2
 8004098:	94800094 	ori	r18,r18,2
 800409c:	0039883a 	mov	fp,zero
 80040a0:	d9003917 	ldw	r4,228(sp)
 80040a4:	dc001e04 	addi	r16,sp,120
 80040a8:	988003cc 	andi	r2,r19,15
 80040ac:	b006973a 	slli	r3,r22,28
 80040b0:	2085883a 	add	r2,r4,r2
 80040b4:	9826d13a 	srli	r19,r19,4
 80040b8:	10800003 	ldbu	r2,0(r2)
 80040bc:	b02cd13a 	srli	r22,r22,4
 80040c0:	843fffc4 	addi	r16,r16,-1
 80040c4:	1ce6b03a 	or	r19,r3,r19
 80040c8:	80800005 	stb	r2,0(r16)
 80040cc:	9d84b03a 	or	r2,r19,r22
 80040d0:	103ff51e 	bne	r2,zero,80040a8 <__alt_data_end+0xf80040a8>
 80040d4:	d8c02817 	ldw	r3,160(sp)
 80040d8:	1c07c83a 	sub	r3,r3,r16
 80040dc:	d8c02e15 	stw	r3,184(sp)
 80040e0:	003ecc06 	br	8003c14 <__alt_data_end+0xf8003c14>
 80040e4:	18c03fcc 	andi	r3,r3,255
 80040e8:	183e9f26 	beq	r3,zero,8003b68 <__alt_data_end+0xf8003b68>
 80040ec:	d9c02785 	stb	r7,158(sp)
 80040f0:	003e9d06 	br	8003b68 <__alt_data_end+0xf8003b68>
 80040f4:	00c00044 	movi	r3,1
 80040f8:	01c00ac4 	movi	r7,43
 80040fc:	ac400007 	ldb	r17,0(r21)
 8004100:	003d5e06 	br	800367c <__alt_data_end+0xf800367c>
 8004104:	94800814 	ori	r18,r18,32
 8004108:	ac400007 	ldb	r17,0(r21)
 800410c:	003d5b06 	br	800367c <__alt_data_end+0xf800367c>
 8004110:	d8c02d17 	ldw	r3,180(sp)
 8004114:	d8002785 	stb	zero,158(sp)
 8004118:	1c000017 	ldw	r16,0(r3)
 800411c:	1cc00104 	addi	r19,r3,4
 8004120:	80041926 	beq	r16,zero,8005188 <___vfprintf_internal_r+0x1c90>
 8004124:	d9002917 	ldw	r4,164(sp)
 8004128:	2003d016 	blt	r4,zero,800506c <___vfprintf_internal_r+0x1b74>
 800412c:	200d883a 	mov	r6,r4
 8004130:	000b883a 	mov	r5,zero
 8004134:	8009883a 	mov	r4,r16
 8004138:	da003d15 	stw	r8,244(sp)
 800413c:	8007aa40 	call	8007aa4 <memchr>
 8004140:	da003d17 	ldw	r8,244(sp)
 8004144:	10045426 	beq	r2,zero,8005298 <___vfprintf_internal_r+0x1da0>
 8004148:	1405c83a 	sub	r2,r2,r16
 800414c:	d8802e15 	stw	r2,184(sp)
 8004150:	1003cc16 	blt	r2,zero,8005084 <___vfprintf_internal_r+0x1b8c>
 8004154:	df002783 	ldbu	fp,158(sp)
 8004158:	d8802a15 	stw	r2,168(sp)
 800415c:	dcc02d15 	stw	r19,180(sp)
 8004160:	d8002915 	stw	zero,164(sp)
 8004164:	d8003215 	stw	zero,200(sp)
 8004168:	003eb006 	br	8003c2c <__alt_data_end+0xf8003c2c>
 800416c:	18c03fcc 	andi	r3,r3,255
 8004170:	183f9b26 	beq	r3,zero,8003fe0 <__alt_data_end+0xf8003fe0>
 8004174:	d9c02785 	stb	r7,158(sp)
 8004178:	003f9906 	br	8003fe0 <__alt_data_end+0xf8003fe0>
 800417c:	18c03fcc 	andi	r3,r3,255
 8004180:	1805551e 	bne	r3,zero,80056d8 <___vfprintf_internal_r+0x21e0>
 8004184:	01420074 	movhi	r5,2049
 8004188:	29574e04 	addi	r5,r5,23864
 800418c:	d9403915 	stw	r5,228(sp)
 8004190:	9080080c 	andi	r2,r18,32
 8004194:	103fae1e 	bne	r2,zero,8004050 <__alt_data_end+0xf8004050>
 8004198:	9080040c 	andi	r2,r18,16
 800419c:	1002de26 	beq	r2,zero,8004d18 <___vfprintf_internal_r+0x1820>
 80041a0:	d8c02d17 	ldw	r3,180(sp)
 80041a4:	002d883a 	mov	r22,zero
 80041a8:	1cc00017 	ldw	r19,0(r3)
 80041ac:	18c00104 	addi	r3,r3,4
 80041b0:	d8c02d15 	stw	r3,180(sp)
 80041b4:	003fab06 	br	8004064 <__alt_data_end+0xf8004064>
 80041b8:	38803fcc 	andi	r2,r7,255
 80041bc:	1080201c 	xori	r2,r2,128
 80041c0:	10bfe004 	addi	r2,r2,-128
 80041c4:	1002d21e 	bne	r2,zero,8004d10 <___vfprintf_internal_r+0x1818>
 80041c8:	00c00044 	movi	r3,1
 80041cc:	01c00804 	movi	r7,32
 80041d0:	ac400007 	ldb	r17,0(r21)
 80041d4:	003d2906 	br	800367c <__alt_data_end+0xf800367c>
 80041d8:	94800054 	ori	r18,r18,1
 80041dc:	ac400007 	ldb	r17,0(r21)
 80041e0:	003d2606 	br	800367c <__alt_data_end+0xf800367c>
 80041e4:	18c03fcc 	andi	r3,r3,255
 80041e8:	183e0526 	beq	r3,zero,8003a00 <__alt_data_end+0xf8003a00>
 80041ec:	d9c02785 	stb	r7,158(sp)
 80041f0:	003e0306 	br	8003a00 <__alt_data_end+0xf8003a00>
 80041f4:	94801014 	ori	r18,r18,64
 80041f8:	ac400007 	ldb	r17,0(r21)
 80041fc:	003d1f06 	br	800367c <__alt_data_end+0xf800367c>
 8004200:	ac400007 	ldb	r17,0(r21)
 8004204:	8a438726 	beq	r17,r9,8005024 <___vfprintf_internal_r+0x1b2c>
 8004208:	94800414 	ori	r18,r18,16
 800420c:	003d1b06 	br	800367c <__alt_data_end+0xf800367c>
 8004210:	18c03fcc 	andi	r3,r3,255
 8004214:	1805341e 	bne	r3,zero,80056e8 <___vfprintf_internal_r+0x21f0>
 8004218:	9080080c 	andi	r2,r18,32
 800421c:	1002cd26 	beq	r2,zero,8004d54 <___vfprintf_internal_r+0x185c>
 8004220:	d9402d17 	ldw	r5,180(sp)
 8004224:	d9002f17 	ldw	r4,188(sp)
 8004228:	28800017 	ldw	r2,0(r5)
 800422c:	2007d7fa 	srai	r3,r4,31
 8004230:	29400104 	addi	r5,r5,4
 8004234:	d9402d15 	stw	r5,180(sp)
 8004238:	11000015 	stw	r4,0(r2)
 800423c:	10c00115 	stw	r3,4(r2)
 8004240:	003ce506 	br	80035d8 <__alt_data_end+0xf80035d8>
 8004244:	d8c02d17 	ldw	r3,180(sp)
 8004248:	d9002d17 	ldw	r4,180(sp)
 800424c:	d8002785 	stb	zero,158(sp)
 8004250:	18800017 	ldw	r2,0(r3)
 8004254:	21000104 	addi	r4,r4,4
 8004258:	00c00044 	movi	r3,1
 800425c:	d8c02a15 	stw	r3,168(sp)
 8004260:	d8801405 	stb	r2,80(sp)
 8004264:	d9002d15 	stw	r4,180(sp)
 8004268:	d8c02e15 	stw	r3,184(sp)
 800426c:	d8002915 	stw	zero,164(sp)
 8004270:	d8003215 	stw	zero,200(sp)
 8004274:	dc001404 	addi	r16,sp,80
 8004278:	0039883a 	mov	fp,zero
 800427c:	003e7206 	br	8003c48 <__alt_data_end+0xf8003c48>
 8004280:	01020074 	movhi	r4,2049
 8004284:	21174e04 	addi	r4,r4,23864
 8004288:	0039883a 	mov	fp,zero
 800428c:	d9003915 	stw	r4,228(sp)
 8004290:	04401e04 	movi	r17,120
 8004294:	003f8206 	br	80040a0 <__alt_data_end+0xf80040a0>
 8004298:	18c03fcc 	andi	r3,r3,255
 800429c:	1805061e 	bne	r3,zero,80056b8 <___vfprintf_internal_r+0x21c0>
 80042a0:	883d9126 	beq	r17,zero,80038e8 <__alt_data_end+0xf80038e8>
 80042a4:	00c00044 	movi	r3,1
 80042a8:	d8c02a15 	stw	r3,168(sp)
 80042ac:	dc401405 	stb	r17,80(sp)
 80042b0:	d8002785 	stb	zero,158(sp)
 80042b4:	003fec06 	br	8004268 <__alt_data_end+0xf8004268>
 80042b8:	01420074 	movhi	r5,2049
 80042bc:	29574e04 	addi	r5,r5,23864
 80042c0:	d9403915 	stw	r5,228(sp)
 80042c4:	d8c02d15 	stw	r3,180(sp)
 80042c8:	1025883a 	mov	r18,r2
 80042cc:	04401e04 	movi	r17,120
 80042d0:	9d84b03a 	or	r2,r19,r22
 80042d4:	1000fc1e 	bne	r2,zero,80046c8 <___vfprintf_internal_r+0x11d0>
 80042d8:	0039883a 	mov	fp,zero
 80042dc:	00800084 	movi	r2,2
 80042e0:	10803fcc 	andi	r2,r2,255
 80042e4:	00c00044 	movi	r3,1
 80042e8:	10c20f26 	beq	r2,r3,8004b28 <___vfprintf_internal_r+0x1630>
 80042ec:	00c00084 	movi	r3,2
 80042f0:	10fd6326 	beq	r2,r3,8003880 <__alt_data_end+0xf8003880>
 80042f4:	003e2d06 	br	8003bac <__alt_data_end+0xf8003bac>
 80042f8:	d8c02017 	ldw	r3,128(sp)
 80042fc:	003e9306 	br	8003d4c <__alt_data_end+0xf8003d4c>
 8004300:	00801944 	movi	r2,101
 8004304:	14407e0e 	bge	r2,r17,8004500 <___vfprintf_internal_r+0x1008>
 8004308:	d9003617 	ldw	r4,216(sp)
 800430c:	d9403817 	ldw	r5,224(sp)
 8004310:	000d883a 	mov	r6,zero
 8004314:	000f883a 	mov	r7,zero
 8004318:	d8c03c15 	stw	r3,240(sp)
 800431c:	da003d15 	stw	r8,244(sp)
 8004320:	800cfa80 	call	800cfa8 <__eqdf2>
 8004324:	d8c03c17 	ldw	r3,240(sp)
 8004328:	da003d17 	ldw	r8,244(sp)
 800432c:	1000f71e 	bne	r2,zero,800470c <___vfprintf_internal_r+0x1214>
 8004330:	d8801f17 	ldw	r2,124(sp)
 8004334:	01020074 	movhi	r4,2049
 8004338:	21175504 	addi	r4,r4,23892
 800433c:	18c00044 	addi	r3,r3,1
 8004340:	10800044 	addi	r2,r2,1
 8004344:	41000015 	stw	r4,0(r8)
 8004348:	01000044 	movi	r4,1
 800434c:	41000115 	stw	r4,4(r8)
 8004350:	d8c02015 	stw	r3,128(sp)
 8004354:	d8801f15 	stw	r2,124(sp)
 8004358:	010001c4 	movi	r4,7
 800435c:	2082b816 	blt	r4,r2,8004e40 <___vfprintf_internal_r+0x1948>
 8004360:	42000204 	addi	r8,r8,8
 8004364:	d8802617 	ldw	r2,152(sp)
 8004368:	d9403317 	ldw	r5,204(sp)
 800436c:	11400216 	blt	r2,r5,8004378 <___vfprintf_internal_r+0xe80>
 8004370:	9080004c 	andi	r2,r18,1
 8004374:	103ed526 	beq	r2,zero,8003ecc <__alt_data_end+0xf8003ecc>
 8004378:	d8803717 	ldw	r2,220(sp)
 800437c:	d9003417 	ldw	r4,208(sp)
 8004380:	d9403717 	ldw	r5,220(sp)
 8004384:	1887883a 	add	r3,r3,r2
 8004388:	d8801f17 	ldw	r2,124(sp)
 800438c:	41000015 	stw	r4,0(r8)
 8004390:	41400115 	stw	r5,4(r8)
 8004394:	10800044 	addi	r2,r2,1
 8004398:	d8c02015 	stw	r3,128(sp)
 800439c:	d8801f15 	stw	r2,124(sp)
 80043a0:	010001c4 	movi	r4,7
 80043a4:	20832916 	blt	r4,r2,800504c <___vfprintf_internal_r+0x1b54>
 80043a8:	42000204 	addi	r8,r8,8
 80043ac:	d8803317 	ldw	r2,204(sp)
 80043b0:	143fffc4 	addi	r16,r2,-1
 80043b4:	043ec50e 	bge	zero,r16,8003ecc <__alt_data_end+0xf8003ecc>
 80043b8:	04400404 	movi	r17,16
 80043bc:	d8801f17 	ldw	r2,124(sp)
 80043c0:	8c00880e 	bge	r17,r16,80045e4 <___vfprintf_internal_r+0x10ec>
 80043c4:	01420074 	movhi	r5,2049
 80043c8:	29575584 	addi	r5,r5,23894
 80043cc:	d9402b15 	stw	r5,172(sp)
 80043d0:	058001c4 	movi	r22,7
 80043d4:	dcc02c17 	ldw	r19,176(sp)
 80043d8:	00000306 	br	80043e8 <___vfprintf_internal_r+0xef0>
 80043dc:	42000204 	addi	r8,r8,8
 80043e0:	843ffc04 	addi	r16,r16,-16
 80043e4:	8c00820e 	bge	r17,r16,80045f0 <___vfprintf_internal_r+0x10f8>
 80043e8:	18c00404 	addi	r3,r3,16
 80043ec:	10800044 	addi	r2,r2,1
 80043f0:	45000015 	stw	r20,0(r8)
 80043f4:	44400115 	stw	r17,4(r8)
 80043f8:	d8c02015 	stw	r3,128(sp)
 80043fc:	d8801f15 	stw	r2,124(sp)
 8004400:	b0bff60e 	bge	r22,r2,80043dc <__alt_data_end+0xf80043dc>
 8004404:	d9801e04 	addi	r6,sp,120
 8004408:	b80b883a 	mov	r5,r23
 800440c:	9809883a 	mov	r4,r19
 8004410:	80096580 	call	8009658 <__sprint_r>
 8004414:	103d3a1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004418:	d8c02017 	ldw	r3,128(sp)
 800441c:	d8801f17 	ldw	r2,124(sp)
 8004420:	da000404 	addi	r8,sp,16
 8004424:	003fee06 	br	80043e0 <__alt_data_end+0xf80043e0>
 8004428:	d9403117 	ldw	r5,196(sp)
 800442c:	d8802a17 	ldw	r2,168(sp)
 8004430:	28adc83a 	sub	r22,r5,r2
 8004434:	05be630e 	bge	zero,r22,8003dc4 <__alt_data_end+0xf8003dc4>
 8004438:	07000404 	movi	fp,16
 800443c:	d8801f17 	ldw	r2,124(sp)
 8004440:	e5838f0e 	bge	fp,r22,8005280 <___vfprintf_internal_r+0x1d88>
 8004444:	01420074 	movhi	r5,2049
 8004448:	29575584 	addi	r5,r5,23894
 800444c:	dc403015 	stw	r17,192(sp)
 8004450:	d9402b15 	stw	r5,172(sp)
 8004454:	b023883a 	mov	r17,r22
 8004458:	04c001c4 	movi	r19,7
 800445c:	a82d883a 	mov	r22,r21
 8004460:	902b883a 	mov	r21,r18
 8004464:	8025883a 	mov	r18,r16
 8004468:	dc002c17 	ldw	r16,176(sp)
 800446c:	00000306 	br	800447c <___vfprintf_internal_r+0xf84>
 8004470:	8c7ffc04 	addi	r17,r17,-16
 8004474:	42000204 	addi	r8,r8,8
 8004478:	e440110e 	bge	fp,r17,80044c0 <___vfprintf_internal_r+0xfc8>
 800447c:	18c00404 	addi	r3,r3,16
 8004480:	10800044 	addi	r2,r2,1
 8004484:	45000015 	stw	r20,0(r8)
 8004488:	47000115 	stw	fp,4(r8)
 800448c:	d8c02015 	stw	r3,128(sp)
 8004490:	d8801f15 	stw	r2,124(sp)
 8004494:	98bff60e 	bge	r19,r2,8004470 <__alt_data_end+0xf8004470>
 8004498:	d9801e04 	addi	r6,sp,120
 800449c:	b80b883a 	mov	r5,r23
 80044a0:	8009883a 	mov	r4,r16
 80044a4:	80096580 	call	8009658 <__sprint_r>
 80044a8:	103d151e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80044ac:	8c7ffc04 	addi	r17,r17,-16
 80044b0:	d8c02017 	ldw	r3,128(sp)
 80044b4:	d8801f17 	ldw	r2,124(sp)
 80044b8:	da000404 	addi	r8,sp,16
 80044bc:	e47fef16 	blt	fp,r17,800447c <__alt_data_end+0xf800447c>
 80044c0:	9021883a 	mov	r16,r18
 80044c4:	a825883a 	mov	r18,r21
 80044c8:	b02b883a 	mov	r21,r22
 80044cc:	882d883a 	mov	r22,r17
 80044d0:	dc403017 	ldw	r17,192(sp)
 80044d4:	d9002b17 	ldw	r4,172(sp)
 80044d8:	1d87883a 	add	r3,r3,r22
 80044dc:	10800044 	addi	r2,r2,1
 80044e0:	41000015 	stw	r4,0(r8)
 80044e4:	45800115 	stw	r22,4(r8)
 80044e8:	d8c02015 	stw	r3,128(sp)
 80044ec:	d8801f15 	stw	r2,124(sp)
 80044f0:	010001c4 	movi	r4,7
 80044f4:	20818e16 	blt	r4,r2,8004b30 <___vfprintf_internal_r+0x1638>
 80044f8:	42000204 	addi	r8,r8,8
 80044fc:	003e3106 	br	8003dc4 <__alt_data_end+0xf8003dc4>
 8004500:	d9403317 	ldw	r5,204(sp)
 8004504:	00800044 	movi	r2,1
 8004508:	18c00044 	addi	r3,r3,1
 800450c:	1141530e 	bge	r2,r5,8004a5c <___vfprintf_internal_r+0x1564>
 8004510:	dc401f17 	ldw	r17,124(sp)
 8004514:	00800044 	movi	r2,1
 8004518:	40800115 	stw	r2,4(r8)
 800451c:	8c400044 	addi	r17,r17,1
 8004520:	44000015 	stw	r16,0(r8)
 8004524:	d8c02015 	stw	r3,128(sp)
 8004528:	dc401f15 	stw	r17,124(sp)
 800452c:	008001c4 	movi	r2,7
 8004530:	14416b16 	blt	r2,r17,8004ae0 <___vfprintf_internal_r+0x15e8>
 8004534:	42000204 	addi	r8,r8,8
 8004538:	d8803717 	ldw	r2,220(sp)
 800453c:	d9003417 	ldw	r4,208(sp)
 8004540:	8c400044 	addi	r17,r17,1
 8004544:	10c7883a 	add	r3,r2,r3
 8004548:	40800115 	stw	r2,4(r8)
 800454c:	41000015 	stw	r4,0(r8)
 8004550:	d8c02015 	stw	r3,128(sp)
 8004554:	dc401f15 	stw	r17,124(sp)
 8004558:	008001c4 	movi	r2,7
 800455c:	14416916 	blt	r2,r17,8004b04 <___vfprintf_internal_r+0x160c>
 8004560:	45800204 	addi	r22,r8,8
 8004564:	d9003617 	ldw	r4,216(sp)
 8004568:	d9403817 	ldw	r5,224(sp)
 800456c:	000d883a 	mov	r6,zero
 8004570:	000f883a 	mov	r7,zero
 8004574:	d8c03c15 	stw	r3,240(sp)
 8004578:	800cfa80 	call	800cfa8 <__eqdf2>
 800457c:	d8c03c17 	ldw	r3,240(sp)
 8004580:	1000bc26 	beq	r2,zero,8004874 <___vfprintf_internal_r+0x137c>
 8004584:	d9403317 	ldw	r5,204(sp)
 8004588:	84000044 	addi	r16,r16,1
 800458c:	8c400044 	addi	r17,r17,1
 8004590:	28bfffc4 	addi	r2,r5,-1
 8004594:	1887883a 	add	r3,r3,r2
 8004598:	b0800115 	stw	r2,4(r22)
 800459c:	b4000015 	stw	r16,0(r22)
 80045a0:	d8c02015 	stw	r3,128(sp)
 80045a4:	dc401f15 	stw	r17,124(sp)
 80045a8:	008001c4 	movi	r2,7
 80045ac:	14414316 	blt	r2,r17,8004abc <___vfprintf_internal_r+0x15c4>
 80045b0:	b5800204 	addi	r22,r22,8
 80045b4:	d9003a17 	ldw	r4,232(sp)
 80045b8:	df0022c4 	addi	fp,sp,139
 80045bc:	8c400044 	addi	r17,r17,1
 80045c0:	20c7883a 	add	r3,r4,r3
 80045c4:	b7000015 	stw	fp,0(r22)
 80045c8:	b1000115 	stw	r4,4(r22)
 80045cc:	d8c02015 	stw	r3,128(sp)
 80045d0:	dc401f15 	stw	r17,124(sp)
 80045d4:	008001c4 	movi	r2,7
 80045d8:	14400e16 	blt	r2,r17,8004614 <___vfprintf_internal_r+0x111c>
 80045dc:	b2000204 	addi	r8,r22,8
 80045e0:	003e3a06 	br	8003ecc <__alt_data_end+0xf8003ecc>
 80045e4:	01020074 	movhi	r4,2049
 80045e8:	21175584 	addi	r4,r4,23894
 80045ec:	d9002b15 	stw	r4,172(sp)
 80045f0:	d9002b17 	ldw	r4,172(sp)
 80045f4:	1c07883a 	add	r3,r3,r16
 80045f8:	44000115 	stw	r16,4(r8)
 80045fc:	41000015 	stw	r4,0(r8)
 8004600:	10800044 	addi	r2,r2,1
 8004604:	d8c02015 	stw	r3,128(sp)
 8004608:	d8801f15 	stw	r2,124(sp)
 800460c:	010001c4 	movi	r4,7
 8004610:	20be2d0e 	bge	r4,r2,8003ec8 <__alt_data_end+0xf8003ec8>
 8004614:	d9002c17 	ldw	r4,176(sp)
 8004618:	d9801e04 	addi	r6,sp,120
 800461c:	b80b883a 	mov	r5,r23
 8004620:	80096580 	call	8009658 <__sprint_r>
 8004624:	103cb61e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004628:	d8c02017 	ldw	r3,128(sp)
 800462c:	da000404 	addi	r8,sp,16
 8004630:	003e2606 	br	8003ecc <__alt_data_end+0xf8003ecc>
 8004634:	d9002c17 	ldw	r4,176(sp)
 8004638:	d9801e04 	addi	r6,sp,120
 800463c:	b80b883a 	mov	r5,r23
 8004640:	80096580 	call	8009658 <__sprint_r>
 8004644:	103e5d26 	beq	r2,zero,8003fbc <__alt_data_end+0xf8003fbc>
 8004648:	003cad06 	br	8003900 <__alt_data_end+0xf8003900>
 800464c:	d9002c17 	ldw	r4,176(sp)
 8004650:	d9801e04 	addi	r6,sp,120
 8004654:	b80b883a 	mov	r5,r23
 8004658:	80096580 	call	8009658 <__sprint_r>
 800465c:	103ca81e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004660:	d8c02017 	ldw	r3,128(sp)
 8004664:	da000404 	addi	r8,sp,16
 8004668:	003e0b06 	br	8003e98 <__alt_data_end+0xf8003e98>
 800466c:	d9002c17 	ldw	r4,176(sp)
 8004670:	d9801e04 	addi	r6,sp,120
 8004674:	b80b883a 	mov	r5,r23
 8004678:	80096580 	call	8009658 <__sprint_r>
 800467c:	103ca01e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004680:	d8c02017 	ldw	r3,128(sp)
 8004684:	da000404 	addi	r8,sp,16
 8004688:	003dbd06 	br	8003d80 <__alt_data_end+0xf8003d80>
 800468c:	d9002c17 	ldw	r4,176(sp)
 8004690:	d9801e04 	addi	r6,sp,120
 8004694:	b80b883a 	mov	r5,r23
 8004698:	80096580 	call	8009658 <__sprint_r>
 800469c:	103c981e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80046a0:	d8c02017 	ldw	r3,128(sp)
 80046a4:	da000404 	addi	r8,sp,16
 80046a8:	003dc306 	br	8003db8 <__alt_data_end+0xf8003db8>
 80046ac:	d8802917 	ldw	r2,164(sp)
 80046b0:	d8002785 	stb	zero,158(sp)
 80046b4:	103f0616 	blt	r2,zero,80042d0 <__alt_data_end+0xf80042d0>
 80046b8:	00ffdfc4 	movi	r3,-129
 80046bc:	9d84b03a 	or	r2,r19,r22
 80046c0:	90e4703a 	and	r18,r18,r3
 80046c4:	103c6b26 	beq	r2,zero,8003874 <__alt_data_end+0xf8003874>
 80046c8:	0039883a 	mov	fp,zero
 80046cc:	003e7406 	br	80040a0 <__alt_data_end+0xf80040a0>
 80046d0:	9080040c 	andi	r2,r18,16
 80046d4:	1001b326 	beq	r2,zero,8004da4 <___vfprintf_internal_r+0x18ac>
 80046d8:	d9002d17 	ldw	r4,180(sp)
 80046dc:	d9402917 	ldw	r5,164(sp)
 80046e0:	d8002785 	stb	zero,158(sp)
 80046e4:	20800104 	addi	r2,r4,4
 80046e8:	24c00017 	ldw	r19,0(r4)
 80046ec:	002d883a 	mov	r22,zero
 80046f0:	2801b516 	blt	r5,zero,8004dc8 <___vfprintf_internal_r+0x18d0>
 80046f4:	00ffdfc4 	movi	r3,-129
 80046f8:	d8802d15 	stw	r2,180(sp)
 80046fc:	90e4703a 	and	r18,r18,r3
 8004700:	983d2726 	beq	r19,zero,8003ba0 <__alt_data_end+0xf8003ba0>
 8004704:	0039883a 	mov	fp,zero
 8004708:	003d2a06 	br	8003bb4 <__alt_data_end+0xf8003bb4>
 800470c:	dc402617 	ldw	r17,152(sp)
 8004710:	0441d30e 	bge	zero,r17,8004e60 <___vfprintf_internal_r+0x1968>
 8004714:	dc403217 	ldw	r17,200(sp)
 8004718:	d8803317 	ldw	r2,204(sp)
 800471c:	1440010e 	bge	r2,r17,8004724 <___vfprintf_internal_r+0x122c>
 8004720:	1023883a 	mov	r17,r2
 8004724:	04400a0e 	bge	zero,r17,8004750 <___vfprintf_internal_r+0x1258>
 8004728:	d8801f17 	ldw	r2,124(sp)
 800472c:	1c47883a 	add	r3,r3,r17
 8004730:	44000015 	stw	r16,0(r8)
 8004734:	10800044 	addi	r2,r2,1
 8004738:	44400115 	stw	r17,4(r8)
 800473c:	d8c02015 	stw	r3,128(sp)
 8004740:	d8801f15 	stw	r2,124(sp)
 8004744:	010001c4 	movi	r4,7
 8004748:	20826516 	blt	r4,r2,80050e0 <___vfprintf_internal_r+0x1be8>
 800474c:	42000204 	addi	r8,r8,8
 8004750:	88026116 	blt	r17,zero,80050d8 <___vfprintf_internal_r+0x1be0>
 8004754:	d9003217 	ldw	r4,200(sp)
 8004758:	2463c83a 	sub	r17,r4,r17
 800475c:	04407b0e 	bge	zero,r17,800494c <___vfprintf_internal_r+0x1454>
 8004760:	05800404 	movi	r22,16
 8004764:	d8801f17 	ldw	r2,124(sp)
 8004768:	b4419d0e 	bge	r22,r17,8004de0 <___vfprintf_internal_r+0x18e8>
 800476c:	01020074 	movhi	r4,2049
 8004770:	21175584 	addi	r4,r4,23894
 8004774:	d9002b15 	stw	r4,172(sp)
 8004778:	070001c4 	movi	fp,7
 800477c:	dcc02c17 	ldw	r19,176(sp)
 8004780:	00000306 	br	8004790 <___vfprintf_internal_r+0x1298>
 8004784:	42000204 	addi	r8,r8,8
 8004788:	8c7ffc04 	addi	r17,r17,-16
 800478c:	b441970e 	bge	r22,r17,8004dec <___vfprintf_internal_r+0x18f4>
 8004790:	18c00404 	addi	r3,r3,16
 8004794:	10800044 	addi	r2,r2,1
 8004798:	45000015 	stw	r20,0(r8)
 800479c:	45800115 	stw	r22,4(r8)
 80047a0:	d8c02015 	stw	r3,128(sp)
 80047a4:	d8801f15 	stw	r2,124(sp)
 80047a8:	e0bff60e 	bge	fp,r2,8004784 <__alt_data_end+0xf8004784>
 80047ac:	d9801e04 	addi	r6,sp,120
 80047b0:	b80b883a 	mov	r5,r23
 80047b4:	9809883a 	mov	r4,r19
 80047b8:	80096580 	call	8009658 <__sprint_r>
 80047bc:	103c501e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80047c0:	d8c02017 	ldw	r3,128(sp)
 80047c4:	d8801f17 	ldw	r2,124(sp)
 80047c8:	da000404 	addi	r8,sp,16
 80047cc:	003fee06 	br	8004788 <__alt_data_end+0xf8004788>
 80047d0:	d9002c17 	ldw	r4,176(sp)
 80047d4:	d9801e04 	addi	r6,sp,120
 80047d8:	b80b883a 	mov	r5,r23
 80047dc:	80096580 	call	8009658 <__sprint_r>
 80047e0:	103c471e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80047e4:	d8c02017 	ldw	r3,128(sp)
 80047e8:	df002787 	ldb	fp,158(sp)
 80047ec:	da000404 	addi	r8,sp,16
 80047f0:	003d5606 	br	8003d4c <__alt_data_end+0xf8003d4c>
 80047f4:	9080040c 	andi	r2,r18,16
 80047f8:	10016126 	beq	r2,zero,8004d80 <___vfprintf_internal_r+0x1888>
 80047fc:	d8802d17 	ldw	r2,180(sp)
 8004800:	14c00017 	ldw	r19,0(r2)
 8004804:	10800104 	addi	r2,r2,4
 8004808:	d8802d15 	stw	r2,180(sp)
 800480c:	982dd7fa 	srai	r22,r19,31
 8004810:	b005883a 	mov	r2,r22
 8004814:	003c8206 	br	8003a20 <__alt_data_end+0xf8003a20>
 8004818:	9080040c 	andi	r2,r18,16
 800481c:	10003526 	beq	r2,zero,80048f4 <___vfprintf_internal_r+0x13fc>
 8004820:	d9402d17 	ldw	r5,180(sp)
 8004824:	d8c02917 	ldw	r3,164(sp)
 8004828:	d8002785 	stb	zero,158(sp)
 800482c:	28800104 	addi	r2,r5,4
 8004830:	2cc00017 	ldw	r19,0(r5)
 8004834:	002d883a 	mov	r22,zero
 8004838:	18003716 	blt	r3,zero,8004918 <___vfprintf_internal_r+0x1420>
 800483c:	00ffdfc4 	movi	r3,-129
 8004840:	d8802d15 	stw	r2,180(sp)
 8004844:	90e4703a 	and	r18,r18,r3
 8004848:	0039883a 	mov	fp,zero
 800484c:	983df326 	beq	r19,zero,800401c <__alt_data_end+0xf800401c>
 8004850:	00800244 	movi	r2,9
 8004854:	14fc7b36 	bltu	r2,r19,8003a44 <__alt_data_end+0xf8003a44>
 8004858:	d8c02817 	ldw	r3,160(sp)
 800485c:	dc001dc4 	addi	r16,sp,119
 8004860:	9cc00c04 	addi	r19,r19,48
 8004864:	1c07c83a 	sub	r3,r3,r16
 8004868:	dcc01dc5 	stb	r19,119(sp)
 800486c:	d8c02e15 	stw	r3,184(sp)
 8004870:	003ce806 	br	8003c14 <__alt_data_end+0xf8003c14>
 8004874:	d8803317 	ldw	r2,204(sp)
 8004878:	143fffc4 	addi	r16,r2,-1
 800487c:	043f4d0e 	bge	zero,r16,80045b4 <__alt_data_end+0xf80045b4>
 8004880:	07000404 	movi	fp,16
 8004884:	e400810e 	bge	fp,r16,8004a8c <___vfprintf_internal_r+0x1594>
 8004888:	01420074 	movhi	r5,2049
 800488c:	29575584 	addi	r5,r5,23894
 8004890:	d9402b15 	stw	r5,172(sp)
 8004894:	01c001c4 	movi	r7,7
 8004898:	dcc02c17 	ldw	r19,176(sp)
 800489c:	00000306 	br	80048ac <___vfprintf_internal_r+0x13b4>
 80048a0:	b5800204 	addi	r22,r22,8
 80048a4:	843ffc04 	addi	r16,r16,-16
 80048a8:	e4007b0e 	bge	fp,r16,8004a98 <___vfprintf_internal_r+0x15a0>
 80048ac:	18c00404 	addi	r3,r3,16
 80048b0:	8c400044 	addi	r17,r17,1
 80048b4:	b5000015 	stw	r20,0(r22)
 80048b8:	b7000115 	stw	fp,4(r22)
 80048bc:	d8c02015 	stw	r3,128(sp)
 80048c0:	dc401f15 	stw	r17,124(sp)
 80048c4:	3c7ff60e 	bge	r7,r17,80048a0 <__alt_data_end+0xf80048a0>
 80048c8:	d9801e04 	addi	r6,sp,120
 80048cc:	b80b883a 	mov	r5,r23
 80048d0:	9809883a 	mov	r4,r19
 80048d4:	d9c03c15 	stw	r7,240(sp)
 80048d8:	80096580 	call	8009658 <__sprint_r>
 80048dc:	d9c03c17 	ldw	r7,240(sp)
 80048e0:	103c071e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80048e4:	d8c02017 	ldw	r3,128(sp)
 80048e8:	dc401f17 	ldw	r17,124(sp)
 80048ec:	dd800404 	addi	r22,sp,16
 80048f0:	003fec06 	br	80048a4 <__alt_data_end+0xf80048a4>
 80048f4:	9080100c 	andi	r2,r18,64
 80048f8:	d8002785 	stb	zero,158(sp)
 80048fc:	10010e26 	beq	r2,zero,8004d38 <___vfprintf_internal_r+0x1840>
 8004900:	d9002d17 	ldw	r4,180(sp)
 8004904:	d9402917 	ldw	r5,164(sp)
 8004908:	002d883a 	mov	r22,zero
 800490c:	20800104 	addi	r2,r4,4
 8004910:	24c0000b 	ldhu	r19,0(r4)
 8004914:	283fc90e 	bge	r5,zero,800483c <__alt_data_end+0xf800483c>
 8004918:	d8802d15 	stw	r2,180(sp)
 800491c:	0039883a 	mov	fp,zero
 8004920:	9d84b03a 	or	r2,r19,r22
 8004924:	103c461e 	bne	r2,zero,8003a40 <__alt_data_end+0xf8003a40>
 8004928:	00800044 	movi	r2,1
 800492c:	003e6c06 	br	80042e0 <__alt_data_end+0xf80042e0>
 8004930:	d9002c17 	ldw	r4,176(sp)
 8004934:	d9801e04 	addi	r6,sp,120
 8004938:	b80b883a 	mov	r5,r23
 800493c:	80096580 	call	8009658 <__sprint_r>
 8004940:	103bef1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004944:	d8c02017 	ldw	r3,128(sp)
 8004948:	da000404 	addi	r8,sp,16
 800494c:	d9003217 	ldw	r4,200(sp)
 8004950:	d8802617 	ldw	r2,152(sp)
 8004954:	d9403317 	ldw	r5,204(sp)
 8004958:	8123883a 	add	r17,r16,r4
 800495c:	11400216 	blt	r2,r5,8004968 <___vfprintf_internal_r+0x1470>
 8004960:	9100004c 	andi	r4,r18,1
 8004964:	20000d26 	beq	r4,zero,800499c <___vfprintf_internal_r+0x14a4>
 8004968:	d9003717 	ldw	r4,220(sp)
 800496c:	d9403417 	ldw	r5,208(sp)
 8004970:	1907883a 	add	r3,r3,r4
 8004974:	d9001f17 	ldw	r4,124(sp)
 8004978:	41400015 	stw	r5,0(r8)
 800497c:	d9403717 	ldw	r5,220(sp)
 8004980:	21000044 	addi	r4,r4,1
 8004984:	d8c02015 	stw	r3,128(sp)
 8004988:	41400115 	stw	r5,4(r8)
 800498c:	d9001f15 	stw	r4,124(sp)
 8004990:	014001c4 	movi	r5,7
 8004994:	2901e816 	blt	r5,r4,8005138 <___vfprintf_internal_r+0x1c40>
 8004998:	42000204 	addi	r8,r8,8
 800499c:	d9003317 	ldw	r4,204(sp)
 80049a0:	8121883a 	add	r16,r16,r4
 80049a4:	2085c83a 	sub	r2,r4,r2
 80049a8:	8461c83a 	sub	r16,r16,r17
 80049ac:	1400010e 	bge	r2,r16,80049b4 <___vfprintf_internal_r+0x14bc>
 80049b0:	1021883a 	mov	r16,r2
 80049b4:	04000a0e 	bge	zero,r16,80049e0 <___vfprintf_internal_r+0x14e8>
 80049b8:	d9001f17 	ldw	r4,124(sp)
 80049bc:	1c07883a 	add	r3,r3,r16
 80049c0:	44400015 	stw	r17,0(r8)
 80049c4:	21000044 	addi	r4,r4,1
 80049c8:	44000115 	stw	r16,4(r8)
 80049cc:	d8c02015 	stw	r3,128(sp)
 80049d0:	d9001f15 	stw	r4,124(sp)
 80049d4:	014001c4 	movi	r5,7
 80049d8:	2901fb16 	blt	r5,r4,80051c8 <___vfprintf_internal_r+0x1cd0>
 80049dc:	42000204 	addi	r8,r8,8
 80049e0:	8001f716 	blt	r16,zero,80051c0 <___vfprintf_internal_r+0x1cc8>
 80049e4:	1421c83a 	sub	r16,r2,r16
 80049e8:	043d380e 	bge	zero,r16,8003ecc <__alt_data_end+0xf8003ecc>
 80049ec:	04400404 	movi	r17,16
 80049f0:	d8801f17 	ldw	r2,124(sp)
 80049f4:	8c3efb0e 	bge	r17,r16,80045e4 <__alt_data_end+0xf80045e4>
 80049f8:	01420074 	movhi	r5,2049
 80049fc:	29575584 	addi	r5,r5,23894
 8004a00:	d9402b15 	stw	r5,172(sp)
 8004a04:	058001c4 	movi	r22,7
 8004a08:	dcc02c17 	ldw	r19,176(sp)
 8004a0c:	00000306 	br	8004a1c <___vfprintf_internal_r+0x1524>
 8004a10:	42000204 	addi	r8,r8,8
 8004a14:	843ffc04 	addi	r16,r16,-16
 8004a18:	8c3ef50e 	bge	r17,r16,80045f0 <__alt_data_end+0xf80045f0>
 8004a1c:	18c00404 	addi	r3,r3,16
 8004a20:	10800044 	addi	r2,r2,1
 8004a24:	45000015 	stw	r20,0(r8)
 8004a28:	44400115 	stw	r17,4(r8)
 8004a2c:	d8c02015 	stw	r3,128(sp)
 8004a30:	d8801f15 	stw	r2,124(sp)
 8004a34:	b0bff60e 	bge	r22,r2,8004a10 <__alt_data_end+0xf8004a10>
 8004a38:	d9801e04 	addi	r6,sp,120
 8004a3c:	b80b883a 	mov	r5,r23
 8004a40:	9809883a 	mov	r4,r19
 8004a44:	80096580 	call	8009658 <__sprint_r>
 8004a48:	103bad1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004a4c:	d8c02017 	ldw	r3,128(sp)
 8004a50:	d8801f17 	ldw	r2,124(sp)
 8004a54:	da000404 	addi	r8,sp,16
 8004a58:	003fee06 	br	8004a14 <__alt_data_end+0xf8004a14>
 8004a5c:	9088703a 	and	r4,r18,r2
 8004a60:	203eab1e 	bne	r4,zero,8004510 <__alt_data_end+0xf8004510>
 8004a64:	dc401f17 	ldw	r17,124(sp)
 8004a68:	40800115 	stw	r2,4(r8)
 8004a6c:	44000015 	stw	r16,0(r8)
 8004a70:	8c400044 	addi	r17,r17,1
 8004a74:	d8c02015 	stw	r3,128(sp)
 8004a78:	dc401f15 	stw	r17,124(sp)
 8004a7c:	008001c4 	movi	r2,7
 8004a80:	14400e16 	blt	r2,r17,8004abc <___vfprintf_internal_r+0x15c4>
 8004a84:	45800204 	addi	r22,r8,8
 8004a88:	003eca06 	br	80045b4 <__alt_data_end+0xf80045b4>
 8004a8c:	01020074 	movhi	r4,2049
 8004a90:	21175584 	addi	r4,r4,23894
 8004a94:	d9002b15 	stw	r4,172(sp)
 8004a98:	d8802b17 	ldw	r2,172(sp)
 8004a9c:	1c07883a 	add	r3,r3,r16
 8004aa0:	8c400044 	addi	r17,r17,1
 8004aa4:	b0800015 	stw	r2,0(r22)
 8004aa8:	b4000115 	stw	r16,4(r22)
 8004aac:	d8c02015 	stw	r3,128(sp)
 8004ab0:	dc401f15 	stw	r17,124(sp)
 8004ab4:	008001c4 	movi	r2,7
 8004ab8:	147ebd0e 	bge	r2,r17,80045b0 <__alt_data_end+0xf80045b0>
 8004abc:	d9002c17 	ldw	r4,176(sp)
 8004ac0:	d9801e04 	addi	r6,sp,120
 8004ac4:	b80b883a 	mov	r5,r23
 8004ac8:	80096580 	call	8009658 <__sprint_r>
 8004acc:	103b8c1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004ad0:	d8c02017 	ldw	r3,128(sp)
 8004ad4:	dc401f17 	ldw	r17,124(sp)
 8004ad8:	dd800404 	addi	r22,sp,16
 8004adc:	003eb506 	br	80045b4 <__alt_data_end+0xf80045b4>
 8004ae0:	d9002c17 	ldw	r4,176(sp)
 8004ae4:	d9801e04 	addi	r6,sp,120
 8004ae8:	b80b883a 	mov	r5,r23
 8004aec:	80096580 	call	8009658 <__sprint_r>
 8004af0:	103b831e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004af4:	d8c02017 	ldw	r3,128(sp)
 8004af8:	dc401f17 	ldw	r17,124(sp)
 8004afc:	da000404 	addi	r8,sp,16
 8004b00:	003e8d06 	br	8004538 <__alt_data_end+0xf8004538>
 8004b04:	d9002c17 	ldw	r4,176(sp)
 8004b08:	d9801e04 	addi	r6,sp,120
 8004b0c:	b80b883a 	mov	r5,r23
 8004b10:	80096580 	call	8009658 <__sprint_r>
 8004b14:	103b7a1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004b18:	d8c02017 	ldw	r3,128(sp)
 8004b1c:	dc401f17 	ldw	r17,124(sp)
 8004b20:	dd800404 	addi	r22,sp,16
 8004b24:	003e8f06 	br	8004564 <__alt_data_end+0xf8004564>
 8004b28:	0027883a 	mov	r19,zero
 8004b2c:	003f4a06 	br	8004858 <__alt_data_end+0xf8004858>
 8004b30:	d9002c17 	ldw	r4,176(sp)
 8004b34:	d9801e04 	addi	r6,sp,120
 8004b38:	b80b883a 	mov	r5,r23
 8004b3c:	80096580 	call	8009658 <__sprint_r>
 8004b40:	103b6f1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004b44:	d8c02017 	ldw	r3,128(sp)
 8004b48:	da000404 	addi	r8,sp,16
 8004b4c:	003c9d06 	br	8003dc4 <__alt_data_end+0xf8003dc4>
 8004b50:	04e7c83a 	sub	r19,zero,r19
 8004b54:	9804c03a 	cmpne	r2,r19,zero
 8004b58:	05adc83a 	sub	r22,zero,r22
 8004b5c:	b0adc83a 	sub	r22,r22,r2
 8004b60:	d8802917 	ldw	r2,164(sp)
 8004b64:	07000b44 	movi	fp,45
 8004b68:	df002785 	stb	fp,158(sp)
 8004b6c:	10017b16 	blt	r2,zero,800515c <___vfprintf_internal_r+0x1c64>
 8004b70:	00bfdfc4 	movi	r2,-129
 8004b74:	90a4703a 	and	r18,r18,r2
 8004b78:	003bb106 	br	8003a40 <__alt_data_end+0xf8003a40>
 8004b7c:	d9003617 	ldw	r4,216(sp)
 8004b80:	d9403817 	ldw	r5,224(sp)
 8004b84:	da003d15 	stw	r8,244(sp)
 8004b88:	800940c0 	call	800940c <__fpclassifyd>
 8004b8c:	da003d17 	ldw	r8,244(sp)
 8004b90:	1000f026 	beq	r2,zero,8004f54 <___vfprintf_internal_r+0x1a5c>
 8004b94:	d9002917 	ldw	r4,164(sp)
 8004b98:	05bff7c4 	movi	r22,-33
 8004b9c:	00bfffc4 	movi	r2,-1
 8004ba0:	8dac703a 	and	r22,r17,r22
 8004ba4:	20820026 	beq	r4,r2,80053a8 <___vfprintf_internal_r+0x1eb0>
 8004ba8:	008011c4 	movi	r2,71
 8004bac:	b081f726 	beq	r22,r2,800538c <___vfprintf_internal_r+0x1e94>
 8004bb0:	d9003817 	ldw	r4,224(sp)
 8004bb4:	90c04014 	ori	r3,r18,256
 8004bb8:	d8c02b15 	stw	r3,172(sp)
 8004bbc:	20021516 	blt	r4,zero,8005414 <___vfprintf_internal_r+0x1f1c>
 8004bc0:	dcc03817 	ldw	r19,224(sp)
 8004bc4:	d8002a05 	stb	zero,168(sp)
 8004bc8:	00801984 	movi	r2,102
 8004bcc:	8881f926 	beq	r17,r2,80053b4 <___vfprintf_internal_r+0x1ebc>
 8004bd0:	00801184 	movi	r2,70
 8004bd4:	88821c26 	beq	r17,r2,8005448 <___vfprintf_internal_r+0x1f50>
 8004bd8:	00801144 	movi	r2,69
 8004bdc:	b081ef26 	beq	r22,r2,800539c <___vfprintf_internal_r+0x1ea4>
 8004be0:	d8c02917 	ldw	r3,164(sp)
 8004be4:	d8802104 	addi	r2,sp,132
 8004be8:	d8800315 	stw	r2,12(sp)
 8004bec:	d9403617 	ldw	r5,216(sp)
 8004bf0:	d8802504 	addi	r2,sp,148
 8004bf4:	d9002c17 	ldw	r4,176(sp)
 8004bf8:	d8800215 	stw	r2,8(sp)
 8004bfc:	d8802604 	addi	r2,sp,152
 8004c00:	d8c00015 	stw	r3,0(sp)
 8004c04:	d8800115 	stw	r2,4(sp)
 8004c08:	01c00084 	movi	r7,2
 8004c0c:	980d883a 	mov	r6,r19
 8004c10:	d8c03c15 	stw	r3,240(sp)
 8004c14:	da003d15 	stw	r8,244(sp)
 8004c18:	8005bd00 	call	8005bd0 <_dtoa_r>
 8004c1c:	1021883a 	mov	r16,r2
 8004c20:	008019c4 	movi	r2,103
 8004c24:	d8c03c17 	ldw	r3,240(sp)
 8004c28:	da003d17 	ldw	r8,244(sp)
 8004c2c:	88817126 	beq	r17,r2,80051f4 <___vfprintf_internal_r+0x1cfc>
 8004c30:	008011c4 	movi	r2,71
 8004c34:	88829226 	beq	r17,r2,8005680 <___vfprintf_internal_r+0x2188>
 8004c38:	80f9883a 	add	fp,r16,r3
 8004c3c:	d9003617 	ldw	r4,216(sp)
 8004c40:	000d883a 	mov	r6,zero
 8004c44:	000f883a 	mov	r7,zero
 8004c48:	980b883a 	mov	r5,r19
 8004c4c:	da003d15 	stw	r8,244(sp)
 8004c50:	800cfa80 	call	800cfa8 <__eqdf2>
 8004c54:	da003d17 	ldw	r8,244(sp)
 8004c58:	10018d26 	beq	r2,zero,8005290 <___vfprintf_internal_r+0x1d98>
 8004c5c:	d8802117 	ldw	r2,132(sp)
 8004c60:	1700062e 	bgeu	r2,fp,8004c7c <___vfprintf_internal_r+0x1784>
 8004c64:	01000c04 	movi	r4,48
 8004c68:	10c00044 	addi	r3,r2,1
 8004c6c:	d8c02115 	stw	r3,132(sp)
 8004c70:	11000005 	stb	r4,0(r2)
 8004c74:	d8802117 	ldw	r2,132(sp)
 8004c78:	173ffb36 	bltu	r2,fp,8004c68 <__alt_data_end+0xf8004c68>
 8004c7c:	1405c83a 	sub	r2,r2,r16
 8004c80:	d8803315 	stw	r2,204(sp)
 8004c84:	008011c4 	movi	r2,71
 8004c88:	b0817626 	beq	r22,r2,8005264 <___vfprintf_internal_r+0x1d6c>
 8004c8c:	00801944 	movi	r2,101
 8004c90:	1442810e 	bge	r2,r17,8005698 <___vfprintf_internal_r+0x21a0>
 8004c94:	d8c02617 	ldw	r3,152(sp)
 8004c98:	00801984 	movi	r2,102
 8004c9c:	d8c03215 	stw	r3,200(sp)
 8004ca0:	8881fe26 	beq	r17,r2,800549c <___vfprintf_internal_r+0x1fa4>
 8004ca4:	d8c03217 	ldw	r3,200(sp)
 8004ca8:	d9003317 	ldw	r4,204(sp)
 8004cac:	1901dd16 	blt	r3,r4,8005424 <___vfprintf_internal_r+0x1f2c>
 8004cb0:	9480004c 	andi	r18,r18,1
 8004cb4:	90022b1e 	bne	r18,zero,8005564 <___vfprintf_internal_r+0x206c>
 8004cb8:	1805883a 	mov	r2,r3
 8004cbc:	18028016 	blt	r3,zero,80056c0 <___vfprintf_internal_r+0x21c8>
 8004cc0:	d8c03217 	ldw	r3,200(sp)
 8004cc4:	044019c4 	movi	r17,103
 8004cc8:	d8c02e15 	stw	r3,184(sp)
 8004ccc:	df002a07 	ldb	fp,168(sp)
 8004cd0:	e001531e 	bne	fp,zero,8005220 <___vfprintf_internal_r+0x1d28>
 8004cd4:	df002783 	ldbu	fp,158(sp)
 8004cd8:	d8802a15 	stw	r2,168(sp)
 8004cdc:	dc802b17 	ldw	r18,172(sp)
 8004ce0:	d8002915 	stw	zero,164(sp)
 8004ce4:	003bd106 	br	8003c2c <__alt_data_end+0xf8003c2c>
 8004ce8:	d8802d17 	ldw	r2,180(sp)
 8004cec:	d8c02d17 	ldw	r3,180(sp)
 8004cf0:	d9002d17 	ldw	r4,180(sp)
 8004cf4:	10800017 	ldw	r2,0(r2)
 8004cf8:	18c00117 	ldw	r3,4(r3)
 8004cfc:	21000204 	addi	r4,r4,8
 8004d00:	d8803615 	stw	r2,216(sp)
 8004d04:	d8c03815 	stw	r3,224(sp)
 8004d08:	d9002d15 	stw	r4,180(sp)
 8004d0c:	003b7506 	br	8003ae4 <__alt_data_end+0xf8003ae4>
 8004d10:	ac400007 	ldb	r17,0(r21)
 8004d14:	003a5906 	br	800367c <__alt_data_end+0xf800367c>
 8004d18:	9080100c 	andi	r2,r18,64
 8004d1c:	1000a826 	beq	r2,zero,8004fc0 <___vfprintf_internal_r+0x1ac8>
 8004d20:	d9002d17 	ldw	r4,180(sp)
 8004d24:	002d883a 	mov	r22,zero
 8004d28:	24c0000b 	ldhu	r19,0(r4)
 8004d2c:	21000104 	addi	r4,r4,4
 8004d30:	d9002d15 	stw	r4,180(sp)
 8004d34:	003ccb06 	br	8004064 <__alt_data_end+0xf8004064>
 8004d38:	d8c02d17 	ldw	r3,180(sp)
 8004d3c:	d9002917 	ldw	r4,164(sp)
 8004d40:	002d883a 	mov	r22,zero
 8004d44:	18800104 	addi	r2,r3,4
 8004d48:	1cc00017 	ldw	r19,0(r3)
 8004d4c:	203ebb0e 	bge	r4,zero,800483c <__alt_data_end+0xf800483c>
 8004d50:	003ef106 	br	8004918 <__alt_data_end+0xf8004918>
 8004d54:	9080040c 	andi	r2,r18,16
 8004d58:	1000921e 	bne	r2,zero,8004fa4 <___vfprintf_internal_r+0x1aac>
 8004d5c:	9480100c 	andi	r18,r18,64
 8004d60:	90013926 	beq	r18,zero,8005248 <___vfprintf_internal_r+0x1d50>
 8004d64:	d9002d17 	ldw	r4,180(sp)
 8004d68:	d9402f17 	ldw	r5,188(sp)
 8004d6c:	20800017 	ldw	r2,0(r4)
 8004d70:	21000104 	addi	r4,r4,4
 8004d74:	d9002d15 	stw	r4,180(sp)
 8004d78:	1140000d 	sth	r5,0(r2)
 8004d7c:	003a1606 	br	80035d8 <__alt_data_end+0xf80035d8>
 8004d80:	9080100c 	andi	r2,r18,64
 8004d84:	10008026 	beq	r2,zero,8004f88 <___vfprintf_internal_r+0x1a90>
 8004d88:	d8c02d17 	ldw	r3,180(sp)
 8004d8c:	1cc0000f 	ldh	r19,0(r3)
 8004d90:	18c00104 	addi	r3,r3,4
 8004d94:	d8c02d15 	stw	r3,180(sp)
 8004d98:	982dd7fa 	srai	r22,r19,31
 8004d9c:	b005883a 	mov	r2,r22
 8004da0:	003b1f06 	br	8003a20 <__alt_data_end+0xf8003a20>
 8004da4:	9080100c 	andi	r2,r18,64
 8004da8:	d8002785 	stb	zero,158(sp)
 8004dac:	10008a1e 	bne	r2,zero,8004fd8 <___vfprintf_internal_r+0x1ae0>
 8004db0:	d9402d17 	ldw	r5,180(sp)
 8004db4:	d8c02917 	ldw	r3,164(sp)
 8004db8:	002d883a 	mov	r22,zero
 8004dbc:	28800104 	addi	r2,r5,4
 8004dc0:	2cc00017 	ldw	r19,0(r5)
 8004dc4:	183e4b0e 	bge	r3,zero,80046f4 <__alt_data_end+0xf80046f4>
 8004dc8:	9d86b03a 	or	r3,r19,r22
 8004dcc:	d8802d15 	stw	r2,180(sp)
 8004dd0:	183e4c1e 	bne	r3,zero,8004704 <__alt_data_end+0xf8004704>
 8004dd4:	0039883a 	mov	fp,zero
 8004dd8:	0005883a 	mov	r2,zero
 8004ddc:	003d4006 	br	80042e0 <__alt_data_end+0xf80042e0>
 8004de0:	01420074 	movhi	r5,2049
 8004de4:	29575584 	addi	r5,r5,23894
 8004de8:	d9402b15 	stw	r5,172(sp)
 8004dec:	d9402b17 	ldw	r5,172(sp)
 8004df0:	1c47883a 	add	r3,r3,r17
 8004df4:	10800044 	addi	r2,r2,1
 8004df8:	41400015 	stw	r5,0(r8)
 8004dfc:	44400115 	stw	r17,4(r8)
 8004e00:	d8c02015 	stw	r3,128(sp)
 8004e04:	d8801f15 	stw	r2,124(sp)
 8004e08:	010001c4 	movi	r4,7
 8004e0c:	20bec816 	blt	r4,r2,8004930 <__alt_data_end+0xf8004930>
 8004e10:	42000204 	addi	r8,r8,8
 8004e14:	003ecd06 	br	800494c <__alt_data_end+0xf800494c>
 8004e18:	d9002917 	ldw	r4,164(sp)
 8004e1c:	d8002785 	stb	zero,158(sp)
 8004e20:	203d2d16 	blt	r4,zero,80042d8 <__alt_data_end+0xf80042d8>
 8004e24:	00bfdfc4 	movi	r2,-129
 8004e28:	90a4703a 	and	r18,r18,r2
 8004e2c:	003a9106 	br	8003874 <__alt_data_end+0xf8003874>
 8004e30:	01020074 	movhi	r4,2049
 8004e34:	21175584 	addi	r4,r4,23894
 8004e38:	d9002b15 	stw	r4,172(sp)
 8004e3c:	003c0c06 	br	8003e70 <__alt_data_end+0xf8003e70>
 8004e40:	d9002c17 	ldw	r4,176(sp)
 8004e44:	d9801e04 	addi	r6,sp,120
 8004e48:	b80b883a 	mov	r5,r23
 8004e4c:	80096580 	call	8009658 <__sprint_r>
 8004e50:	103aab1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004e54:	d8c02017 	ldw	r3,128(sp)
 8004e58:	da000404 	addi	r8,sp,16
 8004e5c:	003d4106 	br	8004364 <__alt_data_end+0xf8004364>
 8004e60:	d8801f17 	ldw	r2,124(sp)
 8004e64:	01420074 	movhi	r5,2049
 8004e68:	01000044 	movi	r4,1
 8004e6c:	18c00044 	addi	r3,r3,1
 8004e70:	10800044 	addi	r2,r2,1
 8004e74:	29575504 	addi	r5,r5,23892
 8004e78:	41000115 	stw	r4,4(r8)
 8004e7c:	41400015 	stw	r5,0(r8)
 8004e80:	d8c02015 	stw	r3,128(sp)
 8004e84:	d8801f15 	stw	r2,124(sp)
 8004e88:	010001c4 	movi	r4,7
 8004e8c:	20805c16 	blt	r4,r2,8005000 <___vfprintf_internal_r+0x1b08>
 8004e90:	42000204 	addi	r8,r8,8
 8004e94:	8800041e 	bne	r17,zero,8004ea8 <___vfprintf_internal_r+0x19b0>
 8004e98:	d8803317 	ldw	r2,204(sp)
 8004e9c:	1000021e 	bne	r2,zero,8004ea8 <___vfprintf_internal_r+0x19b0>
 8004ea0:	9080004c 	andi	r2,r18,1
 8004ea4:	103c0926 	beq	r2,zero,8003ecc <__alt_data_end+0xf8003ecc>
 8004ea8:	d9003717 	ldw	r4,220(sp)
 8004eac:	d8801f17 	ldw	r2,124(sp)
 8004eb0:	d9403417 	ldw	r5,208(sp)
 8004eb4:	20c7883a 	add	r3,r4,r3
 8004eb8:	10800044 	addi	r2,r2,1
 8004ebc:	41000115 	stw	r4,4(r8)
 8004ec0:	41400015 	stw	r5,0(r8)
 8004ec4:	d8c02015 	stw	r3,128(sp)
 8004ec8:	d8801f15 	stw	r2,124(sp)
 8004ecc:	010001c4 	movi	r4,7
 8004ed0:	20812116 	blt	r4,r2,8005358 <___vfprintf_internal_r+0x1e60>
 8004ed4:	42000204 	addi	r8,r8,8
 8004ed8:	0463c83a 	sub	r17,zero,r17
 8004edc:	0440730e 	bge	zero,r17,80050ac <___vfprintf_internal_r+0x1bb4>
 8004ee0:	05800404 	movi	r22,16
 8004ee4:	b440860e 	bge	r22,r17,8005100 <___vfprintf_internal_r+0x1c08>
 8004ee8:	01420074 	movhi	r5,2049
 8004eec:	29575584 	addi	r5,r5,23894
 8004ef0:	d9402b15 	stw	r5,172(sp)
 8004ef4:	070001c4 	movi	fp,7
 8004ef8:	dcc02c17 	ldw	r19,176(sp)
 8004efc:	00000306 	br	8004f0c <___vfprintf_internal_r+0x1a14>
 8004f00:	42000204 	addi	r8,r8,8
 8004f04:	8c7ffc04 	addi	r17,r17,-16
 8004f08:	b440800e 	bge	r22,r17,800510c <___vfprintf_internal_r+0x1c14>
 8004f0c:	18c00404 	addi	r3,r3,16
 8004f10:	10800044 	addi	r2,r2,1
 8004f14:	45000015 	stw	r20,0(r8)
 8004f18:	45800115 	stw	r22,4(r8)
 8004f1c:	d8c02015 	stw	r3,128(sp)
 8004f20:	d8801f15 	stw	r2,124(sp)
 8004f24:	e0bff60e 	bge	fp,r2,8004f00 <__alt_data_end+0xf8004f00>
 8004f28:	d9801e04 	addi	r6,sp,120
 8004f2c:	b80b883a 	mov	r5,r23
 8004f30:	9809883a 	mov	r4,r19
 8004f34:	80096580 	call	8009658 <__sprint_r>
 8004f38:	103a711e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8004f3c:	d8c02017 	ldw	r3,128(sp)
 8004f40:	d8801f17 	ldw	r2,124(sp)
 8004f44:	da000404 	addi	r8,sp,16
 8004f48:	003fee06 	br	8004f04 <__alt_data_end+0xf8004f04>
 8004f4c:	00bfffc4 	movi	r2,-1
 8004f50:	003a6f06 	br	8003910 <__alt_data_end+0xf8003910>
 8004f54:	008011c4 	movi	r2,71
 8004f58:	1440b816 	blt	r2,r17,800523c <___vfprintf_internal_r+0x1d44>
 8004f5c:	04020074 	movhi	r16,2049
 8004f60:	84174704 	addi	r16,r16,23836
 8004f64:	00c000c4 	movi	r3,3
 8004f68:	00bfdfc4 	movi	r2,-129
 8004f6c:	d8c02a15 	stw	r3,168(sp)
 8004f70:	90a4703a 	and	r18,r18,r2
 8004f74:	df002783 	ldbu	fp,158(sp)
 8004f78:	d8c02e15 	stw	r3,184(sp)
 8004f7c:	d8002915 	stw	zero,164(sp)
 8004f80:	d8003215 	stw	zero,200(sp)
 8004f84:	003b2906 	br	8003c2c <__alt_data_end+0xf8003c2c>
 8004f88:	d9002d17 	ldw	r4,180(sp)
 8004f8c:	24c00017 	ldw	r19,0(r4)
 8004f90:	21000104 	addi	r4,r4,4
 8004f94:	d9002d15 	stw	r4,180(sp)
 8004f98:	982dd7fa 	srai	r22,r19,31
 8004f9c:	b005883a 	mov	r2,r22
 8004fa0:	003a9f06 	br	8003a20 <__alt_data_end+0xf8003a20>
 8004fa4:	d9402d17 	ldw	r5,180(sp)
 8004fa8:	d8c02f17 	ldw	r3,188(sp)
 8004fac:	28800017 	ldw	r2,0(r5)
 8004fb0:	29400104 	addi	r5,r5,4
 8004fb4:	d9402d15 	stw	r5,180(sp)
 8004fb8:	10c00015 	stw	r3,0(r2)
 8004fbc:	00398606 	br	80035d8 <__alt_data_end+0xf80035d8>
 8004fc0:	d9402d17 	ldw	r5,180(sp)
 8004fc4:	002d883a 	mov	r22,zero
 8004fc8:	2cc00017 	ldw	r19,0(r5)
 8004fcc:	29400104 	addi	r5,r5,4
 8004fd0:	d9402d15 	stw	r5,180(sp)
 8004fd4:	003c2306 	br	8004064 <__alt_data_end+0xf8004064>
 8004fd8:	d8c02d17 	ldw	r3,180(sp)
 8004fdc:	d9002917 	ldw	r4,164(sp)
 8004fe0:	002d883a 	mov	r22,zero
 8004fe4:	18800104 	addi	r2,r3,4
 8004fe8:	1cc0000b 	ldhu	r19,0(r3)
 8004fec:	203dc10e 	bge	r4,zero,80046f4 <__alt_data_end+0xf80046f4>
 8004ff0:	003f7506 	br	8004dc8 <__alt_data_end+0xf8004dc8>
 8004ff4:	04020074 	movhi	r16,2049
 8004ff8:	84174504 	addi	r16,r16,23828
 8004ffc:	003acc06 	br	8003b30 <__alt_data_end+0xf8003b30>
 8005000:	d9002c17 	ldw	r4,176(sp)
 8005004:	d9801e04 	addi	r6,sp,120
 8005008:	b80b883a 	mov	r5,r23
 800500c:	80096580 	call	8009658 <__sprint_r>
 8005010:	103a3b1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8005014:	dc402617 	ldw	r17,152(sp)
 8005018:	d8c02017 	ldw	r3,128(sp)
 800501c:	da000404 	addi	r8,sp,16
 8005020:	003f9c06 	br	8004e94 <__alt_data_end+0xf8004e94>
 8005024:	ac400043 	ldbu	r17,1(r21)
 8005028:	94800814 	ori	r18,r18,32
 800502c:	ad400044 	addi	r21,r21,1
 8005030:	8c403fcc 	andi	r17,r17,255
 8005034:	8c40201c 	xori	r17,r17,128
 8005038:	8c7fe004 	addi	r17,r17,-128
 800503c:	00398f06 	br	800367c <__alt_data_end+0xf800367c>
 8005040:	d8c02d15 	stw	r3,180(sp)
 8005044:	0039883a 	mov	fp,zero
 8005048:	003e3506 	br	8004920 <__alt_data_end+0xf8004920>
 800504c:	d9002c17 	ldw	r4,176(sp)
 8005050:	d9801e04 	addi	r6,sp,120
 8005054:	b80b883a 	mov	r5,r23
 8005058:	80096580 	call	8009658 <__sprint_r>
 800505c:	103a281e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 8005060:	d8c02017 	ldw	r3,128(sp)
 8005064:	da000404 	addi	r8,sp,16
 8005068:	003cd006 	br	80043ac <__alt_data_end+0xf80043ac>
 800506c:	8009883a 	mov	r4,r16
 8005070:	da003d15 	stw	r8,244(sp)
 8005074:	80034580 	call	8003458 <strlen>
 8005078:	d8802e15 	stw	r2,184(sp)
 800507c:	da003d17 	ldw	r8,244(sp)
 8005080:	103c340e 	bge	r2,zero,8004154 <__alt_data_end+0xf8004154>
 8005084:	0005883a 	mov	r2,zero
 8005088:	003c3206 	br	8004154 <__alt_data_end+0xf8004154>
 800508c:	d9002c17 	ldw	r4,176(sp)
 8005090:	d9801e04 	addi	r6,sp,120
 8005094:	b80b883a 	mov	r5,r23
 8005098:	80096580 	call	8009658 <__sprint_r>
 800509c:	103a181e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80050a0:	d8c02017 	ldw	r3,128(sp)
 80050a4:	d8801f17 	ldw	r2,124(sp)
 80050a8:	da000404 	addi	r8,sp,16
 80050ac:	d9403317 	ldw	r5,204(sp)
 80050b0:	10800044 	addi	r2,r2,1
 80050b4:	44000015 	stw	r16,0(r8)
 80050b8:	28c7883a 	add	r3,r5,r3
 80050bc:	003b7d06 	br	8003eb4 <__alt_data_end+0xf8003eb4>
 80050c0:	01020074 	movhi	r4,2049
 80050c4:	21175984 	addi	r4,r4,23910
 80050c8:	d9003515 	stw	r4,212(sp)
 80050cc:	003b1406 	br	8003d20 <__alt_data_end+0xf8003d20>
 80050d0:	013fffc4 	movi	r4,-1
 80050d4:	003a3506 	br	80039ac <__alt_data_end+0xf80039ac>
 80050d8:	0023883a 	mov	r17,zero
 80050dc:	003d9d06 	br	8004754 <__alt_data_end+0xf8004754>
 80050e0:	d9002c17 	ldw	r4,176(sp)
 80050e4:	d9801e04 	addi	r6,sp,120
 80050e8:	b80b883a 	mov	r5,r23
 80050ec:	80096580 	call	8009658 <__sprint_r>
 80050f0:	103a031e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80050f4:	d8c02017 	ldw	r3,128(sp)
 80050f8:	da000404 	addi	r8,sp,16
 80050fc:	003d9406 	br	8004750 <__alt_data_end+0xf8004750>
 8005100:	01020074 	movhi	r4,2049
 8005104:	21175584 	addi	r4,r4,23894
 8005108:	d9002b15 	stw	r4,172(sp)
 800510c:	d9002b17 	ldw	r4,172(sp)
 8005110:	1c47883a 	add	r3,r3,r17
 8005114:	10800044 	addi	r2,r2,1
 8005118:	41000015 	stw	r4,0(r8)
 800511c:	44400115 	stw	r17,4(r8)
 8005120:	d8c02015 	stw	r3,128(sp)
 8005124:	d8801f15 	stw	r2,124(sp)
 8005128:	010001c4 	movi	r4,7
 800512c:	20bfd716 	blt	r4,r2,800508c <__alt_data_end+0xf800508c>
 8005130:	42000204 	addi	r8,r8,8
 8005134:	003fdd06 	br	80050ac <__alt_data_end+0xf80050ac>
 8005138:	d9002c17 	ldw	r4,176(sp)
 800513c:	d9801e04 	addi	r6,sp,120
 8005140:	b80b883a 	mov	r5,r23
 8005144:	80096580 	call	8009658 <__sprint_r>
 8005148:	1039ed1e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 800514c:	d8802617 	ldw	r2,152(sp)
 8005150:	d8c02017 	ldw	r3,128(sp)
 8005154:	da000404 	addi	r8,sp,16
 8005158:	003e1006 	br	800499c <__alt_data_end+0xf800499c>
 800515c:	00800044 	movi	r2,1
 8005160:	10803fcc 	andi	r2,r2,255
 8005164:	00c00044 	movi	r3,1
 8005168:	10fa3526 	beq	r2,r3,8003a40 <__alt_data_end+0xf8003a40>
 800516c:	00c00084 	movi	r3,2
 8005170:	10fbcb26 	beq	r2,r3,80040a0 <__alt_data_end+0xf80040a0>
 8005174:	003a8f06 	br	8003bb4 <__alt_data_end+0xf8003bb4>
 8005178:	01020074 	movhi	r4,2049
 800517c:	21175984 	addi	r4,r4,23910
 8005180:	d9003515 	stw	r4,212(sp)
 8005184:	003b7606 	br	8003f60 <__alt_data_end+0xf8003f60>
 8005188:	d8802917 	ldw	r2,164(sp)
 800518c:	00c00184 	movi	r3,6
 8005190:	1880012e 	bgeu	r3,r2,8005198 <___vfprintf_internal_r+0x1ca0>
 8005194:	1805883a 	mov	r2,r3
 8005198:	d8802e15 	stw	r2,184(sp)
 800519c:	1000ef16 	blt	r2,zero,800555c <___vfprintf_internal_r+0x2064>
 80051a0:	04020074 	movhi	r16,2049
 80051a4:	d8802a15 	stw	r2,168(sp)
 80051a8:	dcc02d15 	stw	r19,180(sp)
 80051ac:	d8002915 	stw	zero,164(sp)
 80051b0:	d8003215 	stw	zero,200(sp)
 80051b4:	84175304 	addi	r16,r16,23884
 80051b8:	0039883a 	mov	fp,zero
 80051bc:	003aa206 	br	8003c48 <__alt_data_end+0xf8003c48>
 80051c0:	0021883a 	mov	r16,zero
 80051c4:	003e0706 	br	80049e4 <__alt_data_end+0xf80049e4>
 80051c8:	d9002c17 	ldw	r4,176(sp)
 80051cc:	d9801e04 	addi	r6,sp,120
 80051d0:	b80b883a 	mov	r5,r23
 80051d4:	80096580 	call	8009658 <__sprint_r>
 80051d8:	1039c91e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 80051dc:	d8802617 	ldw	r2,152(sp)
 80051e0:	d9403317 	ldw	r5,204(sp)
 80051e4:	d8c02017 	ldw	r3,128(sp)
 80051e8:	da000404 	addi	r8,sp,16
 80051ec:	2885c83a 	sub	r2,r5,r2
 80051f0:	003dfb06 	br	80049e0 <__alt_data_end+0xf80049e0>
 80051f4:	9080004c 	andi	r2,r18,1
 80051f8:	103e8f1e 	bne	r2,zero,8004c38 <__alt_data_end+0xf8004c38>
 80051fc:	d8802117 	ldw	r2,132(sp)
 8005200:	003e9e06 	br	8004c7c <__alt_data_end+0xf8004c7c>
 8005204:	1025883a 	mov	r18,r2
 8005208:	0039883a 	mov	fp,zero
 800520c:	00800084 	movi	r2,2
 8005210:	003fd306 	br	8005160 <__alt_data_end+0xf8005160>
 8005214:	07000b44 	movi	fp,45
 8005218:	df002785 	stb	fp,158(sp)
 800521c:	003a4006 	br	8003b20 <__alt_data_end+0xf8003b20>
 8005220:	00c00b44 	movi	r3,45
 8005224:	d8c02785 	stb	r3,158(sp)
 8005228:	d8802a15 	stw	r2,168(sp)
 800522c:	dc802b17 	ldw	r18,172(sp)
 8005230:	d8002915 	stw	zero,164(sp)
 8005234:	07000b44 	movi	fp,45
 8005238:	003a8006 	br	8003c3c <__alt_data_end+0xf8003c3c>
 800523c:	04020074 	movhi	r16,2049
 8005240:	84174804 	addi	r16,r16,23840
 8005244:	003f4706 	br	8004f64 <__alt_data_end+0xf8004f64>
 8005248:	d8c02d17 	ldw	r3,180(sp)
 800524c:	d9002f17 	ldw	r4,188(sp)
 8005250:	18800017 	ldw	r2,0(r3)
 8005254:	18c00104 	addi	r3,r3,4
 8005258:	d8c02d15 	stw	r3,180(sp)
 800525c:	11000015 	stw	r4,0(r2)
 8005260:	0038dd06 	br	80035d8 <__alt_data_end+0xf80035d8>
 8005264:	dd802617 	ldw	r22,152(sp)
 8005268:	00bfff44 	movi	r2,-3
 800526c:	b0801c16 	blt	r22,r2,80052e0 <___vfprintf_internal_r+0x1de8>
 8005270:	d9402917 	ldw	r5,164(sp)
 8005274:	2d801a16 	blt	r5,r22,80052e0 <___vfprintf_internal_r+0x1de8>
 8005278:	dd803215 	stw	r22,200(sp)
 800527c:	003e8906 	br	8004ca4 <__alt_data_end+0xf8004ca4>
 8005280:	01020074 	movhi	r4,2049
 8005284:	21175584 	addi	r4,r4,23894
 8005288:	d9002b15 	stw	r4,172(sp)
 800528c:	003c9106 	br	80044d4 <__alt_data_end+0xf80044d4>
 8005290:	e005883a 	mov	r2,fp
 8005294:	003e7906 	br	8004c7c <__alt_data_end+0xf8004c7c>
 8005298:	d9402917 	ldw	r5,164(sp)
 800529c:	df002783 	ldbu	fp,158(sp)
 80052a0:	dcc02d15 	stw	r19,180(sp)
 80052a4:	d9402a15 	stw	r5,168(sp)
 80052a8:	d9402e15 	stw	r5,184(sp)
 80052ac:	d8002915 	stw	zero,164(sp)
 80052b0:	d8003215 	stw	zero,200(sp)
 80052b4:	003a5d06 	br	8003c2c <__alt_data_end+0xf8003c2c>
 80052b8:	9080004c 	andi	r2,r18,1
 80052bc:	0039883a 	mov	fp,zero
 80052c0:	10000426 	beq	r2,zero,80052d4 <___vfprintf_internal_r+0x1ddc>
 80052c4:	00800c04 	movi	r2,48
 80052c8:	dc001dc4 	addi	r16,sp,119
 80052cc:	d8801dc5 	stb	r2,119(sp)
 80052d0:	003b8006 	br	80040d4 <__alt_data_end+0xf80040d4>
 80052d4:	d8002e15 	stw	zero,184(sp)
 80052d8:	dc001e04 	addi	r16,sp,120
 80052dc:	003a4d06 	br	8003c14 <__alt_data_end+0xf8003c14>
 80052e0:	8c7fff84 	addi	r17,r17,-2
 80052e4:	b5bfffc4 	addi	r22,r22,-1
 80052e8:	dd802615 	stw	r22,152(sp)
 80052ec:	dc4022c5 	stb	r17,139(sp)
 80052f0:	b000bf16 	blt	r22,zero,80055f0 <___vfprintf_internal_r+0x20f8>
 80052f4:	00800ac4 	movi	r2,43
 80052f8:	d8802305 	stb	r2,140(sp)
 80052fc:	00800244 	movi	r2,9
 8005300:	15807016 	blt	r2,r22,80054c4 <___vfprintf_internal_r+0x1fcc>
 8005304:	00800c04 	movi	r2,48
 8005308:	b5800c04 	addi	r22,r22,48
 800530c:	d8802345 	stb	r2,141(sp)
 8005310:	dd802385 	stb	r22,142(sp)
 8005314:	d88023c4 	addi	r2,sp,143
 8005318:	df0022c4 	addi	fp,sp,139
 800531c:	d8c03317 	ldw	r3,204(sp)
 8005320:	1739c83a 	sub	fp,r2,fp
 8005324:	d9003317 	ldw	r4,204(sp)
 8005328:	e0c7883a 	add	r3,fp,r3
 800532c:	df003a15 	stw	fp,232(sp)
 8005330:	d8c02e15 	stw	r3,184(sp)
 8005334:	00800044 	movi	r2,1
 8005338:	1100b30e 	bge	r2,r4,8005608 <___vfprintf_internal_r+0x2110>
 800533c:	d8c02e17 	ldw	r3,184(sp)
 8005340:	18c00044 	addi	r3,r3,1
 8005344:	d8c02e15 	stw	r3,184(sp)
 8005348:	1805883a 	mov	r2,r3
 800534c:	1800ac16 	blt	r3,zero,8005600 <___vfprintf_internal_r+0x2108>
 8005350:	d8003215 	stw	zero,200(sp)
 8005354:	003e5d06 	br	8004ccc <__alt_data_end+0xf8004ccc>
 8005358:	d9002c17 	ldw	r4,176(sp)
 800535c:	d9801e04 	addi	r6,sp,120
 8005360:	b80b883a 	mov	r5,r23
 8005364:	80096580 	call	8009658 <__sprint_r>
 8005368:	1039651e 	bne	r2,zero,8003900 <__alt_data_end+0xf8003900>
 800536c:	dc402617 	ldw	r17,152(sp)
 8005370:	d8c02017 	ldw	r3,128(sp)
 8005374:	d8801f17 	ldw	r2,124(sp)
 8005378:	da000404 	addi	r8,sp,16
 800537c:	003ed606 	br	8004ed8 <__alt_data_end+0xf8004ed8>
 8005380:	582b883a 	mov	r21,r11
 8005384:	d8002915 	stw	zero,164(sp)
 8005388:	0038bd06 	br	8003680 <__alt_data_end+0xf8003680>
 800538c:	d8802917 	ldw	r2,164(sp)
 8005390:	103e071e 	bne	r2,zero,8004bb0 <__alt_data_end+0xf8004bb0>
 8005394:	dc002915 	stw	r16,164(sp)
 8005398:	003e0506 	br	8004bb0 <__alt_data_end+0xf8004bb0>
 800539c:	d9002917 	ldw	r4,164(sp)
 80053a0:	20c00044 	addi	r3,r4,1
 80053a4:	003e0f06 	br	8004be4 <__alt_data_end+0xf8004be4>
 80053a8:	01400184 	movi	r5,6
 80053ac:	d9402915 	stw	r5,164(sp)
 80053b0:	003dff06 	br	8004bb0 <__alt_data_end+0xf8004bb0>
 80053b4:	d8802104 	addi	r2,sp,132
 80053b8:	d8800315 	stw	r2,12(sp)
 80053bc:	d8802504 	addi	r2,sp,148
 80053c0:	d8800215 	stw	r2,8(sp)
 80053c4:	d8802604 	addi	r2,sp,152
 80053c8:	d8800115 	stw	r2,4(sp)
 80053cc:	d8802917 	ldw	r2,164(sp)
 80053d0:	d9403617 	ldw	r5,216(sp)
 80053d4:	d9002c17 	ldw	r4,176(sp)
 80053d8:	d8800015 	stw	r2,0(sp)
 80053dc:	01c000c4 	movi	r7,3
 80053e0:	980d883a 	mov	r6,r19
 80053e4:	da003d15 	stw	r8,244(sp)
 80053e8:	8005bd00 	call	8005bd0 <_dtoa_r>
 80053ec:	d8c02917 	ldw	r3,164(sp)
 80053f0:	da003d17 	ldw	r8,244(sp)
 80053f4:	1021883a 	mov	r16,r2
 80053f8:	10f9883a 	add	fp,r2,r3
 80053fc:	81000007 	ldb	r4,0(r16)
 8005400:	00800c04 	movi	r2,48
 8005404:	20805e26 	beq	r4,r2,8005580 <___vfprintf_internal_r+0x2088>
 8005408:	d8c02617 	ldw	r3,152(sp)
 800540c:	e0f9883a 	add	fp,fp,r3
 8005410:	003e0a06 	br	8004c3c <__alt_data_end+0xf8004c3c>
 8005414:	00c00b44 	movi	r3,45
 8005418:	24e0003c 	xorhi	r19,r4,32768
 800541c:	d8c02a05 	stb	r3,168(sp)
 8005420:	003de906 	br	8004bc8 <__alt_data_end+0xf8004bc8>
 8005424:	d8c03217 	ldw	r3,200(sp)
 8005428:	00c07a0e 	bge	zero,r3,8005614 <___vfprintf_internal_r+0x211c>
 800542c:	00800044 	movi	r2,1
 8005430:	d9003317 	ldw	r4,204(sp)
 8005434:	1105883a 	add	r2,r2,r4
 8005438:	d8802e15 	stw	r2,184(sp)
 800543c:	10004e16 	blt	r2,zero,8005578 <___vfprintf_internal_r+0x2080>
 8005440:	044019c4 	movi	r17,103
 8005444:	003e2106 	br	8004ccc <__alt_data_end+0xf8004ccc>
 8005448:	d9002917 	ldw	r4,164(sp)
 800544c:	d8802104 	addi	r2,sp,132
 8005450:	d8800315 	stw	r2,12(sp)
 8005454:	d9000015 	stw	r4,0(sp)
 8005458:	d8802504 	addi	r2,sp,148
 800545c:	d9403617 	ldw	r5,216(sp)
 8005460:	d9002c17 	ldw	r4,176(sp)
 8005464:	d8800215 	stw	r2,8(sp)
 8005468:	d8802604 	addi	r2,sp,152
 800546c:	d8800115 	stw	r2,4(sp)
 8005470:	01c000c4 	movi	r7,3
 8005474:	980d883a 	mov	r6,r19
 8005478:	da003d15 	stw	r8,244(sp)
 800547c:	8005bd00 	call	8005bd0 <_dtoa_r>
 8005480:	d8c02917 	ldw	r3,164(sp)
 8005484:	da003d17 	ldw	r8,244(sp)
 8005488:	1021883a 	mov	r16,r2
 800548c:	00801184 	movi	r2,70
 8005490:	80f9883a 	add	fp,r16,r3
 8005494:	88bfd926 	beq	r17,r2,80053fc <__alt_data_end+0xf80053fc>
 8005498:	003de806 	br	8004c3c <__alt_data_end+0xf8004c3c>
 800549c:	d9002917 	ldw	r4,164(sp)
 80054a0:	00c04d0e 	bge	zero,r3,80055d8 <___vfprintf_internal_r+0x20e0>
 80054a4:	2000441e 	bne	r4,zero,80055b8 <___vfprintf_internal_r+0x20c0>
 80054a8:	9480004c 	andi	r18,r18,1
 80054ac:	9000421e 	bne	r18,zero,80055b8 <___vfprintf_internal_r+0x20c0>
 80054b0:	1805883a 	mov	r2,r3
 80054b4:	18007016 	blt	r3,zero,8005678 <___vfprintf_internal_r+0x2180>
 80054b8:	d8c03217 	ldw	r3,200(sp)
 80054bc:	d8c02e15 	stw	r3,184(sp)
 80054c0:	003e0206 	br	8004ccc <__alt_data_end+0xf8004ccc>
 80054c4:	df0022c4 	addi	fp,sp,139
 80054c8:	dc002915 	stw	r16,164(sp)
 80054cc:	4027883a 	mov	r19,r8
 80054d0:	e021883a 	mov	r16,fp
 80054d4:	b009883a 	mov	r4,r22
 80054d8:	01400284 	movi	r5,10
 80054dc:	800bce40 	call	800bce4 <__modsi3>
 80054e0:	10800c04 	addi	r2,r2,48
 80054e4:	843fffc4 	addi	r16,r16,-1
 80054e8:	b009883a 	mov	r4,r22
 80054ec:	01400284 	movi	r5,10
 80054f0:	80800005 	stb	r2,0(r16)
 80054f4:	800bc600 	call	800bc60 <__divsi3>
 80054f8:	102d883a 	mov	r22,r2
 80054fc:	00800244 	movi	r2,9
 8005500:	15bff416 	blt	r2,r22,80054d4 <__alt_data_end+0xf80054d4>
 8005504:	9811883a 	mov	r8,r19
 8005508:	b0800c04 	addi	r2,r22,48
 800550c:	8027883a 	mov	r19,r16
 8005510:	997fffc4 	addi	r5,r19,-1
 8005514:	98bfffc5 	stb	r2,-1(r19)
 8005518:	dc002917 	ldw	r16,164(sp)
 800551c:	2f006a2e 	bgeu	r5,fp,80056c8 <___vfprintf_internal_r+0x21d0>
 8005520:	d9c02384 	addi	r7,sp,142
 8005524:	3ccfc83a 	sub	r7,r7,r19
 8005528:	d9002344 	addi	r4,sp,141
 800552c:	e1cf883a 	add	r7,fp,r7
 8005530:	00000106 	br	8005538 <___vfprintf_internal_r+0x2040>
 8005534:	28800003 	ldbu	r2,0(r5)
 8005538:	20800005 	stb	r2,0(r4)
 800553c:	21000044 	addi	r4,r4,1
 8005540:	29400044 	addi	r5,r5,1
 8005544:	393ffb1e 	bne	r7,r4,8005534 <__alt_data_end+0xf8005534>
 8005548:	d8802304 	addi	r2,sp,140
 800554c:	14c5c83a 	sub	r2,r2,r19
 8005550:	d8c02344 	addi	r3,sp,141
 8005554:	1885883a 	add	r2,r3,r2
 8005558:	003f7006 	br	800531c <__alt_data_end+0xf800531c>
 800555c:	0005883a 	mov	r2,zero
 8005560:	003f0f06 	br	80051a0 <__alt_data_end+0xf80051a0>
 8005564:	d8c03217 	ldw	r3,200(sp)
 8005568:	18c00044 	addi	r3,r3,1
 800556c:	d8c02e15 	stw	r3,184(sp)
 8005570:	1805883a 	mov	r2,r3
 8005574:	183fb20e 	bge	r3,zero,8005440 <__alt_data_end+0xf8005440>
 8005578:	0005883a 	mov	r2,zero
 800557c:	003fb006 	br	8005440 <__alt_data_end+0xf8005440>
 8005580:	d9003617 	ldw	r4,216(sp)
 8005584:	000d883a 	mov	r6,zero
 8005588:	000f883a 	mov	r7,zero
 800558c:	980b883a 	mov	r5,r19
 8005590:	d8c03c15 	stw	r3,240(sp)
 8005594:	da003d15 	stw	r8,244(sp)
 8005598:	800cfa80 	call	800cfa8 <__eqdf2>
 800559c:	d8c03c17 	ldw	r3,240(sp)
 80055a0:	da003d17 	ldw	r8,244(sp)
 80055a4:	103f9826 	beq	r2,zero,8005408 <__alt_data_end+0xf8005408>
 80055a8:	00800044 	movi	r2,1
 80055ac:	10c7c83a 	sub	r3,r2,r3
 80055b0:	d8c02615 	stw	r3,152(sp)
 80055b4:	003f9506 	br	800540c <__alt_data_end+0xf800540c>
 80055b8:	d9002917 	ldw	r4,164(sp)
 80055bc:	d8c03217 	ldw	r3,200(sp)
 80055c0:	20800044 	addi	r2,r4,1
 80055c4:	1885883a 	add	r2,r3,r2
 80055c8:	d8802e15 	stw	r2,184(sp)
 80055cc:	103dbf0e 	bge	r2,zero,8004ccc <__alt_data_end+0xf8004ccc>
 80055d0:	0005883a 	mov	r2,zero
 80055d4:	003dbd06 	br	8004ccc <__alt_data_end+0xf8004ccc>
 80055d8:	2000211e 	bne	r4,zero,8005660 <___vfprintf_internal_r+0x2168>
 80055dc:	9480004c 	andi	r18,r18,1
 80055e0:	90001f1e 	bne	r18,zero,8005660 <___vfprintf_internal_r+0x2168>
 80055e4:	00800044 	movi	r2,1
 80055e8:	d8802e15 	stw	r2,184(sp)
 80055ec:	003db706 	br	8004ccc <__alt_data_end+0xf8004ccc>
 80055f0:	00800b44 	movi	r2,45
 80055f4:	05adc83a 	sub	r22,zero,r22
 80055f8:	d8802305 	stb	r2,140(sp)
 80055fc:	003f3f06 	br	80052fc <__alt_data_end+0xf80052fc>
 8005600:	0005883a 	mov	r2,zero
 8005604:	003f5206 	br	8005350 <__alt_data_end+0xf8005350>
 8005608:	90a4703a 	and	r18,r18,r2
 800560c:	903f4e26 	beq	r18,zero,8005348 <__alt_data_end+0xf8005348>
 8005610:	003f4a06 	br	800533c <__alt_data_end+0xf800533c>
 8005614:	00800084 	movi	r2,2
 8005618:	10c5c83a 	sub	r2,r2,r3
 800561c:	003f8406 	br	8005430 <__alt_data_end+0xf8005430>
 8005620:	d8802d17 	ldw	r2,180(sp)
 8005624:	d9002d17 	ldw	r4,180(sp)
 8005628:	ac400043 	ldbu	r17,1(r21)
 800562c:	10800017 	ldw	r2,0(r2)
 8005630:	582b883a 	mov	r21,r11
 8005634:	d8802915 	stw	r2,164(sp)
 8005638:	20800104 	addi	r2,r4,4
 800563c:	d9002917 	ldw	r4,164(sp)
 8005640:	d8802d15 	stw	r2,180(sp)
 8005644:	203e7a0e 	bge	r4,zero,8005030 <__alt_data_end+0xf8005030>
 8005648:	8c403fcc 	andi	r17,r17,255
 800564c:	00bfffc4 	movi	r2,-1
 8005650:	8c40201c 	xori	r17,r17,128
 8005654:	d8802915 	stw	r2,164(sp)
 8005658:	8c7fe004 	addi	r17,r17,-128
 800565c:	00380706 	br	800367c <__alt_data_end+0xf800367c>
 8005660:	d8c02917 	ldw	r3,164(sp)
 8005664:	18c00084 	addi	r3,r3,2
 8005668:	d8c02e15 	stw	r3,184(sp)
 800566c:	1805883a 	mov	r2,r3
 8005670:	183d960e 	bge	r3,zero,8004ccc <__alt_data_end+0xf8004ccc>
 8005674:	003fd606 	br	80055d0 <__alt_data_end+0xf80055d0>
 8005678:	0005883a 	mov	r2,zero
 800567c:	003f8e06 	br	80054b8 <__alt_data_end+0xf80054b8>
 8005680:	9080004c 	andi	r2,r18,1
 8005684:	103f811e 	bne	r2,zero,800548c <__alt_data_end+0xf800548c>
 8005688:	d8802117 	ldw	r2,132(sp)
 800568c:	1405c83a 	sub	r2,r2,r16
 8005690:	d8803315 	stw	r2,204(sp)
 8005694:	b47ef326 	beq	r22,r17,8005264 <__alt_data_end+0xf8005264>
 8005698:	dd802617 	ldw	r22,152(sp)
 800569c:	003f1106 	br	80052e4 <__alt_data_end+0xf80052e4>
 80056a0:	d9c02785 	stb	r7,158(sp)
 80056a4:	00390406 	br	8003ab8 <__alt_data_end+0xf8003ab8>
 80056a8:	d9c02785 	stb	r7,158(sp)
 80056ac:	0038d306 	br	80039fc <__alt_data_end+0xf80039fc>
 80056b0:	d9c02785 	stb	r7,158(sp)
 80056b4:	003a6106 	br	800403c <__alt_data_end+0xf800403c>
 80056b8:	d9c02785 	stb	r7,158(sp)
 80056bc:	003af806 	br	80042a0 <__alt_data_end+0xf80042a0>
 80056c0:	0005883a 	mov	r2,zero
 80056c4:	003d7e06 	br	8004cc0 <__alt_data_end+0xf8004cc0>
 80056c8:	d8802344 	addi	r2,sp,141
 80056cc:	003f1306 	br	800531c <__alt_data_end+0xf800531c>
 80056d0:	d9c02785 	stb	r7,158(sp)
 80056d4:	00392306 	br	8003b64 <__alt_data_end+0xf8003b64>
 80056d8:	d9c02785 	stb	r7,158(sp)
 80056dc:	003aa906 	br	8004184 <__alt_data_end+0xf8004184>
 80056e0:	d9c02785 	stb	r7,158(sp)
 80056e4:	003a3d06 	br	8003fdc <__alt_data_end+0xf8003fdc>
 80056e8:	d9c02785 	stb	r7,158(sp)
 80056ec:	003aca06 	br	8004218 <__alt_data_end+0xf8004218>

080056f0 <__vfprintf_internal>:
 80056f0:	00820074 	movhi	r2,2049
 80056f4:	109ecc04 	addi	r2,r2,31536
 80056f8:	300f883a 	mov	r7,r6
 80056fc:	280d883a 	mov	r6,r5
 8005700:	200b883a 	mov	r5,r4
 8005704:	11000017 	ldw	r4,0(r2)
 8005708:	80034f81 	jmpi	80034f8 <___vfprintf_internal_r>

0800570c <__sbprintf>:
 800570c:	2880030b 	ldhu	r2,12(r5)
 8005710:	2ac01917 	ldw	r11,100(r5)
 8005714:	2a80038b 	ldhu	r10,14(r5)
 8005718:	2a400717 	ldw	r9,28(r5)
 800571c:	2a000917 	ldw	r8,36(r5)
 8005720:	defee204 	addi	sp,sp,-1144
 8005724:	00c10004 	movi	r3,1024
 8005728:	dc011a15 	stw	r16,1128(sp)
 800572c:	10bfff4c 	andi	r2,r2,65533
 8005730:	2821883a 	mov	r16,r5
 8005734:	d8cb883a 	add	r5,sp,r3
 8005738:	dc811c15 	stw	r18,1136(sp)
 800573c:	dc411b15 	stw	r17,1132(sp)
 8005740:	dfc11d15 	stw	ra,1140(sp)
 8005744:	2025883a 	mov	r18,r4
 8005748:	d881030d 	sth	r2,1036(sp)
 800574c:	dac11915 	stw	r11,1124(sp)
 8005750:	da81038d 	sth	r10,1038(sp)
 8005754:	da410715 	stw	r9,1052(sp)
 8005758:	da010915 	stw	r8,1060(sp)
 800575c:	dec10015 	stw	sp,1024(sp)
 8005760:	dec10415 	stw	sp,1040(sp)
 8005764:	d8c10215 	stw	r3,1032(sp)
 8005768:	d8c10515 	stw	r3,1044(sp)
 800576c:	d8010615 	stw	zero,1048(sp)
 8005770:	80034f80 	call	80034f8 <___vfprintf_internal_r>
 8005774:	1023883a 	mov	r17,r2
 8005778:	10000416 	blt	r2,zero,800578c <__sbprintf+0x80>
 800577c:	d9410004 	addi	r5,sp,1024
 8005780:	9009883a 	mov	r4,r18
 8005784:	80009a40 	call	80009a4 <_fflush_r>
 8005788:	10000d1e 	bne	r2,zero,80057c0 <__sbprintf+0xb4>
 800578c:	d881030b 	ldhu	r2,1036(sp)
 8005790:	1080100c 	andi	r2,r2,64
 8005794:	10000326 	beq	r2,zero,80057a4 <__sbprintf+0x98>
 8005798:	8080030b 	ldhu	r2,12(r16)
 800579c:	10801014 	ori	r2,r2,64
 80057a0:	8080030d 	sth	r2,12(r16)
 80057a4:	8805883a 	mov	r2,r17
 80057a8:	dfc11d17 	ldw	ra,1140(sp)
 80057ac:	dc811c17 	ldw	r18,1136(sp)
 80057b0:	dc411b17 	ldw	r17,1132(sp)
 80057b4:	dc011a17 	ldw	r16,1128(sp)
 80057b8:	dec11e04 	addi	sp,sp,1144
 80057bc:	f800283a 	ret
 80057c0:	047fffc4 	movi	r17,-1
 80057c4:	003ff106 	br	800578c <__alt_data_end+0xf800578c>

080057c8 <_write_r>:
 80057c8:	defffd04 	addi	sp,sp,-12
 80057cc:	2805883a 	mov	r2,r5
 80057d0:	dc000015 	stw	r16,0(sp)
 80057d4:	040200b4 	movhi	r16,2050
 80057d8:	dc400115 	stw	r17,4(sp)
 80057dc:	300b883a 	mov	r5,r6
 80057e0:	8425ad04 	addi	r16,r16,-26956
 80057e4:	2023883a 	mov	r17,r4
 80057e8:	380d883a 	mov	r6,r7
 80057ec:	1009883a 	mov	r4,r2
 80057f0:	dfc00215 	stw	ra,8(sp)
 80057f4:	80000015 	stw	zero,0(r16)
 80057f8:	800ef1c0 	call	800ef1c <write>
 80057fc:	00ffffc4 	movi	r3,-1
 8005800:	10c00526 	beq	r2,r3,8005818 <_write_r+0x50>
 8005804:	dfc00217 	ldw	ra,8(sp)
 8005808:	dc400117 	ldw	r17,4(sp)
 800580c:	dc000017 	ldw	r16,0(sp)
 8005810:	dec00304 	addi	sp,sp,12
 8005814:	f800283a 	ret
 8005818:	80c00017 	ldw	r3,0(r16)
 800581c:	183ff926 	beq	r3,zero,8005804 <__alt_data_end+0xf8005804>
 8005820:	88c00015 	stw	r3,0(r17)
 8005824:	003ff706 	br	8005804 <__alt_data_end+0xf8005804>

08005828 <__swsetup_r>:
 8005828:	00820074 	movhi	r2,2049
 800582c:	defffd04 	addi	sp,sp,-12
 8005830:	109ecc04 	addi	r2,r2,31536
 8005834:	dc400115 	stw	r17,4(sp)
 8005838:	2023883a 	mov	r17,r4
 800583c:	11000017 	ldw	r4,0(r2)
 8005840:	dc000015 	stw	r16,0(sp)
 8005844:	dfc00215 	stw	ra,8(sp)
 8005848:	2821883a 	mov	r16,r5
 800584c:	20000226 	beq	r4,zero,8005858 <__swsetup_r+0x30>
 8005850:	20800e17 	ldw	r2,56(r4)
 8005854:	10003126 	beq	r2,zero,800591c <__swsetup_r+0xf4>
 8005858:	8080030b 	ldhu	r2,12(r16)
 800585c:	10c0020c 	andi	r3,r2,8
 8005860:	1009883a 	mov	r4,r2
 8005864:	18000f26 	beq	r3,zero,80058a4 <__swsetup_r+0x7c>
 8005868:	80c00417 	ldw	r3,16(r16)
 800586c:	18001526 	beq	r3,zero,80058c4 <__swsetup_r+0x9c>
 8005870:	1100004c 	andi	r4,r2,1
 8005874:	20001c1e 	bne	r4,zero,80058e8 <__swsetup_r+0xc0>
 8005878:	1080008c 	andi	r2,r2,2
 800587c:	1000291e 	bne	r2,zero,8005924 <__swsetup_r+0xfc>
 8005880:	80800517 	ldw	r2,20(r16)
 8005884:	80800215 	stw	r2,8(r16)
 8005888:	18001c26 	beq	r3,zero,80058fc <__swsetup_r+0xd4>
 800588c:	0005883a 	mov	r2,zero
 8005890:	dfc00217 	ldw	ra,8(sp)
 8005894:	dc400117 	ldw	r17,4(sp)
 8005898:	dc000017 	ldw	r16,0(sp)
 800589c:	dec00304 	addi	sp,sp,12
 80058a0:	f800283a 	ret
 80058a4:	2080040c 	andi	r2,r4,16
 80058a8:	10002e26 	beq	r2,zero,8005964 <__swsetup_r+0x13c>
 80058ac:	2080010c 	andi	r2,r4,4
 80058b0:	10001e1e 	bne	r2,zero,800592c <__swsetup_r+0x104>
 80058b4:	80c00417 	ldw	r3,16(r16)
 80058b8:	20800214 	ori	r2,r4,8
 80058bc:	8080030d 	sth	r2,12(r16)
 80058c0:	183feb1e 	bne	r3,zero,8005870 <__alt_data_end+0xf8005870>
 80058c4:	1100a00c 	andi	r4,r2,640
 80058c8:	01408004 	movi	r5,512
 80058cc:	217fe826 	beq	r4,r5,8005870 <__alt_data_end+0xf8005870>
 80058d0:	800b883a 	mov	r5,r16
 80058d4:	8809883a 	mov	r4,r17
 80058d8:	8001bd40 	call	8001bd4 <__smakebuf_r>
 80058dc:	8080030b 	ldhu	r2,12(r16)
 80058e0:	80c00417 	ldw	r3,16(r16)
 80058e4:	003fe206 	br	8005870 <__alt_data_end+0xf8005870>
 80058e8:	80800517 	ldw	r2,20(r16)
 80058ec:	80000215 	stw	zero,8(r16)
 80058f0:	0085c83a 	sub	r2,zero,r2
 80058f4:	80800615 	stw	r2,24(r16)
 80058f8:	183fe41e 	bne	r3,zero,800588c <__alt_data_end+0xf800588c>
 80058fc:	80c0030b 	ldhu	r3,12(r16)
 8005900:	0005883a 	mov	r2,zero
 8005904:	1900200c 	andi	r4,r3,128
 8005908:	203fe126 	beq	r4,zero,8005890 <__alt_data_end+0xf8005890>
 800590c:	18c01014 	ori	r3,r3,64
 8005910:	80c0030d 	sth	r3,12(r16)
 8005914:	00bfffc4 	movi	r2,-1
 8005918:	003fdd06 	br	8005890 <__alt_data_end+0xf8005890>
 800591c:	8000d800 	call	8000d80 <__sinit>
 8005920:	003fcd06 	br	8005858 <__alt_data_end+0xf8005858>
 8005924:	0005883a 	mov	r2,zero
 8005928:	003fd606 	br	8005884 <__alt_data_end+0xf8005884>
 800592c:	81400c17 	ldw	r5,48(r16)
 8005930:	28000626 	beq	r5,zero,800594c <__swsetup_r+0x124>
 8005934:	80801004 	addi	r2,r16,64
 8005938:	28800326 	beq	r5,r2,8005948 <__swsetup_r+0x120>
 800593c:	8809883a 	mov	r4,r17
 8005940:	80012600 	call	8001260 <_free_r>
 8005944:	8100030b 	ldhu	r4,12(r16)
 8005948:	80000c15 	stw	zero,48(r16)
 800594c:	80c00417 	ldw	r3,16(r16)
 8005950:	00bff6c4 	movi	r2,-37
 8005954:	1108703a 	and	r4,r2,r4
 8005958:	80000115 	stw	zero,4(r16)
 800595c:	80c00015 	stw	r3,0(r16)
 8005960:	003fd506 	br	80058b8 <__alt_data_end+0xf80058b8>
 8005964:	00800244 	movi	r2,9
 8005968:	88800015 	stw	r2,0(r17)
 800596c:	20801014 	ori	r2,r4,64
 8005970:	8080030d 	sth	r2,12(r16)
 8005974:	00bfffc4 	movi	r2,-1
 8005978:	003fc506 	br	8005890 <__alt_data_end+0xf8005890>

0800597c <_close_r>:
 800597c:	defffd04 	addi	sp,sp,-12
 8005980:	dc000015 	stw	r16,0(sp)
 8005984:	040200b4 	movhi	r16,2050
 8005988:	dc400115 	stw	r17,4(sp)
 800598c:	8425ad04 	addi	r16,r16,-26956
 8005990:	2023883a 	mov	r17,r4
 8005994:	2809883a 	mov	r4,r5
 8005998:	dfc00215 	stw	ra,8(sp)
 800599c:	80000015 	stw	zero,0(r16)
 80059a0:	800e4b80 	call	800e4b8 <close>
 80059a4:	00ffffc4 	movi	r3,-1
 80059a8:	10c00526 	beq	r2,r3,80059c0 <_close_r+0x44>
 80059ac:	dfc00217 	ldw	ra,8(sp)
 80059b0:	dc400117 	ldw	r17,4(sp)
 80059b4:	dc000017 	ldw	r16,0(sp)
 80059b8:	dec00304 	addi	sp,sp,12
 80059bc:	f800283a 	ret
 80059c0:	80c00017 	ldw	r3,0(r16)
 80059c4:	183ff926 	beq	r3,zero,80059ac <__alt_data_end+0xf80059ac>
 80059c8:	88c00015 	stw	r3,0(r17)
 80059cc:	003ff706 	br	80059ac <__alt_data_end+0xf80059ac>

080059d0 <quorem>:
 80059d0:	defff704 	addi	sp,sp,-36
 80059d4:	dc800215 	stw	r18,8(sp)
 80059d8:	20800417 	ldw	r2,16(r4)
 80059dc:	2c800417 	ldw	r18,16(r5)
 80059e0:	dfc00815 	stw	ra,32(sp)
 80059e4:	ddc00715 	stw	r23,28(sp)
 80059e8:	dd800615 	stw	r22,24(sp)
 80059ec:	dd400515 	stw	r21,20(sp)
 80059f0:	dd000415 	stw	r20,16(sp)
 80059f4:	dcc00315 	stw	r19,12(sp)
 80059f8:	dc400115 	stw	r17,4(sp)
 80059fc:	dc000015 	stw	r16,0(sp)
 8005a00:	14807116 	blt	r2,r18,8005bc8 <quorem+0x1f8>
 8005a04:	94bfffc4 	addi	r18,r18,-1
 8005a08:	94ad883a 	add	r22,r18,r18
 8005a0c:	b5ad883a 	add	r22,r22,r22
 8005a10:	2c400504 	addi	r17,r5,20
 8005a14:	8da9883a 	add	r20,r17,r22
 8005a18:	25400504 	addi	r21,r4,20
 8005a1c:	282f883a 	mov	r23,r5
 8005a20:	adad883a 	add	r22,r21,r22
 8005a24:	a1400017 	ldw	r5,0(r20)
 8005a28:	2021883a 	mov	r16,r4
 8005a2c:	b1000017 	ldw	r4,0(r22)
 8005a30:	29400044 	addi	r5,r5,1
 8005a34:	800bd580 	call	800bd58 <__udivsi3>
 8005a38:	1027883a 	mov	r19,r2
 8005a3c:	10002c26 	beq	r2,zero,8005af0 <quorem+0x120>
 8005a40:	a813883a 	mov	r9,r21
 8005a44:	880b883a 	mov	r5,r17
 8005a48:	0009883a 	mov	r4,zero
 8005a4c:	000d883a 	mov	r6,zero
 8005a50:	2a000017 	ldw	r8,0(r5)
 8005a54:	49c00017 	ldw	r7,0(r9)
 8005a58:	29400104 	addi	r5,r5,4
 8005a5c:	40bfffcc 	andi	r2,r8,65535
 8005a60:	14c5383a 	mul	r2,r2,r19
 8005a64:	4010d43a 	srli	r8,r8,16
 8005a68:	38ffffcc 	andi	r3,r7,65535
 8005a6c:	1105883a 	add	r2,r2,r4
 8005a70:	1008d43a 	srli	r4,r2,16
 8005a74:	44d1383a 	mul	r8,r8,r19
 8005a78:	198d883a 	add	r6,r3,r6
 8005a7c:	10ffffcc 	andi	r3,r2,65535
 8005a80:	30c7c83a 	sub	r3,r6,r3
 8005a84:	380ed43a 	srli	r7,r7,16
 8005a88:	4105883a 	add	r2,r8,r4
 8005a8c:	180dd43a 	srai	r6,r3,16
 8005a90:	113fffcc 	andi	r4,r2,65535
 8005a94:	390fc83a 	sub	r7,r7,r4
 8005a98:	398d883a 	add	r6,r7,r6
 8005a9c:	300e943a 	slli	r7,r6,16
 8005aa0:	18ffffcc 	andi	r3,r3,65535
 8005aa4:	1008d43a 	srli	r4,r2,16
 8005aa8:	38ceb03a 	or	r7,r7,r3
 8005aac:	49c00015 	stw	r7,0(r9)
 8005ab0:	300dd43a 	srai	r6,r6,16
 8005ab4:	4a400104 	addi	r9,r9,4
 8005ab8:	a17fe52e 	bgeu	r20,r5,8005a50 <__alt_data_end+0xf8005a50>
 8005abc:	b0800017 	ldw	r2,0(r22)
 8005ac0:	10000b1e 	bne	r2,zero,8005af0 <quorem+0x120>
 8005ac4:	b0bfff04 	addi	r2,r22,-4
 8005ac8:	a880082e 	bgeu	r21,r2,8005aec <quorem+0x11c>
 8005acc:	b0ffff17 	ldw	r3,-4(r22)
 8005ad0:	18000326 	beq	r3,zero,8005ae0 <quorem+0x110>
 8005ad4:	00000506 	br	8005aec <quorem+0x11c>
 8005ad8:	10c00017 	ldw	r3,0(r2)
 8005adc:	1800031e 	bne	r3,zero,8005aec <quorem+0x11c>
 8005ae0:	10bfff04 	addi	r2,r2,-4
 8005ae4:	94bfffc4 	addi	r18,r18,-1
 8005ae8:	a8bffb36 	bltu	r21,r2,8005ad8 <__alt_data_end+0xf8005ad8>
 8005aec:	84800415 	stw	r18,16(r16)
 8005af0:	b80b883a 	mov	r5,r23
 8005af4:	8009883a 	mov	r4,r16
 8005af8:	80085ac0 	call	80085ac <__mcmp>
 8005afc:	10002616 	blt	r2,zero,8005b98 <quorem+0x1c8>
 8005b00:	9cc00044 	addi	r19,r19,1
 8005b04:	a805883a 	mov	r2,r21
 8005b08:	000b883a 	mov	r5,zero
 8005b0c:	11000017 	ldw	r4,0(r2)
 8005b10:	89800017 	ldw	r6,0(r17)
 8005b14:	10800104 	addi	r2,r2,4
 8005b18:	20ffffcc 	andi	r3,r4,65535
 8005b1c:	194b883a 	add	r5,r3,r5
 8005b20:	30ffffcc 	andi	r3,r6,65535
 8005b24:	28c7c83a 	sub	r3,r5,r3
 8005b28:	300cd43a 	srli	r6,r6,16
 8005b2c:	2008d43a 	srli	r4,r4,16
 8005b30:	180bd43a 	srai	r5,r3,16
 8005b34:	18ffffcc 	andi	r3,r3,65535
 8005b38:	2189c83a 	sub	r4,r4,r6
 8005b3c:	2149883a 	add	r4,r4,r5
 8005b40:	200c943a 	slli	r6,r4,16
 8005b44:	8c400104 	addi	r17,r17,4
 8005b48:	200bd43a 	srai	r5,r4,16
 8005b4c:	30c6b03a 	or	r3,r6,r3
 8005b50:	10ffff15 	stw	r3,-4(r2)
 8005b54:	a47fed2e 	bgeu	r20,r17,8005b0c <__alt_data_end+0xf8005b0c>
 8005b58:	9485883a 	add	r2,r18,r18
 8005b5c:	1085883a 	add	r2,r2,r2
 8005b60:	a887883a 	add	r3,r21,r2
 8005b64:	18800017 	ldw	r2,0(r3)
 8005b68:	10000b1e 	bne	r2,zero,8005b98 <quorem+0x1c8>
 8005b6c:	18bfff04 	addi	r2,r3,-4
 8005b70:	a880082e 	bgeu	r21,r2,8005b94 <quorem+0x1c4>
 8005b74:	18ffff17 	ldw	r3,-4(r3)
 8005b78:	18000326 	beq	r3,zero,8005b88 <quorem+0x1b8>
 8005b7c:	00000506 	br	8005b94 <quorem+0x1c4>
 8005b80:	10c00017 	ldw	r3,0(r2)
 8005b84:	1800031e 	bne	r3,zero,8005b94 <quorem+0x1c4>
 8005b88:	10bfff04 	addi	r2,r2,-4
 8005b8c:	94bfffc4 	addi	r18,r18,-1
 8005b90:	a8bffb36 	bltu	r21,r2,8005b80 <__alt_data_end+0xf8005b80>
 8005b94:	84800415 	stw	r18,16(r16)
 8005b98:	9805883a 	mov	r2,r19
 8005b9c:	dfc00817 	ldw	ra,32(sp)
 8005ba0:	ddc00717 	ldw	r23,28(sp)
 8005ba4:	dd800617 	ldw	r22,24(sp)
 8005ba8:	dd400517 	ldw	r21,20(sp)
 8005bac:	dd000417 	ldw	r20,16(sp)
 8005bb0:	dcc00317 	ldw	r19,12(sp)
 8005bb4:	dc800217 	ldw	r18,8(sp)
 8005bb8:	dc400117 	ldw	r17,4(sp)
 8005bbc:	dc000017 	ldw	r16,0(sp)
 8005bc0:	dec00904 	addi	sp,sp,36
 8005bc4:	f800283a 	ret
 8005bc8:	0005883a 	mov	r2,zero
 8005bcc:	003ff306 	br	8005b9c <__alt_data_end+0xf8005b9c>

08005bd0 <_dtoa_r>:
 8005bd0:	20801017 	ldw	r2,64(r4)
 8005bd4:	deffde04 	addi	sp,sp,-136
 8005bd8:	df002015 	stw	fp,128(sp)
 8005bdc:	dcc01b15 	stw	r19,108(sp)
 8005be0:	dc801a15 	stw	r18,104(sp)
 8005be4:	dc401915 	stw	r17,100(sp)
 8005be8:	dc001815 	stw	r16,96(sp)
 8005bec:	dfc02115 	stw	ra,132(sp)
 8005bf0:	ddc01f15 	stw	r23,124(sp)
 8005bf4:	dd801e15 	stw	r22,120(sp)
 8005bf8:	dd401d15 	stw	r21,116(sp)
 8005bfc:	dd001c15 	stw	r20,112(sp)
 8005c00:	d9c00315 	stw	r7,12(sp)
 8005c04:	2039883a 	mov	fp,r4
 8005c08:	3023883a 	mov	r17,r6
 8005c0c:	2825883a 	mov	r18,r5
 8005c10:	dc002417 	ldw	r16,144(sp)
 8005c14:	3027883a 	mov	r19,r6
 8005c18:	10000826 	beq	r2,zero,8005c3c <_dtoa_r+0x6c>
 8005c1c:	21801117 	ldw	r6,68(r4)
 8005c20:	00c00044 	movi	r3,1
 8005c24:	100b883a 	mov	r5,r2
 8005c28:	1986983a 	sll	r3,r3,r6
 8005c2c:	11800115 	stw	r6,4(r2)
 8005c30:	10c00215 	stw	r3,8(r2)
 8005c34:	8007d8c0 	call	8007d8c <_Bfree>
 8005c38:	e0001015 	stw	zero,64(fp)
 8005c3c:	88002e16 	blt	r17,zero,8005cf8 <_dtoa_r+0x128>
 8005c40:	80000015 	stw	zero,0(r16)
 8005c44:	889ffc2c 	andhi	r2,r17,32752
 8005c48:	00dffc34 	movhi	r3,32752
 8005c4c:	10c01c26 	beq	r2,r3,8005cc0 <_dtoa_r+0xf0>
 8005c50:	000d883a 	mov	r6,zero
 8005c54:	000f883a 	mov	r7,zero
 8005c58:	9009883a 	mov	r4,r18
 8005c5c:	980b883a 	mov	r5,r19
 8005c60:	800cfa80 	call	800cfa8 <__eqdf2>
 8005c64:	10002b1e 	bne	r2,zero,8005d14 <_dtoa_r+0x144>
 8005c68:	d9c02317 	ldw	r7,140(sp)
 8005c6c:	00800044 	movi	r2,1
 8005c70:	38800015 	stw	r2,0(r7)
 8005c74:	d8802517 	ldw	r2,148(sp)
 8005c78:	10019e26 	beq	r2,zero,80062f4 <_dtoa_r+0x724>
 8005c7c:	d8c02517 	ldw	r3,148(sp)
 8005c80:	00820074 	movhi	r2,2049
 8005c84:	10975544 	addi	r2,r2,23893
 8005c88:	18800015 	stw	r2,0(r3)
 8005c8c:	10bfffc4 	addi	r2,r2,-1
 8005c90:	dfc02117 	ldw	ra,132(sp)
 8005c94:	df002017 	ldw	fp,128(sp)
 8005c98:	ddc01f17 	ldw	r23,124(sp)
 8005c9c:	dd801e17 	ldw	r22,120(sp)
 8005ca0:	dd401d17 	ldw	r21,116(sp)
 8005ca4:	dd001c17 	ldw	r20,112(sp)
 8005ca8:	dcc01b17 	ldw	r19,108(sp)
 8005cac:	dc801a17 	ldw	r18,104(sp)
 8005cb0:	dc401917 	ldw	r17,100(sp)
 8005cb4:	dc001817 	ldw	r16,96(sp)
 8005cb8:	dec02204 	addi	sp,sp,136
 8005cbc:	f800283a 	ret
 8005cc0:	d8c02317 	ldw	r3,140(sp)
 8005cc4:	0089c3c4 	movi	r2,9999
 8005cc8:	18800015 	stw	r2,0(r3)
 8005ccc:	90017726 	beq	r18,zero,80062ac <_dtoa_r+0x6dc>
 8005cd0:	00820074 	movhi	r2,2049
 8005cd4:	10976104 	addi	r2,r2,23940
 8005cd8:	d9002517 	ldw	r4,148(sp)
 8005cdc:	203fec26 	beq	r4,zero,8005c90 <__alt_data_end+0xf8005c90>
 8005ce0:	10c000c7 	ldb	r3,3(r2)
 8005ce4:	1801781e 	bne	r3,zero,80062c8 <_dtoa_r+0x6f8>
 8005ce8:	10c000c4 	addi	r3,r2,3
 8005cec:	d9802517 	ldw	r6,148(sp)
 8005cf0:	30c00015 	stw	r3,0(r6)
 8005cf4:	003fe606 	br	8005c90 <__alt_data_end+0xf8005c90>
 8005cf8:	04e00034 	movhi	r19,32768
 8005cfc:	9cffffc4 	addi	r19,r19,-1
 8005d00:	00800044 	movi	r2,1
 8005d04:	8ce6703a 	and	r19,r17,r19
 8005d08:	80800015 	stw	r2,0(r16)
 8005d0c:	9823883a 	mov	r17,r19
 8005d10:	003fcc06 	br	8005c44 <__alt_data_end+0xf8005c44>
 8005d14:	d8800204 	addi	r2,sp,8
 8005d18:	d8800015 	stw	r2,0(sp)
 8005d1c:	d9c00104 	addi	r7,sp,4
 8005d20:	900b883a 	mov	r5,r18
 8005d24:	980d883a 	mov	r6,r19
 8005d28:	e009883a 	mov	r4,fp
 8005d2c:	8820d53a 	srli	r16,r17,20
 8005d30:	80089780 	call	8008978 <__d2b>
 8005d34:	d8800915 	stw	r2,36(sp)
 8005d38:	8001651e 	bne	r16,zero,80062d0 <_dtoa_r+0x700>
 8005d3c:	dd800217 	ldw	r22,8(sp)
 8005d40:	dc000117 	ldw	r16,4(sp)
 8005d44:	00800804 	movi	r2,32
 8005d48:	b421883a 	add	r16,r22,r16
 8005d4c:	80c10c84 	addi	r3,r16,1074
 8005d50:	10c2d10e 	bge	r2,r3,8006898 <_dtoa_r+0xcc8>
 8005d54:	00801004 	movi	r2,64
 8005d58:	81010484 	addi	r4,r16,1042
 8005d5c:	10c7c83a 	sub	r3,r2,r3
 8005d60:	9108d83a 	srl	r4,r18,r4
 8005d64:	88e2983a 	sll	r17,r17,r3
 8005d68:	2448b03a 	or	r4,r4,r17
 8005d6c:	800e3700 	call	800e370 <__floatunsidf>
 8005d70:	017f8434 	movhi	r5,65040
 8005d74:	01800044 	movi	r6,1
 8005d78:	1009883a 	mov	r4,r2
 8005d7c:	194b883a 	add	r5,r3,r5
 8005d80:	843fffc4 	addi	r16,r16,-1
 8005d84:	d9801115 	stw	r6,68(sp)
 8005d88:	000d883a 	mov	r6,zero
 8005d8c:	01cffe34 	movhi	r7,16376
 8005d90:	800d9180 	call	800d918 <__subdf3>
 8005d94:	0198dbf4 	movhi	r6,25455
 8005d98:	01cff4f4 	movhi	r7,16339
 8005d9c:	3190d844 	addi	r6,r6,17249
 8005da0:	39e1e9c4 	addi	r7,r7,-30809
 8005da4:	1009883a 	mov	r4,r2
 8005da8:	180b883a 	mov	r5,r3
 8005dac:	800d2000 	call	800d200 <__muldf3>
 8005db0:	01a2d874 	movhi	r6,35681
 8005db4:	01cff1f4 	movhi	r7,16327
 8005db8:	31b22cc4 	addi	r6,r6,-14157
 8005dbc:	39e28a04 	addi	r7,r7,-30168
 8005dc0:	180b883a 	mov	r5,r3
 8005dc4:	1009883a 	mov	r4,r2
 8005dc8:	800be140 	call	800be14 <__adddf3>
 8005dcc:	8009883a 	mov	r4,r16
 8005dd0:	1029883a 	mov	r20,r2
 8005dd4:	1823883a 	mov	r17,r3
 8005dd8:	800e2940 	call	800e294 <__floatsidf>
 8005ddc:	019427f4 	movhi	r6,20639
 8005de0:	01cff4f4 	movhi	r7,16339
 8005de4:	319e7ec4 	addi	r6,r6,31227
 8005de8:	39d104c4 	addi	r7,r7,17427
 8005dec:	1009883a 	mov	r4,r2
 8005df0:	180b883a 	mov	r5,r3
 8005df4:	800d2000 	call	800d200 <__muldf3>
 8005df8:	100d883a 	mov	r6,r2
 8005dfc:	180f883a 	mov	r7,r3
 8005e00:	a009883a 	mov	r4,r20
 8005e04:	880b883a 	mov	r5,r17
 8005e08:	800be140 	call	800be14 <__adddf3>
 8005e0c:	1009883a 	mov	r4,r2
 8005e10:	180b883a 	mov	r5,r3
 8005e14:	1029883a 	mov	r20,r2
 8005e18:	1823883a 	mov	r17,r3
 8005e1c:	800e2140 	call	800e214 <__fixdfsi>
 8005e20:	000d883a 	mov	r6,zero
 8005e24:	000f883a 	mov	r7,zero
 8005e28:	a009883a 	mov	r4,r20
 8005e2c:	880b883a 	mov	r5,r17
 8005e30:	d8800515 	stw	r2,20(sp)
 8005e34:	800d10c0 	call	800d10c <__ledf2>
 8005e38:	10028716 	blt	r2,zero,8006858 <_dtoa_r+0xc88>
 8005e3c:	d8c00517 	ldw	r3,20(sp)
 8005e40:	00800584 	movi	r2,22
 8005e44:	10c27536 	bltu	r2,r3,800681c <_dtoa_r+0xc4c>
 8005e48:	180490fa 	slli	r2,r3,3
 8005e4c:	00c20074 	movhi	r3,2049
 8005e50:	18d77c04 	addi	r3,r3,24048
 8005e54:	1885883a 	add	r2,r3,r2
 8005e58:	11000017 	ldw	r4,0(r2)
 8005e5c:	11400117 	ldw	r5,4(r2)
 8005e60:	900d883a 	mov	r6,r18
 8005e64:	980f883a 	mov	r7,r19
 8005e68:	800d0300 	call	800d030 <__gedf2>
 8005e6c:	00828d0e 	bge	zero,r2,80068a4 <_dtoa_r+0xcd4>
 8005e70:	d9000517 	ldw	r4,20(sp)
 8005e74:	d8000e15 	stw	zero,56(sp)
 8005e78:	213fffc4 	addi	r4,r4,-1
 8005e7c:	d9000515 	stw	r4,20(sp)
 8005e80:	b42dc83a 	sub	r22,r22,r16
 8005e84:	b5bfffc4 	addi	r22,r22,-1
 8005e88:	b0026f16 	blt	r22,zero,8006848 <_dtoa_r+0xc78>
 8005e8c:	d8000815 	stw	zero,32(sp)
 8005e90:	d9c00517 	ldw	r7,20(sp)
 8005e94:	38026416 	blt	r7,zero,8006828 <_dtoa_r+0xc58>
 8005e98:	b1ed883a 	add	r22,r22,r7
 8005e9c:	d9c00d15 	stw	r7,52(sp)
 8005ea0:	d8000a15 	stw	zero,40(sp)
 8005ea4:	d9800317 	ldw	r6,12(sp)
 8005ea8:	00800244 	movi	r2,9
 8005eac:	11811436 	bltu	r2,r6,8006300 <_dtoa_r+0x730>
 8005eb0:	00800144 	movi	r2,5
 8005eb4:	1184e10e 	bge	r2,r6,800723c <_dtoa_r+0x166c>
 8005eb8:	31bfff04 	addi	r6,r6,-4
 8005ebc:	d9800315 	stw	r6,12(sp)
 8005ec0:	0023883a 	mov	r17,zero
 8005ec4:	d9800317 	ldw	r6,12(sp)
 8005ec8:	008000c4 	movi	r2,3
 8005ecc:	30836726 	beq	r6,r2,8006c6c <_dtoa_r+0x109c>
 8005ed0:	1183410e 	bge	r2,r6,8006bd8 <_dtoa_r+0x1008>
 8005ed4:	d9c00317 	ldw	r7,12(sp)
 8005ed8:	00800104 	movi	r2,4
 8005edc:	38827c26 	beq	r7,r2,80068d0 <_dtoa_r+0xd00>
 8005ee0:	00800144 	movi	r2,5
 8005ee4:	3884c41e 	bne	r7,r2,80071f8 <_dtoa_r+0x1628>
 8005ee8:	00800044 	movi	r2,1
 8005eec:	d8800b15 	stw	r2,44(sp)
 8005ef0:	d8c00517 	ldw	r3,20(sp)
 8005ef4:	d9002217 	ldw	r4,136(sp)
 8005ef8:	1907883a 	add	r3,r3,r4
 8005efc:	19800044 	addi	r6,r3,1
 8005f00:	d8c00c15 	stw	r3,48(sp)
 8005f04:	d9800615 	stw	r6,24(sp)
 8005f08:	0183a40e 	bge	zero,r6,8006d9c <_dtoa_r+0x11cc>
 8005f0c:	d9800617 	ldw	r6,24(sp)
 8005f10:	3021883a 	mov	r16,r6
 8005f14:	e0001115 	stw	zero,68(fp)
 8005f18:	008005c4 	movi	r2,23
 8005f1c:	1184c92e 	bgeu	r2,r6,8007244 <_dtoa_r+0x1674>
 8005f20:	00c00044 	movi	r3,1
 8005f24:	00800104 	movi	r2,4
 8005f28:	1085883a 	add	r2,r2,r2
 8005f2c:	11000504 	addi	r4,r2,20
 8005f30:	180b883a 	mov	r5,r3
 8005f34:	18c00044 	addi	r3,r3,1
 8005f38:	313ffb2e 	bgeu	r6,r4,8005f28 <__alt_data_end+0xf8005f28>
 8005f3c:	e1401115 	stw	r5,68(fp)
 8005f40:	e009883a 	mov	r4,fp
 8005f44:	8007ce40 	call	8007ce4 <_Balloc>
 8005f48:	d8800715 	stw	r2,28(sp)
 8005f4c:	e0801015 	stw	r2,64(fp)
 8005f50:	00800384 	movi	r2,14
 8005f54:	1400f736 	bltu	r2,r16,8006334 <_dtoa_r+0x764>
 8005f58:	8800f626 	beq	r17,zero,8006334 <_dtoa_r+0x764>
 8005f5c:	d9c00517 	ldw	r7,20(sp)
 8005f60:	01c39a0e 	bge	zero,r7,8006dcc <_dtoa_r+0x11fc>
 8005f64:	388003cc 	andi	r2,r7,15
 8005f68:	100490fa 	slli	r2,r2,3
 8005f6c:	382bd13a 	srai	r21,r7,4
 8005f70:	00c20074 	movhi	r3,2049
 8005f74:	18d77c04 	addi	r3,r3,24048
 8005f78:	1885883a 	add	r2,r3,r2
 8005f7c:	a8c0040c 	andi	r3,r21,16
 8005f80:	12400017 	ldw	r9,0(r2)
 8005f84:	12000117 	ldw	r8,4(r2)
 8005f88:	18037926 	beq	r3,zero,8006d70 <_dtoa_r+0x11a0>
 8005f8c:	00820074 	movhi	r2,2049
 8005f90:	10977204 	addi	r2,r2,24008
 8005f94:	11800817 	ldw	r6,32(r2)
 8005f98:	11c00917 	ldw	r7,36(r2)
 8005f9c:	9009883a 	mov	r4,r18
 8005fa0:	980b883a 	mov	r5,r19
 8005fa4:	da001715 	stw	r8,92(sp)
 8005fa8:	da401615 	stw	r9,88(sp)
 8005fac:	800c6c00 	call	800c6c0 <__divdf3>
 8005fb0:	da001717 	ldw	r8,92(sp)
 8005fb4:	da401617 	ldw	r9,88(sp)
 8005fb8:	ad4003cc 	andi	r21,r21,15
 8005fbc:	040000c4 	movi	r16,3
 8005fc0:	1023883a 	mov	r17,r2
 8005fc4:	1829883a 	mov	r20,r3
 8005fc8:	a8001126 	beq	r21,zero,8006010 <_dtoa_r+0x440>
 8005fcc:	05c20074 	movhi	r23,2049
 8005fd0:	bdd77204 	addi	r23,r23,24008
 8005fd4:	4805883a 	mov	r2,r9
 8005fd8:	4007883a 	mov	r3,r8
 8005fdc:	a980004c 	andi	r6,r21,1
 8005fe0:	1009883a 	mov	r4,r2
 8005fe4:	a82bd07a 	srai	r21,r21,1
 8005fe8:	180b883a 	mov	r5,r3
 8005fec:	30000426 	beq	r6,zero,8006000 <_dtoa_r+0x430>
 8005ff0:	b9800017 	ldw	r6,0(r23)
 8005ff4:	b9c00117 	ldw	r7,4(r23)
 8005ff8:	84000044 	addi	r16,r16,1
 8005ffc:	800d2000 	call	800d200 <__muldf3>
 8006000:	bdc00204 	addi	r23,r23,8
 8006004:	a83ff51e 	bne	r21,zero,8005fdc <__alt_data_end+0xf8005fdc>
 8006008:	1013883a 	mov	r9,r2
 800600c:	1811883a 	mov	r8,r3
 8006010:	480d883a 	mov	r6,r9
 8006014:	400f883a 	mov	r7,r8
 8006018:	8809883a 	mov	r4,r17
 800601c:	a00b883a 	mov	r5,r20
 8006020:	800c6c00 	call	800c6c0 <__divdf3>
 8006024:	d8800f15 	stw	r2,60(sp)
 8006028:	d8c01015 	stw	r3,64(sp)
 800602c:	d8c00e17 	ldw	r3,56(sp)
 8006030:	18000626 	beq	r3,zero,800604c <_dtoa_r+0x47c>
 8006034:	d9000f17 	ldw	r4,60(sp)
 8006038:	d9401017 	ldw	r5,64(sp)
 800603c:	000d883a 	mov	r6,zero
 8006040:	01cffc34 	movhi	r7,16368
 8006044:	800d10c0 	call	800d10c <__ledf2>
 8006048:	10040b16 	blt	r2,zero,8007078 <_dtoa_r+0x14a8>
 800604c:	8009883a 	mov	r4,r16
 8006050:	800e2940 	call	800e294 <__floatsidf>
 8006054:	d9800f17 	ldw	r6,60(sp)
 8006058:	d9c01017 	ldw	r7,64(sp)
 800605c:	1009883a 	mov	r4,r2
 8006060:	180b883a 	mov	r5,r3
 8006064:	800d2000 	call	800d200 <__muldf3>
 8006068:	000d883a 	mov	r6,zero
 800606c:	01d00734 	movhi	r7,16412
 8006070:	1009883a 	mov	r4,r2
 8006074:	180b883a 	mov	r5,r3
 8006078:	800be140 	call	800be14 <__adddf3>
 800607c:	1021883a 	mov	r16,r2
 8006080:	d8800617 	ldw	r2,24(sp)
 8006084:	047f3034 	movhi	r17,64704
 8006088:	1c63883a 	add	r17,r3,r17
 800608c:	10031826 	beq	r2,zero,8006cf0 <_dtoa_r+0x1120>
 8006090:	d8c00517 	ldw	r3,20(sp)
 8006094:	db000617 	ldw	r12,24(sp)
 8006098:	d8c01315 	stw	r3,76(sp)
 800609c:	d9000b17 	ldw	r4,44(sp)
 80060a0:	20038f26 	beq	r4,zero,8006ee0 <_dtoa_r+0x1310>
 80060a4:	60bfffc4 	addi	r2,r12,-1
 80060a8:	100490fa 	slli	r2,r2,3
 80060ac:	00c20074 	movhi	r3,2049
 80060b0:	18d77c04 	addi	r3,r3,24048
 80060b4:	1885883a 	add	r2,r3,r2
 80060b8:	11800017 	ldw	r6,0(r2)
 80060bc:	11c00117 	ldw	r7,4(r2)
 80060c0:	d8800717 	ldw	r2,28(sp)
 80060c4:	0009883a 	mov	r4,zero
 80060c8:	014ff834 	movhi	r5,16352
 80060cc:	db001615 	stw	r12,88(sp)
 80060d0:	15c00044 	addi	r23,r2,1
 80060d4:	800c6c00 	call	800c6c0 <__divdf3>
 80060d8:	800d883a 	mov	r6,r16
 80060dc:	880f883a 	mov	r7,r17
 80060e0:	1009883a 	mov	r4,r2
 80060e4:	180b883a 	mov	r5,r3
 80060e8:	800d9180 	call	800d918 <__subdf3>
 80060ec:	d9401017 	ldw	r5,64(sp)
 80060f0:	d9000f17 	ldw	r4,60(sp)
 80060f4:	102b883a 	mov	r21,r2
 80060f8:	d8c01215 	stw	r3,72(sp)
 80060fc:	800e2140 	call	800e214 <__fixdfsi>
 8006100:	1009883a 	mov	r4,r2
 8006104:	1029883a 	mov	r20,r2
 8006108:	800e2940 	call	800e294 <__floatsidf>
 800610c:	d9000f17 	ldw	r4,60(sp)
 8006110:	d9401017 	ldw	r5,64(sp)
 8006114:	100d883a 	mov	r6,r2
 8006118:	180f883a 	mov	r7,r3
 800611c:	800d9180 	call	800d918 <__subdf3>
 8006120:	1823883a 	mov	r17,r3
 8006124:	d8c00717 	ldw	r3,28(sp)
 8006128:	d9401217 	ldw	r5,72(sp)
 800612c:	a2000c04 	addi	r8,r20,48
 8006130:	1021883a 	mov	r16,r2
 8006134:	1a000005 	stb	r8,0(r3)
 8006138:	800d883a 	mov	r6,r16
 800613c:	880f883a 	mov	r7,r17
 8006140:	a809883a 	mov	r4,r21
 8006144:	4029883a 	mov	r20,r8
 8006148:	800d0300 	call	800d030 <__gedf2>
 800614c:	00841d16 	blt	zero,r2,80071c4 <_dtoa_r+0x15f4>
 8006150:	800d883a 	mov	r6,r16
 8006154:	880f883a 	mov	r7,r17
 8006158:	0009883a 	mov	r4,zero
 800615c:	014ffc34 	movhi	r5,16368
 8006160:	800d9180 	call	800d918 <__subdf3>
 8006164:	d9401217 	ldw	r5,72(sp)
 8006168:	100d883a 	mov	r6,r2
 800616c:	180f883a 	mov	r7,r3
 8006170:	a809883a 	mov	r4,r21
 8006174:	800d0300 	call	800d030 <__gedf2>
 8006178:	db001617 	ldw	r12,88(sp)
 800617c:	00840e16 	blt	zero,r2,80071b8 <_dtoa_r+0x15e8>
 8006180:	00800044 	movi	r2,1
 8006184:	13006b0e 	bge	r2,r12,8006334 <_dtoa_r+0x764>
 8006188:	d9000717 	ldw	r4,28(sp)
 800618c:	dd800f15 	stw	r22,60(sp)
 8006190:	dcc01015 	stw	r19,64(sp)
 8006194:	2319883a 	add	r12,r4,r12
 8006198:	dcc01217 	ldw	r19,72(sp)
 800619c:	602d883a 	mov	r22,r12
 80061a0:	dc801215 	stw	r18,72(sp)
 80061a4:	b825883a 	mov	r18,r23
 80061a8:	00000906 	br	80061d0 <_dtoa_r+0x600>
 80061ac:	800d9180 	call	800d918 <__subdf3>
 80061b0:	a80d883a 	mov	r6,r21
 80061b4:	980f883a 	mov	r7,r19
 80061b8:	1009883a 	mov	r4,r2
 80061bc:	180b883a 	mov	r5,r3
 80061c0:	800d10c0 	call	800d10c <__ledf2>
 80061c4:	1003e816 	blt	r2,zero,8007168 <_dtoa_r+0x1598>
 80061c8:	b825883a 	mov	r18,r23
 80061cc:	bd83e926 	beq	r23,r22,8007174 <_dtoa_r+0x15a4>
 80061d0:	a809883a 	mov	r4,r21
 80061d4:	980b883a 	mov	r5,r19
 80061d8:	000d883a 	mov	r6,zero
 80061dc:	01d00934 	movhi	r7,16420
 80061e0:	800d2000 	call	800d200 <__muldf3>
 80061e4:	000d883a 	mov	r6,zero
 80061e8:	01d00934 	movhi	r7,16420
 80061ec:	8009883a 	mov	r4,r16
 80061f0:	880b883a 	mov	r5,r17
 80061f4:	102b883a 	mov	r21,r2
 80061f8:	1827883a 	mov	r19,r3
 80061fc:	800d2000 	call	800d200 <__muldf3>
 8006200:	180b883a 	mov	r5,r3
 8006204:	1009883a 	mov	r4,r2
 8006208:	1821883a 	mov	r16,r3
 800620c:	1023883a 	mov	r17,r2
 8006210:	800e2140 	call	800e214 <__fixdfsi>
 8006214:	1009883a 	mov	r4,r2
 8006218:	1029883a 	mov	r20,r2
 800621c:	800e2940 	call	800e294 <__floatsidf>
 8006220:	8809883a 	mov	r4,r17
 8006224:	800b883a 	mov	r5,r16
 8006228:	100d883a 	mov	r6,r2
 800622c:	180f883a 	mov	r7,r3
 8006230:	800d9180 	call	800d918 <__subdf3>
 8006234:	a5000c04 	addi	r20,r20,48
 8006238:	a80d883a 	mov	r6,r21
 800623c:	980f883a 	mov	r7,r19
 8006240:	1009883a 	mov	r4,r2
 8006244:	180b883a 	mov	r5,r3
 8006248:	95000005 	stb	r20,0(r18)
 800624c:	1021883a 	mov	r16,r2
 8006250:	1823883a 	mov	r17,r3
 8006254:	800d10c0 	call	800d10c <__ledf2>
 8006258:	bdc00044 	addi	r23,r23,1
 800625c:	800d883a 	mov	r6,r16
 8006260:	880f883a 	mov	r7,r17
 8006264:	0009883a 	mov	r4,zero
 8006268:	014ffc34 	movhi	r5,16368
 800626c:	103fcf0e 	bge	r2,zero,80061ac <__alt_data_end+0xf80061ac>
 8006270:	d8c01317 	ldw	r3,76(sp)
 8006274:	d8c00515 	stw	r3,20(sp)
 8006278:	d9400917 	ldw	r5,36(sp)
 800627c:	e009883a 	mov	r4,fp
 8006280:	8007d8c0 	call	8007d8c <_Bfree>
 8006284:	d9000517 	ldw	r4,20(sp)
 8006288:	d9802317 	ldw	r6,140(sp)
 800628c:	d9c02517 	ldw	r7,148(sp)
 8006290:	b8000005 	stb	zero,0(r23)
 8006294:	20800044 	addi	r2,r4,1
 8006298:	30800015 	stw	r2,0(r6)
 800629c:	3802aa26 	beq	r7,zero,8006d48 <_dtoa_r+0x1178>
 80062a0:	3dc00015 	stw	r23,0(r7)
 80062a4:	d8800717 	ldw	r2,28(sp)
 80062a8:	003e7906 	br	8005c90 <__alt_data_end+0xf8005c90>
 80062ac:	00800434 	movhi	r2,16
 80062b0:	10bfffc4 	addi	r2,r2,-1
 80062b4:	88a2703a 	and	r17,r17,r2
 80062b8:	883e851e 	bne	r17,zero,8005cd0 <__alt_data_end+0xf8005cd0>
 80062bc:	00820074 	movhi	r2,2049
 80062c0:	10975e04 	addi	r2,r2,23928
 80062c4:	003e8406 	br	8005cd8 <__alt_data_end+0xf8005cd8>
 80062c8:	10c00204 	addi	r3,r2,8
 80062cc:	003e8706 	br	8005cec <__alt_data_end+0xf8005cec>
 80062d0:	01400434 	movhi	r5,16
 80062d4:	297fffc4 	addi	r5,r5,-1
 80062d8:	994a703a 	and	r5,r19,r5
 80062dc:	9009883a 	mov	r4,r18
 80062e0:	843f0044 	addi	r16,r16,-1023
 80062e4:	294ffc34 	orhi	r5,r5,16368
 80062e8:	dd800217 	ldw	r22,8(sp)
 80062ec:	d8001115 	stw	zero,68(sp)
 80062f0:	003ea506 	br	8005d88 <__alt_data_end+0xf8005d88>
 80062f4:	00820074 	movhi	r2,2049
 80062f8:	10975504 	addi	r2,r2,23892
 80062fc:	003e6406 	br	8005c90 <__alt_data_end+0xf8005c90>
 8006300:	e0001115 	stw	zero,68(fp)
 8006304:	000b883a 	mov	r5,zero
 8006308:	e009883a 	mov	r4,fp
 800630c:	8007ce40 	call	8007ce4 <_Balloc>
 8006310:	01bfffc4 	movi	r6,-1
 8006314:	01c00044 	movi	r7,1
 8006318:	d8800715 	stw	r2,28(sp)
 800631c:	d9800c15 	stw	r6,48(sp)
 8006320:	e0801015 	stw	r2,64(fp)
 8006324:	d8000315 	stw	zero,12(sp)
 8006328:	d9c00b15 	stw	r7,44(sp)
 800632c:	d9800615 	stw	r6,24(sp)
 8006330:	d8002215 	stw	zero,136(sp)
 8006334:	d8800117 	ldw	r2,4(sp)
 8006338:	10008916 	blt	r2,zero,8006560 <_dtoa_r+0x990>
 800633c:	d9000517 	ldw	r4,20(sp)
 8006340:	00c00384 	movi	r3,14
 8006344:	19008616 	blt	r3,r4,8006560 <_dtoa_r+0x990>
 8006348:	200490fa 	slli	r2,r4,3
 800634c:	00c20074 	movhi	r3,2049
 8006350:	d9802217 	ldw	r6,136(sp)
 8006354:	18d77c04 	addi	r3,r3,24048
 8006358:	1885883a 	add	r2,r3,r2
 800635c:	14000017 	ldw	r16,0(r2)
 8006360:	14400117 	ldw	r17,4(r2)
 8006364:	30016316 	blt	r6,zero,80068f4 <_dtoa_r+0xd24>
 8006368:	800d883a 	mov	r6,r16
 800636c:	880f883a 	mov	r7,r17
 8006370:	9009883a 	mov	r4,r18
 8006374:	980b883a 	mov	r5,r19
 8006378:	800c6c00 	call	800c6c0 <__divdf3>
 800637c:	180b883a 	mov	r5,r3
 8006380:	1009883a 	mov	r4,r2
 8006384:	800e2140 	call	800e214 <__fixdfsi>
 8006388:	1009883a 	mov	r4,r2
 800638c:	102b883a 	mov	r21,r2
 8006390:	800e2940 	call	800e294 <__floatsidf>
 8006394:	800d883a 	mov	r6,r16
 8006398:	880f883a 	mov	r7,r17
 800639c:	1009883a 	mov	r4,r2
 80063a0:	180b883a 	mov	r5,r3
 80063a4:	800d2000 	call	800d200 <__muldf3>
 80063a8:	100d883a 	mov	r6,r2
 80063ac:	180f883a 	mov	r7,r3
 80063b0:	9009883a 	mov	r4,r18
 80063b4:	980b883a 	mov	r5,r19
 80063b8:	800d9180 	call	800d918 <__subdf3>
 80063bc:	d9c00717 	ldw	r7,28(sp)
 80063c0:	1009883a 	mov	r4,r2
 80063c4:	a8800c04 	addi	r2,r21,48
 80063c8:	38800005 	stb	r2,0(r7)
 80063cc:	3dc00044 	addi	r23,r7,1
 80063d0:	d9c00617 	ldw	r7,24(sp)
 80063d4:	01800044 	movi	r6,1
 80063d8:	180b883a 	mov	r5,r3
 80063dc:	2005883a 	mov	r2,r4
 80063e0:	39803826 	beq	r7,r6,80064c4 <_dtoa_r+0x8f4>
 80063e4:	000d883a 	mov	r6,zero
 80063e8:	01d00934 	movhi	r7,16420
 80063ec:	800d2000 	call	800d200 <__muldf3>
 80063f0:	000d883a 	mov	r6,zero
 80063f4:	000f883a 	mov	r7,zero
 80063f8:	1009883a 	mov	r4,r2
 80063fc:	180b883a 	mov	r5,r3
 8006400:	1025883a 	mov	r18,r2
 8006404:	1827883a 	mov	r19,r3
 8006408:	800cfa80 	call	800cfa8 <__eqdf2>
 800640c:	103f9a26 	beq	r2,zero,8006278 <__alt_data_end+0xf8006278>
 8006410:	d9c00617 	ldw	r7,24(sp)
 8006414:	d8c00717 	ldw	r3,28(sp)
 8006418:	b829883a 	mov	r20,r23
 800641c:	38bfffc4 	addi	r2,r7,-1
 8006420:	18ad883a 	add	r22,r3,r2
 8006424:	00000a06 	br	8006450 <_dtoa_r+0x880>
 8006428:	800d2000 	call	800d200 <__muldf3>
 800642c:	000d883a 	mov	r6,zero
 8006430:	000f883a 	mov	r7,zero
 8006434:	1009883a 	mov	r4,r2
 8006438:	180b883a 	mov	r5,r3
 800643c:	1025883a 	mov	r18,r2
 8006440:	1827883a 	mov	r19,r3
 8006444:	b829883a 	mov	r20,r23
 8006448:	800cfa80 	call	800cfa8 <__eqdf2>
 800644c:	103f8a26 	beq	r2,zero,8006278 <__alt_data_end+0xf8006278>
 8006450:	800d883a 	mov	r6,r16
 8006454:	880f883a 	mov	r7,r17
 8006458:	9009883a 	mov	r4,r18
 800645c:	980b883a 	mov	r5,r19
 8006460:	800c6c00 	call	800c6c0 <__divdf3>
 8006464:	180b883a 	mov	r5,r3
 8006468:	1009883a 	mov	r4,r2
 800646c:	800e2140 	call	800e214 <__fixdfsi>
 8006470:	1009883a 	mov	r4,r2
 8006474:	102b883a 	mov	r21,r2
 8006478:	800e2940 	call	800e294 <__floatsidf>
 800647c:	800d883a 	mov	r6,r16
 8006480:	880f883a 	mov	r7,r17
 8006484:	1009883a 	mov	r4,r2
 8006488:	180b883a 	mov	r5,r3
 800648c:	800d2000 	call	800d200 <__muldf3>
 8006490:	100d883a 	mov	r6,r2
 8006494:	180f883a 	mov	r7,r3
 8006498:	9009883a 	mov	r4,r18
 800649c:	980b883a 	mov	r5,r19
 80064a0:	800d9180 	call	800d918 <__subdf3>
 80064a4:	aa000c04 	addi	r8,r21,48
 80064a8:	a2000005 	stb	r8,0(r20)
 80064ac:	000d883a 	mov	r6,zero
 80064b0:	01d00934 	movhi	r7,16420
 80064b4:	1009883a 	mov	r4,r2
 80064b8:	180b883a 	mov	r5,r3
 80064bc:	a5c00044 	addi	r23,r20,1
 80064c0:	b53fd91e 	bne	r22,r20,8006428 <__alt_data_end+0xf8006428>
 80064c4:	100d883a 	mov	r6,r2
 80064c8:	180f883a 	mov	r7,r3
 80064cc:	1009883a 	mov	r4,r2
 80064d0:	180b883a 	mov	r5,r3
 80064d4:	800be140 	call	800be14 <__adddf3>
 80064d8:	100d883a 	mov	r6,r2
 80064dc:	180f883a 	mov	r7,r3
 80064e0:	8009883a 	mov	r4,r16
 80064e4:	880b883a 	mov	r5,r17
 80064e8:	1027883a 	mov	r19,r2
 80064ec:	1825883a 	mov	r18,r3
 80064f0:	800d10c0 	call	800d10c <__ledf2>
 80064f4:	10000816 	blt	r2,zero,8006518 <_dtoa_r+0x948>
 80064f8:	980d883a 	mov	r6,r19
 80064fc:	900f883a 	mov	r7,r18
 8006500:	8009883a 	mov	r4,r16
 8006504:	880b883a 	mov	r5,r17
 8006508:	800cfa80 	call	800cfa8 <__eqdf2>
 800650c:	103f5a1e 	bne	r2,zero,8006278 <__alt_data_end+0xf8006278>
 8006510:	ad40004c 	andi	r21,r21,1
 8006514:	a83f5826 	beq	r21,zero,8006278 <__alt_data_end+0xf8006278>
 8006518:	bd3fffc3 	ldbu	r20,-1(r23)
 800651c:	b8bfffc4 	addi	r2,r23,-1
 8006520:	1007883a 	mov	r3,r2
 8006524:	01400e44 	movi	r5,57
 8006528:	d9800717 	ldw	r6,28(sp)
 800652c:	00000506 	br	8006544 <_dtoa_r+0x974>
 8006530:	18ffffc4 	addi	r3,r3,-1
 8006534:	11824726 	beq	r2,r6,8006e54 <_dtoa_r+0x1284>
 8006538:	1d000003 	ldbu	r20,0(r3)
 800653c:	102f883a 	mov	r23,r2
 8006540:	10bfffc4 	addi	r2,r2,-1
 8006544:	a1003fcc 	andi	r4,r20,255
 8006548:	2100201c 	xori	r4,r4,128
 800654c:	213fe004 	addi	r4,r4,-128
 8006550:	217ff726 	beq	r4,r5,8006530 <__alt_data_end+0xf8006530>
 8006554:	a2000044 	addi	r8,r20,1
 8006558:	12000005 	stb	r8,0(r2)
 800655c:	003f4606 	br	8006278 <__alt_data_end+0xf8006278>
 8006560:	d9000b17 	ldw	r4,44(sp)
 8006564:	2000c826 	beq	r4,zero,8006888 <_dtoa_r+0xcb8>
 8006568:	d9800317 	ldw	r6,12(sp)
 800656c:	00c00044 	movi	r3,1
 8006570:	1980f90e 	bge	r3,r6,8006958 <_dtoa_r+0xd88>
 8006574:	d8800617 	ldw	r2,24(sp)
 8006578:	d8c00a17 	ldw	r3,40(sp)
 800657c:	157fffc4 	addi	r21,r2,-1
 8006580:	1d41f316 	blt	r3,r21,8006d50 <_dtoa_r+0x1180>
 8006584:	1d6bc83a 	sub	r21,r3,r21
 8006588:	d9c00617 	ldw	r7,24(sp)
 800658c:	3802aa16 	blt	r7,zero,8007038 <_dtoa_r+0x1468>
 8006590:	dd000817 	ldw	r20,32(sp)
 8006594:	d8800617 	ldw	r2,24(sp)
 8006598:	d8c00817 	ldw	r3,32(sp)
 800659c:	01400044 	movi	r5,1
 80065a0:	e009883a 	mov	r4,fp
 80065a4:	1887883a 	add	r3,r3,r2
 80065a8:	d8c00815 	stw	r3,32(sp)
 80065ac:	b0ad883a 	add	r22,r22,r2
 80065b0:	80080f00 	call	80080f0 <__i2b>
 80065b4:	1023883a 	mov	r17,r2
 80065b8:	a0000826 	beq	r20,zero,80065dc <_dtoa_r+0xa0c>
 80065bc:	0580070e 	bge	zero,r22,80065dc <_dtoa_r+0xa0c>
 80065c0:	a005883a 	mov	r2,r20
 80065c4:	b500b916 	blt	r22,r20,80068ac <_dtoa_r+0xcdc>
 80065c8:	d9000817 	ldw	r4,32(sp)
 80065cc:	a0a9c83a 	sub	r20,r20,r2
 80065d0:	b0adc83a 	sub	r22,r22,r2
 80065d4:	2089c83a 	sub	r4,r4,r2
 80065d8:	d9000815 	stw	r4,32(sp)
 80065dc:	d9800a17 	ldw	r6,40(sp)
 80065e0:	0181810e 	bge	zero,r6,8006be8 <_dtoa_r+0x1018>
 80065e4:	d9c00b17 	ldw	r7,44(sp)
 80065e8:	3800b326 	beq	r7,zero,80068b8 <_dtoa_r+0xce8>
 80065ec:	a800b226 	beq	r21,zero,80068b8 <_dtoa_r+0xce8>
 80065f0:	880b883a 	mov	r5,r17
 80065f4:	a80d883a 	mov	r6,r21
 80065f8:	e009883a 	mov	r4,fp
 80065fc:	80083240 	call	8008324 <__pow5mult>
 8006600:	d9800917 	ldw	r6,36(sp)
 8006604:	100b883a 	mov	r5,r2
 8006608:	e009883a 	mov	r4,fp
 800660c:	1023883a 	mov	r17,r2
 8006610:	800812c0 	call	800812c <__multiply>
 8006614:	1021883a 	mov	r16,r2
 8006618:	d8800a17 	ldw	r2,40(sp)
 800661c:	d9400917 	ldw	r5,36(sp)
 8006620:	e009883a 	mov	r4,fp
 8006624:	1545c83a 	sub	r2,r2,r21
 8006628:	d8800a15 	stw	r2,40(sp)
 800662c:	8007d8c0 	call	8007d8c <_Bfree>
 8006630:	d8c00a17 	ldw	r3,40(sp)
 8006634:	18009f1e 	bne	r3,zero,80068b4 <_dtoa_r+0xce4>
 8006638:	05c00044 	movi	r23,1
 800663c:	e009883a 	mov	r4,fp
 8006640:	b80b883a 	mov	r5,r23
 8006644:	80080f00 	call	80080f0 <__i2b>
 8006648:	d9000d17 	ldw	r4,52(sp)
 800664c:	102b883a 	mov	r21,r2
 8006650:	2000ce26 	beq	r4,zero,800698c <_dtoa_r+0xdbc>
 8006654:	200d883a 	mov	r6,r4
 8006658:	100b883a 	mov	r5,r2
 800665c:	e009883a 	mov	r4,fp
 8006660:	80083240 	call	8008324 <__pow5mult>
 8006664:	d9800317 	ldw	r6,12(sp)
 8006668:	102b883a 	mov	r21,r2
 800666c:	b981810e 	bge	r23,r6,8006c74 <_dtoa_r+0x10a4>
 8006670:	0027883a 	mov	r19,zero
 8006674:	a8800417 	ldw	r2,16(r21)
 8006678:	05c00804 	movi	r23,32
 800667c:	10800104 	addi	r2,r2,4
 8006680:	1085883a 	add	r2,r2,r2
 8006684:	1085883a 	add	r2,r2,r2
 8006688:	a885883a 	add	r2,r21,r2
 800668c:	11000017 	ldw	r4,0(r2)
 8006690:	8007fd80 	call	8007fd8 <__hi0bits>
 8006694:	b885c83a 	sub	r2,r23,r2
 8006698:	1585883a 	add	r2,r2,r22
 800669c:	108007cc 	andi	r2,r2,31
 80066a0:	1000b326 	beq	r2,zero,8006970 <_dtoa_r+0xda0>
 80066a4:	00c00804 	movi	r3,32
 80066a8:	1887c83a 	sub	r3,r3,r2
 80066ac:	01000104 	movi	r4,4
 80066b0:	20c2cd0e 	bge	r4,r3,80071e8 <_dtoa_r+0x1618>
 80066b4:	00c00704 	movi	r3,28
 80066b8:	1885c83a 	sub	r2,r3,r2
 80066bc:	d8c00817 	ldw	r3,32(sp)
 80066c0:	a0a9883a 	add	r20,r20,r2
 80066c4:	b0ad883a 	add	r22,r22,r2
 80066c8:	1887883a 	add	r3,r3,r2
 80066cc:	d8c00815 	stw	r3,32(sp)
 80066d0:	d9800817 	ldw	r6,32(sp)
 80066d4:	0180040e 	bge	zero,r6,80066e8 <_dtoa_r+0xb18>
 80066d8:	800b883a 	mov	r5,r16
 80066dc:	e009883a 	mov	r4,fp
 80066e0:	80084640 	call	8008464 <__lshift>
 80066e4:	1021883a 	mov	r16,r2
 80066e8:	0580050e 	bge	zero,r22,8006700 <_dtoa_r+0xb30>
 80066ec:	a80b883a 	mov	r5,r21
 80066f0:	b00d883a 	mov	r6,r22
 80066f4:	e009883a 	mov	r4,fp
 80066f8:	80084640 	call	8008464 <__lshift>
 80066fc:	102b883a 	mov	r21,r2
 8006700:	d9c00e17 	ldw	r7,56(sp)
 8006704:	3801211e 	bne	r7,zero,8006b8c <_dtoa_r+0xfbc>
 8006708:	d9800617 	ldw	r6,24(sp)
 800670c:	0181380e 	bge	zero,r6,8006bf0 <_dtoa_r+0x1020>
 8006710:	d8c00b17 	ldw	r3,44(sp)
 8006714:	1800ab1e 	bne	r3,zero,80069c4 <_dtoa_r+0xdf4>
 8006718:	dc800717 	ldw	r18,28(sp)
 800671c:	dcc00617 	ldw	r19,24(sp)
 8006720:	9029883a 	mov	r20,r18
 8006724:	00000206 	br	8006730 <_dtoa_r+0xb60>
 8006728:	8007db40 	call	8007db4 <__multadd>
 800672c:	1021883a 	mov	r16,r2
 8006730:	a80b883a 	mov	r5,r21
 8006734:	8009883a 	mov	r4,r16
 8006738:	80059d00 	call	80059d0 <quorem>
 800673c:	10800c04 	addi	r2,r2,48
 8006740:	90800005 	stb	r2,0(r18)
 8006744:	94800044 	addi	r18,r18,1
 8006748:	9507c83a 	sub	r3,r18,r20
 800674c:	000f883a 	mov	r7,zero
 8006750:	01800284 	movi	r6,10
 8006754:	800b883a 	mov	r5,r16
 8006758:	e009883a 	mov	r4,fp
 800675c:	1cfff216 	blt	r3,r19,8006728 <__alt_data_end+0xf8006728>
 8006760:	1011883a 	mov	r8,r2
 8006764:	d8800617 	ldw	r2,24(sp)
 8006768:	0082370e 	bge	zero,r2,8007048 <_dtoa_r+0x1478>
 800676c:	d9000717 	ldw	r4,28(sp)
 8006770:	0025883a 	mov	r18,zero
 8006774:	20af883a 	add	r23,r4,r2
 8006778:	01800044 	movi	r6,1
 800677c:	800b883a 	mov	r5,r16
 8006780:	e009883a 	mov	r4,fp
 8006784:	da001715 	stw	r8,92(sp)
 8006788:	80084640 	call	8008464 <__lshift>
 800678c:	a80b883a 	mov	r5,r21
 8006790:	1009883a 	mov	r4,r2
 8006794:	d8800915 	stw	r2,36(sp)
 8006798:	80085ac0 	call	80085ac <__mcmp>
 800679c:	da001717 	ldw	r8,92(sp)
 80067a0:	0081800e 	bge	zero,r2,8006da4 <_dtoa_r+0x11d4>
 80067a4:	b93fffc3 	ldbu	r4,-1(r23)
 80067a8:	b8bfffc4 	addi	r2,r23,-1
 80067ac:	1007883a 	mov	r3,r2
 80067b0:	01800e44 	movi	r6,57
 80067b4:	d9c00717 	ldw	r7,28(sp)
 80067b8:	00000506 	br	80067d0 <_dtoa_r+0xc00>
 80067bc:	18ffffc4 	addi	r3,r3,-1
 80067c0:	11c12326 	beq	r2,r7,8006c50 <_dtoa_r+0x1080>
 80067c4:	19000003 	ldbu	r4,0(r3)
 80067c8:	102f883a 	mov	r23,r2
 80067cc:	10bfffc4 	addi	r2,r2,-1
 80067d0:	21403fcc 	andi	r5,r4,255
 80067d4:	2940201c 	xori	r5,r5,128
 80067d8:	297fe004 	addi	r5,r5,-128
 80067dc:	29bff726 	beq	r5,r6,80067bc <__alt_data_end+0xf80067bc>
 80067e0:	21000044 	addi	r4,r4,1
 80067e4:	11000005 	stb	r4,0(r2)
 80067e8:	a80b883a 	mov	r5,r21
 80067ec:	e009883a 	mov	r4,fp
 80067f0:	8007d8c0 	call	8007d8c <_Bfree>
 80067f4:	883ea026 	beq	r17,zero,8006278 <__alt_data_end+0xf8006278>
 80067f8:	90000426 	beq	r18,zero,800680c <_dtoa_r+0xc3c>
 80067fc:	94400326 	beq	r18,r17,800680c <_dtoa_r+0xc3c>
 8006800:	900b883a 	mov	r5,r18
 8006804:	e009883a 	mov	r4,fp
 8006808:	8007d8c0 	call	8007d8c <_Bfree>
 800680c:	880b883a 	mov	r5,r17
 8006810:	e009883a 	mov	r4,fp
 8006814:	8007d8c0 	call	8007d8c <_Bfree>
 8006818:	003e9706 	br	8006278 <__alt_data_end+0xf8006278>
 800681c:	01800044 	movi	r6,1
 8006820:	d9800e15 	stw	r6,56(sp)
 8006824:	003d9606 	br	8005e80 <__alt_data_end+0xf8005e80>
 8006828:	d8800817 	ldw	r2,32(sp)
 800682c:	d8c00517 	ldw	r3,20(sp)
 8006830:	d8000d15 	stw	zero,52(sp)
 8006834:	10c5c83a 	sub	r2,r2,r3
 8006838:	00c9c83a 	sub	r4,zero,r3
 800683c:	d8800815 	stw	r2,32(sp)
 8006840:	d9000a15 	stw	r4,40(sp)
 8006844:	003d9706 	br	8005ea4 <__alt_data_end+0xf8005ea4>
 8006848:	05adc83a 	sub	r22,zero,r22
 800684c:	dd800815 	stw	r22,32(sp)
 8006850:	002d883a 	mov	r22,zero
 8006854:	003d8e06 	br	8005e90 <__alt_data_end+0xf8005e90>
 8006858:	d9000517 	ldw	r4,20(sp)
 800685c:	800e2940 	call	800e294 <__floatsidf>
 8006860:	100d883a 	mov	r6,r2
 8006864:	180f883a 	mov	r7,r3
 8006868:	a009883a 	mov	r4,r20
 800686c:	880b883a 	mov	r5,r17
 8006870:	800cfa80 	call	800cfa8 <__eqdf2>
 8006874:	103d7126 	beq	r2,zero,8005e3c <__alt_data_end+0xf8005e3c>
 8006878:	d9c00517 	ldw	r7,20(sp)
 800687c:	39ffffc4 	addi	r7,r7,-1
 8006880:	d9c00515 	stw	r7,20(sp)
 8006884:	003d6d06 	br	8005e3c <__alt_data_end+0xf8005e3c>
 8006888:	dd400a17 	ldw	r21,40(sp)
 800688c:	dd000817 	ldw	r20,32(sp)
 8006890:	0023883a 	mov	r17,zero
 8006894:	003f4806 	br	80065b8 <__alt_data_end+0xf80065b8>
 8006898:	10e3c83a 	sub	r17,r2,r3
 800689c:	9448983a 	sll	r4,r18,r17
 80068a0:	003d3206 	br	8005d6c <__alt_data_end+0xf8005d6c>
 80068a4:	d8000e15 	stw	zero,56(sp)
 80068a8:	003d7506 	br	8005e80 <__alt_data_end+0xf8005e80>
 80068ac:	b005883a 	mov	r2,r22
 80068b0:	003f4506 	br	80065c8 <__alt_data_end+0xf80065c8>
 80068b4:	dc000915 	stw	r16,36(sp)
 80068b8:	d9800a17 	ldw	r6,40(sp)
 80068bc:	d9400917 	ldw	r5,36(sp)
 80068c0:	e009883a 	mov	r4,fp
 80068c4:	80083240 	call	8008324 <__pow5mult>
 80068c8:	1021883a 	mov	r16,r2
 80068cc:	003f5a06 	br	8006638 <__alt_data_end+0xf8006638>
 80068d0:	01c00044 	movi	r7,1
 80068d4:	d9c00b15 	stw	r7,44(sp)
 80068d8:	d8802217 	ldw	r2,136(sp)
 80068dc:	0081280e 	bge	zero,r2,8006d80 <_dtoa_r+0x11b0>
 80068e0:	100d883a 	mov	r6,r2
 80068e4:	1021883a 	mov	r16,r2
 80068e8:	d8800c15 	stw	r2,48(sp)
 80068ec:	d8800615 	stw	r2,24(sp)
 80068f0:	003d8806 	br	8005f14 <__alt_data_end+0xf8005f14>
 80068f4:	d8800617 	ldw	r2,24(sp)
 80068f8:	00be9b16 	blt	zero,r2,8006368 <__alt_data_end+0xf8006368>
 80068fc:	10010f1e 	bne	r2,zero,8006d3c <_dtoa_r+0x116c>
 8006900:	880b883a 	mov	r5,r17
 8006904:	000d883a 	mov	r6,zero
 8006908:	01d00534 	movhi	r7,16404
 800690c:	8009883a 	mov	r4,r16
 8006910:	800d2000 	call	800d200 <__muldf3>
 8006914:	900d883a 	mov	r6,r18
 8006918:	980f883a 	mov	r7,r19
 800691c:	1009883a 	mov	r4,r2
 8006920:	180b883a 	mov	r5,r3
 8006924:	800d0300 	call	800d030 <__gedf2>
 8006928:	002b883a 	mov	r21,zero
 800692c:	0023883a 	mov	r17,zero
 8006930:	1000bf16 	blt	r2,zero,8006c30 <_dtoa_r+0x1060>
 8006934:	d9802217 	ldw	r6,136(sp)
 8006938:	ddc00717 	ldw	r23,28(sp)
 800693c:	018c303a 	nor	r6,zero,r6
 8006940:	d9800515 	stw	r6,20(sp)
 8006944:	a80b883a 	mov	r5,r21
 8006948:	e009883a 	mov	r4,fp
 800694c:	8007d8c0 	call	8007d8c <_Bfree>
 8006950:	883e4926 	beq	r17,zero,8006278 <__alt_data_end+0xf8006278>
 8006954:	003fad06 	br	800680c <__alt_data_end+0xf800680c>
 8006958:	d9c01117 	ldw	r7,68(sp)
 800695c:	3801bc26 	beq	r7,zero,8007050 <_dtoa_r+0x1480>
 8006960:	10810cc4 	addi	r2,r2,1075
 8006964:	dd400a17 	ldw	r21,40(sp)
 8006968:	dd000817 	ldw	r20,32(sp)
 800696c:	003f0a06 	br	8006598 <__alt_data_end+0xf8006598>
 8006970:	00800704 	movi	r2,28
 8006974:	d9000817 	ldw	r4,32(sp)
 8006978:	a0a9883a 	add	r20,r20,r2
 800697c:	b0ad883a 	add	r22,r22,r2
 8006980:	2089883a 	add	r4,r4,r2
 8006984:	d9000815 	stw	r4,32(sp)
 8006988:	003f5106 	br	80066d0 <__alt_data_end+0xf80066d0>
 800698c:	d8c00317 	ldw	r3,12(sp)
 8006990:	b8c1fc0e 	bge	r23,r3,8007184 <_dtoa_r+0x15b4>
 8006994:	0027883a 	mov	r19,zero
 8006998:	b805883a 	mov	r2,r23
 800699c:	003f3e06 	br	8006698 <__alt_data_end+0xf8006698>
 80069a0:	880b883a 	mov	r5,r17
 80069a4:	e009883a 	mov	r4,fp
 80069a8:	000f883a 	mov	r7,zero
 80069ac:	01800284 	movi	r6,10
 80069b0:	8007db40 	call	8007db4 <__multadd>
 80069b4:	d9000c17 	ldw	r4,48(sp)
 80069b8:	1023883a 	mov	r17,r2
 80069bc:	0102040e 	bge	zero,r4,80071d0 <_dtoa_r+0x1600>
 80069c0:	d9000615 	stw	r4,24(sp)
 80069c4:	0500050e 	bge	zero,r20,80069dc <_dtoa_r+0xe0c>
 80069c8:	880b883a 	mov	r5,r17
 80069cc:	a00d883a 	mov	r6,r20
 80069d0:	e009883a 	mov	r4,fp
 80069d4:	80084640 	call	8008464 <__lshift>
 80069d8:	1023883a 	mov	r17,r2
 80069dc:	9801241e 	bne	r19,zero,8006e70 <_dtoa_r+0x12a0>
 80069e0:	8829883a 	mov	r20,r17
 80069e4:	d9000617 	ldw	r4,24(sp)
 80069e8:	dcc00717 	ldw	r19,28(sp)
 80069ec:	9480004c 	andi	r18,r18,1
 80069f0:	20bfffc4 	addi	r2,r4,-1
 80069f4:	9885883a 	add	r2,r19,r2
 80069f8:	d8800415 	stw	r2,16(sp)
 80069fc:	dc800615 	stw	r18,24(sp)
 8006a00:	a80b883a 	mov	r5,r21
 8006a04:	8009883a 	mov	r4,r16
 8006a08:	80059d00 	call	80059d0 <quorem>
 8006a0c:	880b883a 	mov	r5,r17
 8006a10:	8009883a 	mov	r4,r16
 8006a14:	102f883a 	mov	r23,r2
 8006a18:	80085ac0 	call	80085ac <__mcmp>
 8006a1c:	a80b883a 	mov	r5,r21
 8006a20:	a00d883a 	mov	r6,r20
 8006a24:	e009883a 	mov	r4,fp
 8006a28:	102d883a 	mov	r22,r2
 8006a2c:	800860c0 	call	800860c <__mdiff>
 8006a30:	1007883a 	mov	r3,r2
 8006a34:	10800317 	ldw	r2,12(r2)
 8006a38:	bc800c04 	addi	r18,r23,48
 8006a3c:	180b883a 	mov	r5,r3
 8006a40:	10004e1e 	bne	r2,zero,8006b7c <_dtoa_r+0xfac>
 8006a44:	8009883a 	mov	r4,r16
 8006a48:	d8c01615 	stw	r3,88(sp)
 8006a4c:	80085ac0 	call	80085ac <__mcmp>
 8006a50:	d8c01617 	ldw	r3,88(sp)
 8006a54:	e009883a 	mov	r4,fp
 8006a58:	d8801615 	stw	r2,88(sp)
 8006a5c:	180b883a 	mov	r5,r3
 8006a60:	8007d8c0 	call	8007d8c <_Bfree>
 8006a64:	d8801617 	ldw	r2,88(sp)
 8006a68:	1000041e 	bne	r2,zero,8006a7c <_dtoa_r+0xeac>
 8006a6c:	d9800317 	ldw	r6,12(sp)
 8006a70:	3000021e 	bne	r6,zero,8006a7c <_dtoa_r+0xeac>
 8006a74:	d8c00617 	ldw	r3,24(sp)
 8006a78:	18003726 	beq	r3,zero,8006b58 <_dtoa_r+0xf88>
 8006a7c:	b0002016 	blt	r22,zero,8006b00 <_dtoa_r+0xf30>
 8006a80:	b000041e 	bne	r22,zero,8006a94 <_dtoa_r+0xec4>
 8006a84:	d9000317 	ldw	r4,12(sp)
 8006a88:	2000021e 	bne	r4,zero,8006a94 <_dtoa_r+0xec4>
 8006a8c:	d8c00617 	ldw	r3,24(sp)
 8006a90:	18001b26 	beq	r3,zero,8006b00 <_dtoa_r+0xf30>
 8006a94:	00810716 	blt	zero,r2,8006eb4 <_dtoa_r+0x12e4>
 8006a98:	d8c00417 	ldw	r3,16(sp)
 8006a9c:	9d800044 	addi	r22,r19,1
 8006aa0:	9c800005 	stb	r18,0(r19)
 8006aa4:	b02f883a 	mov	r23,r22
 8006aa8:	98c10626 	beq	r19,r3,8006ec4 <_dtoa_r+0x12f4>
 8006aac:	800b883a 	mov	r5,r16
 8006ab0:	000f883a 	mov	r7,zero
 8006ab4:	01800284 	movi	r6,10
 8006ab8:	e009883a 	mov	r4,fp
 8006abc:	8007db40 	call	8007db4 <__multadd>
 8006ac0:	1021883a 	mov	r16,r2
 8006ac4:	000f883a 	mov	r7,zero
 8006ac8:	01800284 	movi	r6,10
 8006acc:	880b883a 	mov	r5,r17
 8006ad0:	e009883a 	mov	r4,fp
 8006ad4:	8d002526 	beq	r17,r20,8006b6c <_dtoa_r+0xf9c>
 8006ad8:	8007db40 	call	8007db4 <__multadd>
 8006adc:	a00b883a 	mov	r5,r20
 8006ae0:	000f883a 	mov	r7,zero
 8006ae4:	01800284 	movi	r6,10
 8006ae8:	e009883a 	mov	r4,fp
 8006aec:	1023883a 	mov	r17,r2
 8006af0:	8007db40 	call	8007db4 <__multadd>
 8006af4:	1029883a 	mov	r20,r2
 8006af8:	b027883a 	mov	r19,r22
 8006afc:	003fc006 	br	8006a00 <__alt_data_end+0xf8006a00>
 8006b00:	9011883a 	mov	r8,r18
 8006b04:	00800e0e 	bge	zero,r2,8006b40 <_dtoa_r+0xf70>
 8006b08:	800b883a 	mov	r5,r16
 8006b0c:	01800044 	movi	r6,1
 8006b10:	e009883a 	mov	r4,fp
 8006b14:	da001715 	stw	r8,92(sp)
 8006b18:	80084640 	call	8008464 <__lshift>
 8006b1c:	a80b883a 	mov	r5,r21
 8006b20:	1009883a 	mov	r4,r2
 8006b24:	1021883a 	mov	r16,r2
 8006b28:	80085ac0 	call	80085ac <__mcmp>
 8006b2c:	da001717 	ldw	r8,92(sp)
 8006b30:	0081960e 	bge	zero,r2,800718c <_dtoa_r+0x15bc>
 8006b34:	00800e44 	movi	r2,57
 8006b38:	40817026 	beq	r8,r2,80070fc <_dtoa_r+0x152c>
 8006b3c:	ba000c44 	addi	r8,r23,49
 8006b40:	8825883a 	mov	r18,r17
 8006b44:	9dc00044 	addi	r23,r19,1
 8006b48:	9a000005 	stb	r8,0(r19)
 8006b4c:	a023883a 	mov	r17,r20
 8006b50:	dc000915 	stw	r16,36(sp)
 8006b54:	003f2406 	br	80067e8 <__alt_data_end+0xf80067e8>
 8006b58:	00800e44 	movi	r2,57
 8006b5c:	9011883a 	mov	r8,r18
 8006b60:	90816626 	beq	r18,r2,80070fc <_dtoa_r+0x152c>
 8006b64:	05bff516 	blt	zero,r22,8006b3c <__alt_data_end+0xf8006b3c>
 8006b68:	003ff506 	br	8006b40 <__alt_data_end+0xf8006b40>
 8006b6c:	8007db40 	call	8007db4 <__multadd>
 8006b70:	1023883a 	mov	r17,r2
 8006b74:	1029883a 	mov	r20,r2
 8006b78:	003fdf06 	br	8006af8 <__alt_data_end+0xf8006af8>
 8006b7c:	e009883a 	mov	r4,fp
 8006b80:	8007d8c0 	call	8007d8c <_Bfree>
 8006b84:	00800044 	movi	r2,1
 8006b88:	003fbc06 	br	8006a7c <__alt_data_end+0xf8006a7c>
 8006b8c:	a80b883a 	mov	r5,r21
 8006b90:	8009883a 	mov	r4,r16
 8006b94:	80085ac0 	call	80085ac <__mcmp>
 8006b98:	103edb0e 	bge	r2,zero,8006708 <__alt_data_end+0xf8006708>
 8006b9c:	800b883a 	mov	r5,r16
 8006ba0:	000f883a 	mov	r7,zero
 8006ba4:	01800284 	movi	r6,10
 8006ba8:	e009883a 	mov	r4,fp
 8006bac:	8007db40 	call	8007db4 <__multadd>
 8006bb0:	1021883a 	mov	r16,r2
 8006bb4:	d8800517 	ldw	r2,20(sp)
 8006bb8:	d8c00b17 	ldw	r3,44(sp)
 8006bbc:	10bfffc4 	addi	r2,r2,-1
 8006bc0:	d8800515 	stw	r2,20(sp)
 8006bc4:	183f761e 	bne	r3,zero,80069a0 <__alt_data_end+0xf80069a0>
 8006bc8:	d9000c17 	ldw	r4,48(sp)
 8006bcc:	0101730e 	bge	zero,r4,800719c <_dtoa_r+0x15cc>
 8006bd0:	d9000615 	stw	r4,24(sp)
 8006bd4:	003ed006 	br	8006718 <__alt_data_end+0xf8006718>
 8006bd8:	00800084 	movi	r2,2
 8006bdc:	3081861e 	bne	r6,r2,80071f8 <_dtoa_r+0x1628>
 8006be0:	d8000b15 	stw	zero,44(sp)
 8006be4:	003f3c06 	br	80068d8 <__alt_data_end+0xf80068d8>
 8006be8:	dc000917 	ldw	r16,36(sp)
 8006bec:	003e9206 	br	8006638 <__alt_data_end+0xf8006638>
 8006bf0:	d9c00317 	ldw	r7,12(sp)
 8006bf4:	00800084 	movi	r2,2
 8006bf8:	11fec50e 	bge	r2,r7,8006710 <__alt_data_end+0xf8006710>
 8006bfc:	d9000617 	ldw	r4,24(sp)
 8006c00:	20013c1e 	bne	r4,zero,80070f4 <_dtoa_r+0x1524>
 8006c04:	a80b883a 	mov	r5,r21
 8006c08:	000f883a 	mov	r7,zero
 8006c0c:	01800144 	movi	r6,5
 8006c10:	e009883a 	mov	r4,fp
 8006c14:	8007db40 	call	8007db4 <__multadd>
 8006c18:	100b883a 	mov	r5,r2
 8006c1c:	8009883a 	mov	r4,r16
 8006c20:	102b883a 	mov	r21,r2
 8006c24:	80085ac0 	call	80085ac <__mcmp>
 8006c28:	dc000915 	stw	r16,36(sp)
 8006c2c:	00bf410e 	bge	zero,r2,8006934 <__alt_data_end+0xf8006934>
 8006c30:	d9c00717 	ldw	r7,28(sp)
 8006c34:	00800c44 	movi	r2,49
 8006c38:	38800005 	stb	r2,0(r7)
 8006c3c:	d8800517 	ldw	r2,20(sp)
 8006c40:	3dc00044 	addi	r23,r7,1
 8006c44:	10800044 	addi	r2,r2,1
 8006c48:	d8800515 	stw	r2,20(sp)
 8006c4c:	003f3d06 	br	8006944 <__alt_data_end+0xf8006944>
 8006c50:	d9800517 	ldw	r6,20(sp)
 8006c54:	d9c00717 	ldw	r7,28(sp)
 8006c58:	00800c44 	movi	r2,49
 8006c5c:	31800044 	addi	r6,r6,1
 8006c60:	d9800515 	stw	r6,20(sp)
 8006c64:	38800005 	stb	r2,0(r7)
 8006c68:	003edf06 	br	80067e8 <__alt_data_end+0xf80067e8>
 8006c6c:	d8000b15 	stw	zero,44(sp)
 8006c70:	003c9f06 	br	8005ef0 <__alt_data_end+0xf8005ef0>
 8006c74:	903e7e1e 	bne	r18,zero,8006670 <__alt_data_end+0xf8006670>
 8006c78:	00800434 	movhi	r2,16
 8006c7c:	10bfffc4 	addi	r2,r2,-1
 8006c80:	9884703a 	and	r2,r19,r2
 8006c84:	1000ea1e 	bne	r2,zero,8007030 <_dtoa_r+0x1460>
 8006c88:	9cdffc2c 	andhi	r19,r19,32752
 8006c8c:	9800e826 	beq	r19,zero,8007030 <_dtoa_r+0x1460>
 8006c90:	d9c00817 	ldw	r7,32(sp)
 8006c94:	b5800044 	addi	r22,r22,1
 8006c98:	04c00044 	movi	r19,1
 8006c9c:	39c00044 	addi	r7,r7,1
 8006ca0:	d9c00815 	stw	r7,32(sp)
 8006ca4:	d8800d17 	ldw	r2,52(sp)
 8006ca8:	103e721e 	bne	r2,zero,8006674 <__alt_data_end+0xf8006674>
 8006cac:	00800044 	movi	r2,1
 8006cb0:	003e7906 	br	8006698 <__alt_data_end+0xf8006698>
 8006cb4:	8009883a 	mov	r4,r16
 8006cb8:	800e2940 	call	800e294 <__floatsidf>
 8006cbc:	d9800f17 	ldw	r6,60(sp)
 8006cc0:	d9c01017 	ldw	r7,64(sp)
 8006cc4:	1009883a 	mov	r4,r2
 8006cc8:	180b883a 	mov	r5,r3
 8006ccc:	800d2000 	call	800d200 <__muldf3>
 8006cd0:	000d883a 	mov	r6,zero
 8006cd4:	01d00734 	movhi	r7,16412
 8006cd8:	1009883a 	mov	r4,r2
 8006cdc:	180b883a 	mov	r5,r3
 8006ce0:	800be140 	call	800be14 <__adddf3>
 8006ce4:	047f3034 	movhi	r17,64704
 8006ce8:	1021883a 	mov	r16,r2
 8006cec:	1c63883a 	add	r17,r3,r17
 8006cf0:	d9000f17 	ldw	r4,60(sp)
 8006cf4:	d9401017 	ldw	r5,64(sp)
 8006cf8:	000d883a 	mov	r6,zero
 8006cfc:	01d00534 	movhi	r7,16404
 8006d00:	800d9180 	call	800d918 <__subdf3>
 8006d04:	800d883a 	mov	r6,r16
 8006d08:	880f883a 	mov	r7,r17
 8006d0c:	1009883a 	mov	r4,r2
 8006d10:	180b883a 	mov	r5,r3
 8006d14:	102b883a 	mov	r21,r2
 8006d18:	1829883a 	mov	r20,r3
 8006d1c:	800d0300 	call	800d030 <__gedf2>
 8006d20:	00806c16 	blt	zero,r2,8006ed4 <_dtoa_r+0x1304>
 8006d24:	89e0003c 	xorhi	r7,r17,32768
 8006d28:	800d883a 	mov	r6,r16
 8006d2c:	a809883a 	mov	r4,r21
 8006d30:	a00b883a 	mov	r5,r20
 8006d34:	800d10c0 	call	800d10c <__ledf2>
 8006d38:	103d7e0e 	bge	r2,zero,8006334 <__alt_data_end+0xf8006334>
 8006d3c:	002b883a 	mov	r21,zero
 8006d40:	0023883a 	mov	r17,zero
 8006d44:	003efb06 	br	8006934 <__alt_data_end+0xf8006934>
 8006d48:	d8800717 	ldw	r2,28(sp)
 8006d4c:	003bd006 	br	8005c90 <__alt_data_end+0xf8005c90>
 8006d50:	d9000a17 	ldw	r4,40(sp)
 8006d54:	d9800d17 	ldw	r6,52(sp)
 8006d58:	dd400a15 	stw	r21,40(sp)
 8006d5c:	a905c83a 	sub	r2,r21,r4
 8006d60:	308d883a 	add	r6,r6,r2
 8006d64:	d9800d15 	stw	r6,52(sp)
 8006d68:	002b883a 	mov	r21,zero
 8006d6c:	003e0606 	br	8006588 <__alt_data_end+0xf8006588>
 8006d70:	9023883a 	mov	r17,r18
 8006d74:	9829883a 	mov	r20,r19
 8006d78:	04000084 	movi	r16,2
 8006d7c:	003c9206 	br	8005fc8 <__alt_data_end+0xf8005fc8>
 8006d80:	04000044 	movi	r16,1
 8006d84:	dc000c15 	stw	r16,48(sp)
 8006d88:	dc000615 	stw	r16,24(sp)
 8006d8c:	dc002215 	stw	r16,136(sp)
 8006d90:	e0001115 	stw	zero,68(fp)
 8006d94:	000b883a 	mov	r5,zero
 8006d98:	003c6906 	br	8005f40 <__alt_data_end+0xf8005f40>
 8006d9c:	3021883a 	mov	r16,r6
 8006da0:	003ffb06 	br	8006d90 <__alt_data_end+0xf8006d90>
 8006da4:	1000021e 	bne	r2,zero,8006db0 <_dtoa_r+0x11e0>
 8006da8:	4200004c 	andi	r8,r8,1
 8006dac:	403e7d1e 	bne	r8,zero,80067a4 <__alt_data_end+0xf80067a4>
 8006db0:	01000c04 	movi	r4,48
 8006db4:	00000106 	br	8006dbc <_dtoa_r+0x11ec>
 8006db8:	102f883a 	mov	r23,r2
 8006dbc:	b8bfffc4 	addi	r2,r23,-1
 8006dc0:	10c00007 	ldb	r3,0(r2)
 8006dc4:	193ffc26 	beq	r3,r4,8006db8 <__alt_data_end+0xf8006db8>
 8006dc8:	003e8706 	br	80067e8 <__alt_data_end+0xf80067e8>
 8006dcc:	d8800517 	ldw	r2,20(sp)
 8006dd0:	00a3c83a 	sub	r17,zero,r2
 8006dd4:	8800a426 	beq	r17,zero,8007068 <_dtoa_r+0x1498>
 8006dd8:	888003cc 	andi	r2,r17,15
 8006ddc:	100490fa 	slli	r2,r2,3
 8006de0:	00c20074 	movhi	r3,2049
 8006de4:	18d77c04 	addi	r3,r3,24048
 8006de8:	1885883a 	add	r2,r3,r2
 8006dec:	11800017 	ldw	r6,0(r2)
 8006df0:	11c00117 	ldw	r7,4(r2)
 8006df4:	9009883a 	mov	r4,r18
 8006df8:	980b883a 	mov	r5,r19
 8006dfc:	8823d13a 	srai	r17,r17,4
 8006e00:	800d2000 	call	800d200 <__muldf3>
 8006e04:	d8800f15 	stw	r2,60(sp)
 8006e08:	d8c01015 	stw	r3,64(sp)
 8006e0c:	8800e826 	beq	r17,zero,80071b0 <_dtoa_r+0x15e0>
 8006e10:	05020074 	movhi	r20,2049
 8006e14:	a5177204 	addi	r20,r20,24008
 8006e18:	04000084 	movi	r16,2
 8006e1c:	8980004c 	andi	r6,r17,1
 8006e20:	1009883a 	mov	r4,r2
 8006e24:	8823d07a 	srai	r17,r17,1
 8006e28:	180b883a 	mov	r5,r3
 8006e2c:	30000426 	beq	r6,zero,8006e40 <_dtoa_r+0x1270>
 8006e30:	a1800017 	ldw	r6,0(r20)
 8006e34:	a1c00117 	ldw	r7,4(r20)
 8006e38:	84000044 	addi	r16,r16,1
 8006e3c:	800d2000 	call	800d200 <__muldf3>
 8006e40:	a5000204 	addi	r20,r20,8
 8006e44:	883ff51e 	bne	r17,zero,8006e1c <__alt_data_end+0xf8006e1c>
 8006e48:	d8800f15 	stw	r2,60(sp)
 8006e4c:	d8c01015 	stw	r3,64(sp)
 8006e50:	003c7606 	br	800602c <__alt_data_end+0xf800602c>
 8006e54:	00c00c04 	movi	r3,48
 8006e58:	10c00005 	stb	r3,0(r2)
 8006e5c:	d8c00517 	ldw	r3,20(sp)
 8006e60:	bd3fffc3 	ldbu	r20,-1(r23)
 8006e64:	18c00044 	addi	r3,r3,1
 8006e68:	d8c00515 	stw	r3,20(sp)
 8006e6c:	003db906 	br	8006554 <__alt_data_end+0xf8006554>
 8006e70:	89400117 	ldw	r5,4(r17)
 8006e74:	e009883a 	mov	r4,fp
 8006e78:	8007ce40 	call	8007ce4 <_Balloc>
 8006e7c:	89800417 	ldw	r6,16(r17)
 8006e80:	89400304 	addi	r5,r17,12
 8006e84:	11000304 	addi	r4,r2,12
 8006e88:	31800084 	addi	r6,r6,2
 8006e8c:	318d883a 	add	r6,r6,r6
 8006e90:	318d883a 	add	r6,r6,r6
 8006e94:	1027883a 	mov	r19,r2
 8006e98:	800259c0 	call	800259c <memcpy>
 8006e9c:	01800044 	movi	r6,1
 8006ea0:	980b883a 	mov	r5,r19
 8006ea4:	e009883a 	mov	r4,fp
 8006ea8:	80084640 	call	8008464 <__lshift>
 8006eac:	1029883a 	mov	r20,r2
 8006eb0:	003ecc06 	br	80069e4 <__alt_data_end+0xf80069e4>
 8006eb4:	00800e44 	movi	r2,57
 8006eb8:	90809026 	beq	r18,r2,80070fc <_dtoa_r+0x152c>
 8006ebc:	92000044 	addi	r8,r18,1
 8006ec0:	003f1f06 	br	8006b40 <__alt_data_end+0xf8006b40>
 8006ec4:	9011883a 	mov	r8,r18
 8006ec8:	8825883a 	mov	r18,r17
 8006ecc:	a023883a 	mov	r17,r20
 8006ed0:	003e2906 	br	8006778 <__alt_data_end+0xf8006778>
 8006ed4:	002b883a 	mov	r21,zero
 8006ed8:	0023883a 	mov	r17,zero
 8006edc:	003f5406 	br	8006c30 <__alt_data_end+0xf8006c30>
 8006ee0:	61bfffc4 	addi	r6,r12,-1
 8006ee4:	300490fa 	slli	r2,r6,3
 8006ee8:	00c20074 	movhi	r3,2049
 8006eec:	18d77c04 	addi	r3,r3,24048
 8006ef0:	1885883a 	add	r2,r3,r2
 8006ef4:	11000017 	ldw	r4,0(r2)
 8006ef8:	11400117 	ldw	r5,4(r2)
 8006efc:	d8800717 	ldw	r2,28(sp)
 8006f00:	880f883a 	mov	r7,r17
 8006f04:	d9801215 	stw	r6,72(sp)
 8006f08:	800d883a 	mov	r6,r16
 8006f0c:	db001615 	stw	r12,88(sp)
 8006f10:	15c00044 	addi	r23,r2,1
 8006f14:	800d2000 	call	800d200 <__muldf3>
 8006f18:	d9401017 	ldw	r5,64(sp)
 8006f1c:	d9000f17 	ldw	r4,60(sp)
 8006f20:	d8c01515 	stw	r3,84(sp)
 8006f24:	d8801415 	stw	r2,80(sp)
 8006f28:	800e2140 	call	800e214 <__fixdfsi>
 8006f2c:	1009883a 	mov	r4,r2
 8006f30:	1021883a 	mov	r16,r2
 8006f34:	800e2940 	call	800e294 <__floatsidf>
 8006f38:	d9000f17 	ldw	r4,60(sp)
 8006f3c:	d9401017 	ldw	r5,64(sp)
 8006f40:	100d883a 	mov	r6,r2
 8006f44:	180f883a 	mov	r7,r3
 8006f48:	800d9180 	call	800d918 <__subdf3>
 8006f4c:	1829883a 	mov	r20,r3
 8006f50:	d8c00717 	ldw	r3,28(sp)
 8006f54:	84000c04 	addi	r16,r16,48
 8006f58:	1023883a 	mov	r17,r2
 8006f5c:	1c000005 	stb	r16,0(r3)
 8006f60:	db001617 	ldw	r12,88(sp)
 8006f64:	00800044 	movi	r2,1
 8006f68:	60802226 	beq	r12,r2,8006ff4 <_dtoa_r+0x1424>
 8006f6c:	d9c00717 	ldw	r7,28(sp)
 8006f70:	8805883a 	mov	r2,r17
 8006f74:	b82b883a 	mov	r21,r23
 8006f78:	3b19883a 	add	r12,r7,r12
 8006f7c:	6023883a 	mov	r17,r12
 8006f80:	a007883a 	mov	r3,r20
 8006f84:	dc800f15 	stw	r18,60(sp)
 8006f88:	000d883a 	mov	r6,zero
 8006f8c:	01d00934 	movhi	r7,16420
 8006f90:	1009883a 	mov	r4,r2
 8006f94:	180b883a 	mov	r5,r3
 8006f98:	800d2000 	call	800d200 <__muldf3>
 8006f9c:	180b883a 	mov	r5,r3
 8006fa0:	1009883a 	mov	r4,r2
 8006fa4:	1829883a 	mov	r20,r3
 8006fa8:	1025883a 	mov	r18,r2
 8006fac:	800e2140 	call	800e214 <__fixdfsi>
 8006fb0:	1009883a 	mov	r4,r2
 8006fb4:	1021883a 	mov	r16,r2
 8006fb8:	800e2940 	call	800e294 <__floatsidf>
 8006fbc:	100d883a 	mov	r6,r2
 8006fc0:	180f883a 	mov	r7,r3
 8006fc4:	9009883a 	mov	r4,r18
 8006fc8:	a00b883a 	mov	r5,r20
 8006fcc:	84000c04 	addi	r16,r16,48
 8006fd0:	800d9180 	call	800d918 <__subdf3>
 8006fd4:	ad400044 	addi	r21,r21,1
 8006fd8:	ac3fffc5 	stb	r16,-1(r21)
 8006fdc:	ac7fea1e 	bne	r21,r17,8006f88 <__alt_data_end+0xf8006f88>
 8006fe0:	1023883a 	mov	r17,r2
 8006fe4:	d8801217 	ldw	r2,72(sp)
 8006fe8:	dc800f17 	ldw	r18,60(sp)
 8006fec:	1829883a 	mov	r20,r3
 8006ff0:	b8af883a 	add	r23,r23,r2
 8006ff4:	d9001417 	ldw	r4,80(sp)
 8006ff8:	d9401517 	ldw	r5,84(sp)
 8006ffc:	000d883a 	mov	r6,zero
 8007000:	01cff834 	movhi	r7,16352
 8007004:	800be140 	call	800be14 <__adddf3>
 8007008:	880d883a 	mov	r6,r17
 800700c:	a00f883a 	mov	r7,r20
 8007010:	1009883a 	mov	r4,r2
 8007014:	180b883a 	mov	r5,r3
 8007018:	800d10c0 	call	800d10c <__ledf2>
 800701c:	10003e0e 	bge	r2,zero,8007118 <_dtoa_r+0x1548>
 8007020:	d9001317 	ldw	r4,76(sp)
 8007024:	bd3fffc3 	ldbu	r20,-1(r23)
 8007028:	d9000515 	stw	r4,20(sp)
 800702c:	003d3b06 	br	800651c <__alt_data_end+0xf800651c>
 8007030:	0027883a 	mov	r19,zero
 8007034:	003f1b06 	br	8006ca4 <__alt_data_end+0xf8006ca4>
 8007038:	d8800817 	ldw	r2,32(sp)
 800703c:	11e9c83a 	sub	r20,r2,r7
 8007040:	0005883a 	mov	r2,zero
 8007044:	003d5406 	br	8006598 <__alt_data_end+0xf8006598>
 8007048:	00800044 	movi	r2,1
 800704c:	003dc706 	br	800676c <__alt_data_end+0xf800676c>
 8007050:	d8c00217 	ldw	r3,8(sp)
 8007054:	00800d84 	movi	r2,54
 8007058:	dd400a17 	ldw	r21,40(sp)
 800705c:	10c5c83a 	sub	r2,r2,r3
 8007060:	dd000817 	ldw	r20,32(sp)
 8007064:	003d4c06 	br	8006598 <__alt_data_end+0xf8006598>
 8007068:	dc800f15 	stw	r18,60(sp)
 800706c:	dcc01015 	stw	r19,64(sp)
 8007070:	04000084 	movi	r16,2
 8007074:	003bed06 	br	800602c <__alt_data_end+0xf800602c>
 8007078:	d9000617 	ldw	r4,24(sp)
 800707c:	203f0d26 	beq	r4,zero,8006cb4 <__alt_data_end+0xf8006cb4>
 8007080:	d9800c17 	ldw	r6,48(sp)
 8007084:	01bcab0e 	bge	zero,r6,8006334 <__alt_data_end+0xf8006334>
 8007088:	d9401017 	ldw	r5,64(sp)
 800708c:	d9000f17 	ldw	r4,60(sp)
 8007090:	000d883a 	mov	r6,zero
 8007094:	01d00934 	movhi	r7,16420
 8007098:	800d2000 	call	800d200 <__muldf3>
 800709c:	81000044 	addi	r4,r16,1
 80070a0:	d8800f15 	stw	r2,60(sp)
 80070a4:	d8c01015 	stw	r3,64(sp)
 80070a8:	800e2940 	call	800e294 <__floatsidf>
 80070ac:	d9800f17 	ldw	r6,60(sp)
 80070b0:	d9c01017 	ldw	r7,64(sp)
 80070b4:	1009883a 	mov	r4,r2
 80070b8:	180b883a 	mov	r5,r3
 80070bc:	800d2000 	call	800d200 <__muldf3>
 80070c0:	01d00734 	movhi	r7,16412
 80070c4:	000d883a 	mov	r6,zero
 80070c8:	1009883a 	mov	r4,r2
 80070cc:	180b883a 	mov	r5,r3
 80070d0:	800be140 	call	800be14 <__adddf3>
 80070d4:	d9c00517 	ldw	r7,20(sp)
 80070d8:	047f3034 	movhi	r17,64704
 80070dc:	1021883a 	mov	r16,r2
 80070e0:	39ffffc4 	addi	r7,r7,-1
 80070e4:	d9c01315 	stw	r7,76(sp)
 80070e8:	1c63883a 	add	r17,r3,r17
 80070ec:	db000c17 	ldw	r12,48(sp)
 80070f0:	003bea06 	br	800609c <__alt_data_end+0xf800609c>
 80070f4:	dc000915 	stw	r16,36(sp)
 80070f8:	003e0e06 	br	8006934 <__alt_data_end+0xf8006934>
 80070fc:	01000e44 	movi	r4,57
 8007100:	8825883a 	mov	r18,r17
 8007104:	9dc00044 	addi	r23,r19,1
 8007108:	99000005 	stb	r4,0(r19)
 800710c:	a023883a 	mov	r17,r20
 8007110:	dc000915 	stw	r16,36(sp)
 8007114:	003da406 	br	80067a8 <__alt_data_end+0xf80067a8>
 8007118:	d9801417 	ldw	r6,80(sp)
 800711c:	d9c01517 	ldw	r7,84(sp)
 8007120:	0009883a 	mov	r4,zero
 8007124:	014ff834 	movhi	r5,16352
 8007128:	800d9180 	call	800d918 <__subdf3>
 800712c:	880d883a 	mov	r6,r17
 8007130:	a00f883a 	mov	r7,r20
 8007134:	1009883a 	mov	r4,r2
 8007138:	180b883a 	mov	r5,r3
 800713c:	800d0300 	call	800d030 <__gedf2>
 8007140:	00bc7c0e 	bge	zero,r2,8006334 <__alt_data_end+0xf8006334>
 8007144:	01000c04 	movi	r4,48
 8007148:	00000106 	br	8007150 <_dtoa_r+0x1580>
 800714c:	102f883a 	mov	r23,r2
 8007150:	b8bfffc4 	addi	r2,r23,-1
 8007154:	10c00007 	ldb	r3,0(r2)
 8007158:	193ffc26 	beq	r3,r4,800714c <__alt_data_end+0xf800714c>
 800715c:	d9801317 	ldw	r6,76(sp)
 8007160:	d9800515 	stw	r6,20(sp)
 8007164:	003c4406 	br	8006278 <__alt_data_end+0xf8006278>
 8007168:	d9801317 	ldw	r6,76(sp)
 800716c:	d9800515 	stw	r6,20(sp)
 8007170:	003cea06 	br	800651c <__alt_data_end+0xf800651c>
 8007174:	dd800f17 	ldw	r22,60(sp)
 8007178:	dcc01017 	ldw	r19,64(sp)
 800717c:	dc801217 	ldw	r18,72(sp)
 8007180:	003c6c06 	br	8006334 <__alt_data_end+0xf8006334>
 8007184:	903e031e 	bne	r18,zero,8006994 <__alt_data_end+0xf8006994>
 8007188:	003ebb06 	br	8006c78 <__alt_data_end+0xf8006c78>
 800718c:	103e6c1e 	bne	r2,zero,8006b40 <__alt_data_end+0xf8006b40>
 8007190:	4080004c 	andi	r2,r8,1
 8007194:	103e6a26 	beq	r2,zero,8006b40 <__alt_data_end+0xf8006b40>
 8007198:	003e6606 	br	8006b34 <__alt_data_end+0xf8006b34>
 800719c:	d8c00317 	ldw	r3,12(sp)
 80071a0:	00800084 	movi	r2,2
 80071a4:	10c02916 	blt	r2,r3,800724c <_dtoa_r+0x167c>
 80071a8:	d9000c17 	ldw	r4,48(sp)
 80071ac:	003e8806 	br	8006bd0 <__alt_data_end+0xf8006bd0>
 80071b0:	04000084 	movi	r16,2
 80071b4:	003b9d06 	br	800602c <__alt_data_end+0xf800602c>
 80071b8:	d9001317 	ldw	r4,76(sp)
 80071bc:	d9000515 	stw	r4,20(sp)
 80071c0:	003cd606 	br	800651c <__alt_data_end+0xf800651c>
 80071c4:	d8801317 	ldw	r2,76(sp)
 80071c8:	d8800515 	stw	r2,20(sp)
 80071cc:	003c2a06 	br	8006278 <__alt_data_end+0xf8006278>
 80071d0:	d9800317 	ldw	r6,12(sp)
 80071d4:	00800084 	movi	r2,2
 80071d8:	11801516 	blt	r2,r6,8007230 <_dtoa_r+0x1660>
 80071dc:	d9c00c17 	ldw	r7,48(sp)
 80071e0:	d9c00615 	stw	r7,24(sp)
 80071e4:	003df706 	br	80069c4 <__alt_data_end+0xf80069c4>
 80071e8:	193d3926 	beq	r3,r4,80066d0 <__alt_data_end+0xf80066d0>
 80071ec:	00c00f04 	movi	r3,60
 80071f0:	1885c83a 	sub	r2,r3,r2
 80071f4:	003ddf06 	br	8006974 <__alt_data_end+0xf8006974>
 80071f8:	e009883a 	mov	r4,fp
 80071fc:	e0001115 	stw	zero,68(fp)
 8007200:	000b883a 	mov	r5,zero
 8007204:	8007ce40 	call	8007ce4 <_Balloc>
 8007208:	d8800715 	stw	r2,28(sp)
 800720c:	d8c00717 	ldw	r3,28(sp)
 8007210:	00bfffc4 	movi	r2,-1
 8007214:	01000044 	movi	r4,1
 8007218:	d8800c15 	stw	r2,48(sp)
 800721c:	e0c01015 	stw	r3,64(fp)
 8007220:	d9000b15 	stw	r4,44(sp)
 8007224:	d8800615 	stw	r2,24(sp)
 8007228:	d8002215 	stw	zero,136(sp)
 800722c:	003c4106 	br	8006334 <__alt_data_end+0xf8006334>
 8007230:	d8c00c17 	ldw	r3,48(sp)
 8007234:	d8c00615 	stw	r3,24(sp)
 8007238:	003e7006 	br	8006bfc <__alt_data_end+0xf8006bfc>
 800723c:	04400044 	movi	r17,1
 8007240:	003b2006 	br	8005ec4 <__alt_data_end+0xf8005ec4>
 8007244:	000b883a 	mov	r5,zero
 8007248:	003b3d06 	br	8005f40 <__alt_data_end+0xf8005f40>
 800724c:	d8800c17 	ldw	r2,48(sp)
 8007250:	d8800615 	stw	r2,24(sp)
 8007254:	003e6906 	br	8006bfc <__alt_data_end+0xf8006bfc>

08007258 <__sflags>:
 8007258:	28800007 	ldb	r2,0(r5)
 800725c:	00c01c84 	movi	r3,114
 8007260:	10c02426 	beq	r2,r3,80072f4 <__sflags+0x9c>
 8007264:	00c01dc4 	movi	r3,119
 8007268:	10c01e26 	beq	r2,r3,80072e4 <__sflags+0x8c>
 800726c:	00c01844 	movi	r3,97
 8007270:	10c00426 	beq	r2,r3,8007284 <__sflags+0x2c>
 8007274:	00800584 	movi	r2,22
 8007278:	20800015 	stw	r2,0(r4)
 800727c:	0005883a 	mov	r2,zero
 8007280:	f800283a 	ret
 8007284:	02c08204 	movi	r11,520
 8007288:	01000044 	movi	r4,1
 800728c:	00804204 	movi	r2,264
 8007290:	01c00ac4 	movi	r7,43
 8007294:	02bff8c4 	movi	r10,-29
 8007298:	027fff04 	movi	r9,-4
 800729c:	02001e04 	movi	r8,120
 80072a0:	29400044 	addi	r5,r5,1
 80072a4:	28c00007 	ldb	r3,0(r5)
 80072a8:	18000626 	beq	r3,zero,80072c4 <__sflags+0x6c>
 80072ac:	19c00826 	beq	r3,r7,80072d0 <__sflags+0x78>
 80072b0:	1a3ffb1e 	bne	r3,r8,80072a0 <__alt_data_end+0xf80072a0>
 80072b4:	29400044 	addi	r5,r5,1
 80072b8:	28c00007 	ldb	r3,0(r5)
 80072bc:	21020014 	ori	r4,r4,2048
 80072c0:	183ffa1e 	bne	r3,zero,80072ac <__alt_data_end+0xf80072ac>
 80072c4:	22c8b03a 	or	r4,r4,r11
 80072c8:	31000015 	stw	r4,0(r6)
 80072cc:	f800283a 	ret
 80072d0:	1284703a 	and	r2,r2,r10
 80072d4:	2248703a 	and	r4,r4,r9
 80072d8:	10800414 	ori	r2,r2,16
 80072dc:	21000094 	ori	r4,r4,2
 80072e0:	003fef06 	br	80072a0 <__alt_data_end+0xf80072a0>
 80072e4:	02c18004 	movi	r11,1536
 80072e8:	01000044 	movi	r4,1
 80072ec:	00800204 	movi	r2,8
 80072f0:	003fe706 	br	8007290 <__alt_data_end+0xf8007290>
 80072f4:	0017883a 	mov	r11,zero
 80072f8:	0009883a 	mov	r4,zero
 80072fc:	00800104 	movi	r2,4
 8007300:	003fe306 	br	8007290 <__alt_data_end+0xf8007290>

08007304 <_fputc_r>:
 8007304:	defffc04 	addi	sp,sp,-16
 8007308:	dc000215 	stw	r16,8(sp)
 800730c:	dfc00315 	stw	ra,12(sp)
 8007310:	2021883a 	mov	r16,r4
 8007314:	20000726 	beq	r4,zero,8007334 <_fputc_r+0x30>
 8007318:	20800e17 	ldw	r2,56(r4)
 800731c:	1000051e 	bne	r2,zero,8007334 <_fputc_r+0x30>
 8007320:	d9400015 	stw	r5,0(sp)
 8007324:	d9800115 	stw	r6,4(sp)
 8007328:	8000d800 	call	8000d80 <__sinit>
 800732c:	d9800117 	ldw	r6,4(sp)
 8007330:	d9400017 	ldw	r5,0(sp)
 8007334:	8009883a 	mov	r4,r16
 8007338:	dfc00317 	ldw	ra,12(sp)
 800733c:	dc000217 	ldw	r16,8(sp)
 8007340:	dec00404 	addi	sp,sp,16
 8007344:	8008ce01 	jmpi	8008ce0 <_putc_r>

08007348 <fputc>:
 8007348:	00820074 	movhi	r2,2049
 800734c:	defffc04 	addi	sp,sp,-16
 8007350:	109ecc04 	addi	r2,r2,31536
 8007354:	dc000115 	stw	r16,4(sp)
 8007358:	14000017 	ldw	r16,0(r2)
 800735c:	dc400215 	stw	r17,8(sp)
 8007360:	dfc00315 	stw	ra,12(sp)
 8007364:	2023883a 	mov	r17,r4
 8007368:	80000626 	beq	r16,zero,8007384 <fputc+0x3c>
 800736c:	80800e17 	ldw	r2,56(r16)
 8007370:	1000041e 	bne	r2,zero,8007384 <fputc+0x3c>
 8007374:	8009883a 	mov	r4,r16
 8007378:	d9400015 	stw	r5,0(sp)
 800737c:	8000d800 	call	8000d80 <__sinit>
 8007380:	d9400017 	ldw	r5,0(sp)
 8007384:	280d883a 	mov	r6,r5
 8007388:	8009883a 	mov	r4,r16
 800738c:	880b883a 	mov	r5,r17
 8007390:	dfc00317 	ldw	ra,12(sp)
 8007394:	dc400217 	ldw	r17,8(sp)
 8007398:	dc000117 	ldw	r16,4(sp)
 800739c:	dec00404 	addi	sp,sp,16
 80073a0:	8008ce01 	jmpi	8008ce0 <_putc_r>

080073a4 <_fputs_r>:
 80073a4:	defff804 	addi	sp,sp,-32
 80073a8:	dc400615 	stw	r17,24(sp)
 80073ac:	2023883a 	mov	r17,r4
 80073b0:	2809883a 	mov	r4,r5
 80073b4:	dc000515 	stw	r16,20(sp)
 80073b8:	dfc00715 	stw	ra,28(sp)
 80073bc:	3021883a 	mov	r16,r6
 80073c0:	d9400315 	stw	r5,12(sp)
 80073c4:	80034580 	call	8003458 <strlen>
 80073c8:	d8800215 	stw	r2,8(sp)
 80073cc:	d8800415 	stw	r2,16(sp)
 80073d0:	d8800304 	addi	r2,sp,12
 80073d4:	d8800015 	stw	r2,0(sp)
 80073d8:	00800044 	movi	r2,1
 80073dc:	d8800115 	stw	r2,4(sp)
 80073e0:	88000226 	beq	r17,zero,80073ec <_fputs_r+0x48>
 80073e4:	88800e17 	ldw	r2,56(r17)
 80073e8:	10001226 	beq	r2,zero,8007434 <_fputs_r+0x90>
 80073ec:	8080030b 	ldhu	r2,12(r16)
 80073f0:	10c8000c 	andi	r3,r2,8192
 80073f4:	1800061e 	bne	r3,zero,8007410 <_fputs_r+0x6c>
 80073f8:	81001917 	ldw	r4,100(r16)
 80073fc:	00f7ffc4 	movi	r3,-8193
 8007400:	10880014 	ori	r2,r2,8192
 8007404:	20c6703a 	and	r3,r4,r3
 8007408:	8080030d 	sth	r2,12(r16)
 800740c:	80c01915 	stw	r3,100(r16)
 8007410:	d80d883a 	mov	r6,sp
 8007414:	800b883a 	mov	r5,r16
 8007418:	8809883a 	mov	r4,r17
 800741c:	80074580 	call	8007458 <__sfvwrite_r>
 8007420:	dfc00717 	ldw	ra,28(sp)
 8007424:	dc400617 	ldw	r17,24(sp)
 8007428:	dc000517 	ldw	r16,20(sp)
 800742c:	dec00804 	addi	sp,sp,32
 8007430:	f800283a 	ret
 8007434:	8809883a 	mov	r4,r17
 8007438:	8000d800 	call	8000d80 <__sinit>
 800743c:	003feb06 	br	80073ec <__alt_data_end+0xf80073ec>

08007440 <fputs>:
 8007440:	00820074 	movhi	r2,2049
 8007444:	109ecc04 	addi	r2,r2,31536
 8007448:	280d883a 	mov	r6,r5
 800744c:	200b883a 	mov	r5,r4
 8007450:	11000017 	ldw	r4,0(r2)
 8007454:	80073a41 	jmpi	80073a4 <_fputs_r>

08007458 <__sfvwrite_r>:
 8007458:	30800217 	ldw	r2,8(r6)
 800745c:	10006726 	beq	r2,zero,80075fc <__sfvwrite_r+0x1a4>
 8007460:	28c0030b 	ldhu	r3,12(r5)
 8007464:	defff404 	addi	sp,sp,-48
 8007468:	dd400715 	stw	r21,28(sp)
 800746c:	dd000615 	stw	r20,24(sp)
 8007470:	dc000215 	stw	r16,8(sp)
 8007474:	dfc00b15 	stw	ra,44(sp)
 8007478:	df000a15 	stw	fp,40(sp)
 800747c:	ddc00915 	stw	r23,36(sp)
 8007480:	dd800815 	stw	r22,32(sp)
 8007484:	dcc00515 	stw	r19,20(sp)
 8007488:	dc800415 	stw	r18,16(sp)
 800748c:	dc400315 	stw	r17,12(sp)
 8007490:	1880020c 	andi	r2,r3,8
 8007494:	2821883a 	mov	r16,r5
 8007498:	202b883a 	mov	r21,r4
 800749c:	3029883a 	mov	r20,r6
 80074a0:	10002726 	beq	r2,zero,8007540 <__sfvwrite_r+0xe8>
 80074a4:	28800417 	ldw	r2,16(r5)
 80074a8:	10002526 	beq	r2,zero,8007540 <__sfvwrite_r+0xe8>
 80074ac:	1880008c 	andi	r2,r3,2
 80074b0:	a4400017 	ldw	r17,0(r20)
 80074b4:	10002a26 	beq	r2,zero,8007560 <__sfvwrite_r+0x108>
 80074b8:	05a00034 	movhi	r22,32768
 80074bc:	0027883a 	mov	r19,zero
 80074c0:	0025883a 	mov	r18,zero
 80074c4:	b5bf0004 	addi	r22,r22,-1024
 80074c8:	980d883a 	mov	r6,r19
 80074cc:	a809883a 	mov	r4,r21
 80074d0:	90004626 	beq	r18,zero,80075ec <__sfvwrite_r+0x194>
 80074d4:	900f883a 	mov	r7,r18
 80074d8:	b480022e 	bgeu	r22,r18,80074e4 <__sfvwrite_r+0x8c>
 80074dc:	01e00034 	movhi	r7,32768
 80074e0:	39ff0004 	addi	r7,r7,-1024
 80074e4:	80800917 	ldw	r2,36(r16)
 80074e8:	81400717 	ldw	r5,28(r16)
 80074ec:	103ee83a 	callr	r2
 80074f0:	0080570e 	bge	zero,r2,8007650 <__sfvwrite_r+0x1f8>
 80074f4:	a0c00217 	ldw	r3,8(r20)
 80074f8:	98a7883a 	add	r19,r19,r2
 80074fc:	90a5c83a 	sub	r18,r18,r2
 8007500:	1885c83a 	sub	r2,r3,r2
 8007504:	a0800215 	stw	r2,8(r20)
 8007508:	103fef1e 	bne	r2,zero,80074c8 <__alt_data_end+0xf80074c8>
 800750c:	0005883a 	mov	r2,zero
 8007510:	dfc00b17 	ldw	ra,44(sp)
 8007514:	df000a17 	ldw	fp,40(sp)
 8007518:	ddc00917 	ldw	r23,36(sp)
 800751c:	dd800817 	ldw	r22,32(sp)
 8007520:	dd400717 	ldw	r21,28(sp)
 8007524:	dd000617 	ldw	r20,24(sp)
 8007528:	dcc00517 	ldw	r19,20(sp)
 800752c:	dc800417 	ldw	r18,16(sp)
 8007530:	dc400317 	ldw	r17,12(sp)
 8007534:	dc000217 	ldw	r16,8(sp)
 8007538:	dec00c04 	addi	sp,sp,48
 800753c:	f800283a 	ret
 8007540:	800b883a 	mov	r5,r16
 8007544:	a809883a 	mov	r4,r21
 8007548:	80058280 	call	8005828 <__swsetup_r>
 800754c:	1000eb1e 	bne	r2,zero,80078fc <__sfvwrite_r+0x4a4>
 8007550:	80c0030b 	ldhu	r3,12(r16)
 8007554:	a4400017 	ldw	r17,0(r20)
 8007558:	1880008c 	andi	r2,r3,2
 800755c:	103fd61e 	bne	r2,zero,80074b8 <__alt_data_end+0xf80074b8>
 8007560:	1880004c 	andi	r2,r3,1
 8007564:	10003f1e 	bne	r2,zero,8007664 <__sfvwrite_r+0x20c>
 8007568:	0039883a 	mov	fp,zero
 800756c:	0025883a 	mov	r18,zero
 8007570:	90001a26 	beq	r18,zero,80075dc <__sfvwrite_r+0x184>
 8007574:	1880800c 	andi	r2,r3,512
 8007578:	84c00217 	ldw	r19,8(r16)
 800757c:	10002126 	beq	r2,zero,8007604 <__sfvwrite_r+0x1ac>
 8007580:	982f883a 	mov	r23,r19
 8007584:	94c09336 	bltu	r18,r19,80077d4 <__sfvwrite_r+0x37c>
 8007588:	1881200c 	andi	r2,r3,1152
 800758c:	10009e1e 	bne	r2,zero,8007808 <__sfvwrite_r+0x3b0>
 8007590:	81000017 	ldw	r4,0(r16)
 8007594:	b80d883a 	mov	r6,r23
 8007598:	e00b883a 	mov	r5,fp
 800759c:	8007b880 	call	8007b88 <memmove>
 80075a0:	80c00217 	ldw	r3,8(r16)
 80075a4:	81000017 	ldw	r4,0(r16)
 80075a8:	9005883a 	mov	r2,r18
 80075ac:	1ce7c83a 	sub	r19,r3,r19
 80075b0:	25cf883a 	add	r7,r4,r23
 80075b4:	84c00215 	stw	r19,8(r16)
 80075b8:	81c00015 	stw	r7,0(r16)
 80075bc:	a0c00217 	ldw	r3,8(r20)
 80075c0:	e0b9883a 	add	fp,fp,r2
 80075c4:	90a5c83a 	sub	r18,r18,r2
 80075c8:	18a7c83a 	sub	r19,r3,r2
 80075cc:	a4c00215 	stw	r19,8(r20)
 80075d0:	983fce26 	beq	r19,zero,800750c <__alt_data_end+0xf800750c>
 80075d4:	80c0030b 	ldhu	r3,12(r16)
 80075d8:	903fe61e 	bne	r18,zero,8007574 <__alt_data_end+0xf8007574>
 80075dc:	8f000017 	ldw	fp,0(r17)
 80075e0:	8c800117 	ldw	r18,4(r17)
 80075e4:	8c400204 	addi	r17,r17,8
 80075e8:	003fe106 	br	8007570 <__alt_data_end+0xf8007570>
 80075ec:	8cc00017 	ldw	r19,0(r17)
 80075f0:	8c800117 	ldw	r18,4(r17)
 80075f4:	8c400204 	addi	r17,r17,8
 80075f8:	003fb306 	br	80074c8 <__alt_data_end+0xf80074c8>
 80075fc:	0005883a 	mov	r2,zero
 8007600:	f800283a 	ret
 8007604:	81000017 	ldw	r4,0(r16)
 8007608:	80800417 	ldw	r2,16(r16)
 800760c:	11005736 	bltu	r2,r4,800776c <__sfvwrite_r+0x314>
 8007610:	85c00517 	ldw	r23,20(r16)
 8007614:	95c05536 	bltu	r18,r23,800776c <__sfvwrite_r+0x314>
 8007618:	00a00034 	movhi	r2,32768
 800761c:	10bfffc4 	addi	r2,r2,-1
 8007620:	9009883a 	mov	r4,r18
 8007624:	1480012e 	bgeu	r2,r18,800762c <__sfvwrite_r+0x1d4>
 8007628:	1009883a 	mov	r4,r2
 800762c:	b80b883a 	mov	r5,r23
 8007630:	800bc600 	call	800bc60 <__divsi3>
 8007634:	15cf383a 	mul	r7,r2,r23
 8007638:	81400717 	ldw	r5,28(r16)
 800763c:	80800917 	ldw	r2,36(r16)
 8007640:	e00d883a 	mov	r6,fp
 8007644:	a809883a 	mov	r4,r21
 8007648:	103ee83a 	callr	r2
 800764c:	00bfdb16 	blt	zero,r2,80075bc <__alt_data_end+0xf80075bc>
 8007650:	8080030b 	ldhu	r2,12(r16)
 8007654:	10801014 	ori	r2,r2,64
 8007658:	8080030d 	sth	r2,12(r16)
 800765c:	00bfffc4 	movi	r2,-1
 8007660:	003fab06 	br	8007510 <__alt_data_end+0xf8007510>
 8007664:	0027883a 	mov	r19,zero
 8007668:	0011883a 	mov	r8,zero
 800766c:	0039883a 	mov	fp,zero
 8007670:	0025883a 	mov	r18,zero
 8007674:	90001f26 	beq	r18,zero,80076f4 <__sfvwrite_r+0x29c>
 8007678:	40005a26 	beq	r8,zero,80077e4 <__sfvwrite_r+0x38c>
 800767c:	982d883a 	mov	r22,r19
 8007680:	94c0012e 	bgeu	r18,r19,8007688 <__sfvwrite_r+0x230>
 8007684:	902d883a 	mov	r22,r18
 8007688:	81000017 	ldw	r4,0(r16)
 800768c:	80800417 	ldw	r2,16(r16)
 8007690:	b02f883a 	mov	r23,r22
 8007694:	81c00517 	ldw	r7,20(r16)
 8007698:	1100032e 	bgeu	r2,r4,80076a8 <__sfvwrite_r+0x250>
 800769c:	80c00217 	ldw	r3,8(r16)
 80076a0:	38c7883a 	add	r3,r7,r3
 80076a4:	1d801816 	blt	r3,r22,8007708 <__sfvwrite_r+0x2b0>
 80076a8:	b1c03e16 	blt	r22,r7,80077a4 <__sfvwrite_r+0x34c>
 80076ac:	80800917 	ldw	r2,36(r16)
 80076b0:	81400717 	ldw	r5,28(r16)
 80076b4:	e00d883a 	mov	r6,fp
 80076b8:	da000115 	stw	r8,4(sp)
 80076bc:	a809883a 	mov	r4,r21
 80076c0:	103ee83a 	callr	r2
 80076c4:	102f883a 	mov	r23,r2
 80076c8:	da000117 	ldw	r8,4(sp)
 80076cc:	00bfe00e 	bge	zero,r2,8007650 <__alt_data_end+0xf8007650>
 80076d0:	9de7c83a 	sub	r19,r19,r23
 80076d4:	98001f26 	beq	r19,zero,8007754 <__sfvwrite_r+0x2fc>
 80076d8:	a0800217 	ldw	r2,8(r20)
 80076dc:	e5f9883a 	add	fp,fp,r23
 80076e0:	95e5c83a 	sub	r18,r18,r23
 80076e4:	15efc83a 	sub	r23,r2,r23
 80076e8:	a5c00215 	stw	r23,8(r20)
 80076ec:	b83f8726 	beq	r23,zero,800750c <__alt_data_end+0xf800750c>
 80076f0:	903fe11e 	bne	r18,zero,8007678 <__alt_data_end+0xf8007678>
 80076f4:	8f000017 	ldw	fp,0(r17)
 80076f8:	8c800117 	ldw	r18,4(r17)
 80076fc:	0011883a 	mov	r8,zero
 8007700:	8c400204 	addi	r17,r17,8
 8007704:	003fdb06 	br	8007674 <__alt_data_end+0xf8007674>
 8007708:	180d883a 	mov	r6,r3
 800770c:	e00b883a 	mov	r5,fp
 8007710:	da000115 	stw	r8,4(sp)
 8007714:	d8c00015 	stw	r3,0(sp)
 8007718:	8007b880 	call	8007b88 <memmove>
 800771c:	d8c00017 	ldw	r3,0(sp)
 8007720:	80800017 	ldw	r2,0(r16)
 8007724:	800b883a 	mov	r5,r16
 8007728:	a809883a 	mov	r4,r21
 800772c:	10c5883a 	add	r2,r2,r3
 8007730:	80800015 	stw	r2,0(r16)
 8007734:	d8c00015 	stw	r3,0(sp)
 8007738:	80009a40 	call	80009a4 <_fflush_r>
 800773c:	d8c00017 	ldw	r3,0(sp)
 8007740:	da000117 	ldw	r8,4(sp)
 8007744:	103fc21e 	bne	r2,zero,8007650 <__alt_data_end+0xf8007650>
 8007748:	182f883a 	mov	r23,r3
 800774c:	9de7c83a 	sub	r19,r19,r23
 8007750:	983fe11e 	bne	r19,zero,80076d8 <__alt_data_end+0xf80076d8>
 8007754:	800b883a 	mov	r5,r16
 8007758:	a809883a 	mov	r4,r21
 800775c:	80009a40 	call	80009a4 <_fflush_r>
 8007760:	103fbb1e 	bne	r2,zero,8007650 <__alt_data_end+0xf8007650>
 8007764:	0011883a 	mov	r8,zero
 8007768:	003fdb06 	br	80076d8 <__alt_data_end+0xf80076d8>
 800776c:	94c0012e 	bgeu	r18,r19,8007774 <__sfvwrite_r+0x31c>
 8007770:	9027883a 	mov	r19,r18
 8007774:	980d883a 	mov	r6,r19
 8007778:	e00b883a 	mov	r5,fp
 800777c:	8007b880 	call	8007b88 <memmove>
 8007780:	80800217 	ldw	r2,8(r16)
 8007784:	80c00017 	ldw	r3,0(r16)
 8007788:	14c5c83a 	sub	r2,r2,r19
 800778c:	1cc7883a 	add	r3,r3,r19
 8007790:	80800215 	stw	r2,8(r16)
 8007794:	80c00015 	stw	r3,0(r16)
 8007798:	10004326 	beq	r2,zero,80078a8 <__sfvwrite_r+0x450>
 800779c:	9805883a 	mov	r2,r19
 80077a0:	003f8606 	br	80075bc <__alt_data_end+0xf80075bc>
 80077a4:	b00d883a 	mov	r6,r22
 80077a8:	e00b883a 	mov	r5,fp
 80077ac:	da000115 	stw	r8,4(sp)
 80077b0:	8007b880 	call	8007b88 <memmove>
 80077b4:	80800217 	ldw	r2,8(r16)
 80077b8:	80c00017 	ldw	r3,0(r16)
 80077bc:	da000117 	ldw	r8,4(sp)
 80077c0:	1585c83a 	sub	r2,r2,r22
 80077c4:	1dad883a 	add	r22,r3,r22
 80077c8:	80800215 	stw	r2,8(r16)
 80077cc:	85800015 	stw	r22,0(r16)
 80077d0:	003fbf06 	br	80076d0 <__alt_data_end+0xf80076d0>
 80077d4:	81000017 	ldw	r4,0(r16)
 80077d8:	9027883a 	mov	r19,r18
 80077dc:	902f883a 	mov	r23,r18
 80077e0:	003f6c06 	br	8007594 <__alt_data_end+0xf8007594>
 80077e4:	900d883a 	mov	r6,r18
 80077e8:	01400284 	movi	r5,10
 80077ec:	e009883a 	mov	r4,fp
 80077f0:	8007aa40 	call	8007aa4 <memchr>
 80077f4:	10003e26 	beq	r2,zero,80078f0 <__sfvwrite_r+0x498>
 80077f8:	10800044 	addi	r2,r2,1
 80077fc:	1727c83a 	sub	r19,r2,fp
 8007800:	02000044 	movi	r8,1
 8007804:	003f9d06 	br	800767c <__alt_data_end+0xf800767c>
 8007808:	80800517 	ldw	r2,20(r16)
 800780c:	81400417 	ldw	r5,16(r16)
 8007810:	81c00017 	ldw	r7,0(r16)
 8007814:	10a7883a 	add	r19,r2,r2
 8007818:	9885883a 	add	r2,r19,r2
 800781c:	1026d7fa 	srli	r19,r2,31
 8007820:	396dc83a 	sub	r22,r7,r5
 8007824:	b1000044 	addi	r4,r22,1
 8007828:	9885883a 	add	r2,r19,r2
 800782c:	1027d07a 	srai	r19,r2,1
 8007830:	2485883a 	add	r2,r4,r18
 8007834:	980d883a 	mov	r6,r19
 8007838:	9880022e 	bgeu	r19,r2,8007844 <__sfvwrite_r+0x3ec>
 800783c:	1027883a 	mov	r19,r2
 8007840:	100d883a 	mov	r6,r2
 8007844:	18c1000c 	andi	r3,r3,1024
 8007848:	18001c26 	beq	r3,zero,80078bc <__sfvwrite_r+0x464>
 800784c:	300b883a 	mov	r5,r6
 8007850:	a809883a 	mov	r4,r21
 8007854:	8001d900 	call	8001d90 <_malloc_r>
 8007858:	102f883a 	mov	r23,r2
 800785c:	10002926 	beq	r2,zero,8007904 <__sfvwrite_r+0x4ac>
 8007860:	81400417 	ldw	r5,16(r16)
 8007864:	b00d883a 	mov	r6,r22
 8007868:	1009883a 	mov	r4,r2
 800786c:	800259c0 	call	800259c <memcpy>
 8007870:	8080030b 	ldhu	r2,12(r16)
 8007874:	00fedfc4 	movi	r3,-1153
 8007878:	10c4703a 	and	r2,r2,r3
 800787c:	10802014 	ori	r2,r2,128
 8007880:	8080030d 	sth	r2,12(r16)
 8007884:	bd89883a 	add	r4,r23,r22
 8007888:	9d8fc83a 	sub	r7,r19,r22
 800788c:	85c00415 	stw	r23,16(r16)
 8007890:	84c00515 	stw	r19,20(r16)
 8007894:	81000015 	stw	r4,0(r16)
 8007898:	9027883a 	mov	r19,r18
 800789c:	81c00215 	stw	r7,8(r16)
 80078a0:	902f883a 	mov	r23,r18
 80078a4:	003f3b06 	br	8007594 <__alt_data_end+0xf8007594>
 80078a8:	800b883a 	mov	r5,r16
 80078ac:	a809883a 	mov	r4,r21
 80078b0:	80009a40 	call	80009a4 <_fflush_r>
 80078b4:	103fb926 	beq	r2,zero,800779c <__alt_data_end+0xf800779c>
 80078b8:	003f6506 	br	8007650 <__alt_data_end+0xf8007650>
 80078bc:	a809883a 	mov	r4,r21
 80078c0:	8008ea80 	call	8008ea8 <_realloc_r>
 80078c4:	102f883a 	mov	r23,r2
 80078c8:	103fee1e 	bne	r2,zero,8007884 <__alt_data_end+0xf8007884>
 80078cc:	81400417 	ldw	r5,16(r16)
 80078d0:	a809883a 	mov	r4,r21
 80078d4:	80012600 	call	8001260 <_free_r>
 80078d8:	8080030b 	ldhu	r2,12(r16)
 80078dc:	00ffdfc4 	movi	r3,-129
 80078e0:	1884703a 	and	r2,r3,r2
 80078e4:	00c00304 	movi	r3,12
 80078e8:	a8c00015 	stw	r3,0(r21)
 80078ec:	003f5906 	br	8007654 <__alt_data_end+0xf8007654>
 80078f0:	94c00044 	addi	r19,r18,1
 80078f4:	02000044 	movi	r8,1
 80078f8:	003f6006 	br	800767c <__alt_data_end+0xf800767c>
 80078fc:	00bfffc4 	movi	r2,-1
 8007900:	003f0306 	br	8007510 <__alt_data_end+0xf8007510>
 8007904:	00800304 	movi	r2,12
 8007908:	a8800015 	stw	r2,0(r21)
 800790c:	8080030b 	ldhu	r2,12(r16)
 8007910:	003f5006 	br	8007654 <__alt_data_end+0xf8007654>

08007914 <_isatty_r>:
 8007914:	defffd04 	addi	sp,sp,-12
 8007918:	dc000015 	stw	r16,0(sp)
 800791c:	040200b4 	movhi	r16,2050
 8007920:	dc400115 	stw	r17,4(sp)
 8007924:	8425ad04 	addi	r16,r16,-26956
 8007928:	2023883a 	mov	r17,r4
 800792c:	2809883a 	mov	r4,r5
 8007930:	dfc00215 	stw	ra,8(sp)
 8007934:	80000015 	stw	zero,0(r16)
 8007938:	800e6dc0 	call	800e6dc <isatty>
 800793c:	00ffffc4 	movi	r3,-1
 8007940:	10c00526 	beq	r2,r3,8007958 <_isatty_r+0x44>
 8007944:	dfc00217 	ldw	ra,8(sp)
 8007948:	dc400117 	ldw	r17,4(sp)
 800794c:	dc000017 	ldw	r16,0(sp)
 8007950:	dec00304 	addi	sp,sp,12
 8007954:	f800283a 	ret
 8007958:	80c00017 	ldw	r3,0(r16)
 800795c:	183ff926 	beq	r3,zero,8007944 <__alt_data_end+0xf8007944>
 8007960:	88c00015 	stw	r3,0(r17)
 8007964:	003ff706 	br	8007944 <__alt_data_end+0xf8007944>

08007968 <_setlocale_r>:
 8007968:	30001b26 	beq	r6,zero,80079d8 <_setlocale_r+0x70>
 800796c:	01420074 	movhi	r5,2049
 8007970:	defffe04 	addi	sp,sp,-8
 8007974:	29576204 	addi	r5,r5,23944
 8007978:	3009883a 	mov	r4,r6
 800797c:	dc000015 	stw	r16,0(sp)
 8007980:	dfc00115 	stw	ra,4(sp)
 8007984:	3021883a 	mov	r16,r6
 8007988:	80094800 	call	8009480 <strcmp>
 800798c:	1000061e 	bne	r2,zero,80079a8 <_setlocale_r+0x40>
 8007990:	00820074 	movhi	r2,2049
 8007994:	10958204 	addi	r2,r2,22024
 8007998:	dfc00117 	ldw	ra,4(sp)
 800799c:	dc000017 	ldw	r16,0(sp)
 80079a0:	dec00204 	addi	sp,sp,8
 80079a4:	f800283a 	ret
 80079a8:	01420074 	movhi	r5,2049
 80079ac:	29558204 	addi	r5,r5,22024
 80079b0:	8009883a 	mov	r4,r16
 80079b4:	80094800 	call	8009480 <strcmp>
 80079b8:	103ff526 	beq	r2,zero,8007990 <__alt_data_end+0xf8007990>
 80079bc:	01420074 	movhi	r5,2049
 80079c0:	29574d04 	addi	r5,r5,23860
 80079c4:	8009883a 	mov	r4,r16
 80079c8:	80094800 	call	8009480 <strcmp>
 80079cc:	103ff026 	beq	r2,zero,8007990 <__alt_data_end+0xf8007990>
 80079d0:	0005883a 	mov	r2,zero
 80079d4:	003ff006 	br	8007998 <__alt_data_end+0xf8007998>
 80079d8:	00820074 	movhi	r2,2049
 80079dc:	10958204 	addi	r2,r2,22024
 80079e0:	f800283a 	ret

080079e4 <__locale_charset>:
 80079e4:	00820074 	movhi	r2,2049
 80079e8:	109a1d04 	addi	r2,r2,26740
 80079ec:	f800283a 	ret

080079f0 <__locale_mb_cur_max>:
 80079f0:	00820074 	movhi	r2,2049
 80079f4:	109ecf04 	addi	r2,r2,31548
 80079f8:	10800017 	ldw	r2,0(r2)
 80079fc:	f800283a 	ret

08007a00 <__locale_msgcharset>:
 8007a00:	00820074 	movhi	r2,2049
 8007a04:	109a1504 	addi	r2,r2,26708
 8007a08:	f800283a 	ret

08007a0c <__locale_cjk_lang>:
 8007a0c:	0005883a 	mov	r2,zero
 8007a10:	f800283a 	ret

08007a14 <_localeconv_r>:
 8007a14:	00820074 	movhi	r2,2049
 8007a18:	109a2504 	addi	r2,r2,26772
 8007a1c:	f800283a 	ret

08007a20 <setlocale>:
 8007a20:	00820074 	movhi	r2,2049
 8007a24:	109ecc04 	addi	r2,r2,31536
 8007a28:	280d883a 	mov	r6,r5
 8007a2c:	200b883a 	mov	r5,r4
 8007a30:	11000017 	ldw	r4,0(r2)
 8007a34:	80079681 	jmpi	8007968 <_setlocale_r>

08007a38 <localeconv>:
 8007a38:	00820074 	movhi	r2,2049
 8007a3c:	109a2504 	addi	r2,r2,26772
 8007a40:	f800283a 	ret

08007a44 <_lseek_r>:
 8007a44:	defffd04 	addi	sp,sp,-12
 8007a48:	2805883a 	mov	r2,r5
 8007a4c:	dc000015 	stw	r16,0(sp)
 8007a50:	040200b4 	movhi	r16,2050
 8007a54:	dc400115 	stw	r17,4(sp)
 8007a58:	300b883a 	mov	r5,r6
 8007a5c:	8425ad04 	addi	r16,r16,-26956
 8007a60:	2023883a 	mov	r17,r4
 8007a64:	380d883a 	mov	r6,r7
 8007a68:	1009883a 	mov	r4,r2
 8007a6c:	dfc00215 	stw	ra,8(sp)
 8007a70:	80000015 	stw	zero,0(r16)
 8007a74:	800e8a80 	call	800e8a8 <lseek>
 8007a78:	00ffffc4 	movi	r3,-1
 8007a7c:	10c00526 	beq	r2,r3,8007a94 <_lseek_r+0x50>
 8007a80:	dfc00217 	ldw	ra,8(sp)
 8007a84:	dc400117 	ldw	r17,4(sp)
 8007a88:	dc000017 	ldw	r16,0(sp)
 8007a8c:	dec00304 	addi	sp,sp,12
 8007a90:	f800283a 	ret
 8007a94:	80c00017 	ldw	r3,0(r16)
 8007a98:	183ff926 	beq	r3,zero,8007a80 <__alt_data_end+0xf8007a80>
 8007a9c:	88c00015 	stw	r3,0(r17)
 8007aa0:	003ff706 	br	8007a80 <__alt_data_end+0xf8007a80>

08007aa4 <memchr>:
 8007aa4:	208000cc 	andi	r2,r4,3
 8007aa8:	280f883a 	mov	r7,r5
 8007aac:	10003426 	beq	r2,zero,8007b80 <memchr+0xdc>
 8007ab0:	30bfffc4 	addi	r2,r6,-1
 8007ab4:	30001a26 	beq	r6,zero,8007b20 <memchr+0x7c>
 8007ab8:	20c00003 	ldbu	r3,0(r4)
 8007abc:	29803fcc 	andi	r6,r5,255
 8007ac0:	30c0051e 	bne	r6,r3,8007ad8 <memchr+0x34>
 8007ac4:	00001806 	br	8007b28 <memchr+0x84>
 8007ac8:	10001526 	beq	r2,zero,8007b20 <memchr+0x7c>
 8007acc:	20c00003 	ldbu	r3,0(r4)
 8007ad0:	10bfffc4 	addi	r2,r2,-1
 8007ad4:	30c01426 	beq	r6,r3,8007b28 <memchr+0x84>
 8007ad8:	21000044 	addi	r4,r4,1
 8007adc:	20c000cc 	andi	r3,r4,3
 8007ae0:	183ff91e 	bne	r3,zero,8007ac8 <__alt_data_end+0xf8007ac8>
 8007ae4:	020000c4 	movi	r8,3
 8007ae8:	40801136 	bltu	r8,r2,8007b30 <memchr+0x8c>
 8007aec:	10000c26 	beq	r2,zero,8007b20 <memchr+0x7c>
 8007af0:	20c00003 	ldbu	r3,0(r4)
 8007af4:	29403fcc 	andi	r5,r5,255
 8007af8:	28c00b26 	beq	r5,r3,8007b28 <memchr+0x84>
 8007afc:	20c00044 	addi	r3,r4,1
 8007b00:	39803fcc 	andi	r6,r7,255
 8007b04:	2089883a 	add	r4,r4,r2
 8007b08:	00000306 	br	8007b18 <memchr+0x74>
 8007b0c:	18c00044 	addi	r3,r3,1
 8007b10:	197fffc3 	ldbu	r5,-1(r3)
 8007b14:	31400526 	beq	r6,r5,8007b2c <memchr+0x88>
 8007b18:	1805883a 	mov	r2,r3
 8007b1c:	20fffb1e 	bne	r4,r3,8007b0c <__alt_data_end+0xf8007b0c>
 8007b20:	0005883a 	mov	r2,zero
 8007b24:	f800283a 	ret
 8007b28:	2005883a 	mov	r2,r4
 8007b2c:	f800283a 	ret
 8007b30:	28c03fcc 	andi	r3,r5,255
 8007b34:	1812923a 	slli	r9,r3,8
 8007b38:	02ffbff4 	movhi	r11,65279
 8007b3c:	02a02074 	movhi	r10,32897
 8007b40:	48d2b03a 	or	r9,r9,r3
 8007b44:	4806943a 	slli	r3,r9,16
 8007b48:	5affbfc4 	addi	r11,r11,-257
 8007b4c:	52a02004 	addi	r10,r10,-32640
 8007b50:	48d2b03a 	or	r9,r9,r3
 8007b54:	20c00017 	ldw	r3,0(r4)
 8007b58:	48c6f03a 	xor	r3,r9,r3
 8007b5c:	1acd883a 	add	r6,r3,r11
 8007b60:	00c6303a 	nor	r3,zero,r3
 8007b64:	30c6703a 	and	r3,r6,r3
 8007b68:	1a86703a 	and	r3,r3,r10
 8007b6c:	183fe01e 	bne	r3,zero,8007af0 <__alt_data_end+0xf8007af0>
 8007b70:	10bfff04 	addi	r2,r2,-4
 8007b74:	21000104 	addi	r4,r4,4
 8007b78:	40bff636 	bltu	r8,r2,8007b54 <__alt_data_end+0xf8007b54>
 8007b7c:	003fdb06 	br	8007aec <__alt_data_end+0xf8007aec>
 8007b80:	3005883a 	mov	r2,r6
 8007b84:	003fd706 	br	8007ae4 <__alt_data_end+0xf8007ae4>

08007b88 <memmove>:
 8007b88:	2005883a 	mov	r2,r4
 8007b8c:	29000b2e 	bgeu	r5,r4,8007bbc <memmove+0x34>
 8007b90:	298f883a 	add	r7,r5,r6
 8007b94:	21c0092e 	bgeu	r4,r7,8007bbc <memmove+0x34>
 8007b98:	2187883a 	add	r3,r4,r6
 8007b9c:	198bc83a 	sub	r5,r3,r6
 8007ba0:	30004826 	beq	r6,zero,8007cc4 <memmove+0x13c>
 8007ba4:	39ffffc4 	addi	r7,r7,-1
 8007ba8:	39000003 	ldbu	r4,0(r7)
 8007bac:	18ffffc4 	addi	r3,r3,-1
 8007bb0:	19000005 	stb	r4,0(r3)
 8007bb4:	28fffb1e 	bne	r5,r3,8007ba4 <__alt_data_end+0xf8007ba4>
 8007bb8:	f800283a 	ret
 8007bbc:	00c003c4 	movi	r3,15
 8007bc0:	1980412e 	bgeu	r3,r6,8007cc8 <memmove+0x140>
 8007bc4:	2886b03a 	or	r3,r5,r2
 8007bc8:	18c000cc 	andi	r3,r3,3
 8007bcc:	1800401e 	bne	r3,zero,8007cd0 <memmove+0x148>
 8007bd0:	33fffc04 	addi	r15,r6,-16
 8007bd4:	781ed13a 	srli	r15,r15,4
 8007bd8:	28c00104 	addi	r3,r5,4
 8007bdc:	13400104 	addi	r13,r2,4
 8007be0:	781c913a 	slli	r14,r15,4
 8007be4:	2b000204 	addi	r12,r5,8
 8007be8:	12c00204 	addi	r11,r2,8
 8007bec:	73800504 	addi	r14,r14,20
 8007bf0:	2a800304 	addi	r10,r5,12
 8007bf4:	12400304 	addi	r9,r2,12
 8007bf8:	2b9d883a 	add	r14,r5,r14
 8007bfc:	2811883a 	mov	r8,r5
 8007c00:	100f883a 	mov	r7,r2
 8007c04:	41000017 	ldw	r4,0(r8)
 8007c08:	39c00404 	addi	r7,r7,16
 8007c0c:	18c00404 	addi	r3,r3,16
 8007c10:	393ffc15 	stw	r4,-16(r7)
 8007c14:	193ffc17 	ldw	r4,-16(r3)
 8007c18:	6b400404 	addi	r13,r13,16
 8007c1c:	5ac00404 	addi	r11,r11,16
 8007c20:	693ffc15 	stw	r4,-16(r13)
 8007c24:	61000017 	ldw	r4,0(r12)
 8007c28:	4a400404 	addi	r9,r9,16
 8007c2c:	42000404 	addi	r8,r8,16
 8007c30:	593ffc15 	stw	r4,-16(r11)
 8007c34:	51000017 	ldw	r4,0(r10)
 8007c38:	63000404 	addi	r12,r12,16
 8007c3c:	52800404 	addi	r10,r10,16
 8007c40:	493ffc15 	stw	r4,-16(r9)
 8007c44:	1bbfef1e 	bne	r3,r14,8007c04 <__alt_data_end+0xf8007c04>
 8007c48:	79000044 	addi	r4,r15,1
 8007c4c:	2008913a 	slli	r4,r4,4
 8007c50:	328003cc 	andi	r10,r6,15
 8007c54:	02c000c4 	movi	r11,3
 8007c58:	1107883a 	add	r3,r2,r4
 8007c5c:	290b883a 	add	r5,r5,r4
 8007c60:	5a801e2e 	bgeu	r11,r10,8007cdc <memmove+0x154>
 8007c64:	1813883a 	mov	r9,r3
 8007c68:	2811883a 	mov	r8,r5
 8007c6c:	500f883a 	mov	r7,r10
 8007c70:	41000017 	ldw	r4,0(r8)
 8007c74:	4a400104 	addi	r9,r9,4
 8007c78:	39ffff04 	addi	r7,r7,-4
 8007c7c:	493fff15 	stw	r4,-4(r9)
 8007c80:	42000104 	addi	r8,r8,4
 8007c84:	59fffa36 	bltu	r11,r7,8007c70 <__alt_data_end+0xf8007c70>
 8007c88:	513fff04 	addi	r4,r10,-4
 8007c8c:	2008d0ba 	srli	r4,r4,2
 8007c90:	318000cc 	andi	r6,r6,3
 8007c94:	21000044 	addi	r4,r4,1
 8007c98:	2109883a 	add	r4,r4,r4
 8007c9c:	2109883a 	add	r4,r4,r4
 8007ca0:	1907883a 	add	r3,r3,r4
 8007ca4:	290b883a 	add	r5,r5,r4
 8007ca8:	30000b26 	beq	r6,zero,8007cd8 <memmove+0x150>
 8007cac:	198d883a 	add	r6,r3,r6
 8007cb0:	29c00003 	ldbu	r7,0(r5)
 8007cb4:	18c00044 	addi	r3,r3,1
 8007cb8:	29400044 	addi	r5,r5,1
 8007cbc:	19ffffc5 	stb	r7,-1(r3)
 8007cc0:	19bffb1e 	bne	r3,r6,8007cb0 <__alt_data_end+0xf8007cb0>
 8007cc4:	f800283a 	ret
 8007cc8:	1007883a 	mov	r3,r2
 8007ccc:	003ff606 	br	8007ca8 <__alt_data_end+0xf8007ca8>
 8007cd0:	1007883a 	mov	r3,r2
 8007cd4:	003ff506 	br	8007cac <__alt_data_end+0xf8007cac>
 8007cd8:	f800283a 	ret
 8007cdc:	500d883a 	mov	r6,r10
 8007ce0:	003ff106 	br	8007ca8 <__alt_data_end+0xf8007ca8>

08007ce4 <_Balloc>:
 8007ce4:	20801317 	ldw	r2,76(r4)
 8007ce8:	defffc04 	addi	sp,sp,-16
 8007cec:	dc400115 	stw	r17,4(sp)
 8007cf0:	dc000015 	stw	r16,0(sp)
 8007cf4:	dfc00315 	stw	ra,12(sp)
 8007cf8:	dc800215 	stw	r18,8(sp)
 8007cfc:	2023883a 	mov	r17,r4
 8007d00:	2821883a 	mov	r16,r5
 8007d04:	10000f26 	beq	r2,zero,8007d44 <_Balloc+0x60>
 8007d08:	8407883a 	add	r3,r16,r16
 8007d0c:	18c7883a 	add	r3,r3,r3
 8007d10:	10c7883a 	add	r3,r2,r3
 8007d14:	18800017 	ldw	r2,0(r3)
 8007d18:	10001126 	beq	r2,zero,8007d60 <_Balloc+0x7c>
 8007d1c:	11000017 	ldw	r4,0(r2)
 8007d20:	19000015 	stw	r4,0(r3)
 8007d24:	10000415 	stw	zero,16(r2)
 8007d28:	10000315 	stw	zero,12(r2)
 8007d2c:	dfc00317 	ldw	ra,12(sp)
 8007d30:	dc800217 	ldw	r18,8(sp)
 8007d34:	dc400117 	ldw	r17,4(sp)
 8007d38:	dc000017 	ldw	r16,0(sp)
 8007d3c:	dec00404 	addi	sp,sp,16
 8007d40:	f800283a 	ret
 8007d44:	01800844 	movi	r6,33
 8007d48:	01400104 	movi	r5,4
 8007d4c:	800acfc0 	call	800acfc <_calloc_r>
 8007d50:	88801315 	stw	r2,76(r17)
 8007d54:	103fec1e 	bne	r2,zero,8007d08 <__alt_data_end+0xf8007d08>
 8007d58:	0005883a 	mov	r2,zero
 8007d5c:	003ff306 	br	8007d2c <__alt_data_end+0xf8007d2c>
 8007d60:	01400044 	movi	r5,1
 8007d64:	2c24983a 	sll	r18,r5,r16
 8007d68:	8809883a 	mov	r4,r17
 8007d6c:	91800144 	addi	r6,r18,5
 8007d70:	318d883a 	add	r6,r6,r6
 8007d74:	318d883a 	add	r6,r6,r6
 8007d78:	800acfc0 	call	800acfc <_calloc_r>
 8007d7c:	103ff626 	beq	r2,zero,8007d58 <__alt_data_end+0xf8007d58>
 8007d80:	14000115 	stw	r16,4(r2)
 8007d84:	14800215 	stw	r18,8(r2)
 8007d88:	003fe606 	br	8007d24 <__alt_data_end+0xf8007d24>

08007d8c <_Bfree>:
 8007d8c:	28000826 	beq	r5,zero,8007db0 <_Bfree+0x24>
 8007d90:	28c00117 	ldw	r3,4(r5)
 8007d94:	20801317 	ldw	r2,76(r4)
 8007d98:	18c7883a 	add	r3,r3,r3
 8007d9c:	18c7883a 	add	r3,r3,r3
 8007da0:	10c5883a 	add	r2,r2,r3
 8007da4:	10c00017 	ldw	r3,0(r2)
 8007da8:	28c00015 	stw	r3,0(r5)
 8007dac:	11400015 	stw	r5,0(r2)
 8007db0:	f800283a 	ret

08007db4 <__multadd>:
 8007db4:	defffa04 	addi	sp,sp,-24
 8007db8:	dc800315 	stw	r18,12(sp)
 8007dbc:	dc400215 	stw	r17,8(sp)
 8007dc0:	dc000115 	stw	r16,4(sp)
 8007dc4:	2823883a 	mov	r17,r5
 8007dc8:	2c000417 	ldw	r16,16(r5)
 8007dcc:	dfc00515 	stw	ra,20(sp)
 8007dd0:	dcc00415 	stw	r19,16(sp)
 8007dd4:	2025883a 	mov	r18,r4
 8007dd8:	29400504 	addi	r5,r5,20
 8007ddc:	0011883a 	mov	r8,zero
 8007de0:	28c00017 	ldw	r3,0(r5)
 8007de4:	29400104 	addi	r5,r5,4
 8007de8:	42000044 	addi	r8,r8,1
 8007dec:	18bfffcc 	andi	r2,r3,65535
 8007df0:	1185383a 	mul	r2,r2,r6
 8007df4:	1806d43a 	srli	r3,r3,16
 8007df8:	11cf883a 	add	r7,r2,r7
 8007dfc:	3808d43a 	srli	r4,r7,16
 8007e00:	1987383a 	mul	r3,r3,r6
 8007e04:	38bfffcc 	andi	r2,r7,65535
 8007e08:	1907883a 	add	r3,r3,r4
 8007e0c:	1808943a 	slli	r4,r3,16
 8007e10:	180ed43a 	srli	r7,r3,16
 8007e14:	2085883a 	add	r2,r4,r2
 8007e18:	28bfff15 	stw	r2,-4(r5)
 8007e1c:	443ff016 	blt	r8,r16,8007de0 <__alt_data_end+0xf8007de0>
 8007e20:	38000926 	beq	r7,zero,8007e48 <__multadd+0x94>
 8007e24:	88800217 	ldw	r2,8(r17)
 8007e28:	80800f0e 	bge	r16,r2,8007e68 <__multadd+0xb4>
 8007e2c:	80800144 	addi	r2,r16,5
 8007e30:	1085883a 	add	r2,r2,r2
 8007e34:	1085883a 	add	r2,r2,r2
 8007e38:	8885883a 	add	r2,r17,r2
 8007e3c:	11c00015 	stw	r7,0(r2)
 8007e40:	84000044 	addi	r16,r16,1
 8007e44:	8c000415 	stw	r16,16(r17)
 8007e48:	8805883a 	mov	r2,r17
 8007e4c:	dfc00517 	ldw	ra,20(sp)
 8007e50:	dcc00417 	ldw	r19,16(sp)
 8007e54:	dc800317 	ldw	r18,12(sp)
 8007e58:	dc400217 	ldw	r17,8(sp)
 8007e5c:	dc000117 	ldw	r16,4(sp)
 8007e60:	dec00604 	addi	sp,sp,24
 8007e64:	f800283a 	ret
 8007e68:	89400117 	ldw	r5,4(r17)
 8007e6c:	9009883a 	mov	r4,r18
 8007e70:	d9c00015 	stw	r7,0(sp)
 8007e74:	29400044 	addi	r5,r5,1
 8007e78:	8007ce40 	call	8007ce4 <_Balloc>
 8007e7c:	89800417 	ldw	r6,16(r17)
 8007e80:	89400304 	addi	r5,r17,12
 8007e84:	11000304 	addi	r4,r2,12
 8007e88:	31800084 	addi	r6,r6,2
 8007e8c:	318d883a 	add	r6,r6,r6
 8007e90:	318d883a 	add	r6,r6,r6
 8007e94:	1027883a 	mov	r19,r2
 8007e98:	800259c0 	call	800259c <memcpy>
 8007e9c:	d9c00017 	ldw	r7,0(sp)
 8007ea0:	88000a26 	beq	r17,zero,8007ecc <__multadd+0x118>
 8007ea4:	88c00117 	ldw	r3,4(r17)
 8007ea8:	90801317 	ldw	r2,76(r18)
 8007eac:	18c7883a 	add	r3,r3,r3
 8007eb0:	18c7883a 	add	r3,r3,r3
 8007eb4:	10c5883a 	add	r2,r2,r3
 8007eb8:	10c00017 	ldw	r3,0(r2)
 8007ebc:	88c00015 	stw	r3,0(r17)
 8007ec0:	14400015 	stw	r17,0(r2)
 8007ec4:	9823883a 	mov	r17,r19
 8007ec8:	003fd806 	br	8007e2c <__alt_data_end+0xf8007e2c>
 8007ecc:	9823883a 	mov	r17,r19
 8007ed0:	003fd606 	br	8007e2c <__alt_data_end+0xf8007e2c>

08007ed4 <__s2b>:
 8007ed4:	defff904 	addi	sp,sp,-28
 8007ed8:	dc400115 	stw	r17,4(sp)
 8007edc:	dc000015 	stw	r16,0(sp)
 8007ee0:	2023883a 	mov	r17,r4
 8007ee4:	2821883a 	mov	r16,r5
 8007ee8:	39000204 	addi	r4,r7,8
 8007eec:	01400244 	movi	r5,9
 8007ef0:	dcc00315 	stw	r19,12(sp)
 8007ef4:	dc800215 	stw	r18,8(sp)
 8007ef8:	dfc00615 	stw	ra,24(sp)
 8007efc:	dd400515 	stw	r21,20(sp)
 8007f00:	dd000415 	stw	r20,16(sp)
 8007f04:	3825883a 	mov	r18,r7
 8007f08:	3027883a 	mov	r19,r6
 8007f0c:	800bc600 	call	800bc60 <__divsi3>
 8007f10:	00c00044 	movi	r3,1
 8007f14:	000b883a 	mov	r5,zero
 8007f18:	1880030e 	bge	r3,r2,8007f28 <__s2b+0x54>
 8007f1c:	18c7883a 	add	r3,r3,r3
 8007f20:	29400044 	addi	r5,r5,1
 8007f24:	18bffd16 	blt	r3,r2,8007f1c <__alt_data_end+0xf8007f1c>
 8007f28:	8809883a 	mov	r4,r17
 8007f2c:	8007ce40 	call	8007ce4 <_Balloc>
 8007f30:	d8c00717 	ldw	r3,28(sp)
 8007f34:	10c00515 	stw	r3,20(r2)
 8007f38:	00c00044 	movi	r3,1
 8007f3c:	10c00415 	stw	r3,16(r2)
 8007f40:	00c00244 	movi	r3,9
 8007f44:	1cc0210e 	bge	r3,r19,8007fcc <__s2b+0xf8>
 8007f48:	80eb883a 	add	r21,r16,r3
 8007f4c:	a829883a 	mov	r20,r21
 8007f50:	84e1883a 	add	r16,r16,r19
 8007f54:	a1c00007 	ldb	r7,0(r20)
 8007f58:	01800284 	movi	r6,10
 8007f5c:	a5000044 	addi	r20,r20,1
 8007f60:	100b883a 	mov	r5,r2
 8007f64:	39fff404 	addi	r7,r7,-48
 8007f68:	8809883a 	mov	r4,r17
 8007f6c:	8007db40 	call	8007db4 <__multadd>
 8007f70:	a43ff81e 	bne	r20,r16,8007f54 <__alt_data_end+0xf8007f54>
 8007f74:	ace1883a 	add	r16,r21,r19
 8007f78:	843ffe04 	addi	r16,r16,-8
 8007f7c:	9c800a0e 	bge	r19,r18,8007fa8 <__s2b+0xd4>
 8007f80:	94e5c83a 	sub	r18,r18,r19
 8007f84:	84a5883a 	add	r18,r16,r18
 8007f88:	81c00007 	ldb	r7,0(r16)
 8007f8c:	01800284 	movi	r6,10
 8007f90:	84000044 	addi	r16,r16,1
 8007f94:	100b883a 	mov	r5,r2
 8007f98:	39fff404 	addi	r7,r7,-48
 8007f9c:	8809883a 	mov	r4,r17
 8007fa0:	8007db40 	call	8007db4 <__multadd>
 8007fa4:	84bff81e 	bne	r16,r18,8007f88 <__alt_data_end+0xf8007f88>
 8007fa8:	dfc00617 	ldw	ra,24(sp)
 8007fac:	dd400517 	ldw	r21,20(sp)
 8007fb0:	dd000417 	ldw	r20,16(sp)
 8007fb4:	dcc00317 	ldw	r19,12(sp)
 8007fb8:	dc800217 	ldw	r18,8(sp)
 8007fbc:	dc400117 	ldw	r17,4(sp)
 8007fc0:	dc000017 	ldw	r16,0(sp)
 8007fc4:	dec00704 	addi	sp,sp,28
 8007fc8:	f800283a 	ret
 8007fcc:	84000284 	addi	r16,r16,10
 8007fd0:	1827883a 	mov	r19,r3
 8007fd4:	003fe906 	br	8007f7c <__alt_data_end+0xf8007f7c>

08007fd8 <__hi0bits>:
 8007fd8:	20bfffec 	andhi	r2,r4,65535
 8007fdc:	1000141e 	bne	r2,zero,8008030 <__hi0bits+0x58>
 8007fe0:	2008943a 	slli	r4,r4,16
 8007fe4:	00800404 	movi	r2,16
 8007fe8:	20ffc02c 	andhi	r3,r4,65280
 8007fec:	1800021e 	bne	r3,zero,8007ff8 <__hi0bits+0x20>
 8007ff0:	2008923a 	slli	r4,r4,8
 8007ff4:	10800204 	addi	r2,r2,8
 8007ff8:	20fc002c 	andhi	r3,r4,61440
 8007ffc:	1800021e 	bne	r3,zero,8008008 <__hi0bits+0x30>
 8008000:	2008913a 	slli	r4,r4,4
 8008004:	10800104 	addi	r2,r2,4
 8008008:	20f0002c 	andhi	r3,r4,49152
 800800c:	1800031e 	bne	r3,zero,800801c <__hi0bits+0x44>
 8008010:	2109883a 	add	r4,r4,r4
 8008014:	10800084 	addi	r2,r2,2
 8008018:	2109883a 	add	r4,r4,r4
 800801c:	20000316 	blt	r4,zero,800802c <__hi0bits+0x54>
 8008020:	2110002c 	andhi	r4,r4,16384
 8008024:	2000041e 	bne	r4,zero,8008038 <__hi0bits+0x60>
 8008028:	00800804 	movi	r2,32
 800802c:	f800283a 	ret
 8008030:	0005883a 	mov	r2,zero
 8008034:	003fec06 	br	8007fe8 <__alt_data_end+0xf8007fe8>
 8008038:	10800044 	addi	r2,r2,1
 800803c:	f800283a 	ret

08008040 <__lo0bits>:
 8008040:	20c00017 	ldw	r3,0(r4)
 8008044:	188001cc 	andi	r2,r3,7
 8008048:	10000826 	beq	r2,zero,800806c <__lo0bits+0x2c>
 800804c:	1880004c 	andi	r2,r3,1
 8008050:	1000211e 	bne	r2,zero,80080d8 <__lo0bits+0x98>
 8008054:	1880008c 	andi	r2,r3,2
 8008058:	1000211e 	bne	r2,zero,80080e0 <__lo0bits+0xa0>
 800805c:	1806d0ba 	srli	r3,r3,2
 8008060:	00800084 	movi	r2,2
 8008064:	20c00015 	stw	r3,0(r4)
 8008068:	f800283a 	ret
 800806c:	18bfffcc 	andi	r2,r3,65535
 8008070:	10001326 	beq	r2,zero,80080c0 <__lo0bits+0x80>
 8008074:	0005883a 	mov	r2,zero
 8008078:	19403fcc 	andi	r5,r3,255
 800807c:	2800021e 	bne	r5,zero,8008088 <__lo0bits+0x48>
 8008080:	1806d23a 	srli	r3,r3,8
 8008084:	10800204 	addi	r2,r2,8
 8008088:	194003cc 	andi	r5,r3,15
 800808c:	2800021e 	bne	r5,zero,8008098 <__lo0bits+0x58>
 8008090:	1806d13a 	srli	r3,r3,4
 8008094:	10800104 	addi	r2,r2,4
 8008098:	194000cc 	andi	r5,r3,3
 800809c:	2800021e 	bne	r5,zero,80080a8 <__lo0bits+0x68>
 80080a0:	1806d0ba 	srli	r3,r3,2
 80080a4:	10800084 	addi	r2,r2,2
 80080a8:	1940004c 	andi	r5,r3,1
 80080ac:	2800081e 	bne	r5,zero,80080d0 <__lo0bits+0x90>
 80080b0:	1806d07a 	srli	r3,r3,1
 80080b4:	1800051e 	bne	r3,zero,80080cc <__lo0bits+0x8c>
 80080b8:	00800804 	movi	r2,32
 80080bc:	f800283a 	ret
 80080c0:	1806d43a 	srli	r3,r3,16
 80080c4:	00800404 	movi	r2,16
 80080c8:	003feb06 	br	8008078 <__alt_data_end+0xf8008078>
 80080cc:	10800044 	addi	r2,r2,1
 80080d0:	20c00015 	stw	r3,0(r4)
 80080d4:	f800283a 	ret
 80080d8:	0005883a 	mov	r2,zero
 80080dc:	f800283a 	ret
 80080e0:	1806d07a 	srli	r3,r3,1
 80080e4:	00800044 	movi	r2,1
 80080e8:	20c00015 	stw	r3,0(r4)
 80080ec:	f800283a 	ret

080080f0 <__i2b>:
 80080f0:	defffd04 	addi	sp,sp,-12
 80080f4:	dc000015 	stw	r16,0(sp)
 80080f8:	04000044 	movi	r16,1
 80080fc:	dc400115 	stw	r17,4(sp)
 8008100:	2823883a 	mov	r17,r5
 8008104:	800b883a 	mov	r5,r16
 8008108:	dfc00215 	stw	ra,8(sp)
 800810c:	8007ce40 	call	8007ce4 <_Balloc>
 8008110:	14400515 	stw	r17,20(r2)
 8008114:	14000415 	stw	r16,16(r2)
 8008118:	dfc00217 	ldw	ra,8(sp)
 800811c:	dc400117 	ldw	r17,4(sp)
 8008120:	dc000017 	ldw	r16,0(sp)
 8008124:	dec00304 	addi	sp,sp,12
 8008128:	f800283a 	ret

0800812c <__multiply>:
 800812c:	defffa04 	addi	sp,sp,-24
 8008130:	dcc00315 	stw	r19,12(sp)
 8008134:	dc800215 	stw	r18,8(sp)
 8008138:	34c00417 	ldw	r19,16(r6)
 800813c:	2c800417 	ldw	r18,16(r5)
 8008140:	dd000415 	stw	r20,16(sp)
 8008144:	dc400115 	stw	r17,4(sp)
 8008148:	dfc00515 	stw	ra,20(sp)
 800814c:	dc000015 	stw	r16,0(sp)
 8008150:	2829883a 	mov	r20,r5
 8008154:	3023883a 	mov	r17,r6
 8008158:	94c0050e 	bge	r18,r19,8008170 <__multiply+0x44>
 800815c:	9007883a 	mov	r3,r18
 8008160:	3029883a 	mov	r20,r6
 8008164:	9825883a 	mov	r18,r19
 8008168:	2823883a 	mov	r17,r5
 800816c:	1827883a 	mov	r19,r3
 8008170:	a0800217 	ldw	r2,8(r20)
 8008174:	94e1883a 	add	r16,r18,r19
 8008178:	a1400117 	ldw	r5,4(r20)
 800817c:	1400010e 	bge	r2,r16,8008184 <__multiply+0x58>
 8008180:	29400044 	addi	r5,r5,1
 8008184:	8007ce40 	call	8007ce4 <_Balloc>
 8008188:	8415883a 	add	r10,r16,r16
 800818c:	12c00504 	addi	r11,r2,20
 8008190:	5295883a 	add	r10,r10,r10
 8008194:	5a95883a 	add	r10,r11,r10
 8008198:	5807883a 	mov	r3,r11
 800819c:	5a80032e 	bgeu	r11,r10,80081ac <__multiply+0x80>
 80081a0:	18000015 	stw	zero,0(r3)
 80081a4:	18c00104 	addi	r3,r3,4
 80081a8:	1abffd36 	bltu	r3,r10,80081a0 <__alt_data_end+0xf80081a0>
 80081ac:	9ce7883a 	add	r19,r19,r19
 80081b0:	94a5883a 	add	r18,r18,r18
 80081b4:	89800504 	addi	r6,r17,20
 80081b8:	9ce7883a 	add	r19,r19,r19
 80081bc:	a3400504 	addi	r13,r20,20
 80081c0:	94a5883a 	add	r18,r18,r18
 80081c4:	34d9883a 	add	r12,r6,r19
 80081c8:	6c93883a 	add	r9,r13,r18
 80081cc:	3300422e 	bgeu	r6,r12,80082d8 <__multiply+0x1ac>
 80081d0:	37c00017 	ldw	ra,0(r6)
 80081d4:	fbffffcc 	andi	r15,ra,65535
 80081d8:	78001b26 	beq	r15,zero,8008248 <__multiply+0x11c>
 80081dc:	5811883a 	mov	r8,r11
 80081e0:	681d883a 	mov	r14,r13
 80081e4:	000f883a 	mov	r7,zero
 80081e8:	71000017 	ldw	r4,0(r14)
 80081ec:	40c00017 	ldw	r3,0(r8)
 80081f0:	73800104 	addi	r14,r14,4
 80081f4:	217fffcc 	andi	r5,r4,65535
 80081f8:	2bcb383a 	mul	r5,r5,r15
 80081fc:	2008d43a 	srli	r4,r4,16
 8008200:	1c7fffcc 	andi	r17,r3,65535
 8008204:	2c4b883a 	add	r5,r5,r17
 8008208:	29cb883a 	add	r5,r5,r7
 800820c:	23c9383a 	mul	r4,r4,r15
 8008210:	1806d43a 	srli	r3,r3,16
 8008214:	280ed43a 	srli	r7,r5,16
 8008218:	297fffcc 	andi	r5,r5,65535
 800821c:	20c7883a 	add	r3,r4,r3
 8008220:	19c7883a 	add	r3,r3,r7
 8008224:	1808943a 	slli	r4,r3,16
 8008228:	4023883a 	mov	r17,r8
 800822c:	180ed43a 	srli	r7,r3,16
 8008230:	214ab03a 	or	r5,r4,r5
 8008234:	41400015 	stw	r5,0(r8)
 8008238:	42000104 	addi	r8,r8,4
 800823c:	727fea36 	bltu	r14,r9,80081e8 <__alt_data_end+0xf80081e8>
 8008240:	89c00115 	stw	r7,4(r17)
 8008244:	37c00017 	ldw	ra,0(r6)
 8008248:	f83ed43a 	srli	ra,ra,16
 800824c:	f8001f26 	beq	ra,zero,80082cc <__multiply+0x1a0>
 8008250:	58c00017 	ldw	r3,0(r11)
 8008254:	681d883a 	mov	r14,r13
 8008258:	581f883a 	mov	r15,r11
 800825c:	1811883a 	mov	r8,r3
 8008260:	5825883a 	mov	r18,r11
 8008264:	000f883a 	mov	r7,zero
 8008268:	00000106 	br	8008270 <__multiply+0x144>
 800826c:	8825883a 	mov	r18,r17
 8008270:	7140000b 	ldhu	r5,0(r14)
 8008274:	4010d43a 	srli	r8,r8,16
 8008278:	193fffcc 	andi	r4,r3,65535
 800827c:	2fcb383a 	mul	r5,r5,ra
 8008280:	7bc00104 	addi	r15,r15,4
 8008284:	73800104 	addi	r14,r14,4
 8008288:	2a0b883a 	add	r5,r5,r8
 800828c:	29cb883a 	add	r5,r5,r7
 8008290:	2806943a 	slli	r3,r5,16
 8008294:	94400104 	addi	r17,r18,4
 8008298:	280ad43a 	srli	r5,r5,16
 800829c:	1908b03a 	or	r4,r3,r4
 80082a0:	793fff15 	stw	r4,-4(r15)
 80082a4:	70ffff17 	ldw	r3,-4(r14)
 80082a8:	8a000017 	ldw	r8,0(r17)
 80082ac:	1806d43a 	srli	r3,r3,16
 80082b0:	413fffcc 	andi	r4,r8,65535
 80082b4:	1fc7383a 	mul	r3,r3,ra
 80082b8:	1907883a 	add	r3,r3,r4
 80082bc:	1947883a 	add	r3,r3,r5
 80082c0:	180ed43a 	srli	r7,r3,16
 80082c4:	727fe936 	bltu	r14,r9,800826c <__alt_data_end+0xf800826c>
 80082c8:	90c00115 	stw	r3,4(r18)
 80082cc:	31800104 	addi	r6,r6,4
 80082d0:	5ac00104 	addi	r11,r11,4
 80082d4:	333fbe36 	bltu	r6,r12,80081d0 <__alt_data_end+0xf80081d0>
 80082d8:	0400090e 	bge	zero,r16,8008300 <__multiply+0x1d4>
 80082dc:	50ffff17 	ldw	r3,-4(r10)
 80082e0:	52bfff04 	addi	r10,r10,-4
 80082e4:	18000326 	beq	r3,zero,80082f4 <__multiply+0x1c8>
 80082e8:	00000506 	br	8008300 <__multiply+0x1d4>
 80082ec:	50c00017 	ldw	r3,0(r10)
 80082f0:	1800031e 	bne	r3,zero,8008300 <__multiply+0x1d4>
 80082f4:	843fffc4 	addi	r16,r16,-1
 80082f8:	52bfff04 	addi	r10,r10,-4
 80082fc:	803ffb1e 	bne	r16,zero,80082ec <__alt_data_end+0xf80082ec>
 8008300:	14000415 	stw	r16,16(r2)
 8008304:	dfc00517 	ldw	ra,20(sp)
 8008308:	dd000417 	ldw	r20,16(sp)
 800830c:	dcc00317 	ldw	r19,12(sp)
 8008310:	dc800217 	ldw	r18,8(sp)
 8008314:	dc400117 	ldw	r17,4(sp)
 8008318:	dc000017 	ldw	r16,0(sp)
 800831c:	dec00604 	addi	sp,sp,24
 8008320:	f800283a 	ret

08008324 <__pow5mult>:
 8008324:	defffa04 	addi	sp,sp,-24
 8008328:	dcc00315 	stw	r19,12(sp)
 800832c:	dc000015 	stw	r16,0(sp)
 8008330:	dfc00515 	stw	ra,20(sp)
 8008334:	dd000415 	stw	r20,16(sp)
 8008338:	dc800215 	stw	r18,8(sp)
 800833c:	dc400115 	stw	r17,4(sp)
 8008340:	308000cc 	andi	r2,r6,3
 8008344:	3021883a 	mov	r16,r6
 8008348:	2027883a 	mov	r19,r4
 800834c:	10002f1e 	bne	r2,zero,800840c <__pow5mult+0xe8>
 8008350:	2825883a 	mov	r18,r5
 8008354:	8021d0ba 	srai	r16,r16,2
 8008358:	80001a26 	beq	r16,zero,80083c4 <__pow5mult+0xa0>
 800835c:	9c401217 	ldw	r17,72(r19)
 8008360:	8800061e 	bne	r17,zero,800837c <__pow5mult+0x58>
 8008364:	00003406 	br	8008438 <__pow5mult+0x114>
 8008368:	8021d07a 	srai	r16,r16,1
 800836c:	80001526 	beq	r16,zero,80083c4 <__pow5mult+0xa0>
 8008370:	88800017 	ldw	r2,0(r17)
 8008374:	10001c26 	beq	r2,zero,80083e8 <__pow5mult+0xc4>
 8008378:	1023883a 	mov	r17,r2
 800837c:	8080004c 	andi	r2,r16,1
 8008380:	103ff926 	beq	r2,zero,8008368 <__alt_data_end+0xf8008368>
 8008384:	880d883a 	mov	r6,r17
 8008388:	900b883a 	mov	r5,r18
 800838c:	9809883a 	mov	r4,r19
 8008390:	800812c0 	call	800812c <__multiply>
 8008394:	90001b26 	beq	r18,zero,8008404 <__pow5mult+0xe0>
 8008398:	91000117 	ldw	r4,4(r18)
 800839c:	98c01317 	ldw	r3,76(r19)
 80083a0:	8021d07a 	srai	r16,r16,1
 80083a4:	2109883a 	add	r4,r4,r4
 80083a8:	2109883a 	add	r4,r4,r4
 80083ac:	1907883a 	add	r3,r3,r4
 80083b0:	19000017 	ldw	r4,0(r3)
 80083b4:	91000015 	stw	r4,0(r18)
 80083b8:	1c800015 	stw	r18,0(r3)
 80083bc:	1025883a 	mov	r18,r2
 80083c0:	803feb1e 	bne	r16,zero,8008370 <__alt_data_end+0xf8008370>
 80083c4:	9005883a 	mov	r2,r18
 80083c8:	dfc00517 	ldw	ra,20(sp)
 80083cc:	dd000417 	ldw	r20,16(sp)
 80083d0:	dcc00317 	ldw	r19,12(sp)
 80083d4:	dc800217 	ldw	r18,8(sp)
 80083d8:	dc400117 	ldw	r17,4(sp)
 80083dc:	dc000017 	ldw	r16,0(sp)
 80083e0:	dec00604 	addi	sp,sp,24
 80083e4:	f800283a 	ret
 80083e8:	880d883a 	mov	r6,r17
 80083ec:	880b883a 	mov	r5,r17
 80083f0:	9809883a 	mov	r4,r19
 80083f4:	800812c0 	call	800812c <__multiply>
 80083f8:	88800015 	stw	r2,0(r17)
 80083fc:	10000015 	stw	zero,0(r2)
 8008400:	003fdd06 	br	8008378 <__alt_data_end+0xf8008378>
 8008404:	1025883a 	mov	r18,r2
 8008408:	003fd706 	br	8008368 <__alt_data_end+0xf8008368>
 800840c:	10bfffc4 	addi	r2,r2,-1
 8008410:	1085883a 	add	r2,r2,r2
 8008414:	00c20074 	movhi	r3,2049
 8008418:	18d76504 	addi	r3,r3,23956
 800841c:	1085883a 	add	r2,r2,r2
 8008420:	1885883a 	add	r2,r3,r2
 8008424:	11800017 	ldw	r6,0(r2)
 8008428:	000f883a 	mov	r7,zero
 800842c:	8007db40 	call	8007db4 <__multadd>
 8008430:	1025883a 	mov	r18,r2
 8008434:	003fc706 	br	8008354 <__alt_data_end+0xf8008354>
 8008438:	05000044 	movi	r20,1
 800843c:	a00b883a 	mov	r5,r20
 8008440:	9809883a 	mov	r4,r19
 8008444:	8007ce40 	call	8007ce4 <_Balloc>
 8008448:	1023883a 	mov	r17,r2
 800844c:	00809c44 	movi	r2,625
 8008450:	88800515 	stw	r2,20(r17)
 8008454:	8d000415 	stw	r20,16(r17)
 8008458:	9c401215 	stw	r17,72(r19)
 800845c:	88000015 	stw	zero,0(r17)
 8008460:	003fc606 	br	800837c <__alt_data_end+0xf800837c>

08008464 <__lshift>:
 8008464:	defff904 	addi	sp,sp,-28
 8008468:	dd400515 	stw	r21,20(sp)
 800846c:	dcc00315 	stw	r19,12(sp)
 8008470:	302bd17a 	srai	r21,r6,5
 8008474:	2cc00417 	ldw	r19,16(r5)
 8008478:	28800217 	ldw	r2,8(r5)
 800847c:	dd000415 	stw	r20,16(sp)
 8008480:	ace7883a 	add	r19,r21,r19
 8008484:	dc800215 	stw	r18,8(sp)
 8008488:	dc400115 	stw	r17,4(sp)
 800848c:	dc000015 	stw	r16,0(sp)
 8008490:	dfc00615 	stw	ra,24(sp)
 8008494:	9c000044 	addi	r16,r19,1
 8008498:	2823883a 	mov	r17,r5
 800849c:	3029883a 	mov	r20,r6
 80084a0:	2025883a 	mov	r18,r4
 80084a4:	29400117 	ldw	r5,4(r5)
 80084a8:	1400030e 	bge	r2,r16,80084b8 <__lshift+0x54>
 80084ac:	1085883a 	add	r2,r2,r2
 80084b0:	29400044 	addi	r5,r5,1
 80084b4:	143ffd16 	blt	r2,r16,80084ac <__alt_data_end+0xf80084ac>
 80084b8:	9009883a 	mov	r4,r18
 80084bc:	8007ce40 	call	8007ce4 <_Balloc>
 80084c0:	10c00504 	addi	r3,r2,20
 80084c4:	0540070e 	bge	zero,r21,80084e4 <__lshift+0x80>
 80084c8:	ad6b883a 	add	r21,r21,r21
 80084cc:	ad6b883a 	add	r21,r21,r21
 80084d0:	1809883a 	mov	r4,r3
 80084d4:	1d47883a 	add	r3,r3,r21
 80084d8:	20000015 	stw	zero,0(r4)
 80084dc:	21000104 	addi	r4,r4,4
 80084e0:	193ffd1e 	bne	r3,r4,80084d8 <__alt_data_end+0xf80084d8>
 80084e4:	8a000417 	ldw	r8,16(r17)
 80084e8:	89000504 	addi	r4,r17,20
 80084ec:	a18007cc 	andi	r6,r20,31
 80084f0:	4211883a 	add	r8,r8,r8
 80084f4:	4211883a 	add	r8,r8,r8
 80084f8:	2211883a 	add	r8,r4,r8
 80084fc:	30002326 	beq	r6,zero,800858c <__lshift+0x128>
 8008500:	02400804 	movi	r9,32
 8008504:	4993c83a 	sub	r9,r9,r6
 8008508:	000b883a 	mov	r5,zero
 800850c:	21c00017 	ldw	r7,0(r4)
 8008510:	1815883a 	mov	r10,r3
 8008514:	18c00104 	addi	r3,r3,4
 8008518:	398e983a 	sll	r7,r7,r6
 800851c:	21000104 	addi	r4,r4,4
 8008520:	394ab03a 	or	r5,r7,r5
 8008524:	197fff15 	stw	r5,-4(r3)
 8008528:	217fff17 	ldw	r5,-4(r4)
 800852c:	2a4ad83a 	srl	r5,r5,r9
 8008530:	223ff636 	bltu	r4,r8,800850c <__alt_data_end+0xf800850c>
 8008534:	51400115 	stw	r5,4(r10)
 8008538:	28001a1e 	bne	r5,zero,80085a4 <__lshift+0x140>
 800853c:	843fffc4 	addi	r16,r16,-1
 8008540:	14000415 	stw	r16,16(r2)
 8008544:	88000826 	beq	r17,zero,8008568 <__lshift+0x104>
 8008548:	89000117 	ldw	r4,4(r17)
 800854c:	90c01317 	ldw	r3,76(r18)
 8008550:	2109883a 	add	r4,r4,r4
 8008554:	2109883a 	add	r4,r4,r4
 8008558:	1907883a 	add	r3,r3,r4
 800855c:	19000017 	ldw	r4,0(r3)
 8008560:	89000015 	stw	r4,0(r17)
 8008564:	1c400015 	stw	r17,0(r3)
 8008568:	dfc00617 	ldw	ra,24(sp)
 800856c:	dd400517 	ldw	r21,20(sp)
 8008570:	dd000417 	ldw	r20,16(sp)
 8008574:	dcc00317 	ldw	r19,12(sp)
 8008578:	dc800217 	ldw	r18,8(sp)
 800857c:	dc400117 	ldw	r17,4(sp)
 8008580:	dc000017 	ldw	r16,0(sp)
 8008584:	dec00704 	addi	sp,sp,28
 8008588:	f800283a 	ret
 800858c:	21400017 	ldw	r5,0(r4)
 8008590:	18c00104 	addi	r3,r3,4
 8008594:	21000104 	addi	r4,r4,4
 8008598:	197fff15 	stw	r5,-4(r3)
 800859c:	223ffb36 	bltu	r4,r8,800858c <__alt_data_end+0xf800858c>
 80085a0:	003fe606 	br	800853c <__alt_data_end+0xf800853c>
 80085a4:	9c000084 	addi	r16,r19,2
 80085a8:	003fe406 	br	800853c <__alt_data_end+0xf800853c>

080085ac <__mcmp>:
 80085ac:	20800417 	ldw	r2,16(r4)
 80085b0:	28c00417 	ldw	r3,16(r5)
 80085b4:	10c5c83a 	sub	r2,r2,r3
 80085b8:	1000111e 	bne	r2,zero,8008600 <__mcmp+0x54>
 80085bc:	18c7883a 	add	r3,r3,r3
 80085c0:	18c7883a 	add	r3,r3,r3
 80085c4:	21000504 	addi	r4,r4,20
 80085c8:	29400504 	addi	r5,r5,20
 80085cc:	20c5883a 	add	r2,r4,r3
 80085d0:	28cb883a 	add	r5,r5,r3
 80085d4:	00000106 	br	80085dc <__mcmp+0x30>
 80085d8:	20800a2e 	bgeu	r4,r2,8008604 <__mcmp+0x58>
 80085dc:	10bfff04 	addi	r2,r2,-4
 80085e0:	297fff04 	addi	r5,r5,-4
 80085e4:	11800017 	ldw	r6,0(r2)
 80085e8:	28c00017 	ldw	r3,0(r5)
 80085ec:	30fffa26 	beq	r6,r3,80085d8 <__alt_data_end+0xf80085d8>
 80085f0:	30c00236 	bltu	r6,r3,80085fc <__mcmp+0x50>
 80085f4:	00800044 	movi	r2,1
 80085f8:	f800283a 	ret
 80085fc:	00bfffc4 	movi	r2,-1
 8008600:	f800283a 	ret
 8008604:	0005883a 	mov	r2,zero
 8008608:	f800283a 	ret

0800860c <__mdiff>:
 800860c:	28c00417 	ldw	r3,16(r5)
 8008610:	30800417 	ldw	r2,16(r6)
 8008614:	defffa04 	addi	sp,sp,-24
 8008618:	dcc00315 	stw	r19,12(sp)
 800861c:	dc800215 	stw	r18,8(sp)
 8008620:	dfc00515 	stw	ra,20(sp)
 8008624:	dd000415 	stw	r20,16(sp)
 8008628:	dc400115 	stw	r17,4(sp)
 800862c:	dc000015 	stw	r16,0(sp)
 8008630:	1887c83a 	sub	r3,r3,r2
 8008634:	2825883a 	mov	r18,r5
 8008638:	3027883a 	mov	r19,r6
 800863c:	1800141e 	bne	r3,zero,8008690 <__mdiff+0x84>
 8008640:	1085883a 	add	r2,r2,r2
 8008644:	1085883a 	add	r2,r2,r2
 8008648:	2a000504 	addi	r8,r5,20
 800864c:	34000504 	addi	r16,r6,20
 8008650:	4087883a 	add	r3,r8,r2
 8008654:	8085883a 	add	r2,r16,r2
 8008658:	00000106 	br	8008660 <__mdiff+0x54>
 800865c:	40c0592e 	bgeu	r8,r3,80087c4 <__mdiff+0x1b8>
 8008660:	18ffff04 	addi	r3,r3,-4
 8008664:	10bfff04 	addi	r2,r2,-4
 8008668:	19c00017 	ldw	r7,0(r3)
 800866c:	11400017 	ldw	r5,0(r2)
 8008670:	397ffa26 	beq	r7,r5,800865c <__alt_data_end+0xf800865c>
 8008674:	3940592e 	bgeu	r7,r5,80087dc <__mdiff+0x1d0>
 8008678:	9005883a 	mov	r2,r18
 800867c:	4023883a 	mov	r17,r8
 8008680:	9825883a 	mov	r18,r19
 8008684:	05000044 	movi	r20,1
 8008688:	1027883a 	mov	r19,r2
 800868c:	00000406 	br	80086a0 <__mdiff+0x94>
 8008690:	18005616 	blt	r3,zero,80087ec <__mdiff+0x1e0>
 8008694:	34400504 	addi	r17,r6,20
 8008698:	2c000504 	addi	r16,r5,20
 800869c:	0029883a 	mov	r20,zero
 80086a0:	91400117 	ldw	r5,4(r18)
 80086a4:	8007ce40 	call	8007ce4 <_Balloc>
 80086a8:	92400417 	ldw	r9,16(r18)
 80086ac:	9b000417 	ldw	r12,16(r19)
 80086b0:	12c00504 	addi	r11,r2,20
 80086b4:	4a51883a 	add	r8,r9,r9
 80086b8:	6319883a 	add	r12,r12,r12
 80086bc:	4211883a 	add	r8,r8,r8
 80086c0:	6319883a 	add	r12,r12,r12
 80086c4:	15000315 	stw	r20,12(r2)
 80086c8:	8211883a 	add	r8,r16,r8
 80086cc:	8b19883a 	add	r12,r17,r12
 80086d0:	0007883a 	mov	r3,zero
 80086d4:	81400017 	ldw	r5,0(r16)
 80086d8:	89c00017 	ldw	r7,0(r17)
 80086dc:	59800104 	addi	r6,r11,4
 80086e0:	293fffcc 	andi	r4,r5,65535
 80086e4:	20c7883a 	add	r3,r4,r3
 80086e8:	393fffcc 	andi	r4,r7,65535
 80086ec:	1909c83a 	sub	r4,r3,r4
 80086f0:	280ad43a 	srli	r5,r5,16
 80086f4:	380ed43a 	srli	r7,r7,16
 80086f8:	2007d43a 	srai	r3,r4,16
 80086fc:	213fffcc 	andi	r4,r4,65535
 8008700:	29cbc83a 	sub	r5,r5,r7
 8008704:	28c7883a 	add	r3,r5,r3
 8008708:	180a943a 	slli	r5,r3,16
 800870c:	8c400104 	addi	r17,r17,4
 8008710:	84000104 	addi	r16,r16,4
 8008714:	2908b03a 	or	r4,r5,r4
 8008718:	59000015 	stw	r4,0(r11)
 800871c:	1807d43a 	srai	r3,r3,16
 8008720:	3015883a 	mov	r10,r6
 8008724:	3017883a 	mov	r11,r6
 8008728:	8b3fea36 	bltu	r17,r12,80086d4 <__alt_data_end+0xf80086d4>
 800872c:	8200162e 	bgeu	r16,r8,8008788 <__mdiff+0x17c>
 8008730:	8017883a 	mov	r11,r16
 8008734:	59400017 	ldw	r5,0(r11)
 8008738:	31800104 	addi	r6,r6,4
 800873c:	5ac00104 	addi	r11,r11,4
 8008740:	293fffcc 	andi	r4,r5,65535
 8008744:	20c7883a 	add	r3,r4,r3
 8008748:	280ed43a 	srli	r7,r5,16
 800874c:	180bd43a 	srai	r5,r3,16
 8008750:	193fffcc 	andi	r4,r3,65535
 8008754:	3947883a 	add	r3,r7,r5
 8008758:	180a943a 	slli	r5,r3,16
 800875c:	1807d43a 	srai	r3,r3,16
 8008760:	2908b03a 	or	r4,r5,r4
 8008764:	313fff15 	stw	r4,-4(r6)
 8008768:	5a3ff236 	bltu	r11,r8,8008734 <__alt_data_end+0xf8008734>
 800876c:	0406303a 	nor	r3,zero,r16
 8008770:	1a07883a 	add	r3,r3,r8
 8008774:	1806d0ba 	srli	r3,r3,2
 8008778:	18c00044 	addi	r3,r3,1
 800877c:	18c7883a 	add	r3,r3,r3
 8008780:	18c7883a 	add	r3,r3,r3
 8008784:	50d5883a 	add	r10,r10,r3
 8008788:	50ffff04 	addi	r3,r10,-4
 800878c:	2000041e 	bne	r4,zero,80087a0 <__mdiff+0x194>
 8008790:	18ffff04 	addi	r3,r3,-4
 8008794:	19000017 	ldw	r4,0(r3)
 8008798:	4a7fffc4 	addi	r9,r9,-1
 800879c:	203ffc26 	beq	r4,zero,8008790 <__alt_data_end+0xf8008790>
 80087a0:	12400415 	stw	r9,16(r2)
 80087a4:	dfc00517 	ldw	ra,20(sp)
 80087a8:	dd000417 	ldw	r20,16(sp)
 80087ac:	dcc00317 	ldw	r19,12(sp)
 80087b0:	dc800217 	ldw	r18,8(sp)
 80087b4:	dc400117 	ldw	r17,4(sp)
 80087b8:	dc000017 	ldw	r16,0(sp)
 80087bc:	dec00604 	addi	sp,sp,24
 80087c0:	f800283a 	ret
 80087c4:	000b883a 	mov	r5,zero
 80087c8:	8007ce40 	call	8007ce4 <_Balloc>
 80087cc:	00c00044 	movi	r3,1
 80087d0:	10c00415 	stw	r3,16(r2)
 80087d4:	10000515 	stw	zero,20(r2)
 80087d8:	003ff206 	br	80087a4 <__alt_data_end+0xf80087a4>
 80087dc:	8023883a 	mov	r17,r16
 80087e0:	0029883a 	mov	r20,zero
 80087e4:	4021883a 	mov	r16,r8
 80087e8:	003fad06 	br	80086a0 <__alt_data_end+0xf80086a0>
 80087ec:	9005883a 	mov	r2,r18
 80087f0:	94400504 	addi	r17,r18,20
 80087f4:	9c000504 	addi	r16,r19,20
 80087f8:	9825883a 	mov	r18,r19
 80087fc:	05000044 	movi	r20,1
 8008800:	1027883a 	mov	r19,r2
 8008804:	003fa606 	br	80086a0 <__alt_data_end+0xf80086a0>

08008808 <__ulp>:
 8008808:	295ffc2c 	andhi	r5,r5,32752
 800880c:	00bf3034 	movhi	r2,64704
 8008810:	2887883a 	add	r3,r5,r2
 8008814:	00c0020e 	bge	zero,r3,8008820 <__ulp+0x18>
 8008818:	0005883a 	mov	r2,zero
 800881c:	f800283a 	ret
 8008820:	00c7c83a 	sub	r3,zero,r3
 8008824:	1807d53a 	srai	r3,r3,20
 8008828:	008004c4 	movi	r2,19
 800882c:	10c00b0e 	bge	r2,r3,800885c <__ulp+0x54>
 8008830:	18bffb04 	addi	r2,r3,-20
 8008834:	01000784 	movi	r4,30
 8008838:	0007883a 	mov	r3,zero
 800883c:	20800516 	blt	r4,r2,8008854 <__ulp+0x4c>
 8008840:	010007c4 	movi	r4,31
 8008844:	2089c83a 	sub	r4,r4,r2
 8008848:	00800044 	movi	r2,1
 800884c:	1104983a 	sll	r2,r2,r4
 8008850:	f800283a 	ret
 8008854:	00800044 	movi	r2,1
 8008858:	f800283a 	ret
 800885c:	01400234 	movhi	r5,8
 8008860:	28c7d83a 	sra	r3,r5,r3
 8008864:	0005883a 	mov	r2,zero
 8008868:	f800283a 	ret

0800886c <__b2d>:
 800886c:	defffa04 	addi	sp,sp,-24
 8008870:	dc000015 	stw	r16,0(sp)
 8008874:	24000417 	ldw	r16,16(r4)
 8008878:	dc400115 	stw	r17,4(sp)
 800887c:	24400504 	addi	r17,r4,20
 8008880:	8421883a 	add	r16,r16,r16
 8008884:	8421883a 	add	r16,r16,r16
 8008888:	8c21883a 	add	r16,r17,r16
 800888c:	dc800215 	stw	r18,8(sp)
 8008890:	84bfff17 	ldw	r18,-4(r16)
 8008894:	dd000415 	stw	r20,16(sp)
 8008898:	dcc00315 	stw	r19,12(sp)
 800889c:	9009883a 	mov	r4,r18
 80088a0:	2829883a 	mov	r20,r5
 80088a4:	dfc00515 	stw	ra,20(sp)
 80088a8:	8007fd80 	call	8007fd8 <__hi0bits>
 80088ac:	00c00804 	movi	r3,32
 80088b0:	1889c83a 	sub	r4,r3,r2
 80088b4:	a1000015 	stw	r4,0(r20)
 80088b8:	01000284 	movi	r4,10
 80088bc:	84ffff04 	addi	r19,r16,-4
 80088c0:	20801216 	blt	r4,r2,800890c <__b2d+0xa0>
 80088c4:	018002c4 	movi	r6,11
 80088c8:	308dc83a 	sub	r6,r6,r2
 80088cc:	9186d83a 	srl	r3,r18,r6
 80088d0:	18cffc34 	orhi	r3,r3,16368
 80088d4:	8cc0212e 	bgeu	r17,r19,800895c <__b2d+0xf0>
 80088d8:	813ffe17 	ldw	r4,-8(r16)
 80088dc:	218cd83a 	srl	r6,r4,r6
 80088e0:	10800544 	addi	r2,r2,21
 80088e4:	9084983a 	sll	r2,r18,r2
 80088e8:	1184b03a 	or	r2,r2,r6
 80088ec:	dfc00517 	ldw	ra,20(sp)
 80088f0:	dd000417 	ldw	r20,16(sp)
 80088f4:	dcc00317 	ldw	r19,12(sp)
 80088f8:	dc800217 	ldw	r18,8(sp)
 80088fc:	dc400117 	ldw	r17,4(sp)
 8008900:	dc000017 	ldw	r16,0(sp)
 8008904:	dec00604 	addi	sp,sp,24
 8008908:	f800283a 	ret
 800890c:	8cc00f2e 	bgeu	r17,r19,800894c <__b2d+0xe0>
 8008910:	117ffd44 	addi	r5,r2,-11
 8008914:	80bffe17 	ldw	r2,-8(r16)
 8008918:	28000e26 	beq	r5,zero,8008954 <__b2d+0xe8>
 800891c:	1949c83a 	sub	r4,r3,r5
 8008920:	9164983a 	sll	r18,r18,r5
 8008924:	1106d83a 	srl	r3,r2,r4
 8008928:	81bffe04 	addi	r6,r16,-8
 800892c:	948ffc34 	orhi	r18,r18,16368
 8008930:	90c6b03a 	or	r3,r18,r3
 8008934:	89800e2e 	bgeu	r17,r6,8008970 <__b2d+0x104>
 8008938:	81bffd17 	ldw	r6,-12(r16)
 800893c:	1144983a 	sll	r2,r2,r5
 8008940:	310ad83a 	srl	r5,r6,r4
 8008944:	2884b03a 	or	r2,r5,r2
 8008948:	003fe806 	br	80088ec <__alt_data_end+0xf80088ec>
 800894c:	10bffd44 	addi	r2,r2,-11
 8008950:	1000041e 	bne	r2,zero,8008964 <__b2d+0xf8>
 8008954:	90cffc34 	orhi	r3,r18,16368
 8008958:	003fe406 	br	80088ec <__alt_data_end+0xf80088ec>
 800895c:	000d883a 	mov	r6,zero
 8008960:	003fdf06 	br	80088e0 <__alt_data_end+0xf80088e0>
 8008964:	90a4983a 	sll	r18,r18,r2
 8008968:	0005883a 	mov	r2,zero
 800896c:	003ff906 	br	8008954 <__alt_data_end+0xf8008954>
 8008970:	1144983a 	sll	r2,r2,r5
 8008974:	003fdd06 	br	80088ec <__alt_data_end+0xf80088ec>

08008978 <__d2b>:
 8008978:	defff804 	addi	sp,sp,-32
 800897c:	dc000215 	stw	r16,8(sp)
 8008980:	3021883a 	mov	r16,r6
 8008984:	dc400315 	stw	r17,12(sp)
 8008988:	8022907a 	slli	r17,r16,1
 800898c:	dd000615 	stw	r20,24(sp)
 8008990:	2829883a 	mov	r20,r5
 8008994:	01400044 	movi	r5,1
 8008998:	dcc00515 	stw	r19,20(sp)
 800899c:	dc800415 	stw	r18,16(sp)
 80089a0:	dfc00715 	stw	ra,28(sp)
 80089a4:	3825883a 	mov	r18,r7
 80089a8:	8822d57a 	srli	r17,r17,21
 80089ac:	8007ce40 	call	8007ce4 <_Balloc>
 80089b0:	1027883a 	mov	r19,r2
 80089b4:	00800434 	movhi	r2,16
 80089b8:	10bfffc4 	addi	r2,r2,-1
 80089bc:	808c703a 	and	r6,r16,r2
 80089c0:	88000126 	beq	r17,zero,80089c8 <__d2b+0x50>
 80089c4:	31800434 	orhi	r6,r6,16
 80089c8:	d9800015 	stw	r6,0(sp)
 80089cc:	a0002426 	beq	r20,zero,8008a60 <__d2b+0xe8>
 80089d0:	d9000104 	addi	r4,sp,4
 80089d4:	dd000115 	stw	r20,4(sp)
 80089d8:	80080400 	call	8008040 <__lo0bits>
 80089dc:	d8c00017 	ldw	r3,0(sp)
 80089e0:	10002f1e 	bne	r2,zero,8008aa0 <__d2b+0x128>
 80089e4:	d9000117 	ldw	r4,4(sp)
 80089e8:	99000515 	stw	r4,20(r19)
 80089ec:	1821003a 	cmpeq	r16,r3,zero
 80089f0:	01000084 	movi	r4,2
 80089f4:	2421c83a 	sub	r16,r4,r16
 80089f8:	98c00615 	stw	r3,24(r19)
 80089fc:	9c000415 	stw	r16,16(r19)
 8008a00:	88001f1e 	bne	r17,zero,8008a80 <__d2b+0x108>
 8008a04:	10bef384 	addi	r2,r2,-1074
 8008a08:	90800015 	stw	r2,0(r18)
 8008a0c:	00900034 	movhi	r2,16384
 8008a10:	10bfffc4 	addi	r2,r2,-1
 8008a14:	8085883a 	add	r2,r16,r2
 8008a18:	1085883a 	add	r2,r2,r2
 8008a1c:	1085883a 	add	r2,r2,r2
 8008a20:	9885883a 	add	r2,r19,r2
 8008a24:	11000517 	ldw	r4,20(r2)
 8008a28:	8020917a 	slli	r16,r16,5
 8008a2c:	8007fd80 	call	8007fd8 <__hi0bits>
 8008a30:	d8c00817 	ldw	r3,32(sp)
 8008a34:	8085c83a 	sub	r2,r16,r2
 8008a38:	18800015 	stw	r2,0(r3)
 8008a3c:	9805883a 	mov	r2,r19
 8008a40:	dfc00717 	ldw	ra,28(sp)
 8008a44:	dd000617 	ldw	r20,24(sp)
 8008a48:	dcc00517 	ldw	r19,20(sp)
 8008a4c:	dc800417 	ldw	r18,16(sp)
 8008a50:	dc400317 	ldw	r17,12(sp)
 8008a54:	dc000217 	ldw	r16,8(sp)
 8008a58:	dec00804 	addi	sp,sp,32
 8008a5c:	f800283a 	ret
 8008a60:	d809883a 	mov	r4,sp
 8008a64:	80080400 	call	8008040 <__lo0bits>
 8008a68:	d8c00017 	ldw	r3,0(sp)
 8008a6c:	04000044 	movi	r16,1
 8008a70:	9c000415 	stw	r16,16(r19)
 8008a74:	98c00515 	stw	r3,20(r19)
 8008a78:	10800804 	addi	r2,r2,32
 8008a7c:	883fe126 	beq	r17,zero,8008a04 <__alt_data_end+0xf8008a04>
 8008a80:	00c00d44 	movi	r3,53
 8008a84:	8c7ef344 	addi	r17,r17,-1075
 8008a88:	88a3883a 	add	r17,r17,r2
 8008a8c:	1885c83a 	sub	r2,r3,r2
 8008a90:	d8c00817 	ldw	r3,32(sp)
 8008a94:	94400015 	stw	r17,0(r18)
 8008a98:	18800015 	stw	r2,0(r3)
 8008a9c:	003fe706 	br	8008a3c <__alt_data_end+0xf8008a3c>
 8008aa0:	01000804 	movi	r4,32
 8008aa4:	2089c83a 	sub	r4,r4,r2
 8008aa8:	1908983a 	sll	r4,r3,r4
 8008aac:	d9400117 	ldw	r5,4(sp)
 8008ab0:	1886d83a 	srl	r3,r3,r2
 8008ab4:	2148b03a 	or	r4,r4,r5
 8008ab8:	99000515 	stw	r4,20(r19)
 8008abc:	d8c00015 	stw	r3,0(sp)
 8008ac0:	003fca06 	br	80089ec <__alt_data_end+0xf80089ec>

08008ac4 <__ratio>:
 8008ac4:	defff904 	addi	sp,sp,-28
 8008ac8:	dc400315 	stw	r17,12(sp)
 8008acc:	2823883a 	mov	r17,r5
 8008ad0:	d9400104 	addi	r5,sp,4
 8008ad4:	dfc00615 	stw	ra,24(sp)
 8008ad8:	dcc00515 	stw	r19,20(sp)
 8008adc:	dc800415 	stw	r18,16(sp)
 8008ae0:	2027883a 	mov	r19,r4
 8008ae4:	dc000215 	stw	r16,8(sp)
 8008ae8:	800886c0 	call	800886c <__b2d>
 8008aec:	d80b883a 	mov	r5,sp
 8008af0:	8809883a 	mov	r4,r17
 8008af4:	1025883a 	mov	r18,r2
 8008af8:	1821883a 	mov	r16,r3
 8008afc:	800886c0 	call	800886c <__b2d>
 8008b00:	8a000417 	ldw	r8,16(r17)
 8008b04:	99000417 	ldw	r4,16(r19)
 8008b08:	d9400117 	ldw	r5,4(sp)
 8008b0c:	2209c83a 	sub	r4,r4,r8
 8008b10:	2010917a 	slli	r8,r4,5
 8008b14:	d9000017 	ldw	r4,0(sp)
 8008b18:	2909c83a 	sub	r4,r5,r4
 8008b1c:	4109883a 	add	r4,r8,r4
 8008b20:	01000e0e 	bge	zero,r4,8008b5c <__ratio+0x98>
 8008b24:	2008953a 	slli	r4,r4,20
 8008b28:	2421883a 	add	r16,r4,r16
 8008b2c:	100d883a 	mov	r6,r2
 8008b30:	180f883a 	mov	r7,r3
 8008b34:	9009883a 	mov	r4,r18
 8008b38:	800b883a 	mov	r5,r16
 8008b3c:	800c6c00 	call	800c6c0 <__divdf3>
 8008b40:	dfc00617 	ldw	ra,24(sp)
 8008b44:	dcc00517 	ldw	r19,20(sp)
 8008b48:	dc800417 	ldw	r18,16(sp)
 8008b4c:	dc400317 	ldw	r17,12(sp)
 8008b50:	dc000217 	ldw	r16,8(sp)
 8008b54:	dec00704 	addi	sp,sp,28
 8008b58:	f800283a 	ret
 8008b5c:	2008953a 	slli	r4,r4,20
 8008b60:	1907c83a 	sub	r3,r3,r4
 8008b64:	003ff106 	br	8008b2c <__alt_data_end+0xf8008b2c>

08008b68 <_mprec_log10>:
 8008b68:	defffe04 	addi	sp,sp,-8
 8008b6c:	dc000015 	stw	r16,0(sp)
 8008b70:	dfc00115 	stw	ra,4(sp)
 8008b74:	008005c4 	movi	r2,23
 8008b78:	2021883a 	mov	r16,r4
 8008b7c:	11000d0e 	bge	r2,r4,8008bb4 <_mprec_log10+0x4c>
 8008b80:	0005883a 	mov	r2,zero
 8008b84:	00cffc34 	movhi	r3,16368
 8008b88:	843fffc4 	addi	r16,r16,-1
 8008b8c:	000d883a 	mov	r6,zero
 8008b90:	01d00934 	movhi	r7,16420
 8008b94:	1009883a 	mov	r4,r2
 8008b98:	180b883a 	mov	r5,r3
 8008b9c:	800d2000 	call	800d200 <__muldf3>
 8008ba0:	803ff91e 	bne	r16,zero,8008b88 <__alt_data_end+0xf8008b88>
 8008ba4:	dfc00117 	ldw	ra,4(sp)
 8008ba8:	dc000017 	ldw	r16,0(sp)
 8008bac:	dec00204 	addi	sp,sp,8
 8008bb0:	f800283a 	ret
 8008bb4:	202090fa 	slli	r16,r4,3
 8008bb8:	00820074 	movhi	r2,2049
 8008bbc:	10977c04 	addi	r2,r2,24048
 8008bc0:	1421883a 	add	r16,r2,r16
 8008bc4:	80800017 	ldw	r2,0(r16)
 8008bc8:	80c00117 	ldw	r3,4(r16)
 8008bcc:	dfc00117 	ldw	ra,4(sp)
 8008bd0:	dc000017 	ldw	r16,0(sp)
 8008bd4:	dec00204 	addi	sp,sp,8
 8008bd8:	f800283a 	ret

08008bdc <__copybits>:
 8008bdc:	297fffc4 	addi	r5,r5,-1
 8008be0:	280fd17a 	srai	r7,r5,5
 8008be4:	30c00417 	ldw	r3,16(r6)
 8008be8:	30800504 	addi	r2,r6,20
 8008bec:	39c00044 	addi	r7,r7,1
 8008bf0:	18c7883a 	add	r3,r3,r3
 8008bf4:	39cf883a 	add	r7,r7,r7
 8008bf8:	18c7883a 	add	r3,r3,r3
 8008bfc:	39cf883a 	add	r7,r7,r7
 8008c00:	10c7883a 	add	r3,r2,r3
 8008c04:	21cf883a 	add	r7,r4,r7
 8008c08:	10c00d2e 	bgeu	r2,r3,8008c40 <__copybits+0x64>
 8008c0c:	200b883a 	mov	r5,r4
 8008c10:	12000017 	ldw	r8,0(r2)
 8008c14:	29400104 	addi	r5,r5,4
 8008c18:	10800104 	addi	r2,r2,4
 8008c1c:	2a3fff15 	stw	r8,-4(r5)
 8008c20:	10fffb36 	bltu	r2,r3,8008c10 <__alt_data_end+0xf8008c10>
 8008c24:	1985c83a 	sub	r2,r3,r6
 8008c28:	10bffac4 	addi	r2,r2,-21
 8008c2c:	1004d0ba 	srli	r2,r2,2
 8008c30:	10800044 	addi	r2,r2,1
 8008c34:	1085883a 	add	r2,r2,r2
 8008c38:	1085883a 	add	r2,r2,r2
 8008c3c:	2089883a 	add	r4,r4,r2
 8008c40:	21c0032e 	bgeu	r4,r7,8008c50 <__copybits+0x74>
 8008c44:	20000015 	stw	zero,0(r4)
 8008c48:	21000104 	addi	r4,r4,4
 8008c4c:	21fffd36 	bltu	r4,r7,8008c44 <__alt_data_end+0xf8008c44>
 8008c50:	f800283a 	ret

08008c54 <__any_on>:
 8008c54:	20c00417 	ldw	r3,16(r4)
 8008c58:	2805d17a 	srai	r2,r5,5
 8008c5c:	21000504 	addi	r4,r4,20
 8008c60:	18800d0e 	bge	r3,r2,8008c98 <__any_on+0x44>
 8008c64:	18c7883a 	add	r3,r3,r3
 8008c68:	18c7883a 	add	r3,r3,r3
 8008c6c:	20c7883a 	add	r3,r4,r3
 8008c70:	20c0192e 	bgeu	r4,r3,8008cd8 <__any_on+0x84>
 8008c74:	18bfff17 	ldw	r2,-4(r3)
 8008c78:	18ffff04 	addi	r3,r3,-4
 8008c7c:	1000041e 	bne	r2,zero,8008c90 <__any_on+0x3c>
 8008c80:	20c0142e 	bgeu	r4,r3,8008cd4 <__any_on+0x80>
 8008c84:	18ffff04 	addi	r3,r3,-4
 8008c88:	19400017 	ldw	r5,0(r3)
 8008c8c:	283ffc26 	beq	r5,zero,8008c80 <__alt_data_end+0xf8008c80>
 8008c90:	00800044 	movi	r2,1
 8008c94:	f800283a 	ret
 8008c98:	10c00a0e 	bge	r2,r3,8008cc4 <__any_on+0x70>
 8008c9c:	1085883a 	add	r2,r2,r2
 8008ca0:	1085883a 	add	r2,r2,r2
 8008ca4:	294007cc 	andi	r5,r5,31
 8008ca8:	2087883a 	add	r3,r4,r2
 8008cac:	283ff026 	beq	r5,zero,8008c70 <__alt_data_end+0xf8008c70>
 8008cb0:	19800017 	ldw	r6,0(r3)
 8008cb4:	3144d83a 	srl	r2,r6,r5
 8008cb8:	114a983a 	sll	r5,r2,r5
 8008cbc:	317ff41e 	bne	r6,r5,8008c90 <__alt_data_end+0xf8008c90>
 8008cc0:	003feb06 	br	8008c70 <__alt_data_end+0xf8008c70>
 8008cc4:	1085883a 	add	r2,r2,r2
 8008cc8:	1085883a 	add	r2,r2,r2
 8008ccc:	2087883a 	add	r3,r4,r2
 8008cd0:	003fe706 	br	8008c70 <__alt_data_end+0xf8008c70>
 8008cd4:	f800283a 	ret
 8008cd8:	0005883a 	mov	r2,zero
 8008cdc:	f800283a 	ret

08008ce0 <_putc_r>:
 8008ce0:	defffc04 	addi	sp,sp,-16
 8008ce4:	dc000215 	stw	r16,8(sp)
 8008ce8:	dfc00315 	stw	ra,12(sp)
 8008cec:	2021883a 	mov	r16,r4
 8008cf0:	20000226 	beq	r4,zero,8008cfc <_putc_r+0x1c>
 8008cf4:	20800e17 	ldw	r2,56(r4)
 8008cf8:	10001b26 	beq	r2,zero,8008d68 <_putc_r+0x88>
 8008cfc:	30800217 	ldw	r2,8(r6)
 8008d00:	10bfffc4 	addi	r2,r2,-1
 8008d04:	30800215 	stw	r2,8(r6)
 8008d08:	10000a16 	blt	r2,zero,8008d34 <_putc_r+0x54>
 8008d0c:	30800017 	ldw	r2,0(r6)
 8008d10:	11400005 	stb	r5,0(r2)
 8008d14:	30800017 	ldw	r2,0(r6)
 8008d18:	10c00044 	addi	r3,r2,1
 8008d1c:	30c00015 	stw	r3,0(r6)
 8008d20:	10800003 	ldbu	r2,0(r2)
 8008d24:	dfc00317 	ldw	ra,12(sp)
 8008d28:	dc000217 	ldw	r16,8(sp)
 8008d2c:	dec00404 	addi	sp,sp,16
 8008d30:	f800283a 	ret
 8008d34:	30c00617 	ldw	r3,24(r6)
 8008d38:	10c00616 	blt	r2,r3,8008d54 <_putc_r+0x74>
 8008d3c:	30800017 	ldw	r2,0(r6)
 8008d40:	00c00284 	movi	r3,10
 8008d44:	11400005 	stb	r5,0(r2)
 8008d48:	30800017 	ldw	r2,0(r6)
 8008d4c:	11400003 	ldbu	r5,0(r2)
 8008d50:	28fff11e 	bne	r5,r3,8008d18 <__alt_data_end+0xf8008d18>
 8008d54:	8009883a 	mov	r4,r16
 8008d58:	dfc00317 	ldw	ra,12(sp)
 8008d5c:	dc000217 	ldw	r16,8(sp)
 8008d60:	dec00404 	addi	sp,sp,16
 8008d64:	800aba41 	jmpi	800aba4 <__swbuf_r>
 8008d68:	d9400015 	stw	r5,0(sp)
 8008d6c:	d9800115 	stw	r6,4(sp)
 8008d70:	8000d800 	call	8000d80 <__sinit>
 8008d74:	d9800117 	ldw	r6,4(sp)
 8008d78:	d9400017 	ldw	r5,0(sp)
 8008d7c:	003fdf06 	br	8008cfc <__alt_data_end+0xf8008cfc>

08008d80 <putc>:
 8008d80:	00820074 	movhi	r2,2049
 8008d84:	defffc04 	addi	sp,sp,-16
 8008d88:	109ecc04 	addi	r2,r2,31536
 8008d8c:	dc000115 	stw	r16,4(sp)
 8008d90:	14000017 	ldw	r16,0(r2)
 8008d94:	dc400215 	stw	r17,8(sp)
 8008d98:	dfc00315 	stw	ra,12(sp)
 8008d9c:	2023883a 	mov	r17,r4
 8008da0:	80000226 	beq	r16,zero,8008dac <putc+0x2c>
 8008da4:	80800e17 	ldw	r2,56(r16)
 8008da8:	10001a26 	beq	r2,zero,8008e14 <putc+0x94>
 8008dac:	28800217 	ldw	r2,8(r5)
 8008db0:	10bfffc4 	addi	r2,r2,-1
 8008db4:	28800215 	stw	r2,8(r5)
 8008db8:	10000b16 	blt	r2,zero,8008de8 <putc+0x68>
 8008dbc:	28800017 	ldw	r2,0(r5)
 8008dc0:	14400005 	stb	r17,0(r2)
 8008dc4:	28800017 	ldw	r2,0(r5)
 8008dc8:	10c00044 	addi	r3,r2,1
 8008dcc:	28c00015 	stw	r3,0(r5)
 8008dd0:	10800003 	ldbu	r2,0(r2)
 8008dd4:	dfc00317 	ldw	ra,12(sp)
 8008dd8:	dc400217 	ldw	r17,8(sp)
 8008ddc:	dc000117 	ldw	r16,4(sp)
 8008de0:	dec00404 	addi	sp,sp,16
 8008de4:	f800283a 	ret
 8008de8:	28c00617 	ldw	r3,24(r5)
 8008dec:	10c00e16 	blt	r2,r3,8008e28 <putc+0xa8>
 8008df0:	28800017 	ldw	r2,0(r5)
 8008df4:	01000284 	movi	r4,10
 8008df8:	14400005 	stb	r17,0(r2)
 8008dfc:	28800017 	ldw	r2,0(r5)
 8008e00:	10c00003 	ldbu	r3,0(r2)
 8008e04:	193ff01e 	bne	r3,r4,8008dc8 <__alt_data_end+0xf8008dc8>
 8008e08:	280d883a 	mov	r6,r5
 8008e0c:	180b883a 	mov	r5,r3
 8008e10:	00000706 	br	8008e30 <putc+0xb0>
 8008e14:	8009883a 	mov	r4,r16
 8008e18:	d9400015 	stw	r5,0(sp)
 8008e1c:	8000d800 	call	8000d80 <__sinit>
 8008e20:	d9400017 	ldw	r5,0(sp)
 8008e24:	003fe106 	br	8008dac <__alt_data_end+0xf8008dac>
 8008e28:	280d883a 	mov	r6,r5
 8008e2c:	880b883a 	mov	r5,r17
 8008e30:	8009883a 	mov	r4,r16
 8008e34:	dfc00317 	ldw	ra,12(sp)
 8008e38:	dc400217 	ldw	r17,8(sp)
 8008e3c:	dc000117 	ldw	r16,4(sp)
 8008e40:	dec00404 	addi	sp,sp,16
 8008e44:	800aba41 	jmpi	800aba4 <__swbuf_r>

08008e48 <_read_r>:
 8008e48:	defffd04 	addi	sp,sp,-12
 8008e4c:	2805883a 	mov	r2,r5
 8008e50:	dc000015 	stw	r16,0(sp)
 8008e54:	040200b4 	movhi	r16,2050
 8008e58:	dc400115 	stw	r17,4(sp)
 8008e5c:	300b883a 	mov	r5,r6
 8008e60:	8425ad04 	addi	r16,r16,-26956
 8008e64:	2023883a 	mov	r17,r4
 8008e68:	380d883a 	mov	r6,r7
 8008e6c:	1009883a 	mov	r4,r2
 8008e70:	dfc00215 	stw	ra,8(sp)
 8008e74:	80000015 	stw	zero,0(r16)
 8008e78:	800ecd00 	call	800ecd0 <read>
 8008e7c:	00ffffc4 	movi	r3,-1
 8008e80:	10c00526 	beq	r2,r3,8008e98 <_read_r+0x50>
 8008e84:	dfc00217 	ldw	ra,8(sp)
 8008e88:	dc400117 	ldw	r17,4(sp)
 8008e8c:	dc000017 	ldw	r16,0(sp)
 8008e90:	dec00304 	addi	sp,sp,12
 8008e94:	f800283a 	ret
 8008e98:	80c00017 	ldw	r3,0(r16)
 8008e9c:	183ff926 	beq	r3,zero,8008e84 <__alt_data_end+0xf8008e84>
 8008ea0:	88c00015 	stw	r3,0(r17)
 8008ea4:	003ff706 	br	8008e84 <__alt_data_end+0xf8008e84>

08008ea8 <_realloc_r>:
 8008ea8:	defff604 	addi	sp,sp,-40
 8008eac:	dc800215 	stw	r18,8(sp)
 8008eb0:	dfc00915 	stw	ra,36(sp)
 8008eb4:	df000815 	stw	fp,32(sp)
 8008eb8:	ddc00715 	stw	r23,28(sp)
 8008ebc:	dd800615 	stw	r22,24(sp)
 8008ec0:	dd400515 	stw	r21,20(sp)
 8008ec4:	dd000415 	stw	r20,16(sp)
 8008ec8:	dcc00315 	stw	r19,12(sp)
 8008ecc:	dc400115 	stw	r17,4(sp)
 8008ed0:	dc000015 	stw	r16,0(sp)
 8008ed4:	3025883a 	mov	r18,r6
 8008ed8:	2800b726 	beq	r5,zero,80091b8 <_realloc_r+0x310>
 8008edc:	282b883a 	mov	r21,r5
 8008ee0:	2029883a 	mov	r20,r4
 8008ee4:	800e9f80 	call	800e9f8 <__malloc_lock>
 8008ee8:	a8bfff17 	ldw	r2,-4(r21)
 8008eec:	043fff04 	movi	r16,-4
 8008ef0:	90c002c4 	addi	r3,r18,11
 8008ef4:	01000584 	movi	r4,22
 8008ef8:	acfffe04 	addi	r19,r21,-8
 8008efc:	1420703a 	and	r16,r2,r16
 8008f00:	20c0332e 	bgeu	r4,r3,8008fd0 <_realloc_r+0x128>
 8008f04:	047ffe04 	movi	r17,-8
 8008f08:	1c62703a 	and	r17,r3,r17
 8008f0c:	8807883a 	mov	r3,r17
 8008f10:	88005816 	blt	r17,zero,8009074 <_realloc_r+0x1cc>
 8008f14:	8c805736 	bltu	r17,r18,8009074 <_realloc_r+0x1cc>
 8008f18:	80c0300e 	bge	r16,r3,8008fdc <_realloc_r+0x134>
 8008f1c:	07020074 	movhi	fp,2049
 8008f20:	e7191304 	addi	fp,fp,25676
 8008f24:	e1c00217 	ldw	r7,8(fp)
 8008f28:	9c09883a 	add	r4,r19,r16
 8008f2c:	22000117 	ldw	r8,4(r4)
 8008f30:	21c06326 	beq	r4,r7,80090c0 <_realloc_r+0x218>
 8008f34:	017fff84 	movi	r5,-2
 8008f38:	414a703a 	and	r5,r8,r5
 8008f3c:	214b883a 	add	r5,r4,r5
 8008f40:	29800117 	ldw	r6,4(r5)
 8008f44:	3180004c 	andi	r6,r6,1
 8008f48:	30003f26 	beq	r6,zero,8009048 <_realloc_r+0x1a0>
 8008f4c:	1080004c 	andi	r2,r2,1
 8008f50:	10008326 	beq	r2,zero,8009160 <_realloc_r+0x2b8>
 8008f54:	900b883a 	mov	r5,r18
 8008f58:	a009883a 	mov	r4,r20
 8008f5c:	8001d900 	call	8001d90 <_malloc_r>
 8008f60:	1025883a 	mov	r18,r2
 8008f64:	10011e26 	beq	r2,zero,80093e0 <_realloc_r+0x538>
 8008f68:	a93fff17 	ldw	r4,-4(r21)
 8008f6c:	10fffe04 	addi	r3,r2,-8
 8008f70:	00bfff84 	movi	r2,-2
 8008f74:	2084703a 	and	r2,r4,r2
 8008f78:	9885883a 	add	r2,r19,r2
 8008f7c:	1880ee26 	beq	r3,r2,8009338 <_realloc_r+0x490>
 8008f80:	81bfff04 	addi	r6,r16,-4
 8008f84:	00800904 	movi	r2,36
 8008f88:	1180b836 	bltu	r2,r6,800926c <_realloc_r+0x3c4>
 8008f8c:	00c004c4 	movi	r3,19
 8008f90:	19809636 	bltu	r3,r6,80091ec <_realloc_r+0x344>
 8008f94:	9005883a 	mov	r2,r18
 8008f98:	a807883a 	mov	r3,r21
 8008f9c:	19000017 	ldw	r4,0(r3)
 8008fa0:	11000015 	stw	r4,0(r2)
 8008fa4:	19000117 	ldw	r4,4(r3)
 8008fa8:	11000115 	stw	r4,4(r2)
 8008fac:	18c00217 	ldw	r3,8(r3)
 8008fb0:	10c00215 	stw	r3,8(r2)
 8008fb4:	a80b883a 	mov	r5,r21
 8008fb8:	a009883a 	mov	r4,r20
 8008fbc:	80012600 	call	8001260 <_free_r>
 8008fc0:	a009883a 	mov	r4,r20
 8008fc4:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8008fc8:	9005883a 	mov	r2,r18
 8008fcc:	00001206 	br	8009018 <_realloc_r+0x170>
 8008fd0:	00c00404 	movi	r3,16
 8008fd4:	1823883a 	mov	r17,r3
 8008fd8:	003fce06 	br	8008f14 <__alt_data_end+0xf8008f14>
 8008fdc:	a825883a 	mov	r18,r21
 8008fe0:	8445c83a 	sub	r2,r16,r17
 8008fe4:	00c003c4 	movi	r3,15
 8008fe8:	18802636 	bltu	r3,r2,8009084 <_realloc_r+0x1dc>
 8008fec:	99800117 	ldw	r6,4(r19)
 8008ff0:	9c07883a 	add	r3,r19,r16
 8008ff4:	3180004c 	andi	r6,r6,1
 8008ff8:	3420b03a 	or	r16,r6,r16
 8008ffc:	9c000115 	stw	r16,4(r19)
 8009000:	18800117 	ldw	r2,4(r3)
 8009004:	10800054 	ori	r2,r2,1
 8009008:	18800115 	stw	r2,4(r3)
 800900c:	a009883a 	mov	r4,r20
 8009010:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8009014:	9005883a 	mov	r2,r18
 8009018:	dfc00917 	ldw	ra,36(sp)
 800901c:	df000817 	ldw	fp,32(sp)
 8009020:	ddc00717 	ldw	r23,28(sp)
 8009024:	dd800617 	ldw	r22,24(sp)
 8009028:	dd400517 	ldw	r21,20(sp)
 800902c:	dd000417 	ldw	r20,16(sp)
 8009030:	dcc00317 	ldw	r19,12(sp)
 8009034:	dc800217 	ldw	r18,8(sp)
 8009038:	dc400117 	ldw	r17,4(sp)
 800903c:	dc000017 	ldw	r16,0(sp)
 8009040:	dec00a04 	addi	sp,sp,40
 8009044:	f800283a 	ret
 8009048:	017fff04 	movi	r5,-4
 800904c:	414a703a 	and	r5,r8,r5
 8009050:	814d883a 	add	r6,r16,r5
 8009054:	30c01f16 	blt	r6,r3,80090d4 <_realloc_r+0x22c>
 8009058:	20800317 	ldw	r2,12(r4)
 800905c:	20c00217 	ldw	r3,8(r4)
 8009060:	a825883a 	mov	r18,r21
 8009064:	3021883a 	mov	r16,r6
 8009068:	18800315 	stw	r2,12(r3)
 800906c:	10c00215 	stw	r3,8(r2)
 8009070:	003fdb06 	br	8008fe0 <__alt_data_end+0xf8008fe0>
 8009074:	00800304 	movi	r2,12
 8009078:	a0800015 	stw	r2,0(r20)
 800907c:	0005883a 	mov	r2,zero
 8009080:	003fe506 	br	8009018 <__alt_data_end+0xf8009018>
 8009084:	98c00117 	ldw	r3,4(r19)
 8009088:	9c4b883a 	add	r5,r19,r17
 800908c:	11000054 	ori	r4,r2,1
 8009090:	18c0004c 	andi	r3,r3,1
 8009094:	1c62b03a 	or	r17,r3,r17
 8009098:	9c400115 	stw	r17,4(r19)
 800909c:	29000115 	stw	r4,4(r5)
 80090a0:	2885883a 	add	r2,r5,r2
 80090a4:	10c00117 	ldw	r3,4(r2)
 80090a8:	29400204 	addi	r5,r5,8
 80090ac:	a009883a 	mov	r4,r20
 80090b0:	18c00054 	ori	r3,r3,1
 80090b4:	10c00115 	stw	r3,4(r2)
 80090b8:	80012600 	call	8001260 <_free_r>
 80090bc:	003fd306 	br	800900c <__alt_data_end+0xf800900c>
 80090c0:	017fff04 	movi	r5,-4
 80090c4:	414a703a 	and	r5,r8,r5
 80090c8:	89800404 	addi	r6,r17,16
 80090cc:	8151883a 	add	r8,r16,r5
 80090d0:	4180590e 	bge	r8,r6,8009238 <_realloc_r+0x390>
 80090d4:	1080004c 	andi	r2,r2,1
 80090d8:	103f9e1e 	bne	r2,zero,8008f54 <__alt_data_end+0xf8008f54>
 80090dc:	adbffe17 	ldw	r22,-8(r21)
 80090e0:	00bfff04 	movi	r2,-4
 80090e4:	9dadc83a 	sub	r22,r19,r22
 80090e8:	b1800117 	ldw	r6,4(r22)
 80090ec:	3084703a 	and	r2,r6,r2
 80090f0:	20002026 	beq	r4,zero,8009174 <_realloc_r+0x2cc>
 80090f4:	80af883a 	add	r23,r16,r2
 80090f8:	b96f883a 	add	r23,r23,r5
 80090fc:	21c05f26 	beq	r4,r7,800927c <_realloc_r+0x3d4>
 8009100:	b8c01c16 	blt	r23,r3,8009174 <_realloc_r+0x2cc>
 8009104:	20800317 	ldw	r2,12(r4)
 8009108:	20c00217 	ldw	r3,8(r4)
 800910c:	81bfff04 	addi	r6,r16,-4
 8009110:	01000904 	movi	r4,36
 8009114:	18800315 	stw	r2,12(r3)
 8009118:	10c00215 	stw	r3,8(r2)
 800911c:	b0c00217 	ldw	r3,8(r22)
 8009120:	b0800317 	ldw	r2,12(r22)
 8009124:	b4800204 	addi	r18,r22,8
 8009128:	18800315 	stw	r2,12(r3)
 800912c:	10c00215 	stw	r3,8(r2)
 8009130:	21801b36 	bltu	r4,r6,80091a0 <_realloc_r+0x2f8>
 8009134:	008004c4 	movi	r2,19
 8009138:	1180352e 	bgeu	r2,r6,8009210 <_realloc_r+0x368>
 800913c:	a8800017 	ldw	r2,0(r21)
 8009140:	b0800215 	stw	r2,8(r22)
 8009144:	a8800117 	ldw	r2,4(r21)
 8009148:	b0800315 	stw	r2,12(r22)
 800914c:	008006c4 	movi	r2,27
 8009150:	11807f36 	bltu	r2,r6,8009350 <_realloc_r+0x4a8>
 8009154:	b0800404 	addi	r2,r22,16
 8009158:	ad400204 	addi	r21,r21,8
 800915c:	00002d06 	br	8009214 <_realloc_r+0x36c>
 8009160:	adbffe17 	ldw	r22,-8(r21)
 8009164:	00bfff04 	movi	r2,-4
 8009168:	9dadc83a 	sub	r22,r19,r22
 800916c:	b1000117 	ldw	r4,4(r22)
 8009170:	2084703a 	and	r2,r4,r2
 8009174:	b03f7726 	beq	r22,zero,8008f54 <__alt_data_end+0xf8008f54>
 8009178:	80af883a 	add	r23,r16,r2
 800917c:	b8ff7516 	blt	r23,r3,8008f54 <__alt_data_end+0xf8008f54>
 8009180:	b0800317 	ldw	r2,12(r22)
 8009184:	b0c00217 	ldw	r3,8(r22)
 8009188:	81bfff04 	addi	r6,r16,-4
 800918c:	01000904 	movi	r4,36
 8009190:	18800315 	stw	r2,12(r3)
 8009194:	10c00215 	stw	r3,8(r2)
 8009198:	b4800204 	addi	r18,r22,8
 800919c:	21bfe52e 	bgeu	r4,r6,8009134 <__alt_data_end+0xf8009134>
 80091a0:	a80b883a 	mov	r5,r21
 80091a4:	9009883a 	mov	r4,r18
 80091a8:	8007b880 	call	8007b88 <memmove>
 80091ac:	b821883a 	mov	r16,r23
 80091b0:	b027883a 	mov	r19,r22
 80091b4:	003f8a06 	br	8008fe0 <__alt_data_end+0xf8008fe0>
 80091b8:	300b883a 	mov	r5,r6
 80091bc:	dfc00917 	ldw	ra,36(sp)
 80091c0:	df000817 	ldw	fp,32(sp)
 80091c4:	ddc00717 	ldw	r23,28(sp)
 80091c8:	dd800617 	ldw	r22,24(sp)
 80091cc:	dd400517 	ldw	r21,20(sp)
 80091d0:	dd000417 	ldw	r20,16(sp)
 80091d4:	dcc00317 	ldw	r19,12(sp)
 80091d8:	dc800217 	ldw	r18,8(sp)
 80091dc:	dc400117 	ldw	r17,4(sp)
 80091e0:	dc000017 	ldw	r16,0(sp)
 80091e4:	dec00a04 	addi	sp,sp,40
 80091e8:	8001d901 	jmpi	8001d90 <_malloc_r>
 80091ec:	a8c00017 	ldw	r3,0(r21)
 80091f0:	90c00015 	stw	r3,0(r18)
 80091f4:	a8c00117 	ldw	r3,4(r21)
 80091f8:	90c00115 	stw	r3,4(r18)
 80091fc:	00c006c4 	movi	r3,27
 8009200:	19804536 	bltu	r3,r6,8009318 <_realloc_r+0x470>
 8009204:	90800204 	addi	r2,r18,8
 8009208:	a8c00204 	addi	r3,r21,8
 800920c:	003f6306 	br	8008f9c <__alt_data_end+0xf8008f9c>
 8009210:	9005883a 	mov	r2,r18
 8009214:	a8c00017 	ldw	r3,0(r21)
 8009218:	b821883a 	mov	r16,r23
 800921c:	b027883a 	mov	r19,r22
 8009220:	10c00015 	stw	r3,0(r2)
 8009224:	a8c00117 	ldw	r3,4(r21)
 8009228:	10c00115 	stw	r3,4(r2)
 800922c:	a8c00217 	ldw	r3,8(r21)
 8009230:	10c00215 	stw	r3,8(r2)
 8009234:	003f6a06 	br	8008fe0 <__alt_data_end+0xf8008fe0>
 8009238:	9c67883a 	add	r19,r19,r17
 800923c:	4445c83a 	sub	r2,r8,r17
 8009240:	e4c00215 	stw	r19,8(fp)
 8009244:	10800054 	ori	r2,r2,1
 8009248:	98800115 	stw	r2,4(r19)
 800924c:	a8bfff17 	ldw	r2,-4(r21)
 8009250:	a009883a 	mov	r4,r20
 8009254:	1080004c 	andi	r2,r2,1
 8009258:	1462b03a 	or	r17,r2,r17
 800925c:	ac7fff15 	stw	r17,-4(r21)
 8009260:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8009264:	a805883a 	mov	r2,r21
 8009268:	003f6b06 	br	8009018 <__alt_data_end+0xf8009018>
 800926c:	a80b883a 	mov	r5,r21
 8009270:	9009883a 	mov	r4,r18
 8009274:	8007b880 	call	8007b88 <memmove>
 8009278:	003f4e06 	br	8008fb4 <__alt_data_end+0xf8008fb4>
 800927c:	89000404 	addi	r4,r17,16
 8009280:	b93fbc16 	blt	r23,r4,8009174 <__alt_data_end+0xf8009174>
 8009284:	b0800317 	ldw	r2,12(r22)
 8009288:	b0c00217 	ldw	r3,8(r22)
 800928c:	81bfff04 	addi	r6,r16,-4
 8009290:	01000904 	movi	r4,36
 8009294:	18800315 	stw	r2,12(r3)
 8009298:	10c00215 	stw	r3,8(r2)
 800929c:	b4800204 	addi	r18,r22,8
 80092a0:	21804336 	bltu	r4,r6,80093b0 <_realloc_r+0x508>
 80092a4:	008004c4 	movi	r2,19
 80092a8:	11803f2e 	bgeu	r2,r6,80093a8 <_realloc_r+0x500>
 80092ac:	a8800017 	ldw	r2,0(r21)
 80092b0:	b0800215 	stw	r2,8(r22)
 80092b4:	a8800117 	ldw	r2,4(r21)
 80092b8:	b0800315 	stw	r2,12(r22)
 80092bc:	008006c4 	movi	r2,27
 80092c0:	11803f36 	bltu	r2,r6,80093c0 <_realloc_r+0x518>
 80092c4:	b0800404 	addi	r2,r22,16
 80092c8:	ad400204 	addi	r21,r21,8
 80092cc:	a8c00017 	ldw	r3,0(r21)
 80092d0:	10c00015 	stw	r3,0(r2)
 80092d4:	a8c00117 	ldw	r3,4(r21)
 80092d8:	10c00115 	stw	r3,4(r2)
 80092dc:	a8c00217 	ldw	r3,8(r21)
 80092e0:	10c00215 	stw	r3,8(r2)
 80092e4:	b447883a 	add	r3,r22,r17
 80092e8:	bc45c83a 	sub	r2,r23,r17
 80092ec:	e0c00215 	stw	r3,8(fp)
 80092f0:	10800054 	ori	r2,r2,1
 80092f4:	18800115 	stw	r2,4(r3)
 80092f8:	b0800117 	ldw	r2,4(r22)
 80092fc:	a009883a 	mov	r4,r20
 8009300:	1080004c 	andi	r2,r2,1
 8009304:	1462b03a 	or	r17,r2,r17
 8009308:	b4400115 	stw	r17,4(r22)
 800930c:	800ea1c0 	call	800ea1c <__malloc_unlock>
 8009310:	9005883a 	mov	r2,r18
 8009314:	003f4006 	br	8009018 <__alt_data_end+0xf8009018>
 8009318:	a8c00217 	ldw	r3,8(r21)
 800931c:	90c00215 	stw	r3,8(r18)
 8009320:	a8c00317 	ldw	r3,12(r21)
 8009324:	90c00315 	stw	r3,12(r18)
 8009328:	30801126 	beq	r6,r2,8009370 <_realloc_r+0x4c8>
 800932c:	90800404 	addi	r2,r18,16
 8009330:	a8c00404 	addi	r3,r21,16
 8009334:	003f1906 	br	8008f9c <__alt_data_end+0xf8008f9c>
 8009338:	90ffff17 	ldw	r3,-4(r18)
 800933c:	00bfff04 	movi	r2,-4
 8009340:	a825883a 	mov	r18,r21
 8009344:	1884703a 	and	r2,r3,r2
 8009348:	80a1883a 	add	r16,r16,r2
 800934c:	003f2406 	br	8008fe0 <__alt_data_end+0xf8008fe0>
 8009350:	a8800217 	ldw	r2,8(r21)
 8009354:	b0800415 	stw	r2,16(r22)
 8009358:	a8800317 	ldw	r2,12(r21)
 800935c:	b0800515 	stw	r2,20(r22)
 8009360:	31000a26 	beq	r6,r4,800938c <_realloc_r+0x4e4>
 8009364:	b0800604 	addi	r2,r22,24
 8009368:	ad400404 	addi	r21,r21,16
 800936c:	003fa906 	br	8009214 <__alt_data_end+0xf8009214>
 8009370:	a9000417 	ldw	r4,16(r21)
 8009374:	90800604 	addi	r2,r18,24
 8009378:	a8c00604 	addi	r3,r21,24
 800937c:	91000415 	stw	r4,16(r18)
 8009380:	a9000517 	ldw	r4,20(r21)
 8009384:	91000515 	stw	r4,20(r18)
 8009388:	003f0406 	br	8008f9c <__alt_data_end+0xf8008f9c>
 800938c:	a8c00417 	ldw	r3,16(r21)
 8009390:	ad400604 	addi	r21,r21,24
 8009394:	b0800804 	addi	r2,r22,32
 8009398:	b0c00615 	stw	r3,24(r22)
 800939c:	a8ffff17 	ldw	r3,-4(r21)
 80093a0:	b0c00715 	stw	r3,28(r22)
 80093a4:	003f9b06 	br	8009214 <__alt_data_end+0xf8009214>
 80093a8:	9005883a 	mov	r2,r18
 80093ac:	003fc706 	br	80092cc <__alt_data_end+0xf80092cc>
 80093b0:	a80b883a 	mov	r5,r21
 80093b4:	9009883a 	mov	r4,r18
 80093b8:	8007b880 	call	8007b88 <memmove>
 80093bc:	003fc906 	br	80092e4 <__alt_data_end+0xf80092e4>
 80093c0:	a8800217 	ldw	r2,8(r21)
 80093c4:	b0800415 	stw	r2,16(r22)
 80093c8:	a8800317 	ldw	r2,12(r21)
 80093cc:	b0800515 	stw	r2,20(r22)
 80093d0:	31000726 	beq	r6,r4,80093f0 <_realloc_r+0x548>
 80093d4:	b0800604 	addi	r2,r22,24
 80093d8:	ad400404 	addi	r21,r21,16
 80093dc:	003fbb06 	br	80092cc <__alt_data_end+0xf80092cc>
 80093e0:	a009883a 	mov	r4,r20
 80093e4:	800ea1c0 	call	800ea1c <__malloc_unlock>
 80093e8:	0005883a 	mov	r2,zero
 80093ec:	003f0a06 	br	8009018 <__alt_data_end+0xf8009018>
 80093f0:	a8c00417 	ldw	r3,16(r21)
 80093f4:	ad400604 	addi	r21,r21,24
 80093f8:	b0800804 	addi	r2,r22,32
 80093fc:	b0c00615 	stw	r3,24(r22)
 8009400:	a8ffff17 	ldw	r3,-4(r21)
 8009404:	b0c00715 	stw	r3,28(r22)
 8009408:	003fb006 	br	80092cc <__alt_data_end+0xf80092cc>

0800940c <__fpclassifyd>:
 800940c:	00a00034 	movhi	r2,32768
 8009410:	10bfffc4 	addi	r2,r2,-1
 8009414:	2884703a 	and	r2,r5,r2
 8009418:	10000726 	beq	r2,zero,8009438 <__fpclassifyd+0x2c>
 800941c:	00fffc34 	movhi	r3,65520
 8009420:	019ff834 	movhi	r6,32736
 8009424:	28c7883a 	add	r3,r5,r3
 8009428:	31bfffc4 	addi	r6,r6,-1
 800942c:	30c00536 	bltu	r6,r3,8009444 <__fpclassifyd+0x38>
 8009430:	00800104 	movi	r2,4
 8009434:	f800283a 	ret
 8009438:	2000021e 	bne	r4,zero,8009444 <__fpclassifyd+0x38>
 800943c:	00800084 	movi	r2,2
 8009440:	f800283a 	ret
 8009444:	00dffc34 	movhi	r3,32752
 8009448:	019ff834 	movhi	r6,32736
 800944c:	28cb883a 	add	r5,r5,r3
 8009450:	31bfffc4 	addi	r6,r6,-1
 8009454:	317ff62e 	bgeu	r6,r5,8009430 <__alt_data_end+0xf8009430>
 8009458:	01400434 	movhi	r5,16
 800945c:	297fffc4 	addi	r5,r5,-1
 8009460:	28800236 	bltu	r5,r2,800946c <__fpclassifyd+0x60>
 8009464:	008000c4 	movi	r2,3
 8009468:	f800283a 	ret
 800946c:	10c00226 	beq	r2,r3,8009478 <__fpclassifyd+0x6c>
 8009470:	0005883a 	mov	r2,zero
 8009474:	f800283a 	ret
 8009478:	2005003a 	cmpeq	r2,r4,zero
 800947c:	f800283a 	ret

08009480 <strcmp>:
 8009480:	2144b03a 	or	r2,r4,r5
 8009484:	108000cc 	andi	r2,r2,3
 8009488:	1000171e 	bne	r2,zero,80094e8 <strcmp+0x68>
 800948c:	20800017 	ldw	r2,0(r4)
 8009490:	28c00017 	ldw	r3,0(r5)
 8009494:	10c0141e 	bne	r2,r3,80094e8 <strcmp+0x68>
 8009498:	027fbff4 	movhi	r9,65279
 800949c:	4a7fbfc4 	addi	r9,r9,-257
 80094a0:	0086303a 	nor	r3,zero,r2
 80094a4:	02202074 	movhi	r8,32897
 80094a8:	1245883a 	add	r2,r2,r9
 80094ac:	42202004 	addi	r8,r8,-32640
 80094b0:	10c4703a 	and	r2,r2,r3
 80094b4:	1204703a 	and	r2,r2,r8
 80094b8:	10000226 	beq	r2,zero,80094c4 <strcmp+0x44>
 80094bc:	00002306 	br	800954c <strcmp+0xcc>
 80094c0:	1000221e 	bne	r2,zero,800954c <strcmp+0xcc>
 80094c4:	21000104 	addi	r4,r4,4
 80094c8:	20c00017 	ldw	r3,0(r4)
 80094cc:	29400104 	addi	r5,r5,4
 80094d0:	29800017 	ldw	r6,0(r5)
 80094d4:	1a4f883a 	add	r7,r3,r9
 80094d8:	00c4303a 	nor	r2,zero,r3
 80094dc:	3884703a 	and	r2,r7,r2
 80094e0:	1204703a 	and	r2,r2,r8
 80094e4:	19bff626 	beq	r3,r6,80094c0 <__alt_data_end+0xf80094c0>
 80094e8:	20800003 	ldbu	r2,0(r4)
 80094ec:	10c03fcc 	andi	r3,r2,255
 80094f0:	18c0201c 	xori	r3,r3,128
 80094f4:	18ffe004 	addi	r3,r3,-128
 80094f8:	18000c26 	beq	r3,zero,800952c <strcmp+0xac>
 80094fc:	29800007 	ldb	r6,0(r5)
 8009500:	19800326 	beq	r3,r6,8009510 <strcmp+0x90>
 8009504:	00001306 	br	8009554 <strcmp+0xd4>
 8009508:	29800007 	ldb	r6,0(r5)
 800950c:	11800b1e 	bne	r2,r6,800953c <strcmp+0xbc>
 8009510:	21000044 	addi	r4,r4,1
 8009514:	20c00003 	ldbu	r3,0(r4)
 8009518:	29400044 	addi	r5,r5,1
 800951c:	18803fcc 	andi	r2,r3,255
 8009520:	1080201c 	xori	r2,r2,128
 8009524:	10bfe004 	addi	r2,r2,-128
 8009528:	103ff71e 	bne	r2,zero,8009508 <__alt_data_end+0xf8009508>
 800952c:	0007883a 	mov	r3,zero
 8009530:	28800003 	ldbu	r2,0(r5)
 8009534:	1885c83a 	sub	r2,r3,r2
 8009538:	f800283a 	ret
 800953c:	28800003 	ldbu	r2,0(r5)
 8009540:	18c03fcc 	andi	r3,r3,255
 8009544:	1885c83a 	sub	r2,r3,r2
 8009548:	f800283a 	ret
 800954c:	0005883a 	mov	r2,zero
 8009550:	f800283a 	ret
 8009554:	10c03fcc 	andi	r3,r2,255
 8009558:	003ff506 	br	8009530 <__alt_data_end+0xf8009530>

0800955c <__sprint_r.part.0>:
 800955c:	28801917 	ldw	r2,100(r5)
 8009560:	defff604 	addi	sp,sp,-40
 8009564:	dd400515 	stw	r21,20(sp)
 8009568:	dfc00915 	stw	ra,36(sp)
 800956c:	df000815 	stw	fp,32(sp)
 8009570:	ddc00715 	stw	r23,28(sp)
 8009574:	dd800615 	stw	r22,24(sp)
 8009578:	dd000415 	stw	r20,16(sp)
 800957c:	dcc00315 	stw	r19,12(sp)
 8009580:	dc800215 	stw	r18,8(sp)
 8009584:	dc400115 	stw	r17,4(sp)
 8009588:	dc000015 	stw	r16,0(sp)
 800958c:	1088000c 	andi	r2,r2,8192
 8009590:	302b883a 	mov	r21,r6
 8009594:	10002e26 	beq	r2,zero,8009650 <__sprint_r.part.0+0xf4>
 8009598:	30800217 	ldw	r2,8(r6)
 800959c:	35800017 	ldw	r22,0(r6)
 80095a0:	10002926 	beq	r2,zero,8009648 <__sprint_r.part.0+0xec>
 80095a4:	2827883a 	mov	r19,r5
 80095a8:	2029883a 	mov	r20,r4
 80095ac:	b5c00104 	addi	r23,r22,4
 80095b0:	04bfffc4 	movi	r18,-1
 80095b4:	bc400017 	ldw	r17,0(r23)
 80095b8:	b4000017 	ldw	r16,0(r22)
 80095bc:	0039883a 	mov	fp,zero
 80095c0:	8822d0ba 	srli	r17,r17,2
 80095c4:	8800031e 	bne	r17,zero,80095d4 <__sprint_r.part.0+0x78>
 80095c8:	00001806 	br	800962c <__sprint_r.part.0+0xd0>
 80095cc:	84000104 	addi	r16,r16,4
 80095d0:	8f001526 	beq	r17,fp,8009628 <__sprint_r.part.0+0xcc>
 80095d4:	81400017 	ldw	r5,0(r16)
 80095d8:	980d883a 	mov	r6,r19
 80095dc:	a009883a 	mov	r4,r20
 80095e0:	800af240 	call	800af24 <_fputwc_r>
 80095e4:	e7000044 	addi	fp,fp,1
 80095e8:	14bff81e 	bne	r2,r18,80095cc <__alt_data_end+0xf80095cc>
 80095ec:	9005883a 	mov	r2,r18
 80095f0:	a8000215 	stw	zero,8(r21)
 80095f4:	a8000115 	stw	zero,4(r21)
 80095f8:	dfc00917 	ldw	ra,36(sp)
 80095fc:	df000817 	ldw	fp,32(sp)
 8009600:	ddc00717 	ldw	r23,28(sp)
 8009604:	dd800617 	ldw	r22,24(sp)
 8009608:	dd400517 	ldw	r21,20(sp)
 800960c:	dd000417 	ldw	r20,16(sp)
 8009610:	dcc00317 	ldw	r19,12(sp)
 8009614:	dc800217 	ldw	r18,8(sp)
 8009618:	dc400117 	ldw	r17,4(sp)
 800961c:	dc000017 	ldw	r16,0(sp)
 8009620:	dec00a04 	addi	sp,sp,40
 8009624:	f800283a 	ret
 8009628:	a8800217 	ldw	r2,8(r21)
 800962c:	8c63883a 	add	r17,r17,r17
 8009630:	8c63883a 	add	r17,r17,r17
 8009634:	1445c83a 	sub	r2,r2,r17
 8009638:	a8800215 	stw	r2,8(r21)
 800963c:	b5800204 	addi	r22,r22,8
 8009640:	bdc00204 	addi	r23,r23,8
 8009644:	103fdb1e 	bne	r2,zero,80095b4 <__alt_data_end+0xf80095b4>
 8009648:	0005883a 	mov	r2,zero
 800964c:	003fe806 	br	80095f0 <__alt_data_end+0xf80095f0>
 8009650:	80074580 	call	8007458 <__sfvwrite_r>
 8009654:	003fe606 	br	80095f0 <__alt_data_end+0xf80095f0>

08009658 <__sprint_r>:
 8009658:	30c00217 	ldw	r3,8(r6)
 800965c:	18000126 	beq	r3,zero,8009664 <__sprint_r+0xc>
 8009660:	800955c1 	jmpi	800955c <__sprint_r.part.0>
 8009664:	30000115 	stw	zero,4(r6)
 8009668:	0005883a 	mov	r2,zero
 800966c:	f800283a 	ret

08009670 <___vfiprintf_internal_r>:
 8009670:	deffc904 	addi	sp,sp,-220
 8009674:	df003515 	stw	fp,212(sp)
 8009678:	dd003115 	stw	r20,196(sp)
 800967c:	dfc03615 	stw	ra,216(sp)
 8009680:	ddc03415 	stw	r23,208(sp)
 8009684:	dd803315 	stw	r22,204(sp)
 8009688:	dd403215 	stw	r21,200(sp)
 800968c:	dcc03015 	stw	r19,192(sp)
 8009690:	dc802f15 	stw	r18,188(sp)
 8009694:	dc402e15 	stw	r17,184(sp)
 8009698:	dc002d15 	stw	r16,180(sp)
 800969c:	d9002015 	stw	r4,128(sp)
 80096a0:	d9c02215 	stw	r7,136(sp)
 80096a4:	2829883a 	mov	r20,r5
 80096a8:	3039883a 	mov	fp,r6
 80096ac:	20000226 	beq	r4,zero,80096b8 <___vfiprintf_internal_r+0x48>
 80096b0:	20800e17 	ldw	r2,56(r4)
 80096b4:	1000cf26 	beq	r2,zero,80099f4 <___vfiprintf_internal_r+0x384>
 80096b8:	a080030b 	ldhu	r2,12(r20)
 80096bc:	10c8000c 	andi	r3,r2,8192
 80096c0:	1800061e 	bne	r3,zero,80096dc <___vfiprintf_internal_r+0x6c>
 80096c4:	a1001917 	ldw	r4,100(r20)
 80096c8:	00f7ffc4 	movi	r3,-8193
 80096cc:	10880014 	ori	r2,r2,8192
 80096d0:	20c6703a 	and	r3,r4,r3
 80096d4:	a080030d 	sth	r2,12(r20)
 80096d8:	a0c01915 	stw	r3,100(r20)
 80096dc:	10c0020c 	andi	r3,r2,8
 80096e0:	1800a926 	beq	r3,zero,8009988 <___vfiprintf_internal_r+0x318>
 80096e4:	a0c00417 	ldw	r3,16(r20)
 80096e8:	1800a726 	beq	r3,zero,8009988 <___vfiprintf_internal_r+0x318>
 80096ec:	1080068c 	andi	r2,r2,26
 80096f0:	00c00284 	movi	r3,10
 80096f4:	10c0ac26 	beq	r2,r3,80099a8 <___vfiprintf_internal_r+0x338>
 80096f8:	da801a04 	addi	r10,sp,104
 80096fc:	da801e15 	stw	r10,120(sp)
 8009700:	d8801e17 	ldw	r2,120(sp)
 8009704:	da8019c4 	addi	r10,sp,103
 8009708:	05820074 	movhi	r22,2049
 800970c:	05c20074 	movhi	r23,2049
 8009710:	da801f15 	stw	r10,124(sp)
 8009714:	1295c83a 	sub	r10,r2,r10
 8009718:	b597b204 	addi	r22,r22,24264
 800971c:	bdd7ae04 	addi	r23,r23,24248
 8009720:	dec01a15 	stw	sp,104(sp)
 8009724:	d8001c15 	stw	zero,112(sp)
 8009728:	d8001b15 	stw	zero,108(sp)
 800972c:	d8002615 	stw	zero,152(sp)
 8009730:	d8002315 	stw	zero,140(sp)
 8009734:	da802715 	stw	r10,156(sp)
 8009738:	d811883a 	mov	r8,sp
 800973c:	dd002115 	stw	r20,132(sp)
 8009740:	e021883a 	mov	r16,fp
 8009744:	80800007 	ldb	r2,0(r16)
 8009748:	1003ea26 	beq	r2,zero,800a6f4 <___vfiprintf_internal_r+0x1084>
 800974c:	00c00944 	movi	r3,37
 8009750:	8025883a 	mov	r18,r16
 8009754:	10c0021e 	bne	r2,r3,8009760 <___vfiprintf_internal_r+0xf0>
 8009758:	00001606 	br	80097b4 <___vfiprintf_internal_r+0x144>
 800975c:	10c00326 	beq	r2,r3,800976c <___vfiprintf_internal_r+0xfc>
 8009760:	94800044 	addi	r18,r18,1
 8009764:	90800007 	ldb	r2,0(r18)
 8009768:	103ffc1e 	bne	r2,zero,800975c <__alt_data_end+0xf800975c>
 800976c:	9423c83a 	sub	r17,r18,r16
 8009770:	88001026 	beq	r17,zero,80097b4 <___vfiprintf_internal_r+0x144>
 8009774:	d8c01c17 	ldw	r3,112(sp)
 8009778:	d8801b17 	ldw	r2,108(sp)
 800977c:	44000015 	stw	r16,0(r8)
 8009780:	88c7883a 	add	r3,r17,r3
 8009784:	10800044 	addi	r2,r2,1
 8009788:	44400115 	stw	r17,4(r8)
 800978c:	d8c01c15 	stw	r3,112(sp)
 8009790:	d8801b15 	stw	r2,108(sp)
 8009794:	010001c4 	movi	r4,7
 8009798:	2080760e 	bge	r4,r2,8009974 <___vfiprintf_internal_r+0x304>
 800979c:	1803821e 	bne	r3,zero,800a5a8 <___vfiprintf_internal_r+0xf38>
 80097a0:	da802317 	ldw	r10,140(sp)
 80097a4:	d8001b15 	stw	zero,108(sp)
 80097a8:	d811883a 	mov	r8,sp
 80097ac:	5455883a 	add	r10,r10,r17
 80097b0:	da802315 	stw	r10,140(sp)
 80097b4:	90800007 	ldb	r2,0(r18)
 80097b8:	10044626 	beq	r2,zero,800a8d4 <___vfiprintf_internal_r+0x1264>
 80097bc:	90c00047 	ldb	r3,1(r18)
 80097c0:	94000044 	addi	r16,r18,1
 80097c4:	d8001d85 	stb	zero,118(sp)
 80097c8:	0009883a 	mov	r4,zero
 80097cc:	000f883a 	mov	r7,zero
 80097d0:	027fffc4 	movi	r9,-1
 80097d4:	0023883a 	mov	r17,zero
 80097d8:	0029883a 	mov	r20,zero
 80097dc:	01401604 	movi	r5,88
 80097e0:	01800244 	movi	r6,9
 80097e4:	03400a84 	movi	r13,42
 80097e8:	03001b04 	movi	r12,108
 80097ec:	84000044 	addi	r16,r16,1
 80097f0:	18bff804 	addi	r2,r3,-32
 80097f4:	28827336 	bltu	r5,r2,800a1c4 <___vfiprintf_internal_r+0xb54>
 80097f8:	100490ba 	slli	r2,r2,2
 80097fc:	02820074 	movhi	r10,2049
 8009800:	52a60404 	addi	r10,r10,-26608
 8009804:	1285883a 	add	r2,r2,r10
 8009808:	10800017 	ldw	r2,0(r2)
 800980c:	1000683a 	jmp	r2
 8009810:	08009ef8 	rdprs	zero,at,635
 8009814:	0800a1c4 	addi	zero,at,647
 8009818:	0800a1c4 	addi	zero,at,647
 800981c:	08009f18 	cmpnei	zero,at,636
 8009820:	0800a1c4 	addi	zero,at,647
 8009824:	0800a1c4 	addi	zero,at,647
 8009828:	0800a1c4 	addi	zero,at,647
 800982c:	0800a1c4 	addi	zero,at,647
 8009830:	0800a1c4 	addi	zero,at,647
 8009834:	0800a1c4 	addi	zero,at,647
 8009838:	0800a100 	call	800a10 <__alt_mem_onchip_memory2_0+0x600a10>
 800983c:	0800a11c 	xori	zero,at,644
 8009840:	0800a1c4 	addi	zero,at,647
 8009844:	08009a04 	addi	zero,at,616
 8009848:	0800a12c 	andhi	zero,at,644
 800984c:	0800a1c4 	addi	zero,at,647
 8009850:	08009f24 	muli	zero,at,636
 8009854:	08009f30 	cmpltui	zero,at,636
 8009858:	08009f30 	cmpltui	zero,at,636
 800985c:	08009f30 	cmpltui	zero,at,636
 8009860:	08009f30 	cmpltui	zero,at,636
 8009864:	08009f30 	cmpltui	zero,at,636
 8009868:	08009f30 	cmpltui	zero,at,636
 800986c:	08009f30 	cmpltui	zero,at,636
 8009870:	08009f30 	cmpltui	zero,at,636
 8009874:	08009f30 	cmpltui	zero,at,636
 8009878:	0800a1c4 	addi	zero,at,647
 800987c:	0800a1c4 	addi	zero,at,647
 8009880:	0800a1c4 	addi	zero,at,647
 8009884:	0800a1c4 	addi	zero,at,647
 8009888:	0800a1c4 	addi	zero,at,647
 800988c:	0800a1c4 	addi	zero,at,647
 8009890:	0800a1c4 	addi	zero,at,647
 8009894:	0800a1c4 	addi	zero,at,647
 8009898:	0800a1c4 	addi	zero,at,647
 800989c:	0800a1c4 	addi	zero,at,647
 80098a0:	08009f5c 	xori	zero,at,637
 80098a4:	0800a1c4 	addi	zero,at,647
 80098a8:	0800a1c4 	addi	zero,at,647
 80098ac:	0800a1c4 	addi	zero,at,647
 80098b0:	0800a1c4 	addi	zero,at,647
 80098b4:	0800a1c4 	addi	zero,at,647
 80098b8:	0800a1c4 	addi	zero,at,647
 80098bc:	0800a1c4 	addi	zero,at,647
 80098c0:	0800a1c4 	addi	zero,at,647
 80098c4:	0800a1c4 	addi	zero,at,647
 80098c8:	0800a1c4 	addi	zero,at,647
 80098cc:	08009f94 	ori	zero,at,638
 80098d0:	0800a1c4 	addi	zero,at,647
 80098d4:	0800a1c4 	addi	zero,at,647
 80098d8:	0800a1c4 	addi	zero,at,647
 80098dc:	0800a1c4 	addi	zero,at,647
 80098e0:	0800a1c4 	addi	zero,at,647
 80098e4:	08009fec 	andhi	zero,at,639
 80098e8:	0800a1c4 	addi	zero,at,647
 80098ec:	0800a1c4 	addi	zero,at,647
 80098f0:	0800a05c 	xori	zero,at,641
 80098f4:	0800a1c4 	addi	zero,at,647
 80098f8:	0800a1c4 	addi	zero,at,647
 80098fc:	0800a1c4 	addi	zero,at,647
 8009900:	0800a1c4 	addi	zero,at,647
 8009904:	0800a1c4 	addi	zero,at,647
 8009908:	0800a1c4 	addi	zero,at,647
 800990c:	0800a1c4 	addi	zero,at,647
 8009910:	0800a1c4 	addi	zero,at,647
 8009914:	0800a1c4 	addi	zero,at,647
 8009918:	0800a1c4 	addi	zero,at,647
 800991c:	08009e08 	cmpgei	zero,at,632
 8009920:	08009e34 	orhi	zero,at,632
 8009924:	0800a1c4 	addi	zero,at,647
 8009928:	0800a1c4 	addi	zero,at,647
 800992c:	0800a1c4 	addi	zero,at,647
 8009930:	0800a16c 	andhi	zero,at,645
 8009934:	08009e34 	orhi	zero,at,632
 8009938:	0800a1c4 	addi	zero,at,647
 800993c:	0800a1c4 	addi	zero,at,647
 8009940:	08009cc8 	cmpgei	zero,at,627
 8009944:	0800a1c4 	addi	zero,at,647
 8009948:	08009cd8 	cmpnei	zero,at,627
 800994c:	08009d14 	ori	zero,at,628
 8009950:	08009a10 	cmplti	zero,at,616
 8009954:	08009cbc 	xorhi	zero,at,626
 8009958:	0800a1c4 	addi	zero,at,647
 800995c:	0800a098 	cmpnei	zero,at,642
 8009960:	0800a1c4 	addi	zero,at,647
 8009964:	0800a0f0 	cmpltui	zero,at,643
 8009968:	0800a1c4 	addi	zero,at,647
 800996c:	0800a1c4 	addi	zero,at,647
 8009970:	08009db4 	orhi	zero,at,630
 8009974:	42000204 	addi	r8,r8,8
 8009978:	da802317 	ldw	r10,140(sp)
 800997c:	5455883a 	add	r10,r10,r17
 8009980:	da802315 	stw	r10,140(sp)
 8009984:	003f8b06 	br	80097b4 <__alt_data_end+0xf80097b4>
 8009988:	d9002017 	ldw	r4,128(sp)
 800998c:	a00b883a 	mov	r5,r20
 8009990:	80058280 	call	8005828 <__swsetup_r>
 8009994:	1003b11e 	bne	r2,zero,800a85c <___vfiprintf_internal_r+0x11ec>
 8009998:	a080030b 	ldhu	r2,12(r20)
 800999c:	00c00284 	movi	r3,10
 80099a0:	1080068c 	andi	r2,r2,26
 80099a4:	10ff541e 	bne	r2,r3,80096f8 <__alt_data_end+0xf80096f8>
 80099a8:	a080038f 	ldh	r2,14(r20)
 80099ac:	103f5216 	blt	r2,zero,80096f8 <__alt_data_end+0xf80096f8>
 80099b0:	d9c02217 	ldw	r7,136(sp)
 80099b4:	d9002017 	ldw	r4,128(sp)
 80099b8:	e00d883a 	mov	r6,fp
 80099bc:	a00b883a 	mov	r5,r20
 80099c0:	800aae80 	call	800aae8 <__sbprintf>
 80099c4:	dfc03617 	ldw	ra,216(sp)
 80099c8:	df003517 	ldw	fp,212(sp)
 80099cc:	ddc03417 	ldw	r23,208(sp)
 80099d0:	dd803317 	ldw	r22,204(sp)
 80099d4:	dd403217 	ldw	r21,200(sp)
 80099d8:	dd003117 	ldw	r20,196(sp)
 80099dc:	dcc03017 	ldw	r19,192(sp)
 80099e0:	dc802f17 	ldw	r18,188(sp)
 80099e4:	dc402e17 	ldw	r17,184(sp)
 80099e8:	dc002d17 	ldw	r16,180(sp)
 80099ec:	dec03704 	addi	sp,sp,220
 80099f0:	f800283a 	ret
 80099f4:	8000d800 	call	8000d80 <__sinit>
 80099f8:	003f2f06 	br	80096b8 <__alt_data_end+0xf80096b8>
 80099fc:	0463c83a 	sub	r17,zero,r17
 8009a00:	d8802215 	stw	r2,136(sp)
 8009a04:	a5000114 	ori	r20,r20,4
 8009a08:	80c00007 	ldb	r3,0(r16)
 8009a0c:	003f7706 	br	80097ec <__alt_data_end+0xf80097ec>
 8009a10:	00800c04 	movi	r2,48
 8009a14:	da802217 	ldw	r10,136(sp)
 8009a18:	d8801d05 	stb	r2,116(sp)
 8009a1c:	00801e04 	movi	r2,120
 8009a20:	d8801d45 	stb	r2,117(sp)
 8009a24:	d8001d85 	stb	zero,118(sp)
 8009a28:	50c00104 	addi	r3,r10,4
 8009a2c:	54800017 	ldw	r18,0(r10)
 8009a30:	0027883a 	mov	r19,zero
 8009a34:	a0800094 	ori	r2,r20,2
 8009a38:	48030b16 	blt	r9,zero,800a668 <___vfiprintf_internal_r+0xff8>
 8009a3c:	00bfdfc4 	movi	r2,-129
 8009a40:	a096703a 	and	r11,r20,r2
 8009a44:	d8c02215 	stw	r3,136(sp)
 8009a48:	5d000094 	ori	r20,r11,2
 8009a4c:	90032b1e 	bne	r18,zero,800a6fc <___vfiprintf_internal_r+0x108c>
 8009a50:	00820074 	movhi	r2,2049
 8009a54:	10974e04 	addi	r2,r2,23864
 8009a58:	d8802615 	stw	r2,152(sp)
 8009a5c:	0039883a 	mov	fp,zero
 8009a60:	48017b1e 	bne	r9,zero,800a050 <___vfiprintf_internal_r+0x9e0>
 8009a64:	0013883a 	mov	r9,zero
 8009a68:	0027883a 	mov	r19,zero
 8009a6c:	dd401a04 	addi	r21,sp,104
 8009a70:	4825883a 	mov	r18,r9
 8009a74:	4cc0010e 	bge	r9,r19,8009a7c <___vfiprintf_internal_r+0x40c>
 8009a78:	9825883a 	mov	r18,r19
 8009a7c:	e7003fcc 	andi	fp,fp,255
 8009a80:	e700201c 	xori	fp,fp,128
 8009a84:	e73fe004 	addi	fp,fp,-128
 8009a88:	e0000126 	beq	fp,zero,8009a90 <___vfiprintf_internal_r+0x420>
 8009a8c:	94800044 	addi	r18,r18,1
 8009a90:	a380008c 	andi	r14,r20,2
 8009a94:	70000126 	beq	r14,zero,8009a9c <___vfiprintf_internal_r+0x42c>
 8009a98:	94800084 	addi	r18,r18,2
 8009a9c:	a700210c 	andi	fp,r20,132
 8009aa0:	e001df1e 	bne	fp,zero,800a220 <___vfiprintf_internal_r+0xbb0>
 8009aa4:	8c87c83a 	sub	r3,r17,r18
 8009aa8:	00c1dd0e 	bge	zero,r3,800a220 <___vfiprintf_internal_r+0xbb0>
 8009aac:	01c00404 	movi	r7,16
 8009ab0:	d8801c17 	ldw	r2,112(sp)
 8009ab4:	38c3ad0e 	bge	r7,r3,800a96c <___vfiprintf_internal_r+0x12fc>
 8009ab8:	02820074 	movhi	r10,2049
 8009abc:	5297b204 	addi	r10,r10,24264
 8009ac0:	dc002915 	stw	r16,164(sp)
 8009ac4:	d9801b17 	ldw	r6,108(sp)
 8009ac8:	da802415 	stw	r10,144(sp)
 8009acc:	03c001c4 	movi	r15,7
 8009ad0:	da402515 	stw	r9,148(sp)
 8009ad4:	db802815 	stw	r14,160(sp)
 8009ad8:	1821883a 	mov	r16,r3
 8009adc:	00000506 	br	8009af4 <___vfiprintf_internal_r+0x484>
 8009ae0:	31400084 	addi	r5,r6,2
 8009ae4:	42000204 	addi	r8,r8,8
 8009ae8:	200d883a 	mov	r6,r4
 8009aec:	843ffc04 	addi	r16,r16,-16
 8009af0:	3c000d0e 	bge	r7,r16,8009b28 <___vfiprintf_internal_r+0x4b8>
 8009af4:	10800404 	addi	r2,r2,16
 8009af8:	31000044 	addi	r4,r6,1
 8009afc:	45800015 	stw	r22,0(r8)
 8009b00:	41c00115 	stw	r7,4(r8)
 8009b04:	d8801c15 	stw	r2,112(sp)
 8009b08:	d9001b15 	stw	r4,108(sp)
 8009b0c:	793ff40e 	bge	r15,r4,8009ae0 <__alt_data_end+0xf8009ae0>
 8009b10:	1001b51e 	bne	r2,zero,800a1e8 <___vfiprintf_internal_r+0xb78>
 8009b14:	843ffc04 	addi	r16,r16,-16
 8009b18:	000d883a 	mov	r6,zero
 8009b1c:	01400044 	movi	r5,1
 8009b20:	d811883a 	mov	r8,sp
 8009b24:	3c3ff316 	blt	r7,r16,8009af4 <__alt_data_end+0xf8009af4>
 8009b28:	8007883a 	mov	r3,r16
 8009b2c:	da402517 	ldw	r9,148(sp)
 8009b30:	db802817 	ldw	r14,160(sp)
 8009b34:	dc002917 	ldw	r16,164(sp)
 8009b38:	da802417 	ldw	r10,144(sp)
 8009b3c:	1885883a 	add	r2,r3,r2
 8009b40:	40c00115 	stw	r3,4(r8)
 8009b44:	42800015 	stw	r10,0(r8)
 8009b48:	d8801c15 	stw	r2,112(sp)
 8009b4c:	d9401b15 	stw	r5,108(sp)
 8009b50:	00c001c4 	movi	r3,7
 8009b54:	19426016 	blt	r3,r5,800a4d8 <___vfiprintf_internal_r+0xe68>
 8009b58:	d8c01d87 	ldb	r3,118(sp)
 8009b5c:	42000204 	addi	r8,r8,8
 8009b60:	29000044 	addi	r4,r5,1
 8009b64:	1801b31e 	bne	r3,zero,800a234 <___vfiprintf_internal_r+0xbc4>
 8009b68:	7001c026 	beq	r14,zero,800a26c <___vfiprintf_internal_r+0xbfc>
 8009b6c:	d8c01d04 	addi	r3,sp,116
 8009b70:	10800084 	addi	r2,r2,2
 8009b74:	40c00015 	stw	r3,0(r8)
 8009b78:	00c00084 	movi	r3,2
 8009b7c:	40c00115 	stw	r3,4(r8)
 8009b80:	d8801c15 	stw	r2,112(sp)
 8009b84:	d9001b15 	stw	r4,108(sp)
 8009b88:	00c001c4 	movi	r3,7
 8009b8c:	1902650e 	bge	r3,r4,800a524 <___vfiprintf_internal_r+0xeb4>
 8009b90:	10029a1e 	bne	r2,zero,800a5fc <___vfiprintf_internal_r+0xf8c>
 8009b94:	00c02004 	movi	r3,128
 8009b98:	01000044 	movi	r4,1
 8009b9c:	000b883a 	mov	r5,zero
 8009ba0:	d811883a 	mov	r8,sp
 8009ba4:	e0c1b31e 	bne	fp,r3,800a274 <___vfiprintf_internal_r+0xc04>
 8009ba8:	8cb9c83a 	sub	fp,r17,r18
 8009bac:	0701b10e 	bge	zero,fp,800a274 <___vfiprintf_internal_r+0xc04>
 8009bb0:	01c00404 	movi	r7,16
 8009bb4:	3f03890e 	bge	r7,fp,800a9dc <___vfiprintf_internal_r+0x136c>
 8009bb8:	00c20074 	movhi	r3,2049
 8009bbc:	18d7ae04 	addi	r3,r3,24248
 8009bc0:	d8c02415 	stw	r3,144(sp)
 8009bc4:	8007883a 	mov	r3,r16
 8009bc8:	034001c4 	movi	r13,7
 8009bcc:	e021883a 	mov	r16,fp
 8009bd0:	da402515 	stw	r9,148(sp)
 8009bd4:	1839883a 	mov	fp,r3
 8009bd8:	00000506 	br	8009bf0 <___vfiprintf_internal_r+0x580>
 8009bdc:	29800084 	addi	r6,r5,2
 8009be0:	42000204 	addi	r8,r8,8
 8009be4:	180b883a 	mov	r5,r3
 8009be8:	843ffc04 	addi	r16,r16,-16
 8009bec:	3c000d0e 	bge	r7,r16,8009c24 <___vfiprintf_internal_r+0x5b4>
 8009bf0:	10800404 	addi	r2,r2,16
 8009bf4:	28c00044 	addi	r3,r5,1
 8009bf8:	45c00015 	stw	r23,0(r8)
 8009bfc:	41c00115 	stw	r7,4(r8)
 8009c00:	d8801c15 	stw	r2,112(sp)
 8009c04:	d8c01b15 	stw	r3,108(sp)
 8009c08:	68fff40e 	bge	r13,r3,8009bdc <__alt_data_end+0xf8009bdc>
 8009c0c:	1002241e 	bne	r2,zero,800a4a0 <___vfiprintf_internal_r+0xe30>
 8009c10:	843ffc04 	addi	r16,r16,-16
 8009c14:	01800044 	movi	r6,1
 8009c18:	000b883a 	mov	r5,zero
 8009c1c:	d811883a 	mov	r8,sp
 8009c20:	3c3ff316 	blt	r7,r16,8009bf0 <__alt_data_end+0xf8009bf0>
 8009c24:	da402517 	ldw	r9,148(sp)
 8009c28:	e007883a 	mov	r3,fp
 8009c2c:	8039883a 	mov	fp,r16
 8009c30:	1821883a 	mov	r16,r3
 8009c34:	d8c02417 	ldw	r3,144(sp)
 8009c38:	1705883a 	add	r2,r2,fp
 8009c3c:	47000115 	stw	fp,4(r8)
 8009c40:	40c00015 	stw	r3,0(r8)
 8009c44:	d8801c15 	stw	r2,112(sp)
 8009c48:	d9801b15 	stw	r6,108(sp)
 8009c4c:	00c001c4 	movi	r3,7
 8009c50:	19827616 	blt	r3,r6,800a62c <___vfiprintf_internal_r+0xfbc>
 8009c54:	4cf9c83a 	sub	fp,r9,r19
 8009c58:	42000204 	addi	r8,r8,8
 8009c5c:	31000044 	addi	r4,r6,1
 8009c60:	300b883a 	mov	r5,r6
 8009c64:	07018516 	blt	zero,fp,800a27c <___vfiprintf_internal_r+0xc0c>
 8009c68:	9885883a 	add	r2,r19,r2
 8009c6c:	45400015 	stw	r21,0(r8)
 8009c70:	44c00115 	stw	r19,4(r8)
 8009c74:	d8801c15 	stw	r2,112(sp)
 8009c78:	d9001b15 	stw	r4,108(sp)
 8009c7c:	00c001c4 	movi	r3,7
 8009c80:	1901dd0e 	bge	r3,r4,800a3f8 <___vfiprintf_internal_r+0xd88>
 8009c84:	1002401e 	bne	r2,zero,800a588 <___vfiprintf_internal_r+0xf18>
 8009c88:	d8001b15 	stw	zero,108(sp)
 8009c8c:	a2c0010c 	andi	r11,r20,4
 8009c90:	58000226 	beq	r11,zero,8009c9c <___vfiprintf_internal_r+0x62c>
 8009c94:	8ca7c83a 	sub	r19,r17,r18
 8009c98:	04c2f216 	blt	zero,r19,800a864 <___vfiprintf_internal_r+0x11f4>
 8009c9c:	8c80010e 	bge	r17,r18,8009ca4 <___vfiprintf_internal_r+0x634>
 8009ca0:	9023883a 	mov	r17,r18
 8009ca4:	da802317 	ldw	r10,140(sp)
 8009ca8:	5455883a 	add	r10,r10,r17
 8009cac:	da802315 	stw	r10,140(sp)
 8009cb0:	d8001b15 	stw	zero,108(sp)
 8009cb4:	d811883a 	mov	r8,sp
 8009cb8:	003ea206 	br	8009744 <__alt_data_end+0xf8009744>
 8009cbc:	a5000814 	ori	r20,r20,32
 8009cc0:	80c00007 	ldb	r3,0(r16)
 8009cc4:	003ec906 	br	80097ec <__alt_data_end+0xf80097ec>
 8009cc8:	80c00007 	ldb	r3,0(r16)
 8009ccc:	1b030926 	beq	r3,r12,800a8f4 <___vfiprintf_internal_r+0x1284>
 8009cd0:	a5000414 	ori	r20,r20,16
 8009cd4:	003ec506 	br	80097ec <__alt_data_end+0xf80097ec>
 8009cd8:	21003fcc 	andi	r4,r4,255
 8009cdc:	20035e1e 	bne	r4,zero,800aa58 <___vfiprintf_internal_r+0x13e8>
 8009ce0:	a080080c 	andi	r2,r20,32
 8009ce4:	1002a526 	beq	r2,zero,800a77c <___vfiprintf_internal_r+0x110c>
 8009ce8:	da802217 	ldw	r10,136(sp)
 8009cec:	50800017 	ldw	r2,0(r10)
 8009cf0:	da802317 	ldw	r10,140(sp)
 8009cf4:	5007d7fa 	srai	r3,r10,31
 8009cf8:	da802217 	ldw	r10,136(sp)
 8009cfc:	10c00115 	stw	r3,4(r2)
 8009d00:	52800104 	addi	r10,r10,4
 8009d04:	da802215 	stw	r10,136(sp)
 8009d08:	da802317 	ldw	r10,140(sp)
 8009d0c:	12800015 	stw	r10,0(r2)
 8009d10:	003e8c06 	br	8009744 <__alt_data_end+0xf8009744>
 8009d14:	21003fcc 	andi	r4,r4,255
 8009d18:	2003511e 	bne	r4,zero,800aa60 <___vfiprintf_internal_r+0x13f0>
 8009d1c:	a080080c 	andi	r2,r20,32
 8009d20:	1000a126 	beq	r2,zero,8009fa8 <___vfiprintf_internal_r+0x938>
 8009d24:	da802217 	ldw	r10,136(sp)
 8009d28:	d8001d85 	stb	zero,118(sp)
 8009d2c:	50800204 	addi	r2,r10,8
 8009d30:	54800017 	ldw	r18,0(r10)
 8009d34:	54c00117 	ldw	r19,4(r10)
 8009d38:	4802b416 	blt	r9,zero,800a80c <___vfiprintf_internal_r+0x119c>
 8009d3c:	013fdfc4 	movi	r4,-129
 8009d40:	94c6b03a 	or	r3,r18,r19
 8009d44:	d8802215 	stw	r2,136(sp)
 8009d48:	a128703a 	and	r20,r20,r4
 8009d4c:	1800a226 	beq	r3,zero,8009fd8 <___vfiprintf_internal_r+0x968>
 8009d50:	0039883a 	mov	fp,zero
 8009d54:	dd401a04 	addi	r21,sp,104
 8009d58:	9006d0fa 	srli	r3,r18,3
 8009d5c:	9808977a 	slli	r4,r19,29
 8009d60:	9826d0fa 	srli	r19,r19,3
 8009d64:	948001cc 	andi	r18,r18,7
 8009d68:	90800c04 	addi	r2,r18,48
 8009d6c:	ad7fffc4 	addi	r21,r21,-1
 8009d70:	20e4b03a 	or	r18,r4,r3
 8009d74:	a8800005 	stb	r2,0(r21)
 8009d78:	94c6b03a 	or	r3,r18,r19
 8009d7c:	183ff61e 	bne	r3,zero,8009d58 <__alt_data_end+0xf8009d58>
 8009d80:	a0c0004c 	andi	r3,r20,1
 8009d84:	18005926 	beq	r3,zero,8009eec <___vfiprintf_internal_r+0x87c>
 8009d88:	10803fcc 	andi	r2,r2,255
 8009d8c:	1080201c 	xori	r2,r2,128
 8009d90:	10bfe004 	addi	r2,r2,-128
 8009d94:	00c00c04 	movi	r3,48
 8009d98:	10c05426 	beq	r2,r3,8009eec <___vfiprintf_internal_r+0x87c>
 8009d9c:	da801e17 	ldw	r10,120(sp)
 8009da0:	a8bfffc4 	addi	r2,r21,-1
 8009da4:	a8ffffc5 	stb	r3,-1(r21)
 8009da8:	50a7c83a 	sub	r19,r10,r2
 8009dac:	102b883a 	mov	r21,r2
 8009db0:	003f2f06 	br	8009a70 <__alt_data_end+0xf8009a70>
 8009db4:	21003fcc 	andi	r4,r4,255
 8009db8:	2003421e 	bne	r4,zero,800aac4 <___vfiprintf_internal_r+0x1454>
 8009dbc:	00820074 	movhi	r2,2049
 8009dc0:	10974e04 	addi	r2,r2,23864
 8009dc4:	d8802615 	stw	r2,152(sp)
 8009dc8:	a080080c 	andi	r2,r20,32
 8009dcc:	1000aa26 	beq	r2,zero,800a078 <___vfiprintf_internal_r+0xa08>
 8009dd0:	da802217 	ldw	r10,136(sp)
 8009dd4:	54800017 	ldw	r18,0(r10)
 8009dd8:	54c00117 	ldw	r19,4(r10)
 8009ddc:	52800204 	addi	r10,r10,8
 8009de0:	da802215 	stw	r10,136(sp)
 8009de4:	a080004c 	andi	r2,r20,1
 8009de8:	1001d226 	beq	r2,zero,800a534 <___vfiprintf_internal_r+0xec4>
 8009dec:	94c4b03a 	or	r2,r18,r19
 8009df0:	1002351e 	bne	r2,zero,800a6c8 <___vfiprintf_internal_r+0x1058>
 8009df4:	d8001d85 	stb	zero,118(sp)
 8009df8:	48022216 	blt	r9,zero,800a684 <___vfiprintf_internal_r+0x1014>
 8009dfc:	00bfdfc4 	movi	r2,-129
 8009e00:	a0a8703a 	and	r20,r20,r2
 8009e04:	003f1506 	br	8009a5c <__alt_data_end+0xf8009a5c>
 8009e08:	da802217 	ldw	r10,136(sp)
 8009e0c:	04800044 	movi	r18,1
 8009e10:	d8001d85 	stb	zero,118(sp)
 8009e14:	50800017 	ldw	r2,0(r10)
 8009e18:	52800104 	addi	r10,r10,4
 8009e1c:	da802215 	stw	r10,136(sp)
 8009e20:	d8801005 	stb	r2,64(sp)
 8009e24:	9027883a 	mov	r19,r18
 8009e28:	dd401004 	addi	r21,sp,64
 8009e2c:	0013883a 	mov	r9,zero
 8009e30:	003f1706 	br	8009a90 <__alt_data_end+0xf8009a90>
 8009e34:	21003fcc 	andi	r4,r4,255
 8009e38:	2003201e 	bne	r4,zero,800aabc <___vfiprintf_internal_r+0x144c>
 8009e3c:	a080080c 	andi	r2,r20,32
 8009e40:	10004b26 	beq	r2,zero,8009f70 <___vfiprintf_internal_r+0x900>
 8009e44:	da802217 	ldw	r10,136(sp)
 8009e48:	50800117 	ldw	r2,4(r10)
 8009e4c:	54800017 	ldw	r18,0(r10)
 8009e50:	52800204 	addi	r10,r10,8
 8009e54:	da802215 	stw	r10,136(sp)
 8009e58:	1027883a 	mov	r19,r2
 8009e5c:	10022c16 	blt	r2,zero,800a710 <___vfiprintf_internal_r+0x10a0>
 8009e60:	df001d83 	ldbu	fp,118(sp)
 8009e64:	48007216 	blt	r9,zero,800a030 <___vfiprintf_internal_r+0x9c0>
 8009e68:	00ffdfc4 	movi	r3,-129
 8009e6c:	94c4b03a 	or	r2,r18,r19
 8009e70:	a0e8703a 	and	r20,r20,r3
 8009e74:	1000cc26 	beq	r2,zero,800a1a8 <___vfiprintf_internal_r+0xb38>
 8009e78:	98021026 	beq	r19,zero,800a6bc <___vfiprintf_internal_r+0x104c>
 8009e7c:	dc402415 	stw	r17,144(sp)
 8009e80:	dc002515 	stw	r16,148(sp)
 8009e84:	9823883a 	mov	r17,r19
 8009e88:	9021883a 	mov	r16,r18
 8009e8c:	dd401a04 	addi	r21,sp,104
 8009e90:	4825883a 	mov	r18,r9
 8009e94:	4027883a 	mov	r19,r8
 8009e98:	8009883a 	mov	r4,r16
 8009e9c:	880b883a 	mov	r5,r17
 8009ea0:	01800284 	movi	r6,10
 8009ea4:	000f883a 	mov	r7,zero
 8009ea8:	800b7280 	call	800b728 <__umoddi3>
 8009eac:	10800c04 	addi	r2,r2,48
 8009eb0:	ad7fffc4 	addi	r21,r21,-1
 8009eb4:	8009883a 	mov	r4,r16
 8009eb8:	880b883a 	mov	r5,r17
 8009ebc:	a8800005 	stb	r2,0(r21)
 8009ec0:	01800284 	movi	r6,10
 8009ec4:	000f883a 	mov	r7,zero
 8009ec8:	800b1b00 	call	800b1b0 <__udivdi3>
 8009ecc:	1021883a 	mov	r16,r2
 8009ed0:	10c4b03a 	or	r2,r2,r3
 8009ed4:	1823883a 	mov	r17,r3
 8009ed8:	103fef1e 	bne	r2,zero,8009e98 <__alt_data_end+0xf8009e98>
 8009edc:	dc402417 	ldw	r17,144(sp)
 8009ee0:	dc002517 	ldw	r16,148(sp)
 8009ee4:	9013883a 	mov	r9,r18
 8009ee8:	9811883a 	mov	r8,r19
 8009eec:	da801e17 	ldw	r10,120(sp)
 8009ef0:	5567c83a 	sub	r19,r10,r21
 8009ef4:	003ede06 	br	8009a70 <__alt_data_end+0xf8009a70>
 8009ef8:	38803fcc 	andi	r2,r7,255
 8009efc:	1080201c 	xori	r2,r2,128
 8009f00:	10bfe004 	addi	r2,r2,-128
 8009f04:	1002371e 	bne	r2,zero,800a7e4 <___vfiprintf_internal_r+0x1174>
 8009f08:	01000044 	movi	r4,1
 8009f0c:	01c00804 	movi	r7,32
 8009f10:	80c00007 	ldb	r3,0(r16)
 8009f14:	003e3506 	br	80097ec <__alt_data_end+0xf80097ec>
 8009f18:	a5000054 	ori	r20,r20,1
 8009f1c:	80c00007 	ldb	r3,0(r16)
 8009f20:	003e3206 	br	80097ec <__alt_data_end+0xf80097ec>
 8009f24:	a5002014 	ori	r20,r20,128
 8009f28:	80c00007 	ldb	r3,0(r16)
 8009f2c:	003e2f06 	br	80097ec <__alt_data_end+0xf80097ec>
 8009f30:	8015883a 	mov	r10,r16
 8009f34:	0023883a 	mov	r17,zero
 8009f38:	18bff404 	addi	r2,r3,-48
 8009f3c:	50c00007 	ldb	r3,0(r10)
 8009f40:	8c4002a4 	muli	r17,r17,10
 8009f44:	84000044 	addi	r16,r16,1
 8009f48:	8015883a 	mov	r10,r16
 8009f4c:	1463883a 	add	r17,r2,r17
 8009f50:	18bff404 	addi	r2,r3,-48
 8009f54:	30bff92e 	bgeu	r6,r2,8009f3c <__alt_data_end+0xf8009f3c>
 8009f58:	003e2506 	br	80097f0 <__alt_data_end+0xf80097f0>
 8009f5c:	21003fcc 	andi	r4,r4,255
 8009f60:	2002d41e 	bne	r4,zero,800aab4 <___vfiprintf_internal_r+0x1444>
 8009f64:	a5000414 	ori	r20,r20,16
 8009f68:	a080080c 	andi	r2,r20,32
 8009f6c:	103fb51e 	bne	r2,zero,8009e44 <__alt_data_end+0xf8009e44>
 8009f70:	a080040c 	andi	r2,r20,16
 8009f74:	1001f826 	beq	r2,zero,800a758 <___vfiprintf_internal_r+0x10e8>
 8009f78:	da802217 	ldw	r10,136(sp)
 8009f7c:	54800017 	ldw	r18,0(r10)
 8009f80:	52800104 	addi	r10,r10,4
 8009f84:	da802215 	stw	r10,136(sp)
 8009f88:	9027d7fa 	srai	r19,r18,31
 8009f8c:	9805883a 	mov	r2,r19
 8009f90:	003fb206 	br	8009e5c <__alt_data_end+0xf8009e5c>
 8009f94:	21003fcc 	andi	r4,r4,255
 8009f98:	2002c41e 	bne	r4,zero,800aaac <___vfiprintf_internal_r+0x143c>
 8009f9c:	a5000414 	ori	r20,r20,16
 8009fa0:	a080080c 	andi	r2,r20,32
 8009fa4:	103f5f1e 	bne	r2,zero,8009d24 <__alt_data_end+0xf8009d24>
 8009fa8:	a080040c 	andi	r2,r20,16
 8009fac:	10020f26 	beq	r2,zero,800a7ec <___vfiprintf_internal_r+0x117c>
 8009fb0:	da802217 	ldw	r10,136(sp)
 8009fb4:	d8001d85 	stb	zero,118(sp)
 8009fb8:	0027883a 	mov	r19,zero
 8009fbc:	50800104 	addi	r2,r10,4
 8009fc0:	54800017 	ldw	r18,0(r10)
 8009fc4:	48021116 	blt	r9,zero,800a80c <___vfiprintf_internal_r+0x119c>
 8009fc8:	00ffdfc4 	movi	r3,-129
 8009fcc:	d8802215 	stw	r2,136(sp)
 8009fd0:	a0e8703a 	and	r20,r20,r3
 8009fd4:	903f5e1e 	bne	r18,zero,8009d50 <__alt_data_end+0xf8009d50>
 8009fd8:	0039883a 	mov	fp,zero
 8009fdc:	4802a626 	beq	r9,zero,800aa78 <___vfiprintf_internal_r+0x1408>
 8009fe0:	0025883a 	mov	r18,zero
 8009fe4:	0027883a 	mov	r19,zero
 8009fe8:	003f5a06 	br	8009d54 <__alt_data_end+0xf8009d54>
 8009fec:	21003fcc 	andi	r4,r4,255
 8009ff0:	20029f1e 	bne	r4,zero,800aa70 <___vfiprintf_internal_r+0x1400>
 8009ff4:	a5000414 	ori	r20,r20,16
 8009ff8:	a080080c 	andi	r2,r20,32
 8009ffc:	10005e1e 	bne	r2,zero,800a178 <___vfiprintf_internal_r+0xb08>
 800a000:	a080040c 	andi	r2,r20,16
 800a004:	1001a21e 	bne	r2,zero,800a690 <___vfiprintf_internal_r+0x1020>
 800a008:	a080100c 	andi	r2,r20,64
 800a00c:	d8001d85 	stb	zero,118(sp)
 800a010:	da802217 	ldw	r10,136(sp)
 800a014:	1002231e 	bne	r2,zero,800a8a4 <___vfiprintf_internal_r+0x1234>
 800a018:	50800104 	addi	r2,r10,4
 800a01c:	54800017 	ldw	r18,0(r10)
 800a020:	0027883a 	mov	r19,zero
 800a024:	4801a00e 	bge	r9,zero,800a6a8 <___vfiprintf_internal_r+0x1038>
 800a028:	d8802215 	stw	r2,136(sp)
 800a02c:	0039883a 	mov	fp,zero
 800a030:	94c4b03a 	or	r2,r18,r19
 800a034:	103f901e 	bne	r2,zero,8009e78 <__alt_data_end+0xf8009e78>
 800a038:	00800044 	movi	r2,1
 800a03c:	10803fcc 	andi	r2,r2,255
 800a040:	00c00044 	movi	r3,1
 800a044:	10c05926 	beq	r2,r3,800a1ac <___vfiprintf_internal_r+0xb3c>
 800a048:	00c00084 	movi	r3,2
 800a04c:	10ffe41e 	bne	r2,r3,8009fe0 <__alt_data_end+0xf8009fe0>
 800a050:	0025883a 	mov	r18,zero
 800a054:	0027883a 	mov	r19,zero
 800a058:	00013d06 	br	800a550 <___vfiprintf_internal_r+0xee0>
 800a05c:	21003fcc 	andi	r4,r4,255
 800a060:	2002811e 	bne	r4,zero,800aa68 <___vfiprintf_internal_r+0x13f8>
 800a064:	00820074 	movhi	r2,2049
 800a068:	10974904 	addi	r2,r2,23844
 800a06c:	d8802615 	stw	r2,152(sp)
 800a070:	a080080c 	andi	r2,r20,32
 800a074:	103f561e 	bne	r2,zero,8009dd0 <__alt_data_end+0xf8009dd0>
 800a078:	a080040c 	andi	r2,r20,16
 800a07c:	1001d126 	beq	r2,zero,800a7c4 <___vfiprintf_internal_r+0x1154>
 800a080:	da802217 	ldw	r10,136(sp)
 800a084:	0027883a 	mov	r19,zero
 800a088:	54800017 	ldw	r18,0(r10)
 800a08c:	52800104 	addi	r10,r10,4
 800a090:	da802215 	stw	r10,136(sp)
 800a094:	003f5306 	br	8009de4 <__alt_data_end+0xf8009de4>
 800a098:	da802217 	ldw	r10,136(sp)
 800a09c:	d8001d85 	stb	zero,118(sp)
 800a0a0:	55400017 	ldw	r21,0(r10)
 800a0a4:	50c00104 	addi	r3,r10,4
 800a0a8:	a8024226 	beq	r21,zero,800a9b4 <___vfiprintf_internal_r+0x1344>
 800a0ac:	48021816 	blt	r9,zero,800a910 <___vfiprintf_internal_r+0x12a0>
 800a0b0:	480d883a 	mov	r6,r9
 800a0b4:	000b883a 	mov	r5,zero
 800a0b8:	a809883a 	mov	r4,r21
 800a0bc:	d8c02a15 	stw	r3,168(sp)
 800a0c0:	da002b15 	stw	r8,172(sp)
 800a0c4:	da402c15 	stw	r9,176(sp)
 800a0c8:	8007aa40 	call	8007aa4 <memchr>
 800a0cc:	d8c02a17 	ldw	r3,168(sp)
 800a0d0:	da002b17 	ldw	r8,172(sp)
 800a0d4:	da402c17 	ldw	r9,176(sp)
 800a0d8:	10024826 	beq	r2,zero,800a9fc <___vfiprintf_internal_r+0x138c>
 800a0dc:	1567c83a 	sub	r19,r2,r21
 800a0e0:	df001d83 	ldbu	fp,118(sp)
 800a0e4:	d8c02215 	stw	r3,136(sp)
 800a0e8:	0013883a 	mov	r9,zero
 800a0ec:	003e6006 	br	8009a70 <__alt_data_end+0xf8009a70>
 800a0f0:	21003fcc 	andi	r4,r4,255
 800a0f4:	203fc026 	beq	r4,zero,8009ff8 <__alt_data_end+0xf8009ff8>
 800a0f8:	d9c01d85 	stb	r7,118(sp)
 800a0fc:	003fbe06 	br	8009ff8 <__alt_data_end+0xf8009ff8>
 800a100:	da802217 	ldw	r10,136(sp)
 800a104:	54400017 	ldw	r17,0(r10)
 800a108:	50800104 	addi	r2,r10,4
 800a10c:	883e3b16 	blt	r17,zero,80099fc <__alt_data_end+0xf80099fc>
 800a110:	d8802215 	stw	r2,136(sp)
 800a114:	80c00007 	ldb	r3,0(r16)
 800a118:	003db406 	br	80097ec <__alt_data_end+0xf80097ec>
 800a11c:	01000044 	movi	r4,1
 800a120:	01c00ac4 	movi	r7,43
 800a124:	80c00007 	ldb	r3,0(r16)
 800a128:	003db006 	br	80097ec <__alt_data_end+0xf80097ec>
 800a12c:	80c00007 	ldb	r3,0(r16)
 800a130:	82800044 	addi	r10,r16,1
 800a134:	1b423c26 	beq	r3,r13,800aa28 <___vfiprintf_internal_r+0x13b8>
 800a138:	18bff404 	addi	r2,r3,-48
 800a13c:	0013883a 	mov	r9,zero
 800a140:	30822b36 	bltu	r6,r2,800a9f0 <___vfiprintf_internal_r+0x1380>
 800a144:	50c00007 	ldb	r3,0(r10)
 800a148:	4a4002a4 	muli	r9,r9,10
 800a14c:	54000044 	addi	r16,r10,1
 800a150:	8015883a 	mov	r10,r16
 800a154:	4893883a 	add	r9,r9,r2
 800a158:	18bff404 	addi	r2,r3,-48
 800a15c:	30bff92e 	bgeu	r6,r2,800a144 <__alt_data_end+0xf800a144>
 800a160:	483da30e 	bge	r9,zero,80097f0 <__alt_data_end+0xf80097f0>
 800a164:	027fffc4 	movi	r9,-1
 800a168:	003da106 	br	80097f0 <__alt_data_end+0xf80097f0>
 800a16c:	a5001014 	ori	r20,r20,64
 800a170:	80c00007 	ldb	r3,0(r16)
 800a174:	003d9d06 	br	80097ec <__alt_data_end+0xf80097ec>
 800a178:	da802217 	ldw	r10,136(sp)
 800a17c:	d8001d85 	stb	zero,118(sp)
 800a180:	50c00204 	addi	r3,r10,8
 800a184:	54800017 	ldw	r18,0(r10)
 800a188:	54c00117 	ldw	r19,4(r10)
 800a18c:	4801ca16 	blt	r9,zero,800a8b8 <___vfiprintf_internal_r+0x1248>
 800a190:	013fdfc4 	movi	r4,-129
 800a194:	94c4b03a 	or	r2,r18,r19
 800a198:	d8c02215 	stw	r3,136(sp)
 800a19c:	a128703a 	and	r20,r20,r4
 800a1a0:	0039883a 	mov	fp,zero
 800a1a4:	103f341e 	bne	r2,zero,8009e78 <__alt_data_end+0xf8009e78>
 800a1a8:	483e2e26 	beq	r9,zero,8009a64 <__alt_data_end+0xf8009a64>
 800a1ac:	0025883a 	mov	r18,zero
 800a1b0:	94800c04 	addi	r18,r18,48
 800a1b4:	dc8019c5 	stb	r18,103(sp)
 800a1b8:	dcc02717 	ldw	r19,156(sp)
 800a1bc:	dd4019c4 	addi	r21,sp,103
 800a1c0:	003e2b06 	br	8009a70 <__alt_data_end+0xf8009a70>
 800a1c4:	21003fcc 	andi	r4,r4,255
 800a1c8:	2002361e 	bne	r4,zero,800aaa4 <___vfiprintf_internal_r+0x1434>
 800a1cc:	1801c126 	beq	r3,zero,800a8d4 <___vfiprintf_internal_r+0x1264>
 800a1d0:	04800044 	movi	r18,1
 800a1d4:	d8c01005 	stb	r3,64(sp)
 800a1d8:	d8001d85 	stb	zero,118(sp)
 800a1dc:	9027883a 	mov	r19,r18
 800a1e0:	dd401004 	addi	r21,sp,64
 800a1e4:	003f1106 	br	8009e2c <__alt_data_end+0xf8009e2c>
 800a1e8:	d9402117 	ldw	r5,132(sp)
 800a1ec:	d9002017 	ldw	r4,128(sp)
 800a1f0:	d9801a04 	addi	r6,sp,104
 800a1f4:	d9c02b15 	stw	r7,172(sp)
 800a1f8:	dbc02a15 	stw	r15,168(sp)
 800a1fc:	800955c0 	call	800955c <__sprint_r.part.0>
 800a200:	d9c02b17 	ldw	r7,172(sp)
 800a204:	dbc02a17 	ldw	r15,168(sp)
 800a208:	10006d1e 	bne	r2,zero,800a3c0 <___vfiprintf_internal_r+0xd50>
 800a20c:	d9801b17 	ldw	r6,108(sp)
 800a210:	d8801c17 	ldw	r2,112(sp)
 800a214:	d811883a 	mov	r8,sp
 800a218:	31400044 	addi	r5,r6,1
 800a21c:	003e3306 	br	8009aec <__alt_data_end+0xf8009aec>
 800a220:	d9401b17 	ldw	r5,108(sp)
 800a224:	d8801c17 	ldw	r2,112(sp)
 800a228:	29000044 	addi	r4,r5,1
 800a22c:	d8c01d87 	ldb	r3,118(sp)
 800a230:	183e4d26 	beq	r3,zero,8009b68 <__alt_data_end+0xf8009b68>
 800a234:	00c00044 	movi	r3,1
 800a238:	d9401d84 	addi	r5,sp,118
 800a23c:	10c5883a 	add	r2,r2,r3
 800a240:	41400015 	stw	r5,0(r8)
 800a244:	40c00115 	stw	r3,4(r8)
 800a248:	d8801c15 	stw	r2,112(sp)
 800a24c:	d9001b15 	stw	r4,108(sp)
 800a250:	014001c4 	movi	r5,7
 800a254:	2900a90e 	bge	r5,r4,800a4fc <___vfiprintf_internal_r+0xe8c>
 800a258:	1000da1e 	bne	r2,zero,800a5c4 <___vfiprintf_internal_r+0xf54>
 800a25c:	7000ab1e 	bne	r14,zero,800a50c <___vfiprintf_internal_r+0xe9c>
 800a260:	000b883a 	mov	r5,zero
 800a264:	1809883a 	mov	r4,r3
 800a268:	d811883a 	mov	r8,sp
 800a26c:	00c02004 	movi	r3,128
 800a270:	e0fe4d26 	beq	fp,r3,8009ba8 <__alt_data_end+0xf8009ba8>
 800a274:	4cf9c83a 	sub	fp,r9,r19
 800a278:	073e7b0e 	bge	zero,fp,8009c68 <__alt_data_end+0xf8009c68>
 800a27c:	01c00404 	movi	r7,16
 800a280:	3f01900e 	bge	r7,fp,800a8c4 <___vfiprintf_internal_r+0x1254>
 800a284:	00c20074 	movhi	r3,2049
 800a288:	18d7ae04 	addi	r3,r3,24248
 800a28c:	d8c02415 	stw	r3,144(sp)
 800a290:	034001c4 	movi	r13,7
 800a294:	00000506 	br	800a2ac <___vfiprintf_internal_r+0xc3c>
 800a298:	29000084 	addi	r4,r5,2
 800a29c:	42000204 	addi	r8,r8,8
 800a2a0:	180b883a 	mov	r5,r3
 800a2a4:	e73ffc04 	addi	fp,fp,-16
 800a2a8:	3f000d0e 	bge	r7,fp,800a2e0 <___vfiprintf_internal_r+0xc70>
 800a2ac:	10800404 	addi	r2,r2,16
 800a2b0:	28c00044 	addi	r3,r5,1
 800a2b4:	45c00015 	stw	r23,0(r8)
 800a2b8:	41c00115 	stw	r7,4(r8)
 800a2bc:	d8801c15 	stw	r2,112(sp)
 800a2c0:	d8c01b15 	stw	r3,108(sp)
 800a2c4:	68fff40e 	bge	r13,r3,800a298 <__alt_data_end+0xf800a298>
 800a2c8:	1000101e 	bne	r2,zero,800a30c <___vfiprintf_internal_r+0xc9c>
 800a2cc:	e73ffc04 	addi	fp,fp,-16
 800a2d0:	01000044 	movi	r4,1
 800a2d4:	000b883a 	mov	r5,zero
 800a2d8:	d811883a 	mov	r8,sp
 800a2dc:	3f3ff316 	blt	r7,fp,800a2ac <__alt_data_end+0xf800a2ac>
 800a2e0:	da802417 	ldw	r10,144(sp)
 800a2e4:	1705883a 	add	r2,r2,fp
 800a2e8:	47000115 	stw	fp,4(r8)
 800a2ec:	42800015 	stw	r10,0(r8)
 800a2f0:	d8801c15 	stw	r2,112(sp)
 800a2f4:	d9001b15 	stw	r4,108(sp)
 800a2f8:	00c001c4 	movi	r3,7
 800a2fc:	19003616 	blt	r3,r4,800a3d8 <___vfiprintf_internal_r+0xd68>
 800a300:	42000204 	addi	r8,r8,8
 800a304:	21000044 	addi	r4,r4,1
 800a308:	003e5706 	br	8009c68 <__alt_data_end+0xf8009c68>
 800a30c:	d9402117 	ldw	r5,132(sp)
 800a310:	d9002017 	ldw	r4,128(sp)
 800a314:	d9801a04 	addi	r6,sp,104
 800a318:	d9c02b15 	stw	r7,172(sp)
 800a31c:	db402a15 	stw	r13,168(sp)
 800a320:	800955c0 	call	800955c <__sprint_r.part.0>
 800a324:	d9c02b17 	ldw	r7,172(sp)
 800a328:	db402a17 	ldw	r13,168(sp)
 800a32c:	1000241e 	bne	r2,zero,800a3c0 <___vfiprintf_internal_r+0xd50>
 800a330:	d9401b17 	ldw	r5,108(sp)
 800a334:	d8801c17 	ldw	r2,112(sp)
 800a338:	d811883a 	mov	r8,sp
 800a33c:	29000044 	addi	r4,r5,1
 800a340:	003fd806 	br	800a2a4 <__alt_data_end+0xf800a2a4>
 800a344:	d9401b17 	ldw	r5,108(sp)
 800a348:	00c20074 	movhi	r3,2049
 800a34c:	18d7b204 	addi	r3,r3,24264
 800a350:	d8c02415 	stw	r3,144(sp)
 800a354:	29400044 	addi	r5,r5,1
 800a358:	d8c02417 	ldw	r3,144(sp)
 800a35c:	14c5883a 	add	r2,r2,r19
 800a360:	44c00115 	stw	r19,4(r8)
 800a364:	40c00015 	stw	r3,0(r8)
 800a368:	d8801c15 	stw	r2,112(sp)
 800a36c:	d9401b15 	stw	r5,108(sp)
 800a370:	00c001c4 	movi	r3,7
 800a374:	1940070e 	bge	r3,r5,800a394 <___vfiprintf_internal_r+0xd24>
 800a378:	103e4826 	beq	r2,zero,8009c9c <__alt_data_end+0xf8009c9c>
 800a37c:	d9402117 	ldw	r5,132(sp)
 800a380:	d9002017 	ldw	r4,128(sp)
 800a384:	d9801a04 	addi	r6,sp,104
 800a388:	800955c0 	call	800955c <__sprint_r.part.0>
 800a38c:	10000c1e 	bne	r2,zero,800a3c0 <___vfiprintf_internal_r+0xd50>
 800a390:	d8801c17 	ldw	r2,112(sp)
 800a394:	8c80010e 	bge	r17,r18,800a39c <___vfiprintf_internal_r+0xd2c>
 800a398:	9023883a 	mov	r17,r18
 800a39c:	da802317 	ldw	r10,140(sp)
 800a3a0:	5455883a 	add	r10,r10,r17
 800a3a4:	da802315 	stw	r10,140(sp)
 800a3a8:	103e4126 	beq	r2,zero,8009cb0 <__alt_data_end+0xf8009cb0>
 800a3ac:	d9402117 	ldw	r5,132(sp)
 800a3b0:	d9002017 	ldw	r4,128(sp)
 800a3b4:	d9801a04 	addi	r6,sp,104
 800a3b8:	800955c0 	call	800955c <__sprint_r.part.0>
 800a3bc:	103e3c26 	beq	r2,zero,8009cb0 <__alt_data_end+0xf8009cb0>
 800a3c0:	dd002117 	ldw	r20,132(sp)
 800a3c4:	a080030b 	ldhu	r2,12(r20)
 800a3c8:	1080100c 	andi	r2,r2,64
 800a3cc:	1001231e 	bne	r2,zero,800a85c <___vfiprintf_internal_r+0x11ec>
 800a3d0:	d8802317 	ldw	r2,140(sp)
 800a3d4:	003d7b06 	br	80099c4 <__alt_data_end+0xf80099c4>
 800a3d8:	1000991e 	bne	r2,zero,800a640 <___vfiprintf_internal_r+0xfd0>
 800a3dc:	00c00044 	movi	r3,1
 800a3e0:	9805883a 	mov	r2,r19
 800a3e4:	dd400015 	stw	r21,0(sp)
 800a3e8:	dcc00115 	stw	r19,4(sp)
 800a3ec:	dcc01c15 	stw	r19,112(sp)
 800a3f0:	d8c01b15 	stw	r3,108(sp)
 800a3f4:	d811883a 	mov	r8,sp
 800a3f8:	42000204 	addi	r8,r8,8
 800a3fc:	a2c0010c 	andi	r11,r20,4
 800a400:	583fe426 	beq	r11,zero,800a394 <__alt_data_end+0xf800a394>
 800a404:	8ca7c83a 	sub	r19,r17,r18
 800a408:	04ffe20e 	bge	zero,r19,800a394 <__alt_data_end+0xf800a394>
 800a40c:	01c00404 	movi	r7,16
 800a410:	3cffcc0e 	bge	r7,r19,800a344 <__alt_data_end+0xf800a344>
 800a414:	02820074 	movhi	r10,2049
 800a418:	5297b204 	addi	r10,r10,24264
 800a41c:	d9001b17 	ldw	r4,108(sp)
 800a420:	da802415 	stw	r10,144(sp)
 800a424:	382b883a 	mov	r21,r7
 800a428:	050001c4 	movi	r20,7
 800a42c:	df002017 	ldw	fp,128(sp)
 800a430:	00000506 	br	800a448 <___vfiprintf_internal_r+0xdd8>
 800a434:	21400084 	addi	r5,r4,2
 800a438:	42000204 	addi	r8,r8,8
 800a43c:	1809883a 	mov	r4,r3
 800a440:	9cfffc04 	addi	r19,r19,-16
 800a444:	acffc40e 	bge	r21,r19,800a358 <__alt_data_end+0xf800a358>
 800a448:	10800404 	addi	r2,r2,16
 800a44c:	20c00044 	addi	r3,r4,1
 800a450:	45800015 	stw	r22,0(r8)
 800a454:	45400115 	stw	r21,4(r8)
 800a458:	d8801c15 	stw	r2,112(sp)
 800a45c:	d8c01b15 	stw	r3,108(sp)
 800a460:	a0fff40e 	bge	r20,r3,800a434 <__alt_data_end+0xf800a434>
 800a464:	1000041e 	bne	r2,zero,800a478 <___vfiprintf_internal_r+0xe08>
 800a468:	01400044 	movi	r5,1
 800a46c:	0009883a 	mov	r4,zero
 800a470:	d811883a 	mov	r8,sp
 800a474:	003ff206 	br	800a440 <__alt_data_end+0xf800a440>
 800a478:	d9402117 	ldw	r5,132(sp)
 800a47c:	d9801a04 	addi	r6,sp,104
 800a480:	e009883a 	mov	r4,fp
 800a484:	800955c0 	call	800955c <__sprint_r.part.0>
 800a488:	103fcd1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a48c:	d9001b17 	ldw	r4,108(sp)
 800a490:	d8801c17 	ldw	r2,112(sp)
 800a494:	d811883a 	mov	r8,sp
 800a498:	21400044 	addi	r5,r4,1
 800a49c:	003fe806 	br	800a440 <__alt_data_end+0xf800a440>
 800a4a0:	d9402117 	ldw	r5,132(sp)
 800a4a4:	d9002017 	ldw	r4,128(sp)
 800a4a8:	d9801a04 	addi	r6,sp,104
 800a4ac:	d9c02b15 	stw	r7,172(sp)
 800a4b0:	db402a15 	stw	r13,168(sp)
 800a4b4:	800955c0 	call	800955c <__sprint_r.part.0>
 800a4b8:	d9c02b17 	ldw	r7,172(sp)
 800a4bc:	db402a17 	ldw	r13,168(sp)
 800a4c0:	103fbf1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a4c4:	d9401b17 	ldw	r5,108(sp)
 800a4c8:	d8801c17 	ldw	r2,112(sp)
 800a4cc:	d811883a 	mov	r8,sp
 800a4d0:	29800044 	addi	r6,r5,1
 800a4d4:	003dc406 	br	8009be8 <__alt_data_end+0xf8009be8>
 800a4d8:	1000d21e 	bne	r2,zero,800a824 <___vfiprintf_internal_r+0x11b4>
 800a4dc:	d8c01d87 	ldb	r3,118(sp)
 800a4e0:	18009526 	beq	r3,zero,800a738 <___vfiprintf_internal_r+0x10c8>
 800a4e4:	00800044 	movi	r2,1
 800a4e8:	d8c01d84 	addi	r3,sp,118
 800a4ec:	1009883a 	mov	r4,r2
 800a4f0:	d8c00015 	stw	r3,0(sp)
 800a4f4:	d8800115 	stw	r2,4(sp)
 800a4f8:	d811883a 	mov	r8,sp
 800a4fc:	200b883a 	mov	r5,r4
 800a500:	42000204 	addi	r8,r8,8
 800a504:	21000044 	addi	r4,r4,1
 800a508:	003d9706 	br	8009b68 <__alt_data_end+0xf8009b68>
 800a50c:	d9001d04 	addi	r4,sp,116
 800a510:	00800084 	movi	r2,2
 800a514:	d9000015 	stw	r4,0(sp)
 800a518:	d8800115 	stw	r2,4(sp)
 800a51c:	1809883a 	mov	r4,r3
 800a520:	d811883a 	mov	r8,sp
 800a524:	200b883a 	mov	r5,r4
 800a528:	42000204 	addi	r8,r8,8
 800a52c:	21000044 	addi	r4,r4,1
 800a530:	003f4e06 	br	800a26c <__alt_data_end+0xf800a26c>
 800a534:	d8001d85 	stb	zero,118(sp)
 800a538:	48005016 	blt	r9,zero,800a67c <___vfiprintf_internal_r+0x100c>
 800a53c:	00ffdfc4 	movi	r3,-129
 800a540:	94c4b03a 	or	r2,r18,r19
 800a544:	a0e8703a 	and	r20,r20,r3
 800a548:	103d4426 	beq	r2,zero,8009a5c <__alt_data_end+0xf8009a5c>
 800a54c:	0039883a 	mov	fp,zero
 800a550:	d9002617 	ldw	r4,152(sp)
 800a554:	dd401a04 	addi	r21,sp,104
 800a558:	908003cc 	andi	r2,r18,15
 800a55c:	9806973a 	slli	r3,r19,28
 800a560:	2085883a 	add	r2,r4,r2
 800a564:	9024d13a 	srli	r18,r18,4
 800a568:	10800003 	ldbu	r2,0(r2)
 800a56c:	9826d13a 	srli	r19,r19,4
 800a570:	ad7fffc4 	addi	r21,r21,-1
 800a574:	1ca4b03a 	or	r18,r3,r18
 800a578:	a8800005 	stb	r2,0(r21)
 800a57c:	94c4b03a 	or	r2,r18,r19
 800a580:	103ff51e 	bne	r2,zero,800a558 <__alt_data_end+0xf800a558>
 800a584:	003e5906 	br	8009eec <__alt_data_end+0xf8009eec>
 800a588:	d9402117 	ldw	r5,132(sp)
 800a58c:	d9002017 	ldw	r4,128(sp)
 800a590:	d9801a04 	addi	r6,sp,104
 800a594:	800955c0 	call	800955c <__sprint_r.part.0>
 800a598:	103f891e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a59c:	d8801c17 	ldw	r2,112(sp)
 800a5a0:	d811883a 	mov	r8,sp
 800a5a4:	003f9506 	br	800a3fc <__alt_data_end+0xf800a3fc>
 800a5a8:	d9402117 	ldw	r5,132(sp)
 800a5ac:	d9002017 	ldw	r4,128(sp)
 800a5b0:	d9801a04 	addi	r6,sp,104
 800a5b4:	800955c0 	call	800955c <__sprint_r.part.0>
 800a5b8:	103f811e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a5bc:	d811883a 	mov	r8,sp
 800a5c0:	003ced06 	br	8009978 <__alt_data_end+0xf8009978>
 800a5c4:	d9402117 	ldw	r5,132(sp)
 800a5c8:	d9002017 	ldw	r4,128(sp)
 800a5cc:	d9801a04 	addi	r6,sp,104
 800a5d0:	da402c15 	stw	r9,176(sp)
 800a5d4:	db802a15 	stw	r14,168(sp)
 800a5d8:	800955c0 	call	800955c <__sprint_r.part.0>
 800a5dc:	da402c17 	ldw	r9,176(sp)
 800a5e0:	db802a17 	ldw	r14,168(sp)
 800a5e4:	103f761e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a5e8:	d9401b17 	ldw	r5,108(sp)
 800a5ec:	d8801c17 	ldw	r2,112(sp)
 800a5f0:	d811883a 	mov	r8,sp
 800a5f4:	29000044 	addi	r4,r5,1
 800a5f8:	003d5b06 	br	8009b68 <__alt_data_end+0xf8009b68>
 800a5fc:	d9402117 	ldw	r5,132(sp)
 800a600:	d9002017 	ldw	r4,128(sp)
 800a604:	d9801a04 	addi	r6,sp,104
 800a608:	da402c15 	stw	r9,176(sp)
 800a60c:	800955c0 	call	800955c <__sprint_r.part.0>
 800a610:	da402c17 	ldw	r9,176(sp)
 800a614:	103f6a1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a618:	d9401b17 	ldw	r5,108(sp)
 800a61c:	d8801c17 	ldw	r2,112(sp)
 800a620:	d811883a 	mov	r8,sp
 800a624:	29000044 	addi	r4,r5,1
 800a628:	003f1006 	br	800a26c <__alt_data_end+0xf800a26c>
 800a62c:	1000c31e 	bne	r2,zero,800a93c <___vfiprintf_internal_r+0x12cc>
 800a630:	01000044 	movi	r4,1
 800a634:	000b883a 	mov	r5,zero
 800a638:	d811883a 	mov	r8,sp
 800a63c:	003f0d06 	br	800a274 <__alt_data_end+0xf800a274>
 800a640:	d9402117 	ldw	r5,132(sp)
 800a644:	d9002017 	ldw	r4,128(sp)
 800a648:	d9801a04 	addi	r6,sp,104
 800a64c:	800955c0 	call	800955c <__sprint_r.part.0>
 800a650:	103f5b1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a654:	d9001b17 	ldw	r4,108(sp)
 800a658:	d8801c17 	ldw	r2,112(sp)
 800a65c:	d811883a 	mov	r8,sp
 800a660:	21000044 	addi	r4,r4,1
 800a664:	003d8006 	br	8009c68 <__alt_data_end+0xf8009c68>
 800a668:	01020074 	movhi	r4,2049
 800a66c:	21174e04 	addi	r4,r4,23864
 800a670:	d9002615 	stw	r4,152(sp)
 800a674:	d8c02215 	stw	r3,136(sp)
 800a678:	1029883a 	mov	r20,r2
 800a67c:	94c4b03a 	or	r2,r18,r19
 800a680:	103fb21e 	bne	r2,zero,800a54c <__alt_data_end+0xf800a54c>
 800a684:	0039883a 	mov	fp,zero
 800a688:	00800084 	movi	r2,2
 800a68c:	003e6b06 	br	800a03c <__alt_data_end+0xf800a03c>
 800a690:	da802217 	ldw	r10,136(sp)
 800a694:	d8001d85 	stb	zero,118(sp)
 800a698:	0027883a 	mov	r19,zero
 800a69c:	50800104 	addi	r2,r10,4
 800a6a0:	54800017 	ldw	r18,0(r10)
 800a6a4:	483e6016 	blt	r9,zero,800a028 <__alt_data_end+0xf800a028>
 800a6a8:	00ffdfc4 	movi	r3,-129
 800a6ac:	d8802215 	stw	r2,136(sp)
 800a6b0:	a0e8703a 	and	r20,r20,r3
 800a6b4:	0039883a 	mov	fp,zero
 800a6b8:	903ebb26 	beq	r18,zero,800a1a8 <__alt_data_end+0xf800a1a8>
 800a6bc:	00800244 	movi	r2,9
 800a6c0:	14bdee36 	bltu	r2,r18,8009e7c <__alt_data_end+0xf8009e7c>
 800a6c4:	003eba06 	br	800a1b0 <__alt_data_end+0xf800a1b0>
 800a6c8:	00800c04 	movi	r2,48
 800a6cc:	d8c01d45 	stb	r3,117(sp)
 800a6d0:	d8801d05 	stb	r2,116(sp)
 800a6d4:	d8001d85 	stb	zero,118(sp)
 800a6d8:	a0c00094 	ori	r3,r20,2
 800a6dc:	4800a916 	blt	r9,zero,800a984 <___vfiprintf_internal_r+0x1314>
 800a6e0:	00bfdfc4 	movi	r2,-129
 800a6e4:	a096703a 	and	r11,r20,r2
 800a6e8:	5d000094 	ori	r20,r11,2
 800a6ec:	0039883a 	mov	fp,zero
 800a6f0:	003f9706 	br	800a550 <__alt_data_end+0xf800a550>
 800a6f4:	8025883a 	mov	r18,r16
 800a6f8:	003c2e06 	br	80097b4 <__alt_data_end+0xf80097b4>
 800a6fc:	00820074 	movhi	r2,2049
 800a700:	10974e04 	addi	r2,r2,23864
 800a704:	0039883a 	mov	fp,zero
 800a708:	d8802615 	stw	r2,152(sp)
 800a70c:	003f9006 	br	800a550 <__alt_data_end+0xf800a550>
 800a710:	04a5c83a 	sub	r18,zero,r18
 800a714:	07000b44 	movi	fp,45
 800a718:	9004c03a 	cmpne	r2,r18,zero
 800a71c:	04e7c83a 	sub	r19,zero,r19
 800a720:	df001d85 	stb	fp,118(sp)
 800a724:	98a7c83a 	sub	r19,r19,r2
 800a728:	48009f16 	blt	r9,zero,800a9a8 <___vfiprintf_internal_r+0x1338>
 800a72c:	00bfdfc4 	movi	r2,-129
 800a730:	a0a8703a 	and	r20,r20,r2
 800a734:	003dd006 	br	8009e78 <__alt_data_end+0xf8009e78>
 800a738:	70004c26 	beq	r14,zero,800a86c <___vfiprintf_internal_r+0x11fc>
 800a73c:	00800084 	movi	r2,2
 800a740:	d8c01d04 	addi	r3,sp,116
 800a744:	d8c00015 	stw	r3,0(sp)
 800a748:	d8800115 	stw	r2,4(sp)
 800a74c:	01000044 	movi	r4,1
 800a750:	d811883a 	mov	r8,sp
 800a754:	003f7306 	br	800a524 <__alt_data_end+0xf800a524>
 800a758:	a080100c 	andi	r2,r20,64
 800a75c:	da802217 	ldw	r10,136(sp)
 800a760:	103e0626 	beq	r2,zero,8009f7c <__alt_data_end+0xf8009f7c>
 800a764:	5480000f 	ldh	r18,0(r10)
 800a768:	52800104 	addi	r10,r10,4
 800a76c:	da802215 	stw	r10,136(sp)
 800a770:	9027d7fa 	srai	r19,r18,31
 800a774:	9805883a 	mov	r2,r19
 800a778:	003db806 	br	8009e5c <__alt_data_end+0xf8009e5c>
 800a77c:	a080040c 	andi	r2,r20,16
 800a780:	1000091e 	bne	r2,zero,800a7a8 <___vfiprintf_internal_r+0x1138>
 800a784:	a2c0100c 	andi	r11,r20,64
 800a788:	58000726 	beq	r11,zero,800a7a8 <___vfiprintf_internal_r+0x1138>
 800a78c:	da802217 	ldw	r10,136(sp)
 800a790:	50800017 	ldw	r2,0(r10)
 800a794:	52800104 	addi	r10,r10,4
 800a798:	da802215 	stw	r10,136(sp)
 800a79c:	da802317 	ldw	r10,140(sp)
 800a7a0:	1280000d 	sth	r10,0(r2)
 800a7a4:	003be706 	br	8009744 <__alt_data_end+0xf8009744>
 800a7a8:	da802217 	ldw	r10,136(sp)
 800a7ac:	50800017 	ldw	r2,0(r10)
 800a7b0:	52800104 	addi	r10,r10,4
 800a7b4:	da802215 	stw	r10,136(sp)
 800a7b8:	da802317 	ldw	r10,140(sp)
 800a7bc:	12800015 	stw	r10,0(r2)
 800a7c0:	003be006 	br	8009744 <__alt_data_end+0xf8009744>
 800a7c4:	a080100c 	andi	r2,r20,64
 800a7c8:	da802217 	ldw	r10,136(sp)
 800a7cc:	10003026 	beq	r2,zero,800a890 <___vfiprintf_internal_r+0x1220>
 800a7d0:	5480000b 	ldhu	r18,0(r10)
 800a7d4:	52800104 	addi	r10,r10,4
 800a7d8:	0027883a 	mov	r19,zero
 800a7dc:	da802215 	stw	r10,136(sp)
 800a7e0:	003d8006 	br	8009de4 <__alt_data_end+0xf8009de4>
 800a7e4:	80c00007 	ldb	r3,0(r16)
 800a7e8:	003c0006 	br	80097ec <__alt_data_end+0xf80097ec>
 800a7ec:	a080100c 	andi	r2,r20,64
 800a7f0:	d8001d85 	stb	zero,118(sp)
 800a7f4:	da802217 	ldw	r10,136(sp)
 800a7f8:	1000201e 	bne	r2,zero,800a87c <___vfiprintf_internal_r+0x120c>
 800a7fc:	50800104 	addi	r2,r10,4
 800a800:	54800017 	ldw	r18,0(r10)
 800a804:	0027883a 	mov	r19,zero
 800a808:	483def0e 	bge	r9,zero,8009fc8 <__alt_data_end+0xf8009fc8>
 800a80c:	94c6b03a 	or	r3,r18,r19
 800a810:	d8802215 	stw	r2,136(sp)
 800a814:	183d4e1e 	bne	r3,zero,8009d50 <__alt_data_end+0xf8009d50>
 800a818:	0039883a 	mov	fp,zero
 800a81c:	0005883a 	mov	r2,zero
 800a820:	003e0606 	br	800a03c <__alt_data_end+0xf800a03c>
 800a824:	d9402117 	ldw	r5,132(sp)
 800a828:	d9002017 	ldw	r4,128(sp)
 800a82c:	d9801a04 	addi	r6,sp,104
 800a830:	da402c15 	stw	r9,176(sp)
 800a834:	db802a15 	stw	r14,168(sp)
 800a838:	800955c0 	call	800955c <__sprint_r.part.0>
 800a83c:	da402c17 	ldw	r9,176(sp)
 800a840:	db802a17 	ldw	r14,168(sp)
 800a844:	103ede1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a848:	d9401b17 	ldw	r5,108(sp)
 800a84c:	d8801c17 	ldw	r2,112(sp)
 800a850:	d811883a 	mov	r8,sp
 800a854:	29000044 	addi	r4,r5,1
 800a858:	003e7406 	br	800a22c <__alt_data_end+0xf800a22c>
 800a85c:	00bfffc4 	movi	r2,-1
 800a860:	003c5806 	br	80099c4 <__alt_data_end+0xf80099c4>
 800a864:	d811883a 	mov	r8,sp
 800a868:	003ee806 	br	800a40c <__alt_data_end+0xf800a40c>
 800a86c:	000b883a 	mov	r5,zero
 800a870:	01000044 	movi	r4,1
 800a874:	d811883a 	mov	r8,sp
 800a878:	003e7c06 	br	800a26c <__alt_data_end+0xf800a26c>
 800a87c:	50800104 	addi	r2,r10,4
 800a880:	5480000b 	ldhu	r18,0(r10)
 800a884:	0027883a 	mov	r19,zero
 800a888:	483dcf0e 	bge	r9,zero,8009fc8 <__alt_data_end+0xf8009fc8>
 800a88c:	003fdf06 	br	800a80c <__alt_data_end+0xf800a80c>
 800a890:	54800017 	ldw	r18,0(r10)
 800a894:	52800104 	addi	r10,r10,4
 800a898:	0027883a 	mov	r19,zero
 800a89c:	da802215 	stw	r10,136(sp)
 800a8a0:	003d5006 	br	8009de4 <__alt_data_end+0xf8009de4>
 800a8a4:	50800104 	addi	r2,r10,4
 800a8a8:	5480000b 	ldhu	r18,0(r10)
 800a8ac:	0027883a 	mov	r19,zero
 800a8b0:	483f7d0e 	bge	r9,zero,800a6a8 <__alt_data_end+0xf800a6a8>
 800a8b4:	003ddc06 	br	800a028 <__alt_data_end+0xf800a028>
 800a8b8:	d8c02215 	stw	r3,136(sp)
 800a8bc:	0039883a 	mov	fp,zero
 800a8c0:	003ddb06 	br	800a030 <__alt_data_end+0xf800a030>
 800a8c4:	02820074 	movhi	r10,2049
 800a8c8:	5297ae04 	addi	r10,r10,24248
 800a8cc:	da802415 	stw	r10,144(sp)
 800a8d0:	003e8306 	br	800a2e0 <__alt_data_end+0xf800a2e0>
 800a8d4:	d8801c17 	ldw	r2,112(sp)
 800a8d8:	dd002117 	ldw	r20,132(sp)
 800a8dc:	103eb926 	beq	r2,zero,800a3c4 <__alt_data_end+0xf800a3c4>
 800a8e0:	d9002017 	ldw	r4,128(sp)
 800a8e4:	d9801a04 	addi	r6,sp,104
 800a8e8:	a00b883a 	mov	r5,r20
 800a8ec:	800955c0 	call	800955c <__sprint_r.part.0>
 800a8f0:	003eb406 	br	800a3c4 <__alt_data_end+0xf800a3c4>
 800a8f4:	80c00043 	ldbu	r3,1(r16)
 800a8f8:	a5000814 	ori	r20,r20,32
 800a8fc:	84000044 	addi	r16,r16,1
 800a900:	18c03fcc 	andi	r3,r3,255
 800a904:	18c0201c 	xori	r3,r3,128
 800a908:	18ffe004 	addi	r3,r3,-128
 800a90c:	003bb706 	br	80097ec <__alt_data_end+0xf80097ec>
 800a910:	a809883a 	mov	r4,r21
 800a914:	d8c02a15 	stw	r3,168(sp)
 800a918:	da002b15 	stw	r8,172(sp)
 800a91c:	80034580 	call	8003458 <strlen>
 800a920:	d8c02a17 	ldw	r3,168(sp)
 800a924:	1027883a 	mov	r19,r2
 800a928:	df001d83 	ldbu	fp,118(sp)
 800a92c:	d8c02215 	stw	r3,136(sp)
 800a930:	0013883a 	mov	r9,zero
 800a934:	da002b17 	ldw	r8,172(sp)
 800a938:	003c4d06 	br	8009a70 <__alt_data_end+0xf8009a70>
 800a93c:	d9402117 	ldw	r5,132(sp)
 800a940:	d9002017 	ldw	r4,128(sp)
 800a944:	d9801a04 	addi	r6,sp,104
 800a948:	da402c15 	stw	r9,176(sp)
 800a94c:	800955c0 	call	800955c <__sprint_r.part.0>
 800a950:	da402c17 	ldw	r9,176(sp)
 800a954:	103e9a1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a958:	d9401b17 	ldw	r5,108(sp)
 800a95c:	d8801c17 	ldw	r2,112(sp)
 800a960:	d811883a 	mov	r8,sp
 800a964:	29000044 	addi	r4,r5,1
 800a968:	003e4206 	br	800a274 <__alt_data_end+0xf800a274>
 800a96c:	d9401b17 	ldw	r5,108(sp)
 800a970:	01020074 	movhi	r4,2049
 800a974:	2117b204 	addi	r4,r4,24264
 800a978:	d9002415 	stw	r4,144(sp)
 800a97c:	29400044 	addi	r5,r5,1
 800a980:	003c6d06 	br	8009b38 <__alt_data_end+0xf8009b38>
 800a984:	0039883a 	mov	fp,zero
 800a988:	00800084 	movi	r2,2
 800a98c:	10803fcc 	andi	r2,r2,255
 800a990:	01000044 	movi	r4,1
 800a994:	11001e26 	beq	r2,r4,800aa10 <___vfiprintf_internal_r+0x13a0>
 800a998:	01000084 	movi	r4,2
 800a99c:	11001e1e 	bne	r2,r4,800aa18 <___vfiprintf_internal_r+0x13a8>
 800a9a0:	1829883a 	mov	r20,r3
 800a9a4:	003eea06 	br	800a550 <__alt_data_end+0xf800a550>
 800a9a8:	a007883a 	mov	r3,r20
 800a9ac:	00800044 	movi	r2,1
 800a9b0:	003ff606 	br	800a98c <__alt_data_end+0xf800a98c>
 800a9b4:	00800184 	movi	r2,6
 800a9b8:	1240012e 	bgeu	r2,r9,800a9c0 <___vfiprintf_internal_r+0x1350>
 800a9bc:	1013883a 	mov	r9,r2
 800a9c0:	4827883a 	mov	r19,r9
 800a9c4:	4825883a 	mov	r18,r9
 800a9c8:	48001516 	blt	r9,zero,800aa20 <___vfiprintf_internal_r+0x13b0>
 800a9cc:	05420074 	movhi	r21,2049
 800a9d0:	d8c02215 	stw	r3,136(sp)
 800a9d4:	ad575304 	addi	r21,r21,23884
 800a9d8:	003d1406 	br	8009e2c <__alt_data_end+0xf8009e2c>
 800a9dc:	02820074 	movhi	r10,2049
 800a9e0:	5297ae04 	addi	r10,r10,24248
 800a9e4:	da802415 	stw	r10,144(sp)
 800a9e8:	200d883a 	mov	r6,r4
 800a9ec:	003c9106 	br	8009c34 <__alt_data_end+0xf8009c34>
 800a9f0:	5021883a 	mov	r16,r10
 800a9f4:	0013883a 	mov	r9,zero
 800a9f8:	003b7d06 	br	80097f0 <__alt_data_end+0xf80097f0>
 800a9fc:	4827883a 	mov	r19,r9
 800aa00:	df001d83 	ldbu	fp,118(sp)
 800aa04:	d8c02215 	stw	r3,136(sp)
 800aa08:	0013883a 	mov	r9,zero
 800aa0c:	003c1806 	br	8009a70 <__alt_data_end+0xf8009a70>
 800aa10:	1829883a 	mov	r20,r3
 800aa14:	003d1806 	br	8009e78 <__alt_data_end+0xf8009e78>
 800aa18:	1829883a 	mov	r20,r3
 800aa1c:	003ccd06 	br	8009d54 <__alt_data_end+0xf8009d54>
 800aa20:	0025883a 	mov	r18,zero
 800aa24:	003fe906 	br	800a9cc <__alt_data_end+0xf800a9cc>
 800aa28:	d8802217 	ldw	r2,136(sp)
 800aa2c:	80c00043 	ldbu	r3,1(r16)
 800aa30:	5021883a 	mov	r16,r10
 800aa34:	12400017 	ldw	r9,0(r2)
 800aa38:	10800104 	addi	r2,r2,4
 800aa3c:	d8802215 	stw	r2,136(sp)
 800aa40:	483faf0e 	bge	r9,zero,800a900 <__alt_data_end+0xf800a900>
 800aa44:	18c03fcc 	andi	r3,r3,255
 800aa48:	18c0201c 	xori	r3,r3,128
 800aa4c:	027fffc4 	movi	r9,-1
 800aa50:	18ffe004 	addi	r3,r3,-128
 800aa54:	003b6506 	br	80097ec <__alt_data_end+0xf80097ec>
 800aa58:	d9c01d85 	stb	r7,118(sp)
 800aa5c:	003ca006 	br	8009ce0 <__alt_data_end+0xf8009ce0>
 800aa60:	d9c01d85 	stb	r7,118(sp)
 800aa64:	003cad06 	br	8009d1c <__alt_data_end+0xf8009d1c>
 800aa68:	d9c01d85 	stb	r7,118(sp)
 800aa6c:	003d7d06 	br	800a064 <__alt_data_end+0xf800a064>
 800aa70:	d9c01d85 	stb	r7,118(sp)
 800aa74:	003d5f06 	br	8009ff4 <__alt_data_end+0xf8009ff4>
 800aa78:	a080004c 	andi	r2,r20,1
 800aa7c:	0039883a 	mov	fp,zero
 800aa80:	10000526 	beq	r2,zero,800aa98 <___vfiprintf_internal_r+0x1428>
 800aa84:	00800c04 	movi	r2,48
 800aa88:	d88019c5 	stb	r2,103(sp)
 800aa8c:	dcc02717 	ldw	r19,156(sp)
 800aa90:	dd4019c4 	addi	r21,sp,103
 800aa94:	003bf606 	br	8009a70 <__alt_data_end+0xf8009a70>
 800aa98:	0027883a 	mov	r19,zero
 800aa9c:	dd401a04 	addi	r21,sp,104
 800aaa0:	003bf306 	br	8009a70 <__alt_data_end+0xf8009a70>
 800aaa4:	d9c01d85 	stb	r7,118(sp)
 800aaa8:	003dc806 	br	800a1cc <__alt_data_end+0xf800a1cc>
 800aaac:	d9c01d85 	stb	r7,118(sp)
 800aab0:	003d3a06 	br	8009f9c <__alt_data_end+0xf8009f9c>
 800aab4:	d9c01d85 	stb	r7,118(sp)
 800aab8:	003d2a06 	br	8009f64 <__alt_data_end+0xf8009f64>
 800aabc:	d9c01d85 	stb	r7,118(sp)
 800aac0:	003cde06 	br	8009e3c <__alt_data_end+0xf8009e3c>
 800aac4:	d9c01d85 	stb	r7,118(sp)
 800aac8:	003cbc06 	br	8009dbc <__alt_data_end+0xf8009dbc>

0800aacc <__vfiprintf_internal>:
 800aacc:	00820074 	movhi	r2,2049
 800aad0:	109ecc04 	addi	r2,r2,31536
 800aad4:	300f883a 	mov	r7,r6
 800aad8:	280d883a 	mov	r6,r5
 800aadc:	200b883a 	mov	r5,r4
 800aae0:	11000017 	ldw	r4,0(r2)
 800aae4:	80096701 	jmpi	8009670 <___vfiprintf_internal_r>

0800aae8 <__sbprintf>:
 800aae8:	2880030b 	ldhu	r2,12(r5)
 800aaec:	2ac01917 	ldw	r11,100(r5)
 800aaf0:	2a80038b 	ldhu	r10,14(r5)
 800aaf4:	2a400717 	ldw	r9,28(r5)
 800aaf8:	2a000917 	ldw	r8,36(r5)
 800aafc:	defee204 	addi	sp,sp,-1144
 800ab00:	00c10004 	movi	r3,1024
 800ab04:	dc011a15 	stw	r16,1128(sp)
 800ab08:	10bfff4c 	andi	r2,r2,65533
 800ab0c:	2821883a 	mov	r16,r5
 800ab10:	d8cb883a 	add	r5,sp,r3
 800ab14:	dc811c15 	stw	r18,1136(sp)
 800ab18:	dc411b15 	stw	r17,1132(sp)
 800ab1c:	dfc11d15 	stw	ra,1140(sp)
 800ab20:	2025883a 	mov	r18,r4
 800ab24:	d881030d 	sth	r2,1036(sp)
 800ab28:	dac11915 	stw	r11,1124(sp)
 800ab2c:	da81038d 	sth	r10,1038(sp)
 800ab30:	da410715 	stw	r9,1052(sp)
 800ab34:	da010915 	stw	r8,1060(sp)
 800ab38:	dec10015 	stw	sp,1024(sp)
 800ab3c:	dec10415 	stw	sp,1040(sp)
 800ab40:	d8c10215 	stw	r3,1032(sp)
 800ab44:	d8c10515 	stw	r3,1044(sp)
 800ab48:	d8010615 	stw	zero,1048(sp)
 800ab4c:	80096700 	call	8009670 <___vfiprintf_internal_r>
 800ab50:	1023883a 	mov	r17,r2
 800ab54:	10000416 	blt	r2,zero,800ab68 <__sbprintf+0x80>
 800ab58:	d9410004 	addi	r5,sp,1024
 800ab5c:	9009883a 	mov	r4,r18
 800ab60:	80009a40 	call	80009a4 <_fflush_r>
 800ab64:	10000d1e 	bne	r2,zero,800ab9c <__sbprintf+0xb4>
 800ab68:	d881030b 	ldhu	r2,1036(sp)
 800ab6c:	1080100c 	andi	r2,r2,64
 800ab70:	10000326 	beq	r2,zero,800ab80 <__sbprintf+0x98>
 800ab74:	8080030b 	ldhu	r2,12(r16)
 800ab78:	10801014 	ori	r2,r2,64
 800ab7c:	8080030d 	sth	r2,12(r16)
 800ab80:	8805883a 	mov	r2,r17
 800ab84:	dfc11d17 	ldw	ra,1140(sp)
 800ab88:	dc811c17 	ldw	r18,1136(sp)
 800ab8c:	dc411b17 	ldw	r17,1132(sp)
 800ab90:	dc011a17 	ldw	r16,1128(sp)
 800ab94:	dec11e04 	addi	sp,sp,1144
 800ab98:	f800283a 	ret
 800ab9c:	047fffc4 	movi	r17,-1
 800aba0:	003ff106 	br	800ab68 <__alt_data_end+0xf800ab68>

0800aba4 <__swbuf_r>:
 800aba4:	defffb04 	addi	sp,sp,-20
 800aba8:	dcc00315 	stw	r19,12(sp)
 800abac:	dc800215 	stw	r18,8(sp)
 800abb0:	dc000015 	stw	r16,0(sp)
 800abb4:	dfc00415 	stw	ra,16(sp)
 800abb8:	dc400115 	stw	r17,4(sp)
 800abbc:	2025883a 	mov	r18,r4
 800abc0:	2827883a 	mov	r19,r5
 800abc4:	3021883a 	mov	r16,r6
 800abc8:	20000226 	beq	r4,zero,800abd4 <__swbuf_r+0x30>
 800abcc:	20800e17 	ldw	r2,56(r4)
 800abd0:	10004226 	beq	r2,zero,800acdc <__swbuf_r+0x138>
 800abd4:	80800617 	ldw	r2,24(r16)
 800abd8:	8100030b 	ldhu	r4,12(r16)
 800abdc:	80800215 	stw	r2,8(r16)
 800abe0:	2080020c 	andi	r2,r4,8
 800abe4:	10003626 	beq	r2,zero,800acc0 <__swbuf_r+0x11c>
 800abe8:	80c00417 	ldw	r3,16(r16)
 800abec:	18003426 	beq	r3,zero,800acc0 <__swbuf_r+0x11c>
 800abf0:	2088000c 	andi	r2,r4,8192
 800abf4:	9c403fcc 	andi	r17,r19,255
 800abf8:	10001a26 	beq	r2,zero,800ac64 <__swbuf_r+0xc0>
 800abfc:	80800017 	ldw	r2,0(r16)
 800ac00:	81000517 	ldw	r4,20(r16)
 800ac04:	10c7c83a 	sub	r3,r2,r3
 800ac08:	1900200e 	bge	r3,r4,800ac8c <__swbuf_r+0xe8>
 800ac0c:	18c00044 	addi	r3,r3,1
 800ac10:	81000217 	ldw	r4,8(r16)
 800ac14:	11400044 	addi	r5,r2,1
 800ac18:	81400015 	stw	r5,0(r16)
 800ac1c:	213fffc4 	addi	r4,r4,-1
 800ac20:	81000215 	stw	r4,8(r16)
 800ac24:	14c00005 	stb	r19,0(r2)
 800ac28:	80800517 	ldw	r2,20(r16)
 800ac2c:	10c01e26 	beq	r2,r3,800aca8 <__swbuf_r+0x104>
 800ac30:	8080030b 	ldhu	r2,12(r16)
 800ac34:	1080004c 	andi	r2,r2,1
 800ac38:	10000226 	beq	r2,zero,800ac44 <__swbuf_r+0xa0>
 800ac3c:	00800284 	movi	r2,10
 800ac40:	88801926 	beq	r17,r2,800aca8 <__swbuf_r+0x104>
 800ac44:	8805883a 	mov	r2,r17
 800ac48:	dfc00417 	ldw	ra,16(sp)
 800ac4c:	dcc00317 	ldw	r19,12(sp)
 800ac50:	dc800217 	ldw	r18,8(sp)
 800ac54:	dc400117 	ldw	r17,4(sp)
 800ac58:	dc000017 	ldw	r16,0(sp)
 800ac5c:	dec00504 	addi	sp,sp,20
 800ac60:	f800283a 	ret
 800ac64:	81401917 	ldw	r5,100(r16)
 800ac68:	00b7ffc4 	movi	r2,-8193
 800ac6c:	21080014 	ori	r4,r4,8192
 800ac70:	2884703a 	and	r2,r5,r2
 800ac74:	80801915 	stw	r2,100(r16)
 800ac78:	80800017 	ldw	r2,0(r16)
 800ac7c:	8100030d 	sth	r4,12(r16)
 800ac80:	81000517 	ldw	r4,20(r16)
 800ac84:	10c7c83a 	sub	r3,r2,r3
 800ac88:	193fe016 	blt	r3,r4,800ac0c <__alt_data_end+0xf800ac0c>
 800ac8c:	800b883a 	mov	r5,r16
 800ac90:	9009883a 	mov	r4,r18
 800ac94:	80009a40 	call	80009a4 <_fflush_r>
 800ac98:	1000071e 	bne	r2,zero,800acb8 <__swbuf_r+0x114>
 800ac9c:	80800017 	ldw	r2,0(r16)
 800aca0:	00c00044 	movi	r3,1
 800aca4:	003fda06 	br	800ac10 <__alt_data_end+0xf800ac10>
 800aca8:	800b883a 	mov	r5,r16
 800acac:	9009883a 	mov	r4,r18
 800acb0:	80009a40 	call	80009a4 <_fflush_r>
 800acb4:	103fe326 	beq	r2,zero,800ac44 <__alt_data_end+0xf800ac44>
 800acb8:	00bfffc4 	movi	r2,-1
 800acbc:	003fe206 	br	800ac48 <__alt_data_end+0xf800ac48>
 800acc0:	800b883a 	mov	r5,r16
 800acc4:	9009883a 	mov	r4,r18
 800acc8:	80058280 	call	8005828 <__swsetup_r>
 800accc:	103ffa1e 	bne	r2,zero,800acb8 <__alt_data_end+0xf800acb8>
 800acd0:	8100030b 	ldhu	r4,12(r16)
 800acd4:	80c00417 	ldw	r3,16(r16)
 800acd8:	003fc506 	br	800abf0 <__alt_data_end+0xf800abf0>
 800acdc:	8000d800 	call	8000d80 <__sinit>
 800ace0:	003fbc06 	br	800abd4 <__alt_data_end+0xf800abd4>

0800ace4 <__swbuf>:
 800ace4:	00820074 	movhi	r2,2049
 800ace8:	109ecc04 	addi	r2,r2,31536
 800acec:	280d883a 	mov	r6,r5
 800acf0:	200b883a 	mov	r5,r4
 800acf4:	11000017 	ldw	r4,0(r2)
 800acf8:	800aba41 	jmpi	800aba4 <__swbuf_r>

0800acfc <_calloc_r>:
 800acfc:	298b383a 	mul	r5,r5,r6
 800ad00:	defffe04 	addi	sp,sp,-8
 800ad04:	dfc00115 	stw	ra,4(sp)
 800ad08:	dc000015 	stw	r16,0(sp)
 800ad0c:	8001d900 	call	8001d90 <_malloc_r>
 800ad10:	10002926 	beq	r2,zero,800adb8 <_calloc_r+0xbc>
 800ad14:	11bfff17 	ldw	r6,-4(r2)
 800ad18:	1021883a 	mov	r16,r2
 800ad1c:	00bfff04 	movi	r2,-4
 800ad20:	308c703a 	and	r6,r6,r2
 800ad24:	00c00904 	movi	r3,36
 800ad28:	308d883a 	add	r6,r6,r2
 800ad2c:	19801636 	bltu	r3,r6,800ad88 <_calloc_r+0x8c>
 800ad30:	008004c4 	movi	r2,19
 800ad34:	11800b2e 	bgeu	r2,r6,800ad64 <_calloc_r+0x68>
 800ad38:	80000015 	stw	zero,0(r16)
 800ad3c:	80000115 	stw	zero,4(r16)
 800ad40:	008006c4 	movi	r2,27
 800ad44:	11801a2e 	bgeu	r2,r6,800adb0 <_calloc_r+0xb4>
 800ad48:	80000215 	stw	zero,8(r16)
 800ad4c:	80000315 	stw	zero,12(r16)
 800ad50:	30c0151e 	bne	r6,r3,800ada8 <_calloc_r+0xac>
 800ad54:	80000415 	stw	zero,16(r16)
 800ad58:	80800604 	addi	r2,r16,24
 800ad5c:	80000515 	stw	zero,20(r16)
 800ad60:	00000106 	br	800ad68 <_calloc_r+0x6c>
 800ad64:	8005883a 	mov	r2,r16
 800ad68:	10000015 	stw	zero,0(r2)
 800ad6c:	10000115 	stw	zero,4(r2)
 800ad70:	10000215 	stw	zero,8(r2)
 800ad74:	8005883a 	mov	r2,r16
 800ad78:	dfc00117 	ldw	ra,4(sp)
 800ad7c:	dc000017 	ldw	r16,0(sp)
 800ad80:	dec00204 	addi	sp,sp,8
 800ad84:	f800283a 	ret
 800ad88:	000b883a 	mov	r5,zero
 800ad8c:	8009883a 	mov	r4,r16
 800ad90:	80026e40 	call	80026e4 <memset>
 800ad94:	8005883a 	mov	r2,r16
 800ad98:	dfc00117 	ldw	ra,4(sp)
 800ad9c:	dc000017 	ldw	r16,0(sp)
 800ada0:	dec00204 	addi	sp,sp,8
 800ada4:	f800283a 	ret
 800ada8:	80800404 	addi	r2,r16,16
 800adac:	003fee06 	br	800ad68 <__alt_data_end+0xf800ad68>
 800adb0:	80800204 	addi	r2,r16,8
 800adb4:	003fec06 	br	800ad68 <__alt_data_end+0xf800ad68>
 800adb8:	0005883a 	mov	r2,zero
 800adbc:	003fee06 	br	800ad78 <__alt_data_end+0xf800ad78>

0800adc0 <__fputwc>:
 800adc0:	defff804 	addi	sp,sp,-32
 800adc4:	dcc00415 	stw	r19,16(sp)
 800adc8:	dc800315 	stw	r18,12(sp)
 800adcc:	dc000115 	stw	r16,4(sp)
 800add0:	dfc00715 	stw	ra,28(sp)
 800add4:	dd400615 	stw	r21,24(sp)
 800add8:	dd000515 	stw	r20,20(sp)
 800addc:	dc400215 	stw	r17,8(sp)
 800ade0:	2027883a 	mov	r19,r4
 800ade4:	2825883a 	mov	r18,r5
 800ade8:	3021883a 	mov	r16,r6
 800adec:	80079f00 	call	80079f0 <__locale_mb_cur_max>
 800adf0:	00c00044 	movi	r3,1
 800adf4:	10c03e26 	beq	r2,r3,800aef0 <__fputwc+0x130>
 800adf8:	81c01704 	addi	r7,r16,92
 800adfc:	900d883a 	mov	r6,r18
 800ae00:	d80b883a 	mov	r5,sp
 800ae04:	9809883a 	mov	r4,r19
 800ae08:	800afc80 	call	800afc8 <_wcrtomb_r>
 800ae0c:	1029883a 	mov	r20,r2
 800ae10:	00bfffc4 	movi	r2,-1
 800ae14:	a0802026 	beq	r20,r2,800ae98 <__fputwc+0xd8>
 800ae18:	d9400003 	ldbu	r5,0(sp)
 800ae1c:	a0001c26 	beq	r20,zero,800ae90 <__fputwc+0xd0>
 800ae20:	0023883a 	mov	r17,zero
 800ae24:	05400284 	movi	r21,10
 800ae28:	00000906 	br	800ae50 <__fputwc+0x90>
 800ae2c:	80800017 	ldw	r2,0(r16)
 800ae30:	11400005 	stb	r5,0(r2)
 800ae34:	80c00017 	ldw	r3,0(r16)
 800ae38:	18c00044 	addi	r3,r3,1
 800ae3c:	80c00015 	stw	r3,0(r16)
 800ae40:	8c400044 	addi	r17,r17,1
 800ae44:	dc45883a 	add	r2,sp,r17
 800ae48:	8d00112e 	bgeu	r17,r20,800ae90 <__fputwc+0xd0>
 800ae4c:	11400003 	ldbu	r5,0(r2)
 800ae50:	80c00217 	ldw	r3,8(r16)
 800ae54:	18ffffc4 	addi	r3,r3,-1
 800ae58:	80c00215 	stw	r3,8(r16)
 800ae5c:	183ff30e 	bge	r3,zero,800ae2c <__alt_data_end+0xf800ae2c>
 800ae60:	80800617 	ldw	r2,24(r16)
 800ae64:	18801916 	blt	r3,r2,800aecc <__fputwc+0x10c>
 800ae68:	80800017 	ldw	r2,0(r16)
 800ae6c:	11400005 	stb	r5,0(r2)
 800ae70:	80800017 	ldw	r2,0(r16)
 800ae74:	10c00003 	ldbu	r3,0(r2)
 800ae78:	10800044 	addi	r2,r2,1
 800ae7c:	1d402326 	beq	r3,r21,800af0c <__fputwc+0x14c>
 800ae80:	80800015 	stw	r2,0(r16)
 800ae84:	8c400044 	addi	r17,r17,1
 800ae88:	dc45883a 	add	r2,sp,r17
 800ae8c:	8d3fef36 	bltu	r17,r20,800ae4c <__alt_data_end+0xf800ae4c>
 800ae90:	9005883a 	mov	r2,r18
 800ae94:	00000406 	br	800aea8 <__fputwc+0xe8>
 800ae98:	80c0030b 	ldhu	r3,12(r16)
 800ae9c:	a005883a 	mov	r2,r20
 800aea0:	18c01014 	ori	r3,r3,64
 800aea4:	80c0030d 	sth	r3,12(r16)
 800aea8:	dfc00717 	ldw	ra,28(sp)
 800aeac:	dd400617 	ldw	r21,24(sp)
 800aeb0:	dd000517 	ldw	r20,20(sp)
 800aeb4:	dcc00417 	ldw	r19,16(sp)
 800aeb8:	dc800317 	ldw	r18,12(sp)
 800aebc:	dc400217 	ldw	r17,8(sp)
 800aec0:	dc000117 	ldw	r16,4(sp)
 800aec4:	dec00804 	addi	sp,sp,32
 800aec8:	f800283a 	ret
 800aecc:	800d883a 	mov	r6,r16
 800aed0:	29403fcc 	andi	r5,r5,255
 800aed4:	9809883a 	mov	r4,r19
 800aed8:	800aba40 	call	800aba4 <__swbuf_r>
 800aedc:	10bfffe0 	cmpeqi	r2,r2,-1
 800aee0:	10803fcc 	andi	r2,r2,255
 800aee4:	103fd626 	beq	r2,zero,800ae40 <__alt_data_end+0xf800ae40>
 800aee8:	00bfffc4 	movi	r2,-1
 800aeec:	003fee06 	br	800aea8 <__alt_data_end+0xf800aea8>
 800aef0:	90ffffc4 	addi	r3,r18,-1
 800aef4:	01003f84 	movi	r4,254
 800aef8:	20ffbf36 	bltu	r4,r3,800adf8 <__alt_data_end+0xf800adf8>
 800aefc:	900b883a 	mov	r5,r18
 800af00:	dc800005 	stb	r18,0(sp)
 800af04:	1029883a 	mov	r20,r2
 800af08:	003fc506 	br	800ae20 <__alt_data_end+0xf800ae20>
 800af0c:	800d883a 	mov	r6,r16
 800af10:	a80b883a 	mov	r5,r21
 800af14:	9809883a 	mov	r4,r19
 800af18:	800aba40 	call	800aba4 <__swbuf_r>
 800af1c:	10bfffe0 	cmpeqi	r2,r2,-1
 800af20:	003fef06 	br	800aee0 <__alt_data_end+0xf800aee0>

0800af24 <_fputwc_r>:
 800af24:	3080030b 	ldhu	r2,12(r6)
 800af28:	10c8000c 	andi	r3,r2,8192
 800af2c:	1800051e 	bne	r3,zero,800af44 <_fputwc_r+0x20>
 800af30:	30c01917 	ldw	r3,100(r6)
 800af34:	10880014 	ori	r2,r2,8192
 800af38:	3080030d 	sth	r2,12(r6)
 800af3c:	18880014 	ori	r2,r3,8192
 800af40:	30801915 	stw	r2,100(r6)
 800af44:	800adc01 	jmpi	800adc0 <__fputwc>

0800af48 <fputwc>:
 800af48:	00820074 	movhi	r2,2049
 800af4c:	defffc04 	addi	sp,sp,-16
 800af50:	109ecc04 	addi	r2,r2,31536
 800af54:	dc000115 	stw	r16,4(sp)
 800af58:	14000017 	ldw	r16,0(r2)
 800af5c:	dc400215 	stw	r17,8(sp)
 800af60:	dfc00315 	stw	ra,12(sp)
 800af64:	2023883a 	mov	r17,r4
 800af68:	80000226 	beq	r16,zero,800af74 <fputwc+0x2c>
 800af6c:	80800e17 	ldw	r2,56(r16)
 800af70:	10001026 	beq	r2,zero,800afb4 <fputwc+0x6c>
 800af74:	2880030b 	ldhu	r2,12(r5)
 800af78:	10c8000c 	andi	r3,r2,8192
 800af7c:	1800051e 	bne	r3,zero,800af94 <fputwc+0x4c>
 800af80:	28c01917 	ldw	r3,100(r5)
 800af84:	10880014 	ori	r2,r2,8192
 800af88:	2880030d 	sth	r2,12(r5)
 800af8c:	18880014 	ori	r2,r3,8192
 800af90:	28801915 	stw	r2,100(r5)
 800af94:	280d883a 	mov	r6,r5
 800af98:	8009883a 	mov	r4,r16
 800af9c:	880b883a 	mov	r5,r17
 800afa0:	dfc00317 	ldw	ra,12(sp)
 800afa4:	dc400217 	ldw	r17,8(sp)
 800afa8:	dc000117 	ldw	r16,4(sp)
 800afac:	dec00404 	addi	sp,sp,16
 800afb0:	800adc01 	jmpi	800adc0 <__fputwc>
 800afb4:	8009883a 	mov	r4,r16
 800afb8:	d9400015 	stw	r5,0(sp)
 800afbc:	8000d800 	call	8000d80 <__sinit>
 800afc0:	d9400017 	ldw	r5,0(sp)
 800afc4:	003feb06 	br	800af74 <__alt_data_end+0xf800af74>

0800afc8 <_wcrtomb_r>:
 800afc8:	defff604 	addi	sp,sp,-40
 800afcc:	00820074 	movhi	r2,2049
 800afd0:	dc800815 	stw	r18,32(sp)
 800afd4:	dc400715 	stw	r17,28(sp)
 800afd8:	dc000615 	stw	r16,24(sp)
 800afdc:	109ed004 	addi	r2,r2,31552
 800afe0:	dfc00915 	stw	ra,36(sp)
 800afe4:	2021883a 	mov	r16,r4
 800afe8:	3823883a 	mov	r17,r7
 800afec:	14800017 	ldw	r18,0(r2)
 800aff0:	28001426 	beq	r5,zero,800b044 <_wcrtomb_r+0x7c>
 800aff4:	d9400415 	stw	r5,16(sp)
 800aff8:	d9800515 	stw	r6,20(sp)
 800affc:	80079e40 	call	80079e4 <__locale_charset>
 800b000:	d9800517 	ldw	r6,20(sp)
 800b004:	d9400417 	ldw	r5,16(sp)
 800b008:	100f883a 	mov	r7,r2
 800b00c:	dc400015 	stw	r17,0(sp)
 800b010:	8009883a 	mov	r4,r16
 800b014:	903ee83a 	callr	r18
 800b018:	00ffffc4 	movi	r3,-1
 800b01c:	10c0031e 	bne	r2,r3,800b02c <_wcrtomb_r+0x64>
 800b020:	88000015 	stw	zero,0(r17)
 800b024:	00c02284 	movi	r3,138
 800b028:	80c00015 	stw	r3,0(r16)
 800b02c:	dfc00917 	ldw	ra,36(sp)
 800b030:	dc800817 	ldw	r18,32(sp)
 800b034:	dc400717 	ldw	r17,28(sp)
 800b038:	dc000617 	ldw	r16,24(sp)
 800b03c:	dec00a04 	addi	sp,sp,40
 800b040:	f800283a 	ret
 800b044:	80079e40 	call	80079e4 <__locale_charset>
 800b048:	100f883a 	mov	r7,r2
 800b04c:	dc400015 	stw	r17,0(sp)
 800b050:	000d883a 	mov	r6,zero
 800b054:	d9400104 	addi	r5,sp,4
 800b058:	8009883a 	mov	r4,r16
 800b05c:	903ee83a 	callr	r18
 800b060:	003fed06 	br	800b018 <__alt_data_end+0xf800b018>

0800b064 <wcrtomb>:
 800b064:	defff604 	addi	sp,sp,-40
 800b068:	00820074 	movhi	r2,2049
 800b06c:	dc800615 	stw	r18,24(sp)
 800b070:	dc400515 	stw	r17,20(sp)
 800b074:	109ecc04 	addi	r2,r2,31536
 800b078:	dfc00915 	stw	ra,36(sp)
 800b07c:	dd000815 	stw	r20,32(sp)
 800b080:	dcc00715 	stw	r19,28(sp)
 800b084:	dc000415 	stw	r16,16(sp)
 800b088:	3025883a 	mov	r18,r6
 800b08c:	14400017 	ldw	r17,0(r2)
 800b090:	20001926 	beq	r4,zero,800b0f8 <wcrtomb+0x94>
 800b094:	00820074 	movhi	r2,2049
 800b098:	109ed004 	addi	r2,r2,31552
 800b09c:	15000017 	ldw	r20,0(r2)
 800b0a0:	2021883a 	mov	r16,r4
 800b0a4:	2827883a 	mov	r19,r5
 800b0a8:	80079e40 	call	80079e4 <__locale_charset>
 800b0ac:	100f883a 	mov	r7,r2
 800b0b0:	dc800015 	stw	r18,0(sp)
 800b0b4:	980d883a 	mov	r6,r19
 800b0b8:	800b883a 	mov	r5,r16
 800b0bc:	8809883a 	mov	r4,r17
 800b0c0:	a03ee83a 	callr	r20
 800b0c4:	00ffffc4 	movi	r3,-1
 800b0c8:	10c0031e 	bne	r2,r3,800b0d8 <wcrtomb+0x74>
 800b0cc:	90000015 	stw	zero,0(r18)
 800b0d0:	00c02284 	movi	r3,138
 800b0d4:	88c00015 	stw	r3,0(r17)
 800b0d8:	dfc00917 	ldw	ra,36(sp)
 800b0dc:	dd000817 	ldw	r20,32(sp)
 800b0e0:	dcc00717 	ldw	r19,28(sp)
 800b0e4:	dc800617 	ldw	r18,24(sp)
 800b0e8:	dc400517 	ldw	r17,20(sp)
 800b0ec:	dc000417 	ldw	r16,16(sp)
 800b0f0:	dec00a04 	addi	sp,sp,40
 800b0f4:	f800283a 	ret
 800b0f8:	00820074 	movhi	r2,2049
 800b0fc:	109ed004 	addi	r2,r2,31552
 800b100:	14000017 	ldw	r16,0(r2)
 800b104:	80079e40 	call	80079e4 <__locale_charset>
 800b108:	100f883a 	mov	r7,r2
 800b10c:	dc800015 	stw	r18,0(sp)
 800b110:	000d883a 	mov	r6,zero
 800b114:	d9400104 	addi	r5,sp,4
 800b118:	8809883a 	mov	r4,r17
 800b11c:	803ee83a 	callr	r16
 800b120:	003fe806 	br	800b0c4 <__alt_data_end+0xf800b0c4>

0800b124 <__ascii_wctomb>:
 800b124:	28000526 	beq	r5,zero,800b13c <__ascii_wctomb+0x18>
 800b128:	00803fc4 	movi	r2,255
 800b12c:	11800536 	bltu	r2,r6,800b144 <__ascii_wctomb+0x20>
 800b130:	29800005 	stb	r6,0(r5)
 800b134:	00800044 	movi	r2,1
 800b138:	f800283a 	ret
 800b13c:	0005883a 	mov	r2,zero
 800b140:	f800283a 	ret
 800b144:	00802284 	movi	r2,138
 800b148:	20800015 	stw	r2,0(r4)
 800b14c:	00bfffc4 	movi	r2,-1
 800b150:	f800283a 	ret

0800b154 <_wctomb_r>:
 800b154:	00820074 	movhi	r2,2049
 800b158:	defff904 	addi	sp,sp,-28
 800b15c:	109ed004 	addi	r2,r2,31552
 800b160:	dfc00615 	stw	ra,24(sp)
 800b164:	dc400515 	stw	r17,20(sp)
 800b168:	dc000415 	stw	r16,16(sp)
 800b16c:	3823883a 	mov	r17,r7
 800b170:	14000017 	ldw	r16,0(r2)
 800b174:	d9000115 	stw	r4,4(sp)
 800b178:	d9400215 	stw	r5,8(sp)
 800b17c:	d9800315 	stw	r6,12(sp)
 800b180:	80079e40 	call	80079e4 <__locale_charset>
 800b184:	d9800317 	ldw	r6,12(sp)
 800b188:	d9400217 	ldw	r5,8(sp)
 800b18c:	d9000117 	ldw	r4,4(sp)
 800b190:	100f883a 	mov	r7,r2
 800b194:	dc400015 	stw	r17,0(sp)
 800b198:	803ee83a 	callr	r16
 800b19c:	dfc00617 	ldw	ra,24(sp)
 800b1a0:	dc400517 	ldw	r17,20(sp)
 800b1a4:	dc000417 	ldw	r16,16(sp)
 800b1a8:	dec00704 	addi	sp,sp,28
 800b1ac:	f800283a 	ret

0800b1b0 <__udivdi3>:
 800b1b0:	defff504 	addi	sp,sp,-44
 800b1b4:	dcc00415 	stw	r19,16(sp)
 800b1b8:	dc000115 	stw	r16,4(sp)
 800b1bc:	dfc00a15 	stw	ra,40(sp)
 800b1c0:	df000915 	stw	fp,36(sp)
 800b1c4:	ddc00815 	stw	r23,32(sp)
 800b1c8:	dd800715 	stw	r22,28(sp)
 800b1cc:	dd400615 	stw	r21,24(sp)
 800b1d0:	dd000515 	stw	r20,20(sp)
 800b1d4:	dc800315 	stw	r18,12(sp)
 800b1d8:	dc400215 	stw	r17,8(sp)
 800b1dc:	2027883a 	mov	r19,r4
 800b1e0:	2821883a 	mov	r16,r5
 800b1e4:	3800411e 	bne	r7,zero,800b2ec <__udivdi3+0x13c>
 800b1e8:	3023883a 	mov	r17,r6
 800b1ec:	2025883a 	mov	r18,r4
 800b1f0:	2980522e 	bgeu	r5,r6,800b33c <__udivdi3+0x18c>
 800b1f4:	00bfffd4 	movui	r2,65535
 800b1f8:	282d883a 	mov	r22,r5
 800b1fc:	1180a836 	bltu	r2,r6,800b4a0 <__udivdi3+0x2f0>
 800b200:	00803fc4 	movi	r2,255
 800b204:	1185803a 	cmpltu	r2,r2,r6
 800b208:	100490fa 	slli	r2,r2,3
 800b20c:	3086d83a 	srl	r3,r6,r2
 800b210:	01020074 	movhi	r4,2049
 800b214:	2117b604 	addi	r4,r4,24280
 800b218:	20c7883a 	add	r3,r4,r3
 800b21c:	18c00003 	ldbu	r3,0(r3)
 800b220:	1885883a 	add	r2,r3,r2
 800b224:	00c00804 	movi	r3,32
 800b228:	1887c83a 	sub	r3,r3,r2
 800b22c:	18000526 	beq	r3,zero,800b244 <__udivdi3+0x94>
 800b230:	80e0983a 	sll	r16,r16,r3
 800b234:	9884d83a 	srl	r2,r19,r2
 800b238:	30e2983a 	sll	r17,r6,r3
 800b23c:	98e4983a 	sll	r18,r19,r3
 800b240:	142cb03a 	or	r22,r2,r16
 800b244:	882ad43a 	srli	r21,r17,16
 800b248:	b009883a 	mov	r4,r22
 800b24c:	8d3fffcc 	andi	r20,r17,65535
 800b250:	a80b883a 	mov	r5,r21
 800b254:	800bdbc0 	call	800bdbc <__umodsi3>
 800b258:	b009883a 	mov	r4,r22
 800b25c:	a80b883a 	mov	r5,r21
 800b260:	1027883a 	mov	r19,r2
 800b264:	800bd580 	call	800bd58 <__udivsi3>
 800b268:	102d883a 	mov	r22,r2
 800b26c:	9826943a 	slli	r19,r19,16
 800b270:	9004d43a 	srli	r2,r18,16
 800b274:	a5a1383a 	mul	r16,r20,r22
 800b278:	14c4b03a 	or	r2,r2,r19
 800b27c:	1400052e 	bgeu	r2,r16,800b294 <__udivdi3+0xe4>
 800b280:	1445883a 	add	r2,r2,r17
 800b284:	b0ffffc4 	addi	r3,r22,-1
 800b288:	14400136 	bltu	r2,r17,800b290 <__udivdi3+0xe0>
 800b28c:	14012336 	bltu	r2,r16,800b71c <__udivdi3+0x56c>
 800b290:	182d883a 	mov	r22,r3
 800b294:	1421c83a 	sub	r16,r2,r16
 800b298:	a80b883a 	mov	r5,r21
 800b29c:	8009883a 	mov	r4,r16
 800b2a0:	800bdbc0 	call	800bdbc <__umodsi3>
 800b2a4:	1027883a 	mov	r19,r2
 800b2a8:	a80b883a 	mov	r5,r21
 800b2ac:	8009883a 	mov	r4,r16
 800b2b0:	800bd580 	call	800bd58 <__udivsi3>
 800b2b4:	9826943a 	slli	r19,r19,16
 800b2b8:	a0a9383a 	mul	r20,r20,r2
 800b2bc:	94bfffcc 	andi	r18,r18,65535
 800b2c0:	94e4b03a 	or	r18,r18,r19
 800b2c4:	9500052e 	bgeu	r18,r20,800b2dc <__udivdi3+0x12c>
 800b2c8:	8ca5883a 	add	r18,r17,r18
 800b2cc:	10ffffc4 	addi	r3,r2,-1
 800b2d0:	9440f136 	bltu	r18,r17,800b698 <__udivdi3+0x4e8>
 800b2d4:	9500f02e 	bgeu	r18,r20,800b698 <__udivdi3+0x4e8>
 800b2d8:	10bfff84 	addi	r2,r2,-2
 800b2dc:	b00c943a 	slli	r6,r22,16
 800b2e0:	0007883a 	mov	r3,zero
 800b2e4:	3084b03a 	or	r2,r6,r2
 800b2e8:	00005906 	br	800b450 <__udivdi3+0x2a0>
 800b2ec:	29c05636 	bltu	r5,r7,800b448 <__udivdi3+0x298>
 800b2f0:	00bfffd4 	movui	r2,65535
 800b2f4:	11c0622e 	bgeu	r2,r7,800b480 <__udivdi3+0x2d0>
 800b2f8:	00804034 	movhi	r2,256
 800b2fc:	10bfffc4 	addi	r2,r2,-1
 800b300:	11c0ee36 	bltu	r2,r7,800b6bc <__udivdi3+0x50c>
 800b304:	00800404 	movi	r2,16
 800b308:	3886d83a 	srl	r3,r7,r2
 800b30c:	01020074 	movhi	r4,2049
 800b310:	2117b604 	addi	r4,r4,24280
 800b314:	20c7883a 	add	r3,r4,r3
 800b318:	18c00003 	ldbu	r3,0(r3)
 800b31c:	05400804 	movi	r21,32
 800b320:	1885883a 	add	r2,r3,r2
 800b324:	a8abc83a 	sub	r21,r21,r2
 800b328:	a800621e 	bne	r21,zero,800b4b4 <__udivdi3+0x304>
 800b32c:	3c00e936 	bltu	r7,r16,800b6d4 <__udivdi3+0x524>
 800b330:	9985403a 	cmpgeu	r2,r19,r6
 800b334:	0007883a 	mov	r3,zero
 800b338:	00004506 	br	800b450 <__udivdi3+0x2a0>
 800b33c:	3000041e 	bne	r6,zero,800b350 <__udivdi3+0x1a0>
 800b340:	000b883a 	mov	r5,zero
 800b344:	01000044 	movi	r4,1
 800b348:	800bd580 	call	800bd58 <__udivsi3>
 800b34c:	1023883a 	mov	r17,r2
 800b350:	00bfffd4 	movui	r2,65535
 800b354:	14404e2e 	bgeu	r2,r17,800b490 <__udivdi3+0x2e0>
 800b358:	00804034 	movhi	r2,256
 800b35c:	10bfffc4 	addi	r2,r2,-1
 800b360:	1440d836 	bltu	r2,r17,800b6c4 <__udivdi3+0x514>
 800b364:	00800404 	movi	r2,16
 800b368:	8886d83a 	srl	r3,r17,r2
 800b36c:	01020074 	movhi	r4,2049
 800b370:	2117b604 	addi	r4,r4,24280
 800b374:	20c7883a 	add	r3,r4,r3
 800b378:	18c00003 	ldbu	r3,0(r3)
 800b37c:	1885883a 	add	r2,r3,r2
 800b380:	00c00804 	movi	r3,32
 800b384:	1887c83a 	sub	r3,r3,r2
 800b388:	18008f1e 	bne	r3,zero,800b5c8 <__udivdi3+0x418>
 800b38c:	882ad43a 	srli	r21,r17,16
 800b390:	8461c83a 	sub	r16,r16,r17
 800b394:	8d3fffcc 	andi	r20,r17,65535
 800b398:	00c00044 	movi	r3,1
 800b39c:	8009883a 	mov	r4,r16
 800b3a0:	a80b883a 	mov	r5,r21
 800b3a4:	d8c00015 	stw	r3,0(sp)
 800b3a8:	800bdbc0 	call	800bdbc <__umodsi3>
 800b3ac:	8009883a 	mov	r4,r16
 800b3b0:	a80b883a 	mov	r5,r21
 800b3b4:	1027883a 	mov	r19,r2
 800b3b8:	800bd580 	call	800bd58 <__udivsi3>
 800b3bc:	9826943a 	slli	r19,r19,16
 800b3c0:	9008d43a 	srli	r4,r18,16
 800b3c4:	1521383a 	mul	r16,r2,r20
 800b3c8:	102d883a 	mov	r22,r2
 800b3cc:	24c8b03a 	or	r4,r4,r19
 800b3d0:	d8c00017 	ldw	r3,0(sp)
 800b3d4:	2400052e 	bgeu	r4,r16,800b3ec <__udivdi3+0x23c>
 800b3d8:	2449883a 	add	r4,r4,r17
 800b3dc:	b0bfffc4 	addi	r2,r22,-1
 800b3e0:	24400136 	bltu	r4,r17,800b3e8 <__udivdi3+0x238>
 800b3e4:	2400ca36 	bltu	r4,r16,800b710 <__udivdi3+0x560>
 800b3e8:	102d883a 	mov	r22,r2
 800b3ec:	2421c83a 	sub	r16,r4,r16
 800b3f0:	a80b883a 	mov	r5,r21
 800b3f4:	8009883a 	mov	r4,r16
 800b3f8:	d8c00015 	stw	r3,0(sp)
 800b3fc:	800bdbc0 	call	800bdbc <__umodsi3>
 800b400:	1027883a 	mov	r19,r2
 800b404:	a80b883a 	mov	r5,r21
 800b408:	8009883a 	mov	r4,r16
 800b40c:	800bd580 	call	800bd58 <__udivsi3>
 800b410:	9826943a 	slli	r19,r19,16
 800b414:	1529383a 	mul	r20,r2,r20
 800b418:	94bfffcc 	andi	r18,r18,65535
 800b41c:	94e4b03a 	or	r18,r18,r19
 800b420:	d8c00017 	ldw	r3,0(sp)
 800b424:	9500052e 	bgeu	r18,r20,800b43c <__udivdi3+0x28c>
 800b428:	8ca5883a 	add	r18,r17,r18
 800b42c:	113fffc4 	addi	r4,r2,-1
 800b430:	94409736 	bltu	r18,r17,800b690 <__udivdi3+0x4e0>
 800b434:	9500962e 	bgeu	r18,r20,800b690 <__udivdi3+0x4e0>
 800b438:	10bfff84 	addi	r2,r2,-2
 800b43c:	b00c943a 	slli	r6,r22,16
 800b440:	3084b03a 	or	r2,r6,r2
 800b444:	00000206 	br	800b450 <__udivdi3+0x2a0>
 800b448:	0007883a 	mov	r3,zero
 800b44c:	0005883a 	mov	r2,zero
 800b450:	dfc00a17 	ldw	ra,40(sp)
 800b454:	df000917 	ldw	fp,36(sp)
 800b458:	ddc00817 	ldw	r23,32(sp)
 800b45c:	dd800717 	ldw	r22,28(sp)
 800b460:	dd400617 	ldw	r21,24(sp)
 800b464:	dd000517 	ldw	r20,20(sp)
 800b468:	dcc00417 	ldw	r19,16(sp)
 800b46c:	dc800317 	ldw	r18,12(sp)
 800b470:	dc400217 	ldw	r17,8(sp)
 800b474:	dc000117 	ldw	r16,4(sp)
 800b478:	dec00b04 	addi	sp,sp,44
 800b47c:	f800283a 	ret
 800b480:	00803fc4 	movi	r2,255
 800b484:	11c5803a 	cmpltu	r2,r2,r7
 800b488:	100490fa 	slli	r2,r2,3
 800b48c:	003f9e06 	br	800b308 <__alt_data_end+0xf800b308>
 800b490:	00803fc4 	movi	r2,255
 800b494:	1445803a 	cmpltu	r2,r2,r17
 800b498:	100490fa 	slli	r2,r2,3
 800b49c:	003fb206 	br	800b368 <__alt_data_end+0xf800b368>
 800b4a0:	00804034 	movhi	r2,256
 800b4a4:	10bfffc4 	addi	r2,r2,-1
 800b4a8:	11808836 	bltu	r2,r6,800b6cc <__udivdi3+0x51c>
 800b4ac:	00800404 	movi	r2,16
 800b4b0:	003f5606 	br	800b20c <__alt_data_end+0xf800b20c>
 800b4b4:	30aed83a 	srl	r23,r6,r2
 800b4b8:	3d4e983a 	sll	r7,r7,r21
 800b4bc:	80acd83a 	srl	r22,r16,r2
 800b4c0:	9884d83a 	srl	r2,r19,r2
 800b4c4:	3deeb03a 	or	r23,r7,r23
 800b4c8:	b824d43a 	srli	r18,r23,16
 800b4cc:	8560983a 	sll	r16,r16,r21
 800b4d0:	b009883a 	mov	r4,r22
 800b4d4:	900b883a 	mov	r5,r18
 800b4d8:	3568983a 	sll	r20,r6,r21
 800b4dc:	1420b03a 	or	r16,r2,r16
 800b4e0:	800bdbc0 	call	800bdbc <__umodsi3>
 800b4e4:	b009883a 	mov	r4,r22
 800b4e8:	900b883a 	mov	r5,r18
 800b4ec:	1023883a 	mov	r17,r2
 800b4f0:	800bd580 	call	800bd58 <__udivsi3>
 800b4f4:	8808943a 	slli	r4,r17,16
 800b4f8:	bf3fffcc 	andi	fp,r23,65535
 800b4fc:	8006d43a 	srli	r3,r16,16
 800b500:	e0a3383a 	mul	r17,fp,r2
 800b504:	100d883a 	mov	r6,r2
 800b508:	1906b03a 	or	r3,r3,r4
 800b50c:	1c40042e 	bgeu	r3,r17,800b520 <__udivdi3+0x370>
 800b510:	1dc7883a 	add	r3,r3,r23
 800b514:	10bfffc4 	addi	r2,r2,-1
 800b518:	1dc0752e 	bgeu	r3,r23,800b6f0 <__udivdi3+0x540>
 800b51c:	100d883a 	mov	r6,r2
 800b520:	1c63c83a 	sub	r17,r3,r17
 800b524:	900b883a 	mov	r5,r18
 800b528:	8809883a 	mov	r4,r17
 800b52c:	d9800015 	stw	r6,0(sp)
 800b530:	800bdbc0 	call	800bdbc <__umodsi3>
 800b534:	102d883a 	mov	r22,r2
 800b538:	8809883a 	mov	r4,r17
 800b53c:	900b883a 	mov	r5,r18
 800b540:	800bd580 	call	800bd58 <__udivsi3>
 800b544:	b02c943a 	slli	r22,r22,16
 800b548:	e089383a 	mul	r4,fp,r2
 800b54c:	843fffcc 	andi	r16,r16,65535
 800b550:	85a0b03a 	or	r16,r16,r22
 800b554:	d9800017 	ldw	r6,0(sp)
 800b558:	8100042e 	bgeu	r16,r4,800b56c <__udivdi3+0x3bc>
 800b55c:	85e1883a 	add	r16,r16,r23
 800b560:	10ffffc4 	addi	r3,r2,-1
 800b564:	85c05e2e 	bgeu	r16,r23,800b6e0 <__udivdi3+0x530>
 800b568:	1805883a 	mov	r2,r3
 800b56c:	300c943a 	slli	r6,r6,16
 800b570:	a17fffcc 	andi	r5,r20,65535
 800b574:	a028d43a 	srli	r20,r20,16
 800b578:	3084b03a 	or	r2,r6,r2
 800b57c:	10ffffcc 	andi	r3,r2,65535
 800b580:	100cd43a 	srli	r6,r2,16
 800b584:	194f383a 	mul	r7,r3,r5
 800b588:	1d07383a 	mul	r3,r3,r20
 800b58c:	314b383a 	mul	r5,r6,r5
 800b590:	3810d43a 	srli	r8,r7,16
 800b594:	8121c83a 	sub	r16,r16,r4
 800b598:	1947883a 	add	r3,r3,r5
 800b59c:	40c7883a 	add	r3,r8,r3
 800b5a0:	350d383a 	mul	r6,r6,r20
 800b5a4:	1940022e 	bgeu	r3,r5,800b5b0 <__udivdi3+0x400>
 800b5a8:	01000074 	movhi	r4,1
 800b5ac:	310d883a 	add	r6,r6,r4
 800b5b0:	1828d43a 	srli	r20,r3,16
 800b5b4:	a18d883a 	add	r6,r20,r6
 800b5b8:	81803e36 	bltu	r16,r6,800b6b4 <__udivdi3+0x504>
 800b5bc:	81803826 	beq	r16,r6,800b6a0 <__udivdi3+0x4f0>
 800b5c0:	0007883a 	mov	r3,zero
 800b5c4:	003fa206 	br	800b450 <__alt_data_end+0xf800b450>
 800b5c8:	88e2983a 	sll	r17,r17,r3
 800b5cc:	80a8d83a 	srl	r20,r16,r2
 800b5d0:	80e0983a 	sll	r16,r16,r3
 800b5d4:	882ad43a 	srli	r21,r17,16
 800b5d8:	9884d83a 	srl	r2,r19,r2
 800b5dc:	a009883a 	mov	r4,r20
 800b5e0:	a80b883a 	mov	r5,r21
 800b5e4:	142eb03a 	or	r23,r2,r16
 800b5e8:	98e4983a 	sll	r18,r19,r3
 800b5ec:	800bdbc0 	call	800bdbc <__umodsi3>
 800b5f0:	a009883a 	mov	r4,r20
 800b5f4:	a80b883a 	mov	r5,r21
 800b5f8:	1021883a 	mov	r16,r2
 800b5fc:	800bd580 	call	800bd58 <__udivsi3>
 800b600:	1039883a 	mov	fp,r2
 800b604:	8d3fffcc 	andi	r20,r17,65535
 800b608:	8020943a 	slli	r16,r16,16
 800b60c:	b804d43a 	srli	r2,r23,16
 800b610:	a72d383a 	mul	r22,r20,fp
 800b614:	1404b03a 	or	r2,r2,r16
 800b618:	1580062e 	bgeu	r2,r22,800b634 <__udivdi3+0x484>
 800b61c:	1445883a 	add	r2,r2,r17
 800b620:	e0ffffc4 	addi	r3,fp,-1
 800b624:	14403836 	bltu	r2,r17,800b708 <__udivdi3+0x558>
 800b628:	1580372e 	bgeu	r2,r22,800b708 <__udivdi3+0x558>
 800b62c:	e73fff84 	addi	fp,fp,-2
 800b630:	1445883a 	add	r2,r2,r17
 800b634:	15adc83a 	sub	r22,r2,r22
 800b638:	a80b883a 	mov	r5,r21
 800b63c:	b009883a 	mov	r4,r22
 800b640:	800bdbc0 	call	800bdbc <__umodsi3>
 800b644:	1027883a 	mov	r19,r2
 800b648:	b009883a 	mov	r4,r22
 800b64c:	a80b883a 	mov	r5,r21
 800b650:	800bd580 	call	800bd58 <__udivsi3>
 800b654:	9826943a 	slli	r19,r19,16
 800b658:	a0a1383a 	mul	r16,r20,r2
 800b65c:	b93fffcc 	andi	r4,r23,65535
 800b660:	24c8b03a 	or	r4,r4,r19
 800b664:	2400062e 	bgeu	r4,r16,800b680 <__udivdi3+0x4d0>
 800b668:	2449883a 	add	r4,r4,r17
 800b66c:	10ffffc4 	addi	r3,r2,-1
 800b670:	24402336 	bltu	r4,r17,800b700 <__udivdi3+0x550>
 800b674:	2400222e 	bgeu	r4,r16,800b700 <__udivdi3+0x550>
 800b678:	10bfff84 	addi	r2,r2,-2
 800b67c:	2449883a 	add	r4,r4,r17
 800b680:	e038943a 	slli	fp,fp,16
 800b684:	2421c83a 	sub	r16,r4,r16
 800b688:	e086b03a 	or	r3,fp,r2
 800b68c:	003f4306 	br	800b39c <__alt_data_end+0xf800b39c>
 800b690:	2005883a 	mov	r2,r4
 800b694:	003f6906 	br	800b43c <__alt_data_end+0xf800b43c>
 800b698:	1805883a 	mov	r2,r3
 800b69c:	003f0f06 	br	800b2dc <__alt_data_end+0xf800b2dc>
 800b6a0:	1806943a 	slli	r3,r3,16
 800b6a4:	9d66983a 	sll	r19,r19,r21
 800b6a8:	39ffffcc 	andi	r7,r7,65535
 800b6ac:	19c7883a 	add	r3,r3,r7
 800b6b0:	98ffc32e 	bgeu	r19,r3,800b5c0 <__alt_data_end+0xf800b5c0>
 800b6b4:	10bfffc4 	addi	r2,r2,-1
 800b6b8:	003fc106 	br	800b5c0 <__alt_data_end+0xf800b5c0>
 800b6bc:	00800604 	movi	r2,24
 800b6c0:	003f1106 	br	800b308 <__alt_data_end+0xf800b308>
 800b6c4:	00800604 	movi	r2,24
 800b6c8:	003f2706 	br	800b368 <__alt_data_end+0xf800b368>
 800b6cc:	00800604 	movi	r2,24
 800b6d0:	003ece06 	br	800b20c <__alt_data_end+0xf800b20c>
 800b6d4:	0007883a 	mov	r3,zero
 800b6d8:	00800044 	movi	r2,1
 800b6dc:	003f5c06 	br	800b450 <__alt_data_end+0xf800b450>
 800b6e0:	813fa12e 	bgeu	r16,r4,800b568 <__alt_data_end+0xf800b568>
 800b6e4:	10bfff84 	addi	r2,r2,-2
 800b6e8:	85e1883a 	add	r16,r16,r23
 800b6ec:	003f9f06 	br	800b56c <__alt_data_end+0xf800b56c>
 800b6f0:	1c7f8a2e 	bgeu	r3,r17,800b51c <__alt_data_end+0xf800b51c>
 800b6f4:	31bfff84 	addi	r6,r6,-2
 800b6f8:	1dc7883a 	add	r3,r3,r23
 800b6fc:	003f8806 	br	800b520 <__alt_data_end+0xf800b520>
 800b700:	1805883a 	mov	r2,r3
 800b704:	003fde06 	br	800b680 <__alt_data_end+0xf800b680>
 800b708:	1839883a 	mov	fp,r3
 800b70c:	003fc906 	br	800b634 <__alt_data_end+0xf800b634>
 800b710:	b5bfff84 	addi	r22,r22,-2
 800b714:	2449883a 	add	r4,r4,r17
 800b718:	003f3406 	br	800b3ec <__alt_data_end+0xf800b3ec>
 800b71c:	b5bfff84 	addi	r22,r22,-2
 800b720:	1445883a 	add	r2,r2,r17
 800b724:	003edb06 	br	800b294 <__alt_data_end+0xf800b294>

0800b728 <__umoddi3>:
 800b728:	defff404 	addi	sp,sp,-48
 800b72c:	df000a15 	stw	fp,40(sp)
 800b730:	dc400315 	stw	r17,12(sp)
 800b734:	dc000215 	stw	r16,8(sp)
 800b738:	dfc00b15 	stw	ra,44(sp)
 800b73c:	ddc00915 	stw	r23,36(sp)
 800b740:	dd800815 	stw	r22,32(sp)
 800b744:	dd400715 	stw	r21,28(sp)
 800b748:	dd000615 	stw	r20,24(sp)
 800b74c:	dcc00515 	stw	r19,20(sp)
 800b750:	dc800415 	stw	r18,16(sp)
 800b754:	2021883a 	mov	r16,r4
 800b758:	2823883a 	mov	r17,r5
 800b75c:	2839883a 	mov	fp,r5
 800b760:	38003c1e 	bne	r7,zero,800b854 <__umoddi3+0x12c>
 800b764:	3027883a 	mov	r19,r6
 800b768:	2029883a 	mov	r20,r4
 800b76c:	2980512e 	bgeu	r5,r6,800b8b4 <__umoddi3+0x18c>
 800b770:	00bfffd4 	movui	r2,65535
 800b774:	11809a36 	bltu	r2,r6,800b9e0 <__umoddi3+0x2b8>
 800b778:	01003fc4 	movi	r4,255
 800b77c:	2189803a 	cmpltu	r4,r4,r6
 800b780:	200890fa 	slli	r4,r4,3
 800b784:	3104d83a 	srl	r2,r6,r4
 800b788:	00c20074 	movhi	r3,2049
 800b78c:	18d7b604 	addi	r3,r3,24280
 800b790:	1885883a 	add	r2,r3,r2
 800b794:	10c00003 	ldbu	r3,0(r2)
 800b798:	00800804 	movi	r2,32
 800b79c:	1909883a 	add	r4,r3,r4
 800b7a0:	1125c83a 	sub	r18,r2,r4
 800b7a4:	90000526 	beq	r18,zero,800b7bc <__umoddi3+0x94>
 800b7a8:	8ca2983a 	sll	r17,r17,r18
 800b7ac:	8108d83a 	srl	r4,r16,r4
 800b7b0:	34a6983a 	sll	r19,r6,r18
 800b7b4:	84a8983a 	sll	r20,r16,r18
 800b7b8:	2478b03a 	or	fp,r4,r17
 800b7bc:	982ed43a 	srli	r23,r19,16
 800b7c0:	e009883a 	mov	r4,fp
 800b7c4:	9dbfffcc 	andi	r22,r19,65535
 800b7c8:	b80b883a 	mov	r5,r23
 800b7cc:	800bdbc0 	call	800bdbc <__umodsi3>
 800b7d0:	e009883a 	mov	r4,fp
 800b7d4:	b80b883a 	mov	r5,r23
 800b7d8:	102b883a 	mov	r21,r2
 800b7dc:	800bd580 	call	800bd58 <__udivsi3>
 800b7e0:	a806943a 	slli	r3,r21,16
 800b7e4:	a008d43a 	srli	r4,r20,16
 800b7e8:	b085383a 	mul	r2,r22,r2
 800b7ec:	20c8b03a 	or	r4,r4,r3
 800b7f0:	2080032e 	bgeu	r4,r2,800b800 <__umoddi3+0xd8>
 800b7f4:	24c9883a 	add	r4,r4,r19
 800b7f8:	24c00136 	bltu	r4,r19,800b800 <__umoddi3+0xd8>
 800b7fc:	20811036 	bltu	r4,r2,800bc40 <__umoddi3+0x518>
 800b800:	20abc83a 	sub	r21,r4,r2
 800b804:	b80b883a 	mov	r5,r23
 800b808:	a809883a 	mov	r4,r21
 800b80c:	800bdbc0 	call	800bdbc <__umodsi3>
 800b810:	1023883a 	mov	r17,r2
 800b814:	b80b883a 	mov	r5,r23
 800b818:	a809883a 	mov	r4,r21
 800b81c:	800bd580 	call	800bd58 <__udivsi3>
 800b820:	8822943a 	slli	r17,r17,16
 800b824:	b085383a 	mul	r2,r22,r2
 800b828:	a0ffffcc 	andi	r3,r20,65535
 800b82c:	1c46b03a 	or	r3,r3,r17
 800b830:	1880042e 	bgeu	r3,r2,800b844 <__umoddi3+0x11c>
 800b834:	1cc7883a 	add	r3,r3,r19
 800b838:	1cc00236 	bltu	r3,r19,800b844 <__umoddi3+0x11c>
 800b83c:	1880012e 	bgeu	r3,r2,800b844 <__umoddi3+0x11c>
 800b840:	1cc7883a 	add	r3,r3,r19
 800b844:	1885c83a 	sub	r2,r3,r2
 800b848:	1484d83a 	srl	r2,r2,r18
 800b84c:	0007883a 	mov	r3,zero
 800b850:	00004f06 	br	800b990 <__umoddi3+0x268>
 800b854:	29c04c36 	bltu	r5,r7,800b988 <__umoddi3+0x260>
 800b858:	00bfffd4 	movui	r2,65535
 800b85c:	11c0582e 	bgeu	r2,r7,800b9c0 <__umoddi3+0x298>
 800b860:	00804034 	movhi	r2,256
 800b864:	10bfffc4 	addi	r2,r2,-1
 800b868:	11c0e736 	bltu	r2,r7,800bc08 <__umoddi3+0x4e0>
 800b86c:	01000404 	movi	r4,16
 800b870:	3904d83a 	srl	r2,r7,r4
 800b874:	00c20074 	movhi	r3,2049
 800b878:	18d7b604 	addi	r3,r3,24280
 800b87c:	1885883a 	add	r2,r3,r2
 800b880:	14c00003 	ldbu	r19,0(r2)
 800b884:	00c00804 	movi	r3,32
 800b888:	9927883a 	add	r19,r19,r4
 800b88c:	1ce9c83a 	sub	r20,r3,r19
 800b890:	a000581e 	bne	r20,zero,800b9f4 <__umoddi3+0x2cc>
 800b894:	3c400136 	bltu	r7,r17,800b89c <__umoddi3+0x174>
 800b898:	8180eb36 	bltu	r16,r6,800bc48 <__umoddi3+0x520>
 800b89c:	8185c83a 	sub	r2,r16,r6
 800b8a0:	89e3c83a 	sub	r17,r17,r7
 800b8a4:	8089803a 	cmpltu	r4,r16,r2
 800b8a8:	8939c83a 	sub	fp,r17,r4
 800b8ac:	e007883a 	mov	r3,fp
 800b8b0:	00003706 	br	800b990 <__umoddi3+0x268>
 800b8b4:	3000041e 	bne	r6,zero,800b8c8 <__umoddi3+0x1a0>
 800b8b8:	000b883a 	mov	r5,zero
 800b8bc:	01000044 	movi	r4,1
 800b8c0:	800bd580 	call	800bd58 <__udivsi3>
 800b8c4:	1027883a 	mov	r19,r2
 800b8c8:	00bfffd4 	movui	r2,65535
 800b8cc:	14c0402e 	bgeu	r2,r19,800b9d0 <__umoddi3+0x2a8>
 800b8d0:	00804034 	movhi	r2,256
 800b8d4:	10bfffc4 	addi	r2,r2,-1
 800b8d8:	14c0cd36 	bltu	r2,r19,800bc10 <__umoddi3+0x4e8>
 800b8dc:	00800404 	movi	r2,16
 800b8e0:	9886d83a 	srl	r3,r19,r2
 800b8e4:	01020074 	movhi	r4,2049
 800b8e8:	2117b604 	addi	r4,r4,24280
 800b8ec:	20c7883a 	add	r3,r4,r3
 800b8f0:	18c00003 	ldbu	r3,0(r3)
 800b8f4:	1887883a 	add	r3,r3,r2
 800b8f8:	00800804 	movi	r2,32
 800b8fc:	10e5c83a 	sub	r18,r2,r3
 800b900:	9000901e 	bne	r18,zero,800bb44 <__umoddi3+0x41c>
 800b904:	982cd43a 	srli	r22,r19,16
 800b908:	8ce3c83a 	sub	r17,r17,r19
 800b90c:	9d7fffcc 	andi	r21,r19,65535
 800b910:	b00b883a 	mov	r5,r22
 800b914:	8809883a 	mov	r4,r17
 800b918:	800bdbc0 	call	800bdbc <__umodsi3>
 800b91c:	8809883a 	mov	r4,r17
 800b920:	b00b883a 	mov	r5,r22
 800b924:	1021883a 	mov	r16,r2
 800b928:	800bd580 	call	800bd58 <__udivsi3>
 800b92c:	8006943a 	slli	r3,r16,16
 800b930:	a008d43a 	srli	r4,r20,16
 800b934:	1545383a 	mul	r2,r2,r21
 800b938:	20c8b03a 	or	r4,r4,r3
 800b93c:	2080042e 	bgeu	r4,r2,800b950 <__umoddi3+0x228>
 800b940:	24c9883a 	add	r4,r4,r19
 800b944:	24c00236 	bltu	r4,r19,800b950 <__umoddi3+0x228>
 800b948:	2080012e 	bgeu	r4,r2,800b950 <__umoddi3+0x228>
 800b94c:	24c9883a 	add	r4,r4,r19
 800b950:	20a1c83a 	sub	r16,r4,r2
 800b954:	b00b883a 	mov	r5,r22
 800b958:	8009883a 	mov	r4,r16
 800b95c:	800bdbc0 	call	800bdbc <__umodsi3>
 800b960:	1023883a 	mov	r17,r2
 800b964:	b00b883a 	mov	r5,r22
 800b968:	8009883a 	mov	r4,r16
 800b96c:	800bd580 	call	800bd58 <__udivsi3>
 800b970:	8822943a 	slli	r17,r17,16
 800b974:	1545383a 	mul	r2,r2,r21
 800b978:	a53fffcc 	andi	r20,r20,65535
 800b97c:	a446b03a 	or	r3,r20,r17
 800b980:	18bfb02e 	bgeu	r3,r2,800b844 <__alt_data_end+0xf800b844>
 800b984:	003fab06 	br	800b834 <__alt_data_end+0xf800b834>
 800b988:	2005883a 	mov	r2,r4
 800b98c:	2807883a 	mov	r3,r5
 800b990:	dfc00b17 	ldw	ra,44(sp)
 800b994:	df000a17 	ldw	fp,40(sp)
 800b998:	ddc00917 	ldw	r23,36(sp)
 800b99c:	dd800817 	ldw	r22,32(sp)
 800b9a0:	dd400717 	ldw	r21,28(sp)
 800b9a4:	dd000617 	ldw	r20,24(sp)
 800b9a8:	dcc00517 	ldw	r19,20(sp)
 800b9ac:	dc800417 	ldw	r18,16(sp)
 800b9b0:	dc400317 	ldw	r17,12(sp)
 800b9b4:	dc000217 	ldw	r16,8(sp)
 800b9b8:	dec00c04 	addi	sp,sp,48
 800b9bc:	f800283a 	ret
 800b9c0:	04c03fc4 	movi	r19,255
 800b9c4:	99c9803a 	cmpltu	r4,r19,r7
 800b9c8:	200890fa 	slli	r4,r4,3
 800b9cc:	003fa806 	br	800b870 <__alt_data_end+0xf800b870>
 800b9d0:	00803fc4 	movi	r2,255
 800b9d4:	14c5803a 	cmpltu	r2,r2,r19
 800b9d8:	100490fa 	slli	r2,r2,3
 800b9dc:	003fc006 	br	800b8e0 <__alt_data_end+0xf800b8e0>
 800b9e0:	00804034 	movhi	r2,256
 800b9e4:	10bfffc4 	addi	r2,r2,-1
 800b9e8:	11808b36 	bltu	r2,r6,800bc18 <__umoddi3+0x4f0>
 800b9ec:	01000404 	movi	r4,16
 800b9f0:	003f6406 	br	800b784 <__alt_data_end+0xf800b784>
 800b9f4:	34c4d83a 	srl	r2,r6,r19
 800b9f8:	3d0e983a 	sll	r7,r7,r20
 800b9fc:	8cf8d83a 	srl	fp,r17,r19
 800ba00:	8d10983a 	sll	r8,r17,r20
 800ba04:	38aab03a 	or	r21,r7,r2
 800ba08:	a82cd43a 	srli	r22,r21,16
 800ba0c:	84e2d83a 	srl	r17,r16,r19
 800ba10:	e009883a 	mov	r4,fp
 800ba14:	b00b883a 	mov	r5,r22
 800ba18:	8a22b03a 	or	r17,r17,r8
 800ba1c:	3524983a 	sll	r18,r6,r20
 800ba20:	800bdbc0 	call	800bdbc <__umodsi3>
 800ba24:	e009883a 	mov	r4,fp
 800ba28:	b00b883a 	mov	r5,r22
 800ba2c:	102f883a 	mov	r23,r2
 800ba30:	800bd580 	call	800bd58 <__udivsi3>
 800ba34:	100d883a 	mov	r6,r2
 800ba38:	b808943a 	slli	r4,r23,16
 800ba3c:	aa3fffcc 	andi	r8,r21,65535
 800ba40:	8804d43a 	srli	r2,r17,16
 800ba44:	41af383a 	mul	r23,r8,r6
 800ba48:	8520983a 	sll	r16,r16,r20
 800ba4c:	1104b03a 	or	r2,r2,r4
 800ba50:	15c0042e 	bgeu	r2,r23,800ba64 <__umoddi3+0x33c>
 800ba54:	1545883a 	add	r2,r2,r21
 800ba58:	30ffffc4 	addi	r3,r6,-1
 800ba5c:	1540742e 	bgeu	r2,r21,800bc30 <__umoddi3+0x508>
 800ba60:	180d883a 	mov	r6,r3
 800ba64:	15efc83a 	sub	r23,r2,r23
 800ba68:	b00b883a 	mov	r5,r22
 800ba6c:	b809883a 	mov	r4,r23
 800ba70:	d9800115 	stw	r6,4(sp)
 800ba74:	da000015 	stw	r8,0(sp)
 800ba78:	800bdbc0 	call	800bdbc <__umodsi3>
 800ba7c:	b00b883a 	mov	r5,r22
 800ba80:	b809883a 	mov	r4,r23
 800ba84:	1039883a 	mov	fp,r2
 800ba88:	800bd580 	call	800bd58 <__udivsi3>
 800ba8c:	da000017 	ldw	r8,0(sp)
 800ba90:	e038943a 	slli	fp,fp,16
 800ba94:	100b883a 	mov	r5,r2
 800ba98:	4089383a 	mul	r4,r8,r2
 800ba9c:	8a3fffcc 	andi	r8,r17,65535
 800baa0:	4710b03a 	or	r8,r8,fp
 800baa4:	d9800117 	ldw	r6,4(sp)
 800baa8:	4100042e 	bgeu	r8,r4,800babc <__umoddi3+0x394>
 800baac:	4551883a 	add	r8,r8,r21
 800bab0:	10bfffc4 	addi	r2,r2,-1
 800bab4:	45405a2e 	bgeu	r8,r21,800bc20 <__umoddi3+0x4f8>
 800bab8:	100b883a 	mov	r5,r2
 800babc:	300c943a 	slli	r6,r6,16
 800bac0:	91ffffcc 	andi	r7,r18,65535
 800bac4:	9004d43a 	srli	r2,r18,16
 800bac8:	314cb03a 	or	r6,r6,r5
 800bacc:	317fffcc 	andi	r5,r6,65535
 800bad0:	300cd43a 	srli	r6,r6,16
 800bad4:	29d3383a 	mul	r9,r5,r7
 800bad8:	288b383a 	mul	r5,r5,r2
 800badc:	31cf383a 	mul	r7,r6,r7
 800bae0:	4806d43a 	srli	r3,r9,16
 800bae4:	4111c83a 	sub	r8,r8,r4
 800bae8:	29cb883a 	add	r5,r5,r7
 800baec:	194b883a 	add	r5,r3,r5
 800baf0:	3085383a 	mul	r2,r6,r2
 800baf4:	29c0022e 	bgeu	r5,r7,800bb00 <__umoddi3+0x3d8>
 800baf8:	00c00074 	movhi	r3,1
 800bafc:	10c5883a 	add	r2,r2,r3
 800bb00:	2808d43a 	srli	r4,r5,16
 800bb04:	280a943a 	slli	r5,r5,16
 800bb08:	4a7fffcc 	andi	r9,r9,65535
 800bb0c:	2085883a 	add	r2,r4,r2
 800bb10:	2a4b883a 	add	r5,r5,r9
 800bb14:	40803636 	bltu	r8,r2,800bbf0 <__umoddi3+0x4c8>
 800bb18:	40804d26 	beq	r8,r2,800bc50 <__umoddi3+0x528>
 800bb1c:	4089c83a 	sub	r4,r8,r2
 800bb20:	280f883a 	mov	r7,r5
 800bb24:	81cfc83a 	sub	r7,r16,r7
 800bb28:	81c7803a 	cmpltu	r3,r16,r7
 800bb2c:	20c7c83a 	sub	r3,r4,r3
 800bb30:	1cc4983a 	sll	r2,r3,r19
 800bb34:	3d0ed83a 	srl	r7,r7,r20
 800bb38:	1d06d83a 	srl	r3,r3,r20
 800bb3c:	11c4b03a 	or	r2,r2,r7
 800bb40:	003f9306 	br	800b990 <__alt_data_end+0xf800b990>
 800bb44:	9ca6983a 	sll	r19,r19,r18
 800bb48:	88e8d83a 	srl	r20,r17,r3
 800bb4c:	80c4d83a 	srl	r2,r16,r3
 800bb50:	982cd43a 	srli	r22,r19,16
 800bb54:	8ca2983a 	sll	r17,r17,r18
 800bb58:	a009883a 	mov	r4,r20
 800bb5c:	b00b883a 	mov	r5,r22
 800bb60:	1478b03a 	or	fp,r2,r17
 800bb64:	800bdbc0 	call	800bdbc <__umodsi3>
 800bb68:	a009883a 	mov	r4,r20
 800bb6c:	b00b883a 	mov	r5,r22
 800bb70:	1023883a 	mov	r17,r2
 800bb74:	800bd580 	call	800bd58 <__udivsi3>
 800bb78:	9d7fffcc 	andi	r21,r19,65535
 800bb7c:	880a943a 	slli	r5,r17,16
 800bb80:	e008d43a 	srli	r4,fp,16
 800bb84:	a885383a 	mul	r2,r21,r2
 800bb88:	84a8983a 	sll	r20,r16,r18
 800bb8c:	2148b03a 	or	r4,r4,r5
 800bb90:	2080042e 	bgeu	r4,r2,800bba4 <__umoddi3+0x47c>
 800bb94:	24c9883a 	add	r4,r4,r19
 800bb98:	24c00236 	bltu	r4,r19,800bba4 <__umoddi3+0x47c>
 800bb9c:	2080012e 	bgeu	r4,r2,800bba4 <__umoddi3+0x47c>
 800bba0:	24c9883a 	add	r4,r4,r19
 800bba4:	20a3c83a 	sub	r17,r4,r2
 800bba8:	b00b883a 	mov	r5,r22
 800bbac:	8809883a 	mov	r4,r17
 800bbb0:	800bdbc0 	call	800bdbc <__umodsi3>
 800bbb4:	102f883a 	mov	r23,r2
 800bbb8:	8809883a 	mov	r4,r17
 800bbbc:	b00b883a 	mov	r5,r22
 800bbc0:	800bd580 	call	800bd58 <__udivsi3>
 800bbc4:	b82e943a 	slli	r23,r23,16
 800bbc8:	a885383a 	mul	r2,r21,r2
 800bbcc:	e13fffcc 	andi	r4,fp,65535
 800bbd0:	25c8b03a 	or	r4,r4,r23
 800bbd4:	2080042e 	bgeu	r4,r2,800bbe8 <__umoddi3+0x4c0>
 800bbd8:	24c9883a 	add	r4,r4,r19
 800bbdc:	24c00236 	bltu	r4,r19,800bbe8 <__umoddi3+0x4c0>
 800bbe0:	2080012e 	bgeu	r4,r2,800bbe8 <__umoddi3+0x4c0>
 800bbe4:	24c9883a 	add	r4,r4,r19
 800bbe8:	20a3c83a 	sub	r17,r4,r2
 800bbec:	003f4806 	br	800b910 <__alt_data_end+0xf800b910>
 800bbf0:	2c8fc83a 	sub	r7,r5,r18
 800bbf4:	1545c83a 	sub	r2,r2,r21
 800bbf8:	29cb803a 	cmpltu	r5,r5,r7
 800bbfc:	1145c83a 	sub	r2,r2,r5
 800bc00:	4089c83a 	sub	r4,r8,r2
 800bc04:	003fc706 	br	800bb24 <__alt_data_end+0xf800bb24>
 800bc08:	01000604 	movi	r4,24
 800bc0c:	003f1806 	br	800b870 <__alt_data_end+0xf800b870>
 800bc10:	00800604 	movi	r2,24
 800bc14:	003f3206 	br	800b8e0 <__alt_data_end+0xf800b8e0>
 800bc18:	01000604 	movi	r4,24
 800bc1c:	003ed906 	br	800b784 <__alt_data_end+0xf800b784>
 800bc20:	413fa52e 	bgeu	r8,r4,800bab8 <__alt_data_end+0xf800bab8>
 800bc24:	297fff84 	addi	r5,r5,-2
 800bc28:	4551883a 	add	r8,r8,r21
 800bc2c:	003fa306 	br	800babc <__alt_data_end+0xf800babc>
 800bc30:	15ff8b2e 	bgeu	r2,r23,800ba60 <__alt_data_end+0xf800ba60>
 800bc34:	31bfff84 	addi	r6,r6,-2
 800bc38:	1545883a 	add	r2,r2,r21
 800bc3c:	003f8906 	br	800ba64 <__alt_data_end+0xf800ba64>
 800bc40:	24c9883a 	add	r4,r4,r19
 800bc44:	003eee06 	br	800b800 <__alt_data_end+0xf800b800>
 800bc48:	8005883a 	mov	r2,r16
 800bc4c:	003f1706 	br	800b8ac <__alt_data_end+0xf800b8ac>
 800bc50:	817fe736 	bltu	r16,r5,800bbf0 <__alt_data_end+0xf800bbf0>
 800bc54:	280f883a 	mov	r7,r5
 800bc58:	0009883a 	mov	r4,zero
 800bc5c:	003fb106 	br	800bb24 <__alt_data_end+0xf800bb24>

0800bc60 <__divsi3>:
 800bc60:	20001b16 	blt	r4,zero,800bcd0 <__divsi3+0x70>
 800bc64:	000f883a 	mov	r7,zero
 800bc68:	28001616 	blt	r5,zero,800bcc4 <__divsi3+0x64>
 800bc6c:	200d883a 	mov	r6,r4
 800bc70:	29001a2e 	bgeu	r5,r4,800bcdc <__divsi3+0x7c>
 800bc74:	00800804 	movi	r2,32
 800bc78:	00c00044 	movi	r3,1
 800bc7c:	00000106 	br	800bc84 <__divsi3+0x24>
 800bc80:	10000d26 	beq	r2,zero,800bcb8 <__divsi3+0x58>
 800bc84:	294b883a 	add	r5,r5,r5
 800bc88:	10bfffc4 	addi	r2,r2,-1
 800bc8c:	18c7883a 	add	r3,r3,r3
 800bc90:	293ffb36 	bltu	r5,r4,800bc80 <__alt_data_end+0xf800bc80>
 800bc94:	0005883a 	mov	r2,zero
 800bc98:	18000726 	beq	r3,zero,800bcb8 <__divsi3+0x58>
 800bc9c:	0005883a 	mov	r2,zero
 800bca0:	31400236 	bltu	r6,r5,800bcac <__divsi3+0x4c>
 800bca4:	314dc83a 	sub	r6,r6,r5
 800bca8:	10c4b03a 	or	r2,r2,r3
 800bcac:	1806d07a 	srli	r3,r3,1
 800bcb0:	280ad07a 	srli	r5,r5,1
 800bcb4:	183ffa1e 	bne	r3,zero,800bca0 <__alt_data_end+0xf800bca0>
 800bcb8:	38000126 	beq	r7,zero,800bcc0 <__divsi3+0x60>
 800bcbc:	0085c83a 	sub	r2,zero,r2
 800bcc0:	f800283a 	ret
 800bcc4:	014bc83a 	sub	r5,zero,r5
 800bcc8:	39c0005c 	xori	r7,r7,1
 800bccc:	003fe706 	br	800bc6c <__alt_data_end+0xf800bc6c>
 800bcd0:	0109c83a 	sub	r4,zero,r4
 800bcd4:	01c00044 	movi	r7,1
 800bcd8:	003fe306 	br	800bc68 <__alt_data_end+0xf800bc68>
 800bcdc:	00c00044 	movi	r3,1
 800bce0:	003fee06 	br	800bc9c <__alt_data_end+0xf800bc9c>

0800bce4 <__modsi3>:
 800bce4:	20001716 	blt	r4,zero,800bd44 <__modsi3+0x60>
 800bce8:	000f883a 	mov	r7,zero
 800bcec:	2005883a 	mov	r2,r4
 800bcf0:	28001216 	blt	r5,zero,800bd3c <__modsi3+0x58>
 800bcf4:	2900162e 	bgeu	r5,r4,800bd50 <__modsi3+0x6c>
 800bcf8:	01800804 	movi	r6,32
 800bcfc:	00c00044 	movi	r3,1
 800bd00:	00000106 	br	800bd08 <__modsi3+0x24>
 800bd04:	30000a26 	beq	r6,zero,800bd30 <__modsi3+0x4c>
 800bd08:	294b883a 	add	r5,r5,r5
 800bd0c:	31bfffc4 	addi	r6,r6,-1
 800bd10:	18c7883a 	add	r3,r3,r3
 800bd14:	293ffb36 	bltu	r5,r4,800bd04 <__alt_data_end+0xf800bd04>
 800bd18:	18000526 	beq	r3,zero,800bd30 <__modsi3+0x4c>
 800bd1c:	1806d07a 	srli	r3,r3,1
 800bd20:	11400136 	bltu	r2,r5,800bd28 <__modsi3+0x44>
 800bd24:	1145c83a 	sub	r2,r2,r5
 800bd28:	280ad07a 	srli	r5,r5,1
 800bd2c:	183ffb1e 	bne	r3,zero,800bd1c <__alt_data_end+0xf800bd1c>
 800bd30:	38000126 	beq	r7,zero,800bd38 <__modsi3+0x54>
 800bd34:	0085c83a 	sub	r2,zero,r2
 800bd38:	f800283a 	ret
 800bd3c:	014bc83a 	sub	r5,zero,r5
 800bd40:	003fec06 	br	800bcf4 <__alt_data_end+0xf800bcf4>
 800bd44:	0109c83a 	sub	r4,zero,r4
 800bd48:	01c00044 	movi	r7,1
 800bd4c:	003fe706 	br	800bcec <__alt_data_end+0xf800bcec>
 800bd50:	00c00044 	movi	r3,1
 800bd54:	003ff106 	br	800bd1c <__alt_data_end+0xf800bd1c>

0800bd58 <__udivsi3>:
 800bd58:	200d883a 	mov	r6,r4
 800bd5c:	2900152e 	bgeu	r5,r4,800bdb4 <__udivsi3+0x5c>
 800bd60:	28001416 	blt	r5,zero,800bdb4 <__udivsi3+0x5c>
 800bd64:	00800804 	movi	r2,32
 800bd68:	00c00044 	movi	r3,1
 800bd6c:	00000206 	br	800bd78 <__udivsi3+0x20>
 800bd70:	10000e26 	beq	r2,zero,800bdac <__udivsi3+0x54>
 800bd74:	28000516 	blt	r5,zero,800bd8c <__udivsi3+0x34>
 800bd78:	294b883a 	add	r5,r5,r5
 800bd7c:	10bfffc4 	addi	r2,r2,-1
 800bd80:	18c7883a 	add	r3,r3,r3
 800bd84:	293ffa36 	bltu	r5,r4,800bd70 <__alt_data_end+0xf800bd70>
 800bd88:	18000826 	beq	r3,zero,800bdac <__udivsi3+0x54>
 800bd8c:	0005883a 	mov	r2,zero
 800bd90:	31400236 	bltu	r6,r5,800bd9c <__udivsi3+0x44>
 800bd94:	314dc83a 	sub	r6,r6,r5
 800bd98:	10c4b03a 	or	r2,r2,r3
 800bd9c:	1806d07a 	srli	r3,r3,1
 800bda0:	280ad07a 	srli	r5,r5,1
 800bda4:	183ffa1e 	bne	r3,zero,800bd90 <__alt_data_end+0xf800bd90>
 800bda8:	f800283a 	ret
 800bdac:	0005883a 	mov	r2,zero
 800bdb0:	f800283a 	ret
 800bdb4:	00c00044 	movi	r3,1
 800bdb8:	003ff406 	br	800bd8c <__alt_data_end+0xf800bd8c>

0800bdbc <__umodsi3>:
 800bdbc:	2005883a 	mov	r2,r4
 800bdc0:	2900122e 	bgeu	r5,r4,800be0c <__umodsi3+0x50>
 800bdc4:	28001116 	blt	r5,zero,800be0c <__umodsi3+0x50>
 800bdc8:	01800804 	movi	r6,32
 800bdcc:	00c00044 	movi	r3,1
 800bdd0:	00000206 	br	800bddc <__umodsi3+0x20>
 800bdd4:	30000c26 	beq	r6,zero,800be08 <__umodsi3+0x4c>
 800bdd8:	28000516 	blt	r5,zero,800bdf0 <__umodsi3+0x34>
 800bddc:	294b883a 	add	r5,r5,r5
 800bde0:	31bfffc4 	addi	r6,r6,-1
 800bde4:	18c7883a 	add	r3,r3,r3
 800bde8:	293ffa36 	bltu	r5,r4,800bdd4 <__alt_data_end+0xf800bdd4>
 800bdec:	18000626 	beq	r3,zero,800be08 <__umodsi3+0x4c>
 800bdf0:	1806d07a 	srli	r3,r3,1
 800bdf4:	11400136 	bltu	r2,r5,800bdfc <__umodsi3+0x40>
 800bdf8:	1145c83a 	sub	r2,r2,r5
 800bdfc:	280ad07a 	srli	r5,r5,1
 800be00:	183ffb1e 	bne	r3,zero,800bdf0 <__alt_data_end+0xf800bdf0>
 800be04:	f800283a 	ret
 800be08:	f800283a 	ret
 800be0c:	00c00044 	movi	r3,1
 800be10:	003ff706 	br	800bdf0 <__alt_data_end+0xf800bdf0>

0800be14 <__adddf3>:
 800be14:	02c00434 	movhi	r11,16
 800be18:	5affffc4 	addi	r11,r11,-1
 800be1c:	2806d7fa 	srli	r3,r5,31
 800be20:	2ad4703a 	and	r10,r5,r11
 800be24:	3ad2703a 	and	r9,r7,r11
 800be28:	3804d53a 	srli	r2,r7,20
 800be2c:	3018d77a 	srli	r12,r6,29
 800be30:	280ad53a 	srli	r5,r5,20
 800be34:	501490fa 	slli	r10,r10,3
 800be38:	2010d77a 	srli	r8,r4,29
 800be3c:	481290fa 	slli	r9,r9,3
 800be40:	380ed7fa 	srli	r7,r7,31
 800be44:	defffb04 	addi	sp,sp,-20
 800be48:	dc800215 	stw	r18,8(sp)
 800be4c:	dc400115 	stw	r17,4(sp)
 800be50:	dc000015 	stw	r16,0(sp)
 800be54:	dfc00415 	stw	ra,16(sp)
 800be58:	dcc00315 	stw	r19,12(sp)
 800be5c:	1c803fcc 	andi	r18,r3,255
 800be60:	2c01ffcc 	andi	r16,r5,2047
 800be64:	5210b03a 	or	r8,r10,r8
 800be68:	202290fa 	slli	r17,r4,3
 800be6c:	1081ffcc 	andi	r2,r2,2047
 800be70:	4b12b03a 	or	r9,r9,r12
 800be74:	300c90fa 	slli	r6,r6,3
 800be78:	91c07526 	beq	r18,r7,800c050 <__adddf3+0x23c>
 800be7c:	8087c83a 	sub	r3,r16,r2
 800be80:	00c0ab0e 	bge	zero,r3,800c130 <__adddf3+0x31c>
 800be84:	10002a1e 	bne	r2,zero,800bf30 <__adddf3+0x11c>
 800be88:	4984b03a 	or	r2,r9,r6
 800be8c:	1000961e 	bne	r2,zero,800c0e8 <__adddf3+0x2d4>
 800be90:	888001cc 	andi	r2,r17,7
 800be94:	10000726 	beq	r2,zero,800beb4 <__adddf3+0xa0>
 800be98:	888003cc 	andi	r2,r17,15
 800be9c:	00c00104 	movi	r3,4
 800bea0:	10c00426 	beq	r2,r3,800beb4 <__adddf3+0xa0>
 800bea4:	88c7883a 	add	r3,r17,r3
 800bea8:	1c63803a 	cmpltu	r17,r3,r17
 800beac:	4451883a 	add	r8,r8,r17
 800beb0:	1823883a 	mov	r17,r3
 800beb4:	4080202c 	andhi	r2,r8,128
 800beb8:	10005926 	beq	r2,zero,800c020 <__adddf3+0x20c>
 800bebc:	84000044 	addi	r16,r16,1
 800bec0:	0081ffc4 	movi	r2,2047
 800bec4:	8080ba26 	beq	r16,r2,800c1b0 <__adddf3+0x39c>
 800bec8:	00bfe034 	movhi	r2,65408
 800becc:	10bfffc4 	addi	r2,r2,-1
 800bed0:	4090703a 	and	r8,r8,r2
 800bed4:	4004977a 	slli	r2,r8,29
 800bed8:	4010927a 	slli	r8,r8,9
 800bedc:	8822d0fa 	srli	r17,r17,3
 800bee0:	8401ffcc 	andi	r16,r16,2047
 800bee4:	4010d33a 	srli	r8,r8,12
 800bee8:	9007883a 	mov	r3,r18
 800beec:	1444b03a 	or	r2,r2,r17
 800bef0:	8401ffcc 	andi	r16,r16,2047
 800bef4:	8020953a 	slli	r16,r16,20
 800bef8:	18c03fcc 	andi	r3,r3,255
 800befc:	01000434 	movhi	r4,16
 800bf00:	213fffc4 	addi	r4,r4,-1
 800bf04:	180697fa 	slli	r3,r3,31
 800bf08:	4110703a 	and	r8,r8,r4
 800bf0c:	4410b03a 	or	r8,r8,r16
 800bf10:	40c6b03a 	or	r3,r8,r3
 800bf14:	dfc00417 	ldw	ra,16(sp)
 800bf18:	dcc00317 	ldw	r19,12(sp)
 800bf1c:	dc800217 	ldw	r18,8(sp)
 800bf20:	dc400117 	ldw	r17,4(sp)
 800bf24:	dc000017 	ldw	r16,0(sp)
 800bf28:	dec00504 	addi	sp,sp,20
 800bf2c:	f800283a 	ret
 800bf30:	0081ffc4 	movi	r2,2047
 800bf34:	80bfd626 	beq	r16,r2,800be90 <__alt_data_end+0xf800be90>
 800bf38:	4a402034 	orhi	r9,r9,128
 800bf3c:	00800e04 	movi	r2,56
 800bf40:	10c09f16 	blt	r2,r3,800c1c0 <__adddf3+0x3ac>
 800bf44:	008007c4 	movi	r2,31
 800bf48:	10c0c216 	blt	r2,r3,800c254 <__adddf3+0x440>
 800bf4c:	00800804 	movi	r2,32
 800bf50:	10c5c83a 	sub	r2,r2,r3
 800bf54:	488a983a 	sll	r5,r9,r2
 800bf58:	30c8d83a 	srl	r4,r6,r3
 800bf5c:	3084983a 	sll	r2,r6,r2
 800bf60:	48c6d83a 	srl	r3,r9,r3
 800bf64:	290cb03a 	or	r6,r5,r4
 800bf68:	1004c03a 	cmpne	r2,r2,zero
 800bf6c:	308cb03a 	or	r6,r6,r2
 800bf70:	898dc83a 	sub	r6,r17,r6
 800bf74:	89a3803a 	cmpltu	r17,r17,r6
 800bf78:	40d1c83a 	sub	r8,r8,r3
 800bf7c:	4451c83a 	sub	r8,r8,r17
 800bf80:	3023883a 	mov	r17,r6
 800bf84:	4080202c 	andhi	r2,r8,128
 800bf88:	10002326 	beq	r2,zero,800c018 <__adddf3+0x204>
 800bf8c:	04c02034 	movhi	r19,128
 800bf90:	9cffffc4 	addi	r19,r19,-1
 800bf94:	44e6703a 	and	r19,r8,r19
 800bf98:	98007626 	beq	r19,zero,800c174 <__adddf3+0x360>
 800bf9c:	9809883a 	mov	r4,r19
 800bfa0:	800e4180 	call	800e418 <__clzsi2>
 800bfa4:	10fffe04 	addi	r3,r2,-8
 800bfa8:	010007c4 	movi	r4,31
 800bfac:	20c07716 	blt	r4,r3,800c18c <__adddf3+0x378>
 800bfb0:	00800804 	movi	r2,32
 800bfb4:	10c5c83a 	sub	r2,r2,r3
 800bfb8:	8884d83a 	srl	r2,r17,r2
 800bfbc:	98d0983a 	sll	r8,r19,r3
 800bfc0:	88e2983a 	sll	r17,r17,r3
 800bfc4:	1204b03a 	or	r2,r2,r8
 800bfc8:	1c007416 	blt	r3,r16,800c19c <__adddf3+0x388>
 800bfcc:	1c21c83a 	sub	r16,r3,r16
 800bfd0:	82000044 	addi	r8,r16,1
 800bfd4:	00c007c4 	movi	r3,31
 800bfd8:	1a009116 	blt	r3,r8,800c220 <__adddf3+0x40c>
 800bfdc:	00c00804 	movi	r3,32
 800bfe0:	1a07c83a 	sub	r3,r3,r8
 800bfe4:	8a08d83a 	srl	r4,r17,r8
 800bfe8:	88e2983a 	sll	r17,r17,r3
 800bfec:	10c6983a 	sll	r3,r2,r3
 800bff0:	1210d83a 	srl	r8,r2,r8
 800bff4:	8804c03a 	cmpne	r2,r17,zero
 800bff8:	1906b03a 	or	r3,r3,r4
 800bffc:	18a2b03a 	or	r17,r3,r2
 800c000:	0021883a 	mov	r16,zero
 800c004:	003fa206 	br	800be90 <__alt_data_end+0xf800be90>
 800c008:	1890b03a 	or	r8,r3,r2
 800c00c:	40017d26 	beq	r8,zero,800c604 <__adddf3+0x7f0>
 800c010:	1011883a 	mov	r8,r2
 800c014:	1823883a 	mov	r17,r3
 800c018:	888001cc 	andi	r2,r17,7
 800c01c:	103f9e1e 	bne	r2,zero,800be98 <__alt_data_end+0xf800be98>
 800c020:	4004977a 	slli	r2,r8,29
 800c024:	8822d0fa 	srli	r17,r17,3
 800c028:	4010d0fa 	srli	r8,r8,3
 800c02c:	9007883a 	mov	r3,r18
 800c030:	1444b03a 	or	r2,r2,r17
 800c034:	0101ffc4 	movi	r4,2047
 800c038:	81002426 	beq	r16,r4,800c0cc <__adddf3+0x2b8>
 800c03c:	8120703a 	and	r16,r16,r4
 800c040:	01000434 	movhi	r4,16
 800c044:	213fffc4 	addi	r4,r4,-1
 800c048:	4110703a 	and	r8,r8,r4
 800c04c:	003fa806 	br	800bef0 <__alt_data_end+0xf800bef0>
 800c050:	8089c83a 	sub	r4,r16,r2
 800c054:	01005e0e 	bge	zero,r4,800c1d0 <__adddf3+0x3bc>
 800c058:	10002b26 	beq	r2,zero,800c108 <__adddf3+0x2f4>
 800c05c:	0081ffc4 	movi	r2,2047
 800c060:	80bf8b26 	beq	r16,r2,800be90 <__alt_data_end+0xf800be90>
 800c064:	4a402034 	orhi	r9,r9,128
 800c068:	00800e04 	movi	r2,56
 800c06c:	1100a40e 	bge	r2,r4,800c300 <__adddf3+0x4ec>
 800c070:	498cb03a 	or	r6,r9,r6
 800c074:	300ac03a 	cmpne	r5,r6,zero
 800c078:	0013883a 	mov	r9,zero
 800c07c:	2c4b883a 	add	r5,r5,r17
 800c080:	2c63803a 	cmpltu	r17,r5,r17
 800c084:	4a11883a 	add	r8,r9,r8
 800c088:	8a11883a 	add	r8,r17,r8
 800c08c:	2823883a 	mov	r17,r5
 800c090:	4080202c 	andhi	r2,r8,128
 800c094:	103fe026 	beq	r2,zero,800c018 <__alt_data_end+0xf800c018>
 800c098:	84000044 	addi	r16,r16,1
 800c09c:	0081ffc4 	movi	r2,2047
 800c0a0:	8080d226 	beq	r16,r2,800c3ec <__adddf3+0x5d8>
 800c0a4:	00bfe034 	movhi	r2,65408
 800c0a8:	10bfffc4 	addi	r2,r2,-1
 800c0ac:	4090703a 	and	r8,r8,r2
 800c0b0:	880ad07a 	srli	r5,r17,1
 800c0b4:	400897fa 	slli	r4,r8,31
 800c0b8:	88c0004c 	andi	r3,r17,1
 800c0bc:	28e2b03a 	or	r17,r5,r3
 800c0c0:	4010d07a 	srli	r8,r8,1
 800c0c4:	2462b03a 	or	r17,r4,r17
 800c0c8:	003f7106 	br	800be90 <__alt_data_end+0xf800be90>
 800c0cc:	4088b03a 	or	r4,r8,r2
 800c0d0:	20014526 	beq	r4,zero,800c5e8 <__adddf3+0x7d4>
 800c0d4:	01000434 	movhi	r4,16
 800c0d8:	42000234 	orhi	r8,r8,8
 800c0dc:	213fffc4 	addi	r4,r4,-1
 800c0e0:	4110703a 	and	r8,r8,r4
 800c0e4:	003f8206 	br	800bef0 <__alt_data_end+0xf800bef0>
 800c0e8:	18ffffc4 	addi	r3,r3,-1
 800c0ec:	1800491e 	bne	r3,zero,800c214 <__adddf3+0x400>
 800c0f0:	898bc83a 	sub	r5,r17,r6
 800c0f4:	8963803a 	cmpltu	r17,r17,r5
 800c0f8:	4251c83a 	sub	r8,r8,r9
 800c0fc:	4451c83a 	sub	r8,r8,r17
 800c100:	2823883a 	mov	r17,r5
 800c104:	003f9f06 	br	800bf84 <__alt_data_end+0xf800bf84>
 800c108:	4984b03a 	or	r2,r9,r6
 800c10c:	103f6026 	beq	r2,zero,800be90 <__alt_data_end+0xf800be90>
 800c110:	213fffc4 	addi	r4,r4,-1
 800c114:	2000931e 	bne	r4,zero,800c364 <__adddf3+0x550>
 800c118:	898d883a 	add	r6,r17,r6
 800c11c:	3463803a 	cmpltu	r17,r6,r17
 800c120:	4251883a 	add	r8,r8,r9
 800c124:	8a11883a 	add	r8,r17,r8
 800c128:	3023883a 	mov	r17,r6
 800c12c:	003fd806 	br	800c090 <__alt_data_end+0xf800c090>
 800c130:	1800541e 	bne	r3,zero,800c284 <__adddf3+0x470>
 800c134:	80800044 	addi	r2,r16,1
 800c138:	1081ffcc 	andi	r2,r2,2047
 800c13c:	00c00044 	movi	r3,1
 800c140:	1880a00e 	bge	r3,r2,800c3c4 <__adddf3+0x5b0>
 800c144:	8989c83a 	sub	r4,r17,r6
 800c148:	8905803a 	cmpltu	r2,r17,r4
 800c14c:	4267c83a 	sub	r19,r8,r9
 800c150:	98a7c83a 	sub	r19,r19,r2
 800c154:	9880202c 	andhi	r2,r19,128
 800c158:	10006326 	beq	r2,zero,800c2e8 <__adddf3+0x4d4>
 800c15c:	3463c83a 	sub	r17,r6,r17
 800c160:	4a07c83a 	sub	r3,r9,r8
 800c164:	344d803a 	cmpltu	r6,r6,r17
 800c168:	19a7c83a 	sub	r19,r3,r6
 800c16c:	3825883a 	mov	r18,r7
 800c170:	983f8a1e 	bne	r19,zero,800bf9c <__alt_data_end+0xf800bf9c>
 800c174:	8809883a 	mov	r4,r17
 800c178:	800e4180 	call	800e418 <__clzsi2>
 800c17c:	10800804 	addi	r2,r2,32
 800c180:	10fffe04 	addi	r3,r2,-8
 800c184:	010007c4 	movi	r4,31
 800c188:	20ff890e 	bge	r4,r3,800bfb0 <__alt_data_end+0xf800bfb0>
 800c18c:	10bff604 	addi	r2,r2,-40
 800c190:	8884983a 	sll	r2,r17,r2
 800c194:	0023883a 	mov	r17,zero
 800c198:	1c3f8c0e 	bge	r3,r16,800bfcc <__alt_data_end+0xf800bfcc>
 800c19c:	023fe034 	movhi	r8,65408
 800c1a0:	423fffc4 	addi	r8,r8,-1
 800c1a4:	80e1c83a 	sub	r16,r16,r3
 800c1a8:	1210703a 	and	r8,r2,r8
 800c1ac:	003f3806 	br	800be90 <__alt_data_end+0xf800be90>
 800c1b0:	9007883a 	mov	r3,r18
 800c1b4:	0011883a 	mov	r8,zero
 800c1b8:	0005883a 	mov	r2,zero
 800c1bc:	003f4c06 	br	800bef0 <__alt_data_end+0xf800bef0>
 800c1c0:	498cb03a 	or	r6,r9,r6
 800c1c4:	300cc03a 	cmpne	r6,r6,zero
 800c1c8:	0007883a 	mov	r3,zero
 800c1cc:	003f6806 	br	800bf70 <__alt_data_end+0xf800bf70>
 800c1d0:	20009c1e 	bne	r4,zero,800c444 <__adddf3+0x630>
 800c1d4:	80800044 	addi	r2,r16,1
 800c1d8:	1141ffcc 	andi	r5,r2,2047
 800c1dc:	01000044 	movi	r4,1
 800c1e0:	2140670e 	bge	r4,r5,800c380 <__adddf3+0x56c>
 800c1e4:	0101ffc4 	movi	r4,2047
 800c1e8:	11007f26 	beq	r2,r4,800c3e8 <__adddf3+0x5d4>
 800c1ec:	898d883a 	add	r6,r17,r6
 800c1f0:	4247883a 	add	r3,r8,r9
 800c1f4:	3451803a 	cmpltu	r8,r6,r17
 800c1f8:	40d1883a 	add	r8,r8,r3
 800c1fc:	402297fa 	slli	r17,r8,31
 800c200:	300cd07a 	srli	r6,r6,1
 800c204:	4010d07a 	srli	r8,r8,1
 800c208:	1021883a 	mov	r16,r2
 800c20c:	89a2b03a 	or	r17,r17,r6
 800c210:	003f1f06 	br	800be90 <__alt_data_end+0xf800be90>
 800c214:	0081ffc4 	movi	r2,2047
 800c218:	80bf481e 	bne	r16,r2,800bf3c <__alt_data_end+0xf800bf3c>
 800c21c:	003f1c06 	br	800be90 <__alt_data_end+0xf800be90>
 800c220:	843ff844 	addi	r16,r16,-31
 800c224:	01000804 	movi	r4,32
 800c228:	1406d83a 	srl	r3,r2,r16
 800c22c:	41005026 	beq	r8,r4,800c370 <__adddf3+0x55c>
 800c230:	01001004 	movi	r4,64
 800c234:	2211c83a 	sub	r8,r4,r8
 800c238:	1204983a 	sll	r2,r2,r8
 800c23c:	88a2b03a 	or	r17,r17,r2
 800c240:	8822c03a 	cmpne	r17,r17,zero
 800c244:	1c62b03a 	or	r17,r3,r17
 800c248:	0011883a 	mov	r8,zero
 800c24c:	0021883a 	mov	r16,zero
 800c250:	003f7106 	br	800c018 <__alt_data_end+0xf800c018>
 800c254:	193ff804 	addi	r4,r3,-32
 800c258:	00800804 	movi	r2,32
 800c25c:	4908d83a 	srl	r4,r9,r4
 800c260:	18804526 	beq	r3,r2,800c378 <__adddf3+0x564>
 800c264:	00801004 	movi	r2,64
 800c268:	10c5c83a 	sub	r2,r2,r3
 800c26c:	4886983a 	sll	r3,r9,r2
 800c270:	198cb03a 	or	r6,r3,r6
 800c274:	300cc03a 	cmpne	r6,r6,zero
 800c278:	218cb03a 	or	r6,r4,r6
 800c27c:	0007883a 	mov	r3,zero
 800c280:	003f3b06 	br	800bf70 <__alt_data_end+0xf800bf70>
 800c284:	80002a26 	beq	r16,zero,800c330 <__adddf3+0x51c>
 800c288:	0101ffc4 	movi	r4,2047
 800c28c:	11006826 	beq	r2,r4,800c430 <__adddf3+0x61c>
 800c290:	00c7c83a 	sub	r3,zero,r3
 800c294:	42002034 	orhi	r8,r8,128
 800c298:	01000e04 	movi	r4,56
 800c29c:	20c07c16 	blt	r4,r3,800c490 <__adddf3+0x67c>
 800c2a0:	010007c4 	movi	r4,31
 800c2a4:	20c0da16 	blt	r4,r3,800c610 <__adddf3+0x7fc>
 800c2a8:	01000804 	movi	r4,32
 800c2ac:	20c9c83a 	sub	r4,r4,r3
 800c2b0:	4114983a 	sll	r10,r8,r4
 800c2b4:	88cad83a 	srl	r5,r17,r3
 800c2b8:	8908983a 	sll	r4,r17,r4
 800c2bc:	40c6d83a 	srl	r3,r8,r3
 800c2c0:	5162b03a 	or	r17,r10,r5
 800c2c4:	2008c03a 	cmpne	r4,r4,zero
 800c2c8:	8922b03a 	or	r17,r17,r4
 800c2cc:	3463c83a 	sub	r17,r6,r17
 800c2d0:	48c7c83a 	sub	r3,r9,r3
 800c2d4:	344d803a 	cmpltu	r6,r6,r17
 800c2d8:	1991c83a 	sub	r8,r3,r6
 800c2dc:	1021883a 	mov	r16,r2
 800c2e0:	3825883a 	mov	r18,r7
 800c2e4:	003f2706 	br	800bf84 <__alt_data_end+0xf800bf84>
 800c2e8:	24d0b03a 	or	r8,r4,r19
 800c2ec:	40001b1e 	bne	r8,zero,800c35c <__adddf3+0x548>
 800c2f0:	0005883a 	mov	r2,zero
 800c2f4:	0007883a 	mov	r3,zero
 800c2f8:	0021883a 	mov	r16,zero
 800c2fc:	003f4d06 	br	800c034 <__alt_data_end+0xf800c034>
 800c300:	008007c4 	movi	r2,31
 800c304:	11003c16 	blt	r2,r4,800c3f8 <__adddf3+0x5e4>
 800c308:	00800804 	movi	r2,32
 800c30c:	1105c83a 	sub	r2,r2,r4
 800c310:	488e983a 	sll	r7,r9,r2
 800c314:	310ad83a 	srl	r5,r6,r4
 800c318:	3084983a 	sll	r2,r6,r2
 800c31c:	4912d83a 	srl	r9,r9,r4
 800c320:	394ab03a 	or	r5,r7,r5
 800c324:	1004c03a 	cmpne	r2,r2,zero
 800c328:	288ab03a 	or	r5,r5,r2
 800c32c:	003f5306 	br	800c07c <__alt_data_end+0xf800c07c>
 800c330:	4448b03a 	or	r4,r8,r17
 800c334:	20003e26 	beq	r4,zero,800c430 <__adddf3+0x61c>
 800c338:	00c6303a 	nor	r3,zero,r3
 800c33c:	18003a1e 	bne	r3,zero,800c428 <__adddf3+0x614>
 800c340:	3463c83a 	sub	r17,r6,r17
 800c344:	4a07c83a 	sub	r3,r9,r8
 800c348:	344d803a 	cmpltu	r6,r6,r17
 800c34c:	1991c83a 	sub	r8,r3,r6
 800c350:	1021883a 	mov	r16,r2
 800c354:	3825883a 	mov	r18,r7
 800c358:	003f0a06 	br	800bf84 <__alt_data_end+0xf800bf84>
 800c35c:	2023883a 	mov	r17,r4
 800c360:	003f0d06 	br	800bf98 <__alt_data_end+0xf800bf98>
 800c364:	0081ffc4 	movi	r2,2047
 800c368:	80bf3f1e 	bne	r16,r2,800c068 <__alt_data_end+0xf800c068>
 800c36c:	003ec806 	br	800be90 <__alt_data_end+0xf800be90>
 800c370:	0005883a 	mov	r2,zero
 800c374:	003fb106 	br	800c23c <__alt_data_end+0xf800c23c>
 800c378:	0007883a 	mov	r3,zero
 800c37c:	003fbc06 	br	800c270 <__alt_data_end+0xf800c270>
 800c380:	4444b03a 	or	r2,r8,r17
 800c384:	8000871e 	bne	r16,zero,800c5a4 <__adddf3+0x790>
 800c388:	1000ba26 	beq	r2,zero,800c674 <__adddf3+0x860>
 800c38c:	4984b03a 	or	r2,r9,r6
 800c390:	103ebf26 	beq	r2,zero,800be90 <__alt_data_end+0xf800be90>
 800c394:	8985883a 	add	r2,r17,r6
 800c398:	4247883a 	add	r3,r8,r9
 800c39c:	1451803a 	cmpltu	r8,r2,r17
 800c3a0:	40d1883a 	add	r8,r8,r3
 800c3a4:	40c0202c 	andhi	r3,r8,128
 800c3a8:	1023883a 	mov	r17,r2
 800c3ac:	183f1a26 	beq	r3,zero,800c018 <__alt_data_end+0xf800c018>
 800c3b0:	00bfe034 	movhi	r2,65408
 800c3b4:	10bfffc4 	addi	r2,r2,-1
 800c3b8:	2021883a 	mov	r16,r4
 800c3bc:	4090703a 	and	r8,r8,r2
 800c3c0:	003eb306 	br	800be90 <__alt_data_end+0xf800be90>
 800c3c4:	4444b03a 	or	r2,r8,r17
 800c3c8:	8000291e 	bne	r16,zero,800c470 <__adddf3+0x65c>
 800c3cc:	10004b1e 	bne	r2,zero,800c4fc <__adddf3+0x6e8>
 800c3d0:	4990b03a 	or	r8,r9,r6
 800c3d4:	40008b26 	beq	r8,zero,800c604 <__adddf3+0x7f0>
 800c3d8:	4811883a 	mov	r8,r9
 800c3dc:	3023883a 	mov	r17,r6
 800c3e0:	3825883a 	mov	r18,r7
 800c3e4:	003eaa06 	br	800be90 <__alt_data_end+0xf800be90>
 800c3e8:	1021883a 	mov	r16,r2
 800c3ec:	0011883a 	mov	r8,zero
 800c3f0:	0005883a 	mov	r2,zero
 800c3f4:	003f0f06 	br	800c034 <__alt_data_end+0xf800c034>
 800c3f8:	217ff804 	addi	r5,r4,-32
 800c3fc:	00800804 	movi	r2,32
 800c400:	494ad83a 	srl	r5,r9,r5
 800c404:	20807d26 	beq	r4,r2,800c5fc <__adddf3+0x7e8>
 800c408:	00801004 	movi	r2,64
 800c40c:	1109c83a 	sub	r4,r2,r4
 800c410:	4912983a 	sll	r9,r9,r4
 800c414:	498cb03a 	or	r6,r9,r6
 800c418:	300cc03a 	cmpne	r6,r6,zero
 800c41c:	298ab03a 	or	r5,r5,r6
 800c420:	0013883a 	mov	r9,zero
 800c424:	003f1506 	br	800c07c <__alt_data_end+0xf800c07c>
 800c428:	0101ffc4 	movi	r4,2047
 800c42c:	113f9a1e 	bne	r2,r4,800c298 <__alt_data_end+0xf800c298>
 800c430:	4811883a 	mov	r8,r9
 800c434:	3023883a 	mov	r17,r6
 800c438:	1021883a 	mov	r16,r2
 800c43c:	3825883a 	mov	r18,r7
 800c440:	003e9306 	br	800be90 <__alt_data_end+0xf800be90>
 800c444:	8000161e 	bne	r16,zero,800c4a0 <__adddf3+0x68c>
 800c448:	444ab03a 	or	r5,r8,r17
 800c44c:	28005126 	beq	r5,zero,800c594 <__adddf3+0x780>
 800c450:	0108303a 	nor	r4,zero,r4
 800c454:	20004d1e 	bne	r4,zero,800c58c <__adddf3+0x778>
 800c458:	89a3883a 	add	r17,r17,r6
 800c45c:	4253883a 	add	r9,r8,r9
 800c460:	898d803a 	cmpltu	r6,r17,r6
 800c464:	3251883a 	add	r8,r6,r9
 800c468:	1021883a 	mov	r16,r2
 800c46c:	003f0806 	br	800c090 <__alt_data_end+0xf800c090>
 800c470:	1000301e 	bne	r2,zero,800c534 <__adddf3+0x720>
 800c474:	4984b03a 	or	r2,r9,r6
 800c478:	10007126 	beq	r2,zero,800c640 <__adddf3+0x82c>
 800c47c:	4811883a 	mov	r8,r9
 800c480:	3023883a 	mov	r17,r6
 800c484:	3825883a 	mov	r18,r7
 800c488:	0401ffc4 	movi	r16,2047
 800c48c:	003e8006 	br	800be90 <__alt_data_end+0xf800be90>
 800c490:	4462b03a 	or	r17,r8,r17
 800c494:	8822c03a 	cmpne	r17,r17,zero
 800c498:	0007883a 	mov	r3,zero
 800c49c:	003f8b06 	br	800c2cc <__alt_data_end+0xf800c2cc>
 800c4a0:	0141ffc4 	movi	r5,2047
 800c4a4:	11403b26 	beq	r2,r5,800c594 <__adddf3+0x780>
 800c4a8:	0109c83a 	sub	r4,zero,r4
 800c4ac:	42002034 	orhi	r8,r8,128
 800c4b0:	01400e04 	movi	r5,56
 800c4b4:	29006716 	blt	r5,r4,800c654 <__adddf3+0x840>
 800c4b8:	014007c4 	movi	r5,31
 800c4bc:	29007016 	blt	r5,r4,800c680 <__adddf3+0x86c>
 800c4c0:	01400804 	movi	r5,32
 800c4c4:	290bc83a 	sub	r5,r5,r4
 800c4c8:	4154983a 	sll	r10,r8,r5
 800c4cc:	890ed83a 	srl	r7,r17,r4
 800c4d0:	894a983a 	sll	r5,r17,r5
 800c4d4:	4108d83a 	srl	r4,r8,r4
 800c4d8:	51e2b03a 	or	r17,r10,r7
 800c4dc:	280ac03a 	cmpne	r5,r5,zero
 800c4e0:	8962b03a 	or	r17,r17,r5
 800c4e4:	89a3883a 	add	r17,r17,r6
 800c4e8:	2253883a 	add	r9,r4,r9
 800c4ec:	898d803a 	cmpltu	r6,r17,r6
 800c4f0:	3251883a 	add	r8,r6,r9
 800c4f4:	1021883a 	mov	r16,r2
 800c4f8:	003ee506 	br	800c090 <__alt_data_end+0xf800c090>
 800c4fc:	4984b03a 	or	r2,r9,r6
 800c500:	103e6326 	beq	r2,zero,800be90 <__alt_data_end+0xf800be90>
 800c504:	8987c83a 	sub	r3,r17,r6
 800c508:	88c9803a 	cmpltu	r4,r17,r3
 800c50c:	4245c83a 	sub	r2,r8,r9
 800c510:	1105c83a 	sub	r2,r2,r4
 800c514:	1100202c 	andhi	r4,r2,128
 800c518:	203ebb26 	beq	r4,zero,800c008 <__alt_data_end+0xf800c008>
 800c51c:	3463c83a 	sub	r17,r6,r17
 800c520:	4a07c83a 	sub	r3,r9,r8
 800c524:	344d803a 	cmpltu	r6,r6,r17
 800c528:	1991c83a 	sub	r8,r3,r6
 800c52c:	3825883a 	mov	r18,r7
 800c530:	003e5706 	br	800be90 <__alt_data_end+0xf800be90>
 800c534:	4984b03a 	or	r2,r9,r6
 800c538:	10002e26 	beq	r2,zero,800c5f4 <__adddf3+0x7e0>
 800c53c:	4004d0fa 	srli	r2,r8,3
 800c540:	8822d0fa 	srli	r17,r17,3
 800c544:	4010977a 	slli	r8,r8,29
 800c548:	10c0022c 	andhi	r3,r2,8
 800c54c:	4462b03a 	or	r17,r8,r17
 800c550:	18000826 	beq	r3,zero,800c574 <__adddf3+0x760>
 800c554:	4808d0fa 	srli	r4,r9,3
 800c558:	20c0022c 	andhi	r3,r4,8
 800c55c:	1800051e 	bne	r3,zero,800c574 <__adddf3+0x760>
 800c560:	300cd0fa 	srli	r6,r6,3
 800c564:	4806977a 	slli	r3,r9,29
 800c568:	2005883a 	mov	r2,r4
 800c56c:	3825883a 	mov	r18,r7
 800c570:	19a2b03a 	or	r17,r3,r6
 800c574:	8810d77a 	srli	r8,r17,29
 800c578:	100490fa 	slli	r2,r2,3
 800c57c:	882290fa 	slli	r17,r17,3
 800c580:	0401ffc4 	movi	r16,2047
 800c584:	4090b03a 	or	r8,r8,r2
 800c588:	003e4106 	br	800be90 <__alt_data_end+0xf800be90>
 800c58c:	0141ffc4 	movi	r5,2047
 800c590:	117fc71e 	bne	r2,r5,800c4b0 <__alt_data_end+0xf800c4b0>
 800c594:	4811883a 	mov	r8,r9
 800c598:	3023883a 	mov	r17,r6
 800c59c:	1021883a 	mov	r16,r2
 800c5a0:	003e3b06 	br	800be90 <__alt_data_end+0xf800be90>
 800c5a4:	10002f26 	beq	r2,zero,800c664 <__adddf3+0x850>
 800c5a8:	4984b03a 	or	r2,r9,r6
 800c5ac:	10001126 	beq	r2,zero,800c5f4 <__adddf3+0x7e0>
 800c5b0:	4004d0fa 	srli	r2,r8,3
 800c5b4:	8822d0fa 	srli	r17,r17,3
 800c5b8:	4010977a 	slli	r8,r8,29
 800c5bc:	10c0022c 	andhi	r3,r2,8
 800c5c0:	4462b03a 	or	r17,r8,r17
 800c5c4:	183feb26 	beq	r3,zero,800c574 <__alt_data_end+0xf800c574>
 800c5c8:	4808d0fa 	srli	r4,r9,3
 800c5cc:	20c0022c 	andhi	r3,r4,8
 800c5d0:	183fe81e 	bne	r3,zero,800c574 <__alt_data_end+0xf800c574>
 800c5d4:	300cd0fa 	srli	r6,r6,3
 800c5d8:	4806977a 	slli	r3,r9,29
 800c5dc:	2005883a 	mov	r2,r4
 800c5e0:	19a2b03a 	or	r17,r3,r6
 800c5e4:	003fe306 	br	800c574 <__alt_data_end+0xf800c574>
 800c5e8:	0011883a 	mov	r8,zero
 800c5ec:	0005883a 	mov	r2,zero
 800c5f0:	003e3f06 	br	800bef0 <__alt_data_end+0xf800bef0>
 800c5f4:	0401ffc4 	movi	r16,2047
 800c5f8:	003e2506 	br	800be90 <__alt_data_end+0xf800be90>
 800c5fc:	0013883a 	mov	r9,zero
 800c600:	003f8406 	br	800c414 <__alt_data_end+0xf800c414>
 800c604:	0005883a 	mov	r2,zero
 800c608:	0007883a 	mov	r3,zero
 800c60c:	003e8906 	br	800c034 <__alt_data_end+0xf800c034>
 800c610:	197ff804 	addi	r5,r3,-32
 800c614:	01000804 	movi	r4,32
 800c618:	414ad83a 	srl	r5,r8,r5
 800c61c:	19002426 	beq	r3,r4,800c6b0 <__adddf3+0x89c>
 800c620:	01001004 	movi	r4,64
 800c624:	20c7c83a 	sub	r3,r4,r3
 800c628:	40c6983a 	sll	r3,r8,r3
 800c62c:	1c46b03a 	or	r3,r3,r17
 800c630:	1806c03a 	cmpne	r3,r3,zero
 800c634:	28e2b03a 	or	r17,r5,r3
 800c638:	0007883a 	mov	r3,zero
 800c63c:	003f2306 	br	800c2cc <__alt_data_end+0xf800c2cc>
 800c640:	0007883a 	mov	r3,zero
 800c644:	5811883a 	mov	r8,r11
 800c648:	00bfffc4 	movi	r2,-1
 800c64c:	0401ffc4 	movi	r16,2047
 800c650:	003e7806 	br	800c034 <__alt_data_end+0xf800c034>
 800c654:	4462b03a 	or	r17,r8,r17
 800c658:	8822c03a 	cmpne	r17,r17,zero
 800c65c:	0009883a 	mov	r4,zero
 800c660:	003fa006 	br	800c4e4 <__alt_data_end+0xf800c4e4>
 800c664:	4811883a 	mov	r8,r9
 800c668:	3023883a 	mov	r17,r6
 800c66c:	0401ffc4 	movi	r16,2047
 800c670:	003e0706 	br	800be90 <__alt_data_end+0xf800be90>
 800c674:	4811883a 	mov	r8,r9
 800c678:	3023883a 	mov	r17,r6
 800c67c:	003e0406 	br	800be90 <__alt_data_end+0xf800be90>
 800c680:	21fff804 	addi	r7,r4,-32
 800c684:	01400804 	movi	r5,32
 800c688:	41ced83a 	srl	r7,r8,r7
 800c68c:	21400a26 	beq	r4,r5,800c6b8 <__adddf3+0x8a4>
 800c690:	01401004 	movi	r5,64
 800c694:	2909c83a 	sub	r4,r5,r4
 800c698:	4108983a 	sll	r4,r8,r4
 800c69c:	2448b03a 	or	r4,r4,r17
 800c6a0:	2008c03a 	cmpne	r4,r4,zero
 800c6a4:	3922b03a 	or	r17,r7,r4
 800c6a8:	0009883a 	mov	r4,zero
 800c6ac:	003f8d06 	br	800c4e4 <__alt_data_end+0xf800c4e4>
 800c6b0:	0007883a 	mov	r3,zero
 800c6b4:	003fdd06 	br	800c62c <__alt_data_end+0xf800c62c>
 800c6b8:	0009883a 	mov	r4,zero
 800c6bc:	003ff706 	br	800c69c <__alt_data_end+0xf800c69c>

0800c6c0 <__divdf3>:
 800c6c0:	defff204 	addi	sp,sp,-56
 800c6c4:	dd400915 	stw	r21,36(sp)
 800c6c8:	282ad53a 	srli	r21,r5,20
 800c6cc:	dd000815 	stw	r20,32(sp)
 800c6d0:	2828d7fa 	srli	r20,r5,31
 800c6d4:	dc000415 	stw	r16,16(sp)
 800c6d8:	04000434 	movhi	r16,16
 800c6dc:	df000c15 	stw	fp,48(sp)
 800c6e0:	843fffc4 	addi	r16,r16,-1
 800c6e4:	dfc00d15 	stw	ra,52(sp)
 800c6e8:	ddc00b15 	stw	r23,44(sp)
 800c6ec:	dd800a15 	stw	r22,40(sp)
 800c6f0:	dcc00715 	stw	r19,28(sp)
 800c6f4:	dc800615 	stw	r18,24(sp)
 800c6f8:	dc400515 	stw	r17,20(sp)
 800c6fc:	ad41ffcc 	andi	r21,r21,2047
 800c700:	2c20703a 	and	r16,r5,r16
 800c704:	a7003fcc 	andi	fp,r20,255
 800c708:	a8006126 	beq	r21,zero,800c890 <__divdf3+0x1d0>
 800c70c:	0081ffc4 	movi	r2,2047
 800c710:	2025883a 	mov	r18,r4
 800c714:	a8803726 	beq	r21,r2,800c7f4 <__divdf3+0x134>
 800c718:	80800434 	orhi	r2,r16,16
 800c71c:	100490fa 	slli	r2,r2,3
 800c720:	2020d77a 	srli	r16,r4,29
 800c724:	202490fa 	slli	r18,r4,3
 800c728:	ad7f0044 	addi	r21,r21,-1023
 800c72c:	80a0b03a 	or	r16,r16,r2
 800c730:	0027883a 	mov	r19,zero
 800c734:	0013883a 	mov	r9,zero
 800c738:	3804d53a 	srli	r2,r7,20
 800c73c:	382cd7fa 	srli	r22,r7,31
 800c740:	04400434 	movhi	r17,16
 800c744:	8c7fffc4 	addi	r17,r17,-1
 800c748:	1081ffcc 	andi	r2,r2,2047
 800c74c:	3011883a 	mov	r8,r6
 800c750:	3c62703a 	and	r17,r7,r17
 800c754:	b5c03fcc 	andi	r23,r22,255
 800c758:	10006c26 	beq	r2,zero,800c90c <__divdf3+0x24c>
 800c75c:	00c1ffc4 	movi	r3,2047
 800c760:	10c06426 	beq	r2,r3,800c8f4 <__divdf3+0x234>
 800c764:	88c00434 	orhi	r3,r17,16
 800c768:	180690fa 	slli	r3,r3,3
 800c76c:	3022d77a 	srli	r17,r6,29
 800c770:	301090fa 	slli	r8,r6,3
 800c774:	10bf0044 	addi	r2,r2,-1023
 800c778:	88e2b03a 	or	r17,r17,r3
 800c77c:	000f883a 	mov	r7,zero
 800c780:	a58cf03a 	xor	r6,r20,r22
 800c784:	3cc8b03a 	or	r4,r7,r19
 800c788:	a8abc83a 	sub	r21,r21,r2
 800c78c:	008003c4 	movi	r2,15
 800c790:	3007883a 	mov	r3,r6
 800c794:	34c03fcc 	andi	r19,r6,255
 800c798:	11009036 	bltu	r2,r4,800c9dc <__divdf3+0x31c>
 800c79c:	200890ba 	slli	r4,r4,2
 800c7a0:	00820074 	movhi	r2,2049
 800c7a4:	10b1ed04 	addi	r2,r2,-14412
 800c7a8:	2089883a 	add	r4,r4,r2
 800c7ac:	20800017 	ldw	r2,0(r4)
 800c7b0:	1000683a 	jmp	r2
 800c7b4:	0800c9dc 	xori	zero,at,807
 800c7b8:	0800c82c 	andhi	zero,at,800
 800c7bc:	0800c9cc 	andi	zero,at,807
 800c7c0:	0800c820 	cmpeqi	zero,at,800
 800c7c4:	0800c9cc 	andi	zero,at,807
 800c7c8:	0800c9a0 	cmpeqi	zero,at,806
 800c7cc:	0800c9cc 	andi	zero,at,807
 800c7d0:	0800c820 	cmpeqi	zero,at,800
 800c7d4:	0800c82c 	andhi	zero,at,800
 800c7d8:	0800c82c 	andhi	zero,at,800
 800c7dc:	0800c9a0 	cmpeqi	zero,at,806
 800c7e0:	0800c820 	cmpeqi	zero,at,800
 800c7e4:	0800c810 	cmplti	zero,at,800
 800c7e8:	0800c810 	cmplti	zero,at,800
 800c7ec:	0800c810 	cmplti	zero,at,800
 800c7f0:	0800ccc0 	call	800ccc <__alt_mem_onchip_memory2_0+0x600ccc>
 800c7f4:	2404b03a 	or	r2,r4,r16
 800c7f8:	1000661e 	bne	r2,zero,800c994 <__divdf3+0x2d4>
 800c7fc:	04c00204 	movi	r19,8
 800c800:	0021883a 	mov	r16,zero
 800c804:	0025883a 	mov	r18,zero
 800c808:	02400084 	movi	r9,2
 800c80c:	003fca06 	br	800c738 <__alt_data_end+0xf800c738>
 800c810:	8023883a 	mov	r17,r16
 800c814:	9011883a 	mov	r8,r18
 800c818:	e02f883a 	mov	r23,fp
 800c81c:	480f883a 	mov	r7,r9
 800c820:	00800084 	movi	r2,2
 800c824:	3881311e 	bne	r7,r2,800ccec <__divdf3+0x62c>
 800c828:	b827883a 	mov	r19,r23
 800c82c:	98c0004c 	andi	r3,r19,1
 800c830:	0081ffc4 	movi	r2,2047
 800c834:	000b883a 	mov	r5,zero
 800c838:	0025883a 	mov	r18,zero
 800c83c:	1004953a 	slli	r2,r2,20
 800c840:	18c03fcc 	andi	r3,r3,255
 800c844:	04400434 	movhi	r17,16
 800c848:	8c7fffc4 	addi	r17,r17,-1
 800c84c:	180697fa 	slli	r3,r3,31
 800c850:	2c4a703a 	and	r5,r5,r17
 800c854:	288ab03a 	or	r5,r5,r2
 800c858:	28c6b03a 	or	r3,r5,r3
 800c85c:	9005883a 	mov	r2,r18
 800c860:	dfc00d17 	ldw	ra,52(sp)
 800c864:	df000c17 	ldw	fp,48(sp)
 800c868:	ddc00b17 	ldw	r23,44(sp)
 800c86c:	dd800a17 	ldw	r22,40(sp)
 800c870:	dd400917 	ldw	r21,36(sp)
 800c874:	dd000817 	ldw	r20,32(sp)
 800c878:	dcc00717 	ldw	r19,28(sp)
 800c87c:	dc800617 	ldw	r18,24(sp)
 800c880:	dc400517 	ldw	r17,20(sp)
 800c884:	dc000417 	ldw	r16,16(sp)
 800c888:	dec00e04 	addi	sp,sp,56
 800c88c:	f800283a 	ret
 800c890:	2404b03a 	or	r2,r4,r16
 800c894:	2027883a 	mov	r19,r4
 800c898:	10003926 	beq	r2,zero,800c980 <__divdf3+0x2c0>
 800c89c:	80012e26 	beq	r16,zero,800cd58 <__divdf3+0x698>
 800c8a0:	8009883a 	mov	r4,r16
 800c8a4:	d9800315 	stw	r6,12(sp)
 800c8a8:	d9c00215 	stw	r7,8(sp)
 800c8ac:	800e4180 	call	800e418 <__clzsi2>
 800c8b0:	d9800317 	ldw	r6,12(sp)
 800c8b4:	d9c00217 	ldw	r7,8(sp)
 800c8b8:	113ffd44 	addi	r4,r2,-11
 800c8bc:	00c00704 	movi	r3,28
 800c8c0:	19012116 	blt	r3,r4,800cd48 <__divdf3+0x688>
 800c8c4:	00c00744 	movi	r3,29
 800c8c8:	147ffe04 	addi	r17,r2,-8
 800c8cc:	1907c83a 	sub	r3,r3,r4
 800c8d0:	8460983a 	sll	r16,r16,r17
 800c8d4:	98c6d83a 	srl	r3,r19,r3
 800c8d8:	9c64983a 	sll	r18,r19,r17
 800c8dc:	1c20b03a 	or	r16,r3,r16
 800c8e0:	1080fcc4 	addi	r2,r2,1011
 800c8e4:	00abc83a 	sub	r21,zero,r2
 800c8e8:	0027883a 	mov	r19,zero
 800c8ec:	0013883a 	mov	r9,zero
 800c8f0:	003f9106 	br	800c738 <__alt_data_end+0xf800c738>
 800c8f4:	3446b03a 	or	r3,r6,r17
 800c8f8:	18001f1e 	bne	r3,zero,800c978 <__divdf3+0x2b8>
 800c8fc:	0023883a 	mov	r17,zero
 800c900:	0011883a 	mov	r8,zero
 800c904:	01c00084 	movi	r7,2
 800c908:	003f9d06 	br	800c780 <__alt_data_end+0xf800c780>
 800c90c:	3446b03a 	or	r3,r6,r17
 800c910:	18001526 	beq	r3,zero,800c968 <__divdf3+0x2a8>
 800c914:	88011b26 	beq	r17,zero,800cd84 <__divdf3+0x6c4>
 800c918:	8809883a 	mov	r4,r17
 800c91c:	d9800315 	stw	r6,12(sp)
 800c920:	da400115 	stw	r9,4(sp)
 800c924:	800e4180 	call	800e418 <__clzsi2>
 800c928:	d9800317 	ldw	r6,12(sp)
 800c92c:	da400117 	ldw	r9,4(sp)
 800c930:	113ffd44 	addi	r4,r2,-11
 800c934:	00c00704 	movi	r3,28
 800c938:	19010e16 	blt	r3,r4,800cd74 <__divdf3+0x6b4>
 800c93c:	00c00744 	movi	r3,29
 800c940:	123ffe04 	addi	r8,r2,-8
 800c944:	1907c83a 	sub	r3,r3,r4
 800c948:	8a22983a 	sll	r17,r17,r8
 800c94c:	30c6d83a 	srl	r3,r6,r3
 800c950:	3210983a 	sll	r8,r6,r8
 800c954:	1c62b03a 	or	r17,r3,r17
 800c958:	1080fcc4 	addi	r2,r2,1011
 800c95c:	0085c83a 	sub	r2,zero,r2
 800c960:	000f883a 	mov	r7,zero
 800c964:	003f8606 	br	800c780 <__alt_data_end+0xf800c780>
 800c968:	0023883a 	mov	r17,zero
 800c96c:	0011883a 	mov	r8,zero
 800c970:	01c00044 	movi	r7,1
 800c974:	003f8206 	br	800c780 <__alt_data_end+0xf800c780>
 800c978:	01c000c4 	movi	r7,3
 800c97c:	003f8006 	br	800c780 <__alt_data_end+0xf800c780>
 800c980:	04c00104 	movi	r19,4
 800c984:	0021883a 	mov	r16,zero
 800c988:	0025883a 	mov	r18,zero
 800c98c:	02400044 	movi	r9,1
 800c990:	003f6906 	br	800c738 <__alt_data_end+0xf800c738>
 800c994:	04c00304 	movi	r19,12
 800c998:	024000c4 	movi	r9,3
 800c99c:	003f6606 	br	800c738 <__alt_data_end+0xf800c738>
 800c9a0:	01400434 	movhi	r5,16
 800c9a4:	0007883a 	mov	r3,zero
 800c9a8:	297fffc4 	addi	r5,r5,-1
 800c9ac:	04bfffc4 	movi	r18,-1
 800c9b0:	0081ffc4 	movi	r2,2047
 800c9b4:	003fa106 	br	800c83c <__alt_data_end+0xf800c83c>
 800c9b8:	00c00044 	movi	r3,1
 800c9bc:	1887c83a 	sub	r3,r3,r2
 800c9c0:	01000e04 	movi	r4,56
 800c9c4:	20c1210e 	bge	r4,r3,800ce4c <__divdf3+0x78c>
 800c9c8:	98c0004c 	andi	r3,r19,1
 800c9cc:	0005883a 	mov	r2,zero
 800c9d0:	000b883a 	mov	r5,zero
 800c9d4:	0025883a 	mov	r18,zero
 800c9d8:	003f9806 	br	800c83c <__alt_data_end+0xf800c83c>
 800c9dc:	8c00fd36 	bltu	r17,r16,800cdd4 <__divdf3+0x714>
 800c9e0:	8440fb26 	beq	r16,r17,800cdd0 <__divdf3+0x710>
 800c9e4:	8007883a 	mov	r3,r16
 800c9e8:	ad7fffc4 	addi	r21,r21,-1
 800c9ec:	0021883a 	mov	r16,zero
 800c9f0:	4004d63a 	srli	r2,r8,24
 800c9f4:	8822923a 	slli	r17,r17,8
 800c9f8:	1809883a 	mov	r4,r3
 800c9fc:	402c923a 	slli	r22,r8,8
 800ca00:	88b8b03a 	or	fp,r17,r2
 800ca04:	e028d43a 	srli	r20,fp,16
 800ca08:	d8c00015 	stw	r3,0(sp)
 800ca0c:	e5ffffcc 	andi	r23,fp,65535
 800ca10:	a00b883a 	mov	r5,r20
 800ca14:	800bd580 	call	800bd58 <__udivsi3>
 800ca18:	d8c00017 	ldw	r3,0(sp)
 800ca1c:	a00b883a 	mov	r5,r20
 800ca20:	d8800315 	stw	r2,12(sp)
 800ca24:	1809883a 	mov	r4,r3
 800ca28:	800bdbc0 	call	800bdbc <__umodsi3>
 800ca2c:	d9800317 	ldw	r6,12(sp)
 800ca30:	1006943a 	slli	r3,r2,16
 800ca34:	9004d43a 	srli	r2,r18,16
 800ca38:	b9a3383a 	mul	r17,r23,r6
 800ca3c:	10c4b03a 	or	r2,r2,r3
 800ca40:	1440062e 	bgeu	r2,r17,800ca5c <__divdf3+0x39c>
 800ca44:	1705883a 	add	r2,r2,fp
 800ca48:	30ffffc4 	addi	r3,r6,-1
 800ca4c:	1700ee36 	bltu	r2,fp,800ce08 <__divdf3+0x748>
 800ca50:	1440ed2e 	bgeu	r2,r17,800ce08 <__divdf3+0x748>
 800ca54:	31bfff84 	addi	r6,r6,-2
 800ca58:	1705883a 	add	r2,r2,fp
 800ca5c:	1463c83a 	sub	r17,r2,r17
 800ca60:	a00b883a 	mov	r5,r20
 800ca64:	8809883a 	mov	r4,r17
 800ca68:	d9800315 	stw	r6,12(sp)
 800ca6c:	800bd580 	call	800bd58 <__udivsi3>
 800ca70:	a00b883a 	mov	r5,r20
 800ca74:	8809883a 	mov	r4,r17
 800ca78:	d8800215 	stw	r2,8(sp)
 800ca7c:	800bdbc0 	call	800bdbc <__umodsi3>
 800ca80:	d9c00217 	ldw	r7,8(sp)
 800ca84:	1004943a 	slli	r2,r2,16
 800ca88:	94bfffcc 	andi	r18,r18,65535
 800ca8c:	b9d1383a 	mul	r8,r23,r7
 800ca90:	90a4b03a 	or	r18,r18,r2
 800ca94:	d9800317 	ldw	r6,12(sp)
 800ca98:	9200062e 	bgeu	r18,r8,800cab4 <__divdf3+0x3f4>
 800ca9c:	9725883a 	add	r18,r18,fp
 800caa0:	38bfffc4 	addi	r2,r7,-1
 800caa4:	9700d636 	bltu	r18,fp,800ce00 <__divdf3+0x740>
 800caa8:	9200d52e 	bgeu	r18,r8,800ce00 <__divdf3+0x740>
 800caac:	39ffff84 	addi	r7,r7,-2
 800cab0:	9725883a 	add	r18,r18,fp
 800cab4:	3004943a 	slli	r2,r6,16
 800cab8:	b012d43a 	srli	r9,r22,16
 800cabc:	b1bfffcc 	andi	r6,r22,65535
 800cac0:	11e2b03a 	or	r17,r2,r7
 800cac4:	8806d43a 	srli	r3,r17,16
 800cac8:	893fffcc 	andi	r4,r17,65535
 800cacc:	218b383a 	mul	r5,r4,r6
 800cad0:	30c5383a 	mul	r2,r6,r3
 800cad4:	2249383a 	mul	r4,r4,r9
 800cad8:	280ed43a 	srli	r7,r5,16
 800cadc:	9225c83a 	sub	r18,r18,r8
 800cae0:	2089883a 	add	r4,r4,r2
 800cae4:	3909883a 	add	r4,r7,r4
 800cae8:	1a47383a 	mul	r3,r3,r9
 800caec:	2080022e 	bgeu	r4,r2,800caf8 <__divdf3+0x438>
 800caf0:	00800074 	movhi	r2,1
 800caf4:	1887883a 	add	r3,r3,r2
 800caf8:	2004d43a 	srli	r2,r4,16
 800cafc:	2008943a 	slli	r4,r4,16
 800cb00:	297fffcc 	andi	r5,r5,65535
 800cb04:	10c7883a 	add	r3,r2,r3
 800cb08:	2149883a 	add	r4,r4,r5
 800cb0c:	90c0a536 	bltu	r18,r3,800cda4 <__divdf3+0x6e4>
 800cb10:	90c0bf26 	beq	r18,r3,800ce10 <__divdf3+0x750>
 800cb14:	90c7c83a 	sub	r3,r18,r3
 800cb18:	810fc83a 	sub	r7,r16,r4
 800cb1c:	81e5803a 	cmpltu	r18,r16,r7
 800cb20:	1ca5c83a 	sub	r18,r3,r18
 800cb24:	e480c126 	beq	fp,r18,800ce2c <__divdf3+0x76c>
 800cb28:	a00b883a 	mov	r5,r20
 800cb2c:	9009883a 	mov	r4,r18
 800cb30:	d9800315 	stw	r6,12(sp)
 800cb34:	d9c00215 	stw	r7,8(sp)
 800cb38:	da400115 	stw	r9,4(sp)
 800cb3c:	800bd580 	call	800bd58 <__udivsi3>
 800cb40:	a00b883a 	mov	r5,r20
 800cb44:	9009883a 	mov	r4,r18
 800cb48:	d8800015 	stw	r2,0(sp)
 800cb4c:	800bdbc0 	call	800bdbc <__umodsi3>
 800cb50:	d9c00217 	ldw	r7,8(sp)
 800cb54:	da000017 	ldw	r8,0(sp)
 800cb58:	1006943a 	slli	r3,r2,16
 800cb5c:	3804d43a 	srli	r2,r7,16
 800cb60:	ba21383a 	mul	r16,r23,r8
 800cb64:	d9800317 	ldw	r6,12(sp)
 800cb68:	10c4b03a 	or	r2,r2,r3
 800cb6c:	da400117 	ldw	r9,4(sp)
 800cb70:	1400062e 	bgeu	r2,r16,800cb8c <__divdf3+0x4cc>
 800cb74:	1705883a 	add	r2,r2,fp
 800cb78:	40ffffc4 	addi	r3,r8,-1
 800cb7c:	1700ad36 	bltu	r2,fp,800ce34 <__divdf3+0x774>
 800cb80:	1400ac2e 	bgeu	r2,r16,800ce34 <__divdf3+0x774>
 800cb84:	423fff84 	addi	r8,r8,-2
 800cb88:	1705883a 	add	r2,r2,fp
 800cb8c:	1421c83a 	sub	r16,r2,r16
 800cb90:	a00b883a 	mov	r5,r20
 800cb94:	8009883a 	mov	r4,r16
 800cb98:	d9800315 	stw	r6,12(sp)
 800cb9c:	d9c00215 	stw	r7,8(sp)
 800cba0:	da000015 	stw	r8,0(sp)
 800cba4:	da400115 	stw	r9,4(sp)
 800cba8:	800bd580 	call	800bd58 <__udivsi3>
 800cbac:	8009883a 	mov	r4,r16
 800cbb0:	a00b883a 	mov	r5,r20
 800cbb4:	1025883a 	mov	r18,r2
 800cbb8:	800bdbc0 	call	800bdbc <__umodsi3>
 800cbbc:	d9c00217 	ldw	r7,8(sp)
 800cbc0:	1004943a 	slli	r2,r2,16
 800cbc4:	bcaf383a 	mul	r23,r23,r18
 800cbc8:	393fffcc 	andi	r4,r7,65535
 800cbcc:	2088b03a 	or	r4,r4,r2
 800cbd0:	d9800317 	ldw	r6,12(sp)
 800cbd4:	da000017 	ldw	r8,0(sp)
 800cbd8:	da400117 	ldw	r9,4(sp)
 800cbdc:	25c0062e 	bgeu	r4,r23,800cbf8 <__divdf3+0x538>
 800cbe0:	2709883a 	add	r4,r4,fp
 800cbe4:	90bfffc4 	addi	r2,r18,-1
 800cbe8:	27009436 	bltu	r4,fp,800ce3c <__divdf3+0x77c>
 800cbec:	25c0932e 	bgeu	r4,r23,800ce3c <__divdf3+0x77c>
 800cbf0:	94bfff84 	addi	r18,r18,-2
 800cbf4:	2709883a 	add	r4,r4,fp
 800cbf8:	4004943a 	slli	r2,r8,16
 800cbfc:	25efc83a 	sub	r23,r4,r23
 800cc00:	1490b03a 	or	r8,r2,r18
 800cc04:	4008d43a 	srli	r4,r8,16
 800cc08:	40ffffcc 	andi	r3,r8,65535
 800cc0c:	30c5383a 	mul	r2,r6,r3
 800cc10:	1a47383a 	mul	r3,r3,r9
 800cc14:	310d383a 	mul	r6,r6,r4
 800cc18:	100ad43a 	srli	r5,r2,16
 800cc1c:	4913383a 	mul	r9,r9,r4
 800cc20:	1987883a 	add	r3,r3,r6
 800cc24:	28c7883a 	add	r3,r5,r3
 800cc28:	1980022e 	bgeu	r3,r6,800cc34 <__divdf3+0x574>
 800cc2c:	01000074 	movhi	r4,1
 800cc30:	4913883a 	add	r9,r9,r4
 800cc34:	1808d43a 	srli	r4,r3,16
 800cc38:	1806943a 	slli	r3,r3,16
 800cc3c:	10bfffcc 	andi	r2,r2,65535
 800cc40:	2253883a 	add	r9,r4,r9
 800cc44:	1887883a 	add	r3,r3,r2
 800cc48:	ba403836 	bltu	r23,r9,800cd2c <__divdf3+0x66c>
 800cc4c:	ba403626 	beq	r23,r9,800cd28 <__divdf3+0x668>
 800cc50:	42000054 	ori	r8,r8,1
 800cc54:	a880ffc4 	addi	r2,r21,1023
 800cc58:	00bf570e 	bge	zero,r2,800c9b8 <__alt_data_end+0xf800c9b8>
 800cc5c:	40c001cc 	andi	r3,r8,7
 800cc60:	18000726 	beq	r3,zero,800cc80 <__divdf3+0x5c0>
 800cc64:	40c003cc 	andi	r3,r8,15
 800cc68:	01000104 	movi	r4,4
 800cc6c:	19000426 	beq	r3,r4,800cc80 <__divdf3+0x5c0>
 800cc70:	4107883a 	add	r3,r8,r4
 800cc74:	1a11803a 	cmpltu	r8,r3,r8
 800cc78:	8a23883a 	add	r17,r17,r8
 800cc7c:	1811883a 	mov	r8,r3
 800cc80:	88c0402c 	andhi	r3,r17,256
 800cc84:	18000426 	beq	r3,zero,800cc98 <__divdf3+0x5d8>
 800cc88:	00ffc034 	movhi	r3,65280
 800cc8c:	18ffffc4 	addi	r3,r3,-1
 800cc90:	a8810004 	addi	r2,r21,1024
 800cc94:	88e2703a 	and	r17,r17,r3
 800cc98:	00c1ff84 	movi	r3,2046
 800cc9c:	18bee316 	blt	r3,r2,800c82c <__alt_data_end+0xf800c82c>
 800cca0:	8824977a 	slli	r18,r17,29
 800cca4:	4010d0fa 	srli	r8,r8,3
 800cca8:	8822927a 	slli	r17,r17,9
 800ccac:	1081ffcc 	andi	r2,r2,2047
 800ccb0:	9224b03a 	or	r18,r18,r8
 800ccb4:	880ad33a 	srli	r5,r17,12
 800ccb8:	98c0004c 	andi	r3,r19,1
 800ccbc:	003edf06 	br	800c83c <__alt_data_end+0xf800c83c>
 800ccc0:	8080022c 	andhi	r2,r16,8
 800ccc4:	10001226 	beq	r2,zero,800cd10 <__divdf3+0x650>
 800ccc8:	8880022c 	andhi	r2,r17,8
 800cccc:	1000101e 	bne	r2,zero,800cd10 <__divdf3+0x650>
 800ccd0:	00800434 	movhi	r2,16
 800ccd4:	89400234 	orhi	r5,r17,8
 800ccd8:	10bfffc4 	addi	r2,r2,-1
 800ccdc:	b007883a 	mov	r3,r22
 800cce0:	288a703a 	and	r5,r5,r2
 800cce4:	4025883a 	mov	r18,r8
 800cce8:	003f3106 	br	800c9b0 <__alt_data_end+0xf800c9b0>
 800ccec:	008000c4 	movi	r2,3
 800ccf0:	3880a626 	beq	r7,r2,800cf8c <__divdf3+0x8cc>
 800ccf4:	00800044 	movi	r2,1
 800ccf8:	3880521e 	bne	r7,r2,800ce44 <__divdf3+0x784>
 800ccfc:	b807883a 	mov	r3,r23
 800cd00:	0005883a 	mov	r2,zero
 800cd04:	000b883a 	mov	r5,zero
 800cd08:	0025883a 	mov	r18,zero
 800cd0c:	003ecb06 	br	800c83c <__alt_data_end+0xf800c83c>
 800cd10:	00800434 	movhi	r2,16
 800cd14:	81400234 	orhi	r5,r16,8
 800cd18:	10bfffc4 	addi	r2,r2,-1
 800cd1c:	a007883a 	mov	r3,r20
 800cd20:	288a703a 	and	r5,r5,r2
 800cd24:	003f2206 	br	800c9b0 <__alt_data_end+0xf800c9b0>
 800cd28:	183fca26 	beq	r3,zero,800cc54 <__alt_data_end+0xf800cc54>
 800cd2c:	e5ef883a 	add	r23,fp,r23
 800cd30:	40bfffc4 	addi	r2,r8,-1
 800cd34:	bf00392e 	bgeu	r23,fp,800ce1c <__divdf3+0x75c>
 800cd38:	1011883a 	mov	r8,r2
 800cd3c:	ba7fc41e 	bne	r23,r9,800cc50 <__alt_data_end+0xf800cc50>
 800cd40:	b0ffc31e 	bne	r22,r3,800cc50 <__alt_data_end+0xf800cc50>
 800cd44:	003fc306 	br	800cc54 <__alt_data_end+0xf800cc54>
 800cd48:	143ff604 	addi	r16,r2,-40
 800cd4c:	9c20983a 	sll	r16,r19,r16
 800cd50:	0025883a 	mov	r18,zero
 800cd54:	003ee206 	br	800c8e0 <__alt_data_end+0xf800c8e0>
 800cd58:	d9800315 	stw	r6,12(sp)
 800cd5c:	d9c00215 	stw	r7,8(sp)
 800cd60:	800e4180 	call	800e418 <__clzsi2>
 800cd64:	10800804 	addi	r2,r2,32
 800cd68:	d9c00217 	ldw	r7,8(sp)
 800cd6c:	d9800317 	ldw	r6,12(sp)
 800cd70:	003ed106 	br	800c8b8 <__alt_data_end+0xf800c8b8>
 800cd74:	147ff604 	addi	r17,r2,-40
 800cd78:	3462983a 	sll	r17,r6,r17
 800cd7c:	0011883a 	mov	r8,zero
 800cd80:	003ef506 	br	800c958 <__alt_data_end+0xf800c958>
 800cd84:	3009883a 	mov	r4,r6
 800cd88:	d9800315 	stw	r6,12(sp)
 800cd8c:	da400115 	stw	r9,4(sp)
 800cd90:	800e4180 	call	800e418 <__clzsi2>
 800cd94:	10800804 	addi	r2,r2,32
 800cd98:	da400117 	ldw	r9,4(sp)
 800cd9c:	d9800317 	ldw	r6,12(sp)
 800cda0:	003ee306 	br	800c930 <__alt_data_end+0xf800c930>
 800cda4:	85a1883a 	add	r16,r16,r22
 800cda8:	8585803a 	cmpltu	r2,r16,r22
 800cdac:	1705883a 	add	r2,r2,fp
 800cdb0:	14a5883a 	add	r18,r2,r18
 800cdb4:	88bfffc4 	addi	r2,r17,-1
 800cdb8:	e4800c2e 	bgeu	fp,r18,800cdec <__divdf3+0x72c>
 800cdbc:	90c03e36 	bltu	r18,r3,800ceb8 <__divdf3+0x7f8>
 800cdc0:	1c806926 	beq	r3,r18,800cf68 <__divdf3+0x8a8>
 800cdc4:	90c7c83a 	sub	r3,r18,r3
 800cdc8:	1023883a 	mov	r17,r2
 800cdcc:	003f5206 	br	800cb18 <__alt_data_end+0xf800cb18>
 800cdd0:	923f0436 	bltu	r18,r8,800c9e4 <__alt_data_end+0xf800c9e4>
 800cdd4:	800897fa 	slli	r4,r16,31
 800cdd8:	9004d07a 	srli	r2,r18,1
 800cddc:	8006d07a 	srli	r3,r16,1
 800cde0:	902097fa 	slli	r16,r18,31
 800cde4:	20a4b03a 	or	r18,r4,r2
 800cde8:	003f0106 	br	800c9f0 <__alt_data_end+0xf800c9f0>
 800cdec:	e4bff51e 	bne	fp,r18,800cdc4 <__alt_data_end+0xf800cdc4>
 800cdf0:	85bff22e 	bgeu	r16,r22,800cdbc <__alt_data_end+0xf800cdbc>
 800cdf4:	e0c7c83a 	sub	r3,fp,r3
 800cdf8:	1023883a 	mov	r17,r2
 800cdfc:	003f4606 	br	800cb18 <__alt_data_end+0xf800cb18>
 800ce00:	100f883a 	mov	r7,r2
 800ce04:	003f2b06 	br	800cab4 <__alt_data_end+0xf800cab4>
 800ce08:	180d883a 	mov	r6,r3
 800ce0c:	003f1306 	br	800ca5c <__alt_data_end+0xf800ca5c>
 800ce10:	813fe436 	bltu	r16,r4,800cda4 <__alt_data_end+0xf800cda4>
 800ce14:	0007883a 	mov	r3,zero
 800ce18:	003f3f06 	br	800cb18 <__alt_data_end+0xf800cb18>
 800ce1c:	ba402c36 	bltu	r23,r9,800ced0 <__divdf3+0x810>
 800ce20:	4dc05426 	beq	r9,r23,800cf74 <__divdf3+0x8b4>
 800ce24:	1011883a 	mov	r8,r2
 800ce28:	003f8906 	br	800cc50 <__alt_data_end+0xf800cc50>
 800ce2c:	023fffc4 	movi	r8,-1
 800ce30:	003f8806 	br	800cc54 <__alt_data_end+0xf800cc54>
 800ce34:	1811883a 	mov	r8,r3
 800ce38:	003f5406 	br	800cb8c <__alt_data_end+0xf800cb8c>
 800ce3c:	1025883a 	mov	r18,r2
 800ce40:	003f6d06 	br	800cbf8 <__alt_data_end+0xf800cbf8>
 800ce44:	b827883a 	mov	r19,r23
 800ce48:	003f8206 	br	800cc54 <__alt_data_end+0xf800cc54>
 800ce4c:	010007c4 	movi	r4,31
 800ce50:	20c02616 	blt	r4,r3,800ceec <__divdf3+0x82c>
 800ce54:	00800804 	movi	r2,32
 800ce58:	10c5c83a 	sub	r2,r2,r3
 800ce5c:	888a983a 	sll	r5,r17,r2
 800ce60:	40c8d83a 	srl	r4,r8,r3
 800ce64:	4084983a 	sll	r2,r8,r2
 800ce68:	88e2d83a 	srl	r17,r17,r3
 800ce6c:	2906b03a 	or	r3,r5,r4
 800ce70:	1004c03a 	cmpne	r2,r2,zero
 800ce74:	1886b03a 	or	r3,r3,r2
 800ce78:	188001cc 	andi	r2,r3,7
 800ce7c:	10000726 	beq	r2,zero,800ce9c <__divdf3+0x7dc>
 800ce80:	188003cc 	andi	r2,r3,15
 800ce84:	01000104 	movi	r4,4
 800ce88:	11000426 	beq	r2,r4,800ce9c <__divdf3+0x7dc>
 800ce8c:	1805883a 	mov	r2,r3
 800ce90:	10c00104 	addi	r3,r2,4
 800ce94:	1885803a 	cmpltu	r2,r3,r2
 800ce98:	88a3883a 	add	r17,r17,r2
 800ce9c:	8880202c 	andhi	r2,r17,128
 800cea0:	10002726 	beq	r2,zero,800cf40 <__divdf3+0x880>
 800cea4:	98c0004c 	andi	r3,r19,1
 800cea8:	00800044 	movi	r2,1
 800ceac:	000b883a 	mov	r5,zero
 800ceb0:	0025883a 	mov	r18,zero
 800ceb4:	003e6106 	br	800c83c <__alt_data_end+0xf800c83c>
 800ceb8:	85a1883a 	add	r16,r16,r22
 800cebc:	8585803a 	cmpltu	r2,r16,r22
 800cec0:	1705883a 	add	r2,r2,fp
 800cec4:	14a5883a 	add	r18,r2,r18
 800cec8:	8c7fff84 	addi	r17,r17,-2
 800cecc:	003f1106 	br	800cb14 <__alt_data_end+0xf800cb14>
 800ced0:	b589883a 	add	r4,r22,r22
 800ced4:	25ad803a 	cmpltu	r22,r4,r22
 800ced8:	b739883a 	add	fp,r22,fp
 800cedc:	40bfff84 	addi	r2,r8,-2
 800cee0:	bf2f883a 	add	r23,r23,fp
 800cee4:	202d883a 	mov	r22,r4
 800cee8:	003f9306 	br	800cd38 <__alt_data_end+0xf800cd38>
 800ceec:	013ff844 	movi	r4,-31
 800cef0:	2085c83a 	sub	r2,r4,r2
 800cef4:	8888d83a 	srl	r4,r17,r2
 800cef8:	00800804 	movi	r2,32
 800cefc:	18802126 	beq	r3,r2,800cf84 <__divdf3+0x8c4>
 800cf00:	00801004 	movi	r2,64
 800cf04:	10c5c83a 	sub	r2,r2,r3
 800cf08:	8884983a 	sll	r2,r17,r2
 800cf0c:	1204b03a 	or	r2,r2,r8
 800cf10:	1004c03a 	cmpne	r2,r2,zero
 800cf14:	2084b03a 	or	r2,r4,r2
 800cf18:	144001cc 	andi	r17,r2,7
 800cf1c:	88000d1e 	bne	r17,zero,800cf54 <__divdf3+0x894>
 800cf20:	000b883a 	mov	r5,zero
 800cf24:	1024d0fa 	srli	r18,r2,3
 800cf28:	98c0004c 	andi	r3,r19,1
 800cf2c:	0005883a 	mov	r2,zero
 800cf30:	9464b03a 	or	r18,r18,r17
 800cf34:	003e4106 	br	800c83c <__alt_data_end+0xf800c83c>
 800cf38:	1007883a 	mov	r3,r2
 800cf3c:	0023883a 	mov	r17,zero
 800cf40:	880a927a 	slli	r5,r17,9
 800cf44:	1805883a 	mov	r2,r3
 800cf48:	8822977a 	slli	r17,r17,29
 800cf4c:	280ad33a 	srli	r5,r5,12
 800cf50:	003ff406 	br	800cf24 <__alt_data_end+0xf800cf24>
 800cf54:	10c003cc 	andi	r3,r2,15
 800cf58:	01000104 	movi	r4,4
 800cf5c:	193ff626 	beq	r3,r4,800cf38 <__alt_data_end+0xf800cf38>
 800cf60:	0023883a 	mov	r17,zero
 800cf64:	003fca06 	br	800ce90 <__alt_data_end+0xf800ce90>
 800cf68:	813fd336 	bltu	r16,r4,800ceb8 <__alt_data_end+0xf800ceb8>
 800cf6c:	1023883a 	mov	r17,r2
 800cf70:	003fa806 	br	800ce14 <__alt_data_end+0xf800ce14>
 800cf74:	b0ffd636 	bltu	r22,r3,800ced0 <__alt_data_end+0xf800ced0>
 800cf78:	1011883a 	mov	r8,r2
 800cf7c:	b0ff341e 	bne	r22,r3,800cc50 <__alt_data_end+0xf800cc50>
 800cf80:	003f3406 	br	800cc54 <__alt_data_end+0xf800cc54>
 800cf84:	0005883a 	mov	r2,zero
 800cf88:	003fe006 	br	800cf0c <__alt_data_end+0xf800cf0c>
 800cf8c:	00800434 	movhi	r2,16
 800cf90:	89400234 	orhi	r5,r17,8
 800cf94:	10bfffc4 	addi	r2,r2,-1
 800cf98:	b807883a 	mov	r3,r23
 800cf9c:	288a703a 	and	r5,r5,r2
 800cfa0:	4025883a 	mov	r18,r8
 800cfa4:	003e8206 	br	800c9b0 <__alt_data_end+0xf800c9b0>

0800cfa8 <__eqdf2>:
 800cfa8:	2804d53a 	srli	r2,r5,20
 800cfac:	3806d53a 	srli	r3,r7,20
 800cfb0:	02000434 	movhi	r8,16
 800cfb4:	423fffc4 	addi	r8,r8,-1
 800cfb8:	1081ffcc 	andi	r2,r2,2047
 800cfbc:	0281ffc4 	movi	r10,2047
 800cfc0:	2a12703a 	and	r9,r5,r8
 800cfc4:	18c1ffcc 	andi	r3,r3,2047
 800cfc8:	3a10703a 	and	r8,r7,r8
 800cfcc:	280ad7fa 	srli	r5,r5,31
 800cfd0:	380ed7fa 	srli	r7,r7,31
 800cfd4:	12801026 	beq	r2,r10,800d018 <__eqdf2+0x70>
 800cfd8:	0281ffc4 	movi	r10,2047
 800cfdc:	1a800a26 	beq	r3,r10,800d008 <__eqdf2+0x60>
 800cfe0:	10c00226 	beq	r2,r3,800cfec <__eqdf2+0x44>
 800cfe4:	00800044 	movi	r2,1
 800cfe8:	f800283a 	ret
 800cfec:	4a3ffd1e 	bne	r9,r8,800cfe4 <__alt_data_end+0xf800cfe4>
 800cff0:	21bffc1e 	bne	r4,r6,800cfe4 <__alt_data_end+0xf800cfe4>
 800cff4:	29c00c26 	beq	r5,r7,800d028 <__eqdf2+0x80>
 800cff8:	103ffa1e 	bne	r2,zero,800cfe4 <__alt_data_end+0xf800cfe4>
 800cffc:	2244b03a 	or	r2,r4,r9
 800d000:	1004c03a 	cmpne	r2,r2,zero
 800d004:	f800283a 	ret
 800d008:	3214b03a 	or	r10,r6,r8
 800d00c:	503ff426 	beq	r10,zero,800cfe0 <__alt_data_end+0xf800cfe0>
 800d010:	00800044 	movi	r2,1
 800d014:	f800283a 	ret
 800d018:	2254b03a 	or	r10,r4,r9
 800d01c:	503fee26 	beq	r10,zero,800cfd8 <__alt_data_end+0xf800cfd8>
 800d020:	00800044 	movi	r2,1
 800d024:	f800283a 	ret
 800d028:	0005883a 	mov	r2,zero
 800d02c:	f800283a 	ret

0800d030 <__gedf2>:
 800d030:	2804d53a 	srli	r2,r5,20
 800d034:	3806d53a 	srli	r3,r7,20
 800d038:	02000434 	movhi	r8,16
 800d03c:	423fffc4 	addi	r8,r8,-1
 800d040:	1081ffcc 	andi	r2,r2,2047
 800d044:	0241ffc4 	movi	r9,2047
 800d048:	2a14703a 	and	r10,r5,r8
 800d04c:	18c1ffcc 	andi	r3,r3,2047
 800d050:	3a10703a 	and	r8,r7,r8
 800d054:	280ad7fa 	srli	r5,r5,31
 800d058:	380ed7fa 	srli	r7,r7,31
 800d05c:	12401d26 	beq	r2,r9,800d0d4 <__gedf2+0xa4>
 800d060:	0241ffc4 	movi	r9,2047
 800d064:	1a401226 	beq	r3,r9,800d0b0 <__gedf2+0x80>
 800d068:	1000081e 	bne	r2,zero,800d08c <__gedf2+0x5c>
 800d06c:	2296b03a 	or	r11,r4,r10
 800d070:	5813003a 	cmpeq	r9,r11,zero
 800d074:	1800091e 	bne	r3,zero,800d09c <__gedf2+0x6c>
 800d078:	3218b03a 	or	r12,r6,r8
 800d07c:	6000071e 	bne	r12,zero,800d09c <__gedf2+0x6c>
 800d080:	0005883a 	mov	r2,zero
 800d084:	5800101e 	bne	r11,zero,800d0c8 <__gedf2+0x98>
 800d088:	f800283a 	ret
 800d08c:	18000c1e 	bne	r3,zero,800d0c0 <__gedf2+0x90>
 800d090:	3212b03a 	or	r9,r6,r8
 800d094:	48000c26 	beq	r9,zero,800d0c8 <__gedf2+0x98>
 800d098:	0013883a 	mov	r9,zero
 800d09c:	39c03fcc 	andi	r7,r7,255
 800d0a0:	48000826 	beq	r9,zero,800d0c4 <__gedf2+0x94>
 800d0a4:	38000926 	beq	r7,zero,800d0cc <__gedf2+0x9c>
 800d0a8:	00800044 	movi	r2,1
 800d0ac:	f800283a 	ret
 800d0b0:	3212b03a 	or	r9,r6,r8
 800d0b4:	483fec26 	beq	r9,zero,800d068 <__alt_data_end+0xf800d068>
 800d0b8:	00bfff84 	movi	r2,-2
 800d0bc:	f800283a 	ret
 800d0c0:	39c03fcc 	andi	r7,r7,255
 800d0c4:	29c00626 	beq	r5,r7,800d0e0 <__gedf2+0xb0>
 800d0c8:	283ff726 	beq	r5,zero,800d0a8 <__alt_data_end+0xf800d0a8>
 800d0cc:	00bfffc4 	movi	r2,-1
 800d0d0:	f800283a 	ret
 800d0d4:	2292b03a 	or	r9,r4,r10
 800d0d8:	483fe126 	beq	r9,zero,800d060 <__alt_data_end+0xf800d060>
 800d0dc:	003ff606 	br	800d0b8 <__alt_data_end+0xf800d0b8>
 800d0e0:	18bff916 	blt	r3,r2,800d0c8 <__alt_data_end+0xf800d0c8>
 800d0e4:	10c00316 	blt	r2,r3,800d0f4 <__gedf2+0xc4>
 800d0e8:	42bff736 	bltu	r8,r10,800d0c8 <__alt_data_end+0xf800d0c8>
 800d0ec:	52000326 	beq	r10,r8,800d0fc <__gedf2+0xcc>
 800d0f0:	5200042e 	bgeu	r10,r8,800d104 <__gedf2+0xd4>
 800d0f4:	283fec1e 	bne	r5,zero,800d0a8 <__alt_data_end+0xf800d0a8>
 800d0f8:	003ff406 	br	800d0cc <__alt_data_end+0xf800d0cc>
 800d0fc:	313ff236 	bltu	r6,r4,800d0c8 <__alt_data_end+0xf800d0c8>
 800d100:	21bffc36 	bltu	r4,r6,800d0f4 <__alt_data_end+0xf800d0f4>
 800d104:	0005883a 	mov	r2,zero
 800d108:	f800283a 	ret

0800d10c <__ledf2>:
 800d10c:	2804d53a 	srli	r2,r5,20
 800d110:	3810d53a 	srli	r8,r7,20
 800d114:	00c00434 	movhi	r3,16
 800d118:	18ffffc4 	addi	r3,r3,-1
 800d11c:	1081ffcc 	andi	r2,r2,2047
 800d120:	0241ffc4 	movi	r9,2047
 800d124:	28d4703a 	and	r10,r5,r3
 800d128:	4201ffcc 	andi	r8,r8,2047
 800d12c:	38c6703a 	and	r3,r7,r3
 800d130:	280ad7fa 	srli	r5,r5,31
 800d134:	380ed7fa 	srli	r7,r7,31
 800d138:	12401f26 	beq	r2,r9,800d1b8 <__ledf2+0xac>
 800d13c:	0241ffc4 	movi	r9,2047
 800d140:	42401426 	beq	r8,r9,800d194 <__ledf2+0x88>
 800d144:	1000091e 	bne	r2,zero,800d16c <__ledf2+0x60>
 800d148:	2296b03a 	or	r11,r4,r10
 800d14c:	5813003a 	cmpeq	r9,r11,zero
 800d150:	29403fcc 	andi	r5,r5,255
 800d154:	40000a1e 	bne	r8,zero,800d180 <__ledf2+0x74>
 800d158:	30d8b03a 	or	r12,r6,r3
 800d15c:	6000081e 	bne	r12,zero,800d180 <__ledf2+0x74>
 800d160:	0005883a 	mov	r2,zero
 800d164:	5800111e 	bne	r11,zero,800d1ac <__ledf2+0xa0>
 800d168:	f800283a 	ret
 800d16c:	29403fcc 	andi	r5,r5,255
 800d170:	40000c1e 	bne	r8,zero,800d1a4 <__ledf2+0x98>
 800d174:	30d2b03a 	or	r9,r6,r3
 800d178:	48000c26 	beq	r9,zero,800d1ac <__ledf2+0xa0>
 800d17c:	0013883a 	mov	r9,zero
 800d180:	39c03fcc 	andi	r7,r7,255
 800d184:	48000826 	beq	r9,zero,800d1a8 <__ledf2+0x9c>
 800d188:	38001126 	beq	r7,zero,800d1d0 <__ledf2+0xc4>
 800d18c:	00800044 	movi	r2,1
 800d190:	f800283a 	ret
 800d194:	30d2b03a 	or	r9,r6,r3
 800d198:	483fea26 	beq	r9,zero,800d144 <__alt_data_end+0xf800d144>
 800d19c:	00800084 	movi	r2,2
 800d1a0:	f800283a 	ret
 800d1a4:	39c03fcc 	andi	r7,r7,255
 800d1a8:	39400726 	beq	r7,r5,800d1c8 <__ledf2+0xbc>
 800d1ac:	2800081e 	bne	r5,zero,800d1d0 <__ledf2+0xc4>
 800d1b0:	00800044 	movi	r2,1
 800d1b4:	f800283a 	ret
 800d1b8:	2292b03a 	or	r9,r4,r10
 800d1bc:	483fdf26 	beq	r9,zero,800d13c <__alt_data_end+0xf800d13c>
 800d1c0:	00800084 	movi	r2,2
 800d1c4:	f800283a 	ret
 800d1c8:	4080030e 	bge	r8,r2,800d1d8 <__ledf2+0xcc>
 800d1cc:	383fef26 	beq	r7,zero,800d18c <__alt_data_end+0xf800d18c>
 800d1d0:	00bfffc4 	movi	r2,-1
 800d1d4:	f800283a 	ret
 800d1d8:	123feb16 	blt	r2,r8,800d188 <__alt_data_end+0xf800d188>
 800d1dc:	1abff336 	bltu	r3,r10,800d1ac <__alt_data_end+0xf800d1ac>
 800d1e0:	50c00326 	beq	r10,r3,800d1f0 <__ledf2+0xe4>
 800d1e4:	50c0042e 	bgeu	r10,r3,800d1f8 <__ledf2+0xec>
 800d1e8:	283fe81e 	bne	r5,zero,800d18c <__alt_data_end+0xf800d18c>
 800d1ec:	003ff806 	br	800d1d0 <__alt_data_end+0xf800d1d0>
 800d1f0:	313fee36 	bltu	r6,r4,800d1ac <__alt_data_end+0xf800d1ac>
 800d1f4:	21bffc36 	bltu	r4,r6,800d1e8 <__alt_data_end+0xf800d1e8>
 800d1f8:	0005883a 	mov	r2,zero
 800d1fc:	f800283a 	ret

0800d200 <__muldf3>:
 800d200:	defff304 	addi	sp,sp,-52
 800d204:	2804d53a 	srli	r2,r5,20
 800d208:	dd800915 	stw	r22,36(sp)
 800d20c:	282cd7fa 	srli	r22,r5,31
 800d210:	dc000315 	stw	r16,12(sp)
 800d214:	04000434 	movhi	r16,16
 800d218:	dd400815 	stw	r21,32(sp)
 800d21c:	dc800515 	stw	r18,20(sp)
 800d220:	843fffc4 	addi	r16,r16,-1
 800d224:	dfc00c15 	stw	ra,48(sp)
 800d228:	df000b15 	stw	fp,44(sp)
 800d22c:	ddc00a15 	stw	r23,40(sp)
 800d230:	dd000715 	stw	r20,28(sp)
 800d234:	dcc00615 	stw	r19,24(sp)
 800d238:	dc400415 	stw	r17,16(sp)
 800d23c:	1481ffcc 	andi	r18,r2,2047
 800d240:	2c20703a 	and	r16,r5,r16
 800d244:	b02b883a 	mov	r21,r22
 800d248:	b2403fcc 	andi	r9,r22,255
 800d24c:	90006026 	beq	r18,zero,800d3d0 <__muldf3+0x1d0>
 800d250:	0081ffc4 	movi	r2,2047
 800d254:	2029883a 	mov	r20,r4
 800d258:	90803626 	beq	r18,r2,800d334 <__muldf3+0x134>
 800d25c:	80800434 	orhi	r2,r16,16
 800d260:	100490fa 	slli	r2,r2,3
 800d264:	2020d77a 	srli	r16,r4,29
 800d268:	202890fa 	slli	r20,r4,3
 800d26c:	94bf0044 	addi	r18,r18,-1023
 800d270:	80a0b03a 	or	r16,r16,r2
 800d274:	0027883a 	mov	r19,zero
 800d278:	0039883a 	mov	fp,zero
 800d27c:	3804d53a 	srli	r2,r7,20
 800d280:	382ed7fa 	srli	r23,r7,31
 800d284:	04400434 	movhi	r17,16
 800d288:	8c7fffc4 	addi	r17,r17,-1
 800d28c:	1081ffcc 	andi	r2,r2,2047
 800d290:	3011883a 	mov	r8,r6
 800d294:	3c62703a 	and	r17,r7,r17
 800d298:	ba803fcc 	andi	r10,r23,255
 800d29c:	10006d26 	beq	r2,zero,800d454 <__muldf3+0x254>
 800d2a0:	00c1ffc4 	movi	r3,2047
 800d2a4:	10c06526 	beq	r2,r3,800d43c <__muldf3+0x23c>
 800d2a8:	88c00434 	orhi	r3,r17,16
 800d2ac:	180690fa 	slli	r3,r3,3
 800d2b0:	3022d77a 	srli	r17,r6,29
 800d2b4:	301090fa 	slli	r8,r6,3
 800d2b8:	10bf0044 	addi	r2,r2,-1023
 800d2bc:	88e2b03a 	or	r17,r17,r3
 800d2c0:	000b883a 	mov	r5,zero
 800d2c4:	9085883a 	add	r2,r18,r2
 800d2c8:	2cc8b03a 	or	r4,r5,r19
 800d2cc:	00c003c4 	movi	r3,15
 800d2d0:	bdacf03a 	xor	r22,r23,r22
 800d2d4:	12c00044 	addi	r11,r2,1
 800d2d8:	19009936 	bltu	r3,r4,800d540 <__muldf3+0x340>
 800d2dc:	200890ba 	slli	r4,r4,2
 800d2e0:	00c20074 	movhi	r3,2049
 800d2e4:	18f4bd04 	addi	r3,r3,-11532
 800d2e8:	20c9883a 	add	r4,r4,r3
 800d2ec:	20c00017 	ldw	r3,0(r4)
 800d2f0:	1800683a 	jmp	r3
 800d2f4:	0800d540 	call	800d54 <__alt_mem_onchip_memory2_0+0x600d54>
 800d2f8:	0800d354 	ori	zero,at,845
 800d2fc:	0800d354 	ori	zero,at,845
 800d300:	0800d350 	cmplti	zero,at,845
 800d304:	0800d51c 	xori	zero,at,852
 800d308:	0800d51c 	xori	zero,at,852
 800d30c:	0800d504 	addi	zero,at,852
 800d310:	0800d350 	cmplti	zero,at,845
 800d314:	0800d51c 	xori	zero,at,852
 800d318:	0800d504 	addi	zero,at,852
 800d31c:	0800d51c 	xori	zero,at,852
 800d320:	0800d350 	cmplti	zero,at,845
 800d324:	0800d52c 	andhi	zero,at,852
 800d328:	0800d52c 	andhi	zero,at,852
 800d32c:	0800d52c 	andhi	zero,at,852
 800d330:	0800d748 	cmpgei	zero,at,861
 800d334:	2404b03a 	or	r2,r4,r16
 800d338:	10006f1e 	bne	r2,zero,800d4f8 <__muldf3+0x2f8>
 800d33c:	04c00204 	movi	r19,8
 800d340:	0021883a 	mov	r16,zero
 800d344:	0029883a 	mov	r20,zero
 800d348:	07000084 	movi	fp,2
 800d34c:	003fcb06 	br	800d27c <__alt_data_end+0xf800d27c>
 800d350:	502d883a 	mov	r22,r10
 800d354:	00800084 	movi	r2,2
 800d358:	28805726 	beq	r5,r2,800d4b8 <__muldf3+0x2b8>
 800d35c:	008000c4 	movi	r2,3
 800d360:	28816626 	beq	r5,r2,800d8fc <__muldf3+0x6fc>
 800d364:	00800044 	movi	r2,1
 800d368:	2881411e 	bne	r5,r2,800d870 <__muldf3+0x670>
 800d36c:	b02b883a 	mov	r21,r22
 800d370:	0005883a 	mov	r2,zero
 800d374:	000b883a 	mov	r5,zero
 800d378:	0029883a 	mov	r20,zero
 800d37c:	1004953a 	slli	r2,r2,20
 800d380:	a8c03fcc 	andi	r3,r21,255
 800d384:	04400434 	movhi	r17,16
 800d388:	8c7fffc4 	addi	r17,r17,-1
 800d38c:	180697fa 	slli	r3,r3,31
 800d390:	2c4a703a 	and	r5,r5,r17
 800d394:	288ab03a 	or	r5,r5,r2
 800d398:	28c6b03a 	or	r3,r5,r3
 800d39c:	a005883a 	mov	r2,r20
 800d3a0:	dfc00c17 	ldw	ra,48(sp)
 800d3a4:	df000b17 	ldw	fp,44(sp)
 800d3a8:	ddc00a17 	ldw	r23,40(sp)
 800d3ac:	dd800917 	ldw	r22,36(sp)
 800d3b0:	dd400817 	ldw	r21,32(sp)
 800d3b4:	dd000717 	ldw	r20,28(sp)
 800d3b8:	dcc00617 	ldw	r19,24(sp)
 800d3bc:	dc800517 	ldw	r18,20(sp)
 800d3c0:	dc400417 	ldw	r17,16(sp)
 800d3c4:	dc000317 	ldw	r16,12(sp)
 800d3c8:	dec00d04 	addi	sp,sp,52
 800d3cc:	f800283a 	ret
 800d3d0:	2404b03a 	or	r2,r4,r16
 800d3d4:	2027883a 	mov	r19,r4
 800d3d8:	10004226 	beq	r2,zero,800d4e4 <__muldf3+0x2e4>
 800d3dc:	8000fc26 	beq	r16,zero,800d7d0 <__muldf3+0x5d0>
 800d3e0:	8009883a 	mov	r4,r16
 800d3e4:	d9800215 	stw	r6,8(sp)
 800d3e8:	d9c00015 	stw	r7,0(sp)
 800d3ec:	da400115 	stw	r9,4(sp)
 800d3f0:	800e4180 	call	800e418 <__clzsi2>
 800d3f4:	d9800217 	ldw	r6,8(sp)
 800d3f8:	d9c00017 	ldw	r7,0(sp)
 800d3fc:	da400117 	ldw	r9,4(sp)
 800d400:	113ffd44 	addi	r4,r2,-11
 800d404:	00c00704 	movi	r3,28
 800d408:	1900ed16 	blt	r3,r4,800d7c0 <__muldf3+0x5c0>
 800d40c:	00c00744 	movi	r3,29
 800d410:	147ffe04 	addi	r17,r2,-8
 800d414:	1907c83a 	sub	r3,r3,r4
 800d418:	8460983a 	sll	r16,r16,r17
 800d41c:	98c6d83a 	srl	r3,r19,r3
 800d420:	9c68983a 	sll	r20,r19,r17
 800d424:	1c20b03a 	or	r16,r3,r16
 800d428:	1080fcc4 	addi	r2,r2,1011
 800d42c:	00a5c83a 	sub	r18,zero,r2
 800d430:	0027883a 	mov	r19,zero
 800d434:	0039883a 	mov	fp,zero
 800d438:	003f9006 	br	800d27c <__alt_data_end+0xf800d27c>
 800d43c:	3446b03a 	or	r3,r6,r17
 800d440:	1800261e 	bne	r3,zero,800d4dc <__muldf3+0x2dc>
 800d444:	0023883a 	mov	r17,zero
 800d448:	0011883a 	mov	r8,zero
 800d44c:	01400084 	movi	r5,2
 800d450:	003f9c06 	br	800d2c4 <__alt_data_end+0xf800d2c4>
 800d454:	3446b03a 	or	r3,r6,r17
 800d458:	18001c26 	beq	r3,zero,800d4cc <__muldf3+0x2cc>
 800d45c:	8800ce26 	beq	r17,zero,800d798 <__muldf3+0x598>
 800d460:	8809883a 	mov	r4,r17
 800d464:	d9800215 	stw	r6,8(sp)
 800d468:	da400115 	stw	r9,4(sp)
 800d46c:	da800015 	stw	r10,0(sp)
 800d470:	800e4180 	call	800e418 <__clzsi2>
 800d474:	d9800217 	ldw	r6,8(sp)
 800d478:	da400117 	ldw	r9,4(sp)
 800d47c:	da800017 	ldw	r10,0(sp)
 800d480:	113ffd44 	addi	r4,r2,-11
 800d484:	00c00704 	movi	r3,28
 800d488:	1900bf16 	blt	r3,r4,800d788 <__muldf3+0x588>
 800d48c:	00c00744 	movi	r3,29
 800d490:	123ffe04 	addi	r8,r2,-8
 800d494:	1907c83a 	sub	r3,r3,r4
 800d498:	8a22983a 	sll	r17,r17,r8
 800d49c:	30c6d83a 	srl	r3,r6,r3
 800d4a0:	3210983a 	sll	r8,r6,r8
 800d4a4:	1c62b03a 	or	r17,r3,r17
 800d4a8:	1080fcc4 	addi	r2,r2,1011
 800d4ac:	0085c83a 	sub	r2,zero,r2
 800d4b0:	000b883a 	mov	r5,zero
 800d4b4:	003f8306 	br	800d2c4 <__alt_data_end+0xf800d2c4>
 800d4b8:	b02b883a 	mov	r21,r22
 800d4bc:	0081ffc4 	movi	r2,2047
 800d4c0:	000b883a 	mov	r5,zero
 800d4c4:	0029883a 	mov	r20,zero
 800d4c8:	003fac06 	br	800d37c <__alt_data_end+0xf800d37c>
 800d4cc:	0023883a 	mov	r17,zero
 800d4d0:	0011883a 	mov	r8,zero
 800d4d4:	01400044 	movi	r5,1
 800d4d8:	003f7a06 	br	800d2c4 <__alt_data_end+0xf800d2c4>
 800d4dc:	014000c4 	movi	r5,3
 800d4e0:	003f7806 	br	800d2c4 <__alt_data_end+0xf800d2c4>
 800d4e4:	04c00104 	movi	r19,4
 800d4e8:	0021883a 	mov	r16,zero
 800d4ec:	0029883a 	mov	r20,zero
 800d4f0:	07000044 	movi	fp,1
 800d4f4:	003f6106 	br	800d27c <__alt_data_end+0xf800d27c>
 800d4f8:	04c00304 	movi	r19,12
 800d4fc:	070000c4 	movi	fp,3
 800d500:	003f5e06 	br	800d27c <__alt_data_end+0xf800d27c>
 800d504:	01400434 	movhi	r5,16
 800d508:	002b883a 	mov	r21,zero
 800d50c:	297fffc4 	addi	r5,r5,-1
 800d510:	053fffc4 	movi	r20,-1
 800d514:	0081ffc4 	movi	r2,2047
 800d518:	003f9806 	br	800d37c <__alt_data_end+0xf800d37c>
 800d51c:	8023883a 	mov	r17,r16
 800d520:	a011883a 	mov	r8,r20
 800d524:	e00b883a 	mov	r5,fp
 800d528:	003f8a06 	br	800d354 <__alt_data_end+0xf800d354>
 800d52c:	8023883a 	mov	r17,r16
 800d530:	a011883a 	mov	r8,r20
 800d534:	482d883a 	mov	r22,r9
 800d538:	e00b883a 	mov	r5,fp
 800d53c:	003f8506 	br	800d354 <__alt_data_end+0xf800d354>
 800d540:	a00ad43a 	srli	r5,r20,16
 800d544:	401ad43a 	srli	r13,r8,16
 800d548:	a53fffcc 	andi	r20,r20,65535
 800d54c:	423fffcc 	andi	r8,r8,65535
 800d550:	4519383a 	mul	r12,r8,r20
 800d554:	4147383a 	mul	r3,r8,r5
 800d558:	6d09383a 	mul	r4,r13,r20
 800d55c:	600cd43a 	srli	r6,r12,16
 800d560:	2b5d383a 	mul	r14,r5,r13
 800d564:	20c9883a 	add	r4,r4,r3
 800d568:	310d883a 	add	r6,r6,r4
 800d56c:	30c0022e 	bgeu	r6,r3,800d578 <__muldf3+0x378>
 800d570:	00c00074 	movhi	r3,1
 800d574:	70dd883a 	add	r14,r14,r3
 800d578:	8826d43a 	srli	r19,r17,16
 800d57c:	8bffffcc 	andi	r15,r17,65535
 800d580:	7d23383a 	mul	r17,r15,r20
 800d584:	7949383a 	mul	r4,r15,r5
 800d588:	9d29383a 	mul	r20,r19,r20
 800d58c:	8814d43a 	srli	r10,r17,16
 800d590:	3012943a 	slli	r9,r6,16
 800d594:	a129883a 	add	r20,r20,r4
 800d598:	633fffcc 	andi	r12,r12,65535
 800d59c:	5515883a 	add	r10,r10,r20
 800d5a0:	3006d43a 	srli	r3,r6,16
 800d5a4:	4b13883a 	add	r9,r9,r12
 800d5a8:	2ccb383a 	mul	r5,r5,r19
 800d5ac:	5100022e 	bgeu	r10,r4,800d5b8 <__muldf3+0x3b8>
 800d5b0:	01000074 	movhi	r4,1
 800d5b4:	290b883a 	add	r5,r5,r4
 800d5b8:	802ad43a 	srli	r21,r16,16
 800d5bc:	843fffcc 	andi	r16,r16,65535
 800d5c0:	440d383a 	mul	r6,r8,r16
 800d5c4:	4565383a 	mul	r18,r8,r21
 800d5c8:	8349383a 	mul	r4,r16,r13
 800d5cc:	500e943a 	slli	r7,r10,16
 800d5d0:	3010d43a 	srli	r8,r6,16
 800d5d4:	5028d43a 	srli	r20,r10,16
 800d5d8:	2489883a 	add	r4,r4,r18
 800d5dc:	8abfffcc 	andi	r10,r17,65535
 800d5e0:	3a95883a 	add	r10,r7,r10
 800d5e4:	4119883a 	add	r12,r8,r4
 800d5e8:	a169883a 	add	r20,r20,r5
 800d5ec:	1a87883a 	add	r3,r3,r10
 800d5f0:	6d5b383a 	mul	r13,r13,r21
 800d5f4:	6480022e 	bgeu	r12,r18,800d600 <__muldf3+0x400>
 800d5f8:	01000074 	movhi	r4,1
 800d5fc:	691b883a 	add	r13,r13,r4
 800d600:	7c25383a 	mul	r18,r15,r16
 800d604:	7d4b383a 	mul	r5,r15,r21
 800d608:	84cf383a 	mul	r7,r16,r19
 800d60c:	901ed43a 	srli	r15,r18,16
 800d610:	6008d43a 	srli	r4,r12,16
 800d614:	6010943a 	slli	r8,r12,16
 800d618:	394f883a 	add	r7,r7,r5
 800d61c:	333fffcc 	andi	r12,r6,65535
 800d620:	79df883a 	add	r15,r15,r7
 800d624:	235b883a 	add	r13,r4,r13
 800d628:	9d63383a 	mul	r17,r19,r21
 800d62c:	4309883a 	add	r4,r8,r12
 800d630:	7940022e 	bgeu	r15,r5,800d63c <__muldf3+0x43c>
 800d634:	01400074 	movhi	r5,1
 800d638:	8963883a 	add	r17,r17,r5
 800d63c:	780a943a 	slli	r5,r15,16
 800d640:	91bfffcc 	andi	r6,r18,65535
 800d644:	70c7883a 	add	r3,r14,r3
 800d648:	298d883a 	add	r6,r5,r6
 800d64c:	1a8f803a 	cmpltu	r7,r3,r10
 800d650:	350b883a 	add	r5,r6,r20
 800d654:	20c7883a 	add	r3,r4,r3
 800d658:	3955883a 	add	r10,r7,r5
 800d65c:	1909803a 	cmpltu	r4,r3,r4
 800d660:	6a91883a 	add	r8,r13,r10
 800d664:	780cd43a 	srli	r6,r15,16
 800d668:	2219883a 	add	r12,r4,r8
 800d66c:	2d0b803a 	cmpltu	r5,r5,r20
 800d670:	51cf803a 	cmpltu	r7,r10,r7
 800d674:	29ceb03a 	or	r7,r5,r7
 800d678:	4351803a 	cmpltu	r8,r8,r13
 800d67c:	610b803a 	cmpltu	r5,r12,r4
 800d680:	4148b03a 	or	r4,r8,r5
 800d684:	398f883a 	add	r7,r7,r6
 800d688:	3909883a 	add	r4,r7,r4
 800d68c:	1810927a 	slli	r8,r3,9
 800d690:	2449883a 	add	r4,r4,r17
 800d694:	2008927a 	slli	r4,r4,9
 800d698:	6022d5fa 	srli	r17,r12,23
 800d69c:	1806d5fa 	srli	r3,r3,23
 800d6a0:	4252b03a 	or	r9,r8,r9
 800d6a4:	600a927a 	slli	r5,r12,9
 800d6a8:	4810c03a 	cmpne	r8,r9,zero
 800d6ac:	2462b03a 	or	r17,r4,r17
 800d6b0:	40c6b03a 	or	r3,r8,r3
 800d6b4:	8900402c 	andhi	r4,r17,256
 800d6b8:	1950b03a 	or	r8,r3,r5
 800d6bc:	20000726 	beq	r4,zero,800d6dc <__muldf3+0x4dc>
 800d6c0:	4006d07a 	srli	r3,r8,1
 800d6c4:	880497fa 	slli	r2,r17,31
 800d6c8:	4200004c 	andi	r8,r8,1
 800d6cc:	8822d07a 	srli	r17,r17,1
 800d6d0:	1a10b03a 	or	r8,r3,r8
 800d6d4:	1210b03a 	or	r8,r2,r8
 800d6d8:	5805883a 	mov	r2,r11
 800d6dc:	1140ffc4 	addi	r5,r2,1023
 800d6e0:	0140440e 	bge	zero,r5,800d7f4 <__muldf3+0x5f4>
 800d6e4:	40c001cc 	andi	r3,r8,7
 800d6e8:	18000726 	beq	r3,zero,800d708 <__muldf3+0x508>
 800d6ec:	40c003cc 	andi	r3,r8,15
 800d6f0:	01000104 	movi	r4,4
 800d6f4:	19000426 	beq	r3,r4,800d708 <__muldf3+0x508>
 800d6f8:	4107883a 	add	r3,r8,r4
 800d6fc:	1a11803a 	cmpltu	r8,r3,r8
 800d700:	8a23883a 	add	r17,r17,r8
 800d704:	1811883a 	mov	r8,r3
 800d708:	88c0402c 	andhi	r3,r17,256
 800d70c:	18000426 	beq	r3,zero,800d720 <__muldf3+0x520>
 800d710:	11410004 	addi	r5,r2,1024
 800d714:	00bfc034 	movhi	r2,65280
 800d718:	10bfffc4 	addi	r2,r2,-1
 800d71c:	88a2703a 	and	r17,r17,r2
 800d720:	0081ff84 	movi	r2,2046
 800d724:	117f6416 	blt	r2,r5,800d4b8 <__alt_data_end+0xf800d4b8>
 800d728:	8828977a 	slli	r20,r17,29
 800d72c:	4010d0fa 	srli	r8,r8,3
 800d730:	8822927a 	slli	r17,r17,9
 800d734:	2881ffcc 	andi	r2,r5,2047
 800d738:	a228b03a 	or	r20,r20,r8
 800d73c:	880ad33a 	srli	r5,r17,12
 800d740:	b02b883a 	mov	r21,r22
 800d744:	003f0d06 	br	800d37c <__alt_data_end+0xf800d37c>
 800d748:	8080022c 	andhi	r2,r16,8
 800d74c:	10000926 	beq	r2,zero,800d774 <__muldf3+0x574>
 800d750:	8880022c 	andhi	r2,r17,8
 800d754:	1000071e 	bne	r2,zero,800d774 <__muldf3+0x574>
 800d758:	00800434 	movhi	r2,16
 800d75c:	89400234 	orhi	r5,r17,8
 800d760:	10bfffc4 	addi	r2,r2,-1
 800d764:	b82b883a 	mov	r21,r23
 800d768:	288a703a 	and	r5,r5,r2
 800d76c:	4029883a 	mov	r20,r8
 800d770:	003f6806 	br	800d514 <__alt_data_end+0xf800d514>
 800d774:	00800434 	movhi	r2,16
 800d778:	81400234 	orhi	r5,r16,8
 800d77c:	10bfffc4 	addi	r2,r2,-1
 800d780:	288a703a 	and	r5,r5,r2
 800d784:	003f6306 	br	800d514 <__alt_data_end+0xf800d514>
 800d788:	147ff604 	addi	r17,r2,-40
 800d78c:	3462983a 	sll	r17,r6,r17
 800d790:	0011883a 	mov	r8,zero
 800d794:	003f4406 	br	800d4a8 <__alt_data_end+0xf800d4a8>
 800d798:	3009883a 	mov	r4,r6
 800d79c:	d9800215 	stw	r6,8(sp)
 800d7a0:	da400115 	stw	r9,4(sp)
 800d7a4:	da800015 	stw	r10,0(sp)
 800d7a8:	800e4180 	call	800e418 <__clzsi2>
 800d7ac:	10800804 	addi	r2,r2,32
 800d7b0:	da800017 	ldw	r10,0(sp)
 800d7b4:	da400117 	ldw	r9,4(sp)
 800d7b8:	d9800217 	ldw	r6,8(sp)
 800d7bc:	003f3006 	br	800d480 <__alt_data_end+0xf800d480>
 800d7c0:	143ff604 	addi	r16,r2,-40
 800d7c4:	9c20983a 	sll	r16,r19,r16
 800d7c8:	0029883a 	mov	r20,zero
 800d7cc:	003f1606 	br	800d428 <__alt_data_end+0xf800d428>
 800d7d0:	d9800215 	stw	r6,8(sp)
 800d7d4:	d9c00015 	stw	r7,0(sp)
 800d7d8:	da400115 	stw	r9,4(sp)
 800d7dc:	800e4180 	call	800e418 <__clzsi2>
 800d7e0:	10800804 	addi	r2,r2,32
 800d7e4:	da400117 	ldw	r9,4(sp)
 800d7e8:	d9c00017 	ldw	r7,0(sp)
 800d7ec:	d9800217 	ldw	r6,8(sp)
 800d7f0:	003f0306 	br	800d400 <__alt_data_end+0xf800d400>
 800d7f4:	00c00044 	movi	r3,1
 800d7f8:	1947c83a 	sub	r3,r3,r5
 800d7fc:	00800e04 	movi	r2,56
 800d800:	10feda16 	blt	r2,r3,800d36c <__alt_data_end+0xf800d36c>
 800d804:	008007c4 	movi	r2,31
 800d808:	10c01b16 	blt	r2,r3,800d878 <__muldf3+0x678>
 800d80c:	00800804 	movi	r2,32
 800d810:	10c5c83a 	sub	r2,r2,r3
 800d814:	888a983a 	sll	r5,r17,r2
 800d818:	40c8d83a 	srl	r4,r8,r3
 800d81c:	4084983a 	sll	r2,r8,r2
 800d820:	88e2d83a 	srl	r17,r17,r3
 800d824:	2906b03a 	or	r3,r5,r4
 800d828:	1004c03a 	cmpne	r2,r2,zero
 800d82c:	1886b03a 	or	r3,r3,r2
 800d830:	188001cc 	andi	r2,r3,7
 800d834:	10000726 	beq	r2,zero,800d854 <__muldf3+0x654>
 800d838:	188003cc 	andi	r2,r3,15
 800d83c:	01000104 	movi	r4,4
 800d840:	11000426 	beq	r2,r4,800d854 <__muldf3+0x654>
 800d844:	1805883a 	mov	r2,r3
 800d848:	10c00104 	addi	r3,r2,4
 800d84c:	1885803a 	cmpltu	r2,r3,r2
 800d850:	88a3883a 	add	r17,r17,r2
 800d854:	8880202c 	andhi	r2,r17,128
 800d858:	10001c26 	beq	r2,zero,800d8cc <__muldf3+0x6cc>
 800d85c:	b02b883a 	mov	r21,r22
 800d860:	00800044 	movi	r2,1
 800d864:	000b883a 	mov	r5,zero
 800d868:	0029883a 	mov	r20,zero
 800d86c:	003ec306 	br	800d37c <__alt_data_end+0xf800d37c>
 800d870:	5805883a 	mov	r2,r11
 800d874:	003f9906 	br	800d6dc <__alt_data_end+0xf800d6dc>
 800d878:	00bff844 	movi	r2,-31
 800d87c:	1145c83a 	sub	r2,r2,r5
 800d880:	8888d83a 	srl	r4,r17,r2
 800d884:	00800804 	movi	r2,32
 800d888:	18801a26 	beq	r3,r2,800d8f4 <__muldf3+0x6f4>
 800d88c:	00801004 	movi	r2,64
 800d890:	10c5c83a 	sub	r2,r2,r3
 800d894:	8884983a 	sll	r2,r17,r2
 800d898:	1204b03a 	or	r2,r2,r8
 800d89c:	1004c03a 	cmpne	r2,r2,zero
 800d8a0:	2084b03a 	or	r2,r4,r2
 800d8a4:	144001cc 	andi	r17,r2,7
 800d8a8:	88000d1e 	bne	r17,zero,800d8e0 <__muldf3+0x6e0>
 800d8ac:	000b883a 	mov	r5,zero
 800d8b0:	1028d0fa 	srli	r20,r2,3
 800d8b4:	b02b883a 	mov	r21,r22
 800d8b8:	0005883a 	mov	r2,zero
 800d8bc:	a468b03a 	or	r20,r20,r17
 800d8c0:	003eae06 	br	800d37c <__alt_data_end+0xf800d37c>
 800d8c4:	1007883a 	mov	r3,r2
 800d8c8:	0023883a 	mov	r17,zero
 800d8cc:	880a927a 	slli	r5,r17,9
 800d8d0:	1805883a 	mov	r2,r3
 800d8d4:	8822977a 	slli	r17,r17,29
 800d8d8:	280ad33a 	srli	r5,r5,12
 800d8dc:	003ff406 	br	800d8b0 <__alt_data_end+0xf800d8b0>
 800d8e0:	10c003cc 	andi	r3,r2,15
 800d8e4:	01000104 	movi	r4,4
 800d8e8:	193ff626 	beq	r3,r4,800d8c4 <__alt_data_end+0xf800d8c4>
 800d8ec:	0023883a 	mov	r17,zero
 800d8f0:	003fd506 	br	800d848 <__alt_data_end+0xf800d848>
 800d8f4:	0005883a 	mov	r2,zero
 800d8f8:	003fe706 	br	800d898 <__alt_data_end+0xf800d898>
 800d8fc:	00800434 	movhi	r2,16
 800d900:	89400234 	orhi	r5,r17,8
 800d904:	10bfffc4 	addi	r2,r2,-1
 800d908:	b02b883a 	mov	r21,r22
 800d90c:	288a703a 	and	r5,r5,r2
 800d910:	4029883a 	mov	r20,r8
 800d914:	003eff06 	br	800d514 <__alt_data_end+0xf800d514>

0800d918 <__subdf3>:
 800d918:	02000434 	movhi	r8,16
 800d91c:	423fffc4 	addi	r8,r8,-1
 800d920:	defffb04 	addi	sp,sp,-20
 800d924:	2a14703a 	and	r10,r5,r8
 800d928:	3812d53a 	srli	r9,r7,20
 800d92c:	3a10703a 	and	r8,r7,r8
 800d930:	2006d77a 	srli	r3,r4,29
 800d934:	3004d77a 	srli	r2,r6,29
 800d938:	dc000015 	stw	r16,0(sp)
 800d93c:	501490fa 	slli	r10,r10,3
 800d940:	2820d53a 	srli	r16,r5,20
 800d944:	401090fa 	slli	r8,r8,3
 800d948:	dc800215 	stw	r18,8(sp)
 800d94c:	dc400115 	stw	r17,4(sp)
 800d950:	dfc00415 	stw	ra,16(sp)
 800d954:	202290fa 	slli	r17,r4,3
 800d958:	dcc00315 	stw	r19,12(sp)
 800d95c:	4a41ffcc 	andi	r9,r9,2047
 800d960:	0101ffc4 	movi	r4,2047
 800d964:	2824d7fa 	srli	r18,r5,31
 800d968:	8401ffcc 	andi	r16,r16,2047
 800d96c:	50c6b03a 	or	r3,r10,r3
 800d970:	380ed7fa 	srli	r7,r7,31
 800d974:	408ab03a 	or	r5,r8,r2
 800d978:	300c90fa 	slli	r6,r6,3
 800d97c:	49009626 	beq	r9,r4,800dbd8 <__subdf3+0x2c0>
 800d980:	39c0005c 	xori	r7,r7,1
 800d984:	8245c83a 	sub	r2,r16,r9
 800d988:	3c807426 	beq	r7,r18,800db5c <__subdf3+0x244>
 800d98c:	0080af0e 	bge	zero,r2,800dc4c <__subdf3+0x334>
 800d990:	48002a1e 	bne	r9,zero,800da3c <__subdf3+0x124>
 800d994:	2988b03a 	or	r4,r5,r6
 800d998:	20009a1e 	bne	r4,zero,800dc04 <__subdf3+0x2ec>
 800d99c:	888001cc 	andi	r2,r17,7
 800d9a0:	10000726 	beq	r2,zero,800d9c0 <__subdf3+0xa8>
 800d9a4:	888003cc 	andi	r2,r17,15
 800d9a8:	01000104 	movi	r4,4
 800d9ac:	11000426 	beq	r2,r4,800d9c0 <__subdf3+0xa8>
 800d9b0:	890b883a 	add	r5,r17,r4
 800d9b4:	2c63803a 	cmpltu	r17,r5,r17
 800d9b8:	1c47883a 	add	r3,r3,r17
 800d9bc:	2823883a 	mov	r17,r5
 800d9c0:	1880202c 	andhi	r2,r3,128
 800d9c4:	10005926 	beq	r2,zero,800db2c <__subdf3+0x214>
 800d9c8:	84000044 	addi	r16,r16,1
 800d9cc:	0081ffc4 	movi	r2,2047
 800d9d0:	8080be26 	beq	r16,r2,800dccc <__subdf3+0x3b4>
 800d9d4:	017fe034 	movhi	r5,65408
 800d9d8:	297fffc4 	addi	r5,r5,-1
 800d9dc:	1946703a 	and	r3,r3,r5
 800d9e0:	1804977a 	slli	r2,r3,29
 800d9e4:	1806927a 	slli	r3,r3,9
 800d9e8:	8822d0fa 	srli	r17,r17,3
 800d9ec:	8401ffcc 	andi	r16,r16,2047
 800d9f0:	180ad33a 	srli	r5,r3,12
 800d9f4:	9100004c 	andi	r4,r18,1
 800d9f8:	1444b03a 	or	r2,r2,r17
 800d9fc:	80c1ffcc 	andi	r3,r16,2047
 800da00:	1820953a 	slli	r16,r3,20
 800da04:	20c03fcc 	andi	r3,r4,255
 800da08:	180897fa 	slli	r4,r3,31
 800da0c:	00c00434 	movhi	r3,16
 800da10:	18ffffc4 	addi	r3,r3,-1
 800da14:	28c6703a 	and	r3,r5,r3
 800da18:	1c06b03a 	or	r3,r3,r16
 800da1c:	1906b03a 	or	r3,r3,r4
 800da20:	dfc00417 	ldw	ra,16(sp)
 800da24:	dcc00317 	ldw	r19,12(sp)
 800da28:	dc800217 	ldw	r18,8(sp)
 800da2c:	dc400117 	ldw	r17,4(sp)
 800da30:	dc000017 	ldw	r16,0(sp)
 800da34:	dec00504 	addi	sp,sp,20
 800da38:	f800283a 	ret
 800da3c:	0101ffc4 	movi	r4,2047
 800da40:	813fd626 	beq	r16,r4,800d99c <__alt_data_end+0xf800d99c>
 800da44:	29402034 	orhi	r5,r5,128
 800da48:	01000e04 	movi	r4,56
 800da4c:	2080a316 	blt	r4,r2,800dcdc <__subdf3+0x3c4>
 800da50:	010007c4 	movi	r4,31
 800da54:	2080c616 	blt	r4,r2,800dd70 <__subdf3+0x458>
 800da58:	01000804 	movi	r4,32
 800da5c:	2089c83a 	sub	r4,r4,r2
 800da60:	2910983a 	sll	r8,r5,r4
 800da64:	308ed83a 	srl	r7,r6,r2
 800da68:	3108983a 	sll	r4,r6,r4
 800da6c:	2884d83a 	srl	r2,r5,r2
 800da70:	41ccb03a 	or	r6,r8,r7
 800da74:	2008c03a 	cmpne	r4,r4,zero
 800da78:	310cb03a 	or	r6,r6,r4
 800da7c:	898dc83a 	sub	r6,r17,r6
 800da80:	89a3803a 	cmpltu	r17,r17,r6
 800da84:	1887c83a 	sub	r3,r3,r2
 800da88:	1c47c83a 	sub	r3,r3,r17
 800da8c:	3023883a 	mov	r17,r6
 800da90:	1880202c 	andhi	r2,r3,128
 800da94:	10002326 	beq	r2,zero,800db24 <__subdf3+0x20c>
 800da98:	04c02034 	movhi	r19,128
 800da9c:	9cffffc4 	addi	r19,r19,-1
 800daa0:	1ce6703a 	and	r19,r3,r19
 800daa4:	98007a26 	beq	r19,zero,800dc90 <__subdf3+0x378>
 800daa8:	9809883a 	mov	r4,r19
 800daac:	800e4180 	call	800e418 <__clzsi2>
 800dab0:	113ffe04 	addi	r4,r2,-8
 800dab4:	00c007c4 	movi	r3,31
 800dab8:	19007b16 	blt	r3,r4,800dca8 <__subdf3+0x390>
 800dabc:	00800804 	movi	r2,32
 800dac0:	1105c83a 	sub	r2,r2,r4
 800dac4:	8884d83a 	srl	r2,r17,r2
 800dac8:	9906983a 	sll	r3,r19,r4
 800dacc:	8922983a 	sll	r17,r17,r4
 800dad0:	10c4b03a 	or	r2,r2,r3
 800dad4:	24007816 	blt	r4,r16,800dcb8 <__subdf3+0x3a0>
 800dad8:	2421c83a 	sub	r16,r4,r16
 800dadc:	80c00044 	addi	r3,r16,1
 800dae0:	010007c4 	movi	r4,31
 800dae4:	20c09516 	blt	r4,r3,800dd3c <__subdf3+0x424>
 800dae8:	01400804 	movi	r5,32
 800daec:	28cbc83a 	sub	r5,r5,r3
 800daf0:	88c8d83a 	srl	r4,r17,r3
 800daf4:	8962983a 	sll	r17,r17,r5
 800daf8:	114a983a 	sll	r5,r2,r5
 800dafc:	10c6d83a 	srl	r3,r2,r3
 800db00:	8804c03a 	cmpne	r2,r17,zero
 800db04:	290ab03a 	or	r5,r5,r4
 800db08:	28a2b03a 	or	r17,r5,r2
 800db0c:	0021883a 	mov	r16,zero
 800db10:	003fa206 	br	800d99c <__alt_data_end+0xf800d99c>
 800db14:	2090b03a 	or	r8,r4,r2
 800db18:	40018e26 	beq	r8,zero,800e154 <__subdf3+0x83c>
 800db1c:	1007883a 	mov	r3,r2
 800db20:	2023883a 	mov	r17,r4
 800db24:	888001cc 	andi	r2,r17,7
 800db28:	103f9e1e 	bne	r2,zero,800d9a4 <__alt_data_end+0xf800d9a4>
 800db2c:	1804977a 	slli	r2,r3,29
 800db30:	8822d0fa 	srli	r17,r17,3
 800db34:	1810d0fa 	srli	r8,r3,3
 800db38:	9100004c 	andi	r4,r18,1
 800db3c:	1444b03a 	or	r2,r2,r17
 800db40:	00c1ffc4 	movi	r3,2047
 800db44:	80c02826 	beq	r16,r3,800dbe8 <__subdf3+0x2d0>
 800db48:	01400434 	movhi	r5,16
 800db4c:	297fffc4 	addi	r5,r5,-1
 800db50:	80e0703a 	and	r16,r16,r3
 800db54:	414a703a 	and	r5,r8,r5
 800db58:	003fa806 	br	800d9fc <__alt_data_end+0xf800d9fc>
 800db5c:	0080630e 	bge	zero,r2,800dcec <__subdf3+0x3d4>
 800db60:	48003026 	beq	r9,zero,800dc24 <__subdf3+0x30c>
 800db64:	0101ffc4 	movi	r4,2047
 800db68:	813f8c26 	beq	r16,r4,800d99c <__alt_data_end+0xf800d99c>
 800db6c:	29402034 	orhi	r5,r5,128
 800db70:	01000e04 	movi	r4,56
 800db74:	2080a90e 	bge	r4,r2,800de1c <__subdf3+0x504>
 800db78:	298cb03a 	or	r6,r5,r6
 800db7c:	3012c03a 	cmpne	r9,r6,zero
 800db80:	0005883a 	mov	r2,zero
 800db84:	4c53883a 	add	r9,r9,r17
 800db88:	4c63803a 	cmpltu	r17,r9,r17
 800db8c:	10c7883a 	add	r3,r2,r3
 800db90:	88c7883a 	add	r3,r17,r3
 800db94:	4823883a 	mov	r17,r9
 800db98:	1880202c 	andhi	r2,r3,128
 800db9c:	1000d026 	beq	r2,zero,800dee0 <__subdf3+0x5c8>
 800dba0:	84000044 	addi	r16,r16,1
 800dba4:	0081ffc4 	movi	r2,2047
 800dba8:	8080fe26 	beq	r16,r2,800dfa4 <__subdf3+0x68c>
 800dbac:	00bfe034 	movhi	r2,65408
 800dbb0:	10bfffc4 	addi	r2,r2,-1
 800dbb4:	1886703a 	and	r3,r3,r2
 800dbb8:	880ad07a 	srli	r5,r17,1
 800dbbc:	180497fa 	slli	r2,r3,31
 800dbc0:	8900004c 	andi	r4,r17,1
 800dbc4:	2922b03a 	or	r17,r5,r4
 800dbc8:	1806d07a 	srli	r3,r3,1
 800dbcc:	1462b03a 	or	r17,r2,r17
 800dbd0:	3825883a 	mov	r18,r7
 800dbd4:	003f7106 	br	800d99c <__alt_data_end+0xf800d99c>
 800dbd8:	2984b03a 	or	r2,r5,r6
 800dbdc:	103f6826 	beq	r2,zero,800d980 <__alt_data_end+0xf800d980>
 800dbe0:	39c03fcc 	andi	r7,r7,255
 800dbe4:	003f6706 	br	800d984 <__alt_data_end+0xf800d984>
 800dbe8:	4086b03a 	or	r3,r8,r2
 800dbec:	18015226 	beq	r3,zero,800e138 <__subdf3+0x820>
 800dbf0:	00c00434 	movhi	r3,16
 800dbf4:	41400234 	orhi	r5,r8,8
 800dbf8:	18ffffc4 	addi	r3,r3,-1
 800dbfc:	28ca703a 	and	r5,r5,r3
 800dc00:	003f7e06 	br	800d9fc <__alt_data_end+0xf800d9fc>
 800dc04:	10bfffc4 	addi	r2,r2,-1
 800dc08:	1000491e 	bne	r2,zero,800dd30 <__subdf3+0x418>
 800dc0c:	898fc83a 	sub	r7,r17,r6
 800dc10:	89e3803a 	cmpltu	r17,r17,r7
 800dc14:	1947c83a 	sub	r3,r3,r5
 800dc18:	1c47c83a 	sub	r3,r3,r17
 800dc1c:	3823883a 	mov	r17,r7
 800dc20:	003f9b06 	br	800da90 <__alt_data_end+0xf800da90>
 800dc24:	2988b03a 	or	r4,r5,r6
 800dc28:	203f5c26 	beq	r4,zero,800d99c <__alt_data_end+0xf800d99c>
 800dc2c:	10bfffc4 	addi	r2,r2,-1
 800dc30:	1000931e 	bne	r2,zero,800de80 <__subdf3+0x568>
 800dc34:	898d883a 	add	r6,r17,r6
 800dc38:	3463803a 	cmpltu	r17,r6,r17
 800dc3c:	1947883a 	add	r3,r3,r5
 800dc40:	88c7883a 	add	r3,r17,r3
 800dc44:	3023883a 	mov	r17,r6
 800dc48:	003fd306 	br	800db98 <__alt_data_end+0xf800db98>
 800dc4c:	1000541e 	bne	r2,zero,800dda0 <__subdf3+0x488>
 800dc50:	80800044 	addi	r2,r16,1
 800dc54:	1081ffcc 	andi	r2,r2,2047
 800dc58:	01000044 	movi	r4,1
 800dc5c:	2080a20e 	bge	r4,r2,800dee8 <__subdf3+0x5d0>
 800dc60:	8989c83a 	sub	r4,r17,r6
 800dc64:	8905803a 	cmpltu	r2,r17,r4
 800dc68:	1967c83a 	sub	r19,r3,r5
 800dc6c:	98a7c83a 	sub	r19,r19,r2
 800dc70:	9880202c 	andhi	r2,r19,128
 800dc74:	10006326 	beq	r2,zero,800de04 <__subdf3+0x4ec>
 800dc78:	3463c83a 	sub	r17,r6,r17
 800dc7c:	28c7c83a 	sub	r3,r5,r3
 800dc80:	344d803a 	cmpltu	r6,r6,r17
 800dc84:	19a7c83a 	sub	r19,r3,r6
 800dc88:	3825883a 	mov	r18,r7
 800dc8c:	983f861e 	bne	r19,zero,800daa8 <__alt_data_end+0xf800daa8>
 800dc90:	8809883a 	mov	r4,r17
 800dc94:	800e4180 	call	800e418 <__clzsi2>
 800dc98:	10800804 	addi	r2,r2,32
 800dc9c:	113ffe04 	addi	r4,r2,-8
 800dca0:	00c007c4 	movi	r3,31
 800dca4:	193f850e 	bge	r3,r4,800dabc <__alt_data_end+0xf800dabc>
 800dca8:	10bff604 	addi	r2,r2,-40
 800dcac:	8884983a 	sll	r2,r17,r2
 800dcb0:	0023883a 	mov	r17,zero
 800dcb4:	243f880e 	bge	r4,r16,800dad8 <__alt_data_end+0xf800dad8>
 800dcb8:	00ffe034 	movhi	r3,65408
 800dcbc:	18ffffc4 	addi	r3,r3,-1
 800dcc0:	8121c83a 	sub	r16,r16,r4
 800dcc4:	10c6703a 	and	r3,r2,r3
 800dcc8:	003f3406 	br	800d99c <__alt_data_end+0xf800d99c>
 800dccc:	9100004c 	andi	r4,r18,1
 800dcd0:	000b883a 	mov	r5,zero
 800dcd4:	0005883a 	mov	r2,zero
 800dcd8:	003f4806 	br	800d9fc <__alt_data_end+0xf800d9fc>
 800dcdc:	298cb03a 	or	r6,r5,r6
 800dce0:	300cc03a 	cmpne	r6,r6,zero
 800dce4:	0005883a 	mov	r2,zero
 800dce8:	003f6406 	br	800da7c <__alt_data_end+0xf800da7c>
 800dcec:	10009a1e 	bne	r2,zero,800df58 <__subdf3+0x640>
 800dcf0:	82400044 	addi	r9,r16,1
 800dcf4:	4881ffcc 	andi	r2,r9,2047
 800dcf8:	02800044 	movi	r10,1
 800dcfc:	5080670e 	bge	r10,r2,800de9c <__subdf3+0x584>
 800dd00:	0081ffc4 	movi	r2,2047
 800dd04:	4880af26 	beq	r9,r2,800dfc4 <__subdf3+0x6ac>
 800dd08:	898d883a 	add	r6,r17,r6
 800dd0c:	1945883a 	add	r2,r3,r5
 800dd10:	3447803a 	cmpltu	r3,r6,r17
 800dd14:	1887883a 	add	r3,r3,r2
 800dd18:	182297fa 	slli	r17,r3,31
 800dd1c:	300cd07a 	srli	r6,r6,1
 800dd20:	1806d07a 	srli	r3,r3,1
 800dd24:	4821883a 	mov	r16,r9
 800dd28:	89a2b03a 	or	r17,r17,r6
 800dd2c:	003f1b06 	br	800d99c <__alt_data_end+0xf800d99c>
 800dd30:	0101ffc4 	movi	r4,2047
 800dd34:	813f441e 	bne	r16,r4,800da48 <__alt_data_end+0xf800da48>
 800dd38:	003f1806 	br	800d99c <__alt_data_end+0xf800d99c>
 800dd3c:	843ff844 	addi	r16,r16,-31
 800dd40:	01400804 	movi	r5,32
 800dd44:	1408d83a 	srl	r4,r2,r16
 800dd48:	19405026 	beq	r3,r5,800de8c <__subdf3+0x574>
 800dd4c:	01401004 	movi	r5,64
 800dd50:	28c7c83a 	sub	r3,r5,r3
 800dd54:	10c4983a 	sll	r2,r2,r3
 800dd58:	88a2b03a 	or	r17,r17,r2
 800dd5c:	8822c03a 	cmpne	r17,r17,zero
 800dd60:	2462b03a 	or	r17,r4,r17
 800dd64:	0007883a 	mov	r3,zero
 800dd68:	0021883a 	mov	r16,zero
 800dd6c:	003f6d06 	br	800db24 <__alt_data_end+0xf800db24>
 800dd70:	11fff804 	addi	r7,r2,-32
 800dd74:	01000804 	movi	r4,32
 800dd78:	29ced83a 	srl	r7,r5,r7
 800dd7c:	11004526 	beq	r2,r4,800de94 <__subdf3+0x57c>
 800dd80:	01001004 	movi	r4,64
 800dd84:	2089c83a 	sub	r4,r4,r2
 800dd88:	2904983a 	sll	r2,r5,r4
 800dd8c:	118cb03a 	or	r6,r2,r6
 800dd90:	300cc03a 	cmpne	r6,r6,zero
 800dd94:	398cb03a 	or	r6,r7,r6
 800dd98:	0005883a 	mov	r2,zero
 800dd9c:	003f3706 	br	800da7c <__alt_data_end+0xf800da7c>
 800dda0:	80002a26 	beq	r16,zero,800de4c <__subdf3+0x534>
 800dda4:	0101ffc4 	movi	r4,2047
 800dda8:	49006626 	beq	r9,r4,800df44 <__subdf3+0x62c>
 800ddac:	0085c83a 	sub	r2,zero,r2
 800ddb0:	18c02034 	orhi	r3,r3,128
 800ddb4:	01000e04 	movi	r4,56
 800ddb8:	20807e16 	blt	r4,r2,800dfb4 <__subdf3+0x69c>
 800ddbc:	010007c4 	movi	r4,31
 800ddc0:	2080e716 	blt	r4,r2,800e160 <__subdf3+0x848>
 800ddc4:	01000804 	movi	r4,32
 800ddc8:	2089c83a 	sub	r4,r4,r2
 800ddcc:	1914983a 	sll	r10,r3,r4
 800ddd0:	8890d83a 	srl	r8,r17,r2
 800ddd4:	8908983a 	sll	r4,r17,r4
 800ddd8:	1884d83a 	srl	r2,r3,r2
 800dddc:	5222b03a 	or	r17,r10,r8
 800dde0:	2006c03a 	cmpne	r3,r4,zero
 800dde4:	88e2b03a 	or	r17,r17,r3
 800dde8:	3463c83a 	sub	r17,r6,r17
 800ddec:	2885c83a 	sub	r2,r5,r2
 800ddf0:	344d803a 	cmpltu	r6,r6,r17
 800ddf4:	1187c83a 	sub	r3,r2,r6
 800ddf8:	4821883a 	mov	r16,r9
 800ddfc:	3825883a 	mov	r18,r7
 800de00:	003f2306 	br	800da90 <__alt_data_end+0xf800da90>
 800de04:	24d0b03a 	or	r8,r4,r19
 800de08:	40001b1e 	bne	r8,zero,800de78 <__subdf3+0x560>
 800de0c:	0005883a 	mov	r2,zero
 800de10:	0009883a 	mov	r4,zero
 800de14:	0021883a 	mov	r16,zero
 800de18:	003f4906 	br	800db40 <__alt_data_end+0xf800db40>
 800de1c:	010007c4 	movi	r4,31
 800de20:	20803a16 	blt	r4,r2,800df0c <__subdf3+0x5f4>
 800de24:	01000804 	movi	r4,32
 800de28:	2089c83a 	sub	r4,r4,r2
 800de2c:	2912983a 	sll	r9,r5,r4
 800de30:	3090d83a 	srl	r8,r6,r2
 800de34:	3108983a 	sll	r4,r6,r4
 800de38:	2884d83a 	srl	r2,r5,r2
 800de3c:	4a12b03a 	or	r9,r9,r8
 800de40:	2008c03a 	cmpne	r4,r4,zero
 800de44:	4912b03a 	or	r9,r9,r4
 800de48:	003f4e06 	br	800db84 <__alt_data_end+0xf800db84>
 800de4c:	1c48b03a 	or	r4,r3,r17
 800de50:	20003c26 	beq	r4,zero,800df44 <__subdf3+0x62c>
 800de54:	0084303a 	nor	r2,zero,r2
 800de58:	1000381e 	bne	r2,zero,800df3c <__subdf3+0x624>
 800de5c:	3463c83a 	sub	r17,r6,r17
 800de60:	28c5c83a 	sub	r2,r5,r3
 800de64:	344d803a 	cmpltu	r6,r6,r17
 800de68:	1187c83a 	sub	r3,r2,r6
 800de6c:	4821883a 	mov	r16,r9
 800de70:	3825883a 	mov	r18,r7
 800de74:	003f0606 	br	800da90 <__alt_data_end+0xf800da90>
 800de78:	2023883a 	mov	r17,r4
 800de7c:	003f0906 	br	800daa4 <__alt_data_end+0xf800daa4>
 800de80:	0101ffc4 	movi	r4,2047
 800de84:	813f3a1e 	bne	r16,r4,800db70 <__alt_data_end+0xf800db70>
 800de88:	003ec406 	br	800d99c <__alt_data_end+0xf800d99c>
 800de8c:	0005883a 	mov	r2,zero
 800de90:	003fb106 	br	800dd58 <__alt_data_end+0xf800dd58>
 800de94:	0005883a 	mov	r2,zero
 800de98:	003fbc06 	br	800dd8c <__alt_data_end+0xf800dd8c>
 800de9c:	1c44b03a 	or	r2,r3,r17
 800dea0:	80008e1e 	bne	r16,zero,800e0dc <__subdf3+0x7c4>
 800dea4:	1000c826 	beq	r2,zero,800e1c8 <__subdf3+0x8b0>
 800dea8:	2984b03a 	or	r2,r5,r6
 800deac:	103ebb26 	beq	r2,zero,800d99c <__alt_data_end+0xf800d99c>
 800deb0:	8989883a 	add	r4,r17,r6
 800deb4:	1945883a 	add	r2,r3,r5
 800deb8:	2447803a 	cmpltu	r3,r4,r17
 800debc:	1887883a 	add	r3,r3,r2
 800dec0:	1880202c 	andhi	r2,r3,128
 800dec4:	2023883a 	mov	r17,r4
 800dec8:	103f1626 	beq	r2,zero,800db24 <__alt_data_end+0xf800db24>
 800decc:	00bfe034 	movhi	r2,65408
 800ded0:	10bfffc4 	addi	r2,r2,-1
 800ded4:	5021883a 	mov	r16,r10
 800ded8:	1886703a 	and	r3,r3,r2
 800dedc:	003eaf06 	br	800d99c <__alt_data_end+0xf800d99c>
 800dee0:	3825883a 	mov	r18,r7
 800dee4:	003f0f06 	br	800db24 <__alt_data_end+0xf800db24>
 800dee8:	1c44b03a 	or	r2,r3,r17
 800deec:	8000251e 	bne	r16,zero,800df84 <__subdf3+0x66c>
 800def0:	1000661e 	bne	r2,zero,800e08c <__subdf3+0x774>
 800def4:	2990b03a 	or	r8,r5,r6
 800def8:	40009626 	beq	r8,zero,800e154 <__subdf3+0x83c>
 800defc:	2807883a 	mov	r3,r5
 800df00:	3023883a 	mov	r17,r6
 800df04:	3825883a 	mov	r18,r7
 800df08:	003ea406 	br	800d99c <__alt_data_end+0xf800d99c>
 800df0c:	127ff804 	addi	r9,r2,-32
 800df10:	01000804 	movi	r4,32
 800df14:	2a52d83a 	srl	r9,r5,r9
 800df18:	11008c26 	beq	r2,r4,800e14c <__subdf3+0x834>
 800df1c:	01001004 	movi	r4,64
 800df20:	2085c83a 	sub	r2,r4,r2
 800df24:	2884983a 	sll	r2,r5,r2
 800df28:	118cb03a 	or	r6,r2,r6
 800df2c:	300cc03a 	cmpne	r6,r6,zero
 800df30:	4992b03a 	or	r9,r9,r6
 800df34:	0005883a 	mov	r2,zero
 800df38:	003f1206 	br	800db84 <__alt_data_end+0xf800db84>
 800df3c:	0101ffc4 	movi	r4,2047
 800df40:	493f9c1e 	bne	r9,r4,800ddb4 <__alt_data_end+0xf800ddb4>
 800df44:	2807883a 	mov	r3,r5
 800df48:	3023883a 	mov	r17,r6
 800df4c:	4821883a 	mov	r16,r9
 800df50:	3825883a 	mov	r18,r7
 800df54:	003e9106 	br	800d99c <__alt_data_end+0xf800d99c>
 800df58:	80001f1e 	bne	r16,zero,800dfd8 <__subdf3+0x6c0>
 800df5c:	1c48b03a 	or	r4,r3,r17
 800df60:	20005a26 	beq	r4,zero,800e0cc <__subdf3+0x7b4>
 800df64:	0084303a 	nor	r2,zero,r2
 800df68:	1000561e 	bne	r2,zero,800e0c4 <__subdf3+0x7ac>
 800df6c:	89a3883a 	add	r17,r17,r6
 800df70:	1945883a 	add	r2,r3,r5
 800df74:	898d803a 	cmpltu	r6,r17,r6
 800df78:	3087883a 	add	r3,r6,r2
 800df7c:	4821883a 	mov	r16,r9
 800df80:	003f0506 	br	800db98 <__alt_data_end+0xf800db98>
 800df84:	10002b1e 	bne	r2,zero,800e034 <__subdf3+0x71c>
 800df88:	2984b03a 	or	r2,r5,r6
 800df8c:	10008026 	beq	r2,zero,800e190 <__subdf3+0x878>
 800df90:	2807883a 	mov	r3,r5
 800df94:	3023883a 	mov	r17,r6
 800df98:	3825883a 	mov	r18,r7
 800df9c:	0401ffc4 	movi	r16,2047
 800dfa0:	003e7e06 	br	800d99c <__alt_data_end+0xf800d99c>
 800dfa4:	3809883a 	mov	r4,r7
 800dfa8:	0011883a 	mov	r8,zero
 800dfac:	0005883a 	mov	r2,zero
 800dfb0:	003ee306 	br	800db40 <__alt_data_end+0xf800db40>
 800dfb4:	1c62b03a 	or	r17,r3,r17
 800dfb8:	8822c03a 	cmpne	r17,r17,zero
 800dfbc:	0005883a 	mov	r2,zero
 800dfc0:	003f8906 	br	800dde8 <__alt_data_end+0xf800dde8>
 800dfc4:	3809883a 	mov	r4,r7
 800dfc8:	4821883a 	mov	r16,r9
 800dfcc:	0011883a 	mov	r8,zero
 800dfd0:	0005883a 	mov	r2,zero
 800dfd4:	003eda06 	br	800db40 <__alt_data_end+0xf800db40>
 800dfd8:	0101ffc4 	movi	r4,2047
 800dfdc:	49003b26 	beq	r9,r4,800e0cc <__subdf3+0x7b4>
 800dfe0:	0085c83a 	sub	r2,zero,r2
 800dfe4:	18c02034 	orhi	r3,r3,128
 800dfe8:	01000e04 	movi	r4,56
 800dfec:	20806e16 	blt	r4,r2,800e1a8 <__subdf3+0x890>
 800dff0:	010007c4 	movi	r4,31
 800dff4:	20807716 	blt	r4,r2,800e1d4 <__subdf3+0x8bc>
 800dff8:	01000804 	movi	r4,32
 800dffc:	2089c83a 	sub	r4,r4,r2
 800e000:	1914983a 	sll	r10,r3,r4
 800e004:	8890d83a 	srl	r8,r17,r2
 800e008:	8908983a 	sll	r4,r17,r4
 800e00c:	1884d83a 	srl	r2,r3,r2
 800e010:	5222b03a 	or	r17,r10,r8
 800e014:	2006c03a 	cmpne	r3,r4,zero
 800e018:	88e2b03a 	or	r17,r17,r3
 800e01c:	89a3883a 	add	r17,r17,r6
 800e020:	1145883a 	add	r2,r2,r5
 800e024:	898d803a 	cmpltu	r6,r17,r6
 800e028:	3087883a 	add	r3,r6,r2
 800e02c:	4821883a 	mov	r16,r9
 800e030:	003ed906 	br	800db98 <__alt_data_end+0xf800db98>
 800e034:	2984b03a 	or	r2,r5,r6
 800e038:	10004226 	beq	r2,zero,800e144 <__subdf3+0x82c>
 800e03c:	1808d0fa 	srli	r4,r3,3
 800e040:	8822d0fa 	srli	r17,r17,3
 800e044:	1806977a 	slli	r3,r3,29
 800e048:	2080022c 	andhi	r2,r4,8
 800e04c:	1c62b03a 	or	r17,r3,r17
 800e050:	10000826 	beq	r2,zero,800e074 <__subdf3+0x75c>
 800e054:	2812d0fa 	srli	r9,r5,3
 800e058:	4880022c 	andhi	r2,r9,8
 800e05c:	1000051e 	bne	r2,zero,800e074 <__subdf3+0x75c>
 800e060:	300cd0fa 	srli	r6,r6,3
 800e064:	2804977a 	slli	r2,r5,29
 800e068:	4809883a 	mov	r4,r9
 800e06c:	3825883a 	mov	r18,r7
 800e070:	11a2b03a 	or	r17,r2,r6
 800e074:	8806d77a 	srli	r3,r17,29
 800e078:	200890fa 	slli	r4,r4,3
 800e07c:	882290fa 	slli	r17,r17,3
 800e080:	0401ffc4 	movi	r16,2047
 800e084:	1906b03a 	or	r3,r3,r4
 800e088:	003e4406 	br	800d99c <__alt_data_end+0xf800d99c>
 800e08c:	2984b03a 	or	r2,r5,r6
 800e090:	103e4226 	beq	r2,zero,800d99c <__alt_data_end+0xf800d99c>
 800e094:	8989c83a 	sub	r4,r17,r6
 800e098:	8911803a 	cmpltu	r8,r17,r4
 800e09c:	1945c83a 	sub	r2,r3,r5
 800e0a0:	1205c83a 	sub	r2,r2,r8
 800e0a4:	1200202c 	andhi	r8,r2,128
 800e0a8:	403e9a26 	beq	r8,zero,800db14 <__alt_data_end+0xf800db14>
 800e0ac:	3463c83a 	sub	r17,r6,r17
 800e0b0:	28c5c83a 	sub	r2,r5,r3
 800e0b4:	344d803a 	cmpltu	r6,r6,r17
 800e0b8:	1187c83a 	sub	r3,r2,r6
 800e0bc:	3825883a 	mov	r18,r7
 800e0c0:	003e3606 	br	800d99c <__alt_data_end+0xf800d99c>
 800e0c4:	0101ffc4 	movi	r4,2047
 800e0c8:	493fc71e 	bne	r9,r4,800dfe8 <__alt_data_end+0xf800dfe8>
 800e0cc:	2807883a 	mov	r3,r5
 800e0d0:	3023883a 	mov	r17,r6
 800e0d4:	4821883a 	mov	r16,r9
 800e0d8:	003e3006 	br	800d99c <__alt_data_end+0xf800d99c>
 800e0dc:	10003626 	beq	r2,zero,800e1b8 <__subdf3+0x8a0>
 800e0e0:	2984b03a 	or	r2,r5,r6
 800e0e4:	10001726 	beq	r2,zero,800e144 <__subdf3+0x82c>
 800e0e8:	1808d0fa 	srli	r4,r3,3
 800e0ec:	8822d0fa 	srli	r17,r17,3
 800e0f0:	1806977a 	slli	r3,r3,29
 800e0f4:	2080022c 	andhi	r2,r4,8
 800e0f8:	1c62b03a 	or	r17,r3,r17
 800e0fc:	10000726 	beq	r2,zero,800e11c <__subdf3+0x804>
 800e100:	2812d0fa 	srli	r9,r5,3
 800e104:	4880022c 	andhi	r2,r9,8
 800e108:	1000041e 	bne	r2,zero,800e11c <__subdf3+0x804>
 800e10c:	300cd0fa 	srli	r6,r6,3
 800e110:	2804977a 	slli	r2,r5,29
 800e114:	4809883a 	mov	r4,r9
 800e118:	11a2b03a 	or	r17,r2,r6
 800e11c:	8806d77a 	srli	r3,r17,29
 800e120:	200890fa 	slli	r4,r4,3
 800e124:	882290fa 	slli	r17,r17,3
 800e128:	3825883a 	mov	r18,r7
 800e12c:	1906b03a 	or	r3,r3,r4
 800e130:	0401ffc4 	movi	r16,2047
 800e134:	003e1906 	br	800d99c <__alt_data_end+0xf800d99c>
 800e138:	000b883a 	mov	r5,zero
 800e13c:	0005883a 	mov	r2,zero
 800e140:	003e2e06 	br	800d9fc <__alt_data_end+0xf800d9fc>
 800e144:	0401ffc4 	movi	r16,2047
 800e148:	003e1406 	br	800d99c <__alt_data_end+0xf800d99c>
 800e14c:	0005883a 	mov	r2,zero
 800e150:	003f7506 	br	800df28 <__alt_data_end+0xf800df28>
 800e154:	0005883a 	mov	r2,zero
 800e158:	0009883a 	mov	r4,zero
 800e15c:	003e7806 	br	800db40 <__alt_data_end+0xf800db40>
 800e160:	123ff804 	addi	r8,r2,-32
 800e164:	01000804 	movi	r4,32
 800e168:	1a10d83a 	srl	r8,r3,r8
 800e16c:	11002526 	beq	r2,r4,800e204 <__subdf3+0x8ec>
 800e170:	01001004 	movi	r4,64
 800e174:	2085c83a 	sub	r2,r4,r2
 800e178:	1884983a 	sll	r2,r3,r2
 800e17c:	1444b03a 	or	r2,r2,r17
 800e180:	1004c03a 	cmpne	r2,r2,zero
 800e184:	40a2b03a 	or	r17,r8,r2
 800e188:	0005883a 	mov	r2,zero
 800e18c:	003f1606 	br	800dde8 <__alt_data_end+0xf800dde8>
 800e190:	02000434 	movhi	r8,16
 800e194:	0009883a 	mov	r4,zero
 800e198:	423fffc4 	addi	r8,r8,-1
 800e19c:	00bfffc4 	movi	r2,-1
 800e1a0:	0401ffc4 	movi	r16,2047
 800e1a4:	003e6606 	br	800db40 <__alt_data_end+0xf800db40>
 800e1a8:	1c62b03a 	or	r17,r3,r17
 800e1ac:	8822c03a 	cmpne	r17,r17,zero
 800e1b0:	0005883a 	mov	r2,zero
 800e1b4:	003f9906 	br	800e01c <__alt_data_end+0xf800e01c>
 800e1b8:	2807883a 	mov	r3,r5
 800e1bc:	3023883a 	mov	r17,r6
 800e1c0:	0401ffc4 	movi	r16,2047
 800e1c4:	003df506 	br	800d99c <__alt_data_end+0xf800d99c>
 800e1c8:	2807883a 	mov	r3,r5
 800e1cc:	3023883a 	mov	r17,r6
 800e1d0:	003df206 	br	800d99c <__alt_data_end+0xf800d99c>
 800e1d4:	123ff804 	addi	r8,r2,-32
 800e1d8:	01000804 	movi	r4,32
 800e1dc:	1a10d83a 	srl	r8,r3,r8
 800e1e0:	11000a26 	beq	r2,r4,800e20c <__subdf3+0x8f4>
 800e1e4:	01001004 	movi	r4,64
 800e1e8:	2085c83a 	sub	r2,r4,r2
 800e1ec:	1884983a 	sll	r2,r3,r2
 800e1f0:	1444b03a 	or	r2,r2,r17
 800e1f4:	1004c03a 	cmpne	r2,r2,zero
 800e1f8:	40a2b03a 	or	r17,r8,r2
 800e1fc:	0005883a 	mov	r2,zero
 800e200:	003f8606 	br	800e01c <__alt_data_end+0xf800e01c>
 800e204:	0005883a 	mov	r2,zero
 800e208:	003fdc06 	br	800e17c <__alt_data_end+0xf800e17c>
 800e20c:	0005883a 	mov	r2,zero
 800e210:	003ff706 	br	800e1f0 <__alt_data_end+0xf800e1f0>

0800e214 <__fixdfsi>:
 800e214:	280cd53a 	srli	r6,r5,20
 800e218:	00c00434 	movhi	r3,16
 800e21c:	18ffffc4 	addi	r3,r3,-1
 800e220:	3181ffcc 	andi	r6,r6,2047
 800e224:	01c0ff84 	movi	r7,1022
 800e228:	28c6703a 	and	r3,r5,r3
 800e22c:	280ad7fa 	srli	r5,r5,31
 800e230:	3980120e 	bge	r7,r6,800e27c <__fixdfsi+0x68>
 800e234:	00810744 	movi	r2,1053
 800e238:	11800c16 	blt	r2,r6,800e26c <__fixdfsi+0x58>
 800e23c:	00810cc4 	movi	r2,1075
 800e240:	1185c83a 	sub	r2,r2,r6
 800e244:	01c007c4 	movi	r7,31
 800e248:	18c00434 	orhi	r3,r3,16
 800e24c:	38800d16 	blt	r7,r2,800e284 <__fixdfsi+0x70>
 800e250:	31befb44 	addi	r6,r6,-1043
 800e254:	2084d83a 	srl	r2,r4,r2
 800e258:	1986983a 	sll	r3,r3,r6
 800e25c:	1884b03a 	or	r2,r3,r2
 800e260:	28000726 	beq	r5,zero,800e280 <__fixdfsi+0x6c>
 800e264:	0085c83a 	sub	r2,zero,r2
 800e268:	f800283a 	ret
 800e26c:	00a00034 	movhi	r2,32768
 800e270:	10bfffc4 	addi	r2,r2,-1
 800e274:	2885883a 	add	r2,r5,r2
 800e278:	f800283a 	ret
 800e27c:	0005883a 	mov	r2,zero
 800e280:	f800283a 	ret
 800e284:	008104c4 	movi	r2,1043
 800e288:	1185c83a 	sub	r2,r2,r6
 800e28c:	1884d83a 	srl	r2,r3,r2
 800e290:	003ff306 	br	800e260 <__alt_data_end+0xf800e260>

0800e294 <__floatsidf>:
 800e294:	defffd04 	addi	sp,sp,-12
 800e298:	dfc00215 	stw	ra,8(sp)
 800e29c:	dc400115 	stw	r17,4(sp)
 800e2a0:	dc000015 	stw	r16,0(sp)
 800e2a4:	20002b26 	beq	r4,zero,800e354 <__floatsidf+0xc0>
 800e2a8:	2023883a 	mov	r17,r4
 800e2ac:	2020d7fa 	srli	r16,r4,31
 800e2b0:	20002d16 	blt	r4,zero,800e368 <__floatsidf+0xd4>
 800e2b4:	8809883a 	mov	r4,r17
 800e2b8:	800e4180 	call	800e418 <__clzsi2>
 800e2bc:	01410784 	movi	r5,1054
 800e2c0:	288bc83a 	sub	r5,r5,r2
 800e2c4:	01010cc4 	movi	r4,1075
 800e2c8:	2149c83a 	sub	r4,r4,r5
 800e2cc:	00c007c4 	movi	r3,31
 800e2d0:	1900160e 	bge	r3,r4,800e32c <__floatsidf+0x98>
 800e2d4:	00c104c4 	movi	r3,1043
 800e2d8:	1947c83a 	sub	r3,r3,r5
 800e2dc:	88c6983a 	sll	r3,r17,r3
 800e2e0:	00800434 	movhi	r2,16
 800e2e4:	10bfffc4 	addi	r2,r2,-1
 800e2e8:	1886703a 	and	r3,r3,r2
 800e2ec:	2941ffcc 	andi	r5,r5,2047
 800e2f0:	800d883a 	mov	r6,r16
 800e2f4:	0005883a 	mov	r2,zero
 800e2f8:	280a953a 	slli	r5,r5,20
 800e2fc:	31803fcc 	andi	r6,r6,255
 800e300:	01000434 	movhi	r4,16
 800e304:	300c97fa 	slli	r6,r6,31
 800e308:	213fffc4 	addi	r4,r4,-1
 800e30c:	1906703a 	and	r3,r3,r4
 800e310:	1946b03a 	or	r3,r3,r5
 800e314:	1986b03a 	or	r3,r3,r6
 800e318:	dfc00217 	ldw	ra,8(sp)
 800e31c:	dc400117 	ldw	r17,4(sp)
 800e320:	dc000017 	ldw	r16,0(sp)
 800e324:	dec00304 	addi	sp,sp,12
 800e328:	f800283a 	ret
 800e32c:	00c002c4 	movi	r3,11
 800e330:	1887c83a 	sub	r3,r3,r2
 800e334:	88c6d83a 	srl	r3,r17,r3
 800e338:	8904983a 	sll	r2,r17,r4
 800e33c:	01000434 	movhi	r4,16
 800e340:	213fffc4 	addi	r4,r4,-1
 800e344:	2941ffcc 	andi	r5,r5,2047
 800e348:	1906703a 	and	r3,r3,r4
 800e34c:	800d883a 	mov	r6,r16
 800e350:	003fe906 	br	800e2f8 <__alt_data_end+0xf800e2f8>
 800e354:	000d883a 	mov	r6,zero
 800e358:	000b883a 	mov	r5,zero
 800e35c:	0007883a 	mov	r3,zero
 800e360:	0005883a 	mov	r2,zero
 800e364:	003fe406 	br	800e2f8 <__alt_data_end+0xf800e2f8>
 800e368:	0123c83a 	sub	r17,zero,r4
 800e36c:	003fd106 	br	800e2b4 <__alt_data_end+0xf800e2b4>

0800e370 <__floatunsidf>:
 800e370:	defffe04 	addi	sp,sp,-8
 800e374:	dc000015 	stw	r16,0(sp)
 800e378:	dfc00115 	stw	ra,4(sp)
 800e37c:	2021883a 	mov	r16,r4
 800e380:	20002226 	beq	r4,zero,800e40c <__floatunsidf+0x9c>
 800e384:	800e4180 	call	800e418 <__clzsi2>
 800e388:	01010784 	movi	r4,1054
 800e38c:	2089c83a 	sub	r4,r4,r2
 800e390:	01810cc4 	movi	r6,1075
 800e394:	310dc83a 	sub	r6,r6,r4
 800e398:	00c007c4 	movi	r3,31
 800e39c:	1980120e 	bge	r3,r6,800e3e8 <__floatunsidf+0x78>
 800e3a0:	00c104c4 	movi	r3,1043
 800e3a4:	1907c83a 	sub	r3,r3,r4
 800e3a8:	80ca983a 	sll	r5,r16,r3
 800e3ac:	00800434 	movhi	r2,16
 800e3b0:	10bfffc4 	addi	r2,r2,-1
 800e3b4:	2101ffcc 	andi	r4,r4,2047
 800e3b8:	0021883a 	mov	r16,zero
 800e3bc:	288a703a 	and	r5,r5,r2
 800e3c0:	2008953a 	slli	r4,r4,20
 800e3c4:	00c00434 	movhi	r3,16
 800e3c8:	18ffffc4 	addi	r3,r3,-1
 800e3cc:	28c6703a 	and	r3,r5,r3
 800e3d0:	8005883a 	mov	r2,r16
 800e3d4:	1906b03a 	or	r3,r3,r4
 800e3d8:	dfc00117 	ldw	ra,4(sp)
 800e3dc:	dc000017 	ldw	r16,0(sp)
 800e3e0:	dec00204 	addi	sp,sp,8
 800e3e4:	f800283a 	ret
 800e3e8:	00c002c4 	movi	r3,11
 800e3ec:	188bc83a 	sub	r5,r3,r2
 800e3f0:	814ad83a 	srl	r5,r16,r5
 800e3f4:	00c00434 	movhi	r3,16
 800e3f8:	18ffffc4 	addi	r3,r3,-1
 800e3fc:	81a0983a 	sll	r16,r16,r6
 800e400:	2101ffcc 	andi	r4,r4,2047
 800e404:	28ca703a 	and	r5,r5,r3
 800e408:	003fed06 	br	800e3c0 <__alt_data_end+0xf800e3c0>
 800e40c:	0009883a 	mov	r4,zero
 800e410:	000b883a 	mov	r5,zero
 800e414:	003fea06 	br	800e3c0 <__alt_data_end+0xf800e3c0>

0800e418 <__clzsi2>:
 800e418:	00bfffd4 	movui	r2,65535
 800e41c:	11000536 	bltu	r2,r4,800e434 <__clzsi2+0x1c>
 800e420:	00803fc4 	movi	r2,255
 800e424:	11000f36 	bltu	r2,r4,800e464 <__clzsi2+0x4c>
 800e428:	00800804 	movi	r2,32
 800e42c:	0007883a 	mov	r3,zero
 800e430:	00000506 	br	800e448 <__clzsi2+0x30>
 800e434:	00804034 	movhi	r2,256
 800e438:	10bfffc4 	addi	r2,r2,-1
 800e43c:	11000c2e 	bgeu	r2,r4,800e470 <__clzsi2+0x58>
 800e440:	00800204 	movi	r2,8
 800e444:	00c00604 	movi	r3,24
 800e448:	20c8d83a 	srl	r4,r4,r3
 800e44c:	00c20074 	movhi	r3,2049
 800e450:	18d7b604 	addi	r3,r3,24280
 800e454:	1909883a 	add	r4,r3,r4
 800e458:	20c00003 	ldbu	r3,0(r4)
 800e45c:	10c5c83a 	sub	r2,r2,r3
 800e460:	f800283a 	ret
 800e464:	00800604 	movi	r2,24
 800e468:	00c00204 	movi	r3,8
 800e46c:	003ff606 	br	800e448 <__alt_data_end+0xf800e448>
 800e470:	00800404 	movi	r2,16
 800e474:	1007883a 	mov	r3,r2
 800e478:	003ff306 	br	800e448 <__alt_data_end+0xf800e448>

0800e47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e47c:	defffe04 	addi	sp,sp,-8
 800e480:	dfc00115 	stw	ra,4(sp)
 800e484:	df000015 	stw	fp,0(sp)
 800e488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e48c:	d0a00b17 	ldw	r2,-32724(gp)
 800e490:	10000326 	beq	r2,zero,800e4a0 <alt_get_errno+0x24>
 800e494:	d0a00b17 	ldw	r2,-32724(gp)
 800e498:	103ee83a 	callr	r2
 800e49c:	00000106 	br	800e4a4 <alt_get_errno+0x28>
 800e4a0:	d0a6e204 	addi	r2,gp,-25720
}
 800e4a4:	e037883a 	mov	sp,fp
 800e4a8:	dfc00117 	ldw	ra,4(sp)
 800e4ac:	df000017 	ldw	fp,0(sp)
 800e4b0:	dec00204 	addi	sp,sp,8
 800e4b4:	f800283a 	ret

0800e4b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e4b8:	defffb04 	addi	sp,sp,-20
 800e4bc:	dfc00415 	stw	ra,16(sp)
 800e4c0:	df000315 	stw	fp,12(sp)
 800e4c4:	df000304 	addi	fp,sp,12
 800e4c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e4cc:	e0bfff17 	ldw	r2,-4(fp)
 800e4d0:	10000616 	blt	r2,zero,800e4ec <close+0x34>
 800e4d4:	e0bfff17 	ldw	r2,-4(fp)
 800e4d8:	10c00324 	muli	r3,r2,12
 800e4dc:	00820074 	movhi	r2,2049
 800e4e0:	109a3d04 	addi	r2,r2,26868
 800e4e4:	1885883a 	add	r2,r3,r2
 800e4e8:	00000106 	br	800e4f0 <close+0x38>
 800e4ec:	0005883a 	mov	r2,zero
 800e4f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e4f4:	e0bffd17 	ldw	r2,-12(fp)
 800e4f8:	10001926 	beq	r2,zero,800e560 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e4fc:	e0bffd17 	ldw	r2,-12(fp)
 800e500:	10800017 	ldw	r2,0(r2)
 800e504:	10800417 	ldw	r2,16(r2)
 800e508:	10000626 	beq	r2,zero,800e524 <close+0x6c>
 800e50c:	e0bffd17 	ldw	r2,-12(fp)
 800e510:	10800017 	ldw	r2,0(r2)
 800e514:	10800417 	ldw	r2,16(r2)
 800e518:	e13ffd17 	ldw	r4,-12(fp)
 800e51c:	103ee83a 	callr	r2
 800e520:	00000106 	br	800e528 <close+0x70>
 800e524:	0005883a 	mov	r2,zero
 800e528:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e52c:	e13fff17 	ldw	r4,-4(fp)
 800e530:	800edcc0 	call	800edcc <alt_release_fd>
    if (rval < 0)
 800e534:	e0bffe17 	ldw	r2,-8(fp)
 800e538:	1000070e 	bge	r2,zero,800e558 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800e53c:	800e47c0 	call	800e47c <alt_get_errno>
 800e540:	1007883a 	mov	r3,r2
 800e544:	e0bffe17 	ldw	r2,-8(fp)
 800e548:	0085c83a 	sub	r2,zero,r2
 800e54c:	18800015 	stw	r2,0(r3)
      return -1;
 800e550:	00bfffc4 	movi	r2,-1
 800e554:	00000706 	br	800e574 <close+0xbc>
    }
    return 0;
 800e558:	0005883a 	mov	r2,zero
 800e55c:	00000506 	br	800e574 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e560:	800e47c0 	call	800e47c <alt_get_errno>
 800e564:	1007883a 	mov	r3,r2
 800e568:	00801444 	movi	r2,81
 800e56c:	18800015 	stw	r2,0(r3)
    return -1;
 800e570:	00bfffc4 	movi	r2,-1
  }
}
 800e574:	e037883a 	mov	sp,fp
 800e578:	dfc00117 	ldw	ra,4(sp)
 800e57c:	df000017 	ldw	fp,0(sp)
 800e580:	dec00204 	addi	sp,sp,8
 800e584:	f800283a 	ret

0800e588 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e588:	defffc04 	addi	sp,sp,-16
 800e58c:	df000315 	stw	fp,12(sp)
 800e590:	df000304 	addi	fp,sp,12
 800e594:	e13ffd15 	stw	r4,-12(fp)
 800e598:	e17ffe15 	stw	r5,-8(fp)
 800e59c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e5a0:	e0bfff17 	ldw	r2,-4(fp)
}
 800e5a4:	e037883a 	mov	sp,fp
 800e5a8:	df000017 	ldw	fp,0(sp)
 800e5ac:	dec00104 	addi	sp,sp,4
 800e5b0:	f800283a 	ret

0800e5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e5b4:	defffe04 	addi	sp,sp,-8
 800e5b8:	dfc00115 	stw	ra,4(sp)
 800e5bc:	df000015 	stw	fp,0(sp)
 800e5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e5c4:	d0a00b17 	ldw	r2,-32724(gp)
 800e5c8:	10000326 	beq	r2,zero,800e5d8 <alt_get_errno+0x24>
 800e5cc:	d0a00b17 	ldw	r2,-32724(gp)
 800e5d0:	103ee83a 	callr	r2
 800e5d4:	00000106 	br	800e5dc <alt_get_errno+0x28>
 800e5d8:	d0a6e204 	addi	r2,gp,-25720
}
 800e5dc:	e037883a 	mov	sp,fp
 800e5e0:	dfc00117 	ldw	ra,4(sp)
 800e5e4:	df000017 	ldw	fp,0(sp)
 800e5e8:	dec00204 	addi	sp,sp,8
 800e5ec:	f800283a 	ret

0800e5f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e5f0:	defffb04 	addi	sp,sp,-20
 800e5f4:	dfc00415 	stw	ra,16(sp)
 800e5f8:	df000315 	stw	fp,12(sp)
 800e5fc:	df000304 	addi	fp,sp,12
 800e600:	e13ffe15 	stw	r4,-8(fp)
 800e604:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e608:	e0bffe17 	ldw	r2,-8(fp)
 800e60c:	10000616 	blt	r2,zero,800e628 <fstat+0x38>
 800e610:	e0bffe17 	ldw	r2,-8(fp)
 800e614:	10c00324 	muli	r3,r2,12
 800e618:	00820074 	movhi	r2,2049
 800e61c:	109a3d04 	addi	r2,r2,26868
 800e620:	1885883a 	add	r2,r3,r2
 800e624:	00000106 	br	800e62c <fstat+0x3c>
 800e628:	0005883a 	mov	r2,zero
 800e62c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800e630:	e0bffd17 	ldw	r2,-12(fp)
 800e634:	10001026 	beq	r2,zero,800e678 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e638:	e0bffd17 	ldw	r2,-12(fp)
 800e63c:	10800017 	ldw	r2,0(r2)
 800e640:	10800817 	ldw	r2,32(r2)
 800e644:	10000726 	beq	r2,zero,800e664 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800e648:	e0bffd17 	ldw	r2,-12(fp)
 800e64c:	10800017 	ldw	r2,0(r2)
 800e650:	10800817 	ldw	r2,32(r2)
 800e654:	e17fff17 	ldw	r5,-4(fp)
 800e658:	e13ffd17 	ldw	r4,-12(fp)
 800e65c:	103ee83a 	callr	r2
 800e660:	00000a06 	br	800e68c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e664:	e0bfff17 	ldw	r2,-4(fp)
 800e668:	00c80004 	movi	r3,8192
 800e66c:	10c00115 	stw	r3,4(r2)
      return 0;
 800e670:	0005883a 	mov	r2,zero
 800e674:	00000506 	br	800e68c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e678:	800e5b40 	call	800e5b4 <alt_get_errno>
 800e67c:	1007883a 	mov	r3,r2
 800e680:	00801444 	movi	r2,81
 800e684:	18800015 	stw	r2,0(r3)
    return -1;
 800e688:	00bfffc4 	movi	r2,-1
  }
}
 800e68c:	e037883a 	mov	sp,fp
 800e690:	dfc00117 	ldw	ra,4(sp)
 800e694:	df000017 	ldw	fp,0(sp)
 800e698:	dec00204 	addi	sp,sp,8
 800e69c:	f800283a 	ret

0800e6a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e6a0:	defffe04 	addi	sp,sp,-8
 800e6a4:	dfc00115 	stw	ra,4(sp)
 800e6a8:	df000015 	stw	fp,0(sp)
 800e6ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e6b0:	d0a00b17 	ldw	r2,-32724(gp)
 800e6b4:	10000326 	beq	r2,zero,800e6c4 <alt_get_errno+0x24>
 800e6b8:	d0a00b17 	ldw	r2,-32724(gp)
 800e6bc:	103ee83a 	callr	r2
 800e6c0:	00000106 	br	800e6c8 <alt_get_errno+0x28>
 800e6c4:	d0a6e204 	addi	r2,gp,-25720
}
 800e6c8:	e037883a 	mov	sp,fp
 800e6cc:	dfc00117 	ldw	ra,4(sp)
 800e6d0:	df000017 	ldw	fp,0(sp)
 800e6d4:	dec00204 	addi	sp,sp,8
 800e6d8:	f800283a 	ret

0800e6dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800e6dc:	deffed04 	addi	sp,sp,-76
 800e6e0:	dfc01215 	stw	ra,72(sp)
 800e6e4:	df001115 	stw	fp,68(sp)
 800e6e8:	df001104 	addi	fp,sp,68
 800e6ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e6f0:	e0bfff17 	ldw	r2,-4(fp)
 800e6f4:	10000616 	blt	r2,zero,800e710 <isatty+0x34>
 800e6f8:	e0bfff17 	ldw	r2,-4(fp)
 800e6fc:	10c00324 	muli	r3,r2,12
 800e700:	00820074 	movhi	r2,2049
 800e704:	109a3d04 	addi	r2,r2,26868
 800e708:	1885883a 	add	r2,r3,r2
 800e70c:	00000106 	br	800e714 <isatty+0x38>
 800e710:	0005883a 	mov	r2,zero
 800e714:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800e718:	e0bfef17 	ldw	r2,-68(fp)
 800e71c:	10000e26 	beq	r2,zero,800e758 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800e720:	e0bfef17 	ldw	r2,-68(fp)
 800e724:	10800017 	ldw	r2,0(r2)
 800e728:	10800817 	ldw	r2,32(r2)
 800e72c:	1000021e 	bne	r2,zero,800e738 <isatty+0x5c>
    {
      return 1;
 800e730:	00800044 	movi	r2,1
 800e734:	00000d06 	br	800e76c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800e738:	e0bff004 	addi	r2,fp,-64
 800e73c:	100b883a 	mov	r5,r2
 800e740:	e13fff17 	ldw	r4,-4(fp)
 800e744:	800e5f00 	call	800e5f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800e748:	e0bff117 	ldw	r2,-60(fp)
 800e74c:	10880020 	cmpeqi	r2,r2,8192
 800e750:	10803fcc 	andi	r2,r2,255
 800e754:	00000506 	br	800e76c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e758:	800e6a00 	call	800e6a0 <alt_get_errno>
 800e75c:	1007883a 	mov	r3,r2
 800e760:	00801444 	movi	r2,81
 800e764:	18800015 	stw	r2,0(r3)
    return 0;
 800e768:	0005883a 	mov	r2,zero
  }
}
 800e76c:	e037883a 	mov	sp,fp
 800e770:	dfc00117 	ldw	ra,4(sp)
 800e774:	df000017 	ldw	fp,0(sp)
 800e778:	dec00204 	addi	sp,sp,8
 800e77c:	f800283a 	ret

0800e780 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800e780:	defffc04 	addi	sp,sp,-16
 800e784:	df000315 	stw	fp,12(sp)
 800e788:	df000304 	addi	fp,sp,12
 800e78c:	e13ffd15 	stw	r4,-12(fp)
 800e790:	e17ffe15 	stw	r5,-8(fp)
 800e794:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800e798:	e0fffe17 	ldw	r3,-8(fp)
 800e79c:	e0bffd17 	ldw	r2,-12(fp)
 800e7a0:	18800c26 	beq	r3,r2,800e7d4 <alt_load_section+0x54>
  {
    while( to != end )
 800e7a4:	00000806 	br	800e7c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800e7a8:	e0bffe17 	ldw	r2,-8(fp)
 800e7ac:	10c00104 	addi	r3,r2,4
 800e7b0:	e0fffe15 	stw	r3,-8(fp)
 800e7b4:	e0fffd17 	ldw	r3,-12(fp)
 800e7b8:	19000104 	addi	r4,r3,4
 800e7bc:	e13ffd15 	stw	r4,-12(fp)
 800e7c0:	18c00017 	ldw	r3,0(r3)
 800e7c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800e7c8:	e0fffe17 	ldw	r3,-8(fp)
 800e7cc:	e0bfff17 	ldw	r2,-4(fp)
 800e7d0:	18bff51e 	bne	r3,r2,800e7a8 <__alt_data_end+0xf800e7a8>
    {
      *to++ = *from++;
    }
  }
}
 800e7d4:	0001883a 	nop
 800e7d8:	e037883a 	mov	sp,fp
 800e7dc:	df000017 	ldw	fp,0(sp)
 800e7e0:	dec00104 	addi	sp,sp,4
 800e7e4:	f800283a 	ret

0800e7e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800e7e8:	defffe04 	addi	sp,sp,-8
 800e7ec:	dfc00115 	stw	ra,4(sp)
 800e7f0:	df000015 	stw	fp,0(sp)
 800e7f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800e7f8:	01820074 	movhi	r6,2049
 800e7fc:	319edb04 	addi	r6,r6,31596
 800e800:	01420074 	movhi	r5,2049
 800e804:	29580a04 	addi	r5,r5,24616
 800e808:	01020074 	movhi	r4,2049
 800e80c:	211edb04 	addi	r4,r4,31596
 800e810:	800e7800 	call	800e780 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800e814:	01820034 	movhi	r6,2048
 800e818:	31809104 	addi	r6,r6,580
 800e81c:	01420034 	movhi	r5,2048
 800e820:	29400804 	addi	r5,r5,32
 800e824:	01020034 	movhi	r4,2048
 800e828:	21000804 	addi	r4,r4,32
 800e82c:	800e7800 	call	800e780 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800e830:	01820074 	movhi	r6,2049
 800e834:	31980a04 	addi	r6,r6,24616
 800e838:	01420074 	movhi	r5,2049
 800e83c:	29551c04 	addi	r5,r5,21616
 800e840:	01020074 	movhi	r4,2049
 800e844:	21151c04 	addi	r4,r4,21616
 800e848:	800e7800 	call	800e780 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800e84c:	80145b00 	call	80145b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800e850:	80149d40 	call	80149d4 <alt_icache_flush_all>
}
 800e854:	0001883a 	nop
 800e858:	e037883a 	mov	sp,fp
 800e85c:	dfc00117 	ldw	ra,4(sp)
 800e860:	df000017 	ldw	fp,0(sp)
 800e864:	dec00204 	addi	sp,sp,8
 800e868:	f800283a 	ret

0800e86c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e86c:	defffe04 	addi	sp,sp,-8
 800e870:	dfc00115 	stw	ra,4(sp)
 800e874:	df000015 	stw	fp,0(sp)
 800e878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e87c:	d0a00b17 	ldw	r2,-32724(gp)
 800e880:	10000326 	beq	r2,zero,800e890 <alt_get_errno+0x24>
 800e884:	d0a00b17 	ldw	r2,-32724(gp)
 800e888:	103ee83a 	callr	r2
 800e88c:	00000106 	br	800e894 <alt_get_errno+0x28>
 800e890:	d0a6e204 	addi	r2,gp,-25720
}
 800e894:	e037883a 	mov	sp,fp
 800e898:	dfc00117 	ldw	ra,4(sp)
 800e89c:	df000017 	ldw	fp,0(sp)
 800e8a0:	dec00204 	addi	sp,sp,8
 800e8a4:	f800283a 	ret

0800e8a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800e8a8:	defff904 	addi	sp,sp,-28
 800e8ac:	dfc00615 	stw	ra,24(sp)
 800e8b0:	df000515 	stw	fp,20(sp)
 800e8b4:	df000504 	addi	fp,sp,20
 800e8b8:	e13ffd15 	stw	r4,-12(fp)
 800e8bc:	e17ffe15 	stw	r5,-8(fp)
 800e8c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800e8c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e8c8:	e0bffd17 	ldw	r2,-12(fp)
 800e8cc:	10000616 	blt	r2,zero,800e8e8 <lseek+0x40>
 800e8d0:	e0bffd17 	ldw	r2,-12(fp)
 800e8d4:	10c00324 	muli	r3,r2,12
 800e8d8:	00820074 	movhi	r2,2049
 800e8dc:	109a3d04 	addi	r2,r2,26868
 800e8e0:	1885883a 	add	r2,r3,r2
 800e8e4:	00000106 	br	800e8ec <lseek+0x44>
 800e8e8:	0005883a 	mov	r2,zero
 800e8ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800e8f0:	e0bffc17 	ldw	r2,-16(fp)
 800e8f4:	10001026 	beq	r2,zero,800e938 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800e8f8:	e0bffc17 	ldw	r2,-16(fp)
 800e8fc:	10800017 	ldw	r2,0(r2)
 800e900:	10800717 	ldw	r2,28(r2)
 800e904:	10000926 	beq	r2,zero,800e92c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800e908:	e0bffc17 	ldw	r2,-16(fp)
 800e90c:	10800017 	ldw	r2,0(r2)
 800e910:	10800717 	ldw	r2,28(r2)
 800e914:	e1bfff17 	ldw	r6,-4(fp)
 800e918:	e17ffe17 	ldw	r5,-8(fp)
 800e91c:	e13ffc17 	ldw	r4,-16(fp)
 800e920:	103ee83a 	callr	r2
 800e924:	e0bffb15 	stw	r2,-20(fp)
 800e928:	00000506 	br	800e940 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800e92c:	00bfde84 	movi	r2,-134
 800e930:	e0bffb15 	stw	r2,-20(fp)
 800e934:	00000206 	br	800e940 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800e938:	00bfebc4 	movi	r2,-81
 800e93c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800e940:	e0bffb17 	ldw	r2,-20(fp)
 800e944:	1000070e 	bge	r2,zero,800e964 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800e948:	800e86c0 	call	800e86c <alt_get_errno>
 800e94c:	1007883a 	mov	r3,r2
 800e950:	e0bffb17 	ldw	r2,-20(fp)
 800e954:	0085c83a 	sub	r2,zero,r2
 800e958:	18800015 	stw	r2,0(r3)
    rc = -1;
 800e95c:	00bfffc4 	movi	r2,-1
 800e960:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800e964:	e0bffb17 	ldw	r2,-20(fp)
}
 800e968:	e037883a 	mov	sp,fp
 800e96c:	dfc00117 	ldw	ra,4(sp)
 800e970:	df000017 	ldw	fp,0(sp)
 800e974:	dec00204 	addi	sp,sp,8
 800e978:	f800283a 	ret

0800e97c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800e97c:	defffd04 	addi	sp,sp,-12
 800e980:	dfc00215 	stw	ra,8(sp)
 800e984:	df000115 	stw	fp,4(sp)
 800e988:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800e98c:	0009883a 	mov	r4,zero
 800e990:	800f0480 	call	800f048 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800e994:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800e998:	800f0800 	call	800f080 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800e99c:	01820074 	movhi	r6,2049
 800e9a0:	3197f904 	addi	r6,r6,24548
 800e9a4:	01420074 	movhi	r5,2049
 800e9a8:	2957f904 	addi	r5,r5,24548
 800e9ac:	01020074 	movhi	r4,2049
 800e9b0:	2117f904 	addi	r4,r4,24548
 800e9b4:	8014d6c0 	call	8014d6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800e9b8:	80146d80 	call	80146d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800e9bc:	01020074 	movhi	r4,2049
 800e9c0:	2111ce04 	addi	r4,r4,18232
 800e9c4:	80150dc0 	call	80150dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800e9c8:	d0a6e917 	ldw	r2,-25692(gp)
 800e9cc:	d0e6ea17 	ldw	r3,-25688(gp)
 800e9d0:	d126eb17 	ldw	r4,-25684(gp)
 800e9d4:	200d883a 	mov	r6,r4
 800e9d8:	180b883a 	mov	r5,r3
 800e9dc:	1009883a 	mov	r4,r2
 800e9e0:	80006300 	call	8000630 <main>
 800e9e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800e9e8:	01000044 	movi	r4,1
 800e9ec:	800e4b80 	call	800e4b8 <close>
  exit (result);
 800e9f0:	e13fff17 	ldw	r4,-4(fp)
 800e9f4:	80150f00 	call	80150f0 <exit>

0800e9f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800e9f8:	defffe04 	addi	sp,sp,-8
 800e9fc:	df000115 	stw	fp,4(sp)
 800ea00:	df000104 	addi	fp,sp,4
 800ea04:	e13fff15 	stw	r4,-4(fp)
}
 800ea08:	0001883a 	nop
 800ea0c:	e037883a 	mov	sp,fp
 800ea10:	df000017 	ldw	fp,0(sp)
 800ea14:	dec00104 	addi	sp,sp,4
 800ea18:	f800283a 	ret

0800ea1c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800ea1c:	defffe04 	addi	sp,sp,-8
 800ea20:	df000115 	stw	fp,4(sp)
 800ea24:	df000104 	addi	fp,sp,4
 800ea28:	e13fff15 	stw	r4,-4(fp)
}
 800ea2c:	0001883a 	nop
 800ea30:	e037883a 	mov	sp,fp
 800ea34:	df000017 	ldw	fp,0(sp)
 800ea38:	dec00104 	addi	sp,sp,4
 800ea3c:	f800283a 	ret

0800ea40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ea40:	defffe04 	addi	sp,sp,-8
 800ea44:	dfc00115 	stw	ra,4(sp)
 800ea48:	df000015 	stw	fp,0(sp)
 800ea4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ea50:	d0a00b17 	ldw	r2,-32724(gp)
 800ea54:	10000326 	beq	r2,zero,800ea64 <alt_get_errno+0x24>
 800ea58:	d0a00b17 	ldw	r2,-32724(gp)
 800ea5c:	103ee83a 	callr	r2
 800ea60:	00000106 	br	800ea68 <alt_get_errno+0x28>
 800ea64:	d0a6e204 	addi	r2,gp,-25720
}
 800ea68:	e037883a 	mov	sp,fp
 800ea6c:	dfc00117 	ldw	ra,4(sp)
 800ea70:	df000017 	ldw	fp,0(sp)
 800ea74:	dec00204 	addi	sp,sp,8
 800ea78:	f800283a 	ret

0800ea7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800ea7c:	defffd04 	addi	sp,sp,-12
 800ea80:	df000215 	stw	fp,8(sp)
 800ea84:	df000204 	addi	fp,sp,8
 800ea88:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800ea8c:	e0bfff17 	ldw	r2,-4(fp)
 800ea90:	10800217 	ldw	r2,8(r2)
 800ea94:	10d00034 	orhi	r3,r2,16384
 800ea98:	e0bfff17 	ldw	r2,-4(fp)
 800ea9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800eaa0:	e03ffe15 	stw	zero,-8(fp)
 800eaa4:	00001d06 	br	800eb1c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800eaa8:	00820074 	movhi	r2,2049
 800eaac:	109a3d04 	addi	r2,r2,26868
 800eab0:	e0fffe17 	ldw	r3,-8(fp)
 800eab4:	18c00324 	muli	r3,r3,12
 800eab8:	10c5883a 	add	r2,r2,r3
 800eabc:	10c00017 	ldw	r3,0(r2)
 800eac0:	e0bfff17 	ldw	r2,-4(fp)
 800eac4:	10800017 	ldw	r2,0(r2)
 800eac8:	1880111e 	bne	r3,r2,800eb10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800eacc:	00820074 	movhi	r2,2049
 800ead0:	109a3d04 	addi	r2,r2,26868
 800ead4:	e0fffe17 	ldw	r3,-8(fp)
 800ead8:	18c00324 	muli	r3,r3,12
 800eadc:	10c5883a 	add	r2,r2,r3
 800eae0:	10800204 	addi	r2,r2,8
 800eae4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800eae8:	1000090e 	bge	r2,zero,800eb10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800eaec:	e0bffe17 	ldw	r2,-8(fp)
 800eaf0:	10c00324 	muli	r3,r2,12
 800eaf4:	00820074 	movhi	r2,2049
 800eaf8:	109a3d04 	addi	r2,r2,26868
 800eafc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800eb00:	e0bfff17 	ldw	r2,-4(fp)
 800eb04:	18800226 	beq	r3,r2,800eb10 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800eb08:	00bffcc4 	movi	r2,-13
 800eb0c:	00000806 	br	800eb30 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800eb10:	e0bffe17 	ldw	r2,-8(fp)
 800eb14:	10800044 	addi	r2,r2,1
 800eb18:	e0bffe15 	stw	r2,-8(fp)
 800eb1c:	d0a00a17 	ldw	r2,-32728(gp)
 800eb20:	1007883a 	mov	r3,r2
 800eb24:	e0bffe17 	ldw	r2,-8(fp)
 800eb28:	18bfdf2e 	bgeu	r3,r2,800eaa8 <__alt_data_end+0xf800eaa8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800eb2c:	0005883a 	mov	r2,zero
}
 800eb30:	e037883a 	mov	sp,fp
 800eb34:	df000017 	ldw	fp,0(sp)
 800eb38:	dec00104 	addi	sp,sp,4
 800eb3c:	f800283a 	ret

0800eb40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800eb40:	defff604 	addi	sp,sp,-40
 800eb44:	dfc00915 	stw	ra,36(sp)
 800eb48:	df000815 	stw	fp,32(sp)
 800eb4c:	df000804 	addi	fp,sp,32
 800eb50:	e13ffd15 	stw	r4,-12(fp)
 800eb54:	e17ffe15 	stw	r5,-8(fp)
 800eb58:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800eb5c:	00bfffc4 	movi	r2,-1
 800eb60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800eb64:	00bffb44 	movi	r2,-19
 800eb68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800eb6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800eb70:	d1600804 	addi	r5,gp,-32736
 800eb74:	e13ffd17 	ldw	r4,-12(fp)
 800eb78:	80147980 	call	8014798 <alt_find_dev>
 800eb7c:	e0bff815 	stw	r2,-32(fp)
 800eb80:	e0bff817 	ldw	r2,-32(fp)
 800eb84:	1000051e 	bne	r2,zero,800eb9c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800eb88:	e13ffd17 	ldw	r4,-12(fp)
 800eb8c:	80148280 	call	8014828 <alt_find_file>
 800eb90:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800eb94:	00800044 	movi	r2,1
 800eb98:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800eb9c:	e0bff817 	ldw	r2,-32(fp)
 800eba0:	10002926 	beq	r2,zero,800ec48 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800eba4:	e13ff817 	ldw	r4,-32(fp)
 800eba8:	80149300 	call	8014930 <alt_get_fd>
 800ebac:	e0bff915 	stw	r2,-28(fp)
 800ebb0:	e0bff917 	ldw	r2,-28(fp)
 800ebb4:	1000030e 	bge	r2,zero,800ebc4 <open+0x84>
    {
      status = index;
 800ebb8:	e0bff917 	ldw	r2,-28(fp)
 800ebbc:	e0bffa15 	stw	r2,-24(fp)
 800ebc0:	00002306 	br	800ec50 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 800ebc4:	e0bff917 	ldw	r2,-28(fp)
 800ebc8:	10c00324 	muli	r3,r2,12
 800ebcc:	00820074 	movhi	r2,2049
 800ebd0:	109a3d04 	addi	r2,r2,26868
 800ebd4:	1885883a 	add	r2,r3,r2
 800ebd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800ebdc:	e0fffe17 	ldw	r3,-8(fp)
 800ebe0:	00900034 	movhi	r2,16384
 800ebe4:	10bfffc4 	addi	r2,r2,-1
 800ebe8:	1886703a 	and	r3,r3,r2
 800ebec:	e0bffc17 	ldw	r2,-16(fp)
 800ebf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ebf4:	e0bffb17 	ldw	r2,-20(fp)
 800ebf8:	1000051e 	bne	r2,zero,800ec10 <open+0xd0>
 800ebfc:	e13ffc17 	ldw	r4,-16(fp)
 800ec00:	800ea7c0 	call	800ea7c <alt_file_locked>
 800ec04:	e0bffa15 	stw	r2,-24(fp)
 800ec08:	e0bffa17 	ldw	r2,-24(fp)
 800ec0c:	10001016 	blt	r2,zero,800ec50 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ec10:	e0bff817 	ldw	r2,-32(fp)
 800ec14:	10800317 	ldw	r2,12(r2)
 800ec18:	10000826 	beq	r2,zero,800ec3c <open+0xfc>
 800ec1c:	e0bff817 	ldw	r2,-32(fp)
 800ec20:	10800317 	ldw	r2,12(r2)
 800ec24:	e1ffff17 	ldw	r7,-4(fp)
 800ec28:	e1bffe17 	ldw	r6,-8(fp)
 800ec2c:	e17ffd17 	ldw	r5,-12(fp)
 800ec30:	e13ffc17 	ldw	r4,-16(fp)
 800ec34:	103ee83a 	callr	r2
 800ec38:	00000106 	br	800ec40 <open+0x100>
 800ec3c:	0005883a 	mov	r2,zero
 800ec40:	e0bffa15 	stw	r2,-24(fp)
 800ec44:	00000206 	br	800ec50 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ec48:	00bffb44 	movi	r2,-19
 800ec4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ec50:	e0bffa17 	ldw	r2,-24(fp)
 800ec54:	1000090e 	bge	r2,zero,800ec7c <open+0x13c>
  {
    alt_release_fd (index);  
 800ec58:	e13ff917 	ldw	r4,-28(fp)
 800ec5c:	800edcc0 	call	800edcc <alt_release_fd>
    ALT_ERRNO = -status;
 800ec60:	800ea400 	call	800ea40 <alt_get_errno>
 800ec64:	1007883a 	mov	r3,r2
 800ec68:	e0bffa17 	ldw	r2,-24(fp)
 800ec6c:	0085c83a 	sub	r2,zero,r2
 800ec70:	18800015 	stw	r2,0(r3)
    return -1;
 800ec74:	00bfffc4 	movi	r2,-1
 800ec78:	00000106 	br	800ec80 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800ec7c:	e0bff917 	ldw	r2,-28(fp)
}
 800ec80:	e037883a 	mov	sp,fp
 800ec84:	dfc00117 	ldw	ra,4(sp)
 800ec88:	df000017 	ldw	fp,0(sp)
 800ec8c:	dec00204 	addi	sp,sp,8
 800ec90:	f800283a 	ret

0800ec94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec94:	defffe04 	addi	sp,sp,-8
 800ec98:	dfc00115 	stw	ra,4(sp)
 800ec9c:	df000015 	stw	fp,0(sp)
 800eca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eca4:	d0a00b17 	ldw	r2,-32724(gp)
 800eca8:	10000326 	beq	r2,zero,800ecb8 <alt_get_errno+0x24>
 800ecac:	d0a00b17 	ldw	r2,-32724(gp)
 800ecb0:	103ee83a 	callr	r2
 800ecb4:	00000106 	br	800ecbc <alt_get_errno+0x28>
 800ecb8:	d0a6e204 	addi	r2,gp,-25720
}
 800ecbc:	e037883a 	mov	sp,fp
 800ecc0:	dfc00117 	ldw	ra,4(sp)
 800ecc4:	df000017 	ldw	fp,0(sp)
 800ecc8:	dec00204 	addi	sp,sp,8
 800eccc:	f800283a 	ret

0800ecd0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800ecd0:	defff904 	addi	sp,sp,-28
 800ecd4:	dfc00615 	stw	ra,24(sp)
 800ecd8:	df000515 	stw	fp,20(sp)
 800ecdc:	df000504 	addi	fp,sp,20
 800ece0:	e13ffd15 	stw	r4,-12(fp)
 800ece4:	e17ffe15 	stw	r5,-8(fp)
 800ece8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ecec:	e0bffd17 	ldw	r2,-12(fp)
 800ecf0:	10000616 	blt	r2,zero,800ed0c <read+0x3c>
 800ecf4:	e0bffd17 	ldw	r2,-12(fp)
 800ecf8:	10c00324 	muli	r3,r2,12
 800ecfc:	00820074 	movhi	r2,2049
 800ed00:	109a3d04 	addi	r2,r2,26868
 800ed04:	1885883a 	add	r2,r3,r2
 800ed08:	00000106 	br	800ed10 <read+0x40>
 800ed0c:	0005883a 	mov	r2,zero
 800ed10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ed14:	e0bffb17 	ldw	r2,-20(fp)
 800ed18:	10002226 	beq	r2,zero,800eda4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ed1c:	e0bffb17 	ldw	r2,-20(fp)
 800ed20:	10800217 	ldw	r2,8(r2)
 800ed24:	108000cc 	andi	r2,r2,3
 800ed28:	10800060 	cmpeqi	r2,r2,1
 800ed2c:	1000181e 	bne	r2,zero,800ed90 <read+0xc0>
        (fd->dev->read))
 800ed30:	e0bffb17 	ldw	r2,-20(fp)
 800ed34:	10800017 	ldw	r2,0(r2)
 800ed38:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ed3c:	10001426 	beq	r2,zero,800ed90 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800ed40:	e0bffb17 	ldw	r2,-20(fp)
 800ed44:	10800017 	ldw	r2,0(r2)
 800ed48:	10800517 	ldw	r2,20(r2)
 800ed4c:	e0ffff17 	ldw	r3,-4(fp)
 800ed50:	180d883a 	mov	r6,r3
 800ed54:	e17ffe17 	ldw	r5,-8(fp)
 800ed58:	e13ffb17 	ldw	r4,-20(fp)
 800ed5c:	103ee83a 	callr	r2
 800ed60:	e0bffc15 	stw	r2,-16(fp)
 800ed64:	e0bffc17 	ldw	r2,-16(fp)
 800ed68:	1000070e 	bge	r2,zero,800ed88 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800ed6c:	800ec940 	call	800ec94 <alt_get_errno>
 800ed70:	1007883a 	mov	r3,r2
 800ed74:	e0bffc17 	ldw	r2,-16(fp)
 800ed78:	0085c83a 	sub	r2,zero,r2
 800ed7c:	18800015 	stw	r2,0(r3)
          return -1;
 800ed80:	00bfffc4 	movi	r2,-1
 800ed84:	00000c06 	br	800edb8 <read+0xe8>
        }
        return rval;
 800ed88:	e0bffc17 	ldw	r2,-16(fp)
 800ed8c:	00000a06 	br	800edb8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800ed90:	800ec940 	call	800ec94 <alt_get_errno>
 800ed94:	1007883a 	mov	r3,r2
 800ed98:	00800344 	movi	r2,13
 800ed9c:	18800015 	stw	r2,0(r3)
 800eda0:	00000406 	br	800edb4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800eda4:	800ec940 	call	800ec94 <alt_get_errno>
 800eda8:	1007883a 	mov	r3,r2
 800edac:	00801444 	movi	r2,81
 800edb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800edb4:	00bfffc4 	movi	r2,-1
}
 800edb8:	e037883a 	mov	sp,fp
 800edbc:	dfc00117 	ldw	ra,4(sp)
 800edc0:	df000017 	ldw	fp,0(sp)
 800edc4:	dec00204 	addi	sp,sp,8
 800edc8:	f800283a 	ret

0800edcc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800edcc:	defffe04 	addi	sp,sp,-8
 800edd0:	df000115 	stw	fp,4(sp)
 800edd4:	df000104 	addi	fp,sp,4
 800edd8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800eddc:	e0bfff17 	ldw	r2,-4(fp)
 800ede0:	108000d0 	cmplti	r2,r2,3
 800ede4:	10000d1e 	bne	r2,zero,800ee1c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800ede8:	00820074 	movhi	r2,2049
 800edec:	109a3d04 	addi	r2,r2,26868
 800edf0:	e0ffff17 	ldw	r3,-4(fp)
 800edf4:	18c00324 	muli	r3,r3,12
 800edf8:	10c5883a 	add	r2,r2,r3
 800edfc:	10800204 	addi	r2,r2,8
 800ee00:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ee04:	00820074 	movhi	r2,2049
 800ee08:	109a3d04 	addi	r2,r2,26868
 800ee0c:	e0ffff17 	ldw	r3,-4(fp)
 800ee10:	18c00324 	muli	r3,r3,12
 800ee14:	10c5883a 	add	r2,r2,r3
 800ee18:	10000015 	stw	zero,0(r2)
  }
}
 800ee1c:	0001883a 	nop
 800ee20:	e037883a 	mov	sp,fp
 800ee24:	df000017 	ldw	fp,0(sp)
 800ee28:	dec00104 	addi	sp,sp,4
 800ee2c:	f800283a 	ret

0800ee30 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ee30:	defff904 	addi	sp,sp,-28
 800ee34:	df000615 	stw	fp,24(sp)
 800ee38:	df000604 	addi	fp,sp,24
 800ee3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ee40:	0005303a 	rdctl	r2,status
 800ee44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ee48:	e0fffe17 	ldw	r3,-8(fp)
 800ee4c:	00bfff84 	movi	r2,-2
 800ee50:	1884703a 	and	r2,r3,r2
 800ee54:	1001703a 	wrctl	status,r2
  
  return context;
 800ee58:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ee5c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ee60:	d0a00c17 	ldw	r2,-32720(gp)
 800ee64:	10c000c4 	addi	r3,r2,3
 800ee68:	00bfff04 	movi	r2,-4
 800ee6c:	1884703a 	and	r2,r3,r2
 800ee70:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ee74:	d0e00c17 	ldw	r3,-32720(gp)
 800ee78:	e0bfff17 	ldw	r2,-4(fp)
 800ee7c:	1887883a 	add	r3,r3,r2
 800ee80:	00840034 	movhi	r2,4096
 800ee84:	10800004 	addi	r2,r2,0
 800ee88:	10c0062e 	bgeu	r2,r3,800eea4 <sbrk+0x74>
 800ee8c:	e0bffb17 	ldw	r2,-20(fp)
 800ee90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ee94:	e0bffa17 	ldw	r2,-24(fp)
 800ee98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ee9c:	00bfffc4 	movi	r2,-1
 800eea0:	00000b06 	br	800eed0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800eea4:	d0a00c17 	ldw	r2,-32720(gp)
 800eea8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800eeac:	d0e00c17 	ldw	r3,-32720(gp)
 800eeb0:	e0bfff17 	ldw	r2,-4(fp)
 800eeb4:	1885883a 	add	r2,r3,r2
 800eeb8:	d0a00c15 	stw	r2,-32720(gp)
 800eebc:	e0bffb17 	ldw	r2,-20(fp)
 800eec0:	e0bffc15 	stw	r2,-16(fp)
 800eec4:	e0bffc17 	ldw	r2,-16(fp)
 800eec8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800eecc:	e0bffd17 	ldw	r2,-12(fp)
} 
 800eed0:	e037883a 	mov	sp,fp
 800eed4:	df000017 	ldw	fp,0(sp)
 800eed8:	dec00104 	addi	sp,sp,4
 800eedc:	f800283a 	ret

0800eee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eee0:	defffe04 	addi	sp,sp,-8
 800eee4:	dfc00115 	stw	ra,4(sp)
 800eee8:	df000015 	stw	fp,0(sp)
 800eeec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eef0:	d0a00b17 	ldw	r2,-32724(gp)
 800eef4:	10000326 	beq	r2,zero,800ef04 <alt_get_errno+0x24>
 800eef8:	d0a00b17 	ldw	r2,-32724(gp)
 800eefc:	103ee83a 	callr	r2
 800ef00:	00000106 	br	800ef08 <alt_get_errno+0x28>
 800ef04:	d0a6e204 	addi	r2,gp,-25720
}
 800ef08:	e037883a 	mov	sp,fp
 800ef0c:	dfc00117 	ldw	ra,4(sp)
 800ef10:	df000017 	ldw	fp,0(sp)
 800ef14:	dec00204 	addi	sp,sp,8
 800ef18:	f800283a 	ret

0800ef1c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ef1c:	defff904 	addi	sp,sp,-28
 800ef20:	dfc00615 	stw	ra,24(sp)
 800ef24:	df000515 	stw	fp,20(sp)
 800ef28:	df000504 	addi	fp,sp,20
 800ef2c:	e13ffd15 	stw	r4,-12(fp)
 800ef30:	e17ffe15 	stw	r5,-8(fp)
 800ef34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ef38:	e0bffd17 	ldw	r2,-12(fp)
 800ef3c:	10000616 	blt	r2,zero,800ef58 <write+0x3c>
 800ef40:	e0bffd17 	ldw	r2,-12(fp)
 800ef44:	10c00324 	muli	r3,r2,12
 800ef48:	00820074 	movhi	r2,2049
 800ef4c:	109a3d04 	addi	r2,r2,26868
 800ef50:	1885883a 	add	r2,r3,r2
 800ef54:	00000106 	br	800ef5c <write+0x40>
 800ef58:	0005883a 	mov	r2,zero
 800ef5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ef60:	e0bffb17 	ldw	r2,-20(fp)
 800ef64:	10002126 	beq	r2,zero,800efec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ef68:	e0bffb17 	ldw	r2,-20(fp)
 800ef6c:	10800217 	ldw	r2,8(r2)
 800ef70:	108000cc 	andi	r2,r2,3
 800ef74:	10001826 	beq	r2,zero,800efd8 <write+0xbc>
 800ef78:	e0bffb17 	ldw	r2,-20(fp)
 800ef7c:	10800017 	ldw	r2,0(r2)
 800ef80:	10800617 	ldw	r2,24(r2)
 800ef84:	10001426 	beq	r2,zero,800efd8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ef88:	e0bffb17 	ldw	r2,-20(fp)
 800ef8c:	10800017 	ldw	r2,0(r2)
 800ef90:	10800617 	ldw	r2,24(r2)
 800ef94:	e0ffff17 	ldw	r3,-4(fp)
 800ef98:	180d883a 	mov	r6,r3
 800ef9c:	e17ffe17 	ldw	r5,-8(fp)
 800efa0:	e13ffb17 	ldw	r4,-20(fp)
 800efa4:	103ee83a 	callr	r2
 800efa8:	e0bffc15 	stw	r2,-16(fp)
 800efac:	e0bffc17 	ldw	r2,-16(fp)
 800efb0:	1000070e 	bge	r2,zero,800efd0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800efb4:	800eee00 	call	800eee0 <alt_get_errno>
 800efb8:	1007883a 	mov	r3,r2
 800efbc:	e0bffc17 	ldw	r2,-16(fp)
 800efc0:	0085c83a 	sub	r2,zero,r2
 800efc4:	18800015 	stw	r2,0(r3)
        return -1;
 800efc8:	00bfffc4 	movi	r2,-1
 800efcc:	00000c06 	br	800f000 <write+0xe4>
      }
      return rval;
 800efd0:	e0bffc17 	ldw	r2,-16(fp)
 800efd4:	00000a06 	br	800f000 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800efd8:	800eee00 	call	800eee0 <alt_get_errno>
 800efdc:	1007883a 	mov	r3,r2
 800efe0:	00800344 	movi	r2,13
 800efe4:	18800015 	stw	r2,0(r3)
 800efe8:	00000406 	br	800effc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800efec:	800eee00 	call	800eee0 <alt_get_errno>
 800eff0:	1007883a 	mov	r3,r2
 800eff4:	00801444 	movi	r2,81
 800eff8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800effc:	00bfffc4 	movi	r2,-1
}
 800f000:	e037883a 	mov	sp,fp
 800f004:	dfc00117 	ldw	ra,4(sp)
 800f008:	df000017 	ldw	fp,0(sp)
 800f00c:	dec00204 	addi	sp,sp,8
 800f010:	f800283a 	ret

0800f014 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f014:	defffd04 	addi	sp,sp,-12
 800f018:	dfc00215 	stw	ra,8(sp)
 800f01c:	df000115 	stw	fp,4(sp)
 800f020:	df000104 	addi	fp,sp,4
 800f024:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f028:	d1600804 	addi	r5,gp,-32736
 800f02c:	e13fff17 	ldw	r4,-4(fp)
 800f030:	80146340 	call	8014634 <alt_dev_llist_insert>
}
 800f034:	e037883a 	mov	sp,fp
 800f038:	dfc00117 	ldw	ra,4(sp)
 800f03c:	df000017 	ldw	fp,0(sp)
 800f040:	dec00204 	addi	sp,sp,8
 800f044:	f800283a 	ret

0800f048 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f048:	defffd04 	addi	sp,sp,-12
 800f04c:	dfc00215 	stw	ra,8(sp)
 800f050:	df000115 	stw	fp,4(sp)
 800f054:	df000104 	addi	fp,sp,4
 800f058:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800f05c:	8014f8c0 	call	8014f8c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f060:	00800044 	movi	r2,1
 800f064:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f068:	0001883a 	nop
 800f06c:	e037883a 	mov	sp,fp
 800f070:	dfc00117 	ldw	ra,4(sp)
 800f074:	df000017 	ldw	fp,0(sp)
 800f078:	dec00204 	addi	sp,sp,8
 800f07c:	f800283a 	ret

0800f080 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f080:	defffe04 	addi	sp,sp,-8
 800f084:	dfc00115 	stw	ra,4(sp)
 800f088:	df000015 	stw	fp,0(sp)
 800f08c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
 800f090:	01c0fa04 	movi	r7,1000
 800f094:	01800044 	movi	r6,1
 800f098:	000b883a 	mov	r5,zero
 800f09c:	01000834 	movhi	r4,32
 800f0a0:	21043804 	addi	r4,r4,4320
 800f0a4:	8013f140 	call	8013f14 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f0a8:	018000c4 	movi	r6,3
 800f0ac:	000b883a 	mov	r5,zero
 800f0b0:	01020074 	movhi	r4,2049
 800f0b4:	211aa704 	addi	r4,r4,27292
 800f0b8:	80135980 	call	8013598 <altera_avalon_jtag_uart_init>
 800f0bc:	01020074 	movhi	r4,2049
 800f0c0:	211a9d04 	addi	r4,r4,27252
 800f0c4:	800f0140 	call	800f014 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f0c8:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
 800f0cc:	01020074 	movhi	r4,2049
 800f0d0:	211eb504 	addi	r4,r4,31444
 800f0d4:	80140440 	call	8014044 <alt_up_character_lcd_init>
 800f0d8:	01020074 	movhi	r4,2049
 800f0dc:	211eb504 	addi	r4,r4,31444
 800f0e0:	800f0140 	call	800f014 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
 800f0e4:	01020074 	movhi	r4,2049
 800f0e8:	211ec004 	addi	r4,r4,31488
 800f0ec:	800f0140 	call	800f014 <alt_dev_reg>
}
 800f0f0:	0001883a 	nop
 800f0f4:	e037883a 	mov	sp,fp
 800f0f8:	dfc00117 	ldw	ra,4(sp)
 800f0fc:	df000017 	ldw	fp,0(sp)
 800f100:	dec00204 	addi	sp,sp,8
 800f104:	f800283a 	ret

0800f108 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 800f108:	defffa04 	addi	sp,sp,-24
 800f10c:	dfc00515 	stw	ra,20(sp)
 800f110:	df000415 	stw	fp,16(sp)
 800f114:	df000404 	addi	fp,sp,16
 800f118:	e13ffe15 	stw	r4,-8(fp)
 800f11c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 800f120:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
 800f124:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 800f128:	10001e26 	beq	r2,zero,800f1a4 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
 800f12c:	00803fc4 	movi	r2,255
 800f130:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 800f134:	d0a6f217 	ldw	r2,-25656(gp)
 800f138:	e13ffe17 	ldw	r4,-8(fp)
 800f13c:	e0ffff17 	ldw	r3,-4(fp)
 800f140:	20c7883a 	add	r3,r4,r3
 800f144:	1806927a 	slli	r3,r3,9
 800f148:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 800f14c:	d0a6f117 	ldw	r2,-25660(gp)
 800f150:	00c00604 	movi	r3,24
 800f154:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 800f158:	d0a6ee17 	ldw	r2,-25672(gp)
 800f15c:	1080002b 	ldhuio	r2,0(r2)
 800f160:	10bfffcc 	andi	r2,r2,65535
 800f164:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
 800f168:	e0bffd0b 	ldhu	r2,-12(fp)
 800f16c:	10bfffcc 	andi	r2,r2,65535
 800f170:	1080010c 	andi	r2,r2,4
 800f174:	103ff81e 	bne	r2,zero,800f158 <__alt_data_end+0xf800f158>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 800f178:	e0bffd0b 	ldhu	r2,-12(fp)
 800f17c:	10bfffcc 	andi	r2,r2,65535
 800f180:	1080040c 	andi	r2,r2,16
 800f184:	1000071e 	bne	r2,zero,800f1a4 <Write_Sector_Data+0x9c>
        {
            result = true;
 800f188:	00800044 	movi	r2,1
 800f18c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 800f190:	d026f715 	stw	zero,-25636(gp)
            current_sector_index = sector_index+partition_offset;
 800f194:	e0fffe17 	ldw	r3,-8(fp)
 800f198:	e0bfff17 	ldw	r2,-4(fp)
 800f19c:	1885883a 	add	r2,r3,r2
 800f1a0:	d0a6f815 	stw	r2,-25632(gp)
        }
    }
    return result;
 800f1a4:	e0bffc17 	ldw	r2,-16(fp)
}
 800f1a8:	e037883a 	mov	sp,fp
 800f1ac:	dfc00117 	ldw	ra,4(sp)
 800f1b0:	df000017 	ldw	fp,0(sp)
 800f1b4:	dec00204 	addi	sp,sp,8
 800f1b8:	f800283a 	ret

0800f1bc <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 800f1bc:	defffd04 	addi	sp,sp,-12
 800f1c0:	dfc00215 	stw	ra,8(sp)
 800f1c4:	df000115 	stw	fp,4(sp)
 800f1c8:	df000104 	addi	fp,sp,4
    bool result = true;
 800f1cc:	00800044 	movi	r2,1
 800f1d0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 800f1d4:	d0a6f717 	ldw	r2,-25636(gp)
 800f1d8:	10000526 	beq	r2,zero,800f1f0 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 800f1dc:	d0a6f817 	ldw	r2,-25632(gp)
 800f1e0:	000b883a 	mov	r5,zero
 800f1e4:	1009883a 	mov	r4,r2
 800f1e8:	800f1080 	call	800f108 <Write_Sector_Data>
 800f1ec:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 800f1f0:	e0bfff17 	ldw	r2,-4(fp)
}
 800f1f4:	e037883a 	mov	sp,fp
 800f1f8:	dfc00117 	ldw	ra,4(sp)
 800f1fc:	df000017 	ldw	fp,0(sp)
 800f200:	dec00204 	addi	sp,sp,8
 800f204:	f800283a 	ret

0800f208 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 800f208:	defffa04 	addi	sp,sp,-24
 800f20c:	dfc00515 	stw	ra,20(sp)
 800f210:	df000415 	stw	fp,16(sp)
 800f214:	df000404 	addi	fp,sp,16
 800f218:	e13ffe15 	stw	r4,-8(fp)
 800f21c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 800f220:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 800f224:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 800f228:	10002726 	beq	r2,zero,800f2c8 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
 800f22c:	00803fc4 	movi	r2,255
 800f230:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 800f234:	d0a6f717 	ldw	r2,-25636(gp)
 800f238:	10000726 	beq	r2,zero,800f258 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 800f23c:	d0a6f817 	ldw	r2,-25632(gp)
 800f240:	000b883a 	mov	r5,zero
 800f244:	1009883a 	mov	r4,r2
 800f248:	800f1080 	call	800f108 <Write_Sector_Data>
 800f24c:	1000021e 	bne	r2,zero,800f258 <Read_Sector_Data+0x50>
            {
                return false;
 800f250:	0005883a 	mov	r2,zero
 800f254:	00001d06 	br	800f2cc <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 800f258:	d0a6f217 	ldw	r2,-25656(gp)
 800f25c:	e13ffe17 	ldw	r4,-8(fp)
 800f260:	e0ffff17 	ldw	r3,-4(fp)
 800f264:	20c7883a 	add	r3,r4,r3
 800f268:	1806927a 	slli	r3,r3,9
 800f26c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 800f270:	d0a6f117 	ldw	r2,-25660(gp)
 800f274:	00c00444 	movi	r3,17
 800f278:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 800f27c:	d0a6ee17 	ldw	r2,-25672(gp)
 800f280:	1080002b 	ldhuio	r2,0(r2)
 800f284:	10bfffcc 	andi	r2,r2,65535
 800f288:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
 800f28c:	e0bffd0b 	ldhu	r2,-12(fp)
 800f290:	10bfffcc 	andi	r2,r2,65535
 800f294:	1080010c 	andi	r2,r2,4
 800f298:	103ff81e 	bne	r2,zero,800f27c <__alt_data_end+0xf800f27c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 800f29c:	e0bffd0b 	ldhu	r2,-12(fp)
 800f2a0:	10bfffcc 	andi	r2,r2,65535
 800f2a4:	1080040c 	andi	r2,r2,16
 800f2a8:	1000071e 	bne	r2,zero,800f2c8 <Read_Sector_Data+0xc0>
		{
			result = true;
 800f2ac:	00800044 	movi	r2,1
 800f2b0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 800f2b4:	d026f715 	stw	zero,-25636(gp)
            current_sector_index = sector_index+partition_offset;
 800f2b8:	e0fffe17 	ldw	r3,-8(fp)
 800f2bc:	e0bfff17 	ldw	r2,-4(fp)
 800f2c0:	1885883a 	add	r2,r3,r2
 800f2c4:	d0a6f815 	stw	r2,-25632(gp)
		}
	}
	return result;
 800f2c8:	e0bffc17 	ldw	r2,-16(fp)
}
 800f2cc:	e037883a 	mov	sp,fp
 800f2d0:	dfc00117 	ldw	ra,4(sp)
 800f2d4:	df000017 	ldw	fp,0(sp)
 800f2d8:	dec00204 	addi	sp,sp,8
 800f2dc:	f800283a 	ret

0800f2e0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 800f2e0:	defffb04 	addi	sp,sp,-20
 800f2e4:	dfc00415 	stw	ra,16(sp)
 800f2e8:	df000315 	stw	fp,12(sp)
 800f2ec:	df000304 	addi	fp,sp,12
 800f2f0:	e13ffe15 	stw	r4,-8(fp)
 800f2f4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 800f2f8:	e0bffe17 	ldw	r2,-8(fp)
 800f2fc:	1004d23a 	srli	r2,r2,8
 800f300:	d0e6f417 	ldw	r3,-25648(gp)
 800f304:	10c5883a 	add	r2,r2,r3
 800f308:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 800f30c:	008200b4 	movhi	r2,2050
 800f310:	10a5d704 	addi	r2,r2,-26788
 800f314:	10801117 	ldw	r2,68(r2)
 800f318:	e0fffd17 	ldw	r3,-12(fp)
 800f31c:	1885883a 	add	r2,r3,r2
 800f320:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
 800f324:	d0a6f817 	ldw	r2,-25632(gp)
 800f328:	e0fffd17 	ldw	r3,-12(fp)
 800f32c:	18800726 	beq	r3,r2,800f34c <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 800f330:	e0bffd17 	ldw	r2,-12(fp)
 800f334:	000b883a 	mov	r5,zero
 800f338:	1009883a 	mov	r4,r2
 800f33c:	800f2080 	call	800f208 <Read_Sector_Data>
 800f340:	1000021e 	bne	r2,zero,800f34c <get_cluster_flag+0x6c>
        {
            return false;
 800f344:	0005883a 	mov	r2,zero
 800f348:	00000d06 	br	800f380 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 800f34c:	e0bffe17 	ldw	r2,-8(fp)
 800f350:	10803fcc 	andi	r2,r2,255
 800f354:	1085883a 	add	r2,r2,r2
 800f358:	1007883a 	mov	r3,r2
 800f35c:	d0a6f617 	ldw	r2,-25640(gp)
 800f360:	10800a17 	ldw	r2,40(r2)
 800f364:	1885883a 	add	r2,r3,r2
 800f368:	1080002b 	ldhuio	r2,0(r2)
 800f36c:	10bfffcc 	andi	r2,r2,65535
 800f370:	1007883a 	mov	r3,r2
 800f374:	e0bfff17 	ldw	r2,-4(fp)
 800f378:	10c0000d 	sth	r3,0(r2)
    return true;
 800f37c:	00800044 	movi	r2,1
}
 800f380:	e037883a 	mov	sp,fp
 800f384:	dfc00117 	ldw	ra,4(sp)
 800f388:	df000017 	ldw	fp,0(sp)
 800f38c:	dec00204 	addi	sp,sp,8
 800f390:	f800283a 	ret

0800f394 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 800f394:	defffa04 	addi	sp,sp,-24
 800f398:	dfc00515 	stw	ra,20(sp)
 800f39c:	df000415 	stw	fp,16(sp)
 800f3a0:	df000404 	addi	fp,sp,16
 800f3a4:	e13ffd15 	stw	r4,-12(fp)
 800f3a8:	2805883a 	mov	r2,r5
 800f3ac:	e1bfff15 	stw	r6,-4(fp)
 800f3b0:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 800f3b4:	e0bffd17 	ldw	r2,-12(fp)
 800f3b8:	1004d23a 	srli	r2,r2,8
 800f3bc:	d0e6f417 	ldw	r3,-25648(gp)
 800f3c0:	10c5883a 	add	r2,r2,r3
 800f3c4:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
 800f3c8:	e0bfff17 	ldw	r2,-4(fp)
 800f3cc:	10000726 	beq	r2,zero,800f3ec <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 800f3d0:	008200b4 	movhi	r2,2050
 800f3d4:	10a5d704 	addi	r2,r2,-26788
 800f3d8:	10801117 	ldw	r2,68(r2)
 800f3dc:	e0fffc17 	ldw	r3,-16(fp)
 800f3e0:	1885883a 	add	r2,r3,r2
 800f3e4:	e0bffc15 	stw	r2,-16(fp)
 800f3e8:	00000606 	br	800f404 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 800f3ec:	008200b4 	movhi	r2,2050
 800f3f0:	10a5d704 	addi	r2,r2,-26788
 800f3f4:	10801217 	ldw	r2,72(r2)
 800f3f8:	e0fffc17 	ldw	r3,-16(fp)
 800f3fc:	1885883a 	add	r2,r3,r2
 800f400:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
 800f404:	d0a6f817 	ldw	r2,-25632(gp)
 800f408:	e0fffc17 	ldw	r3,-16(fp)
 800f40c:	18800726 	beq	r3,r2,800f42c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 800f410:	e0bffc17 	ldw	r2,-16(fp)
 800f414:	000b883a 	mov	r5,zero
 800f418:	1009883a 	mov	r4,r2
 800f41c:	800f2080 	call	800f208 <Read_Sector_Data>
 800f420:	1000021e 	bne	r2,zero,800f42c <mark_cluster+0x98>
        {
            return false;
 800f424:	0005883a 	mov	r2,zero
 800f428:	00000d06 	br	800f460 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	10803fcc 	andi	r2,r2,255
 800f434:	1085883a 	add	r2,r2,r2
 800f438:	1007883a 	mov	r3,r2
 800f43c:	d0a6f617 	ldw	r2,-25640(gp)
 800f440:	10800a17 	ldw	r2,40(r2)
 800f444:	1885883a 	add	r2,r3,r2
 800f448:	1007883a 	mov	r3,r2
 800f44c:	e0bffe0f 	ldh	r2,-8(fp)
 800f450:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
 800f454:	00800044 	movi	r2,1
 800f458:	d0a6f715 	stw	r2,-25636(gp)
    return true;
 800f45c:	00800044 	movi	r2,1
}
 800f460:	e037883a 	mov	sp,fp
 800f464:	dfc00117 	ldw	ra,4(sp)
 800f468:	df000017 	ldw	fp,0(sp)
 800f46c:	dec00204 	addi	sp,sp,8
 800f470:	f800283a 	ret

0800f474 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 800f474:	defff704 	addi	sp,sp,-36
 800f478:	dfc00815 	stw	ra,32(sp)
 800f47c:	df000715 	stw	fp,28(sp)
 800f480:	df000704 	addi	fp,sp,28
	bool result = false;
 800f484:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 800f488:	000b883a 	mov	r5,zero
 800f48c:	0009883a 	mov	r4,zero
 800f490:	800f2080 	call	800f208 <Read_Sector_Data>
 800f494:	10005a26 	beq	r2,zero,800f600 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 800f498:	d0a6f617 	ldw	r2,-25640(gp)
 800f49c:	10800a17 	ldw	r2,40(r2)
 800f4a0:	10807f84 	addi	r2,r2,510
 800f4a4:	1080002b 	ldhuio	r2,0(r2)
 800f4a8:	10bfffcc 	andi	r2,r2,65535
 800f4ac:	10bfffcc 	andi	r2,r2,65535
 800f4b0:	10a0001c 	xori	r2,r2,32768
 800f4b4:	10a00004 	addi	r2,r2,-32768
 800f4b8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 800f4bc:	e0bffb17 	ldw	r2,-20(fp)
 800f4c0:	10ffffcc 	andi	r3,r2,65535
 800f4c4:	00aa9554 	movui	r2,43605
 800f4c8:	18804d1e 	bne	r3,r2,800f600 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 800f4cc:	e03ffa15 	stw	zero,-24(fp)
 800f4d0:	00004806 	br	800f5f4 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 800f4d4:	e0bffa17 	ldw	r2,-24(fp)
 800f4d8:	1004913a 	slli	r2,r2,4
 800f4dc:	10806f84 	addi	r2,r2,446
 800f4e0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 800f4e4:	d0a6f617 	ldw	r2,-25640(gp)
 800f4e8:	10c00a17 	ldw	r3,40(r2)
 800f4ec:	e0bffc17 	ldw	r2,-16(fp)
 800f4f0:	1885883a 	add	r2,r3,r2
 800f4f4:	10800104 	addi	r2,r2,4
 800f4f8:	10800023 	ldbuio	r2,0(r2)
 800f4fc:	10803fcc 	andi	r2,r2,255
 800f500:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 800f504:	e0bffd07 	ldb	r2,-12(fp)
 800f508:	10800060 	cmpeqi	r2,r2,1
 800f50c:	1000091e 	bne	r2,zero,800f534 <Check_for_Master_Boot_Record+0xc0>
 800f510:	e0bffd07 	ldb	r2,-12(fp)
 800f514:	10800120 	cmpeqi	r2,r2,4
 800f518:	1000061e 	bne	r2,zero,800f534 <Check_for_Master_Boot_Record+0xc0>
 800f51c:	e0bffd07 	ldb	r2,-12(fp)
 800f520:	108001a0 	cmpeqi	r2,r2,6
 800f524:	1000031e 	bne	r2,zero,800f534 <Check_for_Master_Boot_Record+0xc0>
 800f528:	e0bffd07 	ldb	r2,-12(fp)
 800f52c:	10800398 	cmpnei	r2,r2,14
 800f530:	10002d1e 	bne	r2,zero,800f5e8 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 800f534:	d0a6f617 	ldw	r2,-25640(gp)
 800f538:	10c00a17 	ldw	r3,40(r2)
 800f53c:	e0bffc17 	ldw	r2,-16(fp)
 800f540:	1885883a 	add	r2,r3,r2
 800f544:	10800284 	addi	r2,r2,10
 800f548:	1080002b 	ldhuio	r2,0(r2)
 800f54c:	10bfffcc 	andi	r2,r2,65535
 800f550:	1006943a 	slli	r3,r2,16
 800f554:	d0a6f617 	ldw	r2,-25640(gp)
 800f558:	11000a17 	ldw	r4,40(r2)
 800f55c:	e0bffc17 	ldw	r2,-16(fp)
 800f560:	2085883a 	add	r2,r4,r2
 800f564:	10800204 	addi	r2,r2,8
 800f568:	1080002b 	ldhuio	r2,0(r2)
 800f56c:	10bfffcc 	andi	r2,r2,65535
 800f570:	10bfffcc 	andi	r2,r2,65535
 800f574:	1884b03a 	or	r2,r3,r2
 800f578:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 800f57c:	d0a6f617 	ldw	r2,-25640(gp)
 800f580:	10c00a17 	ldw	r3,40(r2)
 800f584:	e0bffc17 	ldw	r2,-16(fp)
 800f588:	1885883a 	add	r2,r3,r2
 800f58c:	10800384 	addi	r2,r2,14
 800f590:	1080002b 	ldhuio	r2,0(r2)
 800f594:	10bfffcc 	andi	r2,r2,65535
 800f598:	1006943a 	slli	r3,r2,16
 800f59c:	d0a6f617 	ldw	r2,-25640(gp)
 800f5a0:	11000a17 	ldw	r4,40(r2)
 800f5a4:	e0bffc17 	ldw	r2,-16(fp)
 800f5a8:	2085883a 	add	r2,r4,r2
 800f5ac:	10800304 	addi	r2,r2,12
 800f5b0:	1080002b 	ldhuio	r2,0(r2)
 800f5b4:	10bfffcc 	andi	r2,r2,65535
 800f5b8:	10bfffcc 	andi	r2,r2,65535
 800f5bc:	1884b03a 	or	r2,r3,r2
 800f5c0:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 800f5c4:	e0bfff17 	ldw	r2,-4(fp)
 800f5c8:	0080070e 	bge	zero,r2,800f5e8 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
 800f5cc:	00800044 	movi	r2,1
 800f5d0:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 800f5d4:	e0bfff17 	ldw	r2,-4(fp)
 800f5d8:	d0a6f515 	stw	r2,-25644(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 800f5dc:	e0bffe17 	ldw	r2,-8(fp)
 800f5e0:	d0a6f415 	stw	r2,-25648(gp)
						break;
 800f5e4:	00000606 	br	800f600 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 800f5e8:	e0bffa17 	ldw	r2,-24(fp)
 800f5ec:	10800044 	addi	r2,r2,1
 800f5f0:	e0bffa15 	stw	r2,-24(fp)
 800f5f4:	e0bffa17 	ldw	r2,-24(fp)
 800f5f8:	10800110 	cmplti	r2,r2,4
 800f5fc:	103fb51e 	bne	r2,zero,800f4d4 <__alt_data_end+0xf800f4d4>
				}
			}
		}
	}

	return result;
 800f600:	e0bff917 	ldw	r2,-28(fp)
}
 800f604:	e037883a 	mov	sp,fp
 800f608:	dfc00117 	ldw	ra,4(sp)
 800f60c:	df000017 	ldw	fp,0(sp)
 800f610:	dec00204 	addi	sp,sp,8
 800f614:	f800283a 	ret

0800f618 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 800f618:	defff804 	addi	sp,sp,-32
 800f61c:	dfc00715 	stw	ra,28(sp)
 800f620:	df000615 	stw	fp,24(sp)
 800f624:	df000604 	addi	fp,sp,24
 800f628:	e13ffc15 	stw	r4,-16(fp)
 800f62c:	e17ffd15 	stw	r5,-12(fp)
 800f630:	e1bffe15 	stw	r6,-8(fp)
 800f634:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 800f638:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800f63c:	e0bffc17 	ldw	r2,-16(fp)
 800f640:	108007cc 	andi	r2,r2,31
 800f644:	10008d1e 	bne	r2,zero,800f87c <Read_File_Record_At_Offset+0x264>
 800f648:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 800f64c:	10008b26 	beq	r2,zero,800f87c <Read_File_Record_At_Offset+0x264>
 800f650:	d0a6ed17 	ldw	r2,-25676(gp)
 800f654:	10008926 	beq	r2,zero,800f87c <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 800f658:	e03ffb15 	stw	zero,-20(fp)
 800f65c:	00001106 	br	800f6a4 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 800f660:	e0fffc17 	ldw	r3,-16(fp)
 800f664:	e0bffb17 	ldw	r2,-20(fp)
 800f668:	1885883a 	add	r2,r3,r2
 800f66c:	1007883a 	mov	r3,r2
 800f670:	d0a6f617 	ldw	r2,-25640(gp)
 800f674:	10800a17 	ldw	r2,40(r2)
 800f678:	1885883a 	add	r2,r3,r2
 800f67c:	10800023 	ldbuio	r2,0(r2)
 800f680:	10803fcc 	andi	r2,r2,255
 800f684:	1009883a 	mov	r4,r2
 800f688:	e0fffd17 	ldw	r3,-12(fp)
 800f68c:	e0bffb17 	ldw	r2,-20(fp)
 800f690:	1885883a 	add	r2,r3,r2
 800f694:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 800f698:	e0bffb17 	ldw	r2,-20(fp)
 800f69c:	10800044 	addi	r2,r2,1
 800f6a0:	e0bffb15 	stw	r2,-20(fp)
 800f6a4:	e0bffb17 	ldw	r2,-20(fp)
 800f6a8:	10800210 	cmplti	r2,r2,8
 800f6ac:	103fec1e 	bne	r2,zero,800f660 <__alt_data_end+0xf800f660>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 800f6b0:	e03ffb15 	stw	zero,-20(fp)
 800f6b4:	00001306 	br	800f704 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 800f6b8:	e0fffc17 	ldw	r3,-16(fp)
 800f6bc:	e0bffb17 	ldw	r2,-20(fp)
 800f6c0:	1885883a 	add	r2,r3,r2
 800f6c4:	1007883a 	mov	r3,r2
 800f6c8:	d0a6f617 	ldw	r2,-25640(gp)
 800f6cc:	10800a17 	ldw	r2,40(r2)
 800f6d0:	1885883a 	add	r2,r3,r2
 800f6d4:	10800204 	addi	r2,r2,8
 800f6d8:	10800023 	ldbuio	r2,0(r2)
 800f6dc:	10803fcc 	andi	r2,r2,255
 800f6e0:	1009883a 	mov	r4,r2
 800f6e4:	e0fffd17 	ldw	r3,-12(fp)
 800f6e8:	e0bffb17 	ldw	r2,-20(fp)
 800f6ec:	1885883a 	add	r2,r3,r2
 800f6f0:	10800204 	addi	r2,r2,8
 800f6f4:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 800f6f8:	e0bffb17 	ldw	r2,-20(fp)
 800f6fc:	10800044 	addi	r2,r2,1
 800f700:	e0bffb15 	stw	r2,-20(fp)
 800f704:	e0bffb17 	ldw	r2,-20(fp)
 800f708:	108000d0 	cmplti	r2,r2,3
 800f70c:	103fea1e 	bne	r2,zero,800f6b8 <__alt_data_end+0xf800f6b8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 800f710:	d0a6f617 	ldw	r2,-25640(gp)
 800f714:	10c00a17 	ldw	r3,40(r2)
 800f718:	e0bffc17 	ldw	r2,-16(fp)
 800f71c:	1885883a 	add	r2,r3,r2
 800f720:	108002c4 	addi	r2,r2,11
 800f724:	10800023 	ldbuio	r2,0(r2)
 800f728:	10803fcc 	andi	r2,r2,255
 800f72c:	1007883a 	mov	r3,r2
 800f730:	e0bffd17 	ldw	r2,-12(fp)
 800f734:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 800f738:	d0a6f617 	ldw	r2,-25640(gp)
 800f73c:	10c00a17 	ldw	r3,40(r2)
 800f740:	e0bffc17 	ldw	r2,-16(fp)
 800f744:	1885883a 	add	r2,r3,r2
 800f748:	10800384 	addi	r2,r2,14
 800f74c:	1080002b 	ldhuio	r2,0(r2)
 800f750:	10bfffcc 	andi	r2,r2,65535
 800f754:	1007883a 	mov	r3,r2
 800f758:	e0bffd17 	ldw	r2,-12(fp)
 800f75c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 800f760:	d0a6f617 	ldw	r2,-25640(gp)
 800f764:	10c00a17 	ldw	r3,40(r2)
 800f768:	e0bffc17 	ldw	r2,-16(fp)
 800f76c:	1885883a 	add	r2,r3,r2
 800f770:	10800404 	addi	r2,r2,16
 800f774:	1080002b 	ldhuio	r2,0(r2)
 800f778:	10bfffcc 	andi	r2,r2,65535
 800f77c:	1007883a 	mov	r3,r2
 800f780:	e0bffd17 	ldw	r2,-12(fp)
 800f784:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 800f788:	d0a6f617 	ldw	r2,-25640(gp)
 800f78c:	10c00a17 	ldw	r3,40(r2)
 800f790:	e0bffc17 	ldw	r2,-16(fp)
 800f794:	1885883a 	add	r2,r3,r2
 800f798:	10800484 	addi	r2,r2,18
 800f79c:	1080002b 	ldhuio	r2,0(r2)
 800f7a0:	10bfffcc 	andi	r2,r2,65535
 800f7a4:	1007883a 	mov	r3,r2
 800f7a8:	e0bffd17 	ldw	r2,-12(fp)
 800f7ac:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 800f7b0:	d0a6f617 	ldw	r2,-25640(gp)
 800f7b4:	10c00a17 	ldw	r3,40(r2)
 800f7b8:	e0bffc17 	ldw	r2,-16(fp)
 800f7bc:	1885883a 	add	r2,r3,r2
 800f7c0:	10800584 	addi	r2,r2,22
 800f7c4:	1080002b 	ldhuio	r2,0(r2)
 800f7c8:	10bfffcc 	andi	r2,r2,65535
 800f7cc:	1007883a 	mov	r3,r2
 800f7d0:	e0bffd17 	ldw	r2,-12(fp)
 800f7d4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 800f7d8:	d0a6f617 	ldw	r2,-25640(gp)
 800f7dc:	10c00a17 	ldw	r3,40(r2)
 800f7e0:	e0bffc17 	ldw	r2,-16(fp)
 800f7e4:	1885883a 	add	r2,r3,r2
 800f7e8:	10800604 	addi	r2,r2,24
 800f7ec:	1080002b 	ldhuio	r2,0(r2)
 800f7f0:	10bfffcc 	andi	r2,r2,65535
 800f7f4:	1007883a 	mov	r3,r2
 800f7f8:	e0bffd17 	ldw	r2,-12(fp)
 800f7fc:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 800f800:	d0a6f617 	ldw	r2,-25640(gp)
 800f804:	10c00a17 	ldw	r3,40(r2)
 800f808:	e0bffc17 	ldw	r2,-16(fp)
 800f80c:	1885883a 	add	r2,r3,r2
 800f810:	10800684 	addi	r2,r2,26
 800f814:	1080002b 	ldhuio	r2,0(r2)
 800f818:	10bfffcc 	andi	r2,r2,65535
 800f81c:	1007883a 	mov	r3,r2
 800f820:	e0bffd17 	ldw	r2,-12(fp)
 800f824:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 800f828:	d0a6f617 	ldw	r2,-25640(gp)
 800f82c:	10c00a17 	ldw	r3,40(r2)
 800f830:	e0bffc17 	ldw	r2,-16(fp)
 800f834:	1885883a 	add	r2,r3,r2
 800f838:	10800704 	addi	r2,r2,28
 800f83c:	10800037 	ldwio	r2,0(r2)
 800f840:	1007883a 	mov	r3,r2
 800f844:	e0bffd17 	ldw	r2,-12(fp)
 800f848:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 800f84c:	e0bffd17 	ldw	r2,-12(fp)
 800f850:	e0fffe17 	ldw	r3,-8(fp)
 800f854:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
 800f858:	e0bffd17 	ldw	r2,-12(fp)
 800f85c:	e0ffff17 	ldw	r3,-4(fp)
 800f860:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
 800f864:	e0bffc17 	ldw	r2,-16(fp)
 800f868:	1007883a 	mov	r3,r2
 800f86c:	e0bffd17 	ldw	r2,-12(fp)
 800f870:	10c00c0d 	sth	r3,48(r2)
		result = true;
 800f874:	00800044 	movi	r2,1
 800f878:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
 800f87c:	e0bffa17 	ldw	r2,-24(fp)
}
 800f880:	e037883a 	mov	sp,fp
 800f884:	dfc00117 	ldw	ra,4(sp)
 800f888:	df000017 	ldw	fp,0(sp)
 800f88c:	dec00204 	addi	sp,sp,8
 800f890:	f800283a 	ret

0800f894 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 800f894:	defff904 	addi	sp,sp,-28
 800f898:	dfc00615 	stw	ra,24(sp)
 800f89c:	df000515 	stw	fp,20(sp)
 800f8a0:	df000504 	addi	fp,sp,20
 800f8a4:	e13ffe15 	stw	r4,-8(fp)
 800f8a8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 800f8ac:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800f8b0:	e0bffe17 	ldw	r2,-8(fp)
 800f8b4:	108007cc 	andi	r2,r2,31
 800f8b8:	1000931e 	bne	r2,zero,800fb08 <Write_File_Record_At_Offset+0x274>
 800f8bc:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 800f8c0:	10009126 	beq	r2,zero,800fb08 <Write_File_Record_At_Offset+0x274>
 800f8c4:	d0a6ed17 	ldw	r2,-25676(gp)
 800f8c8:	10008f26 	beq	r2,zero,800fb08 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 800f8cc:	e03ffc15 	stw	zero,-16(fp)
 800f8d0:	00001f06 	br	800f950 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
 800f8d4:	e0bffc17 	ldw	r2,-16(fp)
 800f8d8:	10800044 	addi	r2,r2,1
 800f8dc:	e0ffff17 	ldw	r3,-4(fp)
 800f8e0:	1885883a 	add	r2,r3,r2
 800f8e4:	10800003 	ldbu	r2,0(r2)
 800f8e8:	10803fcc 	andi	r2,r2,255
 800f8ec:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
 800f8f0:	e0bffd0f 	ldh	r2,-12(fp)
 800f8f4:	1004923a 	slli	r2,r2,8
 800f8f8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
 800f8fc:	e0ffff17 	ldw	r3,-4(fp)
 800f900:	e0bffc17 	ldw	r2,-16(fp)
 800f904:	1885883a 	add	r2,r3,r2
 800f908:	10800003 	ldbu	r2,0(r2)
 800f90c:	10c03fcc 	andi	r3,r2,255
 800f910:	e0bffd0b 	ldhu	r2,-12(fp)
 800f914:	1884b03a 	or	r2,r3,r2
 800f918:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 800f91c:	e0fffe17 	ldw	r3,-8(fp)
 800f920:	e0bffc17 	ldw	r2,-16(fp)
 800f924:	1885883a 	add	r2,r3,r2
 800f928:	1007883a 	mov	r3,r2
 800f92c:	d0a6f617 	ldw	r2,-25640(gp)
 800f930:	10800a17 	ldw	r2,40(r2)
 800f934:	1885883a 	add	r2,r3,r2
 800f938:	1007883a 	mov	r3,r2
 800f93c:	e0bffd0f 	ldh	r2,-12(fp)
 800f940:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 800f944:	e0bffc17 	ldw	r2,-16(fp)
 800f948:	10800084 	addi	r2,r2,2
 800f94c:	e0bffc15 	stw	r2,-16(fp)
 800f950:	e0bffc17 	ldw	r2,-16(fp)
 800f954:	10800210 	cmplti	r2,r2,8
 800f958:	103fde1e 	bne	r2,zero,800f8d4 <__alt_data_end+0xf800f8d4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 800f95c:	e03ffc15 	stw	zero,-16(fp)
 800f960:	00001306 	br	800f9b0 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 800f964:	e0fffe17 	ldw	r3,-8(fp)
 800f968:	e0bffc17 	ldw	r2,-16(fp)
 800f96c:	1885883a 	add	r2,r3,r2
 800f970:	1007883a 	mov	r3,r2
 800f974:	d0a6f617 	ldw	r2,-25640(gp)
 800f978:	10800a17 	ldw	r2,40(r2)
 800f97c:	1885883a 	add	r2,r3,r2
 800f980:	10800204 	addi	r2,r2,8
 800f984:	1009883a 	mov	r4,r2
 800f988:	e0ffff17 	ldw	r3,-4(fp)
 800f98c:	e0bffc17 	ldw	r2,-16(fp)
 800f990:	1885883a 	add	r2,r3,r2
 800f994:	10800204 	addi	r2,r2,8
 800f998:	10800003 	ldbu	r2,0(r2)
 800f99c:	10803fcc 	andi	r2,r2,255
 800f9a0:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 800f9a4:	e0bffc17 	ldw	r2,-16(fp)
 800f9a8:	10800044 	addi	r2,r2,1
 800f9ac:	e0bffc15 	stw	r2,-16(fp)
 800f9b0:	e0bffc17 	ldw	r2,-16(fp)
 800f9b4:	108000d0 	cmplti	r2,r2,3
 800f9b8:	103fea1e 	bne	r2,zero,800f964 <__alt_data_end+0xf800f964>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 800f9bc:	d0a6f617 	ldw	r2,-25640(gp)
 800f9c0:	10c00a17 	ldw	r3,40(r2)
 800f9c4:	e0bffe17 	ldw	r2,-8(fp)
 800f9c8:	1885883a 	add	r2,r3,r2
 800f9cc:	108002c4 	addi	r2,r2,11
 800f9d0:	1007883a 	mov	r3,r2
 800f9d4:	e0bfff17 	ldw	r2,-4(fp)
 800f9d8:	108002c3 	ldbu	r2,11(r2)
 800f9dc:	10803fcc 	andi	r2,r2,255
 800f9e0:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 800f9e4:	d0a6f617 	ldw	r2,-25640(gp)
 800f9e8:	10c00a17 	ldw	r3,40(r2)
 800f9ec:	e0bffe17 	ldw	r2,-8(fp)
 800f9f0:	1885883a 	add	r2,r3,r2
 800f9f4:	10800384 	addi	r2,r2,14
 800f9f8:	1007883a 	mov	r3,r2
 800f9fc:	e0bfff17 	ldw	r2,-4(fp)
 800fa00:	1080030b 	ldhu	r2,12(r2)
 800fa04:	10bfffcc 	andi	r2,r2,65535
 800fa08:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 800fa0c:	d0a6f617 	ldw	r2,-25640(gp)
 800fa10:	10c00a17 	ldw	r3,40(r2)
 800fa14:	e0bffe17 	ldw	r2,-8(fp)
 800fa18:	1885883a 	add	r2,r3,r2
 800fa1c:	10800404 	addi	r2,r2,16
 800fa20:	1007883a 	mov	r3,r2
 800fa24:	e0bfff17 	ldw	r2,-4(fp)
 800fa28:	1080038b 	ldhu	r2,14(r2)
 800fa2c:	10bfffcc 	andi	r2,r2,65535
 800fa30:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 800fa34:	d0a6f617 	ldw	r2,-25640(gp)
 800fa38:	10c00a17 	ldw	r3,40(r2)
 800fa3c:	e0bffe17 	ldw	r2,-8(fp)
 800fa40:	1885883a 	add	r2,r3,r2
 800fa44:	10800484 	addi	r2,r2,18
 800fa48:	1007883a 	mov	r3,r2
 800fa4c:	e0bfff17 	ldw	r2,-4(fp)
 800fa50:	1080040b 	ldhu	r2,16(r2)
 800fa54:	10bfffcc 	andi	r2,r2,65535
 800fa58:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 800fa5c:	d0a6f617 	ldw	r2,-25640(gp)
 800fa60:	10c00a17 	ldw	r3,40(r2)
 800fa64:	e0bffe17 	ldw	r2,-8(fp)
 800fa68:	1885883a 	add	r2,r3,r2
 800fa6c:	10800584 	addi	r2,r2,22
 800fa70:	1007883a 	mov	r3,r2
 800fa74:	e0bfff17 	ldw	r2,-4(fp)
 800fa78:	1080048b 	ldhu	r2,18(r2)
 800fa7c:	10bfffcc 	andi	r2,r2,65535
 800fa80:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 800fa84:	d0a6f617 	ldw	r2,-25640(gp)
 800fa88:	10c00a17 	ldw	r3,40(r2)
 800fa8c:	e0bffe17 	ldw	r2,-8(fp)
 800fa90:	1885883a 	add	r2,r3,r2
 800fa94:	10800604 	addi	r2,r2,24
 800fa98:	1007883a 	mov	r3,r2
 800fa9c:	e0bfff17 	ldw	r2,-4(fp)
 800faa0:	1080050b 	ldhu	r2,20(r2)
 800faa4:	10bfffcc 	andi	r2,r2,65535
 800faa8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 800faac:	d0a6f617 	ldw	r2,-25640(gp)
 800fab0:	10c00a17 	ldw	r3,40(r2)
 800fab4:	e0bffe17 	ldw	r2,-8(fp)
 800fab8:	1885883a 	add	r2,r3,r2
 800fabc:	10800684 	addi	r2,r2,26
 800fac0:	1007883a 	mov	r3,r2
 800fac4:	e0bfff17 	ldw	r2,-4(fp)
 800fac8:	1080058b 	ldhu	r2,22(r2)
 800facc:	10bfffcc 	andi	r2,r2,65535
 800fad0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 800fad4:	d0a6f617 	ldw	r2,-25640(gp)
 800fad8:	10c00a17 	ldw	r3,40(r2)
 800fadc:	e0bffe17 	ldw	r2,-8(fp)
 800fae0:	1885883a 	add	r2,r3,r2
 800fae4:	10800704 	addi	r2,r2,28
 800fae8:	1007883a 	mov	r3,r2
 800faec:	e0bfff17 	ldw	r2,-4(fp)
 800faf0:	10800617 	ldw	r2,24(r2)
 800faf4:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
 800faf8:	00800044 	movi	r2,1
 800fafc:	d0a6f715 	stw	r2,-25636(gp)
        result = true;
 800fb00:	00800044 	movi	r2,1
 800fb04:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 800fb08:	e0bffb17 	ldw	r2,-20(fp)
}
 800fb0c:	e037883a 	mov	sp,fp
 800fb10:	dfc00117 	ldw	ra,4(sp)
 800fb14:	df000017 	ldw	fp,0(sp)
 800fb18:	dec00204 	addi	sp,sp,8
 800fb1c:	f800283a 	ret

0800fb20 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 800fb20:	defff804 	addi	sp,sp,-32
 800fb24:	dfc00715 	stw	ra,28(sp)
 800fb28:	df000615 	stw	fp,24(sp)
 800fb2c:	dc000515 	stw	r16,20(sp)
 800fb30:	df000604 	addi	fp,sp,24
 800fb34:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
 800fb38:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
 800fb3c:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 800fb40:	e17ffe17 	ldw	r5,-8(fp)
 800fb44:	0009883a 	mov	r4,zero
 800fb48:	800f2080 	call	800f208 <Read_Sector_Data>
 800fb4c:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 800fb50:	d0a6f617 	ldw	r2,-25640(gp)
 800fb54:	10800a17 	ldw	r2,40(r2)
 800fb58:	10807f84 	addi	r2,r2,510
 800fb5c:	1080002b 	ldhuio	r2,0(r2)
 800fb60:	10bfffcc 	andi	r2,r2,65535
 800fb64:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 800fb68:	e0bffd0f 	ldh	r2,-12(fp)
 800fb6c:	10ffffcc 	andi	r3,r2,65535
 800fb70:	00aa9554 	movui	r2,43605
 800fb74:	18818a1e 	bne	r3,r2,80101a0 <Check_for_DOS_FAT+0x680>
 800fb78:	e0bffa17 	ldw	r2,-24(fp)
 800fb7c:	10018826 	beq	r2,zero,80101a0 <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
 800fb80:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 800fb84:	d0a6f617 	ldw	r2,-25640(gp)
 800fb88:	10800a17 	ldw	r2,40(r2)
 800fb8c:	10800023 	ldbuio	r2,0(r2)
 800fb90:	10803fcc 	andi	r2,r2,255
 800fb94:	1007883a 	mov	r3,r2
 800fb98:	008200b4 	movhi	r2,2050
 800fb9c:	10a5d704 	addi	r2,r2,-26788
 800fba0:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 800fba4:	d0a6f617 	ldw	r2,-25640(gp)
 800fba8:	10800a17 	ldw	r2,40(r2)
 800fbac:	10800044 	addi	r2,r2,1
 800fbb0:	10800023 	ldbuio	r2,0(r2)
 800fbb4:	10803fcc 	andi	r2,r2,255
 800fbb8:	1007883a 	mov	r3,r2
 800fbbc:	008200b4 	movhi	r2,2050
 800fbc0:	10a5d704 	addi	r2,r2,-26788
 800fbc4:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 800fbc8:	d0a6f617 	ldw	r2,-25640(gp)
 800fbcc:	10800a17 	ldw	r2,40(r2)
 800fbd0:	10800084 	addi	r2,r2,2
 800fbd4:	10800023 	ldbuio	r2,0(r2)
 800fbd8:	10803fcc 	andi	r2,r2,255
 800fbdc:	1007883a 	mov	r3,r2
 800fbe0:	008200b4 	movhi	r2,2050
 800fbe4:	10a5d704 	addi	r2,r2,-26788
 800fbe8:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 800fbec:	e03ffb15 	stw	zero,-20(fp)
 800fbf0:	00001106 	br	800fc38 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 800fbf4:	d0a6f617 	ldw	r2,-25640(gp)
 800fbf8:	10c00a17 	ldw	r3,40(r2)
 800fbfc:	e0bffb17 	ldw	r2,-20(fp)
 800fc00:	1885883a 	add	r2,r3,r2
 800fc04:	108000c4 	addi	r2,r2,3
 800fc08:	10800023 	ldbuio	r2,0(r2)
 800fc0c:	10803fcc 	andi	r2,r2,255
 800fc10:	1009883a 	mov	r4,r2
 800fc14:	008200b4 	movhi	r2,2050
 800fc18:	10a5d704 	addi	r2,r2,-26788
 800fc1c:	e0fffb17 	ldw	r3,-20(fp)
 800fc20:	10c5883a 	add	r2,r2,r3
 800fc24:	108000c4 	addi	r2,r2,3
 800fc28:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 800fc2c:	e0bffb17 	ldw	r2,-20(fp)
 800fc30:	10800044 	addi	r2,r2,1
 800fc34:	e0bffb15 	stw	r2,-20(fp)
 800fc38:	e0bffb17 	ldw	r2,-20(fp)
 800fc3c:	10800210 	cmplti	r2,r2,8
 800fc40:	103fec1e 	bne	r2,zero,800fbf4 <__alt_data_end+0xf800fbf4>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 800fc44:	d0a6f617 	ldw	r2,-25640(gp)
 800fc48:	10800a17 	ldw	r2,40(r2)
 800fc4c:	10800304 	addi	r2,r2,12
 800fc50:	10800023 	ldbuio	r2,0(r2)
 800fc54:	10803fcc 	andi	r2,r2,255
 800fc58:	1004923a 	slli	r2,r2,8
 800fc5c:	1007883a 	mov	r3,r2
 800fc60:	d0a6f617 	ldw	r2,-25640(gp)
 800fc64:	10800a17 	ldw	r2,40(r2)
 800fc68:	108002c4 	addi	r2,r2,11
 800fc6c:	10800023 	ldbuio	r2,0(r2)
 800fc70:	10803fcc 	andi	r2,r2,255
 800fc74:	10803fcc 	andi	r2,r2,255
 800fc78:	1080201c 	xori	r2,r2,128
 800fc7c:	10bfe004 	addi	r2,r2,-128
 800fc80:	1884b03a 	or	r2,r3,r2
 800fc84:	1007883a 	mov	r3,r2
 800fc88:	008200b4 	movhi	r2,2050
 800fc8c:	10a5d704 	addi	r2,r2,-26788
 800fc90:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 800fc94:	d0a6f617 	ldw	r2,-25640(gp)
 800fc98:	10800a17 	ldw	r2,40(r2)
 800fc9c:	10800344 	addi	r2,r2,13
 800fca0:	10800023 	ldbuio	r2,0(r2)
 800fca4:	10803fcc 	andi	r2,r2,255
 800fca8:	1007883a 	mov	r3,r2
 800fcac:	008200b4 	movhi	r2,2050
 800fcb0:	10a5d704 	addi	r2,r2,-26788
 800fcb4:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 800fcb8:	d0a6f617 	ldw	r2,-25640(gp)
 800fcbc:	10800a17 	ldw	r2,40(r2)
 800fcc0:	10800384 	addi	r2,r2,14
 800fcc4:	1080002b 	ldhuio	r2,0(r2)
 800fcc8:	10bfffcc 	andi	r2,r2,65535
 800fccc:	1007883a 	mov	r3,r2
 800fcd0:	008200b4 	movhi	r2,2050
 800fcd4:	10a5d704 	addi	r2,r2,-26788
 800fcd8:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 800fcdc:	d0a6f617 	ldw	r2,-25640(gp)
 800fce0:	10800a17 	ldw	r2,40(r2)
 800fce4:	10800404 	addi	r2,r2,16
 800fce8:	10800023 	ldbuio	r2,0(r2)
 800fcec:	10803fcc 	andi	r2,r2,255
 800fcf0:	1007883a 	mov	r3,r2
 800fcf4:	008200b4 	movhi	r2,2050
 800fcf8:	10a5d704 	addi	r2,r2,-26788
 800fcfc:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 800fd00:	d0a6f617 	ldw	r2,-25640(gp)
 800fd04:	10800a17 	ldw	r2,40(r2)
 800fd08:	10800484 	addi	r2,r2,18
 800fd0c:	10800023 	ldbuio	r2,0(r2)
 800fd10:	10803fcc 	andi	r2,r2,255
 800fd14:	1004923a 	slli	r2,r2,8
 800fd18:	1007883a 	mov	r3,r2
 800fd1c:	d0a6f617 	ldw	r2,-25640(gp)
 800fd20:	10800a17 	ldw	r2,40(r2)
 800fd24:	10800444 	addi	r2,r2,17
 800fd28:	10800023 	ldbuio	r2,0(r2)
 800fd2c:	10803fcc 	andi	r2,r2,255
 800fd30:	10803fcc 	andi	r2,r2,255
 800fd34:	1884b03a 	or	r2,r3,r2
 800fd38:	1007883a 	mov	r3,r2
 800fd3c:	008200b4 	movhi	r2,2050
 800fd40:	10a5d704 	addi	r2,r2,-26788
 800fd44:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 800fd48:	d0a6f617 	ldw	r2,-25640(gp)
 800fd4c:	10800a17 	ldw	r2,40(r2)
 800fd50:	10800504 	addi	r2,r2,20
 800fd54:	10800023 	ldbuio	r2,0(r2)
 800fd58:	10803fcc 	andi	r2,r2,255
 800fd5c:	1004923a 	slli	r2,r2,8
 800fd60:	1007883a 	mov	r3,r2
 800fd64:	d0a6f617 	ldw	r2,-25640(gp)
 800fd68:	10800a17 	ldw	r2,40(r2)
 800fd6c:	108004c4 	addi	r2,r2,19
 800fd70:	10800023 	ldbuio	r2,0(r2)
 800fd74:	10803fcc 	andi	r2,r2,255
 800fd78:	10803fcc 	andi	r2,r2,255
 800fd7c:	1884b03a 	or	r2,r3,r2
 800fd80:	1007883a 	mov	r3,r2
 800fd84:	008200b4 	movhi	r2,2050
 800fd88:	10a5d704 	addi	r2,r2,-26788
 800fd8c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 800fd90:	d0a6f617 	ldw	r2,-25640(gp)
 800fd94:	10800a17 	ldw	r2,40(r2)
 800fd98:	10800544 	addi	r2,r2,21
 800fd9c:	10800023 	ldbuio	r2,0(r2)
 800fda0:	10803fcc 	andi	r2,r2,255
 800fda4:	1007883a 	mov	r3,r2
 800fda8:	008200b4 	movhi	r2,2050
 800fdac:	10a5d704 	addi	r2,r2,-26788
 800fdb0:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 800fdb4:	d0a6f617 	ldw	r2,-25640(gp)
 800fdb8:	10800a17 	ldw	r2,40(r2)
 800fdbc:	10800584 	addi	r2,r2,22
 800fdc0:	1080002b 	ldhuio	r2,0(r2)
 800fdc4:	10bfffcc 	andi	r2,r2,65535
 800fdc8:	1007883a 	mov	r3,r2
 800fdcc:	008200b4 	movhi	r2,2050
 800fdd0:	10a5d704 	addi	r2,r2,-26788
 800fdd4:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 800fdd8:	d0a6f617 	ldw	r2,-25640(gp)
 800fddc:	10800a17 	ldw	r2,40(r2)
 800fde0:	10800604 	addi	r2,r2,24
 800fde4:	1080002b 	ldhuio	r2,0(r2)
 800fde8:	10bfffcc 	andi	r2,r2,65535
 800fdec:	1007883a 	mov	r3,r2
 800fdf0:	008200b4 	movhi	r2,2050
 800fdf4:	10a5d704 	addi	r2,r2,-26788
 800fdf8:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 800fdfc:	d0a6f617 	ldw	r2,-25640(gp)
 800fe00:	10800a17 	ldw	r2,40(r2)
 800fe04:	10800684 	addi	r2,r2,26
 800fe08:	1080002b 	ldhuio	r2,0(r2)
 800fe0c:	10bfffcc 	andi	r2,r2,65535
 800fe10:	1007883a 	mov	r3,r2
 800fe14:	008200b4 	movhi	r2,2050
 800fe18:	10a5d704 	addi	r2,r2,-26788
 800fe1c:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 800fe20:	d0a6f617 	ldw	r2,-25640(gp)
 800fe24:	10800a17 	ldw	r2,40(r2)
 800fe28:	10800704 	addi	r2,r2,28
 800fe2c:	10800037 	ldwio	r2,0(r2)
 800fe30:	1007883a 	mov	r3,r2
 800fe34:	008200b4 	movhi	r2,2050
 800fe38:	10a5d704 	addi	r2,r2,-26788
 800fe3c:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 800fe40:	d0a6f617 	ldw	r2,-25640(gp)
 800fe44:	10800a17 	ldw	r2,40(r2)
 800fe48:	10800804 	addi	r2,r2,32
 800fe4c:	10800037 	ldwio	r2,0(r2)
 800fe50:	1007883a 	mov	r3,r2
 800fe54:	008200b4 	movhi	r2,2050
 800fe58:	10a5d704 	addi	r2,r2,-26788
 800fe5c:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 800fe60:	d0a6f617 	ldw	r2,-25640(gp)
 800fe64:	10800a17 	ldw	r2,40(r2)
 800fe68:	10800904 	addi	r2,r2,36
 800fe6c:	10800023 	ldbuio	r2,0(r2)
 800fe70:	10803fcc 	andi	r2,r2,255
 800fe74:	1007883a 	mov	r3,r2
 800fe78:	008200b4 	movhi	r2,2050
 800fe7c:	10a5d704 	addi	r2,r2,-26788
 800fe80:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 800fe84:	d0a6f617 	ldw	r2,-25640(gp)
 800fe88:	10800a17 	ldw	r2,40(r2)
 800fe8c:	10800944 	addi	r2,r2,37
 800fe90:	10800023 	ldbuio	r2,0(r2)
 800fe94:	10803fcc 	andi	r2,r2,255
 800fe98:	1007883a 	mov	r3,r2
 800fe9c:	008200b4 	movhi	r2,2050
 800fea0:	10a5d704 	addi	r2,r2,-26788
 800fea4:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 800fea8:	d0a6f617 	ldw	r2,-25640(gp)
 800feac:	10800a17 	ldw	r2,40(r2)
 800feb0:	10800984 	addi	r2,r2,38
 800feb4:	10800023 	ldbuio	r2,0(r2)
 800feb8:	10803fcc 	andi	r2,r2,255
 800febc:	1007883a 	mov	r3,r2
 800fec0:	008200b4 	movhi	r2,2050
 800fec4:	10a5d704 	addi	r2,r2,-26788
 800fec8:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 800fecc:	008200b4 	movhi	r2,2050
 800fed0:	10a5d704 	addi	r2,r2,-26788
 800fed4:	1080040b 	ldhu	r2,16(r2)
 800fed8:	10ffffcc 	andi	r3,r2,65535
 800fedc:	008200b4 	movhi	r2,2050
 800fee0:	10a5d704 	addi	r2,r2,-26788
 800fee4:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 800fee8:	008200b4 	movhi	r2,2050
 800feec:	10a5d704 	addi	r2,r2,-26788
 800fef0:	10c01117 	ldw	r3,68(r2)
 800fef4:	008200b4 	movhi	r2,2050
 800fef8:	10a5d704 	addi	r2,r2,-26788
 800fefc:	1080068b 	ldhu	r2,26(r2)
 800ff00:	10bfffcc 	andi	r2,r2,65535
 800ff04:	1887883a 	add	r3,r3,r2
 800ff08:	008200b4 	movhi	r2,2050
 800ff0c:	10a5d704 	addi	r2,r2,-26788
 800ff10:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 800ff14:	008200b4 	movhi	r2,2050
 800ff18:	10a5d704 	addi	r2,r2,-26788
 800ff1c:	10c01217 	ldw	r3,72(r2)
 800ff20:	008200b4 	movhi	r2,2050
 800ff24:	10a5d704 	addi	r2,r2,-26788
 800ff28:	1080068b 	ldhu	r2,26(r2)
 800ff2c:	10bfffcc 	andi	r2,r2,65535
 800ff30:	1887883a 	add	r3,r3,r2
 800ff34:	008200b4 	movhi	r2,2050
 800ff38:	10a5d704 	addi	r2,r2,-26788
 800ff3c:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 800ff40:	008200b4 	movhi	r2,2050
 800ff44:	10a5d704 	addi	r2,r2,-26788
 800ff48:	14001317 	ldw	r16,76(r2)
 800ff4c:	008200b4 	movhi	r2,2050
 800ff50:	10a5d704 	addi	r2,r2,-26788
 800ff54:	1080050b 	ldhu	r2,20(r2)
 800ff58:	10bfffcc 	andi	r2,r2,65535
 800ff5c:	1006917a 	slli	r3,r2,5
 800ff60:	008200b4 	movhi	r2,2050
 800ff64:	10a5d704 	addi	r2,r2,-26788
 800ff68:	1080030b 	ldhu	r2,12(r2)
 800ff6c:	10bfffcc 	andi	r2,r2,65535
 800ff70:	100b883a 	mov	r5,r2
 800ff74:	1809883a 	mov	r4,r3
 800ff78:	800bc600 	call	800bc60 <__divsi3>
 800ff7c:	8087883a 	add	r3,r16,r2
 800ff80:	008200b4 	movhi	r2,2050
 800ff84:	10a5d704 	addi	r2,r2,-26788
 800ff88:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 800ff8c:	008200b4 	movhi	r2,2050
 800ff90:	10a5d704 	addi	r2,r2,-26788
 800ff94:	1080058b 	ldhu	r2,22(r2)
 800ff98:	10bfffcc 	andi	r2,r2,65535
 800ff9c:	10000d26 	beq	r2,zero,800ffd4 <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 800ffa0:	008200b4 	movhi	r2,2050
 800ffa4:	10a5d704 	addi	r2,r2,-26788
 800ffa8:	1080058b 	ldhu	r2,22(r2)
 800ffac:	10ffffcc 	andi	r3,r2,65535
 800ffb0:	008200b4 	movhi	r2,2050
 800ffb4:	10a5d704 	addi	r2,r2,-26788
 800ffb8:	10800383 	ldbu	r2,14(r2)
 800ffbc:	10803fcc 	andi	r2,r2,255
 800ffc0:	100b883a 	mov	r5,r2
 800ffc4:	1809883a 	mov	r4,r3
 800ffc8:	800bc600 	call	800bc60 <__divsi3>
 800ffcc:	e0bffc15 	stw	r2,-16(fp)
 800ffd0:	00000b06 	br	8010000 <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 800ffd4:	008200b4 	movhi	r2,2050
 800ffd8:	10a5d704 	addi	r2,r2,-26788
 800ffdc:	10c00917 	ldw	r3,36(r2)
 800ffe0:	008200b4 	movhi	r2,2050
 800ffe4:	10a5d704 	addi	r2,r2,-26788
 800ffe8:	10800383 	ldbu	r2,14(r2)
 800ffec:	10803fcc 	andi	r2,r2,255
 800fff0:	100b883a 	mov	r5,r2
 800fff4:	1809883a 	mov	r4,r3
 800fff8:	800bd580 	call	800bd58 <__udivsi3>
 800fffc:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
 8010000:	e0bffc17 	ldw	r2,-16(fp)
 8010004:	1083fdc8 	cmpgei	r2,r2,4087
 8010008:	1000051e 	bne	r2,zero,8010020 <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 801000c:	008200b4 	movhi	r2,2050
 8010010:	10a5d704 	addi	r2,r2,-26788
 8010014:	00c00304 	movi	r3,12
 8010018:	10c01085 	stb	r3,66(r2)
 801001c:	00000c06 	br	8010050 <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
 8010020:	e0bffc17 	ldw	r2,-16(fp)
 8010024:	00fffb54 	movui	r3,65517
 8010028:	18800516 	blt	r3,r2,8010040 <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 801002c:	008200b4 	movhi	r2,2050
 8010030:	10a5d704 	addi	r2,r2,-26788
 8010034:	00c00404 	movi	r3,16
 8010038:	10c01085 	stb	r3,66(r2)
 801003c:	00000406 	br	8010050 <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 8010040:	008200b4 	movhi	r2,2050
 8010044:	10a5d704 	addi	r2,r2,-26788
 8010048:	00c00804 	movi	r3,32
 801004c:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
 8010050:	e03ffb15 	stw	zero,-20(fp)
 8010054:	00001106 	br	801009c <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 8010058:	d0a6f617 	ldw	r2,-25640(gp)
 801005c:	10c00a17 	ldw	r3,40(r2)
 8010060:	e0bffb17 	ldw	r2,-20(fp)
 8010064:	1885883a 	add	r2,r3,r2
 8010068:	108009c4 	addi	r2,r2,39
 801006c:	10800023 	ldbuio	r2,0(r2)
 8010070:	10803fcc 	andi	r2,r2,255
 8010074:	1009883a 	mov	r4,r2
 8010078:	008200b4 	movhi	r2,2050
 801007c:	10a5d704 	addi	r2,r2,-26788
 8010080:	e0fffb17 	ldw	r3,-20(fp)
 8010084:	10c5883a 	add	r2,r2,r3
 8010088:	10800ac4 	addi	r2,r2,43
 801008c:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 8010090:	e0bffb17 	ldw	r2,-20(fp)
 8010094:	10800044 	addi	r2,r2,1
 8010098:	e0bffb15 	stw	r2,-20(fp)
 801009c:	e0bffb17 	ldw	r2,-20(fp)
 80100a0:	10800110 	cmplti	r2,r2,4
 80100a4:	103fec1e 	bne	r2,zero,8010058 <__alt_data_end+0xf8010058>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 80100a8:	e03ffb15 	stw	zero,-20(fp)
 80100ac:	00001106 	br	80100f4 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 80100b0:	d0a6f617 	ldw	r2,-25640(gp)
 80100b4:	10c00a17 	ldw	r3,40(r2)
 80100b8:	e0bffb17 	ldw	r2,-20(fp)
 80100bc:	1885883a 	add	r2,r3,r2
 80100c0:	10800ac4 	addi	r2,r2,43
 80100c4:	10800023 	ldbuio	r2,0(r2)
 80100c8:	10803fcc 	andi	r2,r2,255
 80100cc:	1009883a 	mov	r4,r2
 80100d0:	008200b4 	movhi	r2,2050
 80100d4:	10a5d704 	addi	r2,r2,-26788
 80100d8:	e0fffb17 	ldw	r3,-20(fp)
 80100dc:	10c5883a 	add	r2,r2,r3
 80100e0:	10800bc4 	addi	r2,r2,47
 80100e4:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 80100e8:	e0bffb17 	ldw	r2,-20(fp)
 80100ec:	10800044 	addi	r2,r2,1
 80100f0:	e0bffb15 	stw	r2,-20(fp)
 80100f4:	e0bffb17 	ldw	r2,-20(fp)
 80100f8:	108002d0 	cmplti	r2,r2,11
 80100fc:	103fec1e 	bne	r2,zero,80100b0 <__alt_data_end+0xf80100b0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 8010100:	e03ffb15 	stw	zero,-20(fp)
 8010104:	00001106 	br	801014c <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 8010108:	d0a6f617 	ldw	r2,-25640(gp)
 801010c:	10c00a17 	ldw	r3,40(r2)
 8010110:	e0bffb17 	ldw	r2,-20(fp)
 8010114:	1885883a 	add	r2,r3,r2
 8010118:	10800d84 	addi	r2,r2,54
 801011c:	10800023 	ldbuio	r2,0(r2)
 8010120:	10803fcc 	andi	r2,r2,255
 8010124:	1009883a 	mov	r4,r2
 8010128:	008200b4 	movhi	r2,2050
 801012c:	10a5d704 	addi	r2,r2,-26788
 8010130:	e0fffb17 	ldw	r3,-20(fp)
 8010134:	10c5883a 	add	r2,r2,r3
 8010138:	10800e84 	addi	r2,r2,58
 801013c:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 8010140:	e0bffb17 	ldw	r2,-20(fp)
 8010144:	10800044 	addi	r2,r2,1
 8010148:	e0bffb15 	stw	r2,-20(fp)
 801014c:	e0bffb17 	ldw	r2,-20(fp)
 8010150:	10800210 	cmplti	r2,r2,8
 8010154:	103fec1e 	bne	r2,zero,8010108 <__alt_data_end+0xf8010108>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 8010158:	e03ffb15 	stw	zero,-20(fp)
 801015c:	00000a06 	br	8010188 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
 8010160:	008200b4 	movhi	r2,2050
 8010164:	10a5ec04 	addi	r2,r2,-26704
 8010168:	e0fffb17 	ldw	r3,-20(fp)
 801016c:	180691ba 	slli	r3,r3,6
 8010170:	10c5883a 	add	r2,r2,r3
 8010174:	10800f04 	addi	r2,r2,60
 8010178:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 801017c:	e0bffb17 	ldw	r2,-20(fp)
 8010180:	10800044 	addi	r2,r2,1
 8010184:	e0bffb15 	stw	r2,-20(fp)
 8010188:	e0bffb17 	ldw	r2,-20(fp)
 801018c:	10800510 	cmplti	r2,r2,20
 8010190:	103ff31e 	bne	r2,zero,8010160 <__alt_data_end+0xf8010160>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 8010194:	00800044 	movi	r2,1
 8010198:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
 801019c:	00000106 	br	80101a4 <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
 80101a0:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
 80101a4:	e0bffa17 	ldw	r2,-24(fp)
}
 80101a8:	e6ffff04 	addi	sp,fp,-4
 80101ac:	dfc00217 	ldw	ra,8(sp)
 80101b0:	df000117 	ldw	fp,4(sp)
 80101b4:	dc000017 	ldw	r16,0(sp)
 80101b8:	dec00304 	addi	sp,sp,12
 80101bc:	f800283a 	ret

080101c0 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 80101c0:	defffc04 	addi	sp,sp,-16
 80101c4:	dfc00315 	stw	ra,12(sp)
 80101c8:	df000215 	stw	fp,8(sp)
 80101cc:	df000204 	addi	fp,sp,8
	bool result = false;
 80101d0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
 80101d4:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 80101d8:	10002e26 	beq	r2,zero,8010294 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
 80101dc:	d0a6f017 	ldw	r2,-25664(gp)
 80101e0:	1080000b 	ldhu	r2,0(r2)
 80101e4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 80101e8:	d026f415 	stw	zero,-25648(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 80101ec:	d026f515 	stw	zero,-25644(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 80101f0:	e0bfff0f 	ldh	r2,-4(fp)
 80101f4:	10002716 	blt	r2,zero,8010294 <Look_for_FAT16+0xd4>
 80101f8:	e0bfff0b 	ldhu	r2,-4(fp)
 80101fc:	10bfffcc 	andi	r2,r2,65535
 8010200:	1083000c 	andi	r2,r2,3072
 8010204:	10830020 	cmpeqi	r2,r2,3072
 8010208:	1000221e 	bne	r2,zero,8010294 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 801020c:	e0bfff0b 	ldhu	r2,-4(fp)
 8010210:	10bfffcc 	andi	r2,r2,65535
 8010214:	1083000c 	andi	r2,r2,3072
 8010218:	10810018 	cmpnei	r2,r2,1024
 801021c:	1000031e 	bne	r2,zero,801022c <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 8010220:	0009883a 	mov	r4,zero
 8010224:	800fb200 	call	800fb20 <Check_for_DOS_FAT>
 8010228:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 801022c:	e0bfff0b 	ldhu	r2,-4(fp)
 8010230:	10bfffcc 	andi	r2,r2,65535
 8010234:	1083000c 	andi	r2,r2,3072
 8010238:	1000061e 	bne	r2,zero,8010254 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 801023c:	800f4740 	call	800f474 <Check_for_Master_Boot_Record>
 8010240:	10000426 	beq	r2,zero,8010254 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 8010244:	d0a6f417 	ldw	r2,-25648(gp)
 8010248:	1009883a 	mov	r4,r2
 801024c:	800fb200 	call	800fb20 <Check_for_DOS_FAT>
 8010250:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
 8010254:	e0bffe17 	ldw	r2,-8(fp)
 8010258:	10800058 	cmpnei	r2,r2,1
 801025c:	10000d1e 	bne	r2,zero,8010294 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 8010260:	008200b4 	movhi	r2,2050
 8010264:	10a5d704 	addi	r2,r2,-26788
 8010268:	10801083 	ldbu	r2,66(r2)
 801026c:	10803fcc 	andi	r2,r2,255
 8010270:	10800420 	cmpeqi	r2,r2,16
 8010274:	1000021e 	bne	r2,zero,8010280 <Look_for_FAT16+0xc0>
				{
					result = false;
 8010278:	e03ffe15 	stw	zero,-8(fp)
 801027c:	00000506 	br	8010294 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 8010280:	008200b4 	movhi	r2,2050
 8010284:	10a5d704 	addi	r2,r2,-26788
 8010288:	1080058b 	ldhu	r2,22(r2)
 801028c:	10bfffcc 	andi	r2,r2,65535
 8010290:	d0a6f515 	stw	r2,-25644(gp)
				}
			}
		}
	}
	return result;
 8010294:	e0bffe17 	ldw	r2,-8(fp)
}
 8010298:	e037883a 	mov	sp,fp
 801029c:	dfc00117 	ldw	ra,4(sp)
 80102a0:	df000017 	ldw	fp,0(sp)
 80102a4:	dec00204 	addi	sp,sp,8
 80102a8:	f800283a 	ret

080102ac <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 80102ac:	defffb04 	addi	sp,sp,-20
 80102b0:	dfc00415 	stw	ra,16(sp)
 80102b4:	df000315 	stw	fp,12(sp)
 80102b8:	df000304 	addi	fp,sp,12
 80102bc:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 80102c0:	e13fff17 	ldw	r4,-4(fp)
 80102c4:	80034580 	call	8003458 <strlen>
 80102c8:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
 80102cc:	e03ffd15 	stw	zero,-12(fp)
 80102d0:	00001e06 	br	801034c <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 80102d4:	e0bffd17 	ldw	r2,-12(fp)
 80102d8:	e0ffff17 	ldw	r3,-4(fp)
 80102dc:	1885883a 	add	r2,r3,r2
 80102e0:	10800003 	ldbu	r2,0(r2)
 80102e4:	10803fcc 	andi	r2,r2,255
 80102e8:	1080201c 	xori	r2,r2,128
 80102ec:	10bfe004 	addi	r2,r2,-128
 80102f0:	10801850 	cmplti	r2,r2,97
 80102f4:	1000121e 	bne	r2,zero,8010340 <filename_to_upper_case+0x94>
 80102f8:	e0bffd17 	ldw	r2,-12(fp)
 80102fc:	e0ffff17 	ldw	r3,-4(fp)
 8010300:	1885883a 	add	r2,r3,r2
 8010304:	10800003 	ldbu	r2,0(r2)
 8010308:	10803fcc 	andi	r2,r2,255
 801030c:	1080201c 	xori	r2,r2,128
 8010310:	10bfe004 	addi	r2,r2,-128
 8010314:	10801ec8 	cmpgei	r2,r2,123
 8010318:	1000091e 	bne	r2,zero,8010340 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 801031c:	e0bffd17 	ldw	r2,-12(fp)
 8010320:	e0ffff17 	ldw	r3,-4(fp)
 8010324:	1885883a 	add	r2,r3,r2
 8010328:	e0fffd17 	ldw	r3,-12(fp)
 801032c:	e13fff17 	ldw	r4,-4(fp)
 8010330:	20c7883a 	add	r3,r4,r3
 8010334:	18c00003 	ldbu	r3,0(r3)
 8010338:	18fff804 	addi	r3,r3,-32
 801033c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 8010340:	e0bffd17 	ldw	r2,-12(fp)
 8010344:	10800044 	addi	r2,r2,1
 8010348:	e0bffd15 	stw	r2,-12(fp)
 801034c:	e0fffd17 	ldw	r3,-12(fp)
 8010350:	e0bffe17 	ldw	r2,-8(fp)
 8010354:	18bfdf16 	blt	r3,r2,80102d4 <__alt_data_end+0xf80102d4>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 8010358:	0001883a 	nop
 801035c:	e037883a 	mov	sp,fp
 8010360:	dfc00117 	ldw	ra,4(sp)
 8010364:	df000017 	ldw	fp,0(sp)
 8010368:	dec00204 	addi	sp,sp,8
 801036c:	f800283a 	ret

08010370 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 8010370:	defff804 	addi	sp,sp,-32
 8010374:	dfc00715 	stw	ra,28(sp)
 8010378:	df000615 	stw	fp,24(sp)
 801037c:	df000604 	addi	fp,sp,24
 8010380:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 8010384:	e13fff17 	ldw	r4,-4(fp)
 8010388:	80034580 	call	8003458 <strlen>
 801038c:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 8010390:	00bfffc4 	movi	r2,-1
 8010394:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
 8010398:	00bfffc4 	movi	r2,-1
 801039c:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
 80103a0:	00800044 	movi	r2,1
 80103a4:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 80103a8:	e03ffa15 	stw	zero,-24(fp)
 80103ac:	00006d06 	br	8010564 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
 80103b0:	e0bffa17 	ldw	r2,-24(fp)
 80103b4:	e0ffff17 	ldw	r3,-4(fp)
 80103b8:	1885883a 	add	r2,r3,r2
 80103bc:	10800003 	ldbu	r2,0(r2)
 80103c0:	10803fcc 	andi	r2,r2,255
 80103c4:	1080201c 	xori	r2,r2,128
 80103c8:	10bfe004 	addi	r2,r2,-128
 80103cc:	10800820 	cmpeqi	r2,r2,32
 80103d0:	10003e1e 	bne	r2,zero,80104cc <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 80103d4:	e0bffa17 	ldw	r2,-24(fp)
 80103d8:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
 80103dc:	e0bffb17 	ldw	r2,-20(fp)
 80103e0:	1880121e 	bne	r3,r2,801042c <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 80103e4:	e0bffa17 	ldw	r2,-24(fp)
 80103e8:	e0ffff17 	ldw	r3,-4(fp)
 80103ec:	1885883a 	add	r2,r3,r2
 80103f0:	10800003 	ldbu	r2,0(r2)
 80103f4:	10803fcc 	andi	r2,r2,255
 80103f8:	1080201c 	xori	r2,r2,128
 80103fc:	10bfe004 	addi	r2,r2,-128
 8010400:	10801720 	cmpeqi	r2,r2,92
 8010404:	1000311e 	bne	r2,zero,80104cc <check_file_name_for_FAT16_compliance+0x15c>
 8010408:	e0bffa17 	ldw	r2,-24(fp)
 801040c:	e0ffff17 	ldw	r3,-4(fp)
 8010410:	1885883a 	add	r2,r3,r2
 8010414:	10800003 	ldbu	r2,0(r2)
 8010418:	10803fcc 	andi	r2,r2,255
 801041c:	1080201c 	xori	r2,r2,128
 8010420:	10bfe004 	addi	r2,r2,-128
 8010424:	10800be0 	cmpeqi	r2,r2,47
 8010428:	1000281e 	bne	r2,zero,80104cc <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 801042c:	e0fffa17 	ldw	r3,-24(fp)
 8010430:	e0bffc17 	ldw	r2,-16(fp)
 8010434:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 8010438:	10800258 	cmpnei	r2,r2,9
 801043c:	1000091e 	bne	r2,zero,8010464 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 8010440:	e0bffa17 	ldw	r2,-24(fp)
 8010444:	e0ffff17 	ldw	r3,-4(fp)
 8010448:	1885883a 	add	r2,r3,r2
 801044c:	10800003 	ldbu	r2,0(r2)
 8010450:	10803fcc 	andi	r2,r2,255
 8010454:	1080201c 	xori	r2,r2,128
 8010458:	10bfe004 	addi	r2,r2,-128
 801045c:	10800b98 	cmpnei	r2,r2,46
 8010460:	10001a1e 	bne	r2,zero,80104cc <check_file_name_for_FAT16_compliance+0x15c>
 8010464:	e0fffb17 	ldw	r3,-20(fp)
 8010468:	e0bffc17 	ldw	r2,-16(fp)
 801046c:	18801926 	beq	r3,r2,80104d4 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 8010470:	e0fffa17 	ldw	r3,-24(fp)
 8010474:	e0bffc17 	ldw	r2,-16(fp)
 8010478:	1885c83a 	sub	r2,r3,r2
 801047c:	10800110 	cmplti	r2,r2,4
 8010480:	1000141e 	bne	r2,zero,80104d4 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 8010484:	e0bffa17 	ldw	r2,-24(fp)
 8010488:	e0ffff17 	ldw	r3,-4(fp)
 801048c:	1885883a 	add	r2,r3,r2
 8010490:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 8010494:	10803fcc 	andi	r2,r2,255
 8010498:	1080201c 	xori	r2,r2,128
 801049c:	10bfe004 	addi	r2,r2,-128
 80104a0:	10801720 	cmpeqi	r2,r2,92
 80104a4:	10000b1e 	bne	r2,zero,80104d4 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 80104a8:	e0bffa17 	ldw	r2,-24(fp)
 80104ac:	e0ffff17 	ldw	r3,-4(fp)
 80104b0:	1885883a 	add	r2,r3,r2
 80104b4:	10800003 	ldbu	r2,0(r2)
 80104b8:	10803fcc 	andi	r2,r2,255
 80104bc:	1080201c 	xori	r2,r2,128
 80104c0:	10bfe004 	addi	r2,r2,-128
 80104c4:	10800be0 	cmpeqi	r2,r2,47
 80104c8:	1000021e 	bne	r2,zero,80104d4 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
 80104cc:	e03ffd15 	stw	zero,-12(fp)
            break;
 80104d0:	00002706 	br	8010570 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 80104d4:	e0bffa17 	ldw	r2,-24(fp)
 80104d8:	e0ffff17 	ldw	r3,-4(fp)
 80104dc:	1885883a 	add	r2,r3,r2
 80104e0:	10800003 	ldbu	r2,0(r2)
 80104e4:	10803fcc 	andi	r2,r2,255
 80104e8:	1080201c 	xori	r2,r2,128
 80104ec:	10bfe004 	addi	r2,r2,-128
 80104f0:	10801720 	cmpeqi	r2,r2,92
 80104f4:	1000091e 	bne	r2,zero,801051c <check_file_name_for_FAT16_compliance+0x1ac>
 80104f8:	e0bffa17 	ldw	r2,-24(fp)
 80104fc:	e0ffff17 	ldw	r3,-4(fp)
 8010500:	1885883a 	add	r2,r3,r2
 8010504:	10800003 	ldbu	r2,0(r2)
 8010508:	10803fcc 	andi	r2,r2,255
 801050c:	1080201c 	xori	r2,r2,128
 8010510:	10bfe004 	addi	r2,r2,-128
 8010514:	10800bd8 	cmpnei	r2,r2,47
 8010518:	1000041e 	bne	r2,zero,801052c <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
 801051c:	e0bffa17 	ldw	r2,-24(fp)
 8010520:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
 8010524:	e0bffa17 	ldw	r2,-24(fp)
 8010528:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
 801052c:	e0bffa17 	ldw	r2,-24(fp)
 8010530:	e0ffff17 	ldw	r3,-4(fp)
 8010534:	1885883a 	add	r2,r3,r2
 8010538:	10800003 	ldbu	r2,0(r2)
 801053c:	10803fcc 	andi	r2,r2,255
 8010540:	1080201c 	xori	r2,r2,128
 8010544:	10bfe004 	addi	r2,r2,-128
 8010548:	10800b98 	cmpnei	r2,r2,46
 801054c:	1000021e 	bne	r2,zero,8010558 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
 8010550:	e0bffa17 	ldw	r2,-24(fp)
 8010554:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 8010558:	e0bffa17 	ldw	r2,-24(fp)
 801055c:	10800044 	addi	r2,r2,1
 8010560:	e0bffa15 	stw	r2,-24(fp)
 8010564:	e0fffa17 	ldw	r3,-24(fp)
 8010568:	e0bffe17 	ldw	r2,-8(fp)
 801056c:	18bf9016 	blt	r3,r2,80103b0 <__alt_data_end+0xf80103b0>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 8010570:	e0bffe17 	ldw	r2,-8(fp)
 8010574:	10bfffc4 	addi	r2,r2,-1
 8010578:	e0ffff17 	ldw	r3,-4(fp)
 801057c:	1885883a 	add	r2,r3,r2
 8010580:	10800003 	ldbu	r2,0(r2)
 8010584:	10803fcc 	andi	r2,r2,255
 8010588:	1080201c 	xori	r2,r2,128
 801058c:	10bfe004 	addi	r2,r2,-128
 8010590:	10801720 	cmpeqi	r2,r2,92
 8010594:	10000a1e 	bne	r2,zero,80105c0 <check_file_name_for_FAT16_compliance+0x250>
 8010598:	e0bffe17 	ldw	r2,-8(fp)
 801059c:	10bfffc4 	addi	r2,r2,-1
 80105a0:	e0ffff17 	ldw	r3,-4(fp)
 80105a4:	1885883a 	add	r2,r3,r2
 80105a8:	10800003 	ldbu	r2,0(r2)
 80105ac:	10803fcc 	andi	r2,r2,255
 80105b0:	1080201c 	xori	r2,r2,128
 80105b4:	10bfe004 	addi	r2,r2,-128
 80105b8:	10800bd8 	cmpnei	r2,r2,47
 80105bc:	1000011e 	bne	r2,zero,80105c4 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
 80105c0:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
 80105c4:	e0bffd17 	ldw	r2,-12(fp)
}
 80105c8:	e037883a 	mov	sp,fp
 80105cc:	dfc00117 	ldw	ra,4(sp)
 80105d0:	df000017 	ldw	fp,0(sp)
 80105d4:	dec00204 	addi	sp,sp,8
 80105d8:	f800283a 	ret

080105dc <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 80105dc:	defffb04 	addi	sp,sp,-20
 80105e0:	dfc00415 	stw	ra,16(sp)
 80105e4:	df000315 	stw	fp,12(sp)
 80105e8:	df000304 	addi	fp,sp,12
 80105ec:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 80105f0:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
 80105f4:	e13fff17 	ldw	r4,-4(fp)
 80105f8:	80034580 	call	8003458 <strlen>
 80105fc:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
 8010600:	e03ffd15 	stw	zero,-12(fp)
 8010604:	00001506 	br	801065c <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 8010608:	e0bffd17 	ldw	r2,-12(fp)
 801060c:	e0ffff17 	ldw	r3,-4(fp)
 8010610:	1885883a 	add	r2,r3,r2
 8010614:	10800003 	ldbu	r2,0(r2)
 8010618:	10803fcc 	andi	r2,r2,255
 801061c:	1080201c 	xori	r2,r2,128
 8010620:	10bfe004 	addi	r2,r2,-128
 8010624:	10801720 	cmpeqi	r2,r2,92
 8010628:	10000f1e 	bne	r2,zero,8010668 <get_dir_divider_location+0x8c>
 801062c:	e0bffd17 	ldw	r2,-12(fp)
 8010630:	e0ffff17 	ldw	r3,-4(fp)
 8010634:	1885883a 	add	r2,r3,r2
 8010638:	10800003 	ldbu	r2,0(r2)
 801063c:	10803fcc 	andi	r2,r2,255
 8010640:	1080201c 	xori	r2,r2,128
 8010644:	10bfe004 	addi	r2,r2,-128
 8010648:	10800be0 	cmpeqi	r2,r2,47
 801064c:	1000061e 	bne	r2,zero,8010668 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 8010650:	e0bffd17 	ldw	r2,-12(fp)
 8010654:	10800044 	addi	r2,r2,1
 8010658:	e0bffd15 	stw	r2,-12(fp)
 801065c:	e0fffd17 	ldw	r3,-12(fp)
 8010660:	e0bffe17 	ldw	r2,-8(fp)
 8010664:	18bfe816 	blt	r3,r2,8010608 <__alt_data_end+0xf8010608>
        {
            break;
        }
    }
    
    if (index == length)
 8010668:	e0fffd17 	ldw	r3,-12(fp)
 801066c:	e0bffe17 	ldw	r2,-8(fp)
 8010670:	1880021e 	bne	r3,r2,801067c <get_dir_divider_location+0xa0>
    {
        index = -1;
 8010674:	00bfffc4 	movi	r2,-1
 8010678:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
 801067c:	e0bffd17 	ldw	r2,-12(fp)
}
 8010680:	e037883a 	mov	sp,fp
 8010684:	dfc00117 	ldw	ra,4(sp)
 8010688:	df000017 	ldw	fp,0(sp)
 801068c:	dec00204 	addi	sp,sp,8
 8010690:	f800283a 	ret

08010694 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 8010694:	defffa04 	addi	sp,sp,-24
 8010698:	df000515 	stw	fp,20(sp)
 801069c:	df000504 	addi	fp,sp,20
 80106a0:	e13ffd15 	stw	r4,-12(fp)
 80106a4:	e17ffe15 	stw	r5,-8(fp)
 80106a8:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
 80106ac:	00800044 	movi	r2,1
 80106b0:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
 80106b4:	e03ffc15 	stw	zero,-16(fp)
 80106b8:	00004606 	br	80107d4 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 80106bc:	e0fffd17 	ldw	r3,-12(fp)
 80106c0:	e0bffc17 	ldw	r2,-16(fp)
 80106c4:	1885883a 	add	r2,r3,r2
 80106c8:	10800003 	ldbu	r2,0(r2)
 80106cc:	10803fcc 	andi	r2,r2,255
 80106d0:	10801870 	cmpltui	r2,r2,97
 80106d4:	1000101e 	bne	r2,zero,8010718 <match_file_record_to_name_ext+0x84>
 80106d8:	e0fffd17 	ldw	r3,-12(fp)
 80106dc:	e0bffc17 	ldw	r2,-16(fp)
 80106e0:	1885883a 	add	r2,r3,r2
 80106e4:	10800003 	ldbu	r2,0(r2)
 80106e8:	10803fcc 	andi	r2,r2,255
 80106ec:	10801ee8 	cmpgeui	r2,r2,123
 80106f0:	1000091e 	bne	r2,zero,8010718 <match_file_record_to_name_ext+0x84>
 80106f4:	e0fffd17 	ldw	r3,-12(fp)
 80106f8:	e0bffc17 	ldw	r2,-16(fp)
 80106fc:	1885883a 	add	r2,r3,r2
 8010700:	10800003 	ldbu	r2,0(r2)
 8010704:	10bff804 	addi	r2,r2,-32
 8010708:	10c03fcc 	andi	r3,r2,255
 801070c:	18c0201c 	xori	r3,r3,128
 8010710:	18ffe004 	addi	r3,r3,-128
 8010714:	00000706 	br	8010734 <match_file_record_to_name_ext+0xa0>
 8010718:	e0fffd17 	ldw	r3,-12(fp)
 801071c:	e0bffc17 	ldw	r2,-16(fp)
 8010720:	1885883a 	add	r2,r3,r2
 8010724:	10800003 	ldbu	r2,0(r2)
 8010728:	10c03fcc 	andi	r3,r2,255
 801072c:	18c0201c 	xori	r3,r3,128
 8010730:	18ffe004 	addi	r3,r3,-128
 8010734:	e0bffc17 	ldw	r2,-16(fp)
 8010738:	e13ffe17 	ldw	r4,-8(fp)
 801073c:	2085883a 	add	r2,r4,r2
 8010740:	10800003 	ldbu	r2,0(r2)
 8010744:	10803fcc 	andi	r2,r2,255
 8010748:	1080201c 	xori	r2,r2,128
 801074c:	10bfe004 	addi	r2,r2,-128
 8010750:	10801850 	cmplti	r2,r2,97
 8010754:	1000121e 	bne	r2,zero,80107a0 <match_file_record_to_name_ext+0x10c>
 8010758:	e0bffc17 	ldw	r2,-16(fp)
 801075c:	e13ffe17 	ldw	r4,-8(fp)
 8010760:	2085883a 	add	r2,r4,r2
 8010764:	10800003 	ldbu	r2,0(r2)
 8010768:	10803fcc 	andi	r2,r2,255
 801076c:	1080201c 	xori	r2,r2,128
 8010770:	10bfe004 	addi	r2,r2,-128
 8010774:	10801ec8 	cmpgei	r2,r2,123
 8010778:	1000091e 	bne	r2,zero,80107a0 <match_file_record_to_name_ext+0x10c>
 801077c:	e0bffc17 	ldw	r2,-16(fp)
 8010780:	e13ffe17 	ldw	r4,-8(fp)
 8010784:	2085883a 	add	r2,r4,r2
 8010788:	10800003 	ldbu	r2,0(r2)
 801078c:	10bff804 	addi	r2,r2,-32
 8010790:	10803fcc 	andi	r2,r2,255
 8010794:	1080201c 	xori	r2,r2,128
 8010798:	10bfe004 	addi	r2,r2,-128
 801079c:	00000706 	br	80107bc <match_file_record_to_name_ext+0x128>
 80107a0:	e0bffc17 	ldw	r2,-16(fp)
 80107a4:	e13ffe17 	ldw	r4,-8(fp)
 80107a8:	2085883a 	add	r2,r4,r2
 80107ac:	10800003 	ldbu	r2,0(r2)
 80107b0:	10803fcc 	andi	r2,r2,255
 80107b4:	1080201c 	xori	r2,r2,128
 80107b8:	10bfe004 	addi	r2,r2,-128
 80107bc:	18800226 	beq	r3,r2,80107c8 <match_file_record_to_name_ext+0x134>
        {
            match = false;
 80107c0:	e03ffb15 	stw	zero,-20(fp)
			break;
 80107c4:	00000606 	br	80107e0 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 80107c8:	e0bffc17 	ldw	r2,-16(fp)
 80107cc:	10800044 	addi	r2,r2,1
 80107d0:	e0bffc15 	stw	r2,-16(fp)
 80107d4:	e0bffc17 	ldw	r2,-16(fp)
 80107d8:	10800210 	cmplti	r2,r2,8
 80107dc:	103fb71e 	bne	r2,zero,80106bc <__alt_data_end+0xf80106bc>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 80107e0:	e03ffc15 	stw	zero,-16(fp)
 80107e4:	00004a06 	br	8010910 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 80107e8:	e0fffd17 	ldw	r3,-12(fp)
 80107ec:	e0bffc17 	ldw	r2,-16(fp)
 80107f0:	1885883a 	add	r2,r3,r2
 80107f4:	10800204 	addi	r2,r2,8
 80107f8:	10800003 	ldbu	r2,0(r2)
 80107fc:	10803fcc 	andi	r2,r2,255
 8010800:	10801870 	cmpltui	r2,r2,97
 8010804:	1000121e 	bne	r2,zero,8010850 <match_file_record_to_name_ext+0x1bc>
 8010808:	e0fffd17 	ldw	r3,-12(fp)
 801080c:	e0bffc17 	ldw	r2,-16(fp)
 8010810:	1885883a 	add	r2,r3,r2
 8010814:	10800204 	addi	r2,r2,8
 8010818:	10800003 	ldbu	r2,0(r2)
 801081c:	10803fcc 	andi	r2,r2,255
 8010820:	10801ee8 	cmpgeui	r2,r2,123
 8010824:	10000a1e 	bne	r2,zero,8010850 <match_file_record_to_name_ext+0x1bc>
 8010828:	e0fffd17 	ldw	r3,-12(fp)
 801082c:	e0bffc17 	ldw	r2,-16(fp)
 8010830:	1885883a 	add	r2,r3,r2
 8010834:	10800204 	addi	r2,r2,8
 8010838:	10800003 	ldbu	r2,0(r2)
 801083c:	10bff804 	addi	r2,r2,-32
 8010840:	10c03fcc 	andi	r3,r2,255
 8010844:	18c0201c 	xori	r3,r3,128
 8010848:	18ffe004 	addi	r3,r3,-128
 801084c:	00000806 	br	8010870 <match_file_record_to_name_ext+0x1dc>
 8010850:	e0fffd17 	ldw	r3,-12(fp)
 8010854:	e0bffc17 	ldw	r2,-16(fp)
 8010858:	1885883a 	add	r2,r3,r2
 801085c:	10800204 	addi	r2,r2,8
 8010860:	10800003 	ldbu	r2,0(r2)
 8010864:	10c03fcc 	andi	r3,r2,255
 8010868:	18c0201c 	xori	r3,r3,128
 801086c:	18ffe004 	addi	r3,r3,-128
 8010870:	e0bffc17 	ldw	r2,-16(fp)
 8010874:	e13fff17 	ldw	r4,-4(fp)
 8010878:	2085883a 	add	r2,r4,r2
 801087c:	10800003 	ldbu	r2,0(r2)
 8010880:	10803fcc 	andi	r2,r2,255
 8010884:	1080201c 	xori	r2,r2,128
 8010888:	10bfe004 	addi	r2,r2,-128
 801088c:	10801850 	cmplti	r2,r2,97
 8010890:	1000121e 	bne	r2,zero,80108dc <match_file_record_to_name_ext+0x248>
 8010894:	e0bffc17 	ldw	r2,-16(fp)
 8010898:	e13fff17 	ldw	r4,-4(fp)
 801089c:	2085883a 	add	r2,r4,r2
 80108a0:	10800003 	ldbu	r2,0(r2)
 80108a4:	10803fcc 	andi	r2,r2,255
 80108a8:	1080201c 	xori	r2,r2,128
 80108ac:	10bfe004 	addi	r2,r2,-128
 80108b0:	10801ec8 	cmpgei	r2,r2,123
 80108b4:	1000091e 	bne	r2,zero,80108dc <match_file_record_to_name_ext+0x248>
 80108b8:	e0bffc17 	ldw	r2,-16(fp)
 80108bc:	e13fff17 	ldw	r4,-4(fp)
 80108c0:	2085883a 	add	r2,r4,r2
 80108c4:	10800003 	ldbu	r2,0(r2)
 80108c8:	10bff804 	addi	r2,r2,-32
 80108cc:	10803fcc 	andi	r2,r2,255
 80108d0:	1080201c 	xori	r2,r2,128
 80108d4:	10bfe004 	addi	r2,r2,-128
 80108d8:	00000706 	br	80108f8 <match_file_record_to_name_ext+0x264>
 80108dc:	e0bffc17 	ldw	r2,-16(fp)
 80108e0:	e13fff17 	ldw	r4,-4(fp)
 80108e4:	2085883a 	add	r2,r4,r2
 80108e8:	10800003 	ldbu	r2,0(r2)
 80108ec:	10803fcc 	andi	r2,r2,255
 80108f0:	1080201c 	xori	r2,r2,128
 80108f4:	10bfe004 	addi	r2,r2,-128
 80108f8:	18800226 	beq	r3,r2,8010904 <match_file_record_to_name_ext+0x270>
        {
            match = false;
 80108fc:	e03ffb15 	stw	zero,-20(fp)
			break;
 8010900:	00000606 	br	801091c <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 8010904:	e0bffc17 	ldw	r2,-16(fp)
 8010908:	10800044 	addi	r2,r2,1
 801090c:	e0bffc15 	stw	r2,-16(fp)
 8010910:	e0bffc17 	ldw	r2,-16(fp)
 8010914:	108000d0 	cmplti	r2,r2,3
 8010918:	103fb31e 	bne	r2,zero,80107e8 <__alt_data_end+0xf80107e8>
        {
            match = false;
			break;
        }
    }
	return match;
 801091c:	e0bffb17 	ldw	r2,-20(fp)
}
 8010920:	e037883a 	mov	sp,fp
 8010924:	df000017 	ldw	fp,0(sp)
 8010928:	dec00104 	addi	sp,sp,4
 801092c:	f800283a 	ret

08010930 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 8010930:	deffe704 	addi	sp,sp,-100
 8010934:	dfc01815 	stw	ra,96(sp)
 8010938:	df001715 	stw	fp,92(sp)
 801093c:	df001704 	addi	fp,sp,92
 8010940:	e13ffd15 	stw	r4,-12(fp)
 8010944:	e17ffe15 	stw	r5,-8(fp)
 8010948:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
 801094c:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
 8010950:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
 8010954:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 8010958:	e13ffd17 	ldw	r4,-12(fp)
 801095c:	80105dc0 	call	80105dc <get_dir_divider_location>
 8010960:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
 8010964:	00013106 	br	8010e2c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 8010968:	00800804 	movi	r2,32
 801096c:	e0bff905 	stb	r2,-28(fp)
 8010970:	00800804 	movi	r2,32
 8010974:	e0bff945 	stb	r2,-27(fp)
 8010978:	00800804 	movi	r2,32
 801097c:	e0bff985 	stb	r2,-26(fp)
 8010980:	00800804 	movi	r2,32
 8010984:	e0bff9c5 	stb	r2,-25(fp)
 8010988:	00800804 	movi	r2,32
 801098c:	e0bffa05 	stb	r2,-24(fp)
 8010990:	00800804 	movi	r2,32
 8010994:	e0bffa45 	stb	r2,-23(fp)
 8010998:	00800804 	movi	r2,32
 801099c:	e0bffa85 	stb	r2,-22(fp)
 80109a0:	00800804 	movi	r2,32
 80109a4:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
 80109a8:	00800804 	movi	r2,32
 80109ac:	e0bffb05 	stb	r2,-20(fp)
 80109b0:	00800804 	movi	r2,32
 80109b4:	e0bffb45 	stb	r2,-19(fp)
 80109b8:	00800804 	movi	r2,32
 80109bc:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
 80109c0:	00bfffc4 	movi	r2,-1
 80109c4:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
 80109c8:	e0bfea17 	ldw	r2,-88(fp)
 80109cc:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 80109d0:	e03fec15 	stw	zero,-80(fp)
 80109d4:	00002d06 	br	8010a8c <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
 80109d8:	e0ffec17 	ldw	r3,-80(fp)
 80109dc:	e0bfed17 	ldw	r2,-76(fp)
 80109e0:	1885883a 	add	r2,r3,r2
 80109e4:	1007883a 	mov	r3,r2
 80109e8:	e0bffd17 	ldw	r2,-12(fp)
 80109ec:	10c5883a 	add	r2,r2,r3
 80109f0:	10800003 	ldbu	r2,0(r2)
 80109f4:	10803fcc 	andi	r2,r2,255
 80109f8:	1080201c 	xori	r2,r2,128
 80109fc:	10bfe004 	addi	r2,r2,-128
 8010a00:	10800b98 	cmpnei	r2,r2,46
 8010a04:	1000031e 	bne	r2,zero,8010a14 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 8010a08:	e0bfec17 	ldw	r2,-80(fp)
 8010a0c:	e0bfee15 	stw	r2,-72(fp)
 8010a10:	00001b06 	br	8010a80 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
 8010a14:	e0bfee17 	ldw	r2,-72(fp)
 8010a18:	10000c0e 	bge	r2,zero,8010a4c <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
 8010a1c:	e0ffec17 	ldw	r3,-80(fp)
 8010a20:	e0bfed17 	ldw	r2,-76(fp)
 8010a24:	1885883a 	add	r2,r3,r2
 8010a28:	1007883a 	mov	r3,r2
 8010a2c:	e0bffd17 	ldw	r2,-12(fp)
 8010a30:	10c5883a 	add	r2,r2,r3
 8010a34:	10c00003 	ldbu	r3,0(r2)
 8010a38:	e13ff904 	addi	r4,fp,-28
 8010a3c:	e0bfec17 	ldw	r2,-80(fp)
 8010a40:	2085883a 	add	r2,r4,r2
 8010a44:	10c00005 	stb	r3,0(r2)
 8010a48:	00000d06 	br	8010a80 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 8010a4c:	e0ffec17 	ldw	r3,-80(fp)
 8010a50:	e0bfee17 	ldw	r2,-72(fp)
 8010a54:	1885c83a 	sub	r2,r3,r2
 8010a58:	e13fec17 	ldw	r4,-80(fp)
 8010a5c:	e0ffed17 	ldw	r3,-76(fp)
 8010a60:	20c7883a 	add	r3,r4,r3
 8010a64:	1809883a 	mov	r4,r3
 8010a68:	e0fffd17 	ldw	r3,-12(fp)
 8010a6c:	1907883a 	add	r3,r3,r4
 8010a70:	18c00003 	ldbu	r3,0(r3)
 8010a74:	e13ffb04 	addi	r4,fp,-20
 8010a78:	2085883a 	add	r2,r4,r2
 8010a7c:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 8010a80:	e0bfec17 	ldw	r2,-80(fp)
 8010a84:	10800044 	addi	r2,r2,1
 8010a88:	e0bfec15 	stw	r2,-80(fp)
 8010a8c:	e0ffec17 	ldw	r3,-80(fp)
 8010a90:	e0bfeb17 	ldw	r2,-84(fp)
 8010a94:	18bfd016 	blt	r3,r2,80109d8 <__alt_data_end+0xf80109d8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 8010a98:	e0bfea17 	ldw	r2,-88(fp)
 8010a9c:	10005e1e 	bne	r2,zero,8010c18 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8010aa0:	008200b4 	movhi	r2,2050
 8010aa4:	10a5d704 	addi	r2,r2,-26788
 8010aa8:	1080050b 	ldhu	r2,20(r2)
 8010aac:	10bfffcc 	andi	r2,r2,65535
 8010ab0:	1006917a 	slli	r3,r2,5
 8010ab4:	008200b4 	movhi	r2,2050
 8010ab8:	10a5d704 	addi	r2,r2,-26788
 8010abc:	1080030b 	ldhu	r2,12(r2)
 8010ac0:	10bfffcc 	andi	r2,r2,65535
 8010ac4:	100b883a 	mov	r5,r2
 8010ac8:	1809883a 	mov	r4,r3
 8010acc:	800bc600 	call	800bc60 <__divsi3>
 8010ad0:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8010ad4:	e03ff015 	stw	zero,-64(fp)
 8010ad8:	00003b06 	br	8010bc8 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 8010adc:	008200b4 	movhi	r2,2050
 8010ae0:	10a5d704 	addi	r2,r2,-26788
 8010ae4:	10c01317 	ldw	r3,76(r2)
 8010ae8:	e0bff017 	ldw	r2,-64(fp)
 8010aec:	1885883a 	add	r2,r3,r2
 8010af0:	1007883a 	mov	r3,r2
 8010af4:	d0a6f417 	ldw	r2,-25648(gp)
 8010af8:	100b883a 	mov	r5,r2
 8010afc:	1809883a 	mov	r4,r3
 8010b00:	800f2080 	call	800f208 <Read_Sector_Data>
 8010b04:	10003426 	beq	r2,zero,8010bd8 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8010b08:	e03ff115 	stw	zero,-60(fp)
 8010b0c:	00002506 	br	8010ba4 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 8010b10:	e0bff117 	ldw	r2,-60(fp)
 8010b14:	1004917a 	slli	r2,r2,5
 8010b18:	e0fff017 	ldw	r3,-64(fp)
 8010b1c:	180f883a 	mov	r7,r3
 8010b20:	000d883a 	mov	r6,zero
 8010b24:	e17fff17 	ldw	r5,-4(fp)
 8010b28:	1009883a 	mov	r4,r2
 8010b2c:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8010b30:	e0bfff17 	ldw	r2,-4(fp)
 8010b34:	10800003 	ldbu	r2,0(r2)
 8010b38:	10803fcc 	andi	r2,r2,255
 8010b3c:	10803960 	cmpeqi	r2,r2,229
 8010b40:	1000151e 	bne	r2,zero,8010b98 <get_home_directory_cluster_for_file+0x268>
 8010b44:	e0bfff17 	ldw	r2,-4(fp)
 8010b48:	10800003 	ldbu	r2,0(r2)
 8010b4c:	10803fcc 	andi	r2,r2,255
 8010b50:	10001126 	beq	r2,zero,8010b98 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 8010b54:	e0fffb04 	addi	r3,fp,-20
 8010b58:	e0bff904 	addi	r2,fp,-28
 8010b5c:	180d883a 	mov	r6,r3
 8010b60:	100b883a 	mov	r5,r2
 8010b64:	e13fff17 	ldw	r4,-4(fp)
 8010b68:	80106940 	call	8010694 <match_file_record_to_name_ext>
 8010b6c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
 8010b70:	e0bff817 	ldw	r2,-32(fp)
 8010b74:	10000826 	beq	r2,zero,8010b98 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
 8010b78:	e0bfff17 	ldw	r2,-4(fp)
 8010b7c:	1080058b 	ldhu	r2,22(r2)
 8010b80:	10bfffcc 	andi	r2,r2,65535
 8010b84:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 8010b88:	e0bfff17 	ldw	r2,-4(fp)
 8010b8c:	00c00044 	movi	r3,1
 8010b90:	10c00a15 	stw	r3,40(r2)
                                break;
 8010b94:	00000606 	br	8010bb0 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8010b98:	e0bff117 	ldw	r2,-60(fp)
 8010b9c:	10800044 	addi	r2,r2,1
 8010ba0:	e0bff115 	stw	r2,-60(fp)
 8010ba4:	e0bff117 	ldw	r2,-60(fp)
 8010ba8:	10800410 	cmplti	r2,r2,16
 8010bac:	103fd81e 	bne	r2,zero,8010b10 <__alt_data_end+0xf8010b10>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 8010bb0:	e0ffef17 	ldw	r3,-68(fp)
 8010bb4:	e0bfea17 	ldw	r2,-88(fp)
 8010bb8:	1880091e 	bne	r3,r2,8010be0 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8010bbc:	e0bff017 	ldw	r2,-64(fp)
 8010bc0:	10800044 	addi	r2,r2,1
 8010bc4:	e0bff015 	stw	r2,-64(fp)
 8010bc8:	e0fff017 	ldw	r3,-64(fp)
 8010bcc:	e0bff717 	ldw	r2,-36(fp)
 8010bd0:	18bfc216 	blt	r3,r2,8010adc <__alt_data_end+0xf8010adc>
 8010bd4:	00000306 	br	8010be4 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
 8010bd8:	0001883a 	nop
 8010bdc:	00000106 	br	8010be4 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
 8010be0:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
 8010be4:	e0ffef17 	ldw	r3,-68(fp)
 8010be8:	e0bfea17 	ldw	r2,-88(fp)
 8010bec:	18800826 	beq	r3,r2,8010c10 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 8010bf0:	e0bfef17 	ldw	r2,-68(fp)
 8010bf4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 8010bf8:	e0ffed17 	ldw	r3,-76(fp)
 8010bfc:	e0bfeb17 	ldw	r2,-84(fp)
 8010c00:	1885883a 	add	r2,r3,r2
 8010c04:	10800044 	addi	r2,r2,1
 8010c08:	e0bfed15 	stw	r2,-76(fp)
 8010c0c:	00007d06 	br	8010e04 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 8010c10:	0005883a 	mov	r2,zero
 8010c14:	00009106 	br	8010e5c <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 8010c18:	e0bfea17 	ldw	r2,-88(fp)
 8010c1c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8010c20:	e0bff417 	ldw	r2,-48(fp)
 8010c24:	10ffff84 	addi	r3,r2,-2
 8010c28:	008200b4 	movhi	r2,2050
 8010c2c:	10a5d704 	addi	r2,r2,-26788
 8010c30:	10800383 	ldbu	r2,14(r2)
 8010c34:	10803fcc 	andi	r2,r2,255
 8010c38:	1885383a 	mul	r2,r3,r2
 8010c3c:	1007883a 	mov	r3,r2
 8010c40:	008200b4 	movhi	r2,2050
 8010c44:	10a5d704 	addi	r2,r2,-26788
 8010c48:	10801417 	ldw	r2,80(r2)
 8010c4c:	1885883a 	add	r2,r3,r2
 8010c50:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8010c54:	e03ff215 	stw	zero,-56(fp)
 8010c58:	00003606 	br	8010d34 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8010c5c:	e0fff217 	ldw	r3,-56(fp)
 8010c60:	e0bff517 	ldw	r2,-44(fp)
 8010c64:	1885883a 	add	r2,r3,r2
 8010c68:	d0e6f417 	ldw	r3,-25648(gp)
 8010c6c:	180b883a 	mov	r5,r3
 8010c70:	1009883a 	mov	r4,r2
 8010c74:	800f2080 	call	800f208 <Read_Sector_Data>
 8010c78:	10003526 	beq	r2,zero,8010d50 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 8010c7c:	e03ff315 	stw	zero,-52(fp)
 8010c80:	00002306 	br	8010d10 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 8010c84:	e0bff317 	ldw	r2,-52(fp)
 8010c88:	1004917a 	slli	r2,r2,5
 8010c8c:	e0fff417 	ldw	r3,-48(fp)
 8010c90:	e13ff217 	ldw	r4,-56(fp)
 8010c94:	200f883a 	mov	r7,r4
 8010c98:	180d883a 	mov	r6,r3
 8010c9c:	e17fff17 	ldw	r5,-4(fp)
 8010ca0:	1009883a 	mov	r4,r2
 8010ca4:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8010ca8:	e0bfff17 	ldw	r2,-4(fp)
 8010cac:	10800003 	ldbu	r2,0(r2)
 8010cb0:	10803fcc 	andi	r2,r2,255
 8010cb4:	10803960 	cmpeqi	r2,r2,229
 8010cb8:	1000121e 	bne	r2,zero,8010d04 <get_home_directory_cluster_for_file+0x3d4>
 8010cbc:	e0bfff17 	ldw	r2,-4(fp)
 8010cc0:	10800003 	ldbu	r2,0(r2)
 8010cc4:	10803fcc 	andi	r2,r2,255
 8010cc8:	10000e26 	beq	r2,zero,8010d04 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 8010ccc:	e0fffb04 	addi	r3,fp,-20
 8010cd0:	e0bff904 	addi	r2,fp,-28
 8010cd4:	180d883a 	mov	r6,r3
 8010cd8:	100b883a 	mov	r5,r2
 8010cdc:	e13fff17 	ldw	r4,-4(fp)
 8010ce0:	80106940 	call	8010694 <match_file_record_to_name_ext>
 8010ce4:	e0bff615 	stw	r2,-40(fp)
                                if (match)
 8010ce8:	e0bff617 	ldw	r2,-40(fp)
 8010cec:	10000526 	beq	r2,zero,8010d04 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 8010cf0:	e0bfff17 	ldw	r2,-4(fp)
 8010cf4:	1080058b 	ldhu	r2,22(r2)
 8010cf8:	10bfffcc 	andi	r2,r2,65535
 8010cfc:	e0bfef15 	stw	r2,-68(fp)
                                    break;
 8010d00:	00000606 	br	8010d1c <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 8010d04:	e0bff317 	ldw	r2,-52(fp)
 8010d08:	10800044 	addi	r2,r2,1
 8010d0c:	e0bff315 	stw	r2,-52(fp)
 8010d10:	e0bff317 	ldw	r2,-52(fp)
 8010d14:	10800410 	cmplti	r2,r2,16
 8010d18:	103fda1e 	bne	r2,zero,8010c84 <__alt_data_end+0xf8010c84>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 8010d1c:	e0ffef17 	ldw	r3,-68(fp)
 8010d20:	e0bfea17 	ldw	r2,-88(fp)
 8010d24:	18800c1e 	bne	r3,r2,8010d58 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8010d28:	e0bff217 	ldw	r2,-56(fp)
 8010d2c:	10800044 	addi	r2,r2,1
 8010d30:	e0bff215 	stw	r2,-56(fp)
 8010d34:	008200b4 	movhi	r2,2050
 8010d38:	10a5d704 	addi	r2,r2,-26788
 8010d3c:	10800383 	ldbu	r2,14(r2)
 8010d40:	10803fcc 	andi	r2,r2,255
 8010d44:	e0fff217 	ldw	r3,-56(fp)
 8010d48:	18bfc416 	blt	r3,r2,8010c5c <__alt_data_end+0xf8010c5c>
 8010d4c:	00000306 	br	8010d5c <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
 8010d50:	0001883a 	nop
 8010d54:	00000106 	br	8010d5c <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
 8010d58:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 8010d5c:	e0ffef17 	ldw	r3,-68(fp)
 8010d60:	e0bfea17 	ldw	r2,-88(fp)
 8010d64:	1880141e 	bne	r3,r2,8010db8 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 8010d68:	e0bfef17 	ldw	r2,-68(fp)
 8010d6c:	e0fffc04 	addi	r3,fp,-16
 8010d70:	180b883a 	mov	r5,r3
 8010d74:	1009883a 	mov	r4,r2
 8010d78:	800f2e00 	call	800f2e0 <get_cluster_flag>
 8010d7c:	10000c26 	beq	r2,zero,8010db0 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 8010d80:	e0bffc0b 	ldhu	r2,-16(fp)
 8010d84:	10bfffcc 	andi	r2,r2,65535
 8010d88:	10fffe0c 	andi	r3,r2,65528
 8010d8c:	00bffe14 	movui	r2,65528
 8010d90:	1880021e 	bne	r3,r2,8010d9c <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
 8010d94:	0005883a 	mov	r2,zero
 8010d98:	00003006 	br	8010e5c <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 8010d9c:	e0bffc0b 	ldhu	r2,-16(fp)
 8010da0:	10bfffcc 	andi	r2,r2,65535
 8010da4:	10bffe0c 	andi	r2,r2,65528
 8010da8:	e0bfef15 	stw	r2,-68(fp)
 8010dac:	00000206 	br	8010db8 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 8010db0:	0005883a 	mov	r2,zero
 8010db4:	00002906 	br	8010e5c <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 8010db8:	e0bff417 	ldw	r2,-48(fp)
 8010dbc:	00fffdd4 	movui	r3,65527
 8010dc0:	18800316 	blt	r3,r2,8010dd0 <get_home_directory_cluster_for_file+0x4a0>
 8010dc4:	e0ffef17 	ldw	r3,-68(fp)
 8010dc8:	e0bfea17 	ldw	r2,-88(fp)
 8010dcc:	18bf9426 	beq	r3,r2,8010c20 <__alt_data_end+0xf8010c20>
            if (new_cluster != home_dir_cluster)
 8010dd0:	e0ffef17 	ldw	r3,-68(fp)
 8010dd4:	e0bfea17 	ldw	r2,-88(fp)
 8010dd8:	18800826 	beq	r3,r2,8010dfc <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 8010ddc:	e0bfef17 	ldw	r2,-68(fp)
 8010de0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 8010de4:	e0ffed17 	ldw	r3,-76(fp)
 8010de8:	e0bfeb17 	ldw	r2,-84(fp)
 8010dec:	1885883a 	add	r2,r3,r2
 8010df0:	10800044 	addi	r2,r2,1
 8010df4:	e0bfed15 	stw	r2,-76(fp)
 8010df8:	00000206 	br	8010e04 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 8010dfc:	0005883a 	mov	r2,zero
 8010e00:	00001606 	br	8010e5c <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 8010e04:	e0bfed17 	ldw	r2,-76(fp)
 8010e08:	e0fffd17 	ldw	r3,-12(fp)
 8010e0c:	1885883a 	add	r2,r3,r2
 8010e10:	1009883a 	mov	r4,r2
 8010e14:	80105dc0 	call	80105dc <get_dir_divider_location>
 8010e18:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
 8010e1c:	e0bfeb17 	ldw	r2,-84(fp)
 8010e20:	1000020e 	bge	r2,zero,8010e2c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
 8010e24:	00800044 	movi	r2,1
 8010e28:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 8010e2c:	e0bfeb17 	ldw	r2,-84(fp)
 8010e30:	00becd16 	blt	zero,r2,8010968 <__alt_data_end+0xf8010968>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 8010e34:	e0bffe17 	ldw	r2,-8(fp)
 8010e38:	e0ffea17 	ldw	r3,-88(fp)
 8010e3c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
 8010e40:	e0bfea17 	ldw	r2,-88(fp)
 8010e44:	1000041e 	bne	r2,zero,8010e58 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 8010e48:	e0bfff17 	ldw	r2,-4(fp)
 8010e4c:	10000a15 	stw	zero,40(r2)
		result = true;
 8010e50:	00800044 	movi	r2,1
 8010e54:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
 8010e58:	e0bfe917 	ldw	r2,-92(fp)
}
 8010e5c:	e037883a 	mov	sp,fp
 8010e60:	dfc00117 	ldw	ra,4(sp)
 8010e64:	df000017 	ldw	fp,0(sp)
 8010e68:	dec00204 	addi	sp,sp,8
 8010e6c:	f800283a 	ret

08010e70 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 8010e70:	deffe804 	addi	sp,sp,-96
 8010e74:	dfc01715 	stw	ra,92(sp)
 8010e78:	df001615 	stw	fp,88(sp)
 8010e7c:	df001604 	addi	fp,sp,88
 8010e80:	e13ffd15 	stw	r4,-12(fp)
 8010e84:	e17ffe15 	stw	r5,-8(fp)
 8010e88:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
 8010e8c:	e13ffe17 	ldw	r4,-8(fp)
 8010e90:	80105dc0 	call	80105dc <get_dir_divider_location>
 8010e94:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
 8010e98:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 8010e9c:	00800804 	movi	r2,32
 8010ea0:	e0bff905 	stb	r2,-28(fp)
 8010ea4:	00800804 	movi	r2,32
 8010ea8:	e0bff945 	stb	r2,-27(fp)
 8010eac:	00800804 	movi	r2,32
 8010eb0:	e0bff985 	stb	r2,-26(fp)
 8010eb4:	00800804 	movi	r2,32
 8010eb8:	e0bff9c5 	stb	r2,-25(fp)
 8010ebc:	00800804 	movi	r2,32
 8010ec0:	e0bffa05 	stb	r2,-24(fp)
 8010ec4:	00800804 	movi	r2,32
 8010ec8:	e0bffa45 	stb	r2,-23(fp)
 8010ecc:	00800804 	movi	r2,32
 8010ed0:	e0bffa85 	stb	r2,-22(fp)
 8010ed4:	00800804 	movi	r2,32
 8010ed8:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
 8010edc:	00800804 	movi	r2,32
 8010ee0:	e0bffb05 	stb	r2,-20(fp)
 8010ee4:	00800804 	movi	r2,32
 8010ee8:	e0bffb45 	stb	r2,-19(fp)
 8010eec:	00800804 	movi	r2,32
 8010ef0:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
 8010ef4:	00bfffc4 	movi	r2,-1
 8010ef8:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
 8010efc:	e0bffd17 	ldw	r2,-12(fp)
 8010f00:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
 8010f04:	e13ffe17 	ldw	r4,-8(fp)
 8010f08:	80034580 	call	8003458 <strlen>
 8010f0c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
 8010f10:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 8010f14:	00000b06 	br	8010f44 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 8010f18:	e0ffeb17 	ldw	r3,-84(fp)
 8010f1c:	e0bfea17 	ldw	r2,-88(fp)
 8010f20:	1885883a 	add	r2,r3,r2
 8010f24:	10800044 	addi	r2,r2,1
 8010f28:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 8010f2c:	e0bfeb17 	ldw	r2,-84(fp)
 8010f30:	e0fffe17 	ldw	r3,-8(fp)
 8010f34:	1885883a 	add	r2,r3,r2
 8010f38:	1009883a 	mov	r4,r2
 8010f3c:	80105dc0 	call	80105dc <get_dir_divider_location>
 8010f40:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 8010f44:	e0bfea17 	ldw	r2,-88(fp)
 8010f48:	00bff316 	blt	zero,r2,8010f18 <__alt_data_end+0xf8010f18>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8010f4c:	e0bfeb17 	ldw	r2,-84(fp)
 8010f50:	e0bfee15 	stw	r2,-72(fp)
 8010f54:	00002706 	br	8010ff4 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
 8010f58:	e0bfee17 	ldw	r2,-72(fp)
 8010f5c:	e0fffe17 	ldw	r3,-8(fp)
 8010f60:	1885883a 	add	r2,r3,r2
 8010f64:	10800003 	ldbu	r2,0(r2)
 8010f68:	10803fcc 	andi	r2,r2,255
 8010f6c:	1080201c 	xori	r2,r2,128
 8010f70:	10bfe004 	addi	r2,r2,-128
 8010f74:	10800b98 	cmpnei	r2,r2,46
 8010f78:	1000031e 	bne	r2,zero,8010f88 <find_file_in_directory+0x118>
        {
            ext_index = index;
 8010f7c:	e0bfee17 	ldw	r2,-72(fp)
 8010f80:	e0bfec15 	stw	r2,-80(fp)
 8010f84:	00001806 	br	8010fe8 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
 8010f88:	e0bfec17 	ldw	r2,-80(fp)
 8010f8c:	10000b0e 	bge	r2,zero,8010fbc <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
 8010f90:	e0ffee17 	ldw	r3,-72(fp)
 8010f94:	e0bfeb17 	ldw	r2,-84(fp)
 8010f98:	1885c83a 	sub	r2,r3,r2
 8010f9c:	e0ffee17 	ldw	r3,-72(fp)
 8010fa0:	e13ffe17 	ldw	r4,-8(fp)
 8010fa4:	20c7883a 	add	r3,r4,r3
 8010fa8:	18c00003 	ldbu	r3,0(r3)
 8010fac:	e13ff904 	addi	r4,fp,-28
 8010fb0:	2085883a 	add	r2,r4,r2
 8010fb4:	10c00005 	stb	r3,0(r2)
 8010fb8:	00000b06 	br	8010fe8 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 8010fbc:	e0ffee17 	ldw	r3,-72(fp)
 8010fc0:	e0bfec17 	ldw	r2,-80(fp)
 8010fc4:	1885c83a 	sub	r2,r3,r2
 8010fc8:	10bfffc4 	addi	r2,r2,-1
 8010fcc:	e0ffee17 	ldw	r3,-72(fp)
 8010fd0:	e13ffe17 	ldw	r4,-8(fp)
 8010fd4:	20c7883a 	add	r3,r4,r3
 8010fd8:	18c00003 	ldbu	r3,0(r3)
 8010fdc:	e13ffb04 	addi	r4,fp,-20
 8010fe0:	2085883a 	add	r2,r4,r2
 8010fe4:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8010fe8:	e0bfee17 	ldw	r2,-72(fp)
 8010fec:	10800044 	addi	r2,r2,1
 8010ff0:	e0bfee15 	stw	r2,-72(fp)
 8010ff4:	e0ffee17 	ldw	r3,-72(fp)
 8010ff8:	e0bff417 	ldw	r2,-48(fp)
 8010ffc:	18bfd616 	blt	r3,r2,8010f58 <__alt_data_end+0xf8010f58>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 8011000:	e0bffd17 	ldw	r2,-12(fp)
 8011004:	1000481e 	bne	r2,zero,8011128 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8011008:	008200b4 	movhi	r2,2050
 801100c:	10a5d704 	addi	r2,r2,-26788
 8011010:	1080050b 	ldhu	r2,20(r2)
 8011014:	10bfffcc 	andi	r2,r2,65535
 8011018:	1006917a 	slli	r3,r2,5
 801101c:	008200b4 	movhi	r2,2050
 8011020:	10a5d704 	addi	r2,r2,-26788
 8011024:	1080030b 	ldhu	r2,12(r2)
 8011028:	10bfffcc 	andi	r2,r2,65535
 801102c:	100b883a 	mov	r5,r2
 8011030:	1809883a 	mov	r4,r3
 8011034:	800bc600 	call	800bc60 <__divsi3>
 8011038:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 801103c:	e03ff015 	stw	zero,-64(fp)
 8011040:	00003506 	br	8011118 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8011044:	008200b4 	movhi	r2,2050
 8011048:	10a5d704 	addi	r2,r2,-26788
 801104c:	10c01317 	ldw	r3,76(r2)
 8011050:	e0bff017 	ldw	r2,-64(fp)
 8011054:	1885883a 	add	r2,r3,r2
 8011058:	1007883a 	mov	r3,r2
 801105c:	d0a6f417 	ldw	r2,-25648(gp)
 8011060:	100b883a 	mov	r5,r2
 8011064:	1809883a 	mov	r4,r3
 8011068:	800f2080 	call	800f208 <Read_Sector_Data>
 801106c:	10009626 	beq	r2,zero,80112c8 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8011070:	e03ff115 	stw	zero,-60(fp)
 8011074:	00002006 	br	80110f8 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 8011078:	e0bff117 	ldw	r2,-60(fp)
 801107c:	1004917a 	slli	r2,r2,5
 8011080:	e0fff017 	ldw	r3,-64(fp)
 8011084:	180f883a 	mov	r7,r3
 8011088:	000d883a 	mov	r6,zero
 801108c:	e17fff17 	ldw	r5,-4(fp)
 8011090:	1009883a 	mov	r4,r2
 8011094:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8011098:	e0bfff17 	ldw	r2,-4(fp)
 801109c:	10800003 	ldbu	r2,0(r2)
 80110a0:	10803fcc 	andi	r2,r2,255
 80110a4:	10803960 	cmpeqi	r2,r2,229
 80110a8:	1000101e 	bne	r2,zero,80110ec <find_file_in_directory+0x27c>
 80110ac:	e0bfff17 	ldw	r2,-4(fp)
 80110b0:	10800003 	ldbu	r2,0(r2)
 80110b4:	10803fcc 	andi	r2,r2,255
 80110b8:	10000c26 	beq	r2,zero,80110ec <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 80110bc:	e0fffb04 	addi	r3,fp,-20
 80110c0:	e0bff904 	addi	r2,fp,-28
 80110c4:	180d883a 	mov	r6,r3
 80110c8:	100b883a 	mov	r5,r2
 80110cc:	e13fff17 	ldw	r4,-4(fp)
 80110d0:	80106940 	call	8010694 <match_file_record_to_name_ext>
 80110d4:	e0bff815 	stw	r2,-32(fp)

                        if (match)
 80110d8:	e0bff817 	ldw	r2,-32(fp)
 80110dc:	10000326 	beq	r2,zero,80110ec <find_file_in_directory+0x27c>
                        {
                            result = true;
 80110e0:	00800044 	movi	r2,1
 80110e4:	e0bfef15 	stw	r2,-68(fp)
                            break;
 80110e8:	00000606 	br	8011104 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 80110ec:	e0bff117 	ldw	r2,-60(fp)
 80110f0:	10800044 	addi	r2,r2,1
 80110f4:	e0bff115 	stw	r2,-60(fp)
 80110f8:	e0bff117 	ldw	r2,-60(fp)
 80110fc:	10800410 	cmplti	r2,r2,16
 8011100:	103fdd1e 	bne	r2,zero,8011078 <__alt_data_end+0xf8011078>
            }
            else
            {
                break;
            }
            if (result)
 8011104:	e0bfef17 	ldw	r2,-68(fp)
 8011108:	1000711e 	bne	r2,zero,80112d0 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 801110c:	e0bff017 	ldw	r2,-64(fp)
 8011110:	10800044 	addi	r2,r2,1
 8011114:	e0bff015 	stw	r2,-64(fp)
 8011118:	e0fff017 	ldw	r3,-64(fp)
 801111c:	e0bff717 	ldw	r2,-36(fp)
 8011120:	18bfc816 	blt	r3,r2,8011044 <__alt_data_end+0xf8011044>
 8011124:	00006b06 	br	80112d4 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8011128:	e0bfed17 	ldw	r2,-76(fp)
 801112c:	10ffff84 	addi	r3,r2,-2
 8011130:	008200b4 	movhi	r2,2050
 8011134:	10a5d704 	addi	r2,r2,-26788
 8011138:	10800383 	ldbu	r2,14(r2)
 801113c:	10803fcc 	andi	r2,r2,255
 8011140:	1885383a 	mul	r2,r3,r2
 8011144:	1007883a 	mov	r3,r2
 8011148:	008200b4 	movhi	r2,2050
 801114c:	10a5d704 	addi	r2,r2,-26788
 8011150:	10801417 	ldw	r2,80(r2)
 8011154:	1885883a 	add	r2,r3,r2
 8011158:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 801115c:	e03ff215 	stw	zero,-56(fp)
 8011160:	00003306 	br	8011230 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8011164:	e0fff217 	ldw	r3,-56(fp)
 8011168:	e0bff517 	ldw	r2,-44(fp)
 801116c:	1885883a 	add	r2,r3,r2
 8011170:	d0e6f417 	ldw	r3,-25648(gp)
 8011174:	180b883a 	mov	r5,r3
 8011178:	1009883a 	mov	r4,r2
 801117c:	800f2080 	call	800f208 <Read_Sector_Data>
 8011180:	10003226 	beq	r2,zero,801124c <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8011184:	e03ff315 	stw	zero,-52(fp)
 8011188:	00002106 	br	8011210 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 801118c:	e0bff317 	ldw	r2,-52(fp)
 8011190:	1004917a 	slli	r2,r2,5
 8011194:	e0ffed17 	ldw	r3,-76(fp)
 8011198:	e13ff217 	ldw	r4,-56(fp)
 801119c:	200f883a 	mov	r7,r4
 80111a0:	180d883a 	mov	r6,r3
 80111a4:	e17fff17 	ldw	r5,-4(fp)
 80111a8:	1009883a 	mov	r4,r2
 80111ac:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 80111b0:	e0bfff17 	ldw	r2,-4(fp)
 80111b4:	10800003 	ldbu	r2,0(r2)
 80111b8:	10803fcc 	andi	r2,r2,255
 80111bc:	10803960 	cmpeqi	r2,r2,229
 80111c0:	1000101e 	bne	r2,zero,8011204 <find_file_in_directory+0x394>
 80111c4:	e0bfff17 	ldw	r2,-4(fp)
 80111c8:	10800003 	ldbu	r2,0(r2)
 80111cc:	10803fcc 	andi	r2,r2,255
 80111d0:	10000c26 	beq	r2,zero,8011204 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 80111d4:	e0fffb04 	addi	r3,fp,-20
 80111d8:	e0bff904 	addi	r2,fp,-28
 80111dc:	180d883a 	mov	r6,r3
 80111e0:	100b883a 	mov	r5,r2
 80111e4:	e13fff17 	ldw	r4,-4(fp)
 80111e8:	80106940 	call	8010694 <match_file_record_to_name_ext>
 80111ec:	e0bff615 	stw	r2,-40(fp)

                            if (match)
 80111f0:	e0bff617 	ldw	r2,-40(fp)
 80111f4:	10000326 	beq	r2,zero,8011204 <find_file_in_directory+0x394>
                            {                               
                                result = true;
 80111f8:	00800044 	movi	r2,1
 80111fc:	e0bfef15 	stw	r2,-68(fp)
                                break;
 8011200:	00000606 	br	801121c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8011204:	e0bff317 	ldw	r2,-52(fp)
 8011208:	10800044 	addi	r2,r2,1
 801120c:	e0bff315 	stw	r2,-52(fp)
 8011210:	e0bff317 	ldw	r2,-52(fp)
 8011214:	10800410 	cmplti	r2,r2,16
 8011218:	103fdc1e 	bne	r2,zero,801118c <__alt_data_end+0xf801118c>
                }
                else
                {
                    break;
                }
                if (result)
 801121c:	e0bfef17 	ldw	r2,-68(fp)
 8011220:	10000c1e 	bne	r2,zero,8011254 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8011224:	e0bff217 	ldw	r2,-56(fp)
 8011228:	10800044 	addi	r2,r2,1
 801122c:	e0bff215 	stw	r2,-56(fp)
 8011230:	008200b4 	movhi	r2,2050
 8011234:	10a5d704 	addi	r2,r2,-26788
 8011238:	10800383 	ldbu	r2,14(r2)
 801123c:	10803fcc 	andi	r2,r2,255
 8011240:	e0fff217 	ldw	r3,-56(fp)
 8011244:	18bfc716 	blt	r3,r2,8011164 <__alt_data_end+0xf8011164>
 8011248:	00000306 	br	8011258 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
 801124c:	0001883a 	nop
 8011250:	00000106 	br	8011258 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
 8011254:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 8011258:	e0bfef17 	ldw	r2,-68(fp)
 801125c:	1000141e 	bne	r2,zero,80112b0 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 8011260:	e0bfed17 	ldw	r2,-76(fp)
 8011264:	e0fffc04 	addi	r3,fp,-16
 8011268:	180b883a 	mov	r5,r3
 801126c:	1009883a 	mov	r4,r2
 8011270:	800f2e00 	call	800f2e0 <get_cluster_flag>
 8011274:	10000c26 	beq	r2,zero,80112a8 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8011278:	e0bffc0b 	ldhu	r2,-16(fp)
 801127c:	10bfffcc 	andi	r2,r2,65535
 8011280:	10fffe0c 	andi	r3,r2,65528
 8011284:	00bffe14 	movui	r2,65528
 8011288:	1880021e 	bne	r3,r2,8011294 <find_file_in_directory+0x424>
					{
						return false;
 801128c:	0005883a 	mov	r2,zero
 8011290:	00001106 	br	80112d8 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
 8011294:	e0bffc0b 	ldhu	r2,-16(fp)
 8011298:	10bfffcc 	andi	r2,r2,65535
 801129c:	10bffe0c 	andi	r2,r2,65528
 80112a0:	e0bfed15 	stw	r2,-76(fp)
 80112a4:	00000206 	br	80112b0 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 80112a8:	0005883a 	mov	r2,zero
 80112ac:	00000a06 	br	80112d8 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 80112b0:	e0bfed17 	ldw	r2,-76(fp)
 80112b4:	00fffdd4 	movui	r3,65527
 80112b8:	18800616 	blt	r3,r2,80112d4 <find_file_in_directory+0x464>
 80112bc:	e0bfef17 	ldw	r2,-68(fp)
 80112c0:	103f9926 	beq	r2,zero,8011128 <__alt_data_end+0xf8011128>
 80112c4:	00000306 	br	80112d4 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
 80112c8:	0001883a 	nop
 80112cc:	00000106 	br	80112d4 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
 80112d0:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
 80112d4:	e0bfef17 	ldw	r2,-68(fp)
}
 80112d8:	e037883a 	mov	sp,fp
 80112dc:	dfc00117 	ldw	ra,4(sp)
 80112e0:	df000017 	ldw	fp,0(sp)
 80112e4:	dec00204 	addi	sp,sp,8
 80112e8:	f800283a 	ret

080112ec <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 80112ec:	defff504 	addi	sp,sp,-44
 80112f0:	dfc00a15 	stw	ra,40(sp)
 80112f4:	df000915 	stw	fp,36(sp)
 80112f8:	df000904 	addi	fp,sp,36
 80112fc:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 8011300:	008200b4 	movhi	r2,2050
 8011304:	10a5d704 	addi	r2,r2,-26788
 8011308:	10801117 	ldw	r2,68(r2)
 801130c:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
 8011310:	00800084 	movi	r2,2
 8011314:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
 8011318:	00bfffc4 	movi	r2,-1
 801131c:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
 8011320:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
 8011324:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 8011328:	008200b4 	movhi	r2,2050
 801132c:	10a5d704 	addi	r2,r2,-26788
 8011330:	10801417 	ldw	r2,80(r2)
 8011334:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 8011338:	008200b4 	movhi	r2,2050
 801133c:	10a5d704 	addi	r2,r2,-26788
 8011340:	1080058b 	ldhu	r2,22(r2)
 8011344:	10bfffcc 	andi	r2,r2,65535
 8011348:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 801134c:	008200b4 	movhi	r2,2050
 8011350:	10a5d704 	addi	r2,r2,-26788
 8011354:	10800917 	ldw	r2,36(r2)
 8011358:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
 801135c:	e0bffd17 	ldw	r2,-12(fp)
 8011360:	e0fffe17 	ldw	r3,-8(fp)
 8011364:	18800d2e 	bgeu	r3,r2,801139c <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 8011368:	e0fffd17 	ldw	r3,-12(fp)
 801136c:	e0bffc17 	ldw	r2,-16(fp)
 8011370:	1887c83a 	sub	r3,r3,r2
 8011374:	008200b4 	movhi	r2,2050
 8011378:	10a5d704 	addi	r2,r2,-26788
 801137c:	10800383 	ldbu	r2,14(r2)
 8011380:	10803fcc 	andi	r2,r2,255
 8011384:	100b883a 	mov	r5,r2
 8011388:	1809883a 	mov	r4,r3
 801138c:	800bd580 	call	800bd58 <__udivsi3>
 8011390:	10800044 	addi	r2,r2,1
 8011394:	e0bffb15 	stw	r2,-20(fp)
 8011398:	00002c06 	br	801144c <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 801139c:	e0fffe17 	ldw	r3,-8(fp)
 80113a0:	e0bffc17 	ldw	r2,-16(fp)
 80113a4:	1887c83a 	sub	r3,r3,r2
 80113a8:	008200b4 	movhi	r2,2050
 80113ac:	10a5d704 	addi	r2,r2,-26788
 80113b0:	10800383 	ldbu	r2,14(r2)
 80113b4:	10803fcc 	andi	r2,r2,255
 80113b8:	100b883a 	mov	r5,r2
 80113bc:	1809883a 	mov	r4,r3
 80113c0:	800bd580 	call	800bd58 <__udivsi3>
 80113c4:	10800044 	addi	r2,r2,1
 80113c8:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 80113cc:	00001f06 	br	801144c <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 80113d0:	e0bff717 	ldw	r2,-36(fp)
 80113d4:	d0e6f417 	ldw	r3,-25648(gp)
 80113d8:	180b883a 	mov	r5,r3
 80113dc:	1009883a 	mov	r4,r2
 80113e0:	800f2080 	call	800f208 <Read_Sector_Data>
 80113e4:	10001426 	beq	r2,zero,8011438 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 80113e8:	e0bff817 	ldw	r2,-32(fp)
 80113ec:	10803fcc 	andi	r2,r2,255
 80113f0:	1085883a 	add	r2,r2,r2
 80113f4:	1007883a 	mov	r3,r2
 80113f8:	d0a6f617 	ldw	r2,-25640(gp)
 80113fc:	10800a17 	ldw	r2,40(r2)
 8011400:	1885883a 	add	r2,r3,r2
 8011404:	1080002b 	ldhuio	r2,0(r2)
 8011408:	10bfffcc 	andi	r2,r2,65535
 801140c:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
 8011410:	e0bff90f 	ldh	r2,-28(fp)
 8011414:	10000726 	beq	r2,zero,8011434 <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 8011418:	e0bff817 	ldw	r2,-32(fp)
 801141c:	10800044 	addi	r2,r2,1
 8011420:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
 8011424:	e0bff817 	ldw	r2,-32(fp)
 8011428:	10803fcc 	andi	r2,r2,255
 801142c:	103fee1e 	bne	r2,zero,80113e8 <__alt_data_end+0xf80113e8>
 8011430:	00000106 	br	8011438 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
 8011434:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
 8011438:	e0bff90f 	ldh	r2,-28(fp)
 801143c:	10000926 	beq	r2,zero,8011464 <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
 8011440:	e0bff717 	ldw	r2,-36(fp)
 8011444:	10800044 	addi	r2,r2,1
 8011448:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 801144c:	008200b4 	movhi	r2,2050
 8011450:	10a5d704 	addi	r2,r2,-26788
 8011454:	10c01217 	ldw	r3,72(r2)
 8011458:	e0bff717 	ldw	r2,-36(fp)
 801145c:	18bfdc1e 	bne	r3,r2,80113d0 <__alt_data_end+0xf80113d0>
 8011460:	00000106 	br	8011468 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
 8011464:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 8011468:	e0bff90f 	ldh	r2,-28(fp)
 801146c:	1000081e 	bne	r2,zero,8011490 <find_first_empty_cluster+0x1a4>
 8011470:	e0bff90f 	ldh	r2,-28(fp)
 8011474:	e0fffb17 	ldw	r3,-20(fp)
 8011478:	18800536 	bltu	r3,r2,8011490 <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
 801147c:	e0bfff17 	ldw	r2,-4(fp)
 8011480:	e0fff817 	ldw	r3,-32(fp)
 8011484:	10c00015 	stw	r3,0(r2)
		result = true;
 8011488:	00800044 	movi	r2,1
 801148c:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
 8011490:	e0bffa17 	ldw	r2,-24(fp)
}
 8011494:	e037883a 	mov	sp,fp
 8011498:	dfc00117 	ldw	ra,4(sp)
 801149c:	df000017 	ldw	fp,0(sp)
 80114a0:	dec00204 	addi	sp,sp,8
 80114a4:	f800283a 	ret

080114a8 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 80114a8:	defff604 	addi	sp,sp,-40
 80114ac:	dfc00915 	stw	ra,36(sp)
 80114b0:	df000815 	stw	fp,32(sp)
 80114b4:	df000804 	addi	fp,sp,32
 80114b8:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
 80114bc:	00bfffc4 	movi	r2,-1
 80114c0:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
 80114c4:	e0bfff17 	ldw	r2,-4(fp)
 80114c8:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 80114cc:	e0bff917 	ldw	r2,-28(fp)
 80114d0:	10ffff84 	addi	r3,r2,-2
 80114d4:	008200b4 	movhi	r2,2050
 80114d8:	10a5d704 	addi	r2,r2,-26788
 80114dc:	10800383 	ldbu	r2,14(r2)
 80114e0:	10803fcc 	andi	r2,r2,255
 80114e4:	1885383a 	mul	r2,r3,r2
 80114e8:	1007883a 	mov	r3,r2
 80114ec:	008200b4 	movhi	r2,2050
 80114f0:	10a5d704 	addi	r2,r2,-26788
 80114f4:	10801417 	ldw	r2,80(r2)
 80114f8:	1885883a 	add	r2,r3,r2
 80114fc:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8011500:	e03ffa15 	stw	zero,-24(fp)
 8011504:	00002c06 	br	80115b8 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8011508:	e0fffa17 	ldw	r3,-24(fp)
 801150c:	e0bffc17 	ldw	r2,-16(fp)
 8011510:	1885883a 	add	r2,r3,r2
 8011514:	d0e6f417 	ldw	r3,-25648(gp)
 8011518:	180b883a 	mov	r5,r3
 801151c:	1009883a 	mov	r4,r2
 8011520:	800f2080 	call	800f208 <Read_Sector_Data>
 8011524:	10002b26 	beq	r2,zero,80115d4 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8011528:	e03ffb15 	stw	zero,-20(fp)
 801152c:	00001c06 	br	80115a0 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 8011530:	e0bffb17 	ldw	r2,-20(fp)
 8011534:	1004917a 	slli	r2,r2,5
 8011538:	1007883a 	mov	r3,r2
 801153c:	d0a6f617 	ldw	r2,-25640(gp)
 8011540:	10800a17 	ldw	r2,40(r2)
 8011544:	1885883a 	add	r2,r3,r2
 8011548:	10800023 	ldbuio	r2,0(r2)
 801154c:	10803fcc 	andi	r2,r2,255
 8011550:	10803fcc 	andi	r2,r2,255
 8011554:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 8011558:	e0bffd0b 	ldhu	r2,-12(fp)
 801155c:	10803960 	cmpeqi	r2,r2,229
 8011560:	1000021e 	bne	r2,zero,801156c <find_first_empty_record_in_a_subdirectory+0xc4>
 8011564:	e0bffd0b 	ldhu	r2,-12(fp)
 8011568:	10000a1e 	bne	r2,zero,8011594 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 801156c:	e0bffa17 	ldw	r2,-24(fp)
 8011570:	1006913a 	slli	r3,r2,4
 8011574:	e0bffb17 	ldw	r2,-20(fp)
 8011578:	1885883a 	add	r2,r3,r2
 801157c:	1006943a 	slli	r3,r2,16
 8011580:	e0bff917 	ldw	r2,-28(fp)
 8011584:	1884b03a 	or	r2,r3,r2
 8011588:	e0bff815 	stw	r2,-32(fp)
                        return result;
 801158c:	e0bff817 	ldw	r2,-32(fp)
 8011590:	00005306 	br	80116e0 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8011594:	e0bffb17 	ldw	r2,-20(fp)
 8011598:	10800044 	addi	r2,r2,1
 801159c:	e0bffb15 	stw	r2,-20(fp)
 80115a0:	e0bffb17 	ldw	r2,-20(fp)
 80115a4:	10800410 	cmplti	r2,r2,16
 80115a8:	103fe11e 	bne	r2,zero,8011530 <__alt_data_end+0xf8011530>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 80115ac:	e0bffa17 	ldw	r2,-24(fp)
 80115b0:	10800044 	addi	r2,r2,1
 80115b4:	e0bffa15 	stw	r2,-24(fp)
 80115b8:	008200b4 	movhi	r2,2050
 80115bc:	10a5d704 	addi	r2,r2,-26788
 80115c0:	10800383 	ldbu	r2,14(r2)
 80115c4:	10803fcc 	andi	r2,r2,255
 80115c8:	e0fffa17 	ldw	r3,-24(fp)
 80115cc:	18bfce16 	blt	r3,r2,8011508 <__alt_data_end+0xf8011508>
 80115d0:	00000106 	br	80115d8 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
 80115d4:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 80115d8:	e0bff817 	ldw	r2,-32(fp)
 80115dc:	1000390e 	bge	r2,zero,80116c4 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 80115e0:	e0bff917 	ldw	r2,-28(fp)
 80115e4:	e0fffd84 	addi	r3,fp,-10
 80115e8:	180b883a 	mov	r5,r3
 80115ec:	1009883a 	mov	r4,r2
 80115f0:	800f2e00 	call	800f2e0 <get_cluster_flag>
 80115f4:	10003126 	beq	r2,zero,80116bc <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 80115f8:	e0bffd8b 	ldhu	r2,-10(fp)
 80115fc:	10bfffcc 	andi	r2,r2,65535
 8011600:	10fffe0c 	andi	r3,r2,65528
 8011604:	00bffe14 	movui	r2,65528
 8011608:	18802e1e 	bne	r3,r2,80116c4 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 801160c:	e0bffe04 	addi	r2,fp,-8
 8011610:	1009883a 	mov	r4,r2
 8011614:	80112ec0 	call	80112ec <find_first_empty_cluster>
 8011618:	10002326 	beq	r2,zero,80116a8 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 801161c:	e0bff917 	ldw	r2,-28(fp)
 8011620:	e0fffe17 	ldw	r3,-8(fp)
 8011624:	18ffffcc 	andi	r3,r3,65535
 8011628:	18e0001c 	xori	r3,r3,32768
 801162c:	18e00004 	addi	r3,r3,-32768
 8011630:	01800044 	movi	r6,1
 8011634:	180b883a 	mov	r5,r3
 8011638:	1009883a 	mov	r4,r2
 801163c:	800f3940 	call	800f394 <mark_cluster>
 8011640:	10001926 	beq	r2,zero,80116a8 <find_first_empty_record_in_a_subdirectory+0x200>
 8011644:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 8011648:	01800044 	movi	r6,1
 801164c:	017fffc4 	movi	r5,-1
 8011650:	1009883a 	mov	r4,r2
 8011654:	800f3940 	call	800f394 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 8011658:	10001326 	beq	r2,zero,80116a8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 801165c:	e0bff917 	ldw	r2,-28(fp)
 8011660:	e0fffe17 	ldw	r3,-8(fp)
 8011664:	18ffffcc 	andi	r3,r3,65535
 8011668:	18e0001c 	xori	r3,r3,32768
 801166c:	18e00004 	addi	r3,r3,-32768
 8011670:	000d883a 	mov	r6,zero
 8011674:	180b883a 	mov	r5,r3
 8011678:	1009883a 	mov	r4,r2
 801167c:	800f3940 	call	800f394 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 8011680:	10000926 	beq	r2,zero,80116a8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 8011684:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
 8011688:	000d883a 	mov	r6,zero
 801168c:	017fffc4 	movi	r5,-1
 8011690:	1009883a 	mov	r4,r2
 8011694:	800f3940 	call	800f394 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 8011698:	10000326 	beq	r2,zero,80116a8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 801169c:	800f1bc0 	call	800f1bc <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 80116a0:	e0bffe17 	ldw	r2,-8(fp)
 80116a4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 80116a8:	e0bffd8b 	ldhu	r2,-10(fp)
 80116ac:	10bfffcc 	andi	r2,r2,65535
 80116b0:	10bffe0c 	andi	r2,r2,65528
 80116b4:	e0bff915 	stw	r2,-28(fp)
 80116b8:	00000206 	br	80116c4 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 80116bc:	00bfffc4 	movi	r2,-1
 80116c0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 80116c4:	e0bff917 	ldw	r2,-28(fp)
 80116c8:	00fffdd4 	movui	r3,65527
 80116cc:	18800316 	blt	r3,r2,80116dc <find_first_empty_record_in_a_subdirectory+0x234>
 80116d0:	e0bff817 	ldw	r2,-32(fp)
 80116d4:	10bfffe0 	cmpeqi	r2,r2,-1
 80116d8:	103f7c1e 	bne	r2,zero,80114cc <__alt_data_end+0xf80114cc>
    return result; 
 80116dc:	e0bff817 	ldw	r2,-32(fp)
}
 80116e0:	e037883a 	mov	sp,fp
 80116e4:	dfc00117 	ldw	ra,4(sp)
 80116e8:	df000017 	ldw	fp,0(sp)
 80116ec:	dec00204 	addi	sp,sp,8
 80116f0:	f800283a 	ret

080116f4 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 80116f4:	defff904 	addi	sp,sp,-28
 80116f8:	dfc00615 	stw	ra,24(sp)
 80116fc:	df000515 	stw	fp,20(sp)
 8011700:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8011704:	008200b4 	movhi	r2,2050
 8011708:	10a5d704 	addi	r2,r2,-26788
 801170c:	1080050b 	ldhu	r2,20(r2)
 8011710:	10bfffcc 	andi	r2,r2,65535
 8011714:	1006917a 	slli	r3,r2,5
 8011718:	008200b4 	movhi	r2,2050
 801171c:	10a5d704 	addi	r2,r2,-26788
 8011720:	1080030b 	ldhu	r2,12(r2)
 8011724:	10bfffcc 	andi	r2,r2,65535
 8011728:	100b883a 	mov	r5,r2
 801172c:	1809883a 	mov	r4,r3
 8011730:	800bc600 	call	800bc60 <__divsi3>
 8011734:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
 8011738:	00bfffc4 	movi	r2,-1
 801173c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8011740:	e03ffb15 	stw	zero,-20(fp)
 8011744:	00002d06 	br	80117fc <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8011748:	008200b4 	movhi	r2,2050
 801174c:	10a5d704 	addi	r2,r2,-26788
 8011750:	10c01317 	ldw	r3,76(r2)
 8011754:	e0bffb17 	ldw	r2,-20(fp)
 8011758:	1885883a 	add	r2,r3,r2
 801175c:	1007883a 	mov	r3,r2
 8011760:	d0a6f417 	ldw	r2,-25648(gp)
 8011764:	100b883a 	mov	r5,r2
 8011768:	1809883a 	mov	r4,r3
 801176c:	800f2080 	call	800f208 <Read_Sector_Data>
 8011770:	10002626 	beq	r2,zero,801180c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 8011774:	e03ffc15 	stw	zero,-16(fp)
 8011778:	00001a06 	br	80117e4 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 801177c:	e0bffc17 	ldw	r2,-16(fp)
 8011780:	1004917a 	slli	r2,r2,5
 8011784:	1007883a 	mov	r3,r2
 8011788:	d0a6f617 	ldw	r2,-25640(gp)
 801178c:	10800a17 	ldw	r2,40(r2)
 8011790:	1885883a 	add	r2,r3,r2
 8011794:	10800023 	ldbuio	r2,0(r2)
 8011798:	10803fcc 	andi	r2,r2,255
 801179c:	10803fcc 	andi	r2,r2,255
 80117a0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 80117a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80117a8:	10803960 	cmpeqi	r2,r2,229
 80117ac:	1000021e 	bne	r2,zero,80117b8 <find_first_empty_record_in_root_directory+0xc4>
 80117b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80117b4:	1000081e 	bne	r2,zero,80117d8 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
 80117b8:	e0bffb17 	ldw	r2,-20(fp)
 80117bc:	1006913a 	slli	r3,r2,4
 80117c0:	e0bffc17 	ldw	r2,-16(fp)
 80117c4:	1885883a 	add	r2,r3,r2
 80117c8:	1004943a 	slli	r2,r2,16
 80117cc:	e0bffe15 	stw	r2,-8(fp)
                    return result;
 80117d0:	e0bffe17 	ldw	r2,-8(fp)
 80117d4:	00000f06 	br	8011814 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 80117d8:	e0bffc17 	ldw	r2,-16(fp)
 80117dc:	10800044 	addi	r2,r2,1
 80117e0:	e0bffc15 	stw	r2,-16(fp)
 80117e4:	e0bffc17 	ldw	r2,-16(fp)
 80117e8:	10800410 	cmplti	r2,r2,16
 80117ec:	103fe31e 	bne	r2,zero,801177c <__alt_data_end+0xf801177c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 80117f0:	e0bffb17 	ldw	r2,-20(fp)
 80117f4:	10800044 	addi	r2,r2,1
 80117f8:	e0bffb15 	stw	r2,-20(fp)
 80117fc:	e0fffb17 	ldw	r3,-20(fp)
 8011800:	e0bffd17 	ldw	r2,-12(fp)
 8011804:	18bfd016 	blt	r3,r2,8011748 <__alt_data_end+0xf8011748>
 8011808:	00000106 	br	8011810 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
 801180c:	0001883a 	nop
        }
    }
    return result;
 8011810:	e0bffe17 	ldw	r2,-8(fp)
}
 8011814:	e037883a 	mov	sp,fp
 8011818:	dfc00117 	ldw	ra,4(sp)
 801181c:	df000017 	ldw	fp,0(sp)
 8011820:	dec00204 	addi	sp,sp,8
 8011824:	f800283a 	ret

08011828 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 8011828:	defffa04 	addi	sp,sp,-24
 801182c:	df000515 	stw	fp,20(sp)
 8011830:	df000504 	addi	fp,sp,20
 8011834:	e13ffd15 	stw	r4,-12(fp)
 8011838:	e17ffe15 	stw	r5,-8(fp)
 801183c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 8011840:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
 8011844:	e03ffb15 	stw	zero,-20(fp)
 8011848:	00002506 	br	80118e0 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
 801184c:	e0bffc17 	ldw	r2,-16(fp)
 8011850:	e0fffd17 	ldw	r3,-12(fp)
 8011854:	1885883a 	add	r2,r3,r2
 8011858:	10800003 	ldbu	r2,0(r2)
 801185c:	10803fcc 	andi	r2,r2,255
 8011860:	1080201c 	xori	r2,r2,128
 8011864:	10bfe004 	addi	r2,r2,-128
 8011868:	10800ba0 	cmpeqi	r2,r2,46
 801186c:	1000141e 	bne	r2,zero,80118c0 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
 8011870:	e0bffb17 	ldw	r2,-20(fp)
 8011874:	e0fffe17 	ldw	r3,-8(fp)
 8011878:	1885883a 	add	r2,r3,r2
 801187c:	e0fffc17 	ldw	r3,-16(fp)
 8011880:	e13ffd17 	ldw	r4,-12(fp)
 8011884:	20c7883a 	add	r3,r4,r3
 8011888:	18c00003 	ldbu	r3,0(r3)
 801188c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
 8011890:	e0bffc17 	ldw	r2,-16(fp)
 8011894:	e0fffd17 	ldw	r3,-12(fp)
 8011898:	1885883a 	add	r2,r3,r2
 801189c:	10800003 	ldbu	r2,0(r2)
 80118a0:	10803fcc 	andi	r2,r2,255
 80118a4:	1080201c 	xori	r2,r2,128
 80118a8:	10bfe004 	addi	r2,r2,-128
 80118ac:	10000926 	beq	r2,zero,80118d4 <convert_filename_to_name_extension+0xac>
 80118b0:	e0bffc17 	ldw	r2,-16(fp)
 80118b4:	10800044 	addi	r2,r2,1
 80118b8:	e0bffc15 	stw	r2,-16(fp)
 80118bc:	00000506 	br	80118d4 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
 80118c0:	e0bffb17 	ldw	r2,-20(fp)
 80118c4:	e0fffe17 	ldw	r3,-8(fp)
 80118c8:	1885883a 	add	r2,r3,r2
 80118cc:	00c00804 	movi	r3,32
 80118d0:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 80118d4:	e0bffb17 	ldw	r2,-20(fp)
 80118d8:	10800044 	addi	r2,r2,1
 80118dc:	e0bffb15 	stw	r2,-20(fp)
 80118e0:	e0bffb17 	ldw	r2,-20(fp)
 80118e4:	10800210 	cmplti	r2,r2,8
 80118e8:	103fd81e 	bne	r2,zero,801184c <__alt_data_end+0xf801184c>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 80118ec:	e0bffc17 	ldw	r2,-16(fp)
 80118f0:	e0fffd17 	ldw	r3,-12(fp)
 80118f4:	1885883a 	add	r2,r3,r2
 80118f8:	10800003 	ldbu	r2,0(r2)
 80118fc:	10803fcc 	andi	r2,r2,255
 8011900:	1080201c 	xori	r2,r2,128
 8011904:	10bfe004 	addi	r2,r2,-128
 8011908:	10800b98 	cmpnei	r2,r2,46
 801190c:	1000031e 	bne	r2,zero,801191c <convert_filename_to_name_extension+0xf4>
 8011910:	e0bffc17 	ldw	r2,-16(fp)
 8011914:	10800044 	addi	r2,r2,1
 8011918:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
 801191c:	e03ffb15 	stw	zero,-20(fp)
 8011920:	00001c06 	br	8011994 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
 8011924:	e0bffc17 	ldw	r2,-16(fp)
 8011928:	e0fffd17 	ldw	r3,-12(fp)
 801192c:	1885883a 	add	r2,r3,r2
 8011930:	10800003 	ldbu	r2,0(r2)
 8011934:	10803fcc 	andi	r2,r2,255
 8011938:	1080201c 	xori	r2,r2,128
 801193c:	10bfe004 	addi	r2,r2,-128
 8011940:	10000c26 	beq	r2,zero,8011974 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
 8011944:	e0bffb17 	ldw	r2,-20(fp)
 8011948:	e0ffff17 	ldw	r3,-4(fp)
 801194c:	1885883a 	add	r2,r3,r2
 8011950:	e0fffc17 	ldw	r3,-16(fp)
 8011954:	e13ffd17 	ldw	r4,-12(fp)
 8011958:	20c7883a 	add	r3,r4,r3
 801195c:	18c00003 	ldbu	r3,0(r3)
 8011960:	10c00005 	stb	r3,0(r2)
            local++;
 8011964:	e0bffc17 	ldw	r2,-16(fp)
 8011968:	10800044 	addi	r2,r2,1
 801196c:	e0bffc15 	stw	r2,-16(fp)
 8011970:	00000506 	br	8011988 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
 8011974:	e0bffb17 	ldw	r2,-20(fp)
 8011978:	e0ffff17 	ldw	r3,-4(fp)
 801197c:	1885883a 	add	r2,r3,r2
 8011980:	00c00804 	movi	r3,32
 8011984:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 8011988:	e0bffb17 	ldw	r2,-20(fp)
 801198c:	10800044 	addi	r2,r2,1
 8011990:	e0bffb15 	stw	r2,-20(fp)
 8011994:	e0bffb17 	ldw	r2,-20(fp)
 8011998:	108000d0 	cmplti	r2,r2,3
 801199c:	103fe11e 	bne	r2,zero,8011924 <__alt_data_end+0xf8011924>
        {
            extension[counter] = ' ';
        }
    }

}
 80119a0:	0001883a 	nop
 80119a4:	e037883a 	mov	sp,fp
 80119a8:	df000017 	ldw	fp,0(sp)
 80119ac:	dec00104 	addi	sp,sp,4
 80119b0:	f800283a 	ret

080119b4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 80119b4:	defff504 	addi	sp,sp,-44
 80119b8:	dfc00a15 	stw	ra,40(sp)
 80119bc:	df000915 	stw	fp,36(sp)
 80119c0:	df000904 	addi	fp,sp,36
 80119c4:	e13ffd15 	stw	r4,-12(fp)
 80119c8:	e17ffe15 	stw	r5,-8(fp)
 80119cc:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
 80119d0:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 80119d4:	e0bffc04 	addi	r2,fp,-16
 80119d8:	1009883a 	mov	r4,r2
 80119dc:	80112ec0 	call	80112ec <find_first_empty_cluster>
 80119e0:	1000a026 	beq	r2,zero,8011c64 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 80119e4:	e0bfff17 	ldw	r2,-4(fp)
 80119e8:	10800a17 	ldw	r2,40(r2)
 80119ec:	1000031e 	bne	r2,zero,80119fc <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 80119f0:	80116f40 	call	80116f4 <find_first_empty_record_in_root_directory>
 80119f4:	e0bff815 	stw	r2,-32(fp)
 80119f8:	00000606 	br	8011a14 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 80119fc:	e0bfff17 	ldw	r2,-4(fp)
 8011a00:	1080058b 	ldhu	r2,22(r2)
 8011a04:	10bfffcc 	andi	r2,r2,65535
 8011a08:	1009883a 	mov	r4,r2
 8011a0c:	80114a80 	call	80114a8 <find_first_empty_record_in_a_subdirectory>
 8011a10:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
 8011a14:	e0bff817 	ldw	r2,-32(fp)
 8011a18:	10009216 	blt	r2,zero,8011c64 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 8011a1c:	e13ffd17 	ldw	r4,-12(fp)
 8011a20:	80105dc0 	call	80105dc <get_dir_divider_location>
 8011a24:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
 8011a28:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
 8011a2c:	00000b06 	br	8011a5c <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
 8011a30:	e0fffa17 	ldw	r3,-24(fp)
 8011a34:	e0bff917 	ldw	r2,-28(fp)
 8011a38:	1885883a 	add	r2,r3,r2
 8011a3c:	10800044 	addi	r2,r2,1
 8011a40:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 8011a44:	e0bffa17 	ldw	r2,-24(fp)
 8011a48:	e0fffd17 	ldw	r3,-12(fp)
 8011a4c:	1885883a 	add	r2,r3,r2
 8011a50:	1009883a 	mov	r4,r2
 8011a54:	80105dc0 	call	80105dc <get_dir_divider_location>
 8011a58:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 8011a5c:	e0bff917 	ldw	r2,-28(fp)
 8011a60:	00bff316 	blt	zero,r2,8011a30 <__alt_data_end+0xf8011a30>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
 8011a64:	e0bffa17 	ldw	r2,-24(fp)
 8011a68:	e0fffd17 	ldw	r3,-12(fp)
 8011a6c:	1887883a 	add	r3,r3,r2
 8011a70:	e13ffe17 	ldw	r4,-8(fp)
 8011a74:	e0bffe17 	ldw	r2,-8(fp)
 8011a78:	10800204 	addi	r2,r2,8
 8011a7c:	100d883a 	mov	r6,r2
 8011a80:	200b883a 	mov	r5,r4
 8011a84:	1809883a 	mov	r4,r3
 8011a88:	80118280 	call	8011828 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 8011a8c:	e0bffe17 	ldw	r2,-8(fp)
 8011a90:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 8011a94:	e0bffe17 	ldw	r2,-8(fp)
 8011a98:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 8011a9c:	e0bffe17 	ldw	r2,-8(fp)
 8011aa0:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 8011aa4:	e0bffe17 	ldw	r2,-8(fp)
 8011aa8:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 8011aac:	e0bffe17 	ldw	r2,-8(fp)
 8011ab0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 8011ab4:	e0bffe17 	ldw	r2,-8(fp)
 8011ab8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 8011abc:	e0bffc17 	ldw	r2,-16(fp)
 8011ac0:	1007883a 	mov	r3,r2
 8011ac4:	e0bffe17 	ldw	r2,-8(fp)
 8011ac8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 8011acc:	e0bffe17 	ldw	r2,-8(fp)
 8011ad0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 8011ad4:	e0fffc17 	ldw	r3,-16(fp)
 8011ad8:	e0bffe17 	ldw	r2,-8(fp)
 8011adc:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 8011ae0:	e0bffe17 	ldw	r2,-8(fp)
 8011ae4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 8011ae8:	e0bffe17 	ldw	r2,-8(fp)
 8011aec:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 8011af0:	e0bff817 	ldw	r2,-32(fp)
 8011af4:	10ffffcc 	andi	r3,r2,65535
 8011af8:	e0bffe17 	ldw	r2,-8(fp)
 8011afc:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 8011b00:	e0bff817 	ldw	r2,-32(fp)
 8011b04:	1004d43a 	srli	r2,r2,16
 8011b08:	1000010e 	bge	r2,zero,8011b10 <create_file+0x15c>
 8011b0c:	108003c4 	addi	r2,r2,15
 8011b10:	1005d13a 	srai	r2,r2,4
 8011b14:	1007883a 	mov	r3,r2
 8011b18:	e0bffe17 	ldw	r2,-8(fp)
 8011b1c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 8011b20:	e0bff817 	ldw	r2,-32(fp)
 8011b24:	1004d43a 	srli	r2,r2,16
 8011b28:	1007883a 	mov	r3,r2
 8011b2c:	00a00034 	movhi	r2,32768
 8011b30:	108003c4 	addi	r2,r2,15
 8011b34:	1884703a 	and	r2,r3,r2
 8011b38:	1000040e 	bge	r2,zero,8011b4c <create_file+0x198>
 8011b3c:	10bfffc4 	addi	r2,r2,-1
 8011b40:	00fffc04 	movi	r3,-16
 8011b44:	10c4b03a 	or	r2,r2,r3
 8011b48:	10800044 	addi	r2,r2,1
 8011b4c:	1004917a 	slli	r2,r2,5
 8011b50:	1007883a 	mov	r3,r2
 8011b54:	e0bffe17 	ldw	r2,-8(fp)
 8011b58:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 8011b5c:	e0bfff17 	ldw	r2,-4(fp)
 8011b60:	1080058b 	ldhu	r2,22(r2)
 8011b64:	10ffffcc 	andi	r3,r2,65535
 8011b68:	e0bffe17 	ldw	r2,-8(fp)
 8011b6c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 8011b70:	e0bffe17 	ldw	r2,-8(fp)
 8011b74:	00c00044 	movi	r3,1
 8011b78:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
 8011b7c:	e0bffe17 	ldw	r2,-8(fp)
 8011b80:	00c00044 	movi	r3,1
 8011b84:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 8011b88:	e0bffe17 	ldw	r2,-8(fp)
 8011b8c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 8011b90:	1000071e 	bne	r2,zero,8011bb0 <create_file+0x1fc>
 8011b94:	008200b4 	movhi	r2,2050
 8011b98:	10a5d704 	addi	r2,r2,-26788
 8011b9c:	10c01317 	ldw	r3,76(r2)
 8011ba0:	e0bffe17 	ldw	r2,-8(fp)
 8011ba4:	10800b17 	ldw	r2,44(r2)
 8011ba8:	1885883a 	add	r2,r3,r2
 8011bac:	00000f06 	br	8011bec <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
 8011bb0:	008200b4 	movhi	r2,2050
 8011bb4:	10a5d704 	addi	r2,r2,-26788
 8011bb8:	10c01417 	ldw	r3,80(r2)
 8011bbc:	e0bffe17 	ldw	r2,-8(fp)
 8011bc0:	10800a17 	ldw	r2,40(r2)
 8011bc4:	113fff84 	addi	r4,r2,-2
 8011bc8:	008200b4 	movhi	r2,2050
 8011bcc:	10a5d704 	addi	r2,r2,-26788
 8011bd0:	10800383 	ldbu	r2,14(r2)
 8011bd4:	10803fcc 	andi	r2,r2,255
 8011bd8:	2085383a 	mul	r2,r4,r2
 8011bdc:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
 8011be0:	e0bffe17 	ldw	r2,-8(fp)
 8011be4:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 8011be8:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 8011bec:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 8011bf0:	e0bffb17 	ldw	r2,-20(fp)
 8011bf4:	d0e6f417 	ldw	r3,-25648(gp)
 8011bf8:	180b883a 	mov	r5,r3
 8011bfc:	1009883a 	mov	r4,r2
 8011c00:	800f2080 	call	800f208 <Read_Sector_Data>
 8011c04:	10001726 	beq	r2,zero,8011c64 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 8011c08:	e0bffe17 	ldw	r2,-8(fp)
 8011c0c:	10800c0b 	ldhu	r2,48(r2)
 8011c10:	10bfffcc 	andi	r2,r2,65535
 8011c14:	10a0001c 	xori	r2,r2,32768
 8011c18:	10a00004 	addi	r2,r2,-32768
 8011c1c:	e17ffe17 	ldw	r5,-8(fp)
 8011c20:	1009883a 	mov	r4,r2
 8011c24:	800f8940 	call	800f894 <Write_File_Record_At_Offset>
 8011c28:	10000e26 	beq	r2,zero,8011c64 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
 8011c2c:	800f1bc0 	call	800f1bc <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 8011c30:	e0bffc17 	ldw	r2,-16(fp)
 8011c34:	01800044 	movi	r6,1
 8011c38:	017fffc4 	movi	r5,-1
 8011c3c:	1009883a 	mov	r4,r2
 8011c40:	800f3940 	call	800f394 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 8011c44:	e0bffc17 	ldw	r2,-16(fp)
 8011c48:	000d883a 	mov	r6,zero
 8011c4c:	017fffc4 	movi	r5,-1
 8011c50:	1009883a 	mov	r4,r2
 8011c54:	800f3940 	call	800f394 <mark_cluster>
 8011c58:	10000226 	beq	r2,zero,8011c64 <create_file+0x2b0>
                    {
                        result = true;
 8011c5c:	00800044 	movi	r2,1
 8011c60:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
 8011c64:	e0bff717 	ldw	r2,-36(fp)
}
 8011c68:	e037883a 	mov	sp,fp
 8011c6c:	dfc00117 	ldw	ra,4(sp)
 8011c70:	df000017 	ldw	fp,0(sp)
 8011c74:	dec00204 	addi	sp,sp,8
 8011c78:	f800283a 	ret

08011c7c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 8011c7c:	defffb04 	addi	sp,sp,-20
 8011c80:	df000415 	stw	fp,16(sp)
 8011c84:	df000404 	addi	fp,sp,16
 8011c88:	e13ffe15 	stw	r4,-8(fp)
 8011c8c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 8011c90:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 8011c94:	e03ffc15 	stw	zero,-16(fp)
 8011c98:	00001506 	br	8011cf0 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
 8011c9c:	e0fffe17 	ldw	r3,-8(fp)
 8011ca0:	e0bffc17 	ldw	r2,-16(fp)
 8011ca4:	1885883a 	add	r2,r3,r2
 8011ca8:	10800003 	ldbu	r2,0(r2)
 8011cac:	10803fcc 	andi	r2,r2,255
 8011cb0:	10800820 	cmpeqi	r2,r2,32
 8011cb4:	10000b1e 	bne	r2,zero,8011ce4 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
 8011cb8:	e0bffd17 	ldw	r2,-12(fp)
 8011cbc:	e0ffff17 	ldw	r3,-4(fp)
 8011cc0:	1885883a 	add	r2,r3,r2
 8011cc4:	e13ffe17 	ldw	r4,-8(fp)
 8011cc8:	e0fffc17 	ldw	r3,-16(fp)
 8011ccc:	20c7883a 	add	r3,r4,r3
 8011cd0:	18c00003 	ldbu	r3,0(r3)
 8011cd4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
 8011cd8:	e0bffd17 	ldw	r2,-12(fp)
 8011cdc:	10800044 	addi	r2,r2,1
 8011ce0:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 8011ce4:	e0bffc17 	ldw	r2,-16(fp)
 8011ce8:	10800044 	addi	r2,r2,1
 8011cec:	e0bffc15 	stw	r2,-16(fp)
 8011cf0:	e0bffc17 	ldw	r2,-16(fp)
 8011cf4:	10800210 	cmplti	r2,r2,8
 8011cf8:	103fe81e 	bne	r2,zero,8011c9c <__alt_data_end+0xf8011c9c>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 8011cfc:	e0bffe17 	ldw	r2,-8(fp)
 8011d00:	10800203 	ldbu	r2,8(r2)
 8011d04:	10803fcc 	andi	r2,r2,255
 8011d08:	10800820 	cmpeqi	r2,r2,32
 8011d0c:	1000241e 	bne	r2,zero,8011da0 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
 8011d10:	e0bffd17 	ldw	r2,-12(fp)
 8011d14:	e0ffff17 	ldw	r3,-4(fp)
 8011d18:	1885883a 	add	r2,r3,r2
 8011d1c:	00c00b84 	movi	r3,46
 8011d20:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
 8011d24:	e0bffd17 	ldw	r2,-12(fp)
 8011d28:	10800044 	addi	r2,r2,1
 8011d2c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
 8011d30:	e03ffc15 	stw	zero,-16(fp)
 8011d34:	00001706 	br	8011d94 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
 8011d38:	e0fffe17 	ldw	r3,-8(fp)
 8011d3c:	e0bffc17 	ldw	r2,-16(fp)
 8011d40:	1885883a 	add	r2,r3,r2
 8011d44:	10800204 	addi	r2,r2,8
 8011d48:	10800003 	ldbu	r2,0(r2)
 8011d4c:	10803fcc 	andi	r2,r2,255
 8011d50:	10800820 	cmpeqi	r2,r2,32
 8011d54:	10000c1e 	bne	r2,zero,8011d88 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
 8011d58:	e0bffd17 	ldw	r2,-12(fp)
 8011d5c:	e0ffff17 	ldw	r3,-4(fp)
 8011d60:	1885883a 	add	r2,r3,r2
 8011d64:	e13ffe17 	ldw	r4,-8(fp)
 8011d68:	e0fffc17 	ldw	r3,-16(fp)
 8011d6c:	20c7883a 	add	r3,r4,r3
 8011d70:	18c00204 	addi	r3,r3,8
 8011d74:	18c00003 	ldbu	r3,0(r3)
 8011d78:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
 8011d7c:	e0bffd17 	ldw	r2,-12(fp)
 8011d80:	10800044 	addi	r2,r2,1
 8011d84:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 8011d88:	e0bffc17 	ldw	r2,-16(fp)
 8011d8c:	10800044 	addi	r2,r2,1
 8011d90:	e0bffc15 	stw	r2,-16(fp)
 8011d94:	e0bffc17 	ldw	r2,-16(fp)
 8011d98:	108000d0 	cmplti	r2,r2,3
 8011d9c:	103fe61e 	bne	r2,zero,8011d38 <__alt_data_end+0xf8011d38>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 8011da0:	e0bffd17 	ldw	r2,-12(fp)
 8011da4:	e0ffff17 	ldw	r3,-4(fp)
 8011da8:	1885883a 	add	r2,r3,r2
 8011dac:	10000005 	stb	zero,0(r2)
}
 8011db0:	0001883a 	nop
 8011db4:	e037883a 	mov	sp,fp
 8011db8:	df000017 	ldw	fp,0(sp)
 8011dbc:	dec00104 	addi	sp,sp,4
 8011dc0:	f800283a 	ret

08011dc4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 8011dc4:	defffc04 	addi	sp,sp,-16
 8011dc8:	dfc00315 	stw	ra,12(sp)
 8011dcc:	df000215 	stw	fp,8(sp)
 8011dd0:	df000204 	addi	fp,sp,8
 8011dd4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 8011dd8:	d1600804 	addi	r5,gp,-32736
 8011ddc:	e13fff17 	ldw	r4,-4(fp)
 8011de0:	80147980 	call	8014798 <alt_find_dev>
 8011de4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 8011de8:	e0bffe17 	ldw	r2,-8(fp)
 8011dec:	10001e26 	beq	r2,zero,8011e68 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 8011df0:	e0bffe17 	ldw	r2,-8(fp)
 8011df4:	10800a17 	ldw	r2,40(r2)
 8011df8:	10808d04 	addi	r2,r2,564
 8011dfc:	d0a6ee15 	stw	r2,-25672(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 8011e00:	e0bffe17 	ldw	r2,-8(fp)
 8011e04:	10800a17 	ldw	r2,40(r2)
 8011e08:	10808904 	addi	r2,r2,548
 8011e0c:	d0a6ef15 	stw	r2,-25668(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 8011e10:	e0bffe17 	ldw	r2,-8(fp)
 8011e14:	10800a17 	ldw	r2,40(r2)
 8011e18:	10808404 	addi	r2,r2,528
 8011e1c:	d0a6f015 	stw	r2,-25664(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 8011e20:	e0bffe17 	ldw	r2,-8(fp)
 8011e24:	10800a17 	ldw	r2,40(r2)
 8011e28:	10808c04 	addi	r2,r2,560
 8011e2c:	d0a6f115 	stw	r2,-25660(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 8011e30:	e0bffe17 	ldw	r2,-8(fp)
 8011e34:	10800a17 	ldw	r2,40(r2)
 8011e38:	10808b04 	addi	r2,r2,556
 8011e3c:	d0a6f215 	stw	r2,-25656(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 8011e40:	e0bffe17 	ldw	r2,-8(fp)
 8011e44:	10800a17 	ldw	r2,40(r2)
 8011e48:	d0a6f315 	stw	r2,-25652(gp)
		device_pointer = dev;
 8011e4c:	e0bffe17 	ldw	r2,-8(fp)
 8011e50:	d0a6f615 	stw	r2,-25640(gp)
		initialized = false;
 8011e54:	d026ec15 	stw	zero,-25680(gp)
		is_sd_card_formated_as_FAT16 = false;
 8011e58:	d026ed15 	stw	zero,-25676(gp)
		search_data.valid = false;
 8011e5c:	008200b4 	movhi	r2,2050
 8011e60:	10a5d204 	addi	r2,r2,-26808
 8011e64:	10000415 	stw	zero,16(r2)
	}
	return dev;
 8011e68:	e0bffe17 	ldw	r2,-8(fp)
}
 8011e6c:	e037883a 	mov	sp,fp
 8011e70:	dfc00117 	ldw	ra,4(sp)
 8011e74:	df000017 	ldw	fp,0(sp)
 8011e78:	dec00204 	addi	sp,sp,8
 8011e7c:	f800283a 	ret

08011e80 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 8011e80:	defffd04 	addi	sp,sp,-12
 8011e84:	df000215 	stw	fp,8(sp)
 8011e88:	df000204 	addi	fp,sp,8
    bool result = false;
 8011e8c:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 8011e90:	d0a6f617 	ldw	r2,-25640(gp)
 8011e94:	10000826 	beq	r2,zero,8011eb8 <alt_up_sd_card_is_Present+0x38>
 8011e98:	d0a6ee17 	ldw	r2,-25672(gp)
 8011e9c:	1080002b 	ldhuio	r2,0(r2)
 8011ea0:	10bfffcc 	andi	r2,r2,65535
 8011ea4:	1080008c 	andi	r2,r2,2
 8011ea8:	10000326 	beq	r2,zero,8011eb8 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
 8011eac:	00800044 	movi	r2,1
 8011eb0:	e0bffe15 	stw	r2,-8(fp)
 8011eb4:	00001e06 	br	8011f30 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
 8011eb8:	d0a6ec17 	ldw	r2,-25680(gp)
 8011ebc:	10800058 	cmpnei	r2,r2,1
 8011ec0:	10001b1e 	bne	r2,zero,8011f30 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
 8011ec4:	d026ec15 	stw	zero,-25680(gp)
		search_data.valid = false;
 8011ec8:	008200b4 	movhi	r2,2050
 8011ecc:	10a5d204 	addi	r2,r2,-26808
 8011ed0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 8011ed4:	d026ed15 	stw	zero,-25676(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 8011ed8:	e03fff15 	stw	zero,-4(fp)
 8011edc:	00001106 	br	8011f24 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
 8011ee0:	008200b4 	movhi	r2,2050
 8011ee4:	10a5ec04 	addi	r2,r2,-26704
 8011ee8:	e0ffff17 	ldw	r3,-4(fp)
 8011eec:	180691ba 	slli	r3,r3,6
 8011ef0:	10c5883a 	add	r2,r2,r3
 8011ef4:	10800f04 	addi	r2,r2,60
 8011ef8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 8011efc:	008200b4 	movhi	r2,2050
 8011f00:	10a5ec04 	addi	r2,r2,-26704
 8011f04:	e0ffff17 	ldw	r3,-4(fp)
 8011f08:	180691ba 	slli	r3,r3,6
 8011f0c:	10c5883a 	add	r2,r2,r3
 8011f10:	10800e04 	addi	r2,r2,56
 8011f14:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 8011f18:	e0bfff17 	ldw	r2,-4(fp)
 8011f1c:	10800044 	addi	r2,r2,1
 8011f20:	e0bfff15 	stw	r2,-4(fp)
 8011f24:	e0bfff17 	ldw	r2,-4(fp)
 8011f28:	10800510 	cmplti	r2,r2,20
 8011f2c:	103fec1e 	bne	r2,zero,8011ee0 <__alt_data_end+0xf8011ee0>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 8011f30:	e0bffe17 	ldw	r2,-8(fp)
}
 8011f34:	e037883a 	mov	sp,fp
 8011f38:	df000017 	ldw	fp,0(sp)
 8011f3c:	dec00104 	addi	sp,sp,4
 8011f40:	f800283a 	ret

08011f44 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 8011f44:	defffd04 	addi	sp,sp,-12
 8011f48:	dfc00215 	stw	ra,8(sp)
 8011f4c:	df000115 	stw	fp,4(sp)
 8011f50:	df000104 	addi	fp,sp,4
	bool result = false;
 8011f54:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 8011f58:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8011f5c:	10000c26 	beq	r2,zero,8011f90 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 8011f60:	d0a6ec17 	ldw	r2,-25680(gp)
 8011f64:	1000071e 	bne	r2,zero,8011f84 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 8011f68:	80101c00 	call	80101c0 <Look_for_FAT16>
 8011f6c:	d0a6ed15 	stw	r2,-25676(gp)
			initialized = is_sd_card_formated_as_FAT16;
 8011f70:	d0a6ed17 	ldw	r2,-25676(gp)
 8011f74:	d0a6ec15 	stw	r2,-25680(gp)
			search_data.valid = false;
 8011f78:	008200b4 	movhi	r2,2050
 8011f7c:	10a5d204 	addi	r2,r2,-26808
 8011f80:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 8011f84:	d0a6ed17 	ldw	r2,-25676(gp)
 8011f88:	e0bfff15 	stw	r2,-4(fp)
 8011f8c:	00000206 	br	8011f98 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 8011f90:	d026ec15 	stw	zero,-25680(gp)
		is_sd_card_formated_as_FAT16 = false;
 8011f94:	d026ed15 	stw	zero,-25676(gp)
	}

	return result;
 8011f98:	e0bfff17 	ldw	r2,-4(fp)
}
 8011f9c:	e037883a 	mov	sp,fp
 8011fa0:	dfc00117 	ldw	ra,4(sp)
 8011fa4:	df000017 	ldw	fp,0(sp)
 8011fa8:	dec00204 	addi	sp,sp,8
 8011fac:	f800283a 	ret

08011fb0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 8011fb0:	deffea04 	addi	sp,sp,-88
 8011fb4:	dfc01515 	stw	ra,84(sp)
 8011fb8:	df001415 	stw	fp,80(sp)
 8011fbc:	df001404 	addi	fp,sp,80
 8011fc0:	e13ffe15 	stw	r4,-8(fp)
 8011fc4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 8011fc8:	00800084 	movi	r2,2
 8011fcc:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8011fd0:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8011fd4:	10002426 	beq	r2,zero,8012068 <alt_up_sd_card_find_first+0xb8>
 8011fd8:	d0a6ed17 	ldw	r2,-25676(gp)
 8011fdc:	10002226 	beq	r2,zero,8012068 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 8011fe0:	e0ffee04 	addi	r3,fp,-72
 8011fe4:	e0bfed04 	addi	r2,fp,-76
 8011fe8:	180d883a 	mov	r6,r3
 8011fec:	100b883a 	mov	r5,r2
 8011ff0:	e13ffe17 	ldw	r4,-8(fp)
 8011ff4:	80109300 	call	8010930 <get_home_directory_cluster_for_file>
 8011ff8:	10001926 	beq	r2,zero,8012060 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 8011ffc:	e0bfed17 	ldw	r2,-76(fp)
 8012000:	1007883a 	mov	r3,r2
 8012004:	008200b4 	movhi	r2,2050
 8012008:	10a5d204 	addi	r2,r2,-26808
 801200c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 8012010:	e0bfed17 	ldw	r2,-76(fp)
 8012014:	1007883a 	mov	r3,r2
 8012018:	008200b4 	movhi	r2,2050
 801201c:	10a5d204 	addi	r2,r2,-26808
 8012020:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 8012024:	008200b4 	movhi	r2,2050
 8012028:	10a5d204 	addi	r2,r2,-26808
 801202c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 8012030:	008200b4 	movhi	r2,2050
 8012034:	10a5d204 	addi	r2,r2,-26808
 8012038:	00ffffc4 	movi	r3,-1
 801203c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
 8012040:	008200b4 	movhi	r2,2050
 8012044:	10a5d204 	addi	r2,r2,-26808
 8012048:	00c00044 	movi	r3,1
 801204c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
 8012050:	e13fff17 	ldw	r4,-4(fp)
 8012054:	80120800 	call	8012080 <alt_up_sd_card_find_next>
 8012058:	e0bfec0d 	sth	r2,-80(fp)
 801205c:	00000206 	br	8012068 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
 8012060:	00800044 	movi	r2,1
 8012064:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 8012068:	e0bfec0b 	ldhu	r2,-80(fp)
}
 801206c:	e037883a 	mov	sp,fp
 8012070:	dfc00117 	ldw	ra,4(sp)
 8012074:	df000017 	ldw	fp,0(sp)
 8012078:	dec00204 	addi	sp,sp,8
 801207c:	f800283a 	ret

08012080 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 8012080:	deffe404 	addi	sp,sp,-112
 8012084:	dfc01b15 	stw	ra,108(sp)
 8012088:	df001a15 	stw	fp,104(sp)
 801208c:	df001a04 	addi	fp,sp,104
 8012090:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
 8012094:	00800084 	movi	r2,2
 8012098:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 801209c:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 80120a0:	1000e126 	beq	r2,zero,8012428 <alt_up_sd_card_find_next+0x3a8>
 80120a4:	d0a6ed17 	ldw	r2,-25676(gp)
 80120a8:	1000df26 	beq	r2,zero,8012428 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
 80120ac:	008200b4 	movhi	r2,2050
 80120b0:	10a5d204 	addi	r2,r2,-26808
 80120b4:	10800417 	ldw	r2,16(r2)
 80120b8:	1000d926 	beq	r2,zero,8012420 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 80120bc:	008200b4 	movhi	r2,2050
 80120c0:	10a5d204 	addi	r2,r2,-26808
 80120c4:	10800117 	ldw	r2,4(r2)
 80120c8:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
 80120cc:	e0bfe717 	ldw	r2,-100(fp)
 80120d0:	1000581e 	bne	r2,zero,8012234 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 80120d4:	008200b4 	movhi	r2,2050
 80120d8:	10a5d704 	addi	r2,r2,-26788
 80120dc:	1080050b 	ldhu	r2,20(r2)
 80120e0:	10bfffcc 	andi	r2,r2,65535
 80120e4:	1006917a 	slli	r3,r2,5
 80120e8:	008200b4 	movhi	r2,2050
 80120ec:	10a5d704 	addi	r2,r2,-26788
 80120f0:	1080030b 	ldhu	r2,12(r2)
 80120f4:	10bfffcc 	andi	r2,r2,65535
 80120f8:	100b883a 	mov	r5,r2
 80120fc:	1809883a 	mov	r4,r3
 8012100:	800bc600 	call	800bc60 <__divsi3>
 8012104:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
 8012108:	008200b4 	movhi	r2,2050
 801210c:	10a5d204 	addi	r2,r2,-26808
 8012110:	10800217 	ldw	r2,8(r2)
 8012114:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
 8012118:	008200b4 	movhi	r2,2050
 801211c:	10a5d204 	addi	r2,r2,-26808
 8012120:	1080030b 	ldhu	r2,12(r2)
 8012124:	10bfffcc 	andi	r2,r2,65535
 8012128:	10a0001c 	xori	r2,r2,32768
 801212c:	10a00004 	addi	r2,r2,-32768
 8012130:	10800044 	addi	r2,r2,1
 8012134:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 8012138:	00003606 	br	8012214 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 801213c:	008200b4 	movhi	r2,2050
 8012140:	10a5d704 	addi	r2,r2,-26788
 8012144:	10c01317 	ldw	r3,76(r2)
 8012148:	e0bfe817 	ldw	r2,-96(fp)
 801214c:	1885883a 	add	r2,r3,r2
 8012150:	1007883a 	mov	r3,r2
 8012154:	d0a6f417 	ldw	r2,-25648(gp)
 8012158:	100b883a 	mov	r5,r2
 801215c:	1809883a 	mov	r4,r3
 8012160:	800f2080 	call	800f208 <Read_Sector_Data>
 8012164:	10002f26 	beq	r2,zero,8012224 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 8012168:	00002306 	br	80121f8 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 801216c:	e0bfe917 	ldw	r2,-92(fp)
 8012170:	1004917a 	slli	r2,r2,5
 8012174:	e13fe817 	ldw	r4,-96(fp)
 8012178:	e0ffef04 	addi	r3,fp,-68
 801217c:	200f883a 	mov	r7,r4
 8012180:	000d883a 	mov	r6,zero
 8012184:	180b883a 	mov	r5,r3
 8012188:	1009883a 	mov	r4,r2
 801218c:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
 8012190:	10001626 	beq	r2,zero,80121ec <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 8012194:	e0bfef03 	ldbu	r2,-68(fp)
 8012198:	10803fcc 	andi	r2,r2,255
 801219c:	10001326 	beq	r2,zero,80121ec <alt_up_sd_card_find_next+0x16c>
 80121a0:	e0bfef03 	ldbu	r2,-68(fp)
 80121a4:	10803fcc 	andi	r2,r2,255
 80121a8:	10803960 	cmpeqi	r2,r2,229
 80121ac:	10000f1e 	bne	r2,zero,80121ec <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 80121b0:	e0bfe917 	ldw	r2,-92(fp)
 80121b4:	1007883a 	mov	r3,r2
 80121b8:	008200b4 	movhi	r2,2050
 80121bc:	10a5d204 	addi	r2,r2,-26808
 80121c0:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 80121c4:	e0ffe817 	ldw	r3,-96(fp)
 80121c8:	008200b4 	movhi	r2,2050
 80121cc:	10a5d204 	addi	r2,r2,-26808
 80121d0:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 80121d4:	e0bfef04 	addi	r2,fp,-68
 80121d8:	e17fff17 	ldw	r5,-4(fp)
 80121dc:	1009883a 	mov	r4,r2
 80121e0:	8011c7c0 	call	8011c7c <copy_file_record_name_to_string>
									return 0;
 80121e4:	0005883a 	mov	r2,zero
 80121e8:	00009006 	br	801242c <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 80121ec:	e0bfe917 	ldw	r2,-92(fp)
 80121f0:	10800044 	addi	r2,r2,1
 80121f4:	e0bfe915 	stw	r2,-92(fp)
 80121f8:	e0bfe917 	ldw	r2,-92(fp)
 80121fc:	10800410 	cmplti	r2,r2,16
 8012200:	103fda1e 	bne	r2,zero,801216c <__alt_data_end+0xf801216c>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 8012204:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 8012208:	e0bfe817 	ldw	r2,-96(fp)
 801220c:	10800044 	addi	r2,r2,1
 8012210:	e0bfe815 	stw	r2,-96(fp)
 8012214:	e0ffe817 	ldw	r3,-96(fp)
 8012218:	e0bfec17 	ldw	r2,-80(fp)
 801221c:	18bfc716 	blt	r3,r2,801213c <__alt_data_end+0xf801213c>
 8012220:	00000106 	br	8012228 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
 8012224:	0001883a 	nop
					}
				}
				result = -1;
 8012228:	00bfffc4 	movi	r2,-1
 801222c:	e0bfe60d 	sth	r2,-104(fp)
 8012230:	00007d06 	br	8012428 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 8012234:	008200b4 	movhi	r2,2050
 8012238:	10a5d204 	addi	r2,r2,-26808
 801223c:	1080030b 	ldhu	r2,12(r2)
 8012240:	10bfffcc 	andi	r2,r2,65535
 8012244:	10a0001c 	xori	r2,r2,32768
 8012248:	10a00004 	addi	r2,r2,-32768
 801224c:	10800044 	addi	r2,r2,1
 8012250:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8012254:	e0bfe717 	ldw	r2,-100(fp)
 8012258:	10ffff84 	addi	r3,r2,-2
 801225c:	008200b4 	movhi	r2,2050
 8012260:	10a5d704 	addi	r2,r2,-26788
 8012264:	10800383 	ldbu	r2,14(r2)
 8012268:	10803fcc 	andi	r2,r2,255
 801226c:	1885383a 	mul	r2,r3,r2
 8012270:	1007883a 	mov	r3,r2
 8012274:	008200b4 	movhi	r2,2050
 8012278:	10a5d704 	addi	r2,r2,-26788
 801227c:	10801417 	ldw	r2,80(r2)
 8012280:	1885883a 	add	r2,r3,r2
 8012284:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
 8012288:	008200b4 	movhi	r2,2050
 801228c:	10a5d204 	addi	r2,r2,-26808
 8012290:	10800217 	ldw	r2,8(r2)
 8012294:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8012298:	00003806 	br	801237c <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 801229c:	e0ffeb17 	ldw	r3,-84(fp)
 80122a0:	e0bfed17 	ldw	r2,-76(fp)
 80122a4:	1885883a 	add	r2,r3,r2
 80122a8:	d0e6f417 	ldw	r3,-25648(gp)
 80122ac:	180b883a 	mov	r5,r3
 80122b0:	1009883a 	mov	r4,r2
 80122b4:	800f2080 	call	800f208 <Read_Sector_Data>
 80122b8:	10003726 	beq	r2,zero,8012398 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
 80122bc:	00002806 	br	8012360 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 80122c0:	e0bfea17 	ldw	r2,-88(fp)
 80122c4:	1004917a 	slli	r2,r2,5
 80122c8:	e13fe717 	ldw	r4,-100(fp)
 80122cc:	e17feb17 	ldw	r5,-84(fp)
 80122d0:	e0ffef04 	addi	r3,fp,-68
 80122d4:	280f883a 	mov	r7,r5
 80122d8:	200d883a 	mov	r6,r4
 80122dc:	180b883a 	mov	r5,r3
 80122e0:	1009883a 	mov	r4,r2
 80122e4:	800f6180 	call	800f618 <Read_File_Record_At_Offset>
 80122e8:	10001a26 	beq	r2,zero,8012354 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 80122ec:	e0bfef03 	ldbu	r2,-68(fp)
 80122f0:	10803fcc 	andi	r2,r2,255
 80122f4:	10001726 	beq	r2,zero,8012354 <alt_up_sd_card_find_next+0x2d4>
 80122f8:	e0bfef03 	ldbu	r2,-68(fp)
 80122fc:	10803fcc 	andi	r2,r2,255
 8012300:	10803960 	cmpeqi	r2,r2,229
 8012304:	1000131e 	bne	r2,zero,8012354 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 8012308:	e0ffe717 	ldw	r3,-100(fp)
 801230c:	008200b4 	movhi	r2,2050
 8012310:	10a5d204 	addi	r2,r2,-26808
 8012314:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 8012318:	e0bfea17 	ldw	r2,-88(fp)
 801231c:	1007883a 	mov	r3,r2
 8012320:	008200b4 	movhi	r2,2050
 8012324:	10a5d204 	addi	r2,r2,-26808
 8012328:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 801232c:	e0ffeb17 	ldw	r3,-84(fp)
 8012330:	008200b4 	movhi	r2,2050
 8012334:	10a5d204 	addi	r2,r2,-26808
 8012338:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 801233c:	e0bfef04 	addi	r2,fp,-68
 8012340:	e17fff17 	ldw	r5,-4(fp)
 8012344:	1009883a 	mov	r4,r2
 8012348:	8011c7c0 	call	8011c7c <copy_file_record_name_to_string>
										return 0;
 801234c:	0005883a 	mov	r2,zero
 8012350:	00003606 	br	801242c <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 8012354:	e0bfea17 	ldw	r2,-88(fp)
 8012358:	10800044 	addi	r2,r2,1
 801235c:	e0bfea15 	stw	r2,-88(fp)
 8012360:	e0bfea17 	ldw	r2,-88(fp)
 8012364:	10800410 	cmplti	r2,r2,16
 8012368:	103fd51e 	bne	r2,zero,80122c0 <__alt_data_end+0xf80122c0>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 801236c:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8012370:	e0bfeb17 	ldw	r2,-84(fp)
 8012374:	10800044 	addi	r2,r2,1
 8012378:	e0bfeb15 	stw	r2,-84(fp)
 801237c:	008200b4 	movhi	r2,2050
 8012380:	10a5d704 	addi	r2,r2,-26788
 8012384:	10800383 	ldbu	r2,14(r2)
 8012388:	10803fcc 	andi	r2,r2,255
 801238c:	e0ffeb17 	ldw	r3,-84(fp)
 8012390:	18bfc216 	blt	r3,r2,801229c <__alt_data_end+0xf801229c>
 8012394:	00000106 	br	801239c <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
 8012398:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 801239c:	008200b4 	movhi	r2,2050
 80123a0:	10a5d704 	addi	r2,r2,-26788
 80123a4:	10800383 	ldbu	r2,14(r2)
 80123a8:	10803fcc 	andi	r2,r2,255
 80123ac:	e0ffeb17 	ldw	r3,-84(fp)
 80123b0:	18801716 	blt	r3,r2,8012410 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 80123b4:	e0bfe717 	ldw	r2,-100(fp)
 80123b8:	e0ffee04 	addi	r3,fp,-72
 80123bc:	180b883a 	mov	r5,r3
 80123c0:	1009883a 	mov	r4,r2
 80123c4:	800f2e00 	call	800f2e0 <get_cluster_flag>
 80123c8:	10000f26 	beq	r2,zero,8012408 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 80123cc:	e0bfee0b 	ldhu	r2,-72(fp)
 80123d0:	10bfffcc 	andi	r2,r2,65535
 80123d4:	10fffe0c 	andi	r3,r2,65528
 80123d8:	00bffe14 	movui	r2,65528
 80123dc:	1880051e 	bne	r3,r2,80123f4 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
 80123e0:	00bfffc4 	movi	r2,-1
 80123e4:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
 80123e8:	008200b4 	movhi	r2,2050
 80123ec:	10a5d204 	addi	r2,r2,-26808
 80123f0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 80123f4:	e0bfee0b 	ldhu	r2,-72(fp)
 80123f8:	10bfffcc 	andi	r2,r2,65535
 80123fc:	10bffe0c 	andi	r2,r2,65528
 8012400:	e0bfe715 	stw	r2,-100(fp)
 8012404:	00000206 	br	8012410 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 8012408:	00bfffc4 	movi	r2,-1
 801240c:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 8012410:	e0bfe717 	ldw	r2,-100(fp)
 8012414:	00fffdd4 	movui	r3,65527
 8012418:	18bf8e0e 	bge	r3,r2,8012254 <__alt_data_end+0xf8012254>
 801241c:	00000206 	br	8012428 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 8012420:	008000c4 	movi	r2,3
 8012424:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
 8012428:	e0bfe60b 	ldhu	r2,-104(fp)
}
 801242c:	e037883a 	mov	sp,fp
 8012430:	dfc00117 	ldw	ra,4(sp)
 8012434:	df000017 	ldw	fp,0(sp)
 8012438:	dec00204 	addi	sp,sp,8
 801243c:	f800283a 	ret

08012440 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 8012440:	deffe904 	addi	sp,sp,-92
 8012444:	dfc01615 	stw	ra,88(sp)
 8012448:	df001515 	stw	fp,84(sp)
 801244c:	df001504 	addi	fp,sp,84
 8012450:	e13ffe15 	stw	r4,-8(fp)
 8012454:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
 8012458:	00bfffc4 	movi	r2,-1
 801245c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8012460:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8012464:	1000cf26 	beq	r2,zero,80127a4 <alt_up_sd_card_fopen+0x364>
 8012468:	d0a6ed17 	ldw	r2,-25676(gp)
 801246c:	1000cd26 	beq	r2,zero,80127a4 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
 8012470:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 8012474:	e13ffe17 	ldw	r4,-8(fp)
 8012478:	80102ac0 	call	80102ac <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 801247c:	e13ffe17 	ldw	r4,-8(fp)
 8012480:	80103700 	call	8010370 <check_file_name_for_FAT16_compliance>
 8012484:	1000c726 	beq	r2,zero,80127a4 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
 8012488:	e0ffee04 	addi	r3,fp,-72
 801248c:	e0bfed04 	addi	r2,fp,-76
 8012490:	180d883a 	mov	r6,r3
 8012494:	100b883a 	mov	r5,r2
 8012498:	e13ffe17 	ldw	r4,-8(fp)
 801249c:	80109300 	call	8010930 <get_home_directory_cluster_for_file>
 80124a0:	1000021e 	bne	r2,zero,80124ac <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
 80124a4:	e0bfeb0b 	ldhu	r2,-84(fp)
 80124a8:	0000bf06 	br	80127a8 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 80124ac:	e03fec15 	stw	zero,-80(fp)
 80124b0:	00000e06 	br	80124ec <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
 80124b4:	008200b4 	movhi	r2,2050
 80124b8:	10a5ec04 	addi	r2,r2,-26704
 80124bc:	e0ffec17 	ldw	r3,-80(fp)
 80124c0:	180691ba 	slli	r3,r3,6
 80124c4:	10c5883a 	add	r2,r2,r3
 80124c8:	10800f04 	addi	r2,r2,60
 80124cc:	10800017 	ldw	r2,0(r2)
 80124d0:	1000031e 	bne	r2,zero,80124e0 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
 80124d4:	e0bfec17 	ldw	r2,-80(fp)
 80124d8:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 80124dc:	00000606 	br	80124f8 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 80124e0:	e0bfec17 	ldw	r2,-80(fp)
 80124e4:	10800044 	addi	r2,r2,1
 80124e8:	e0bfec15 	stw	r2,-80(fp)
 80124ec:	e0bfec17 	ldw	r2,-80(fp)
 80124f0:	10800510 	cmplti	r2,r2,20
 80124f4:	103fef1e 	bne	r2,zero,80124b4 <__alt_data_end+0xf80124b4>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 80124f8:	e0bfeb0f 	ldh	r2,-84(fp)
 80124fc:	1000a916 	blt	r2,zero,80127a4 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 8012500:	e0bfed17 	ldw	r2,-76(fp)
 8012504:	1009883a 	mov	r4,r2
 8012508:	e0bfeb0f 	ldh	r2,-84(fp)
 801250c:	100691ba 	slli	r3,r2,6
 8012510:	008200b4 	movhi	r2,2050
 8012514:	10a5ec04 	addi	r2,r2,-26704
 8012518:	1885883a 	add	r2,r3,r2
 801251c:	100d883a 	mov	r6,r2
 8012520:	e17ffe17 	ldw	r5,-8(fp)
 8012524:	8010e700 	call	8010e70 <find_file_in_directory>
 8012528:	10007b26 	beq	r2,zero,8012718 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
 801252c:	e0bfff17 	ldw	r2,-4(fp)
 8012530:	10000226 	beq	r2,zero,801253c <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 8012534:	00bfffc4 	movi	r2,-1
 8012538:	00009b06 	br	80127a8 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 801253c:	e13feb0f 	ldh	r4,-84(fp)
 8012540:	e0ffeb0f 	ldh	r3,-84(fp)
 8012544:	008200b4 	movhi	r2,2050
 8012548:	10a5ec04 	addi	r2,r2,-26704
 801254c:	180691ba 	slli	r3,r3,6
 8012550:	10c5883a 	add	r2,r2,r3
 8012554:	10800584 	addi	r2,r2,22
 8012558:	1080000b 	ldhu	r2,0(r2)
 801255c:	10ffffcc 	andi	r3,r2,65535
 8012560:	008200b4 	movhi	r2,2050
 8012564:	10a5ec04 	addi	r2,r2,-26704
 8012568:	200891ba 	slli	r4,r4,6
 801256c:	1105883a 	add	r2,r2,r4
 8012570:	10800704 	addi	r2,r2,28
 8012574:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 8012578:	e0ffeb0f 	ldh	r3,-84(fp)
 801257c:	008200b4 	movhi	r2,2050
 8012580:	10a5ec04 	addi	r2,r2,-26704
 8012584:	180691ba 	slli	r3,r3,6
 8012588:	10c5883a 	add	r2,r2,r3
 801258c:	10800804 	addi	r2,r2,32
 8012590:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 8012594:	e0ffeb0f 	ldh	r3,-84(fp)
 8012598:	008200b4 	movhi	r2,2050
 801259c:	10a5ec04 	addi	r2,r2,-26704
 80125a0:	180691ba 	slli	r3,r3,6
 80125a4:	10c5883a 	add	r2,r2,r3
 80125a8:	10800904 	addi	r2,r2,36
 80125ac:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 80125b0:	e0ffeb0f 	ldh	r3,-84(fp)
 80125b4:	008200b4 	movhi	r2,2050
 80125b8:	10a5ec04 	addi	r2,r2,-26704
 80125bc:	180691ba 	slli	r3,r3,6
 80125c0:	10c5883a 	add	r2,r2,r3
 80125c4:	10800f04 	addi	r2,r2,60
 80125c8:	00c00044 	movi	r3,1
 80125cc:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
 80125d0:	e0ffeb0f 	ldh	r3,-84(fp)
 80125d4:	008200b4 	movhi	r2,2050
 80125d8:	10a5ec04 	addi	r2,r2,-26704
 80125dc:	180691ba 	slli	r3,r3,6
 80125e0:	10c5883a 	add	r2,r2,r3
 80125e4:	10800e04 	addi	r2,r2,56
 80125e8:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 80125ec:	e03fec15 	stw	zero,-80(fp)
 80125f0:	00004506 	br	8012708 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 80125f4:	e0ffeb0f 	ldh	r3,-84(fp)
 80125f8:	e0bfec17 	ldw	r2,-80(fp)
 80125fc:	18803f26 	beq	r3,r2,80126fc <alt_up_sd_card_fopen+0x2bc>
 8012600:	008200b4 	movhi	r2,2050
 8012604:	10a5ec04 	addi	r2,r2,-26704
 8012608:	e0ffec17 	ldw	r3,-80(fp)
 801260c:	180691ba 	slli	r3,r3,6
 8012610:	10c5883a 	add	r2,r2,r3
 8012614:	10800f04 	addi	r2,r2,60
 8012618:	10800017 	ldw	r2,0(r2)
 801261c:	10800058 	cmpnei	r2,r2,1
 8012620:	1000361e 	bne	r2,zero,80126fc <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 8012624:	e0ffeb0f 	ldh	r3,-84(fp)
 8012628:	008200b4 	movhi	r2,2050
 801262c:	10a5ec04 	addi	r2,r2,-26704
 8012630:	180691ba 	slli	r3,r3,6
 8012634:	10c5883a 	add	r2,r2,r3
 8012638:	10800a04 	addi	r2,r2,40
 801263c:	10c00017 	ldw	r3,0(r2)
 8012640:	008200b4 	movhi	r2,2050
 8012644:	10a5ec04 	addi	r2,r2,-26704
 8012648:	e13fec17 	ldw	r4,-80(fp)
 801264c:	200891ba 	slli	r4,r4,6
 8012650:	1105883a 	add	r2,r2,r4
 8012654:	10800a04 	addi	r2,r2,40
 8012658:	10800017 	ldw	r2,0(r2)
 801265c:	1880271e 	bne	r3,r2,80126fc <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 8012660:	e0ffeb0f 	ldh	r3,-84(fp)
 8012664:	008200b4 	movhi	r2,2050
 8012668:	10a5ec04 	addi	r2,r2,-26704
 801266c:	180691ba 	slli	r3,r3,6
 8012670:	10c5883a 	add	r2,r2,r3
 8012674:	10800b04 	addi	r2,r2,44
 8012678:	10c00017 	ldw	r3,0(r2)
 801267c:	008200b4 	movhi	r2,2050
 8012680:	10a5ec04 	addi	r2,r2,-26704
 8012684:	e13fec17 	ldw	r4,-80(fp)
 8012688:	200891ba 	slli	r4,r4,6
 801268c:	1105883a 	add	r2,r2,r4
 8012690:	10800b04 	addi	r2,r2,44
 8012694:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 8012698:	1880181e 	bne	r3,r2,80126fc <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
 801269c:	e0ffeb0f 	ldh	r3,-84(fp)
 80126a0:	008200b4 	movhi	r2,2050
 80126a4:	10a5ec04 	addi	r2,r2,-26704
 80126a8:	180691ba 	slli	r3,r3,6
 80126ac:	10c5883a 	add	r2,r2,r3
 80126b0:	10800c04 	addi	r2,r2,48
 80126b4:	1100000b 	ldhu	r4,0(r2)
 80126b8:	008200b4 	movhi	r2,2050
 80126bc:	10a5ec04 	addi	r2,r2,-26704
 80126c0:	e0ffec17 	ldw	r3,-80(fp)
 80126c4:	180691ba 	slli	r3,r3,6
 80126c8:	10c5883a 	add	r2,r2,r3
 80126cc:	10800c04 	addi	r2,r2,48
 80126d0:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 80126d4:	20ffffcc 	andi	r3,r4,65535
 80126d8:	18e0001c 	xori	r3,r3,32768
 80126dc:	18e00004 	addi	r3,r3,-32768
 80126e0:	10bfffcc 	andi	r2,r2,65535
 80126e4:	10a0001c 	xori	r2,r2,32768
 80126e8:	10a00004 	addi	r2,r2,-32768
 80126ec:	1880031e 	bne	r3,r2,80126fc <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 80126f0:	00bfff84 	movi	r2,-2
 80126f4:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 80126f8:	00002a06 	br	80127a4 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 80126fc:	e0bfec17 	ldw	r2,-80(fp)
 8012700:	10800044 	addi	r2,r2,1
 8012704:	e0bfec15 	stw	r2,-80(fp)
 8012708:	e0bfec17 	ldw	r2,-80(fp)
 801270c:	10800510 	cmplti	r2,r2,20
 8012710:	103fb81e 	bne	r2,zero,80125f4 <__alt_data_end+0xf80125f4>
 8012714:	00002306 	br	80127a4 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
 8012718:	e0bfff17 	ldw	r2,-4(fp)
 801271c:	10001f26 	beq	r2,zero,801279c <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 8012720:	e0bfeb0f 	ldh	r2,-84(fp)
 8012724:	100691ba 	slli	r3,r2,6
 8012728:	008200b4 	movhi	r2,2050
 801272c:	10a5ec04 	addi	r2,r2,-26704
 8012730:	1885883a 	add	r2,r3,r2
 8012734:	e0ffee04 	addi	r3,fp,-72
 8012738:	180d883a 	mov	r6,r3
 801273c:	100b883a 	mov	r5,r2
 8012740:	e13ffe17 	ldw	r4,-8(fp)
 8012744:	80119b40 	call	80119b4 <create_file>
 8012748:	10001126 	beq	r2,zero,8012790 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
 801274c:	e0ffeb0f 	ldh	r3,-84(fp)
 8012750:	008200b4 	movhi	r2,2050
 8012754:	10a5ec04 	addi	r2,r2,-26704
 8012758:	180691ba 	slli	r3,r3,6
 801275c:	10c5883a 	add	r2,r2,r3
 8012760:	10800f04 	addi	r2,r2,60
 8012764:	00c00044 	movi	r3,1
 8012768:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
 801276c:	e0ffeb0f 	ldh	r3,-84(fp)
 8012770:	008200b4 	movhi	r2,2050
 8012774:	10a5ec04 	addi	r2,r2,-26704
 8012778:	180691ba 	slli	r3,r3,6
 801277c:	10c5883a 	add	r2,r2,r3
 8012780:	10800e04 	addi	r2,r2,56
 8012784:	00c00044 	movi	r3,1
 8012788:	10c00015 	stw	r3,0(r2)
 801278c:	00000506 	br	80127a4 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 8012790:	00bfffc4 	movi	r2,-1
 8012794:	e0bfeb0d 	sth	r2,-84(fp)
 8012798:	00000206 	br	80127a4 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 801279c:	00bfffc4 	movi	r2,-1
 80127a0:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 80127a4:	e0bfeb0b 	ldhu	r2,-84(fp)
}
 80127a8:	e037883a 	mov	sp,fp
 80127ac:	dfc00117 	ldw	ra,4(sp)
 80127b0:	df000017 	ldw	fp,0(sp)
 80127b4:	dec00204 	addi	sp,sp,8
 80127b8:	f800283a 	ret

080127bc <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 80127bc:	defffd04 	addi	sp,sp,-12
 80127c0:	df000215 	stw	fp,8(sp)
 80127c4:	df000204 	addi	fp,sp,8
 80127c8:	2007883a 	mov	r3,r4
 80127cc:	2805883a 	mov	r2,r5
 80127d0:	e0fffe0d 	sth	r3,-8(fp)
 80127d4:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80127d8:	e0bffe0f 	ldh	r2,-8(fp)
 80127dc:	10001416 	blt	r2,zero,8012830 <alt_up_sd_card_set_attributes+0x74>
 80127e0:	e0bffe0f 	ldh	r2,-8(fp)
 80127e4:	10800508 	cmpgei	r2,r2,20
 80127e8:	1000111e 	bne	r2,zero,8012830 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 80127ec:	e0fffe0f 	ldh	r3,-8(fp)
 80127f0:	008200b4 	movhi	r2,2050
 80127f4:	10a5ec04 	addi	r2,r2,-26704
 80127f8:	180691ba 	slli	r3,r3,6
 80127fc:	10c5883a 	add	r2,r2,r3
 8012800:	10800f04 	addi	r2,r2,60
 8012804:	10800017 	ldw	r2,0(r2)
 8012808:	10000926 	beq	r2,zero,8012830 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 801280c:	e0fffe0f 	ldh	r3,-8(fp)
 8012810:	e0bfff0b 	ldhu	r2,-4(fp)
 8012814:	1009883a 	mov	r4,r2
 8012818:	008200b4 	movhi	r2,2050
 801281c:	10a5ec04 	addi	r2,r2,-26704
 8012820:	180691ba 	slli	r3,r3,6
 8012824:	10c5883a 	add	r2,r2,r3
 8012828:	108002c4 	addi	r2,r2,11
 801282c:	11000005 	stb	r4,0(r2)
        }
    }
}
 8012830:	0001883a 	nop
 8012834:	e037883a 	mov	sp,fp
 8012838:	df000017 	ldw	fp,0(sp)
 801283c:	dec00104 	addi	sp,sp,4
 8012840:	f800283a 	ret

08012844 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 8012844:	defffd04 	addi	sp,sp,-12
 8012848:	df000215 	stw	fp,8(sp)
 801284c:	df000204 	addi	fp,sp,8
 8012850:	2005883a 	mov	r2,r4
 8012854:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
 8012858:	00bfffc4 	movi	r2,-1
 801285c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 8012860:	e0bfff0f 	ldh	r2,-4(fp)
 8012864:	10001416 	blt	r2,zero,80128b8 <alt_up_sd_card_get_attributes+0x74>
 8012868:	e0bfff0f 	ldh	r2,-4(fp)
 801286c:	10800508 	cmpgei	r2,r2,20
 8012870:	1000111e 	bne	r2,zero,80128b8 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 8012874:	e0ffff0f 	ldh	r3,-4(fp)
 8012878:	008200b4 	movhi	r2,2050
 801287c:	10a5ec04 	addi	r2,r2,-26704
 8012880:	180691ba 	slli	r3,r3,6
 8012884:	10c5883a 	add	r2,r2,r3
 8012888:	10800f04 	addi	r2,r2,60
 801288c:	10800017 	ldw	r2,0(r2)
 8012890:	10000926 	beq	r2,zero,80128b8 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 8012894:	e0ffff0f 	ldh	r3,-4(fp)
 8012898:	008200b4 	movhi	r2,2050
 801289c:	10a5ec04 	addi	r2,r2,-26704
 80128a0:	180691ba 	slli	r3,r3,6
 80128a4:	10c5883a 	add	r2,r2,r3
 80128a8:	108002c4 	addi	r2,r2,11
 80128ac:	10800003 	ldbu	r2,0(r2)
 80128b0:	10803fcc 	andi	r2,r2,255
 80128b4:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 80128b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 80128bc:	e037883a 	mov	sp,fp
 80128c0:	df000017 	ldw	fp,0(sp)
 80128c4:	dec00104 	addi	sp,sp,4
 80128c8:	f800283a 	ret

080128cc <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 80128cc:	defffa04 	addi	sp,sp,-24
 80128d0:	dfc00515 	stw	ra,20(sp)
 80128d4:	df000415 	stw	fp,16(sp)
 80128d8:	df000404 	addi	fp,sp,16
 80128dc:	2005883a 	mov	r2,r4
 80128e0:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
 80128e4:	00bfffc4 	movi	r2,-1
 80128e8:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80128ec:	e0bfff0f 	ldh	r2,-4(fp)
 80128f0:	1000ce16 	blt	r2,zero,8012c2c <alt_up_sd_card_read+0x360>
 80128f4:	e0bfff0f 	ldh	r2,-4(fp)
 80128f8:	10800508 	cmpgei	r2,r2,20
 80128fc:	1000cb1e 	bne	r2,zero,8012c2c <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
 8012900:	e0ffff0f 	ldh	r3,-4(fp)
 8012904:	008200b4 	movhi	r2,2050
 8012908:	10a5ec04 	addi	r2,r2,-26704
 801290c:	180691ba 	slli	r3,r3,6
 8012910:	10c5883a 	add	r2,r2,r3
 8012914:	10800f04 	addi	r2,r2,60
 8012918:	10800017 	ldw	r2,0(r2)
 801291c:	1000c326 	beq	r2,zero,8012c2c <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 8012920:	e0ffff0f 	ldh	r3,-4(fp)
 8012924:	008200b4 	movhi	r2,2050
 8012928:	10a5ec04 	addi	r2,r2,-26704
 801292c:	180691ba 	slli	r3,r3,6
 8012930:	10c5883a 	add	r2,r2,r3
 8012934:	10800904 	addi	r2,r2,36
 8012938:	10c00017 	ldw	r3,0(r2)
 801293c:	e13fff0f 	ldh	r4,-4(fp)
 8012940:	008200b4 	movhi	r2,2050
 8012944:	10a5ec04 	addi	r2,r2,-26704
 8012948:	200891ba 	slli	r4,r4,6
 801294c:	1105883a 	add	r2,r2,r4
 8012950:	10800604 	addi	r2,r2,24
 8012954:	10800017 	ldw	r2,0(r2)
 8012958:	1880b42e 	bgeu	r3,r2,8012c2c <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 801295c:	008200b4 	movhi	r2,2050
 8012960:	10a5d704 	addi	r2,r2,-26788
 8012964:	10c01417 	ldw	r3,80(r2)
 8012968:	e13fff0f 	ldh	r4,-4(fp)
 801296c:	008200b4 	movhi	r2,2050
 8012970:	10a5ec04 	addi	r2,r2,-26704
 8012974:	200891ba 	slli	r4,r4,6
 8012978:	1105883a 	add	r2,r2,r4
 801297c:	10800704 	addi	r2,r2,28
 8012980:	10800017 	ldw	r2,0(r2)
 8012984:	113fff84 	addi	r4,r2,-2
 8012988:	008200b4 	movhi	r2,2050
 801298c:	10a5d704 	addi	r2,r2,-26788
 8012990:	10800383 	ldbu	r2,14(r2)
 8012994:	10803fcc 	andi	r2,r2,255
 8012998:	2085383a 	mul	r2,r4,r2
 801299c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
 80129a0:	e13fff0f 	ldh	r4,-4(fp)
 80129a4:	008200b4 	movhi	r2,2050
 80129a8:	10a5ec04 	addi	r2,r2,-26704
 80129ac:	200891ba 	slli	r4,r4,6
 80129b0:	1105883a 	add	r2,r2,r4
 80129b4:	10800804 	addi	r2,r2,32
 80129b8:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80129bc:	1885883a 	add	r2,r3,r2
 80129c0:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 80129c4:	e0ffff0f 	ldh	r3,-4(fp)
 80129c8:	008200b4 	movhi	r2,2050
 80129cc:	10a5ec04 	addi	r2,r2,-26704
 80129d0:	180691ba 	slli	r3,r3,6
 80129d4:	10c5883a 	add	r2,r2,r3
 80129d8:	10800904 	addi	r2,r2,36
 80129dc:	10800017 	ldw	r2,0(r2)
 80129e0:	10006826 	beq	r2,zero,8012b84 <alt_up_sd_card_read+0x2b8>
 80129e4:	e0ffff0f 	ldh	r3,-4(fp)
 80129e8:	008200b4 	movhi	r2,2050
 80129ec:	10a5ec04 	addi	r2,r2,-26704
 80129f0:	180691ba 	slli	r3,r3,6
 80129f4:	10c5883a 	add	r2,r2,r3
 80129f8:	10800904 	addi	r2,r2,36
 80129fc:	10800017 	ldw	r2,0(r2)
 8012a00:	10807fcc 	andi	r2,r2,511
 8012a04:	10005f1e 	bne	r2,zero,8012b84 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8012a08:	e0ffff0f 	ldh	r3,-4(fp)
 8012a0c:	008200b4 	movhi	r2,2050
 8012a10:	10a5ec04 	addi	r2,r2,-26704
 8012a14:	180691ba 	slli	r3,r3,6
 8012a18:	10c5883a 	add	r2,r2,r3
 8012a1c:	10800804 	addi	r2,r2,32
 8012a20:	10c00017 	ldw	r3,0(r2)
 8012a24:	008200b4 	movhi	r2,2050
 8012a28:	10a5d704 	addi	r2,r2,-26788
 8012a2c:	10800383 	ldbu	r2,14(r2)
 8012a30:	10803fcc 	andi	r2,r2,255
 8012a34:	10bfffc4 	addi	r2,r2,-1
 8012a38:	1880401e 	bne	r3,r2,8012b3c <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 8012a3c:	e0ffff0f 	ldh	r3,-4(fp)
 8012a40:	008200b4 	movhi	r2,2050
 8012a44:	10a5ec04 	addi	r2,r2,-26704
 8012a48:	180691ba 	slli	r3,r3,6
 8012a4c:	10c5883a 	add	r2,r2,r3
 8012a50:	10800704 	addi	r2,r2,28
 8012a54:	10800017 	ldw	r2,0(r2)
 8012a58:	e0fffe04 	addi	r3,fp,-8
 8012a5c:	180b883a 	mov	r5,r3
 8012a60:	1009883a 	mov	r4,r2
 8012a64:	800f2e00 	call	800f2e0 <get_cluster_flag>
 8012a68:	10003226 	beq	r2,zero,8012b34 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 8012a6c:	e0bffe0b 	ldhu	r2,-8(fp)
 8012a70:	10bfffcc 	andi	r2,r2,65535
 8012a74:	10fffe0c 	andi	r3,r2,65528
 8012a78:	00bffe14 	movui	r2,65528
 8012a7c:	1880021e 	bne	r3,r2,8012a88 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
 8012a80:	00bfffc4 	movi	r2,-1
 8012a84:	00006a06 	br	8012c30 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 8012a88:	e13fff0f 	ldh	r4,-4(fp)
 8012a8c:	e0bffe0b 	ldhu	r2,-8(fp)
 8012a90:	10ffffcc 	andi	r3,r2,65535
 8012a94:	008200b4 	movhi	r2,2050
 8012a98:	10a5ec04 	addi	r2,r2,-26704
 8012a9c:	200891ba 	slli	r4,r4,6
 8012aa0:	1105883a 	add	r2,r2,r4
 8012aa4:	10800704 	addi	r2,r2,28
 8012aa8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 8012aac:	e0ffff0f 	ldh	r3,-4(fp)
 8012ab0:	008200b4 	movhi	r2,2050
 8012ab4:	10a5ec04 	addi	r2,r2,-26704
 8012ab8:	180691ba 	slli	r3,r3,6
 8012abc:	10c5883a 	add	r2,r2,r3
 8012ac0:	10800804 	addi	r2,r2,32
 8012ac4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012ac8:	008200b4 	movhi	r2,2050
 8012acc:	10a5d704 	addi	r2,r2,-26788
 8012ad0:	10c01417 	ldw	r3,80(r2)
 8012ad4:	e13fff0f 	ldh	r4,-4(fp)
 8012ad8:	008200b4 	movhi	r2,2050
 8012adc:	10a5ec04 	addi	r2,r2,-26704
 8012ae0:	200891ba 	slli	r4,r4,6
 8012ae4:	1105883a 	add	r2,r2,r4
 8012ae8:	10800704 	addi	r2,r2,28
 8012aec:	10800017 	ldw	r2,0(r2)
 8012af0:	113fff84 	addi	r4,r2,-2
 8012af4:	008200b4 	movhi	r2,2050
 8012af8:	10a5d704 	addi	r2,r2,-26788
 8012afc:	10800383 	ldbu	r2,14(r2)
 8012b00:	10803fcc 	andi	r2,r2,255
 8012b04:	2085383a 	mul	r2,r4,r2
 8012b08:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 8012b0c:	e13fff0f 	ldh	r4,-4(fp)
 8012b10:	008200b4 	movhi	r2,2050
 8012b14:	10a5ec04 	addi	r2,r2,-26704
 8012b18:	200891ba 	slli	r4,r4,6
 8012b1c:	1105883a 	add	r2,r2,r4
 8012b20:	10800804 	addi	r2,r2,32
 8012b24:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012b28:	1885883a 	add	r2,r3,r2
 8012b2c:	e0bffd15 	stw	r2,-12(fp)
 8012b30:	00001406 	br	8012b84 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 8012b34:	00bfff84 	movi	r2,-2
 8012b38:	00003d06 	br	8012c30 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 8012b3c:	e13fff0f 	ldh	r4,-4(fp)
 8012b40:	e0ffff0f 	ldh	r3,-4(fp)
 8012b44:	008200b4 	movhi	r2,2050
 8012b48:	10a5ec04 	addi	r2,r2,-26704
 8012b4c:	180691ba 	slli	r3,r3,6
 8012b50:	10c5883a 	add	r2,r2,r3
 8012b54:	10800804 	addi	r2,r2,32
 8012b58:	10800017 	ldw	r2,0(r2)
 8012b5c:	10c00044 	addi	r3,r2,1
 8012b60:	008200b4 	movhi	r2,2050
 8012b64:	10a5ec04 	addi	r2,r2,-26704
 8012b68:	200891ba 	slli	r4,r4,6
 8012b6c:	1105883a 	add	r2,r2,r4
 8012b70:	10800804 	addi	r2,r2,32
 8012b74:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 8012b78:	e0bffd17 	ldw	r2,-12(fp)
 8012b7c:	10800044 	addi	r2,r2,1
 8012b80:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 8012b84:	d0e6f417 	ldw	r3,-25648(gp)
 8012b88:	e0bffd17 	ldw	r2,-12(fp)
 8012b8c:	1885883a 	add	r2,r3,r2
 8012b90:	1007883a 	mov	r3,r2
 8012b94:	d0a6f817 	ldw	r2,-25632(gp)
 8012b98:	18800726 	beq	r3,r2,8012bb8 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 8012b9c:	d0a6f417 	ldw	r2,-25648(gp)
 8012ba0:	100b883a 	mov	r5,r2
 8012ba4:	e13ffd17 	ldw	r4,-12(fp)
 8012ba8:	800f2080 	call	800f208 <Read_Sector_Data>
 8012bac:	1000021e 	bne	r2,zero,8012bb8 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
 8012bb0:	00bfff84 	movi	r2,-2
 8012bb4:	00001e06 	br	8012c30 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 8012bb8:	d0e6f317 	ldw	r3,-25652(gp)
 8012bbc:	e13fff0f 	ldh	r4,-4(fp)
 8012bc0:	008200b4 	movhi	r2,2050
 8012bc4:	10a5ec04 	addi	r2,r2,-26704
 8012bc8:	200891ba 	slli	r4,r4,6
 8012bcc:	1105883a 	add	r2,r2,r4
 8012bd0:	10800904 	addi	r2,r2,36
 8012bd4:	10800017 	ldw	r2,0(r2)
 8012bd8:	10807fcc 	andi	r2,r2,511
 8012bdc:	1885883a 	add	r2,r3,r2
 8012be0:	10800023 	ldbuio	r2,0(r2)
 8012be4:	10803fcc 	andi	r2,r2,255
 8012be8:	10803fcc 	andi	r2,r2,255
 8012bec:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 8012bf0:	e13fff0f 	ldh	r4,-4(fp)
 8012bf4:	e0ffff0f 	ldh	r3,-4(fp)
 8012bf8:	008200b4 	movhi	r2,2050
 8012bfc:	10a5ec04 	addi	r2,r2,-26704
 8012c00:	180691ba 	slli	r3,r3,6
 8012c04:	10c5883a 	add	r2,r2,r3
 8012c08:	10800904 	addi	r2,r2,36
 8012c0c:	10800017 	ldw	r2,0(r2)
 8012c10:	10c00044 	addi	r3,r2,1
 8012c14:	008200b4 	movhi	r2,2050
 8012c18:	10a5ec04 	addi	r2,r2,-26704
 8012c1c:	200891ba 	slli	r4,r4,6
 8012c20:	1105883a 	add	r2,r2,r4
 8012c24:	10800904 	addi	r2,r2,36
 8012c28:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
 8012c2c:	e0bffc0b 	ldhu	r2,-16(fp)
}
 8012c30:	e037883a 	mov	sp,fp
 8012c34:	dfc00117 	ldw	ra,4(sp)
 8012c38:	df000017 	ldw	fp,0(sp)
 8012c3c:	dec00204 	addi	sp,sp,8
 8012c40:	f800283a 	ret

08012c44 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 8012c44:	defff704 	addi	sp,sp,-36
 8012c48:	dfc00815 	stw	ra,32(sp)
 8012c4c:	df000715 	stw	fp,28(sp)
 8012c50:	dc000615 	stw	r16,24(sp)
 8012c54:	df000704 	addi	fp,sp,28
 8012c58:	2007883a 	mov	r3,r4
 8012c5c:	2805883a 	mov	r2,r5
 8012c60:	e0fffd0d 	sth	r3,-12(fp)
 8012c64:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
 8012c68:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 8012c6c:	e0bffd0f 	ldh	r2,-12(fp)
 8012c70:	10017a16 	blt	r2,zero,801325c <alt_up_sd_card_write+0x618>
 8012c74:	e0bffd0f 	ldh	r2,-12(fp)
 8012c78:	10800508 	cmpgei	r2,r2,20
 8012c7c:	1001771e 	bne	r2,zero,801325c <alt_up_sd_card_write+0x618>
    {
        if (active_files[file_handle].in_use)
 8012c80:	e0fffd0f 	ldh	r3,-12(fp)
 8012c84:	008200b4 	movhi	r2,2050
 8012c88:	10a5ec04 	addi	r2,r2,-26704
 8012c8c:	180691ba 	slli	r3,r3,6
 8012c90:	10c5883a 	add	r2,r2,r3
 8012c94:	10800f04 	addi	r2,r2,60
 8012c98:	10800017 	ldw	r2,0(r2)
 8012c9c:	10016f26 	beq	r2,zero,801325c <alt_up_sd_card_write+0x618>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012ca0:	008200b4 	movhi	r2,2050
 8012ca4:	10a5d704 	addi	r2,r2,-26788
 8012ca8:	10c01417 	ldw	r3,80(r2)
 8012cac:	e13ffd0f 	ldh	r4,-12(fp)
 8012cb0:	008200b4 	movhi	r2,2050
 8012cb4:	10a5ec04 	addi	r2,r2,-26704
 8012cb8:	200891ba 	slli	r4,r4,6
 8012cbc:	1105883a 	add	r2,r2,r4
 8012cc0:	10800704 	addi	r2,r2,28
 8012cc4:	10800017 	ldw	r2,0(r2)
 8012cc8:	113fff84 	addi	r4,r2,-2
 8012ccc:	008200b4 	movhi	r2,2050
 8012cd0:	10a5d704 	addi	r2,r2,-26788
 8012cd4:	10800383 	ldbu	r2,14(r2)
 8012cd8:	10803fcc 	andi	r2,r2,255
 8012cdc:	2085383a 	mul	r2,r4,r2
 8012ce0:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
 8012ce4:	e13ffd0f 	ldh	r4,-12(fp)
 8012ce8:	008200b4 	movhi	r2,2050
 8012cec:	10a5ec04 	addi	r2,r2,-26704
 8012cf0:	200891ba 	slli	r4,r4,6
 8012cf4:	1105883a 	add	r2,r2,r4
 8012cf8:	10800804 	addi	r2,r2,32
 8012cfc:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012d00:	1885883a 	add	r2,r3,r2
 8012d04:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 8012d08:	e0fffd0f 	ldh	r3,-12(fp)
 8012d0c:	008200b4 	movhi	r2,2050
 8012d10:	10a5ec04 	addi	r2,r2,-26704
 8012d14:	180691ba 	slli	r3,r3,6
 8012d18:	10c5883a 	add	r2,r2,r3
 8012d1c:	10800904 	addi	r2,r2,36
 8012d20:	10c00017 	ldw	r3,0(r2)
 8012d24:	008200b4 	movhi	r2,2050
 8012d28:	10a5d704 	addi	r2,r2,-26788
 8012d2c:	1080030b 	ldhu	r2,12(r2)
 8012d30:	10bfffcc 	andi	r2,r2,65535
 8012d34:	100b883a 	mov	r5,r2
 8012d38:	1809883a 	mov	r4,r3
 8012d3c:	800bdbc0 	call	800bdbc <__umodsi3>
 8012d40:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 8012d44:	e0fffd0f 	ldh	r3,-12(fp)
 8012d48:	008200b4 	movhi	r2,2050
 8012d4c:	10a5ec04 	addi	r2,r2,-26704
 8012d50:	180691ba 	slli	r3,r3,6
 8012d54:	10c5883a 	add	r2,r2,r3
 8012d58:	10800904 	addi	r2,r2,36
 8012d5c:	10c00017 	ldw	r3,0(r2)
 8012d60:	e13ffd0f 	ldh	r4,-12(fp)
 8012d64:	008200b4 	movhi	r2,2050
 8012d68:	10a5ec04 	addi	r2,r2,-26704
 8012d6c:	200891ba 	slli	r4,r4,6
 8012d70:	1105883a 	add	r2,r2,r4
 8012d74:	10800604 	addi	r2,r2,24
 8012d78:	10800017 	ldw	r2,0(r2)
 8012d7c:	1880672e 	bgeu	r3,r2,8012f1c <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 8012d80:	e0fffd0f 	ldh	r3,-12(fp)
 8012d84:	008200b4 	movhi	r2,2050
 8012d88:	10a5ec04 	addi	r2,r2,-26704
 8012d8c:	180691ba 	slli	r3,r3,6
 8012d90:	10c5883a 	add	r2,r2,r3
 8012d94:	10800904 	addi	r2,r2,36
 8012d98:	10800017 	ldw	r2,0(r2)
 8012d9c:	1000e426 	beq	r2,zero,8013130 <alt_up_sd_card_write+0x4ec>
 8012da0:	e0bffb0f 	ldh	r2,-20(fp)
 8012da4:	1000e21e 	bne	r2,zero,8013130 <alt_up_sd_card_write+0x4ec>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8012da8:	e0fffd0f 	ldh	r3,-12(fp)
 8012dac:	008200b4 	movhi	r2,2050
 8012db0:	10a5ec04 	addi	r2,r2,-26704
 8012db4:	180691ba 	slli	r3,r3,6
 8012db8:	10c5883a 	add	r2,r2,r3
 8012dbc:	10800804 	addi	r2,r2,32
 8012dc0:	10c00017 	ldw	r3,0(r2)
 8012dc4:	008200b4 	movhi	r2,2050
 8012dc8:	10a5d704 	addi	r2,r2,-26788
 8012dcc:	10800383 	ldbu	r2,14(r2)
 8012dd0:	10803fcc 	andi	r2,r2,255
 8012dd4:	10bfffc4 	addi	r2,r2,-1
 8012dd8:	18803d1e 	bne	r3,r2,8012ed0 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 8012ddc:	e0fffd0f 	ldh	r3,-12(fp)
 8012de0:	008200b4 	movhi	r2,2050
 8012de4:	10a5ec04 	addi	r2,r2,-26704
 8012de8:	180691ba 	slli	r3,r3,6
 8012dec:	10c5883a 	add	r2,r2,r3
 8012df0:	10800704 	addi	r2,r2,28
 8012df4:	10800017 	ldw	r2,0(r2)
 8012df8:	e0fffb84 	addi	r3,fp,-18
 8012dfc:	180b883a 	mov	r5,r3
 8012e00:	1009883a 	mov	r4,r2
 8012e04:	800f2e00 	call	800f2e0 <get_cluster_flag>
 8012e08:	10002f26 	beq	r2,zero,8012ec8 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
 8012e0c:	e0bffb8b 	ldhu	r2,-18(fp)
 8012e10:	10bfffcc 	andi	r2,r2,65535
 8012e14:	10bffe28 	cmpgeui	r2,r2,65528
 8012e18:	1000c51e 	bne	r2,zero,8013130 <alt_up_sd_card_write+0x4ec>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 8012e1c:	e13ffd0f 	ldh	r4,-12(fp)
 8012e20:	e0bffb8b 	ldhu	r2,-18(fp)
 8012e24:	10ffffcc 	andi	r3,r2,65535
 8012e28:	008200b4 	movhi	r2,2050
 8012e2c:	10a5ec04 	addi	r2,r2,-26704
 8012e30:	200891ba 	slli	r4,r4,6
 8012e34:	1105883a 	add	r2,r2,r4
 8012e38:	10800704 	addi	r2,r2,28
 8012e3c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 8012e40:	e0fffd0f 	ldh	r3,-12(fp)
 8012e44:	008200b4 	movhi	r2,2050
 8012e48:	10a5ec04 	addi	r2,r2,-26704
 8012e4c:	180691ba 	slli	r3,r3,6
 8012e50:	10c5883a 	add	r2,r2,r3
 8012e54:	10800804 	addi	r2,r2,32
 8012e58:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012e5c:	008200b4 	movhi	r2,2050
 8012e60:	10a5d704 	addi	r2,r2,-26788
 8012e64:	10c01417 	ldw	r3,80(r2)
 8012e68:	e13ffd0f 	ldh	r4,-12(fp)
 8012e6c:	008200b4 	movhi	r2,2050
 8012e70:	10a5ec04 	addi	r2,r2,-26704
 8012e74:	200891ba 	slli	r4,r4,6
 8012e78:	1105883a 	add	r2,r2,r4
 8012e7c:	10800704 	addi	r2,r2,28
 8012e80:	10800017 	ldw	r2,0(r2)
 8012e84:	113fff84 	addi	r4,r2,-2
 8012e88:	008200b4 	movhi	r2,2050
 8012e8c:	10a5d704 	addi	r2,r2,-26788
 8012e90:	10800383 	ldbu	r2,14(r2)
 8012e94:	10803fcc 	andi	r2,r2,255
 8012e98:	2085383a 	mul	r2,r4,r2
 8012e9c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 8012ea0:	e13ffd0f 	ldh	r4,-12(fp)
 8012ea4:	008200b4 	movhi	r2,2050
 8012ea8:	10a5ec04 	addi	r2,r2,-26704
 8012eac:	200891ba 	slli	r4,r4,6
 8012eb0:	1105883a 	add	r2,r2,r4
 8012eb4:	10800804 	addi	r2,r2,32
 8012eb8:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8012ebc:	1885883a 	add	r2,r3,r2
 8012ec0:	e0bffa15 	stw	r2,-24(fp)
 8012ec4:	00009a06 	br	8013130 <alt_up_sd_card_write+0x4ec>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 8012ec8:	0005883a 	mov	r2,zero
 8012ecc:	0000e406 	br	8013260 <alt_up_sd_card_write+0x61c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 8012ed0:	e13ffd0f 	ldh	r4,-12(fp)
 8012ed4:	e0fffd0f 	ldh	r3,-12(fp)
 8012ed8:	008200b4 	movhi	r2,2050
 8012edc:	10a5ec04 	addi	r2,r2,-26704
 8012ee0:	180691ba 	slli	r3,r3,6
 8012ee4:	10c5883a 	add	r2,r2,r3
 8012ee8:	10800804 	addi	r2,r2,32
 8012eec:	10800017 	ldw	r2,0(r2)
 8012ef0:	10c00044 	addi	r3,r2,1
 8012ef4:	008200b4 	movhi	r2,2050
 8012ef8:	10a5ec04 	addi	r2,r2,-26704
 8012efc:	200891ba 	slli	r4,r4,6
 8012f00:	1105883a 	add	r2,r2,r4
 8012f04:	10800804 	addi	r2,r2,32
 8012f08:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 8012f0c:	e0bffa17 	ldw	r2,-24(fp)
 8012f10:	10800044 	addi	r2,r2,1
 8012f14:	e0bffa15 	stw	r2,-24(fp)
 8012f18:	00008506 	br	8013130 <alt_up_sd_card_write+0x4ec>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 8012f1c:	e0fffd0f 	ldh	r3,-12(fp)
 8012f20:	008200b4 	movhi	r2,2050
 8012f24:	10a5ec04 	addi	r2,r2,-26704
 8012f28:	180691ba 	slli	r3,r3,6
 8012f2c:	10c5883a 	add	r2,r2,r3
 8012f30:	10800904 	addi	r2,r2,36
 8012f34:	10800017 	ldw	r2,0(r2)
 8012f38:	10007d26 	beq	r2,zero,8013130 <alt_up_sd_card_write+0x4ec>
 8012f3c:	e0bffb0f 	ldh	r2,-20(fp)
 8012f40:	10007b1e 	bne	r2,zero,8013130 <alt_up_sd_card_write+0x4ec>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8012f44:	e0fffd0f 	ldh	r3,-12(fp)
 8012f48:	008200b4 	movhi	r2,2050
 8012f4c:	10a5ec04 	addi	r2,r2,-26704
 8012f50:	180691ba 	slli	r3,r3,6
 8012f54:	10c5883a 	add	r2,r2,r3
 8012f58:	10800804 	addi	r2,r2,32
 8012f5c:	10c00017 	ldw	r3,0(r2)
 8012f60:	008200b4 	movhi	r2,2050
 8012f64:	10a5d704 	addi	r2,r2,-26788
 8012f68:	10800383 	ldbu	r2,14(r2)
 8012f6c:	10803fcc 	andi	r2,r2,255
 8012f70:	10bfffc4 	addi	r2,r2,-1
 8012f74:	18803e1e 	bne	r3,r2,8013070 <alt_up_sd_card_write+0x42c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 8012f78:	e0bffc04 	addi	r2,fp,-16
 8012f7c:	1009883a 	mov	r4,r2
 8012f80:	80112ec0 	call	80112ec <find_first_empty_cluster>
 8012f84:	10003826 	beq	r2,zero,8013068 <alt_up_sd_card_write+0x424>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 8012f88:	e0fffd0f 	ldh	r3,-12(fp)
 8012f8c:	008200b4 	movhi	r2,2050
 8012f90:	10a5ec04 	addi	r2,r2,-26704
 8012f94:	180691ba 	slli	r3,r3,6
 8012f98:	10c5883a 	add	r2,r2,r3
 8012f9c:	10800704 	addi	r2,r2,28
 8012fa0:	10800017 	ldw	r2,0(r2)
 8012fa4:	e0fffc17 	ldw	r3,-16(fp)
 8012fa8:	18ffffcc 	andi	r3,r3,65535
 8012fac:	18e0001c 	xori	r3,r3,32768
 8012fb0:	18e00004 	addi	r3,r3,-32768
 8012fb4:	01800044 	movi	r6,1
 8012fb8:	180b883a 	mov	r5,r3
 8012fbc:	1009883a 	mov	r4,r2
 8012fc0:	800f3940 	call	800f394 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 8012fc4:	e0bffc17 	ldw	r2,-16(fp)
 8012fc8:	01800044 	movi	r6,1
 8012fcc:	017fffc4 	movi	r5,-1
 8012fd0:	1009883a 	mov	r4,r2
 8012fd4:	800f3940 	call	800f394 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 8012fd8:	e0fffd0f 	ldh	r3,-12(fp)
 8012fdc:	008200b4 	movhi	r2,2050
 8012fe0:	10a5ec04 	addi	r2,r2,-26704
 8012fe4:	180691ba 	slli	r3,r3,6
 8012fe8:	10c5883a 	add	r2,r2,r3
 8012fec:	10800704 	addi	r2,r2,28
 8012ff0:	10800017 	ldw	r2,0(r2)
 8012ff4:	e0fffc17 	ldw	r3,-16(fp)
 8012ff8:	18ffffcc 	andi	r3,r3,65535
 8012ffc:	18e0001c 	xori	r3,r3,32768
 8013000:	18e00004 	addi	r3,r3,-32768
 8013004:	000d883a 	mov	r6,zero
 8013008:	180b883a 	mov	r5,r3
 801300c:	1009883a 	mov	r4,r2
 8013010:	800f3940 	call	800f394 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 8013014:	e0bffc17 	ldw	r2,-16(fp)
 8013018:	000d883a 	mov	r6,zero
 801301c:	017fffc4 	movi	r5,-1
 8013020:	1009883a 	mov	r4,r2
 8013024:	800f3940 	call	800f394 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 8013028:	e13ffd0f 	ldh	r4,-12(fp)
 801302c:	e0fffc17 	ldw	r3,-16(fp)
 8013030:	008200b4 	movhi	r2,2050
 8013034:	10a5ec04 	addi	r2,r2,-26704
 8013038:	200891ba 	slli	r4,r4,6
 801303c:	1105883a 	add	r2,r2,r4
 8013040:	10800704 	addi	r2,r2,28
 8013044:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 8013048:	e0fffd0f 	ldh	r3,-12(fp)
 801304c:	008200b4 	movhi	r2,2050
 8013050:	10a5ec04 	addi	r2,r2,-26704
 8013054:	180691ba 	slli	r3,r3,6
 8013058:	10c5883a 	add	r2,r2,r3
 801305c:	10800804 	addi	r2,r2,32
 8013060:	10000015 	stw	zero,0(r2)
 8013064:	00001806 	br	80130c8 <alt_up_sd_card_write+0x484>
						}
						else
						{
							return false;
 8013068:	0005883a 	mov	r2,zero
 801306c:	00007c06 	br	8013260 <alt_up_sd_card_write+0x61c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 8013070:	e43ffd0f 	ldh	r16,-12(fp)
 8013074:	e0fffd0f 	ldh	r3,-12(fp)
 8013078:	008200b4 	movhi	r2,2050
 801307c:	10a5ec04 	addi	r2,r2,-26704
 8013080:	180691ba 	slli	r3,r3,6
 8013084:	10c5883a 	add	r2,r2,r3
 8013088:	10800904 	addi	r2,r2,36
 801308c:	10c00017 	ldw	r3,0(r2)
 8013090:	008200b4 	movhi	r2,2050
 8013094:	10a5d704 	addi	r2,r2,-26788
 8013098:	1080030b 	ldhu	r2,12(r2)
 801309c:	10bfffcc 	andi	r2,r2,65535
 80130a0:	100b883a 	mov	r5,r2
 80130a4:	1809883a 	mov	r4,r3
 80130a8:	800bd580 	call	800bd58 <__udivsi3>
 80130ac:	1009883a 	mov	r4,r2
 80130b0:	008200b4 	movhi	r2,2050
 80130b4:	10a5ec04 	addi	r2,r2,-26704
 80130b8:	800691ba 	slli	r3,r16,6
 80130bc:	10c5883a 	add	r2,r2,r3
 80130c0:	10800804 	addi	r2,r2,32
 80130c4:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80130c8:	008200b4 	movhi	r2,2050
 80130cc:	10a5d704 	addi	r2,r2,-26788
 80130d0:	10c01417 	ldw	r3,80(r2)
 80130d4:	e13ffd0f 	ldh	r4,-12(fp)
 80130d8:	008200b4 	movhi	r2,2050
 80130dc:	10a5ec04 	addi	r2,r2,-26704
 80130e0:	200891ba 	slli	r4,r4,6
 80130e4:	1105883a 	add	r2,r2,r4
 80130e8:	10800704 	addi	r2,r2,28
 80130ec:	10800017 	ldw	r2,0(r2)
 80130f0:	113fff84 	addi	r4,r2,-2
 80130f4:	008200b4 	movhi	r2,2050
 80130f8:	10a5d704 	addi	r2,r2,-26788
 80130fc:	10800383 	ldbu	r2,14(r2)
 8013100:	10803fcc 	andi	r2,r2,255
 8013104:	2085383a 	mul	r2,r4,r2
 8013108:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
 801310c:	e13ffd0f 	ldh	r4,-12(fp)
 8013110:	008200b4 	movhi	r2,2050
 8013114:	10a5ec04 	addi	r2,r2,-26704
 8013118:	200891ba 	slli	r4,r4,6
 801311c:	1105883a 	add	r2,r2,r4
 8013120:	10800804 	addi	r2,r2,32
 8013124:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8013128:	1885883a 	add	r2,r3,r2
 801312c:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 8013130:	d0e6f417 	ldw	r3,-25648(gp)
 8013134:	e0bffa17 	ldw	r2,-24(fp)
 8013138:	1885883a 	add	r2,r3,r2
 801313c:	1007883a 	mov	r3,r2
 8013140:	d0a6f817 	ldw	r2,-25632(gp)
 8013144:	18800726 	beq	r3,r2,8013164 <alt_up_sd_card_write+0x520>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 8013148:	d0a6f417 	ldw	r2,-25648(gp)
 801314c:	100b883a 	mov	r5,r2
 8013150:	e13ffa17 	ldw	r4,-24(fp)
 8013154:	800f2080 	call	800f208 <Read_Sector_Data>
 8013158:	1000021e 	bne	r2,zero,8013164 <alt_up_sd_card_write+0x520>
                {
					return false;
 801315c:	0005883a 	mov	r2,zero
 8013160:	00003f06 	br	8013260 <alt_up_sd_card_write+0x61c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 8013164:	d0e6f317 	ldw	r3,-25652(gp)
 8013168:	e0bffb0f 	ldh	r2,-20(fp)
 801316c:	1885883a 	add	r2,r3,r2
 8013170:	e0fffe07 	ldb	r3,-8(fp)
 8013174:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 8013178:	e13ffd0f 	ldh	r4,-12(fp)
 801317c:	e0fffd0f 	ldh	r3,-12(fp)
 8013180:	008200b4 	movhi	r2,2050
 8013184:	10a5ec04 	addi	r2,r2,-26704
 8013188:	180691ba 	slli	r3,r3,6
 801318c:	10c5883a 	add	r2,r2,r3
 8013190:	10800904 	addi	r2,r2,36
 8013194:	10800017 	ldw	r2,0(r2)
 8013198:	10c00044 	addi	r3,r2,1
 801319c:	008200b4 	movhi	r2,2050
 80131a0:	10a5ec04 	addi	r2,r2,-26704
 80131a4:	200891ba 	slli	r4,r4,6
 80131a8:	1105883a 	add	r2,r2,r4
 80131ac:	10800904 	addi	r2,r2,36
 80131b0:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 80131b4:	e0fffd0f 	ldh	r3,-12(fp)
 80131b8:	008200b4 	movhi	r2,2050
 80131bc:	10a5ec04 	addi	r2,r2,-26704
 80131c0:	180691ba 	slli	r3,r3,6
 80131c4:	10c5883a 	add	r2,r2,r3
 80131c8:	10800904 	addi	r2,r2,36
 80131cc:	10c00017 	ldw	r3,0(r2)
 80131d0:	e13ffd0f 	ldh	r4,-12(fp)
 80131d4:	008200b4 	movhi	r2,2050
 80131d8:	10a5ec04 	addi	r2,r2,-26704
 80131dc:	200891ba 	slli	r4,r4,6
 80131e0:	1105883a 	add	r2,r2,r4
 80131e4:	10800604 	addi	r2,r2,24
 80131e8:	10800017 	ldw	r2,0(r2)
 80131ec:	18801736 	bltu	r3,r2,801324c <alt_up_sd_card_write+0x608>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 80131f0:	e13ffd0f 	ldh	r4,-12(fp)
 80131f4:	e0fffd0f 	ldh	r3,-12(fp)
 80131f8:	008200b4 	movhi	r2,2050
 80131fc:	10a5ec04 	addi	r2,r2,-26704
 8013200:	180691ba 	slli	r3,r3,6
 8013204:	10c5883a 	add	r2,r2,r3
 8013208:	10800604 	addi	r2,r2,24
 801320c:	10800017 	ldw	r2,0(r2)
 8013210:	10c00044 	addi	r3,r2,1
 8013214:	008200b4 	movhi	r2,2050
 8013218:	10a5ec04 	addi	r2,r2,-26704
 801321c:	200891ba 	slli	r4,r4,6
 8013220:	1105883a 	add	r2,r2,r4
 8013224:	10800604 	addi	r2,r2,24
 8013228:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
 801322c:	e0fffd0f 	ldh	r3,-12(fp)
 8013230:	008200b4 	movhi	r2,2050
 8013234:	10a5ec04 	addi	r2,r2,-26704
 8013238:	180691ba 	slli	r3,r3,6
 801323c:	10c5883a 	add	r2,r2,r3
 8013240:	10800e04 	addi	r2,r2,56
 8013244:	00c00044 	movi	r3,1
 8013248:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 801324c:	00800044 	movi	r2,1
 8013250:	d0a6f715 	stw	r2,-25636(gp)
			result = true;
 8013254:	00800044 	movi	r2,1
 8013258:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
 801325c:	e0bff917 	ldw	r2,-28(fp)
}
 8013260:	e6ffff04 	addi	sp,fp,-4
 8013264:	dfc00217 	ldw	ra,8(sp)
 8013268:	df000117 	ldw	fp,4(sp)
 801326c:	dc000017 	ldw	r16,0(sp)
 8013270:	dec00304 	addi	sp,sp,12
 8013274:	f800283a 	ret

08013278 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 8013278:	defffb04 	addi	sp,sp,-20
 801327c:	dfc00415 	stw	ra,16(sp)
 8013280:	df000315 	stw	fp,12(sp)
 8013284:	df000304 	addi	fp,sp,12
 8013288:	2005883a 	mov	r2,r4
 801328c:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
 8013290:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8013294:	8011e800 	call	8011e80 <alt_up_sd_card_is_Present>
 8013298:	10006026 	beq	r2,zero,801341c <alt_up_sd_card_fclose+0x1a4>
 801329c:	d0a6ed17 	ldw	r2,-25676(gp)
 80132a0:	10005e26 	beq	r2,zero,801341c <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
 80132a4:	e0ffff0f 	ldh	r3,-4(fp)
 80132a8:	008200b4 	movhi	r2,2050
 80132ac:	10a5ec04 	addi	r2,r2,-26704
 80132b0:	180691ba 	slli	r3,r3,6
 80132b4:	10c5883a 	add	r2,r2,r3
 80132b8:	10800f04 	addi	r2,r2,60
 80132bc:	10800017 	ldw	r2,0(r2)
 80132c0:	10005626 	beq	r2,zero,801341c <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
 80132c4:	e0ffff0f 	ldh	r3,-4(fp)
 80132c8:	008200b4 	movhi	r2,2050
 80132cc:	10a5ec04 	addi	r2,r2,-26704
 80132d0:	180691ba 	slli	r3,r3,6
 80132d4:	10c5883a 	add	r2,r2,r3
 80132d8:	10800e04 	addi	r2,r2,56
 80132dc:	10800017 	ldw	r2,0(r2)
 80132e0:	10004526 	beq	r2,zero,80133f8 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 80132e4:	e0ffff0f 	ldh	r3,-4(fp)
 80132e8:	008200b4 	movhi	r2,2050
 80132ec:	10a5ec04 	addi	r2,r2,-26704
 80132f0:	180691ba 	slli	r3,r3,6
 80132f4:	10c5883a 	add	r2,r2,r3
 80132f8:	10800b04 	addi	r2,r2,44
 80132fc:	10800017 	ldw	r2,0(r2)
 8013300:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 8013304:	e0ffff0f 	ldh	r3,-4(fp)
 8013308:	008200b4 	movhi	r2,2050
 801330c:	10a5ec04 	addi	r2,r2,-26704
 8013310:	180691ba 	slli	r3,r3,6
 8013314:	10c5883a 	add	r2,r2,r3
 8013318:	10800a04 	addi	r2,r2,40
 801331c:	10800017 	ldw	r2,0(r2)
 8013320:	1000071e 	bne	r2,zero,8013340 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 8013324:	008200b4 	movhi	r2,2050
 8013328:	10a5d704 	addi	r2,r2,-26788
 801332c:	10801317 	ldw	r2,76(r2)
 8013330:	e0fffe17 	ldw	r3,-8(fp)
 8013334:	1885883a 	add	r2,r3,r2
 8013338:	e0bffe15 	stw	r2,-8(fp)
 801333c:	00001406 	br	8013390 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 8013340:	008200b4 	movhi	r2,2050
 8013344:	10a5d704 	addi	r2,r2,-26788
 8013348:	10c01417 	ldw	r3,80(r2)
 801334c:	e0bffe17 	ldw	r2,-8(fp)
 8013350:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
 8013354:	e13fff0f 	ldh	r4,-4(fp)
 8013358:	008200b4 	movhi	r2,2050
 801335c:	10a5ec04 	addi	r2,r2,-26704
 8013360:	200891ba 	slli	r4,r4,6
 8013364:	1105883a 	add	r2,r2,r4
 8013368:	10800a04 	addi	r2,r2,40
 801336c:	10800017 	ldw	r2,0(r2)
 8013370:	113fff84 	addi	r4,r2,-2
 8013374:	008200b4 	movhi	r2,2050
 8013378:	10a5d704 	addi	r2,r2,-26788
 801337c:	10800383 	ldbu	r2,14(r2)
 8013380:	10803fcc 	andi	r2,r2,255
 8013384:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 8013388:	1885883a 	add	r2,r3,r2
 801338c:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 8013390:	e0bffe17 	ldw	r2,-8(fp)
 8013394:	d0e6f417 	ldw	r3,-25648(gp)
 8013398:	180b883a 	mov	r5,r3
 801339c:	1009883a 	mov	r4,r2
 80133a0:	800f2080 	call	800f208 <Read_Sector_Data>
 80133a4:	10001426 	beq	r2,zero,80133f8 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 80133a8:	e0ffff0f 	ldh	r3,-4(fp)
 80133ac:	008200b4 	movhi	r2,2050
 80133b0:	10a5ec04 	addi	r2,r2,-26704
 80133b4:	180691ba 	slli	r3,r3,6
 80133b8:	10c5883a 	add	r2,r2,r3
 80133bc:	10800c04 	addi	r2,r2,48
 80133c0:	1080000b 	ldhu	r2,0(r2)
 80133c4:	113fffcc 	andi	r4,r2,65535
 80133c8:	2120001c 	xori	r4,r4,32768
 80133cc:	21200004 	addi	r4,r4,-32768
 80133d0:	e0bfff0f 	ldh	r2,-4(fp)
 80133d4:	100691ba 	slli	r3,r2,6
 80133d8:	008200b4 	movhi	r2,2050
 80133dc:	10a5ec04 	addi	r2,r2,-26704
 80133e0:	1885883a 	add	r2,r3,r2
 80133e4:	100b883a 	mov	r5,r2
 80133e8:	800f8940 	call	800f894 <Write_File_Record_At_Offset>
 80133ec:	10000226 	beq	r2,zero,80133f8 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 80133f0:	800f1bc0 	call	800f1bc <Save_Modified_Sector>
 80133f4:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 80133f8:	e0ffff0f 	ldh	r3,-4(fp)
 80133fc:	008200b4 	movhi	r2,2050
 8013400:	10a5ec04 	addi	r2,r2,-26704
 8013404:	180691ba 	slli	r3,r3,6
 8013408:	10c5883a 	add	r2,r2,r3
 801340c:	10800f04 	addi	r2,r2,60
 8013410:	10000015 	stw	zero,0(r2)
			result = true;
 8013414:	00800044 	movi	r2,1
 8013418:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
 801341c:	e0bffd17 	ldw	r2,-12(fp)
}
 8013420:	e037883a 	mov	sp,fp
 8013424:	dfc00117 	ldw	ra,4(sp)
 8013428:	df000017 	ldw	fp,0(sp)
 801342c:	dec00204 	addi	sp,sp,8
 8013430:	f800283a 	ret

08013434 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8013434:	defffa04 	addi	sp,sp,-24
 8013438:	dfc00515 	stw	ra,20(sp)
 801343c:	df000415 	stw	fp,16(sp)
 8013440:	df000404 	addi	fp,sp,16
 8013444:	e13ffd15 	stw	r4,-12(fp)
 8013448:	e17ffe15 	stw	r5,-8(fp)
 801344c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013450:	e0bffd17 	ldw	r2,-12(fp)
 8013454:	10800017 	ldw	r2,0(r2)
 8013458:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801345c:	e0bffc17 	ldw	r2,-16(fp)
 8013460:	10c00a04 	addi	r3,r2,40
 8013464:	e0bffd17 	ldw	r2,-12(fp)
 8013468:	10800217 	ldw	r2,8(r2)
 801346c:	100f883a 	mov	r7,r2
 8013470:	e1bfff17 	ldw	r6,-4(fp)
 8013474:	e17ffe17 	ldw	r5,-8(fp)
 8013478:	1809883a 	mov	r4,r3
 801347c:	8013a5c0 	call	8013a5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8013480:	e037883a 	mov	sp,fp
 8013484:	dfc00117 	ldw	ra,4(sp)
 8013488:	df000017 	ldw	fp,0(sp)
 801348c:	dec00204 	addi	sp,sp,8
 8013490:	f800283a 	ret

08013494 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8013494:	defffa04 	addi	sp,sp,-24
 8013498:	dfc00515 	stw	ra,20(sp)
 801349c:	df000415 	stw	fp,16(sp)
 80134a0:	df000404 	addi	fp,sp,16
 80134a4:	e13ffd15 	stw	r4,-12(fp)
 80134a8:	e17ffe15 	stw	r5,-8(fp)
 80134ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80134b0:	e0bffd17 	ldw	r2,-12(fp)
 80134b4:	10800017 	ldw	r2,0(r2)
 80134b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80134bc:	e0bffc17 	ldw	r2,-16(fp)
 80134c0:	10c00a04 	addi	r3,r2,40
 80134c4:	e0bffd17 	ldw	r2,-12(fp)
 80134c8:	10800217 	ldw	r2,8(r2)
 80134cc:	100f883a 	mov	r7,r2
 80134d0:	e1bfff17 	ldw	r6,-4(fp)
 80134d4:	e17ffe17 	ldw	r5,-8(fp)
 80134d8:	1809883a 	mov	r4,r3
 80134dc:	8013c780 	call	8013c78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80134e0:	e037883a 	mov	sp,fp
 80134e4:	dfc00117 	ldw	ra,4(sp)
 80134e8:	df000017 	ldw	fp,0(sp)
 80134ec:	dec00204 	addi	sp,sp,8
 80134f0:	f800283a 	ret

080134f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80134f4:	defffc04 	addi	sp,sp,-16
 80134f8:	dfc00315 	stw	ra,12(sp)
 80134fc:	df000215 	stw	fp,8(sp)
 8013500:	df000204 	addi	fp,sp,8
 8013504:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013508:	e0bfff17 	ldw	r2,-4(fp)
 801350c:	10800017 	ldw	r2,0(r2)
 8013510:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8013514:	e0bffe17 	ldw	r2,-8(fp)
 8013518:	10c00a04 	addi	r3,r2,40
 801351c:	e0bfff17 	ldw	r2,-4(fp)
 8013520:	10800217 	ldw	r2,8(r2)
 8013524:	100b883a 	mov	r5,r2
 8013528:	1809883a 	mov	r4,r3
 801352c:	80139040 	call	8013904 <altera_avalon_jtag_uart_close>
}
 8013530:	e037883a 	mov	sp,fp
 8013534:	dfc00117 	ldw	ra,4(sp)
 8013538:	df000017 	ldw	fp,0(sp)
 801353c:	dec00204 	addi	sp,sp,8
 8013540:	f800283a 	ret

08013544 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8013544:	defffa04 	addi	sp,sp,-24
 8013548:	dfc00515 	stw	ra,20(sp)
 801354c:	df000415 	stw	fp,16(sp)
 8013550:	df000404 	addi	fp,sp,16
 8013554:	e13ffd15 	stw	r4,-12(fp)
 8013558:	e17ffe15 	stw	r5,-8(fp)
 801355c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8013560:	e0bffd17 	ldw	r2,-12(fp)
 8013564:	10800017 	ldw	r2,0(r2)
 8013568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801356c:	e0bffc17 	ldw	r2,-16(fp)
 8013570:	10800a04 	addi	r2,r2,40
 8013574:	e1bfff17 	ldw	r6,-4(fp)
 8013578:	e17ffe17 	ldw	r5,-8(fp)
 801357c:	1009883a 	mov	r4,r2
 8013580:	801396c0 	call	801396c <altera_avalon_jtag_uart_ioctl>
}
 8013584:	e037883a 	mov	sp,fp
 8013588:	dfc00117 	ldw	ra,4(sp)
 801358c:	df000017 	ldw	fp,0(sp)
 8013590:	dec00204 	addi	sp,sp,8
 8013594:	f800283a 	ret

08013598 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013598:	defffa04 	addi	sp,sp,-24
 801359c:	dfc00515 	stw	ra,20(sp)
 80135a0:	df000415 	stw	fp,16(sp)
 80135a4:	df000404 	addi	fp,sp,16
 80135a8:	e13ffd15 	stw	r4,-12(fp)
 80135ac:	e17ffe15 	stw	r5,-8(fp)
 80135b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80135b4:	e0bffd17 	ldw	r2,-12(fp)
 80135b8:	00c00044 	movi	r3,1
 80135bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80135c0:	e0bffd17 	ldw	r2,-12(fp)
 80135c4:	10800017 	ldw	r2,0(r2)
 80135c8:	10800104 	addi	r2,r2,4
 80135cc:	1007883a 	mov	r3,r2
 80135d0:	e0bffd17 	ldw	r2,-12(fp)
 80135d4:	10800817 	ldw	r2,32(r2)
 80135d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80135dc:	e0bffe17 	ldw	r2,-8(fp)
 80135e0:	e0ffff17 	ldw	r3,-4(fp)
 80135e4:	d8000015 	stw	zero,0(sp)
 80135e8:	e1fffd17 	ldw	r7,-12(fp)
 80135ec:	01820074 	movhi	r6,2049
 80135f0:	318d9604 	addi	r6,r6,13912
 80135f4:	180b883a 	mov	r5,r3
 80135f8:	1009883a 	mov	r4,r2
 80135fc:	8014a080 	call	8014a08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8013600:	e0bffd17 	ldw	r2,-12(fp)
 8013604:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8013608:	e0bffd17 	ldw	r2,-12(fp)
 801360c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013610:	d0e6fa17 	ldw	r3,-25624(gp)
 8013614:	e1fffd17 	ldw	r7,-12(fp)
 8013618:	01820074 	movhi	r6,2049
 801361c:	318e1904 	addi	r6,r6,14436
 8013620:	180b883a 	mov	r5,r3
 8013624:	1009883a 	mov	r4,r2
 8013628:	80144840 	call	8014484 <alt_alarm_start>
 801362c:	1000040e 	bge	r2,zero,8013640 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8013630:	e0fffd17 	ldw	r3,-12(fp)
 8013634:	00a00034 	movhi	r2,32768
 8013638:	10bfffc4 	addi	r2,r2,-1
 801363c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8013640:	0001883a 	nop
 8013644:	e037883a 	mov	sp,fp
 8013648:	dfc00117 	ldw	ra,4(sp)
 801364c:	df000017 	ldw	fp,0(sp)
 8013650:	dec00204 	addi	sp,sp,8
 8013654:	f800283a 	ret

08013658 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8013658:	defff804 	addi	sp,sp,-32
 801365c:	df000715 	stw	fp,28(sp)
 8013660:	df000704 	addi	fp,sp,28
 8013664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8013668:	e0bfff17 	ldw	r2,-4(fp)
 801366c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8013670:	e0bffb17 	ldw	r2,-20(fp)
 8013674:	10800017 	ldw	r2,0(r2)
 8013678:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801367c:	e0bffc17 	ldw	r2,-16(fp)
 8013680:	10800104 	addi	r2,r2,4
 8013684:	10800037 	ldwio	r2,0(r2)
 8013688:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801368c:	e0bffd17 	ldw	r2,-12(fp)
 8013690:	1080c00c 	andi	r2,r2,768
 8013694:	10006d26 	beq	r2,zero,801384c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8013698:	e0bffd17 	ldw	r2,-12(fp)
 801369c:	1080400c 	andi	r2,r2,256
 80136a0:	10003526 	beq	r2,zero,8013778 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80136a4:	00800074 	movhi	r2,1
 80136a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80136ac:	e0bffb17 	ldw	r2,-20(fp)
 80136b0:	10800a17 	ldw	r2,40(r2)
 80136b4:	10800044 	addi	r2,r2,1
 80136b8:	1081ffcc 	andi	r2,r2,2047
 80136bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80136c0:	e0bffb17 	ldw	r2,-20(fp)
 80136c4:	10c00b17 	ldw	r3,44(r2)
 80136c8:	e0bffe17 	ldw	r2,-8(fp)
 80136cc:	18801526 	beq	r3,r2,8013724 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80136d0:	e0bffc17 	ldw	r2,-16(fp)
 80136d4:	10800037 	ldwio	r2,0(r2)
 80136d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80136dc:	e0bff917 	ldw	r2,-28(fp)
 80136e0:	10a0000c 	andi	r2,r2,32768
 80136e4:	10001126 	beq	r2,zero,801372c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80136e8:	e0bffb17 	ldw	r2,-20(fp)
 80136ec:	10800a17 	ldw	r2,40(r2)
 80136f0:	e0fff917 	ldw	r3,-28(fp)
 80136f4:	1809883a 	mov	r4,r3
 80136f8:	e0fffb17 	ldw	r3,-20(fp)
 80136fc:	1885883a 	add	r2,r3,r2
 8013700:	10800e04 	addi	r2,r2,56
 8013704:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013708:	e0bffb17 	ldw	r2,-20(fp)
 801370c:	10800a17 	ldw	r2,40(r2)
 8013710:	10800044 	addi	r2,r2,1
 8013714:	10c1ffcc 	andi	r3,r2,2047
 8013718:	e0bffb17 	ldw	r2,-20(fp)
 801371c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8013720:	003fe206 	br	80136ac <__alt_data_end+0xf80136ac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8013724:	0001883a 	nop
 8013728:	00000106 	br	8013730 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 801372c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8013730:	e0bff917 	ldw	r2,-28(fp)
 8013734:	10bfffec 	andhi	r2,r2,65535
 8013738:	10000f26 	beq	r2,zero,8013778 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801373c:	e0bffb17 	ldw	r2,-20(fp)
 8013740:	10c00817 	ldw	r3,32(r2)
 8013744:	00bfff84 	movi	r2,-2
 8013748:	1886703a 	and	r3,r3,r2
 801374c:	e0bffb17 	ldw	r2,-20(fp)
 8013750:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8013754:	e0bffc17 	ldw	r2,-16(fp)
 8013758:	10800104 	addi	r2,r2,4
 801375c:	1007883a 	mov	r3,r2
 8013760:	e0bffb17 	ldw	r2,-20(fp)
 8013764:	10800817 	ldw	r2,32(r2)
 8013768:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801376c:	e0bffc17 	ldw	r2,-16(fp)
 8013770:	10800104 	addi	r2,r2,4
 8013774:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8013778:	e0bffd17 	ldw	r2,-12(fp)
 801377c:	1080800c 	andi	r2,r2,512
 8013780:	103fbe26 	beq	r2,zero,801367c <__alt_data_end+0xf801367c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8013784:	e0bffd17 	ldw	r2,-12(fp)
 8013788:	1004d43a 	srli	r2,r2,16
 801378c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013790:	00001406 	br	80137e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8013794:	e0bffc17 	ldw	r2,-16(fp)
 8013798:	e0fffb17 	ldw	r3,-20(fp)
 801379c:	18c00d17 	ldw	r3,52(r3)
 80137a0:	e13ffb17 	ldw	r4,-20(fp)
 80137a4:	20c7883a 	add	r3,r4,r3
 80137a8:	18c20e04 	addi	r3,r3,2104
 80137ac:	18c00003 	ldbu	r3,0(r3)
 80137b0:	18c03fcc 	andi	r3,r3,255
 80137b4:	18c0201c 	xori	r3,r3,128
 80137b8:	18ffe004 	addi	r3,r3,-128
 80137bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80137c0:	e0bffb17 	ldw	r2,-20(fp)
 80137c4:	10800d17 	ldw	r2,52(r2)
 80137c8:	10800044 	addi	r2,r2,1
 80137cc:	10c1ffcc 	andi	r3,r2,2047
 80137d0:	e0bffb17 	ldw	r2,-20(fp)
 80137d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80137d8:	e0bffa17 	ldw	r2,-24(fp)
 80137dc:	10bfffc4 	addi	r2,r2,-1
 80137e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80137e4:	e0bffa17 	ldw	r2,-24(fp)
 80137e8:	10000526 	beq	r2,zero,8013800 <altera_avalon_jtag_uart_irq+0x1a8>
 80137ec:	e0bffb17 	ldw	r2,-20(fp)
 80137f0:	10c00d17 	ldw	r3,52(r2)
 80137f4:	e0bffb17 	ldw	r2,-20(fp)
 80137f8:	10800c17 	ldw	r2,48(r2)
 80137fc:	18bfe51e 	bne	r3,r2,8013794 <__alt_data_end+0xf8013794>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8013800:	e0bffa17 	ldw	r2,-24(fp)
 8013804:	103f9d26 	beq	r2,zero,801367c <__alt_data_end+0xf801367c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013808:	e0bffb17 	ldw	r2,-20(fp)
 801380c:	10c00817 	ldw	r3,32(r2)
 8013810:	00bfff44 	movi	r2,-3
 8013814:	1886703a 	and	r3,r3,r2
 8013818:	e0bffb17 	ldw	r2,-20(fp)
 801381c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013820:	e0bffb17 	ldw	r2,-20(fp)
 8013824:	10800017 	ldw	r2,0(r2)
 8013828:	10800104 	addi	r2,r2,4
 801382c:	1007883a 	mov	r3,r2
 8013830:	e0bffb17 	ldw	r2,-20(fp)
 8013834:	10800817 	ldw	r2,32(r2)
 8013838:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801383c:	e0bffc17 	ldw	r2,-16(fp)
 8013840:	10800104 	addi	r2,r2,4
 8013844:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8013848:	003f8c06 	br	801367c <__alt_data_end+0xf801367c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 801384c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8013850:	0001883a 	nop
 8013854:	e037883a 	mov	sp,fp
 8013858:	df000017 	ldw	fp,0(sp)
 801385c:	dec00104 	addi	sp,sp,4
 8013860:	f800283a 	ret

08013864 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8013864:	defff804 	addi	sp,sp,-32
 8013868:	df000715 	stw	fp,28(sp)
 801386c:	df000704 	addi	fp,sp,28
 8013870:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8013874:	e0bffb17 	ldw	r2,-20(fp)
 8013878:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801387c:	e0bff917 	ldw	r2,-28(fp)
 8013880:	10800017 	ldw	r2,0(r2)
 8013884:	10800104 	addi	r2,r2,4
 8013888:	10800037 	ldwio	r2,0(r2)
 801388c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8013890:	e0bffa17 	ldw	r2,-24(fp)
 8013894:	1081000c 	andi	r2,r2,1024
 8013898:	10000b26 	beq	r2,zero,80138c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801389c:	e0bff917 	ldw	r2,-28(fp)
 80138a0:	10800017 	ldw	r2,0(r2)
 80138a4:	10800104 	addi	r2,r2,4
 80138a8:	1007883a 	mov	r3,r2
 80138ac:	e0bff917 	ldw	r2,-28(fp)
 80138b0:	10800817 	ldw	r2,32(r2)
 80138b4:	10810014 	ori	r2,r2,1024
 80138b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80138bc:	e0bff917 	ldw	r2,-28(fp)
 80138c0:	10000915 	stw	zero,36(r2)
 80138c4:	00000a06 	br	80138f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80138c8:	e0bff917 	ldw	r2,-28(fp)
 80138cc:	10c00917 	ldw	r3,36(r2)
 80138d0:	00a00034 	movhi	r2,32768
 80138d4:	10bfff04 	addi	r2,r2,-4
 80138d8:	10c00536 	bltu	r2,r3,80138f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80138dc:	e0bff917 	ldw	r2,-28(fp)
 80138e0:	10800917 	ldw	r2,36(r2)
 80138e4:	10c00044 	addi	r3,r2,1
 80138e8:	e0bff917 	ldw	r2,-28(fp)
 80138ec:	10c00915 	stw	r3,36(r2)
 80138f0:	d0a6fa17 	ldw	r2,-25624(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80138f4:	e037883a 	mov	sp,fp
 80138f8:	df000017 	ldw	fp,0(sp)
 80138fc:	dec00104 	addi	sp,sp,4
 8013900:	f800283a 	ret

08013904 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8013904:	defffd04 	addi	sp,sp,-12
 8013908:	df000215 	stw	fp,8(sp)
 801390c:	df000204 	addi	fp,sp,8
 8013910:	e13ffe15 	stw	r4,-8(fp)
 8013914:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013918:	00000506 	br	8013930 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801391c:	e0bfff17 	ldw	r2,-4(fp)
 8013920:	1090000c 	andi	r2,r2,16384
 8013924:	10000226 	beq	r2,zero,8013930 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8013928:	00bffd44 	movi	r2,-11
 801392c:	00000b06 	br	801395c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013930:	e0bffe17 	ldw	r2,-8(fp)
 8013934:	10c00d17 	ldw	r3,52(r2)
 8013938:	e0bffe17 	ldw	r2,-8(fp)
 801393c:	10800c17 	ldw	r2,48(r2)
 8013940:	18800526 	beq	r3,r2,8013958 <altera_avalon_jtag_uart_close+0x54>
 8013944:	e0bffe17 	ldw	r2,-8(fp)
 8013948:	10c00917 	ldw	r3,36(r2)
 801394c:	e0bffe17 	ldw	r2,-8(fp)
 8013950:	10800117 	ldw	r2,4(r2)
 8013954:	18bff136 	bltu	r3,r2,801391c <__alt_data_end+0xf801391c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8013958:	0005883a 	mov	r2,zero
}
 801395c:	e037883a 	mov	sp,fp
 8013960:	df000017 	ldw	fp,0(sp)
 8013964:	dec00104 	addi	sp,sp,4
 8013968:	f800283a 	ret

0801396c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801396c:	defffa04 	addi	sp,sp,-24
 8013970:	df000515 	stw	fp,20(sp)
 8013974:	df000504 	addi	fp,sp,20
 8013978:	e13ffd15 	stw	r4,-12(fp)
 801397c:	e17ffe15 	stw	r5,-8(fp)
 8013980:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013984:	00bff9c4 	movi	r2,-25
 8013988:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801398c:	e0bffe17 	ldw	r2,-8(fp)
 8013990:	10da8060 	cmpeqi	r3,r2,27137
 8013994:	1800031e 	bne	r3,zero,80139a4 <altera_avalon_jtag_uart_ioctl+0x38>
 8013998:	109a80a0 	cmpeqi	r2,r2,27138
 801399c:	1000181e 	bne	r2,zero,8013a00 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80139a0:	00002906 	br	8013a48 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80139a4:	e0bffd17 	ldw	r2,-12(fp)
 80139a8:	10c00117 	ldw	r3,4(r2)
 80139ac:	00a00034 	movhi	r2,32768
 80139b0:	10bfffc4 	addi	r2,r2,-1
 80139b4:	18802126 	beq	r3,r2,8013a3c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80139b8:	e0bfff17 	ldw	r2,-4(fp)
 80139bc:	10800017 	ldw	r2,0(r2)
 80139c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80139c4:	e0bffc17 	ldw	r2,-16(fp)
 80139c8:	10800090 	cmplti	r2,r2,2
 80139cc:	1000061e 	bne	r2,zero,80139e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80139d0:	e0fffc17 	ldw	r3,-16(fp)
 80139d4:	00a00034 	movhi	r2,32768
 80139d8:	10bfffc4 	addi	r2,r2,-1
 80139dc:	18800226 	beq	r3,r2,80139e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80139e0:	e0bffc17 	ldw	r2,-16(fp)
 80139e4:	00000206 	br	80139f0 <altera_avalon_jtag_uart_ioctl+0x84>
 80139e8:	00a00034 	movhi	r2,32768
 80139ec:	10bfff84 	addi	r2,r2,-2
 80139f0:	e0fffd17 	ldw	r3,-12(fp)
 80139f4:	18800115 	stw	r2,4(r3)
      rc = 0;
 80139f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80139fc:	00000f06 	br	8013a3c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8013a00:	e0bffd17 	ldw	r2,-12(fp)
 8013a04:	10c00117 	ldw	r3,4(r2)
 8013a08:	00a00034 	movhi	r2,32768
 8013a0c:	10bfffc4 	addi	r2,r2,-1
 8013a10:	18800c26 	beq	r3,r2,8013a44 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8013a14:	e0bffd17 	ldw	r2,-12(fp)
 8013a18:	10c00917 	ldw	r3,36(r2)
 8013a1c:	e0bffd17 	ldw	r2,-12(fp)
 8013a20:	10800117 	ldw	r2,4(r2)
 8013a24:	1885803a 	cmpltu	r2,r3,r2
 8013a28:	10c03fcc 	andi	r3,r2,255
 8013a2c:	e0bfff17 	ldw	r2,-4(fp)
 8013a30:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8013a34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013a38:	00000206 	br	8013a44 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8013a3c:	0001883a 	nop
 8013a40:	00000106 	br	8013a48 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8013a44:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8013a48:	e0bffb17 	ldw	r2,-20(fp)
}
 8013a4c:	e037883a 	mov	sp,fp
 8013a50:	df000017 	ldw	fp,0(sp)
 8013a54:	dec00104 	addi	sp,sp,4
 8013a58:	f800283a 	ret

08013a5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8013a5c:	defff304 	addi	sp,sp,-52
 8013a60:	dfc00c15 	stw	ra,48(sp)
 8013a64:	df000b15 	stw	fp,44(sp)
 8013a68:	df000b04 	addi	fp,sp,44
 8013a6c:	e13ffc15 	stw	r4,-16(fp)
 8013a70:	e17ffd15 	stw	r5,-12(fp)
 8013a74:	e1bffe15 	stw	r6,-8(fp)
 8013a78:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8013a7c:	e0bffd17 	ldw	r2,-12(fp)
 8013a80:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013a84:	00004706 	br	8013ba4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8013a88:	e0bffc17 	ldw	r2,-16(fp)
 8013a8c:	10800a17 	ldw	r2,40(r2)
 8013a90:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8013a94:	e0bffc17 	ldw	r2,-16(fp)
 8013a98:	10800b17 	ldw	r2,44(r2)
 8013a9c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8013aa0:	e0fff717 	ldw	r3,-36(fp)
 8013aa4:	e0bff817 	ldw	r2,-32(fp)
 8013aa8:	18800536 	bltu	r3,r2,8013ac0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8013aac:	e0fff717 	ldw	r3,-36(fp)
 8013ab0:	e0bff817 	ldw	r2,-32(fp)
 8013ab4:	1885c83a 	sub	r2,r3,r2
 8013ab8:	e0bff615 	stw	r2,-40(fp)
 8013abc:	00000406 	br	8013ad0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8013ac0:	00c20004 	movi	r3,2048
 8013ac4:	e0bff817 	ldw	r2,-32(fp)
 8013ac8:	1885c83a 	sub	r2,r3,r2
 8013acc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013ad0:	e0bff617 	ldw	r2,-40(fp)
 8013ad4:	10001e26 	beq	r2,zero,8013b50 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8013ad8:	e0fffe17 	ldw	r3,-8(fp)
 8013adc:	e0bff617 	ldw	r2,-40(fp)
 8013ae0:	1880022e 	bgeu	r3,r2,8013aec <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8013ae4:	e0bffe17 	ldw	r2,-8(fp)
 8013ae8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8013aec:	e0bffc17 	ldw	r2,-16(fp)
 8013af0:	10c00e04 	addi	r3,r2,56
 8013af4:	e0bff817 	ldw	r2,-32(fp)
 8013af8:	1885883a 	add	r2,r3,r2
 8013afc:	e1bff617 	ldw	r6,-40(fp)
 8013b00:	100b883a 	mov	r5,r2
 8013b04:	e13ff517 	ldw	r4,-44(fp)
 8013b08:	800259c0 	call	800259c <memcpy>
      ptr   += n;
 8013b0c:	e0fff517 	ldw	r3,-44(fp)
 8013b10:	e0bff617 	ldw	r2,-40(fp)
 8013b14:	1885883a 	add	r2,r3,r2
 8013b18:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8013b1c:	e0fffe17 	ldw	r3,-8(fp)
 8013b20:	e0bff617 	ldw	r2,-40(fp)
 8013b24:	1885c83a 	sub	r2,r3,r2
 8013b28:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013b2c:	e0fff817 	ldw	r3,-32(fp)
 8013b30:	e0bff617 	ldw	r2,-40(fp)
 8013b34:	1885883a 	add	r2,r3,r2
 8013b38:	10c1ffcc 	andi	r3,r2,2047
 8013b3c:	e0bffc17 	ldw	r2,-16(fp)
 8013b40:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8013b44:	e0bffe17 	ldw	r2,-8(fp)
 8013b48:	00bfcf16 	blt	zero,r2,8013a88 <__alt_data_end+0xf8013a88>
 8013b4c:	00000106 	br	8013b54 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8013b50:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8013b54:	e0fff517 	ldw	r3,-44(fp)
 8013b58:	e0bffd17 	ldw	r2,-12(fp)
 8013b5c:	1880141e 	bne	r3,r2,8013bb0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8013b60:	e0bfff17 	ldw	r2,-4(fp)
 8013b64:	1090000c 	andi	r2,r2,16384
 8013b68:	1000131e 	bne	r2,zero,8013bb8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8013b6c:	0001883a 	nop
 8013b70:	e0bffc17 	ldw	r2,-16(fp)
 8013b74:	10c00a17 	ldw	r3,40(r2)
 8013b78:	e0bff717 	ldw	r2,-36(fp)
 8013b7c:	1880051e 	bne	r3,r2,8013b94 <altera_avalon_jtag_uart_read+0x138>
 8013b80:	e0bffc17 	ldw	r2,-16(fp)
 8013b84:	10c00917 	ldw	r3,36(r2)
 8013b88:	e0bffc17 	ldw	r2,-16(fp)
 8013b8c:	10800117 	ldw	r2,4(r2)
 8013b90:	18bff736 	bltu	r3,r2,8013b70 <__alt_data_end+0xf8013b70>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8013b94:	e0bffc17 	ldw	r2,-16(fp)
 8013b98:	10c00a17 	ldw	r3,40(r2)
 8013b9c:	e0bff717 	ldw	r2,-36(fp)
 8013ba0:	18800726 	beq	r3,r2,8013bc0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013ba4:	e0bffe17 	ldw	r2,-8(fp)
 8013ba8:	00bfb716 	blt	zero,r2,8013a88 <__alt_data_end+0xf8013a88>
 8013bac:	00000506 	br	8013bc4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8013bb0:	0001883a 	nop
 8013bb4:	00000306 	br	8013bc4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8013bb8:	0001883a 	nop
 8013bbc:	00000106 	br	8013bc4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8013bc0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8013bc4:	e0fff517 	ldw	r3,-44(fp)
 8013bc8:	e0bffd17 	ldw	r2,-12(fp)
 8013bcc:	18801826 	beq	r3,r2,8013c30 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013bd0:	0005303a 	rdctl	r2,status
 8013bd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013bd8:	e0fffb17 	ldw	r3,-20(fp)
 8013bdc:	00bfff84 	movi	r2,-2
 8013be0:	1884703a 	and	r2,r3,r2
 8013be4:	1001703a 	wrctl	status,r2
  
  return context;
 8013be8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8013bec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013bf0:	e0bffc17 	ldw	r2,-16(fp)
 8013bf4:	10800817 	ldw	r2,32(r2)
 8013bf8:	10c00054 	ori	r3,r2,1
 8013bfc:	e0bffc17 	ldw	r2,-16(fp)
 8013c00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013c04:	e0bffc17 	ldw	r2,-16(fp)
 8013c08:	10800017 	ldw	r2,0(r2)
 8013c0c:	10800104 	addi	r2,r2,4
 8013c10:	1007883a 	mov	r3,r2
 8013c14:	e0bffc17 	ldw	r2,-16(fp)
 8013c18:	10800817 	ldw	r2,32(r2)
 8013c1c:	18800035 	stwio	r2,0(r3)
 8013c20:	e0bffa17 	ldw	r2,-24(fp)
 8013c24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013c28:	e0bff917 	ldw	r2,-28(fp)
 8013c2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8013c30:	e0fff517 	ldw	r3,-44(fp)
 8013c34:	e0bffd17 	ldw	r2,-12(fp)
 8013c38:	18800426 	beq	r3,r2,8013c4c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8013c3c:	e0fff517 	ldw	r3,-44(fp)
 8013c40:	e0bffd17 	ldw	r2,-12(fp)
 8013c44:	1885c83a 	sub	r2,r3,r2
 8013c48:	00000606 	br	8013c64 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8013c4c:	e0bfff17 	ldw	r2,-4(fp)
 8013c50:	1090000c 	andi	r2,r2,16384
 8013c54:	10000226 	beq	r2,zero,8013c60 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8013c58:	00bffd44 	movi	r2,-11
 8013c5c:	00000106 	br	8013c64 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8013c60:	00bffec4 	movi	r2,-5
}
 8013c64:	e037883a 	mov	sp,fp
 8013c68:	dfc00117 	ldw	ra,4(sp)
 8013c6c:	df000017 	ldw	fp,0(sp)
 8013c70:	dec00204 	addi	sp,sp,8
 8013c74:	f800283a 	ret

08013c78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8013c78:	defff304 	addi	sp,sp,-52
 8013c7c:	dfc00c15 	stw	ra,48(sp)
 8013c80:	df000b15 	stw	fp,44(sp)
 8013c84:	df000b04 	addi	fp,sp,44
 8013c88:	e13ffc15 	stw	r4,-16(fp)
 8013c8c:	e17ffd15 	stw	r5,-12(fp)
 8013c90:	e1bffe15 	stw	r6,-8(fp)
 8013c94:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8013c98:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8013c9c:	e0bffd17 	ldw	r2,-12(fp)
 8013ca0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8013ca4:	00003706 	br	8013d84 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8013ca8:	e0bffc17 	ldw	r2,-16(fp)
 8013cac:	10800c17 	ldw	r2,48(r2)
 8013cb0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8013cb4:	e0bffc17 	ldw	r2,-16(fp)
 8013cb8:	10800d17 	ldw	r2,52(r2)
 8013cbc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8013cc0:	e0fff917 	ldw	r3,-28(fp)
 8013cc4:	e0bff517 	ldw	r2,-44(fp)
 8013cc8:	1880062e 	bgeu	r3,r2,8013ce4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8013ccc:	e0fff517 	ldw	r3,-44(fp)
 8013cd0:	e0bff917 	ldw	r2,-28(fp)
 8013cd4:	1885c83a 	sub	r2,r3,r2
 8013cd8:	10bfffc4 	addi	r2,r2,-1
 8013cdc:	e0bff615 	stw	r2,-40(fp)
 8013ce0:	00000b06 	br	8013d10 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8013ce4:	e0bff517 	ldw	r2,-44(fp)
 8013ce8:	10000526 	beq	r2,zero,8013d00 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8013cec:	00c20004 	movi	r3,2048
 8013cf0:	e0bff917 	ldw	r2,-28(fp)
 8013cf4:	1885c83a 	sub	r2,r3,r2
 8013cf8:	e0bff615 	stw	r2,-40(fp)
 8013cfc:	00000406 	br	8013d10 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8013d00:	00c1ffc4 	movi	r3,2047
 8013d04:	e0bff917 	ldw	r2,-28(fp)
 8013d08:	1885c83a 	sub	r2,r3,r2
 8013d0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013d10:	e0bff617 	ldw	r2,-40(fp)
 8013d14:	10001e26 	beq	r2,zero,8013d90 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8013d18:	e0fffe17 	ldw	r3,-8(fp)
 8013d1c:	e0bff617 	ldw	r2,-40(fp)
 8013d20:	1880022e 	bgeu	r3,r2,8013d2c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8013d24:	e0bffe17 	ldw	r2,-8(fp)
 8013d28:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8013d2c:	e0bffc17 	ldw	r2,-16(fp)
 8013d30:	10c20e04 	addi	r3,r2,2104
 8013d34:	e0bff917 	ldw	r2,-28(fp)
 8013d38:	1885883a 	add	r2,r3,r2
 8013d3c:	e1bff617 	ldw	r6,-40(fp)
 8013d40:	e17ffd17 	ldw	r5,-12(fp)
 8013d44:	1009883a 	mov	r4,r2
 8013d48:	800259c0 	call	800259c <memcpy>
      ptr   += n;
 8013d4c:	e0fffd17 	ldw	r3,-12(fp)
 8013d50:	e0bff617 	ldw	r2,-40(fp)
 8013d54:	1885883a 	add	r2,r3,r2
 8013d58:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8013d5c:	e0fffe17 	ldw	r3,-8(fp)
 8013d60:	e0bff617 	ldw	r2,-40(fp)
 8013d64:	1885c83a 	sub	r2,r3,r2
 8013d68:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013d6c:	e0fff917 	ldw	r3,-28(fp)
 8013d70:	e0bff617 	ldw	r2,-40(fp)
 8013d74:	1885883a 	add	r2,r3,r2
 8013d78:	10c1ffcc 	andi	r3,r2,2047
 8013d7c:	e0bffc17 	ldw	r2,-16(fp)
 8013d80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8013d84:	e0bffe17 	ldw	r2,-8(fp)
 8013d88:	00bfc716 	blt	zero,r2,8013ca8 <__alt_data_end+0xf8013ca8>
 8013d8c:	00000106 	br	8013d94 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8013d90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013d94:	0005303a 	rdctl	r2,status
 8013d98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013d9c:	e0fffb17 	ldw	r3,-20(fp)
 8013da0:	00bfff84 	movi	r2,-2
 8013da4:	1884703a 	and	r2,r3,r2
 8013da8:	1001703a 	wrctl	status,r2
  
  return context;
 8013dac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8013db0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013db4:	e0bffc17 	ldw	r2,-16(fp)
 8013db8:	10800817 	ldw	r2,32(r2)
 8013dbc:	10c00094 	ori	r3,r2,2
 8013dc0:	e0bffc17 	ldw	r2,-16(fp)
 8013dc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013dc8:	e0bffc17 	ldw	r2,-16(fp)
 8013dcc:	10800017 	ldw	r2,0(r2)
 8013dd0:	10800104 	addi	r2,r2,4
 8013dd4:	1007883a 	mov	r3,r2
 8013dd8:	e0bffc17 	ldw	r2,-16(fp)
 8013ddc:	10800817 	ldw	r2,32(r2)
 8013de0:	18800035 	stwio	r2,0(r3)
 8013de4:	e0bffa17 	ldw	r2,-24(fp)
 8013de8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013dec:	e0bff817 	ldw	r2,-32(fp)
 8013df0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8013df4:	e0bffe17 	ldw	r2,-8(fp)
 8013df8:	0080100e 	bge	zero,r2,8013e3c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8013dfc:	e0bfff17 	ldw	r2,-4(fp)
 8013e00:	1090000c 	andi	r2,r2,16384
 8013e04:	1000101e 	bne	r2,zero,8013e48 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8013e08:	0001883a 	nop
 8013e0c:	e0bffc17 	ldw	r2,-16(fp)
 8013e10:	10c00d17 	ldw	r3,52(r2)
 8013e14:	e0bff517 	ldw	r2,-44(fp)
 8013e18:	1880051e 	bne	r3,r2,8013e30 <altera_avalon_jtag_uart_write+0x1b8>
 8013e1c:	e0bffc17 	ldw	r2,-16(fp)
 8013e20:	10c00917 	ldw	r3,36(r2)
 8013e24:	e0bffc17 	ldw	r2,-16(fp)
 8013e28:	10800117 	ldw	r2,4(r2)
 8013e2c:	18bff736 	bltu	r3,r2,8013e0c <__alt_data_end+0xf8013e0c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8013e30:	e0bffc17 	ldw	r2,-16(fp)
 8013e34:	10800917 	ldw	r2,36(r2)
 8013e38:	1000051e 	bne	r2,zero,8013e50 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8013e3c:	e0bffe17 	ldw	r2,-8(fp)
 8013e40:	00bfd016 	blt	zero,r2,8013d84 <__alt_data_end+0xf8013d84>
 8013e44:	00000306 	br	8013e54 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8013e48:	0001883a 	nop
 8013e4c:	00000106 	br	8013e54 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8013e50:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8013e54:	e0fffd17 	ldw	r3,-12(fp)
 8013e58:	e0bff717 	ldw	r2,-36(fp)
 8013e5c:	18800426 	beq	r3,r2,8013e70 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8013e60:	e0fffd17 	ldw	r3,-12(fp)
 8013e64:	e0bff717 	ldw	r2,-36(fp)
 8013e68:	1885c83a 	sub	r2,r3,r2
 8013e6c:	00000606 	br	8013e88 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8013e70:	e0bfff17 	ldw	r2,-4(fp)
 8013e74:	1090000c 	andi	r2,r2,16384
 8013e78:	10000226 	beq	r2,zero,8013e84 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8013e7c:	00bffd44 	movi	r2,-11
 8013e80:	00000106 	br	8013e88 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8013e84:	00bffec4 	movi	r2,-5
}
 8013e88:	e037883a 	mov	sp,fp
 8013e8c:	dfc00117 	ldw	ra,4(sp)
 8013e90:	df000017 	ldw	fp,0(sp)
 8013e94:	dec00204 	addi	sp,sp,8
 8013e98:	f800283a 	ret

08013e9c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8013e9c:	defffa04 	addi	sp,sp,-24
 8013ea0:	dfc00515 	stw	ra,20(sp)
 8013ea4:	df000415 	stw	fp,16(sp)
 8013ea8:	df000404 	addi	fp,sp,16
 8013eac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8013eb0:	0007883a 	mov	r3,zero
 8013eb4:	e0bfff17 	ldw	r2,-4(fp)
 8013eb8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8013ebc:	e0bfff17 	ldw	r2,-4(fp)
 8013ec0:	10800104 	addi	r2,r2,4
 8013ec4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013ec8:	0005303a 	rdctl	r2,status
 8013ecc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013ed0:	e0fffd17 	ldw	r3,-12(fp)
 8013ed4:	00bfff84 	movi	r2,-2
 8013ed8:	1884703a 	and	r2,r3,r2
 8013edc:	1001703a 	wrctl	status,r2
  
  return context;
 8013ee0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8013ee4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8013ee8:	8014e840 	call	8014e84 <alt_tick>
 8013eec:	e0bffc17 	ldw	r2,-16(fp)
 8013ef0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013ef4:	e0bffe17 	ldw	r2,-8(fp)
 8013ef8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8013efc:	0001883a 	nop
 8013f00:	e037883a 	mov	sp,fp
 8013f04:	dfc00117 	ldw	ra,4(sp)
 8013f08:	df000017 	ldw	fp,0(sp)
 8013f0c:	dec00204 	addi	sp,sp,8
 8013f10:	f800283a 	ret

08013f14 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8013f14:	defff804 	addi	sp,sp,-32
 8013f18:	dfc00715 	stw	ra,28(sp)
 8013f1c:	df000615 	stw	fp,24(sp)
 8013f20:	df000604 	addi	fp,sp,24
 8013f24:	e13ffc15 	stw	r4,-16(fp)
 8013f28:	e17ffd15 	stw	r5,-12(fp)
 8013f2c:	e1bffe15 	stw	r6,-8(fp)
 8013f30:	e1ffff15 	stw	r7,-4(fp)
 8013f34:	e0bfff17 	ldw	r2,-4(fp)
 8013f38:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8013f3c:	d0a6fa17 	ldw	r2,-25624(gp)
 8013f40:	1000021e 	bne	r2,zero,8013f4c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8013f44:	e0bffb17 	ldw	r2,-20(fp)
 8013f48:	d0a6fa15 	stw	r2,-25624(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8013f4c:	e0bffc17 	ldw	r2,-16(fp)
 8013f50:	10800104 	addi	r2,r2,4
 8013f54:	00c001c4 	movi	r3,7
 8013f58:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8013f5c:	d8000015 	stw	zero,0(sp)
 8013f60:	e1fffc17 	ldw	r7,-16(fp)
 8013f64:	01820074 	movhi	r6,2049
 8013f68:	318fa704 	addi	r6,r6,16028
 8013f6c:	e17ffe17 	ldw	r5,-8(fp)
 8013f70:	e13ffd17 	ldw	r4,-12(fp)
 8013f74:	8014a080 	call	8014a08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8013f78:	0001883a 	nop
 8013f7c:	e037883a 	mov	sp,fp
 8013f80:	dfc00117 	ldw	ra,4(sp)
 8013f84:	df000017 	ldw	fp,0(sp)
 8013f88:	dec00204 	addi	sp,sp,8
 8013f8c:	f800283a 	ret

08013f90 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8013f90:	defffc04 	addi	sp,sp,-16
 8013f94:	df000315 	stw	fp,12(sp)
 8013f98:	df000304 	addi	fp,sp,12
 8013f9c:	e13ffe15 	stw	r4,-8(fp)
 8013fa0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8013fa4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8013fa8:	e0bfff17 	ldw	r2,-4(fp)
 8013fac:	1000061e 	bne	r2,zero,8013fc8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8013fb0:	e0bffe17 	ldw	r2,-8(fp)
 8013fb4:	1007883a 	mov	r3,r2
 8013fb8:	e0bffd03 	ldbu	r2,-12(fp)
 8013fbc:	1884b03a 	or	r2,r3,r2
 8013fc0:	e0bffd05 	stb	r2,-12(fp)
 8013fc4:	00000806 	br	8013fe8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8013fc8:	e0bffe17 	ldw	r2,-8(fp)
 8013fcc:	1007883a 	mov	r3,r2
 8013fd0:	e0bffd03 	ldbu	r2,-12(fp)
 8013fd4:	1884b03a 	or	r2,r3,r2
 8013fd8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8013fdc:	e0bffd03 	ldbu	r2,-12(fp)
 8013fe0:	10801014 	ori	r2,r2,64
 8013fe4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8013fe8:	e0fffd03 	ldbu	r3,-12(fp)
 8013fec:	00bfe004 	movi	r2,-128
 8013ff0:	1884b03a 	or	r2,r3,r2
}
 8013ff4:	e037883a 	mov	sp,fp
 8013ff8:	df000017 	ldw	fp,0(sp)
 8013ffc:	dec00104 	addi	sp,sp,4
 8014000:	f800283a 	ret

08014004 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8014004:	defffd04 	addi	sp,sp,-12
 8014008:	df000215 	stw	fp,8(sp)
 801400c:	df000204 	addi	fp,sp,8
 8014010:	e13ffe15 	stw	r4,-8(fp)
 8014014:	2805883a 	mov	r2,r5
 8014018:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 801401c:	e0bffe17 	ldw	r2,-8(fp)
 8014020:	10800a17 	ldw	r2,40(r2)
 8014024:	1007883a 	mov	r3,r2
 8014028:	e0bfff03 	ldbu	r2,-4(fp)
 801402c:	18800025 	stbio	r2,0(r3)
}
 8014030:	0001883a 	nop
 8014034:	e037883a 	mov	sp,fp
 8014038:	df000017 	ldw	fp,0(sp)
 801403c:	dec00104 	addi	sp,sp,4
 8014040:	f800283a 	ret

08014044 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 8014044:	defffe04 	addi	sp,sp,-8
 8014048:	df000115 	stw	fp,4(sp)
 801404c:	df000104 	addi	fp,sp,4
 8014050:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8014054:	e0bfff17 	ldw	r2,-4(fp)
 8014058:	10800a17 	ldw	r2,40(r2)
 801405c:	1007883a 	mov	r3,r2
 8014060:	00800044 	movi	r2,1
 8014064:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8014068:	0001883a 	nop
 801406c:	e037883a 	mov	sp,fp
 8014070:	df000017 	ldw	fp,0(sp)
 8014074:	dec00104 	addi	sp,sp,4
 8014078:	f800283a 	ret

0801407c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 801407c:	defffc04 	addi	sp,sp,-16
 8014080:	dfc00315 	stw	ra,12(sp)
 8014084:	df000215 	stw	fp,8(sp)
 8014088:	df000204 	addi	fp,sp,8
 801408c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8014090:	d1600804 	addi	r5,gp,-32736
 8014094:	e13fff17 	ldw	r4,-4(fp)
 8014098:	80147980 	call	8014798 <alt_find_dev>
 801409c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80140a0:	e0bffe17 	ldw	r2,-8(fp)
}
 80140a4:	e037883a 	mov	sp,fp
 80140a8:	dfc00117 	ldw	ra,4(sp)
 80140ac:	df000017 	ldw	fp,0(sp)
 80140b0:	dec00204 	addi	sp,sp,8
 80140b4:	f800283a 	ret

080140b8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 80140b8:	defffb04 	addi	sp,sp,-20
 80140bc:	df000415 	stw	fp,16(sp)
 80140c0:	df000404 	addi	fp,sp,16
 80140c4:	e13ffd15 	stw	r4,-12(fp)
 80140c8:	e17ffe15 	stw	r5,-8(fp)
 80140cc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 80140d0:	e03ffc15 	stw	zero,-16(fp)
 80140d4:	00000f06 	br	8014114 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 80140d8:	e0bffd17 	ldw	r2,-12(fp)
 80140dc:	10800a17 	ldw	r2,40(r2)
 80140e0:	10800044 	addi	r2,r2,1
 80140e4:	1009883a 	mov	r4,r2
 80140e8:	e0fffe17 	ldw	r3,-8(fp)
 80140ec:	e0bffc17 	ldw	r2,-16(fp)
 80140f0:	1885883a 	add	r2,r3,r2
 80140f4:	10800003 	ldbu	r2,0(r2)
 80140f8:	10803fcc 	andi	r2,r2,255
 80140fc:	1080201c 	xori	r2,r2,128
 8014100:	10bfe004 	addi	r2,r2,-128
 8014104:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8014108:	e0bffc17 	ldw	r2,-16(fp)
 801410c:	10800044 	addi	r2,r2,1
 8014110:	e0bffc15 	stw	r2,-16(fp)
 8014114:	e0fffc17 	ldw	r3,-16(fp)
 8014118:	e0bfff17 	ldw	r2,-4(fp)
 801411c:	18bfee36 	bltu	r3,r2,80140d8 <__alt_data_end+0xf80140d8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8014120:	0001883a 	nop
 8014124:	e037883a 	mov	sp,fp
 8014128:	df000017 	ldw	fp,0(sp)
 801412c:	dec00104 	addi	sp,sp,4
 8014130:	f800283a 	ret

08014134 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8014134:	defffd04 	addi	sp,sp,-12
 8014138:	df000215 	stw	fp,8(sp)
 801413c:	df000204 	addi	fp,sp,8
 8014140:	e13ffe15 	stw	r4,-8(fp)
 8014144:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8014148:	00000d06 	br	8014180 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 801414c:	e0bffe17 	ldw	r2,-8(fp)
 8014150:	10800a17 	ldw	r2,40(r2)
 8014154:	10800044 	addi	r2,r2,1
 8014158:	1007883a 	mov	r3,r2
 801415c:	e0bfff17 	ldw	r2,-4(fp)
 8014160:	10800003 	ldbu	r2,0(r2)
 8014164:	10803fcc 	andi	r2,r2,255
 8014168:	1080201c 	xori	r2,r2,128
 801416c:	10bfe004 	addi	r2,r2,-128
 8014170:	18800025 	stbio	r2,0(r3)
		++ptr;
 8014174:	e0bfff17 	ldw	r2,-4(fp)
 8014178:	10800044 	addi	r2,r2,1
 801417c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8014180:	e0bfff17 	ldw	r2,-4(fp)
 8014184:	10800003 	ldbu	r2,0(r2)
 8014188:	10803fcc 	andi	r2,r2,255
 801418c:	1080201c 	xori	r2,r2,128
 8014190:	10bfe004 	addi	r2,r2,-128
 8014194:	103fed1e 	bne	r2,zero,801414c <__alt_data_end+0xf801414c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8014198:	0001883a 	nop
 801419c:	e037883a 	mov	sp,fp
 80141a0:	df000017 	ldw	fp,0(sp)
 80141a4:	dec00104 	addi	sp,sp,4
 80141a8:	f800283a 	ret

080141ac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 80141ac:	defffb04 	addi	sp,sp,-20
 80141b0:	dfc00415 	stw	ra,16(sp)
 80141b4:	df000315 	stw	fp,12(sp)
 80141b8:	df000304 	addi	fp,sp,12
 80141bc:	e13ffd15 	stw	r4,-12(fp)
 80141c0:	e17ffe15 	stw	r5,-8(fp)
 80141c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 80141c8:	e0bffd17 	ldw	r2,-12(fp)
 80141cc:	10800017 	ldw	r2,0(r2)
 80141d0:	e0ffff17 	ldw	r3,-4(fp)
 80141d4:	180d883a 	mov	r6,r3
 80141d8:	e17ffe17 	ldw	r5,-8(fp)
 80141dc:	1009883a 	mov	r4,r2
 80141e0:	80140b80 	call	80140b8 <alt_up_character_lcd_write>
	return 0;
 80141e4:	0005883a 	mov	r2,zero
}
 80141e8:	e037883a 	mov	sp,fp
 80141ec:	dfc00117 	ldw	ra,4(sp)
 80141f0:	df000017 	ldw	fp,0(sp)
 80141f4:	dec00204 	addi	sp,sp,8
 80141f8:	f800283a 	ret

080141fc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 80141fc:	defffa04 	addi	sp,sp,-24
 8014200:	dfc00515 	stw	ra,20(sp)
 8014204:	df000415 	stw	fp,16(sp)
 8014208:	df000404 	addi	fp,sp,16
 801420c:	e13ffd15 	stw	r4,-12(fp)
 8014210:	e17ffe15 	stw	r5,-8(fp)
 8014214:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8014218:	e0bffe17 	ldw	r2,-8(fp)
 801421c:	10800a28 	cmpgeui	r2,r2,40
 8014220:	1000031e 	bne	r2,zero,8014230 <alt_up_character_lcd_set_cursor_pos+0x34>
 8014224:	e0bfff17 	ldw	r2,-4(fp)
 8014228:	108000b0 	cmpltui	r2,r2,2
 801422c:	1000021e 	bne	r2,zero,8014238 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8014230:	00bfffc4 	movi	r2,-1
 8014234:	00000906 	br	801425c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8014238:	e17fff17 	ldw	r5,-4(fp)
 801423c:	e13ffe17 	ldw	r4,-8(fp)
 8014240:	8013f900 	call	8013f90 <get_DDRAM_addr>
 8014244:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8014248:	e0bffc03 	ldbu	r2,-16(fp)
 801424c:	100b883a 	mov	r5,r2
 8014250:	e13ffd17 	ldw	r4,-12(fp)
 8014254:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
	return 0;
 8014258:	0005883a 	mov	r2,zero
}
 801425c:	e037883a 	mov	sp,fp
 8014260:	dfc00117 	ldw	ra,4(sp)
 8014264:	df000017 	ldw	fp,0(sp)
 8014268:	dec00204 	addi	sp,sp,8
 801426c:	f800283a 	ret

08014270 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8014270:	defffb04 	addi	sp,sp,-20
 8014274:	dfc00415 	stw	ra,16(sp)
 8014278:	df000315 	stw	fp,12(sp)
 801427c:	df000304 	addi	fp,sp,12
 8014280:	e13ffe15 	stw	r4,-8(fp)
 8014284:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8014288:	e0bfff17 	ldw	r2,-4(fp)
 801428c:	10001526 	beq	r2,zero,80142e4 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8014290:	e0bfff17 	ldw	r2,-4(fp)
 8014294:	0080020e 	bge	zero,r2,80142a0 <alt_up_character_lcd_shift_cursor+0x30>
 8014298:	00800504 	movi	r2,20
 801429c:	00000106 	br	80142a4 <alt_up_character_lcd_shift_cursor+0x34>
 80142a0:	00800404 	movi	r2,16
 80142a4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80142a8:	e0bfff17 	ldw	r2,-4(fp)
 80142ac:	1000010e 	bge	r2,zero,80142b4 <alt_up_character_lcd_shift_cursor+0x44>
 80142b0:	0085c83a 	sub	r2,zero,r2
 80142b4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80142b8:	00000406 	br	80142cc <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80142bc:	e0bffd43 	ldbu	r2,-11(fp)
 80142c0:	100b883a 	mov	r5,r2
 80142c4:	e13ffe17 	ldw	r4,-8(fp)
 80142c8:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80142cc:	e0bffd03 	ldbu	r2,-12(fp)
 80142d0:	10ffffc4 	addi	r3,r2,-1
 80142d4:	e0fffd05 	stb	r3,-12(fp)
 80142d8:	10803fcc 	andi	r2,r2,255
 80142dc:	103ff71e 	bne	r2,zero,80142bc <__alt_data_end+0xf80142bc>
 80142e0:	00000106 	br	80142e8 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 80142e4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80142e8:	e037883a 	mov	sp,fp
 80142ec:	dfc00117 	ldw	ra,4(sp)
 80142f0:	df000017 	ldw	fp,0(sp)
 80142f4:	dec00204 	addi	sp,sp,8
 80142f8:	f800283a 	ret

080142fc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80142fc:	defffb04 	addi	sp,sp,-20
 8014300:	dfc00415 	stw	ra,16(sp)
 8014304:	df000315 	stw	fp,12(sp)
 8014308:	df000304 	addi	fp,sp,12
 801430c:	e13ffe15 	stw	r4,-8(fp)
 8014310:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8014314:	e0bfff17 	ldw	r2,-4(fp)
 8014318:	10001526 	beq	r2,zero,8014370 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801431c:	e0bfff17 	ldw	r2,-4(fp)
 8014320:	0080020e 	bge	zero,r2,801432c <alt_up_character_lcd_shift_display+0x30>
 8014324:	00800704 	movi	r2,28
 8014328:	00000106 	br	8014330 <alt_up_character_lcd_shift_display+0x34>
 801432c:	00800604 	movi	r2,24
 8014330:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8014334:	e0bfff17 	ldw	r2,-4(fp)
 8014338:	1000010e 	bge	r2,zero,8014340 <alt_up_character_lcd_shift_display+0x44>
 801433c:	0085c83a 	sub	r2,zero,r2
 8014340:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014344:	00000406 	br	8014358 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8014348:	e0bffd43 	ldbu	r2,-11(fp)
 801434c:	100b883a 	mov	r5,r2
 8014350:	e13ffe17 	ldw	r4,-8(fp)
 8014354:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014358:	e0bffd03 	ldbu	r2,-12(fp)
 801435c:	10ffffc4 	addi	r3,r2,-1
 8014360:	e0fffd05 	stb	r3,-12(fp)
 8014364:	10803fcc 	andi	r2,r2,255
 8014368:	103ff71e 	bne	r2,zero,8014348 <__alt_data_end+0xf8014348>
 801436c:	00000106 	br	8014374 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 8014370:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8014374:	e037883a 	mov	sp,fp
 8014378:	dfc00117 	ldw	ra,4(sp)
 801437c:	df000017 	ldw	fp,0(sp)
 8014380:	dec00204 	addi	sp,sp,8
 8014384:	f800283a 	ret

08014388 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8014388:	defffa04 	addi	sp,sp,-24
 801438c:	dfc00515 	stw	ra,20(sp)
 8014390:	df000415 	stw	fp,16(sp)
 8014394:	df000404 	addi	fp,sp,16
 8014398:	e13ffd15 	stw	r4,-12(fp)
 801439c:	e17ffe15 	stw	r5,-8(fp)
 80143a0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 80143a4:	e0bffe17 	ldw	r2,-8(fp)
 80143a8:	10800a28 	cmpgeui	r2,r2,40
 80143ac:	1000031e 	bne	r2,zero,80143bc <alt_up_character_lcd_erase_pos+0x34>
 80143b0:	e0bfff17 	ldw	r2,-4(fp)
 80143b4:	108000b0 	cmpltui	r2,r2,2
 80143b8:	1000021e 	bne	r2,zero,80143c4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 80143bc:	00bfffc4 	movi	r2,-1
 80143c0:	00000f06 	br	8014400 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 80143c4:	e17fff17 	ldw	r5,-4(fp)
 80143c8:	e13ffe17 	ldw	r4,-8(fp)
 80143cc:	8013f900 	call	8013f90 <get_DDRAM_addr>
 80143d0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 80143d4:	e0bffc03 	ldbu	r2,-16(fp)
 80143d8:	100b883a 	mov	r5,r2
 80143dc:	e13ffd17 	ldw	r4,-12(fp)
 80143e0:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 80143e4:	e0bffd17 	ldw	r2,-12(fp)
 80143e8:	10800a17 	ldw	r2,40(r2)
 80143ec:	10800044 	addi	r2,r2,1
 80143f0:	1007883a 	mov	r3,r2
 80143f4:	00800084 	movi	r2,2
 80143f8:	18800025 	stbio	r2,0(r3)
	return 0;
 80143fc:	0005883a 	mov	r2,zero
}
 8014400:	e037883a 	mov	sp,fp
 8014404:	dfc00117 	ldw	ra,4(sp)
 8014408:	df000017 	ldw	fp,0(sp)
 801440c:	dec00204 	addi	sp,sp,8
 8014410:	f800283a 	ret

08014414 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8014414:	defffd04 	addi	sp,sp,-12
 8014418:	dfc00215 	stw	ra,8(sp)
 801441c:	df000115 	stw	fp,4(sp)
 8014420:	df000104 	addi	fp,sp,4
 8014424:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8014428:	01400304 	movi	r5,12
 801442c:	e13fff17 	ldw	r4,-4(fp)
 8014430:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
}
 8014434:	0001883a 	nop
 8014438:	e037883a 	mov	sp,fp
 801443c:	dfc00117 	ldw	ra,4(sp)
 8014440:	df000017 	ldw	fp,0(sp)
 8014444:	dec00204 	addi	sp,sp,8
 8014448:	f800283a 	ret

0801444c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 801444c:	defffd04 	addi	sp,sp,-12
 8014450:	dfc00215 	stw	ra,8(sp)
 8014454:	df000115 	stw	fp,4(sp)
 8014458:	df000104 	addi	fp,sp,4
 801445c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8014460:	014003c4 	movi	r5,15
 8014464:	e13fff17 	ldw	r4,-4(fp)
 8014468:	80140040 	call	8014004 <alt_up_character_lcd_send_cmd>
}
 801446c:	0001883a 	nop
 8014470:	e037883a 	mov	sp,fp
 8014474:	dfc00117 	ldw	ra,4(sp)
 8014478:	df000017 	ldw	fp,0(sp)
 801447c:	dec00204 	addi	sp,sp,8
 8014480:	f800283a 	ret

08014484 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8014484:	defff504 	addi	sp,sp,-44
 8014488:	df000a15 	stw	fp,40(sp)
 801448c:	df000a04 	addi	fp,sp,40
 8014490:	e13ffc15 	stw	r4,-16(fp)
 8014494:	e17ffd15 	stw	r5,-12(fp)
 8014498:	e1bffe15 	stw	r6,-8(fp)
 801449c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80144a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80144a4:	d0a6fa17 	ldw	r2,-25624(gp)
  
  if (alt_ticks_per_second ())
 80144a8:	10003c26 	beq	r2,zero,801459c <alt_alarm_start+0x118>
  {
    if (alarm)
 80144ac:	e0bffc17 	ldw	r2,-16(fp)
 80144b0:	10003826 	beq	r2,zero,8014594 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80144b4:	e0bffc17 	ldw	r2,-16(fp)
 80144b8:	e0fffe17 	ldw	r3,-8(fp)
 80144bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80144c0:	e0bffc17 	ldw	r2,-16(fp)
 80144c4:	e0ffff17 	ldw	r3,-4(fp)
 80144c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80144cc:	0005303a 	rdctl	r2,status
 80144d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80144d4:	e0fff917 	ldw	r3,-28(fp)
 80144d8:	00bfff84 	movi	r2,-2
 80144dc:	1884703a 	and	r2,r3,r2
 80144e0:	1001703a 	wrctl	status,r2
  
  return context;
 80144e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80144e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80144ec:	d0a6fb17 	ldw	r2,-25620(gp)
      
      current_nticks = alt_nticks();
 80144f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80144f4:	e0fffd17 	ldw	r3,-12(fp)
 80144f8:	e0bff617 	ldw	r2,-40(fp)
 80144fc:	1885883a 	add	r2,r3,r2
 8014500:	10c00044 	addi	r3,r2,1
 8014504:	e0bffc17 	ldw	r2,-16(fp)
 8014508:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801450c:	e0bffc17 	ldw	r2,-16(fp)
 8014510:	10c00217 	ldw	r3,8(r2)
 8014514:	e0bff617 	ldw	r2,-40(fp)
 8014518:	1880042e 	bgeu	r3,r2,801452c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 801451c:	e0bffc17 	ldw	r2,-16(fp)
 8014520:	00c00044 	movi	r3,1
 8014524:	10c00405 	stb	r3,16(r2)
 8014528:	00000206 	br	8014534 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 801452c:	e0bffc17 	ldw	r2,-16(fp)
 8014530:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8014534:	e0bffc17 	ldw	r2,-16(fp)
 8014538:	d0e00e04 	addi	r3,gp,-32712
 801453c:	e0fffa15 	stw	r3,-24(fp)
 8014540:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014544:	e0bffb17 	ldw	r2,-20(fp)
 8014548:	e0fffa17 	ldw	r3,-24(fp)
 801454c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014550:	e0bffa17 	ldw	r2,-24(fp)
 8014554:	10c00017 	ldw	r3,0(r2)
 8014558:	e0bffb17 	ldw	r2,-20(fp)
 801455c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014560:	e0bffa17 	ldw	r2,-24(fp)
 8014564:	10800017 	ldw	r2,0(r2)
 8014568:	e0fffb17 	ldw	r3,-20(fp)
 801456c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014570:	e0bffa17 	ldw	r2,-24(fp)
 8014574:	e0fffb17 	ldw	r3,-20(fp)
 8014578:	10c00015 	stw	r3,0(r2)
 801457c:	e0bff817 	ldw	r2,-32(fp)
 8014580:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014584:	e0bff717 	ldw	r2,-36(fp)
 8014588:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801458c:	0005883a 	mov	r2,zero
 8014590:	00000306 	br	80145a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8014594:	00bffa84 	movi	r2,-22
 8014598:	00000106 	br	80145a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801459c:	00bfde84 	movi	r2,-134
  }
}
 80145a0:	e037883a 	mov	sp,fp
 80145a4:	df000017 	ldw	fp,0(sp)
 80145a8:	dec00104 	addi	sp,sp,4
 80145ac:	f800283a 	ret

080145b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80145b0:	defffe04 	addi	sp,sp,-8
 80145b4:	df000115 	stw	fp,4(sp)
 80145b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80145bc:	e03fff15 	stw	zero,-4(fp)
 80145c0:	00000506 	br	80145d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80145c4:	e0bfff17 	ldw	r2,-4(fp)
 80145c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80145cc:	e0bfff17 	ldw	r2,-4(fp)
 80145d0:	10800804 	addi	r2,r2,32
 80145d4:	e0bfff15 	stw	r2,-4(fp)
 80145d8:	e0bfff17 	ldw	r2,-4(fp)
 80145dc:	10820030 	cmpltui	r2,r2,2048
 80145e0:	103ff81e 	bne	r2,zero,80145c4 <__alt_data_end+0xf80145c4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80145e4:	0001883a 	nop
 80145e8:	e037883a 	mov	sp,fp
 80145ec:	df000017 	ldw	fp,0(sp)
 80145f0:	dec00104 	addi	sp,sp,4
 80145f4:	f800283a 	ret

080145f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80145f8:	defffe04 	addi	sp,sp,-8
 80145fc:	dfc00115 	stw	ra,4(sp)
 8014600:	df000015 	stw	fp,0(sp)
 8014604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014608:	d0a00b17 	ldw	r2,-32724(gp)
 801460c:	10000326 	beq	r2,zero,801461c <alt_get_errno+0x24>
 8014610:	d0a00b17 	ldw	r2,-32724(gp)
 8014614:	103ee83a 	callr	r2
 8014618:	00000106 	br	8014620 <alt_get_errno+0x28>
 801461c:	d0a6e204 	addi	r2,gp,-25720
}
 8014620:	e037883a 	mov	sp,fp
 8014624:	dfc00117 	ldw	ra,4(sp)
 8014628:	df000017 	ldw	fp,0(sp)
 801462c:	dec00204 	addi	sp,sp,8
 8014630:	f800283a 	ret

08014634 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014634:	defffa04 	addi	sp,sp,-24
 8014638:	dfc00515 	stw	ra,20(sp)
 801463c:	df000415 	stw	fp,16(sp)
 8014640:	df000404 	addi	fp,sp,16
 8014644:	e13ffe15 	stw	r4,-8(fp)
 8014648:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801464c:	e0bffe17 	ldw	r2,-8(fp)
 8014650:	10000326 	beq	r2,zero,8014660 <alt_dev_llist_insert+0x2c>
 8014654:	e0bffe17 	ldw	r2,-8(fp)
 8014658:	10800217 	ldw	r2,8(r2)
 801465c:	1000061e 	bne	r2,zero,8014678 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014660:	80145f80 	call	80145f8 <alt_get_errno>
 8014664:	1007883a 	mov	r3,r2
 8014668:	00800584 	movi	r2,22
 801466c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8014670:	00bffa84 	movi	r2,-22
 8014674:	00001306 	br	80146c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014678:	e0bffe17 	ldw	r2,-8(fp)
 801467c:	e0ffff17 	ldw	r3,-4(fp)
 8014680:	e0fffc15 	stw	r3,-16(fp)
 8014684:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014688:	e0bffd17 	ldw	r2,-12(fp)
 801468c:	e0fffc17 	ldw	r3,-16(fp)
 8014690:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014694:	e0bffc17 	ldw	r2,-16(fp)
 8014698:	10c00017 	ldw	r3,0(r2)
 801469c:	e0bffd17 	ldw	r2,-12(fp)
 80146a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80146a4:	e0bffc17 	ldw	r2,-16(fp)
 80146a8:	10800017 	ldw	r2,0(r2)
 80146ac:	e0fffd17 	ldw	r3,-12(fp)
 80146b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80146b4:	e0bffc17 	ldw	r2,-16(fp)
 80146b8:	e0fffd17 	ldw	r3,-12(fp)
 80146bc:	10c00015 	stw	r3,0(r2)

  return 0;  
 80146c0:	0005883a 	mov	r2,zero
}
 80146c4:	e037883a 	mov	sp,fp
 80146c8:	dfc00117 	ldw	ra,4(sp)
 80146cc:	df000017 	ldw	fp,0(sp)
 80146d0:	dec00204 	addi	sp,sp,8
 80146d4:	f800283a 	ret

080146d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80146d8:	defffd04 	addi	sp,sp,-12
 80146dc:	dfc00215 	stw	ra,8(sp)
 80146e0:	df000115 	stw	fp,4(sp)
 80146e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80146e8:	00820074 	movhi	r2,2049
 80146ec:	10951b04 	addi	r2,r2,21612
 80146f0:	e0bfff15 	stw	r2,-4(fp)
 80146f4:	00000606 	br	8014710 <_do_ctors+0x38>
        (*ctor) (); 
 80146f8:	e0bfff17 	ldw	r2,-4(fp)
 80146fc:	10800017 	ldw	r2,0(r2)
 8014700:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014704:	e0bfff17 	ldw	r2,-4(fp)
 8014708:	10bfff04 	addi	r2,r2,-4
 801470c:	e0bfff15 	stw	r2,-4(fp)
 8014710:	e0ffff17 	ldw	r3,-4(fp)
 8014714:	00820074 	movhi	r2,2049
 8014718:	10951c04 	addi	r2,r2,21616
 801471c:	18bff62e 	bgeu	r3,r2,80146f8 <__alt_data_end+0xf80146f8>
        (*ctor) (); 
}
 8014720:	0001883a 	nop
 8014724:	e037883a 	mov	sp,fp
 8014728:	dfc00117 	ldw	ra,4(sp)
 801472c:	df000017 	ldw	fp,0(sp)
 8014730:	dec00204 	addi	sp,sp,8
 8014734:	f800283a 	ret

08014738 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8014738:	defffd04 	addi	sp,sp,-12
 801473c:	dfc00215 	stw	ra,8(sp)
 8014740:	df000115 	stw	fp,4(sp)
 8014744:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014748:	00820074 	movhi	r2,2049
 801474c:	10951b04 	addi	r2,r2,21612
 8014750:	e0bfff15 	stw	r2,-4(fp)
 8014754:	00000606 	br	8014770 <_do_dtors+0x38>
        (*dtor) (); 
 8014758:	e0bfff17 	ldw	r2,-4(fp)
 801475c:	10800017 	ldw	r2,0(r2)
 8014760:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014764:	e0bfff17 	ldw	r2,-4(fp)
 8014768:	10bfff04 	addi	r2,r2,-4
 801476c:	e0bfff15 	stw	r2,-4(fp)
 8014770:	e0ffff17 	ldw	r3,-4(fp)
 8014774:	00820074 	movhi	r2,2049
 8014778:	10951c04 	addi	r2,r2,21616
 801477c:	18bff62e 	bgeu	r3,r2,8014758 <__alt_data_end+0xf8014758>
        (*dtor) (); 
}
 8014780:	0001883a 	nop
 8014784:	e037883a 	mov	sp,fp
 8014788:	dfc00117 	ldw	ra,4(sp)
 801478c:	df000017 	ldw	fp,0(sp)
 8014790:	dec00204 	addi	sp,sp,8
 8014794:	f800283a 	ret

08014798 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8014798:	defffa04 	addi	sp,sp,-24
 801479c:	dfc00515 	stw	ra,20(sp)
 80147a0:	df000415 	stw	fp,16(sp)
 80147a4:	df000404 	addi	fp,sp,16
 80147a8:	e13ffe15 	stw	r4,-8(fp)
 80147ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80147b0:	e0bfff17 	ldw	r2,-4(fp)
 80147b4:	10800017 	ldw	r2,0(r2)
 80147b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80147bc:	e13ffe17 	ldw	r4,-8(fp)
 80147c0:	80034580 	call	8003458 <strlen>
 80147c4:	10800044 	addi	r2,r2,1
 80147c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80147cc:	00000d06 	br	8014804 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80147d0:	e0bffc17 	ldw	r2,-16(fp)
 80147d4:	10800217 	ldw	r2,8(r2)
 80147d8:	e0fffd17 	ldw	r3,-12(fp)
 80147dc:	180d883a 	mov	r6,r3
 80147e0:	e17ffe17 	ldw	r5,-8(fp)
 80147e4:	1009883a 	mov	r4,r2
 80147e8:	80151280 	call	8015128 <memcmp>
 80147ec:	1000021e 	bne	r2,zero,80147f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80147f0:	e0bffc17 	ldw	r2,-16(fp)
 80147f4:	00000706 	br	8014814 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80147f8:	e0bffc17 	ldw	r2,-16(fp)
 80147fc:	10800017 	ldw	r2,0(r2)
 8014800:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014804:	e0fffc17 	ldw	r3,-16(fp)
 8014808:	e0bfff17 	ldw	r2,-4(fp)
 801480c:	18bff01e 	bne	r3,r2,80147d0 <__alt_data_end+0xf80147d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014810:	0005883a 	mov	r2,zero
}
 8014814:	e037883a 	mov	sp,fp
 8014818:	dfc00117 	ldw	ra,4(sp)
 801481c:	df000017 	ldw	fp,0(sp)
 8014820:	dec00204 	addi	sp,sp,8
 8014824:	f800283a 	ret

08014828 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8014828:	defffb04 	addi	sp,sp,-20
 801482c:	dfc00415 	stw	ra,16(sp)
 8014830:	df000315 	stw	fp,12(sp)
 8014834:	df000304 	addi	fp,sp,12
 8014838:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801483c:	d0a00617 	ldw	r2,-32744(gp)
 8014840:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014844:	00003106 	br	801490c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8014848:	e0bffd17 	ldw	r2,-12(fp)
 801484c:	10800217 	ldw	r2,8(r2)
 8014850:	1009883a 	mov	r4,r2
 8014854:	80034580 	call	8003458 <strlen>
 8014858:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801485c:	e0bffd17 	ldw	r2,-12(fp)
 8014860:	10c00217 	ldw	r3,8(r2)
 8014864:	e0bffe17 	ldw	r2,-8(fp)
 8014868:	10bfffc4 	addi	r2,r2,-1
 801486c:	1885883a 	add	r2,r3,r2
 8014870:	10800003 	ldbu	r2,0(r2)
 8014874:	10803fcc 	andi	r2,r2,255
 8014878:	1080201c 	xori	r2,r2,128
 801487c:	10bfe004 	addi	r2,r2,-128
 8014880:	10800bd8 	cmpnei	r2,r2,47
 8014884:	1000031e 	bne	r2,zero,8014894 <alt_find_file+0x6c>
    {
      len -= 1;
 8014888:	e0bffe17 	ldw	r2,-8(fp)
 801488c:	10bfffc4 	addi	r2,r2,-1
 8014890:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014894:	e0bffe17 	ldw	r2,-8(fp)
 8014898:	e0ffff17 	ldw	r3,-4(fp)
 801489c:	1885883a 	add	r2,r3,r2
 80148a0:	10800003 	ldbu	r2,0(r2)
 80148a4:	10803fcc 	andi	r2,r2,255
 80148a8:	1080201c 	xori	r2,r2,128
 80148ac:	10bfe004 	addi	r2,r2,-128
 80148b0:	10800be0 	cmpeqi	r2,r2,47
 80148b4:	1000081e 	bne	r2,zero,80148d8 <alt_find_file+0xb0>
 80148b8:	e0bffe17 	ldw	r2,-8(fp)
 80148bc:	e0ffff17 	ldw	r3,-4(fp)
 80148c0:	1885883a 	add	r2,r3,r2
 80148c4:	10800003 	ldbu	r2,0(r2)
 80148c8:	10803fcc 	andi	r2,r2,255
 80148cc:	1080201c 	xori	r2,r2,128
 80148d0:	10bfe004 	addi	r2,r2,-128
 80148d4:	10000a1e 	bne	r2,zero,8014900 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80148d8:	e0bffd17 	ldw	r2,-12(fp)
 80148dc:	10800217 	ldw	r2,8(r2)
 80148e0:	e0fffe17 	ldw	r3,-8(fp)
 80148e4:	180d883a 	mov	r6,r3
 80148e8:	e17fff17 	ldw	r5,-4(fp)
 80148ec:	1009883a 	mov	r4,r2
 80148f0:	80151280 	call	8015128 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80148f4:	1000021e 	bne	r2,zero,8014900 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80148f8:	e0bffd17 	ldw	r2,-12(fp)
 80148fc:	00000706 	br	801491c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8014900:	e0bffd17 	ldw	r2,-12(fp)
 8014904:	10800017 	ldw	r2,0(r2)
 8014908:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801490c:	e0fffd17 	ldw	r3,-12(fp)
 8014910:	d0a00604 	addi	r2,gp,-32744
 8014914:	18bfcc1e 	bne	r3,r2,8014848 <__alt_data_end+0xf8014848>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8014918:	0005883a 	mov	r2,zero
}
 801491c:	e037883a 	mov	sp,fp
 8014920:	dfc00117 	ldw	ra,4(sp)
 8014924:	df000017 	ldw	fp,0(sp)
 8014928:	dec00204 	addi	sp,sp,8
 801492c:	f800283a 	ret

08014930 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8014930:	defffc04 	addi	sp,sp,-16
 8014934:	df000315 	stw	fp,12(sp)
 8014938:	df000304 	addi	fp,sp,12
 801493c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8014940:	00bffa04 	movi	r2,-24
 8014944:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8014948:	e03ffd15 	stw	zero,-12(fp)
 801494c:	00001906 	br	80149b4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8014950:	00820074 	movhi	r2,2049
 8014954:	109a3d04 	addi	r2,r2,26868
 8014958:	e0fffd17 	ldw	r3,-12(fp)
 801495c:	18c00324 	muli	r3,r3,12
 8014960:	10c5883a 	add	r2,r2,r3
 8014964:	10800017 	ldw	r2,0(r2)
 8014968:	10000f1e 	bne	r2,zero,80149a8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 801496c:	00820074 	movhi	r2,2049
 8014970:	109a3d04 	addi	r2,r2,26868
 8014974:	e0fffd17 	ldw	r3,-12(fp)
 8014978:	18c00324 	muli	r3,r3,12
 801497c:	10c5883a 	add	r2,r2,r3
 8014980:	e0ffff17 	ldw	r3,-4(fp)
 8014984:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8014988:	d0e00a17 	ldw	r3,-32728(gp)
 801498c:	e0bffd17 	ldw	r2,-12(fp)
 8014990:	1880020e 	bge	r3,r2,801499c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8014994:	e0bffd17 	ldw	r2,-12(fp)
 8014998:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 801499c:	e0bffd17 	ldw	r2,-12(fp)
 80149a0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80149a4:	00000606 	br	80149c0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80149a8:	e0bffd17 	ldw	r2,-12(fp)
 80149ac:	10800044 	addi	r2,r2,1
 80149b0:	e0bffd15 	stw	r2,-12(fp)
 80149b4:	e0bffd17 	ldw	r2,-12(fp)
 80149b8:	10800810 	cmplti	r2,r2,32
 80149bc:	103fe41e 	bne	r2,zero,8014950 <__alt_data_end+0xf8014950>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80149c0:	e0bffe17 	ldw	r2,-8(fp)
}
 80149c4:	e037883a 	mov	sp,fp
 80149c8:	df000017 	ldw	fp,0(sp)
 80149cc:	dec00104 	addi	sp,sp,4
 80149d0:	f800283a 	ret

080149d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80149d4:	defffe04 	addi	sp,sp,-8
 80149d8:	dfc00115 	stw	ra,4(sp)
 80149dc:	df000015 	stw	fp,0(sp)
 80149e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80149e4:	01440004 	movi	r5,4096
 80149e8:	0009883a 	mov	r4,zero
 80149ec:	8014fb00 	call	8014fb0 <alt_icache_flush>
#endif
}
 80149f0:	0001883a 	nop
 80149f4:	e037883a 	mov	sp,fp
 80149f8:	dfc00117 	ldw	ra,4(sp)
 80149fc:	df000017 	ldw	fp,0(sp)
 8014a00:	dec00204 	addi	sp,sp,8
 8014a04:	f800283a 	ret

08014a08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014a08:	defff904 	addi	sp,sp,-28
 8014a0c:	dfc00615 	stw	ra,24(sp)
 8014a10:	df000515 	stw	fp,20(sp)
 8014a14:	df000504 	addi	fp,sp,20
 8014a18:	e13ffc15 	stw	r4,-16(fp)
 8014a1c:	e17ffd15 	stw	r5,-12(fp)
 8014a20:	e1bffe15 	stw	r6,-8(fp)
 8014a24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014a28:	e0800217 	ldw	r2,8(fp)
 8014a2c:	d8800015 	stw	r2,0(sp)
 8014a30:	e1ffff17 	ldw	r7,-4(fp)
 8014a34:	e1bffe17 	ldw	r6,-8(fp)
 8014a38:	e17ffd17 	ldw	r5,-12(fp)
 8014a3c:	e13ffc17 	ldw	r4,-16(fp)
 8014a40:	8014bb80 	call	8014bb8 <alt_iic_isr_register>
}  
 8014a44:	e037883a 	mov	sp,fp
 8014a48:	dfc00117 	ldw	ra,4(sp)
 8014a4c:	df000017 	ldw	fp,0(sp)
 8014a50:	dec00204 	addi	sp,sp,8
 8014a54:	f800283a 	ret

08014a58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8014a58:	defff904 	addi	sp,sp,-28
 8014a5c:	df000615 	stw	fp,24(sp)
 8014a60:	df000604 	addi	fp,sp,24
 8014a64:	e13ffe15 	stw	r4,-8(fp)
 8014a68:	e17fff15 	stw	r5,-4(fp)
 8014a6c:	e0bfff17 	ldw	r2,-4(fp)
 8014a70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014a74:	0005303a 	rdctl	r2,status
 8014a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014a7c:	e0fffb17 	ldw	r3,-20(fp)
 8014a80:	00bfff84 	movi	r2,-2
 8014a84:	1884703a 	and	r2,r3,r2
 8014a88:	1001703a 	wrctl	status,r2
  
  return context;
 8014a8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014a90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8014a94:	00c00044 	movi	r3,1
 8014a98:	e0bffa17 	ldw	r2,-24(fp)
 8014a9c:	1884983a 	sll	r2,r3,r2
 8014aa0:	1007883a 	mov	r3,r2
 8014aa4:	d0a6f917 	ldw	r2,-25628(gp)
 8014aa8:	1884b03a 	or	r2,r3,r2
 8014aac:	d0a6f915 	stw	r2,-25628(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014ab0:	d0a6f917 	ldw	r2,-25628(gp)
 8014ab4:	100170fa 	wrctl	ienable,r2
 8014ab8:	e0bffc17 	ldw	r2,-16(fp)
 8014abc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ac0:	e0bffd17 	ldw	r2,-12(fp)
 8014ac4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014ac8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014acc:	0001883a 	nop
}
 8014ad0:	e037883a 	mov	sp,fp
 8014ad4:	df000017 	ldw	fp,0(sp)
 8014ad8:	dec00104 	addi	sp,sp,4
 8014adc:	f800283a 	ret

08014ae0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8014ae0:	defff904 	addi	sp,sp,-28
 8014ae4:	df000615 	stw	fp,24(sp)
 8014ae8:	df000604 	addi	fp,sp,24
 8014aec:	e13ffe15 	stw	r4,-8(fp)
 8014af0:	e17fff15 	stw	r5,-4(fp)
 8014af4:	e0bfff17 	ldw	r2,-4(fp)
 8014af8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014afc:	0005303a 	rdctl	r2,status
 8014b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014b04:	e0fffb17 	ldw	r3,-20(fp)
 8014b08:	00bfff84 	movi	r2,-2
 8014b0c:	1884703a 	and	r2,r3,r2
 8014b10:	1001703a 	wrctl	status,r2
  
  return context;
 8014b14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014b18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014b1c:	00c00044 	movi	r3,1
 8014b20:	e0bffa17 	ldw	r2,-24(fp)
 8014b24:	1884983a 	sll	r2,r3,r2
 8014b28:	0084303a 	nor	r2,zero,r2
 8014b2c:	1007883a 	mov	r3,r2
 8014b30:	d0a6f917 	ldw	r2,-25628(gp)
 8014b34:	1884703a 	and	r2,r3,r2
 8014b38:	d0a6f915 	stw	r2,-25628(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014b3c:	d0a6f917 	ldw	r2,-25628(gp)
 8014b40:	100170fa 	wrctl	ienable,r2
 8014b44:	e0bffc17 	ldw	r2,-16(fp)
 8014b48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014b4c:	e0bffd17 	ldw	r2,-12(fp)
 8014b50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014b54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8014b58:	0001883a 	nop
}
 8014b5c:	e037883a 	mov	sp,fp
 8014b60:	df000017 	ldw	fp,0(sp)
 8014b64:	dec00104 	addi	sp,sp,4
 8014b68:	f800283a 	ret

08014b6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8014b6c:	defffc04 	addi	sp,sp,-16
 8014b70:	df000315 	stw	fp,12(sp)
 8014b74:	df000304 	addi	fp,sp,12
 8014b78:	e13ffe15 	stw	r4,-8(fp)
 8014b7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8014b80:	000530fa 	rdctl	r2,ienable
 8014b84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8014b88:	00c00044 	movi	r3,1
 8014b8c:	e0bfff17 	ldw	r2,-4(fp)
 8014b90:	1884983a 	sll	r2,r3,r2
 8014b94:	1007883a 	mov	r3,r2
 8014b98:	e0bffd17 	ldw	r2,-12(fp)
 8014b9c:	1884703a 	and	r2,r3,r2
 8014ba0:	1004c03a 	cmpne	r2,r2,zero
 8014ba4:	10803fcc 	andi	r2,r2,255
}
 8014ba8:	e037883a 	mov	sp,fp
 8014bac:	df000017 	ldw	fp,0(sp)
 8014bb0:	dec00104 	addi	sp,sp,4
 8014bb4:	f800283a 	ret

08014bb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014bb8:	defff504 	addi	sp,sp,-44
 8014bbc:	dfc00a15 	stw	ra,40(sp)
 8014bc0:	df000915 	stw	fp,36(sp)
 8014bc4:	df000904 	addi	fp,sp,36
 8014bc8:	e13ffc15 	stw	r4,-16(fp)
 8014bcc:	e17ffd15 	stw	r5,-12(fp)
 8014bd0:	e1bffe15 	stw	r6,-8(fp)
 8014bd4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8014bd8:	00bffa84 	movi	r2,-22
 8014bdc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8014be0:	e0bffd17 	ldw	r2,-12(fp)
 8014be4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014be8:	e0bff817 	ldw	r2,-32(fp)
 8014bec:	10800808 	cmpgei	r2,r2,32
 8014bf0:	1000271e 	bne	r2,zero,8014c90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014bf4:	0005303a 	rdctl	r2,status
 8014bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014bfc:	e0fffb17 	ldw	r3,-20(fp)
 8014c00:	00bfff84 	movi	r2,-2
 8014c04:	1884703a 	and	r2,r3,r2
 8014c08:	1001703a 	wrctl	status,r2
  
  return context;
 8014c0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8014c10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8014c14:	008200b4 	movhi	r2,2050
 8014c18:	10a72c04 	addi	r2,r2,-25424
 8014c1c:	e0fff817 	ldw	r3,-32(fp)
 8014c20:	180690fa 	slli	r3,r3,3
 8014c24:	10c5883a 	add	r2,r2,r3
 8014c28:	e0fffe17 	ldw	r3,-8(fp)
 8014c2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8014c30:	008200b4 	movhi	r2,2050
 8014c34:	10a72c04 	addi	r2,r2,-25424
 8014c38:	e0fff817 	ldw	r3,-32(fp)
 8014c3c:	180690fa 	slli	r3,r3,3
 8014c40:	10c5883a 	add	r2,r2,r3
 8014c44:	10800104 	addi	r2,r2,4
 8014c48:	e0ffff17 	ldw	r3,-4(fp)
 8014c4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8014c50:	e0bffe17 	ldw	r2,-8(fp)
 8014c54:	10000526 	beq	r2,zero,8014c6c <alt_iic_isr_register+0xb4>
 8014c58:	e0bff817 	ldw	r2,-32(fp)
 8014c5c:	100b883a 	mov	r5,r2
 8014c60:	e13ffc17 	ldw	r4,-16(fp)
 8014c64:	8014a580 	call	8014a58 <alt_ic_irq_enable>
 8014c68:	00000406 	br	8014c7c <alt_iic_isr_register+0xc4>
 8014c6c:	e0bff817 	ldw	r2,-32(fp)
 8014c70:	100b883a 	mov	r5,r2
 8014c74:	e13ffc17 	ldw	r4,-16(fp)
 8014c78:	8014ae00 	call	8014ae0 <alt_ic_irq_disable>
 8014c7c:	e0bff715 	stw	r2,-36(fp)
 8014c80:	e0bffa17 	ldw	r2,-24(fp)
 8014c84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014c88:	e0bff917 	ldw	r2,-28(fp)
 8014c8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8014c90:	e0bff717 	ldw	r2,-36(fp)
}
 8014c94:	e037883a 	mov	sp,fp
 8014c98:	dfc00117 	ldw	ra,4(sp)
 8014c9c:	df000017 	ldw	fp,0(sp)
 8014ca0:	dec00204 	addi	sp,sp,8
 8014ca4:	f800283a 	ret

08014ca8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8014ca8:	defff904 	addi	sp,sp,-28
 8014cac:	dfc00615 	stw	ra,24(sp)
 8014cb0:	df000515 	stw	fp,20(sp)
 8014cb4:	df000504 	addi	fp,sp,20
 8014cb8:	e13ffc15 	stw	r4,-16(fp)
 8014cbc:	e17ffd15 	stw	r5,-12(fp)
 8014cc0:	e1bffe15 	stw	r6,-8(fp)
 8014cc4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8014cc8:	e1bfff17 	ldw	r6,-4(fp)
 8014ccc:	e17ffe17 	ldw	r5,-8(fp)
 8014cd0:	e13ffd17 	ldw	r4,-12(fp)
 8014cd4:	800eb400 	call	800eb40 <open>
 8014cd8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8014cdc:	e0bffb17 	ldw	r2,-20(fp)
 8014ce0:	10001c16 	blt	r2,zero,8014d54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014ce4:	00820074 	movhi	r2,2049
 8014ce8:	109a3d04 	addi	r2,r2,26868
 8014cec:	e0fffb17 	ldw	r3,-20(fp)
 8014cf0:	18c00324 	muli	r3,r3,12
 8014cf4:	10c5883a 	add	r2,r2,r3
 8014cf8:	10c00017 	ldw	r3,0(r2)
 8014cfc:	e0bffc17 	ldw	r2,-16(fp)
 8014d00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8014d04:	00820074 	movhi	r2,2049
 8014d08:	109a3d04 	addi	r2,r2,26868
 8014d0c:	e0fffb17 	ldw	r3,-20(fp)
 8014d10:	18c00324 	muli	r3,r3,12
 8014d14:	10c5883a 	add	r2,r2,r3
 8014d18:	10800104 	addi	r2,r2,4
 8014d1c:	10c00017 	ldw	r3,0(r2)
 8014d20:	e0bffc17 	ldw	r2,-16(fp)
 8014d24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8014d28:	00820074 	movhi	r2,2049
 8014d2c:	109a3d04 	addi	r2,r2,26868
 8014d30:	e0fffb17 	ldw	r3,-20(fp)
 8014d34:	18c00324 	muli	r3,r3,12
 8014d38:	10c5883a 	add	r2,r2,r3
 8014d3c:	10800204 	addi	r2,r2,8
 8014d40:	10c00017 	ldw	r3,0(r2)
 8014d44:	e0bffc17 	ldw	r2,-16(fp)
 8014d48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8014d4c:	e13ffb17 	ldw	r4,-20(fp)
 8014d50:	800edcc0 	call	800edcc <alt_release_fd>
  }
} 
 8014d54:	0001883a 	nop
 8014d58:	e037883a 	mov	sp,fp
 8014d5c:	dfc00117 	ldw	ra,4(sp)
 8014d60:	df000017 	ldw	fp,0(sp)
 8014d64:	dec00204 	addi	sp,sp,8
 8014d68:	f800283a 	ret

08014d6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8014d6c:	defffb04 	addi	sp,sp,-20
 8014d70:	dfc00415 	stw	ra,16(sp)
 8014d74:	df000315 	stw	fp,12(sp)
 8014d78:	df000304 	addi	fp,sp,12
 8014d7c:	e13ffd15 	stw	r4,-12(fp)
 8014d80:	e17ffe15 	stw	r5,-8(fp)
 8014d84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8014d88:	01c07fc4 	movi	r7,511
 8014d8c:	01800044 	movi	r6,1
 8014d90:	e17ffd17 	ldw	r5,-12(fp)
 8014d94:	01020074 	movhi	r4,2049
 8014d98:	211a4004 	addi	r4,r4,26880
 8014d9c:	8014ca80 	call	8014ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8014da0:	01c07fc4 	movi	r7,511
 8014da4:	000d883a 	mov	r6,zero
 8014da8:	e17ffe17 	ldw	r5,-8(fp)
 8014dac:	01020074 	movhi	r4,2049
 8014db0:	211a3d04 	addi	r4,r4,26868
 8014db4:	8014ca80 	call	8014ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014db8:	01c07fc4 	movi	r7,511
 8014dbc:	01800044 	movi	r6,1
 8014dc0:	e17fff17 	ldw	r5,-4(fp)
 8014dc4:	01020074 	movhi	r4,2049
 8014dc8:	211a4304 	addi	r4,r4,26892
 8014dcc:	8014ca80 	call	8014ca8 <alt_open_fd>
}  
 8014dd0:	0001883a 	nop
 8014dd4:	e037883a 	mov	sp,fp
 8014dd8:	dfc00117 	ldw	ra,4(sp)
 8014ddc:	df000017 	ldw	fp,0(sp)
 8014de0:	dec00204 	addi	sp,sp,8
 8014de4:	f800283a 	ret

08014de8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8014de8:	defffa04 	addi	sp,sp,-24
 8014dec:	df000515 	stw	fp,20(sp)
 8014df0:	df000504 	addi	fp,sp,20
 8014df4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014df8:	0005303a 	rdctl	r2,status
 8014dfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014e00:	e0fffc17 	ldw	r3,-16(fp)
 8014e04:	00bfff84 	movi	r2,-2
 8014e08:	1884703a 	and	r2,r3,r2
 8014e0c:	1001703a 	wrctl	status,r2
  
  return context;
 8014e10:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8014e14:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8014e18:	e0bfff17 	ldw	r2,-4(fp)
 8014e1c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8014e20:	e0bffd17 	ldw	r2,-12(fp)
 8014e24:	10800017 	ldw	r2,0(r2)
 8014e28:	e0fffd17 	ldw	r3,-12(fp)
 8014e2c:	18c00117 	ldw	r3,4(r3)
 8014e30:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8014e34:	e0bffd17 	ldw	r2,-12(fp)
 8014e38:	10800117 	ldw	r2,4(r2)
 8014e3c:	e0fffd17 	ldw	r3,-12(fp)
 8014e40:	18c00017 	ldw	r3,0(r3)
 8014e44:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8014e48:	e0bffd17 	ldw	r2,-12(fp)
 8014e4c:	e0fffd17 	ldw	r3,-12(fp)
 8014e50:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8014e54:	e0bffd17 	ldw	r2,-12(fp)
 8014e58:	e0fffd17 	ldw	r3,-12(fp)
 8014e5c:	10c00015 	stw	r3,0(r2)
 8014e60:	e0bffb17 	ldw	r2,-20(fp)
 8014e64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014e68:	e0bffe17 	ldw	r2,-8(fp)
 8014e6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8014e70:	0001883a 	nop
 8014e74:	e037883a 	mov	sp,fp
 8014e78:	df000017 	ldw	fp,0(sp)
 8014e7c:	dec00104 	addi	sp,sp,4
 8014e80:	f800283a 	ret

08014e84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8014e84:	defffb04 	addi	sp,sp,-20
 8014e88:	dfc00415 	stw	ra,16(sp)
 8014e8c:	df000315 	stw	fp,12(sp)
 8014e90:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8014e94:	d0a00e17 	ldw	r2,-32712(gp)
 8014e98:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8014e9c:	d0a6fb17 	ldw	r2,-25620(gp)
 8014ea0:	10800044 	addi	r2,r2,1
 8014ea4:	d0a6fb15 	stw	r2,-25620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014ea8:	00002e06 	br	8014f64 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8014eac:	e0bffd17 	ldw	r2,-12(fp)
 8014eb0:	10800017 	ldw	r2,0(r2)
 8014eb4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8014eb8:	e0bffd17 	ldw	r2,-12(fp)
 8014ebc:	10800403 	ldbu	r2,16(r2)
 8014ec0:	10803fcc 	andi	r2,r2,255
 8014ec4:	10000426 	beq	r2,zero,8014ed8 <alt_tick+0x54>
 8014ec8:	d0a6fb17 	ldw	r2,-25620(gp)
 8014ecc:	1000021e 	bne	r2,zero,8014ed8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8014ed0:	e0bffd17 	ldw	r2,-12(fp)
 8014ed4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8014ed8:	e0bffd17 	ldw	r2,-12(fp)
 8014edc:	10800217 	ldw	r2,8(r2)
 8014ee0:	d0e6fb17 	ldw	r3,-25620(gp)
 8014ee4:	18801d36 	bltu	r3,r2,8014f5c <alt_tick+0xd8>
 8014ee8:	e0bffd17 	ldw	r2,-12(fp)
 8014eec:	10800403 	ldbu	r2,16(r2)
 8014ef0:	10803fcc 	andi	r2,r2,255
 8014ef4:	1000191e 	bne	r2,zero,8014f5c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8014ef8:	e0bffd17 	ldw	r2,-12(fp)
 8014efc:	10800317 	ldw	r2,12(r2)
 8014f00:	e0fffd17 	ldw	r3,-12(fp)
 8014f04:	18c00517 	ldw	r3,20(r3)
 8014f08:	1809883a 	mov	r4,r3
 8014f0c:	103ee83a 	callr	r2
 8014f10:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8014f14:	e0bfff17 	ldw	r2,-4(fp)
 8014f18:	1000031e 	bne	r2,zero,8014f28 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8014f1c:	e13ffd17 	ldw	r4,-12(fp)
 8014f20:	8014de80 	call	8014de8 <alt_alarm_stop>
 8014f24:	00000d06 	br	8014f5c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8014f28:	e0bffd17 	ldw	r2,-12(fp)
 8014f2c:	10c00217 	ldw	r3,8(r2)
 8014f30:	e0bfff17 	ldw	r2,-4(fp)
 8014f34:	1887883a 	add	r3,r3,r2
 8014f38:	e0bffd17 	ldw	r2,-12(fp)
 8014f3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8014f40:	e0bffd17 	ldw	r2,-12(fp)
 8014f44:	10c00217 	ldw	r3,8(r2)
 8014f48:	d0a6fb17 	ldw	r2,-25620(gp)
 8014f4c:	1880032e 	bgeu	r3,r2,8014f5c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014f50:	e0bffd17 	ldw	r2,-12(fp)
 8014f54:	00c00044 	movi	r3,1
 8014f58:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014f5c:	e0bffe17 	ldw	r2,-8(fp)
 8014f60:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014f64:	e0fffd17 	ldw	r3,-12(fp)
 8014f68:	d0a00e04 	addi	r2,gp,-32712
 8014f6c:	18bfcf1e 	bne	r3,r2,8014eac <__alt_data_end+0xf8014eac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014f70:	0001883a 	nop
}
 8014f74:	0001883a 	nop
 8014f78:	e037883a 	mov	sp,fp
 8014f7c:	dfc00117 	ldw	ra,4(sp)
 8014f80:	df000017 	ldw	fp,0(sp)
 8014f84:	dec00204 	addi	sp,sp,8
 8014f88:	f800283a 	ret

08014f8c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8014f8c:	deffff04 	addi	sp,sp,-4
 8014f90:	df000015 	stw	fp,0(sp)
 8014f94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8014f98:	000170fa 	wrctl	ienable,zero
}
 8014f9c:	0001883a 	nop
 8014fa0:	e037883a 	mov	sp,fp
 8014fa4:	df000017 	ldw	fp,0(sp)
 8014fa8:	dec00104 	addi	sp,sp,4
 8014fac:	f800283a 	ret

08014fb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8014fb0:	defffb04 	addi	sp,sp,-20
 8014fb4:	df000415 	stw	fp,16(sp)
 8014fb8:	df000404 	addi	fp,sp,16
 8014fbc:	e13ffe15 	stw	r4,-8(fp)
 8014fc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8014fc4:	e0bfff17 	ldw	r2,-4(fp)
 8014fc8:	10840070 	cmpltui	r2,r2,4097
 8014fcc:	1000021e 	bne	r2,zero,8014fd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8014fd0:	00840004 	movi	r2,4096
 8014fd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8014fd8:	e0fffe17 	ldw	r3,-8(fp)
 8014fdc:	e0bfff17 	ldw	r2,-4(fp)
 8014fe0:	1885883a 	add	r2,r3,r2
 8014fe4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8014fe8:	e0bffe17 	ldw	r2,-8(fp)
 8014fec:	e0bffc15 	stw	r2,-16(fp)
 8014ff0:	00000506 	br	8015008 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8014ff4:	e0bffc17 	ldw	r2,-16(fp)
 8014ff8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8014ffc:	e0bffc17 	ldw	r2,-16(fp)
 8015000:	10800804 	addi	r2,r2,32
 8015004:	e0bffc15 	stw	r2,-16(fp)
 8015008:	e0fffc17 	ldw	r3,-16(fp)
 801500c:	e0bffd17 	ldw	r2,-12(fp)
 8015010:	18bff836 	bltu	r3,r2,8014ff4 <__alt_data_end+0xf8014ff4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8015014:	e0bffe17 	ldw	r2,-8(fp)
 8015018:	108007cc 	andi	r2,r2,31
 801501c:	10000226 	beq	r2,zero,8015028 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8015020:	e0bffc17 	ldw	r2,-16(fp)
 8015024:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8015028:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 801502c:	0001883a 	nop
 8015030:	e037883a 	mov	sp,fp
 8015034:	df000017 	ldw	fp,0(sp)
 8015038:	dec00104 	addi	sp,sp,4
 801503c:	f800283a 	ret

08015040 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8015040:	defffe04 	addi	sp,sp,-8
 8015044:	df000115 	stw	fp,4(sp)
 8015048:	df000104 	addi	fp,sp,4
 801504c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8015050:	e0bfff17 	ldw	r2,-4(fp)
 8015054:	10bffe84 	addi	r2,r2,-6
 8015058:	10c00428 	cmpgeui	r3,r2,16
 801505c:	18001a1e 	bne	r3,zero,80150c8 <alt_exception_cause_generated_bad_addr+0x88>
 8015060:	100690ba 	slli	r3,r2,2
 8015064:	00820074 	movhi	r2,2049
 8015068:	10941e04 	addi	r2,r2,20600
 801506c:	1885883a 	add	r2,r3,r2
 8015070:	10800017 	ldw	r2,0(r2)
 8015074:	1000683a 	jmp	r2
 8015078:	080150b8 	rdprs	zero,at,1346
 801507c:	080150b8 	rdprs	zero,at,1346
 8015080:	080150c8 	cmpgei	zero,at,1347
 8015084:	080150c8 	cmpgei	zero,at,1347
 8015088:	080150c8 	cmpgei	zero,at,1347
 801508c:	080150b8 	rdprs	zero,at,1346
 8015090:	080150c0 	call	80150c <__alt_mem_onchip_memory2_0+0x60150c>
 8015094:	080150c8 	cmpgei	zero,at,1347
 8015098:	080150b8 	rdprs	zero,at,1346
 801509c:	080150b8 	rdprs	zero,at,1346
 80150a0:	080150c8 	cmpgei	zero,at,1347
 80150a4:	080150b8 	rdprs	zero,at,1346
 80150a8:	080150c0 	call	80150c <__alt_mem_onchip_memory2_0+0x60150c>
 80150ac:	080150c8 	cmpgei	zero,at,1347
 80150b0:	080150c8 	cmpgei	zero,at,1347
 80150b4:	080150b8 	rdprs	zero,at,1346
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80150b8:	00800044 	movi	r2,1
 80150bc:	00000306 	br	80150cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80150c0:	0005883a 	mov	r2,zero
 80150c4:	00000106 	br	80150cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80150c8:	0005883a 	mov	r2,zero
  }
}
 80150cc:	e037883a 	mov	sp,fp
 80150d0:	df000017 	ldw	fp,0(sp)
 80150d4:	dec00104 	addi	sp,sp,4
 80150d8:	f800283a 	ret

080150dc <atexit>:
 80150dc:	200b883a 	mov	r5,r4
 80150e0:	000f883a 	mov	r7,zero
 80150e4:	000d883a 	mov	r6,zero
 80150e8:	0009883a 	mov	r4,zero
 80150ec:	80151a41 	jmpi	80151a4 <__register_exitproc>

080150f0 <exit>:
 80150f0:	defffe04 	addi	sp,sp,-8
 80150f4:	000b883a 	mov	r5,zero
 80150f8:	dc000015 	stw	r16,0(sp)
 80150fc:	dfc00115 	stw	ra,4(sp)
 8015100:	2021883a 	mov	r16,r4
 8015104:	80152bc0 	call	80152bc <__call_exitprocs>
 8015108:	00820074 	movhi	r2,2049
 801510c:	109ecb04 	addi	r2,r2,31532
 8015110:	11000017 	ldw	r4,0(r2)
 8015114:	20800f17 	ldw	r2,60(r4)
 8015118:	10000126 	beq	r2,zero,8015120 <exit+0x30>
 801511c:	103ee83a 	callr	r2
 8015120:	8009883a 	mov	r4,r16
 8015124:	801543c0 	call	801543c <_exit>

08015128 <memcmp>:
 8015128:	01c000c4 	movi	r7,3
 801512c:	3980192e 	bgeu	r7,r6,8015194 <memcmp+0x6c>
 8015130:	2144b03a 	or	r2,r4,r5
 8015134:	11c4703a 	and	r2,r2,r7
 8015138:	10000f26 	beq	r2,zero,8015178 <memcmp+0x50>
 801513c:	20800003 	ldbu	r2,0(r4)
 8015140:	28c00003 	ldbu	r3,0(r5)
 8015144:	10c0151e 	bne	r2,r3,801519c <memcmp+0x74>
 8015148:	31bfff84 	addi	r6,r6,-2
 801514c:	01ffffc4 	movi	r7,-1
 8015150:	00000406 	br	8015164 <memcmp+0x3c>
 8015154:	20800003 	ldbu	r2,0(r4)
 8015158:	28c00003 	ldbu	r3,0(r5)
 801515c:	31bfffc4 	addi	r6,r6,-1
 8015160:	10c00e1e 	bne	r2,r3,801519c <memcmp+0x74>
 8015164:	21000044 	addi	r4,r4,1
 8015168:	29400044 	addi	r5,r5,1
 801516c:	31fff91e 	bne	r6,r7,8015154 <__alt_data_end+0xf8015154>
 8015170:	0005883a 	mov	r2,zero
 8015174:	f800283a 	ret
 8015178:	20c00017 	ldw	r3,0(r4)
 801517c:	28800017 	ldw	r2,0(r5)
 8015180:	18bfee1e 	bne	r3,r2,801513c <__alt_data_end+0xf801513c>
 8015184:	31bfff04 	addi	r6,r6,-4
 8015188:	21000104 	addi	r4,r4,4
 801518c:	29400104 	addi	r5,r5,4
 8015190:	39bff936 	bltu	r7,r6,8015178 <__alt_data_end+0xf8015178>
 8015194:	303fe91e 	bne	r6,zero,801513c <__alt_data_end+0xf801513c>
 8015198:	003ff506 	br	8015170 <__alt_data_end+0xf8015170>
 801519c:	10c5c83a 	sub	r2,r2,r3
 80151a0:	f800283a 	ret

080151a4 <__register_exitproc>:
 80151a4:	defffa04 	addi	sp,sp,-24
 80151a8:	dc000315 	stw	r16,12(sp)
 80151ac:	04020074 	movhi	r16,2049
 80151b0:	841ecb04 	addi	r16,r16,31532
 80151b4:	80c00017 	ldw	r3,0(r16)
 80151b8:	dc400415 	stw	r17,16(sp)
 80151bc:	dfc00515 	stw	ra,20(sp)
 80151c0:	18805217 	ldw	r2,328(r3)
 80151c4:	2023883a 	mov	r17,r4
 80151c8:	10003726 	beq	r2,zero,80152a8 <__register_exitproc+0x104>
 80151cc:	10c00117 	ldw	r3,4(r2)
 80151d0:	010007c4 	movi	r4,31
 80151d4:	20c00e16 	blt	r4,r3,8015210 <__register_exitproc+0x6c>
 80151d8:	1a000044 	addi	r8,r3,1
 80151dc:	8800221e 	bne	r17,zero,8015268 <__register_exitproc+0xc4>
 80151e0:	18c00084 	addi	r3,r3,2
 80151e4:	18c7883a 	add	r3,r3,r3
 80151e8:	18c7883a 	add	r3,r3,r3
 80151ec:	12000115 	stw	r8,4(r2)
 80151f0:	10c7883a 	add	r3,r2,r3
 80151f4:	19400015 	stw	r5,0(r3)
 80151f8:	0005883a 	mov	r2,zero
 80151fc:	dfc00517 	ldw	ra,20(sp)
 8015200:	dc400417 	ldw	r17,16(sp)
 8015204:	dc000317 	ldw	r16,12(sp)
 8015208:	dec00604 	addi	sp,sp,24
 801520c:	f800283a 	ret
 8015210:	00800034 	movhi	r2,0
 8015214:	10800004 	addi	r2,r2,0
 8015218:	10002626 	beq	r2,zero,80152b4 <__register_exitproc+0x110>
 801521c:	01006404 	movi	r4,400
 8015220:	d9400015 	stw	r5,0(sp)
 8015224:	d9800115 	stw	r6,4(sp)
 8015228:	d9c00215 	stw	r7,8(sp)
 801522c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8015230:	d9400017 	ldw	r5,0(sp)
 8015234:	d9800117 	ldw	r6,4(sp)
 8015238:	d9c00217 	ldw	r7,8(sp)
 801523c:	10001d26 	beq	r2,zero,80152b4 <__register_exitproc+0x110>
 8015240:	81000017 	ldw	r4,0(r16)
 8015244:	10000115 	stw	zero,4(r2)
 8015248:	02000044 	movi	r8,1
 801524c:	22405217 	ldw	r9,328(r4)
 8015250:	0007883a 	mov	r3,zero
 8015254:	12400015 	stw	r9,0(r2)
 8015258:	20805215 	stw	r2,328(r4)
 801525c:	10006215 	stw	zero,392(r2)
 8015260:	10006315 	stw	zero,396(r2)
 8015264:	883fde26 	beq	r17,zero,80151e0 <__alt_data_end+0xf80151e0>
 8015268:	18c9883a 	add	r4,r3,r3
 801526c:	2109883a 	add	r4,r4,r4
 8015270:	1109883a 	add	r4,r2,r4
 8015274:	21802215 	stw	r6,136(r4)
 8015278:	01800044 	movi	r6,1
 801527c:	12406217 	ldw	r9,392(r2)
 8015280:	30cc983a 	sll	r6,r6,r3
 8015284:	4992b03a 	or	r9,r9,r6
 8015288:	12406215 	stw	r9,392(r2)
 801528c:	21c04215 	stw	r7,264(r4)
 8015290:	01000084 	movi	r4,2
 8015294:	893fd21e 	bne	r17,r4,80151e0 <__alt_data_end+0xf80151e0>
 8015298:	11006317 	ldw	r4,396(r2)
 801529c:	218cb03a 	or	r6,r4,r6
 80152a0:	11806315 	stw	r6,396(r2)
 80152a4:	003fce06 	br	80151e0 <__alt_data_end+0xf80151e0>
 80152a8:	18805304 	addi	r2,r3,332
 80152ac:	18805215 	stw	r2,328(r3)
 80152b0:	003fc606 	br	80151cc <__alt_data_end+0xf80151cc>
 80152b4:	00bfffc4 	movi	r2,-1
 80152b8:	003fd006 	br	80151fc <__alt_data_end+0xf80151fc>

080152bc <__call_exitprocs>:
 80152bc:	defff504 	addi	sp,sp,-44
 80152c0:	df000915 	stw	fp,36(sp)
 80152c4:	dd400615 	stw	r21,24(sp)
 80152c8:	dc800315 	stw	r18,12(sp)
 80152cc:	dfc00a15 	stw	ra,40(sp)
 80152d0:	ddc00815 	stw	r23,32(sp)
 80152d4:	dd800715 	stw	r22,28(sp)
 80152d8:	dd000515 	stw	r20,20(sp)
 80152dc:	dcc00415 	stw	r19,16(sp)
 80152e0:	dc400215 	stw	r17,8(sp)
 80152e4:	dc000115 	stw	r16,4(sp)
 80152e8:	d9000015 	stw	r4,0(sp)
 80152ec:	2839883a 	mov	fp,r5
 80152f0:	04800044 	movi	r18,1
 80152f4:	057fffc4 	movi	r21,-1
 80152f8:	00820074 	movhi	r2,2049
 80152fc:	109ecb04 	addi	r2,r2,31532
 8015300:	12000017 	ldw	r8,0(r2)
 8015304:	45005217 	ldw	r20,328(r8)
 8015308:	44c05204 	addi	r19,r8,328
 801530c:	a0001c26 	beq	r20,zero,8015380 <__call_exitprocs+0xc4>
 8015310:	a0800117 	ldw	r2,4(r20)
 8015314:	15ffffc4 	addi	r23,r2,-1
 8015318:	b8000d16 	blt	r23,zero,8015350 <__call_exitprocs+0x94>
 801531c:	14000044 	addi	r16,r2,1
 8015320:	8421883a 	add	r16,r16,r16
 8015324:	8421883a 	add	r16,r16,r16
 8015328:	84402004 	addi	r17,r16,128
 801532c:	a463883a 	add	r17,r20,r17
 8015330:	a421883a 	add	r16,r20,r16
 8015334:	e0001e26 	beq	fp,zero,80153b0 <__call_exitprocs+0xf4>
 8015338:	80804017 	ldw	r2,256(r16)
 801533c:	e0801c26 	beq	fp,r2,80153b0 <__call_exitprocs+0xf4>
 8015340:	bdffffc4 	addi	r23,r23,-1
 8015344:	843fff04 	addi	r16,r16,-4
 8015348:	8c7fff04 	addi	r17,r17,-4
 801534c:	bd7ff91e 	bne	r23,r21,8015334 <__alt_data_end+0xf8015334>
 8015350:	00800034 	movhi	r2,0
 8015354:	10800004 	addi	r2,r2,0
 8015358:	10000926 	beq	r2,zero,8015380 <__call_exitprocs+0xc4>
 801535c:	a0800117 	ldw	r2,4(r20)
 8015360:	1000301e 	bne	r2,zero,8015424 <__call_exitprocs+0x168>
 8015364:	a0800017 	ldw	r2,0(r20)
 8015368:	10003226 	beq	r2,zero,8015434 <__call_exitprocs+0x178>
 801536c:	a009883a 	mov	r4,r20
 8015370:	98800015 	stw	r2,0(r19)
 8015374:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8015378:	9d000017 	ldw	r20,0(r19)
 801537c:	a03fe41e 	bne	r20,zero,8015310 <__alt_data_end+0xf8015310>
 8015380:	dfc00a17 	ldw	ra,40(sp)
 8015384:	df000917 	ldw	fp,36(sp)
 8015388:	ddc00817 	ldw	r23,32(sp)
 801538c:	dd800717 	ldw	r22,28(sp)
 8015390:	dd400617 	ldw	r21,24(sp)
 8015394:	dd000517 	ldw	r20,20(sp)
 8015398:	dcc00417 	ldw	r19,16(sp)
 801539c:	dc800317 	ldw	r18,12(sp)
 80153a0:	dc400217 	ldw	r17,8(sp)
 80153a4:	dc000117 	ldw	r16,4(sp)
 80153a8:	dec00b04 	addi	sp,sp,44
 80153ac:	f800283a 	ret
 80153b0:	a0800117 	ldw	r2,4(r20)
 80153b4:	80c00017 	ldw	r3,0(r16)
 80153b8:	10bfffc4 	addi	r2,r2,-1
 80153bc:	15c01426 	beq	r2,r23,8015410 <__call_exitprocs+0x154>
 80153c0:	80000015 	stw	zero,0(r16)
 80153c4:	183fde26 	beq	r3,zero,8015340 <__alt_data_end+0xf8015340>
 80153c8:	95c8983a 	sll	r4,r18,r23
 80153cc:	a0806217 	ldw	r2,392(r20)
 80153d0:	a5800117 	ldw	r22,4(r20)
 80153d4:	2084703a 	and	r2,r4,r2
 80153d8:	10000b26 	beq	r2,zero,8015408 <__call_exitprocs+0x14c>
 80153dc:	a0806317 	ldw	r2,396(r20)
 80153e0:	2088703a 	and	r4,r4,r2
 80153e4:	20000c1e 	bne	r4,zero,8015418 <__call_exitprocs+0x15c>
 80153e8:	89400017 	ldw	r5,0(r17)
 80153ec:	d9000017 	ldw	r4,0(sp)
 80153f0:	183ee83a 	callr	r3
 80153f4:	a0800117 	ldw	r2,4(r20)
 80153f8:	15bfbf1e 	bne	r2,r22,80152f8 <__alt_data_end+0xf80152f8>
 80153fc:	98800017 	ldw	r2,0(r19)
 8015400:	153fcf26 	beq	r2,r20,8015340 <__alt_data_end+0xf8015340>
 8015404:	003fbc06 	br	80152f8 <__alt_data_end+0xf80152f8>
 8015408:	183ee83a 	callr	r3
 801540c:	003ff906 	br	80153f4 <__alt_data_end+0xf80153f4>
 8015410:	a5c00115 	stw	r23,4(r20)
 8015414:	003feb06 	br	80153c4 <__alt_data_end+0xf80153c4>
 8015418:	89000017 	ldw	r4,0(r17)
 801541c:	183ee83a 	callr	r3
 8015420:	003ff406 	br	80153f4 <__alt_data_end+0xf80153f4>
 8015424:	a0800017 	ldw	r2,0(r20)
 8015428:	a027883a 	mov	r19,r20
 801542c:	1029883a 	mov	r20,r2
 8015430:	003fb606 	br	801530c <__alt_data_end+0xf801530c>
 8015434:	0005883a 	mov	r2,zero
 8015438:	003ffb06 	br	8015428 <__alt_data_end+0xf8015428>

0801543c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801543c:	defffd04 	addi	sp,sp,-12
 8015440:	df000215 	stw	fp,8(sp)
 8015444:	df000204 	addi	fp,sp,8
 8015448:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801544c:	0001883a 	nop
 8015450:	e0bfff17 	ldw	r2,-4(fp)
 8015454:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015458:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801545c:	10000226 	beq	r2,zero,8015468 <_exit+0x2c>
    ALT_SIM_FAIL();
 8015460:	002af070 	cmpltui	zero,zero,43969
 8015464:	00000106 	br	801546c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8015468:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801546c:	003fff06 	br	801546c <__alt_data_end+0xf801546c>

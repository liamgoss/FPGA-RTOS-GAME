
Final.elf:     file format elf32-littlenios2
Final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00005d84 memsz 0x00005d84 flags r-x
    LOAD off    0x00006da4 vaddr 0x08005da4 paddr 0x0800783c align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x000092d4 vaddr 0x080092d4 paddr 0x080092d4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b04  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  08005da4  0800783c  00006da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  080092d4  080092d4  000092d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00200000  00200000  0000883c  2**0
                  CONTENTS
  7 .sdram        00000000  08009428  08009428  0000883c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000883c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a50  00000000  00000000  00008860  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016ae3  00000000  00000000  000092b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000061a4  00000000  00000000  0001fd93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006ae5  00000000  00000000  00025f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017a0  00000000  00000000  0002ca1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028df  00000000  00000000  0002e1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  00030a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000354e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003841a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003841d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00038429  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003842a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003842b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003842f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00038433  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00038437  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00038442  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0003844d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00038458  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000014  00000000  00000000  00038462  2**0
                  CONTENTS, READONLY
 30 .jdi          000048e1  00000000  00000000  00038476  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009522d  00000000  00000000  0003cd57  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08005d48 l    d  .rodata	00000000 .rodata
08005da4 l    d  .rwdata	00000000 .rwdata
080092d4 l    d  .bss	00000000 .bss
00200000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08009428 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08000430 l     F .text	00000008 __fp_unlock
08000444 l     F .text	0000019c __sinit.part.1
080005e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08005da4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0800308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08003198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080031c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080032b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800782c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080039d0 l     F .text	00000034 alt_dev_reg
08006778 l     O .rwdata	00001060 jtag_uart_0
080077d8 l     O .rwdata	0000002c lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003cdc l     F .text	0000020c altera_avalon_jtag_uart_irq
08003ee8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08004520 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004c7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08005180 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080052c0 l     F .text	0000003c alt_get_errno
080052fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080092fc g     O .bss	00000004 alt_instruction_exception_handler
08002e84 g     F .text	00000054 _isatty_r
0800358c g     F .text	0000007c alt_main
080002c4 g     F .text	000000c0 _puts_r
08009328 g     O .bss	00000100 alt_irq
08002bac g     F .text	00000060 _lseek_r
0800783c g       *ABS*	00000000 __flash_rwdata_start
08004688 g     F .text	00000040 alt_up_character_lcd_send_cmd
08009428 g       *ABS*	00000000 __alt_heap_start
08002160 g     F .text	0000005c __sseek
08000780 g     F .text	00000010 __sinit
080005e8 g     F .text	00000068 __sfmoreglue
0800362c g     F .text	00000024 __malloc_unlock
0800184c g     F .text	0000015c memmove
08000768 g     F .text	00000018 _cleanup
080056b8 g     F .text	00000024 altera_nios2_gen2_irq_init
08004614 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002e28 g     F .text	0000005c _fstat_r
080092e0 g     O .bss	00000004 errno
080020dc g     F .text	00000008 __seofread
080092e8 g     O .bss	00000004 alt_argv
0800f804 g       *ABS*	00000000 _gp
080065f8 g     O .rwdata	00000180 alt_fd_list
08004e1c g     F .text	00000090 alt_find_dev
08001704 g     F .text	00000148 memcpy
08004830 g     F .text	00000050 alt_up_character_lcd_write_fd
08000438 g     F .text	0000000c _cleanup_r
08005244 g     F .text	0000007c alt_io_redirect
08005d48 g       *ABS*	00000000 __DTOR_END__
08000384 g     F .text	00000014 puts
08005918 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080040e0 g     F .text	0000021c altera_avalon_jtag_uart_read
00200000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002fd0 g     F .text	00000064 .hidden __udivsi3
080032ec g     F .text	000000a4 isatty
08005888 g     F .text	00000090 alt_icache_flush
080092dc g     O .bss	00000004 __malloc_top_pad
080007d0 g     F .text	000004bc __sfvwrite_r
08002034 g     F .text	00000054 _sbrk_r
08002dc8 g     F .text	00000060 _read_r
08007824 g     O .rwdata	00000004 alt_max_fd
080023cc g     F .text	000000f0 _fclose_r
08002748 g     F .text	00000030 fflush
080092d8 g     O .bss	00000004 __malloc_max_sbrked_mem
080034b8 g     F .text	000000d4 lseek
08007804 g     O .rwdata	00000004 _global_impure_ptr
08001ad0 g     F .text	00000564 _realloc_r
08009428 g       *ABS*	00000000 __bss_end
08005090 g     F .text	000000f0 alt_iic_isr_register
080055b0 g     F .text	00000108 alt_tick
080007a0 g     F .text	00000018 __fp_lock_all
08005044 g     F .text	0000004c alt_ic_irq_enabled
08005514 g     F .text	0000009c alt_alarm_stop
080092f0 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
080065d0 g     O .rwdata	00000028 alt_dev_null
08004ad0 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
08004c34 g     F .text	00000048 alt_dcache_flush_all
0800783c g       *ABS*	00000000 __ram_rwdata_end
0800781c g     O .rwdata	00000008 alt_dev_list
080038d8 g     F .text	000000f8 write
08005da4 g       *ABS*	00000000 __ram_rodata_end
08003200 g     F .text	000000b0 fstat
08003034 g     F .text	00000058 .hidden __umodsi3
08009428 g       *ABS*	00000000 end
08003c1c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08005d48 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08004598 g     F .text	0000007c alt_avalon_timer_sc_init
080042fc g     F .text	00000224 altera_avalon_jtag_uart_write
08000790 g     F .text	00000004 __sfp_lock_acquire
08001620 g     F .text	000000e4 memchr
0800473c g     F .text	0000007c alt_up_character_lcd_write
0800289c g     F .text	00000310 _free_r
08005b94 g     F .text	00000180 __call_exitprocs
0800780c g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
080092f4 g     O .bss	00000004 _alt_tick_rate
080092f8 g     O .bss	00000004 _alt_nticks
0800368c g     F .text	000000fc read
08003a3c g     F .text	0000007c alt_sys_init
08004980 g     F .text	0000008c alt_up_character_lcd_shift_display
08005a7c g     F .text	00000118 __register_exitproc
08004a0c g     F .text	0000008c alt_up_character_lcd_erase_pos
08003f88 g     F .text	00000068 altera_avalon_jtag_uart_close
08005da4 g       *ABS*	00000000 __ram_rwdata_start
08005d48 g       *ABS*	00000000 __ram_rodata_start
08009300 g     O .bss	00000028 __malloc_current_mallinfo
08003ab8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080057e4 g     F .text	000000a4 alt_get_fd
08002378 g     F .text	00000054 _close_r
08005a00 g     F .text	0000007c memcmp
08003b78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08009428 g       *ABS*	00000000 __alt_stack_base
08003bc8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002224 g     F .text	00000154 __swsetup_r
08000650 g     F .text	00000118 __sfp
080061c8 g     O .rwdata	00000408 __malloc_av_
0800079c g     F .text	00000004 __sinit_lock_release
08002088 g     F .text	00000054 __sread
080056dc g     F .text	00000108 alt_find_file
08004cb8 g     F .text	000000a4 alt_dev_llist_insert
08003608 g     F .text	00000024 __malloc_lock
080037ec g     F .text	000000b0 sbrk
080026ec g     F .text	0000005c _fflush_r
080092d4 g       *ABS*	00000000 __bss_start
080019a8 g     F .text	00000128 memset
08000290 g     F .text	00000034 main
080092ec g     O .bss	00000004 alt_envp
080092d4 g     O .bss	00000004 __malloc_max_total_mem
08003b18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080048f4 g     F .text	0000008c alt_up_character_lcd_shift_cursor
080021bc g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080024bc g     F .text	00000014 fclose
08000e14 g     F .text	0000080c _malloc_r
08007828 g     O .rwdata	00000004 alt_errno
08000c8c g     F .text	000000c4 _fwalk
08002ed8 g     F .text	00000084 .hidden __divsi3
08004700 g     F .text	0000003c alt_up_character_lcd_open_dev
08002778 g     F .text	00000124 _malloc_trim_r
08005d48 g       *ABS*	00000000 __CTOR_END__
080046c8 g     F .text	00000038 alt_up_character_lcd_init
08005d48 g       *ABS*	00000000 __flash_rodata_start
08005d48 g       *ABS*	00000000 __DTOR_LIST__
08003a04 g     F .text	00000038 alt_irq_init
08003788 g     F .text	00000064 alt_release_fd
08004a98 g     F .text	00000038 alt_up_character_lcd_cursor_off
080059b4 g     F .text	00000014 atexit
080021c4 g     F .text	00000060 _write_r
08007808 g     O .rwdata	00000004 _impure_ptr
080092e4 g     O .bss	00000004 alt_argc
080024d0 g     F .text	0000021c __sflush_r
08004dbc g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
080007b8 g     F .text	00000018 __fp_unlock_all
08007814 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004ee0 g     F .text	00000050 alt_ic_isr_register
0800783c g       *ABS*	00000000 _edata
08009428 g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
08003ff0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08004fb8 g     F .text	0000008c alt_ic_irq_disable
080020e4 g     F .text	0000007c __swrite
08007810 g     O .rwdata	00000004 __malloc_trim_threshold
080059c8 g     F .text	00000038 exit
08000d50 g     F .text	000000c4 _fwalk_reent
08002f5c g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000794 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080047b8 g     F .text	00000078 alt_up_character_lcd_string
08005d14 g     F .text	00000034 _exit
08004b08 g     F .text	0000012c alt_alarm_start
08002c0c g     F .text	000001bc __smakebuf_r
08000398 g     F .text	00000098 strlen
080053c0 g     F .text	00000154 open
08004eac g     F .text	00000034 alt_icache_flush_all
08004880 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08007830 g     O .rwdata	00000004 alt_priority_mask
08004f30 g     F .text	00000088 alt_ic_irq_enable
08007834 g     O .rwdata	00000008 alt_alarm_list
08004d5c g     F .text	00000060 _do_ctors
080030c8 g     F .text	000000d0 close
080033f8 g     F .text	00000084 alt_load
08000798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a4ca04 	addi	r2,r2,-27864
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a4ca04 	addi	r2,r2,-27864
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6be17 	ldw	r2,-25864(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6be17 	ldw	r2,-25864(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xf8000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 8000260:	d6be0114 	ori	gp,gp,63492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10a4b514 	ori	r2,r2,37588

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18e50a14 	ori	r3,r3,37928

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xf8000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	80033f80 	call	80033f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800358c0 	call	800358c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xf800028c>

08000290 <main>:
 */

#include <stdio.h>

int main()
{
 8000290:	defffe04 	addi	sp,sp,-8
 8000294:	dfc00115 	stw	ra,4(sp)
 8000298:	df000015 	stw	fp,0(sp)
 800029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 80002a0:	01020034 	movhi	r4,2048
 80002a4:	21175204 	addi	r4,r4,23880
 80002a8:	80003840 	call	8000384 <puts>

  return 0;
 80002ac:	0005883a 	mov	r2,zero
}
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	dfc00117 	ldw	ra,4(sp)
 80002b8:	df000017 	ldw	fp,0(sp)
 80002bc:	dec00204 	addi	sp,sp,8
 80002c0:	f800283a 	ret

080002c4 <_puts_r>:
 80002c4:	defff604 	addi	sp,sp,-40
 80002c8:	dc000715 	stw	r16,28(sp)
 80002cc:	2021883a 	mov	r16,r4
 80002d0:	2809883a 	mov	r4,r5
 80002d4:	dc400815 	stw	r17,32(sp)
 80002d8:	dfc00915 	stw	ra,36(sp)
 80002dc:	2823883a 	mov	r17,r5
 80002e0:	80003980 	call	8000398 <strlen>
 80002e4:	10c00044 	addi	r3,r2,1
 80002e8:	d8800115 	stw	r2,4(sp)
 80002ec:	00820034 	movhi	r2,2048
 80002f0:	10975704 	addi	r2,r2,23900
 80002f4:	d8800215 	stw	r2,8(sp)
 80002f8:	00800044 	movi	r2,1
 80002fc:	d8800315 	stw	r2,12(sp)
 8000300:	00800084 	movi	r2,2
 8000304:	dc400015 	stw	r17,0(sp)
 8000308:	d8c00615 	stw	r3,24(sp)
 800030c:	dec00415 	stw	sp,16(sp)
 8000310:	d8800515 	stw	r2,20(sp)
 8000314:	80000226 	beq	r16,zero,8000320 <_puts_r+0x5c>
 8000318:	80800e17 	ldw	r2,56(r16)
 800031c:	10001426 	beq	r2,zero,8000370 <_puts_r+0xac>
 8000320:	81400217 	ldw	r5,8(r16)
 8000324:	2880030b 	ldhu	r2,12(r5)
 8000328:	10c8000c 	andi	r3,r2,8192
 800032c:	1800061e 	bne	r3,zero,8000348 <_puts_r+0x84>
 8000330:	29001917 	ldw	r4,100(r5)
 8000334:	00f7ffc4 	movi	r3,-8193
 8000338:	10880014 	ori	r2,r2,8192
 800033c:	20c6703a 	and	r3,r4,r3
 8000340:	2880030d 	sth	r2,12(r5)
 8000344:	28c01915 	stw	r3,100(r5)
 8000348:	d9800404 	addi	r6,sp,16
 800034c:	8009883a 	mov	r4,r16
 8000350:	80007d00 	call	80007d0 <__sfvwrite_r>
 8000354:	1000091e 	bne	r2,zero,800037c <_puts_r+0xb8>
 8000358:	00800284 	movi	r2,10
 800035c:	dfc00917 	ldw	ra,36(sp)
 8000360:	dc400817 	ldw	r17,32(sp)
 8000364:	dc000717 	ldw	r16,28(sp)
 8000368:	dec00a04 	addi	sp,sp,40
 800036c:	f800283a 	ret
 8000370:	8009883a 	mov	r4,r16
 8000374:	80007800 	call	8000780 <__sinit>
 8000378:	003fe906 	br	8000320 <__alt_data_end+0xf8000320>
 800037c:	00bfffc4 	movi	r2,-1
 8000380:	003ff606 	br	800035c <__alt_data_end+0xf800035c>

08000384 <puts>:
 8000384:	00820034 	movhi	r2,2048
 8000388:	109e0204 	addi	r2,r2,30728
 800038c:	200b883a 	mov	r5,r4
 8000390:	11000017 	ldw	r4,0(r2)
 8000394:	80002c41 	jmpi	80002c4 <_puts_r>

08000398 <strlen>:
 8000398:	208000cc 	andi	r2,r4,3
 800039c:	10002026 	beq	r2,zero,8000420 <strlen+0x88>
 80003a0:	20800007 	ldb	r2,0(r4)
 80003a4:	10002026 	beq	r2,zero,8000428 <strlen+0x90>
 80003a8:	2005883a 	mov	r2,r4
 80003ac:	00000206 	br	80003b8 <strlen+0x20>
 80003b0:	10c00007 	ldb	r3,0(r2)
 80003b4:	18001826 	beq	r3,zero,8000418 <strlen+0x80>
 80003b8:	10800044 	addi	r2,r2,1
 80003bc:	10c000cc 	andi	r3,r2,3
 80003c0:	183ffb1e 	bne	r3,zero,80003b0 <__alt_data_end+0xf80003b0>
 80003c4:	10c00017 	ldw	r3,0(r2)
 80003c8:	01ffbff4 	movhi	r7,65279
 80003cc:	39ffbfc4 	addi	r7,r7,-257
 80003d0:	00ca303a 	nor	r5,zero,r3
 80003d4:	01a02074 	movhi	r6,32897
 80003d8:	19c7883a 	add	r3,r3,r7
 80003dc:	31a02004 	addi	r6,r6,-32640
 80003e0:	1946703a 	and	r3,r3,r5
 80003e4:	1986703a 	and	r3,r3,r6
 80003e8:	1800091e 	bne	r3,zero,8000410 <strlen+0x78>
 80003ec:	10800104 	addi	r2,r2,4
 80003f0:	10c00017 	ldw	r3,0(r2)
 80003f4:	19cb883a 	add	r5,r3,r7
 80003f8:	00c6303a 	nor	r3,zero,r3
 80003fc:	28c6703a 	and	r3,r5,r3
 8000400:	1986703a 	and	r3,r3,r6
 8000404:	183ff926 	beq	r3,zero,80003ec <__alt_data_end+0xf80003ec>
 8000408:	00000106 	br	8000410 <strlen+0x78>
 800040c:	10800044 	addi	r2,r2,1
 8000410:	10c00007 	ldb	r3,0(r2)
 8000414:	183ffd1e 	bne	r3,zero,800040c <__alt_data_end+0xf800040c>
 8000418:	1105c83a 	sub	r2,r2,r4
 800041c:	f800283a 	ret
 8000420:	2005883a 	mov	r2,r4
 8000424:	003fe706 	br	80003c4 <__alt_data_end+0xf80003c4>
 8000428:	0005883a 	mov	r2,zero
 800042c:	f800283a 	ret

08000430 <__fp_unlock>:
 8000430:	0005883a 	mov	r2,zero
 8000434:	f800283a 	ret

08000438 <_cleanup_r>:
 8000438:	01420034 	movhi	r5,2048
 800043c:	2948f304 	addi	r5,r5,9164
 8000440:	8000d501 	jmpi	8000d50 <_fwalk_reent>

08000444 <__sinit.part.1>:
 8000444:	defff704 	addi	sp,sp,-36
 8000448:	00c20034 	movhi	r3,2048
 800044c:	dfc00815 	stw	ra,32(sp)
 8000450:	ddc00715 	stw	r23,28(sp)
 8000454:	dd800615 	stw	r22,24(sp)
 8000458:	dd400515 	stw	r21,20(sp)
 800045c:	dd000415 	stw	r20,16(sp)
 8000460:	dcc00315 	stw	r19,12(sp)
 8000464:	dc800215 	stw	r18,8(sp)
 8000468:	dc400115 	stw	r17,4(sp)
 800046c:	dc000015 	stw	r16,0(sp)
 8000470:	18c10e04 	addi	r3,r3,1080
 8000474:	24000117 	ldw	r16,4(r4)
 8000478:	20c00f15 	stw	r3,60(r4)
 800047c:	2080bb04 	addi	r2,r4,748
 8000480:	00c000c4 	movi	r3,3
 8000484:	20c0b915 	stw	r3,740(r4)
 8000488:	2080ba15 	stw	r2,744(r4)
 800048c:	2000b815 	stw	zero,736(r4)
 8000490:	05c00204 	movi	r23,8
 8000494:	00800104 	movi	r2,4
 8000498:	2025883a 	mov	r18,r4
 800049c:	b80d883a 	mov	r6,r23
 80004a0:	81001704 	addi	r4,r16,92
 80004a4:	000b883a 	mov	r5,zero
 80004a8:	80000015 	stw	zero,0(r16)
 80004ac:	80000115 	stw	zero,4(r16)
 80004b0:	80000215 	stw	zero,8(r16)
 80004b4:	8080030d 	sth	r2,12(r16)
 80004b8:	80001915 	stw	zero,100(r16)
 80004bc:	8000038d 	sth	zero,14(r16)
 80004c0:	80000415 	stw	zero,16(r16)
 80004c4:	80000515 	stw	zero,20(r16)
 80004c8:	80000615 	stw	zero,24(r16)
 80004cc:	80019a80 	call	80019a8 <memset>
 80004d0:	05820034 	movhi	r22,2048
 80004d4:	94400217 	ldw	r17,8(r18)
 80004d8:	05420034 	movhi	r21,2048
 80004dc:	05020034 	movhi	r20,2048
 80004e0:	04c20034 	movhi	r19,2048
 80004e4:	b5882204 	addi	r22,r22,8328
 80004e8:	ad483904 	addi	r21,r21,8420
 80004ec:	a5085804 	addi	r20,r20,8544
 80004f0:	9cc86f04 	addi	r19,r19,8636
 80004f4:	85800815 	stw	r22,32(r16)
 80004f8:	85400915 	stw	r21,36(r16)
 80004fc:	85000a15 	stw	r20,40(r16)
 8000500:	84c00b15 	stw	r19,44(r16)
 8000504:	84000715 	stw	r16,28(r16)
 8000508:	00800284 	movi	r2,10
 800050c:	8880030d 	sth	r2,12(r17)
 8000510:	00800044 	movi	r2,1
 8000514:	b80d883a 	mov	r6,r23
 8000518:	89001704 	addi	r4,r17,92
 800051c:	000b883a 	mov	r5,zero
 8000520:	88000015 	stw	zero,0(r17)
 8000524:	88000115 	stw	zero,4(r17)
 8000528:	88000215 	stw	zero,8(r17)
 800052c:	88001915 	stw	zero,100(r17)
 8000530:	8880038d 	sth	r2,14(r17)
 8000534:	88000415 	stw	zero,16(r17)
 8000538:	88000515 	stw	zero,20(r17)
 800053c:	88000615 	stw	zero,24(r17)
 8000540:	80019a80 	call	80019a8 <memset>
 8000544:	94000317 	ldw	r16,12(r18)
 8000548:	00800484 	movi	r2,18
 800054c:	8c400715 	stw	r17,28(r17)
 8000550:	8d800815 	stw	r22,32(r17)
 8000554:	8d400915 	stw	r21,36(r17)
 8000558:	8d000a15 	stw	r20,40(r17)
 800055c:	8cc00b15 	stw	r19,44(r17)
 8000560:	8080030d 	sth	r2,12(r16)
 8000564:	00800084 	movi	r2,2
 8000568:	80000015 	stw	zero,0(r16)
 800056c:	80000115 	stw	zero,4(r16)
 8000570:	80000215 	stw	zero,8(r16)
 8000574:	80001915 	stw	zero,100(r16)
 8000578:	8080038d 	sth	r2,14(r16)
 800057c:	80000415 	stw	zero,16(r16)
 8000580:	80000515 	stw	zero,20(r16)
 8000584:	80000615 	stw	zero,24(r16)
 8000588:	b80d883a 	mov	r6,r23
 800058c:	000b883a 	mov	r5,zero
 8000590:	81001704 	addi	r4,r16,92
 8000594:	80019a80 	call	80019a8 <memset>
 8000598:	00800044 	movi	r2,1
 800059c:	84000715 	stw	r16,28(r16)
 80005a0:	85800815 	stw	r22,32(r16)
 80005a4:	85400915 	stw	r21,36(r16)
 80005a8:	85000a15 	stw	r20,40(r16)
 80005ac:	84c00b15 	stw	r19,44(r16)
 80005b0:	90800e15 	stw	r2,56(r18)
 80005b4:	dfc00817 	ldw	ra,32(sp)
 80005b8:	ddc00717 	ldw	r23,28(sp)
 80005bc:	dd800617 	ldw	r22,24(sp)
 80005c0:	dd400517 	ldw	r21,20(sp)
 80005c4:	dd000417 	ldw	r20,16(sp)
 80005c8:	dcc00317 	ldw	r19,12(sp)
 80005cc:	dc800217 	ldw	r18,8(sp)
 80005d0:	dc400117 	ldw	r17,4(sp)
 80005d4:	dc000017 	ldw	r16,0(sp)
 80005d8:	dec00904 	addi	sp,sp,36
 80005dc:	f800283a 	ret

080005e0 <__fp_lock>:
 80005e0:	0005883a 	mov	r2,zero
 80005e4:	f800283a 	ret

080005e8 <__sfmoreglue>:
 80005e8:	defffc04 	addi	sp,sp,-16
 80005ec:	dc400115 	stw	r17,4(sp)
 80005f0:	2c7fffc4 	addi	r17,r5,-1
 80005f4:	8c401a24 	muli	r17,r17,104
 80005f8:	dc800215 	stw	r18,8(sp)
 80005fc:	2825883a 	mov	r18,r5
 8000600:	89401d04 	addi	r5,r17,116
 8000604:	dc000015 	stw	r16,0(sp)
 8000608:	dfc00315 	stw	ra,12(sp)
 800060c:	8000e140 	call	8000e14 <_malloc_r>
 8000610:	1021883a 	mov	r16,r2
 8000614:	10000726 	beq	r2,zero,8000634 <__sfmoreglue+0x4c>
 8000618:	11000304 	addi	r4,r2,12
 800061c:	10000015 	stw	zero,0(r2)
 8000620:	14800115 	stw	r18,4(r2)
 8000624:	11000215 	stw	r4,8(r2)
 8000628:	89801a04 	addi	r6,r17,104
 800062c:	000b883a 	mov	r5,zero
 8000630:	80019a80 	call	80019a8 <memset>
 8000634:	8005883a 	mov	r2,r16
 8000638:	dfc00317 	ldw	ra,12(sp)
 800063c:	dc800217 	ldw	r18,8(sp)
 8000640:	dc400117 	ldw	r17,4(sp)
 8000644:	dc000017 	ldw	r16,0(sp)
 8000648:	dec00404 	addi	sp,sp,16
 800064c:	f800283a 	ret

08000650 <__sfp>:
 8000650:	defffb04 	addi	sp,sp,-20
 8000654:	dc000015 	stw	r16,0(sp)
 8000658:	04020034 	movhi	r16,2048
 800065c:	841e0104 	addi	r16,r16,30724
 8000660:	dcc00315 	stw	r19,12(sp)
 8000664:	2027883a 	mov	r19,r4
 8000668:	81000017 	ldw	r4,0(r16)
 800066c:	dfc00415 	stw	ra,16(sp)
 8000670:	dc800215 	stw	r18,8(sp)
 8000674:	20800e17 	ldw	r2,56(r4)
 8000678:	dc400115 	stw	r17,4(sp)
 800067c:	1000021e 	bne	r2,zero,8000688 <__sfp+0x38>
 8000680:	80004440 	call	8000444 <__sinit.part.1>
 8000684:	81000017 	ldw	r4,0(r16)
 8000688:	2480b804 	addi	r18,r4,736
 800068c:	047fffc4 	movi	r17,-1
 8000690:	91000117 	ldw	r4,4(r18)
 8000694:	94000217 	ldw	r16,8(r18)
 8000698:	213fffc4 	addi	r4,r4,-1
 800069c:	20000a16 	blt	r4,zero,80006c8 <__sfp+0x78>
 80006a0:	8080030f 	ldh	r2,12(r16)
 80006a4:	10000c26 	beq	r2,zero,80006d8 <__sfp+0x88>
 80006a8:	80c01d04 	addi	r3,r16,116
 80006ac:	00000206 	br	80006b8 <__sfp+0x68>
 80006b0:	18bfe60f 	ldh	r2,-104(r3)
 80006b4:	10000826 	beq	r2,zero,80006d8 <__sfp+0x88>
 80006b8:	213fffc4 	addi	r4,r4,-1
 80006bc:	1c3ffd04 	addi	r16,r3,-12
 80006c0:	18c01a04 	addi	r3,r3,104
 80006c4:	247ffa1e 	bne	r4,r17,80006b0 <__alt_data_end+0xf80006b0>
 80006c8:	90800017 	ldw	r2,0(r18)
 80006cc:	10001d26 	beq	r2,zero,8000744 <__sfp+0xf4>
 80006d0:	1025883a 	mov	r18,r2
 80006d4:	003fee06 	br	8000690 <__alt_data_end+0xf8000690>
 80006d8:	00bfffc4 	movi	r2,-1
 80006dc:	8080038d 	sth	r2,14(r16)
 80006e0:	00800044 	movi	r2,1
 80006e4:	8080030d 	sth	r2,12(r16)
 80006e8:	80001915 	stw	zero,100(r16)
 80006ec:	80000015 	stw	zero,0(r16)
 80006f0:	80000215 	stw	zero,8(r16)
 80006f4:	80000115 	stw	zero,4(r16)
 80006f8:	80000415 	stw	zero,16(r16)
 80006fc:	80000515 	stw	zero,20(r16)
 8000700:	80000615 	stw	zero,24(r16)
 8000704:	01800204 	movi	r6,8
 8000708:	000b883a 	mov	r5,zero
 800070c:	81001704 	addi	r4,r16,92
 8000710:	80019a80 	call	80019a8 <memset>
 8000714:	8005883a 	mov	r2,r16
 8000718:	80000c15 	stw	zero,48(r16)
 800071c:	80000d15 	stw	zero,52(r16)
 8000720:	80001115 	stw	zero,68(r16)
 8000724:	80001215 	stw	zero,72(r16)
 8000728:	dfc00417 	ldw	ra,16(sp)
 800072c:	dcc00317 	ldw	r19,12(sp)
 8000730:	dc800217 	ldw	r18,8(sp)
 8000734:	dc400117 	ldw	r17,4(sp)
 8000738:	dc000017 	ldw	r16,0(sp)
 800073c:	dec00504 	addi	sp,sp,20
 8000740:	f800283a 	ret
 8000744:	01400104 	movi	r5,4
 8000748:	9809883a 	mov	r4,r19
 800074c:	80005e80 	call	80005e8 <__sfmoreglue>
 8000750:	90800015 	stw	r2,0(r18)
 8000754:	103fde1e 	bne	r2,zero,80006d0 <__alt_data_end+0xf80006d0>
 8000758:	00800304 	movi	r2,12
 800075c:	98800015 	stw	r2,0(r19)
 8000760:	0005883a 	mov	r2,zero
 8000764:	003ff006 	br	8000728 <__alt_data_end+0xf8000728>

08000768 <_cleanup>:
 8000768:	00820034 	movhi	r2,2048
 800076c:	109e0104 	addi	r2,r2,30724
 8000770:	11000017 	ldw	r4,0(r2)
 8000774:	01420034 	movhi	r5,2048
 8000778:	2948f304 	addi	r5,r5,9164
 800077c:	8000d501 	jmpi	8000d50 <_fwalk_reent>

08000780 <__sinit>:
 8000780:	20800e17 	ldw	r2,56(r4)
 8000784:	10000126 	beq	r2,zero,800078c <__sinit+0xc>
 8000788:	f800283a 	ret
 800078c:	80004441 	jmpi	8000444 <__sinit.part.1>

08000790 <__sfp_lock_acquire>:
 8000790:	f800283a 	ret

08000794 <__sfp_lock_release>:
 8000794:	f800283a 	ret

08000798 <__sinit_lock_acquire>:
 8000798:	f800283a 	ret

0800079c <__sinit_lock_release>:
 800079c:	f800283a 	ret

080007a0 <__fp_lock_all>:
 80007a0:	00820034 	movhi	r2,2048
 80007a4:	109e0204 	addi	r2,r2,30728
 80007a8:	11000017 	ldw	r4,0(r2)
 80007ac:	01420034 	movhi	r5,2048
 80007b0:	29417804 	addi	r5,r5,1504
 80007b4:	8000c8c1 	jmpi	8000c8c <_fwalk>

080007b8 <__fp_unlock_all>:
 80007b8:	00820034 	movhi	r2,2048
 80007bc:	109e0204 	addi	r2,r2,30728
 80007c0:	11000017 	ldw	r4,0(r2)
 80007c4:	01420034 	movhi	r5,2048
 80007c8:	29410c04 	addi	r5,r5,1072
 80007cc:	8000c8c1 	jmpi	8000c8c <_fwalk>

080007d0 <__sfvwrite_r>:
 80007d0:	30800217 	ldw	r2,8(r6)
 80007d4:	10006726 	beq	r2,zero,8000974 <__sfvwrite_r+0x1a4>
 80007d8:	28c0030b 	ldhu	r3,12(r5)
 80007dc:	defff404 	addi	sp,sp,-48
 80007e0:	dd400715 	stw	r21,28(sp)
 80007e4:	dd000615 	stw	r20,24(sp)
 80007e8:	dc000215 	stw	r16,8(sp)
 80007ec:	dfc00b15 	stw	ra,44(sp)
 80007f0:	df000a15 	stw	fp,40(sp)
 80007f4:	ddc00915 	stw	r23,36(sp)
 80007f8:	dd800815 	stw	r22,32(sp)
 80007fc:	dcc00515 	stw	r19,20(sp)
 8000800:	dc800415 	stw	r18,16(sp)
 8000804:	dc400315 	stw	r17,12(sp)
 8000808:	1880020c 	andi	r2,r3,8
 800080c:	2821883a 	mov	r16,r5
 8000810:	202b883a 	mov	r21,r4
 8000814:	3029883a 	mov	r20,r6
 8000818:	10002726 	beq	r2,zero,80008b8 <__sfvwrite_r+0xe8>
 800081c:	28800417 	ldw	r2,16(r5)
 8000820:	10002526 	beq	r2,zero,80008b8 <__sfvwrite_r+0xe8>
 8000824:	1880008c 	andi	r2,r3,2
 8000828:	a4400017 	ldw	r17,0(r20)
 800082c:	10002a26 	beq	r2,zero,80008d8 <__sfvwrite_r+0x108>
 8000830:	05a00034 	movhi	r22,32768
 8000834:	0027883a 	mov	r19,zero
 8000838:	0025883a 	mov	r18,zero
 800083c:	b5bf0004 	addi	r22,r22,-1024
 8000840:	980d883a 	mov	r6,r19
 8000844:	a809883a 	mov	r4,r21
 8000848:	90004626 	beq	r18,zero,8000964 <__sfvwrite_r+0x194>
 800084c:	900f883a 	mov	r7,r18
 8000850:	b480022e 	bgeu	r22,r18,800085c <__sfvwrite_r+0x8c>
 8000854:	01e00034 	movhi	r7,32768
 8000858:	39ff0004 	addi	r7,r7,-1024
 800085c:	80800917 	ldw	r2,36(r16)
 8000860:	81400717 	ldw	r5,28(r16)
 8000864:	103ee83a 	callr	r2
 8000868:	0080570e 	bge	zero,r2,80009c8 <__sfvwrite_r+0x1f8>
 800086c:	a0c00217 	ldw	r3,8(r20)
 8000870:	98a7883a 	add	r19,r19,r2
 8000874:	90a5c83a 	sub	r18,r18,r2
 8000878:	1885c83a 	sub	r2,r3,r2
 800087c:	a0800215 	stw	r2,8(r20)
 8000880:	103fef1e 	bne	r2,zero,8000840 <__alt_data_end+0xf8000840>
 8000884:	0005883a 	mov	r2,zero
 8000888:	dfc00b17 	ldw	ra,44(sp)
 800088c:	df000a17 	ldw	fp,40(sp)
 8000890:	ddc00917 	ldw	r23,36(sp)
 8000894:	dd800817 	ldw	r22,32(sp)
 8000898:	dd400717 	ldw	r21,28(sp)
 800089c:	dd000617 	ldw	r20,24(sp)
 80008a0:	dcc00517 	ldw	r19,20(sp)
 80008a4:	dc800417 	ldw	r18,16(sp)
 80008a8:	dc400317 	ldw	r17,12(sp)
 80008ac:	dc000217 	ldw	r16,8(sp)
 80008b0:	dec00c04 	addi	sp,sp,48
 80008b4:	f800283a 	ret
 80008b8:	800b883a 	mov	r5,r16
 80008bc:	a809883a 	mov	r4,r21
 80008c0:	80022240 	call	8002224 <__swsetup_r>
 80008c4:	1000eb1e 	bne	r2,zero,8000c74 <__sfvwrite_r+0x4a4>
 80008c8:	80c0030b 	ldhu	r3,12(r16)
 80008cc:	a4400017 	ldw	r17,0(r20)
 80008d0:	1880008c 	andi	r2,r3,2
 80008d4:	103fd61e 	bne	r2,zero,8000830 <__alt_data_end+0xf8000830>
 80008d8:	1880004c 	andi	r2,r3,1
 80008dc:	10003f1e 	bne	r2,zero,80009dc <__sfvwrite_r+0x20c>
 80008e0:	0039883a 	mov	fp,zero
 80008e4:	0025883a 	mov	r18,zero
 80008e8:	90001a26 	beq	r18,zero,8000954 <__sfvwrite_r+0x184>
 80008ec:	1880800c 	andi	r2,r3,512
 80008f0:	84c00217 	ldw	r19,8(r16)
 80008f4:	10002126 	beq	r2,zero,800097c <__sfvwrite_r+0x1ac>
 80008f8:	982f883a 	mov	r23,r19
 80008fc:	94c09336 	bltu	r18,r19,8000b4c <__sfvwrite_r+0x37c>
 8000900:	1881200c 	andi	r2,r3,1152
 8000904:	10009e1e 	bne	r2,zero,8000b80 <__sfvwrite_r+0x3b0>
 8000908:	81000017 	ldw	r4,0(r16)
 800090c:	b80d883a 	mov	r6,r23
 8000910:	e00b883a 	mov	r5,fp
 8000914:	800184c0 	call	800184c <memmove>
 8000918:	80c00217 	ldw	r3,8(r16)
 800091c:	81000017 	ldw	r4,0(r16)
 8000920:	9005883a 	mov	r2,r18
 8000924:	1ce7c83a 	sub	r19,r3,r19
 8000928:	25cf883a 	add	r7,r4,r23
 800092c:	84c00215 	stw	r19,8(r16)
 8000930:	81c00015 	stw	r7,0(r16)
 8000934:	a0c00217 	ldw	r3,8(r20)
 8000938:	e0b9883a 	add	fp,fp,r2
 800093c:	90a5c83a 	sub	r18,r18,r2
 8000940:	18a7c83a 	sub	r19,r3,r2
 8000944:	a4c00215 	stw	r19,8(r20)
 8000948:	983fce26 	beq	r19,zero,8000884 <__alt_data_end+0xf8000884>
 800094c:	80c0030b 	ldhu	r3,12(r16)
 8000950:	903fe61e 	bne	r18,zero,80008ec <__alt_data_end+0xf80008ec>
 8000954:	8f000017 	ldw	fp,0(r17)
 8000958:	8c800117 	ldw	r18,4(r17)
 800095c:	8c400204 	addi	r17,r17,8
 8000960:	003fe106 	br	80008e8 <__alt_data_end+0xf80008e8>
 8000964:	8cc00017 	ldw	r19,0(r17)
 8000968:	8c800117 	ldw	r18,4(r17)
 800096c:	8c400204 	addi	r17,r17,8
 8000970:	003fb306 	br	8000840 <__alt_data_end+0xf8000840>
 8000974:	0005883a 	mov	r2,zero
 8000978:	f800283a 	ret
 800097c:	81000017 	ldw	r4,0(r16)
 8000980:	80800417 	ldw	r2,16(r16)
 8000984:	11005736 	bltu	r2,r4,8000ae4 <__sfvwrite_r+0x314>
 8000988:	85c00517 	ldw	r23,20(r16)
 800098c:	95c05536 	bltu	r18,r23,8000ae4 <__sfvwrite_r+0x314>
 8000990:	00a00034 	movhi	r2,32768
 8000994:	10bfffc4 	addi	r2,r2,-1
 8000998:	9009883a 	mov	r4,r18
 800099c:	1480012e 	bgeu	r2,r18,80009a4 <__sfvwrite_r+0x1d4>
 80009a0:	1009883a 	mov	r4,r2
 80009a4:	b80b883a 	mov	r5,r23
 80009a8:	8002ed80 	call	8002ed8 <__divsi3>
 80009ac:	15cf383a 	mul	r7,r2,r23
 80009b0:	81400717 	ldw	r5,28(r16)
 80009b4:	80800917 	ldw	r2,36(r16)
 80009b8:	e00d883a 	mov	r6,fp
 80009bc:	a809883a 	mov	r4,r21
 80009c0:	103ee83a 	callr	r2
 80009c4:	00bfdb16 	blt	zero,r2,8000934 <__alt_data_end+0xf8000934>
 80009c8:	8080030b 	ldhu	r2,12(r16)
 80009cc:	10801014 	ori	r2,r2,64
 80009d0:	8080030d 	sth	r2,12(r16)
 80009d4:	00bfffc4 	movi	r2,-1
 80009d8:	003fab06 	br	8000888 <__alt_data_end+0xf8000888>
 80009dc:	0027883a 	mov	r19,zero
 80009e0:	0011883a 	mov	r8,zero
 80009e4:	0039883a 	mov	fp,zero
 80009e8:	0025883a 	mov	r18,zero
 80009ec:	90001f26 	beq	r18,zero,8000a6c <__sfvwrite_r+0x29c>
 80009f0:	40005a26 	beq	r8,zero,8000b5c <__sfvwrite_r+0x38c>
 80009f4:	982d883a 	mov	r22,r19
 80009f8:	94c0012e 	bgeu	r18,r19,8000a00 <__sfvwrite_r+0x230>
 80009fc:	902d883a 	mov	r22,r18
 8000a00:	81000017 	ldw	r4,0(r16)
 8000a04:	80800417 	ldw	r2,16(r16)
 8000a08:	b02f883a 	mov	r23,r22
 8000a0c:	81c00517 	ldw	r7,20(r16)
 8000a10:	1100032e 	bgeu	r2,r4,8000a20 <__sfvwrite_r+0x250>
 8000a14:	80c00217 	ldw	r3,8(r16)
 8000a18:	38c7883a 	add	r3,r7,r3
 8000a1c:	1d801816 	blt	r3,r22,8000a80 <__sfvwrite_r+0x2b0>
 8000a20:	b1c03e16 	blt	r22,r7,8000b1c <__sfvwrite_r+0x34c>
 8000a24:	80800917 	ldw	r2,36(r16)
 8000a28:	81400717 	ldw	r5,28(r16)
 8000a2c:	e00d883a 	mov	r6,fp
 8000a30:	da000115 	stw	r8,4(sp)
 8000a34:	a809883a 	mov	r4,r21
 8000a38:	103ee83a 	callr	r2
 8000a3c:	102f883a 	mov	r23,r2
 8000a40:	da000117 	ldw	r8,4(sp)
 8000a44:	00bfe00e 	bge	zero,r2,80009c8 <__alt_data_end+0xf80009c8>
 8000a48:	9de7c83a 	sub	r19,r19,r23
 8000a4c:	98001f26 	beq	r19,zero,8000acc <__sfvwrite_r+0x2fc>
 8000a50:	a0800217 	ldw	r2,8(r20)
 8000a54:	e5f9883a 	add	fp,fp,r23
 8000a58:	95e5c83a 	sub	r18,r18,r23
 8000a5c:	15efc83a 	sub	r23,r2,r23
 8000a60:	a5c00215 	stw	r23,8(r20)
 8000a64:	b83f8726 	beq	r23,zero,8000884 <__alt_data_end+0xf8000884>
 8000a68:	903fe11e 	bne	r18,zero,80009f0 <__alt_data_end+0xf80009f0>
 8000a6c:	8f000017 	ldw	fp,0(r17)
 8000a70:	8c800117 	ldw	r18,4(r17)
 8000a74:	0011883a 	mov	r8,zero
 8000a78:	8c400204 	addi	r17,r17,8
 8000a7c:	003fdb06 	br	80009ec <__alt_data_end+0xf80009ec>
 8000a80:	180d883a 	mov	r6,r3
 8000a84:	e00b883a 	mov	r5,fp
 8000a88:	da000115 	stw	r8,4(sp)
 8000a8c:	d8c00015 	stw	r3,0(sp)
 8000a90:	800184c0 	call	800184c <memmove>
 8000a94:	d8c00017 	ldw	r3,0(sp)
 8000a98:	80800017 	ldw	r2,0(r16)
 8000a9c:	800b883a 	mov	r5,r16
 8000aa0:	a809883a 	mov	r4,r21
 8000aa4:	10c5883a 	add	r2,r2,r3
 8000aa8:	80800015 	stw	r2,0(r16)
 8000aac:	d8c00015 	stw	r3,0(sp)
 8000ab0:	80026ec0 	call	80026ec <_fflush_r>
 8000ab4:	d8c00017 	ldw	r3,0(sp)
 8000ab8:	da000117 	ldw	r8,4(sp)
 8000abc:	103fc21e 	bne	r2,zero,80009c8 <__alt_data_end+0xf80009c8>
 8000ac0:	182f883a 	mov	r23,r3
 8000ac4:	9de7c83a 	sub	r19,r19,r23
 8000ac8:	983fe11e 	bne	r19,zero,8000a50 <__alt_data_end+0xf8000a50>
 8000acc:	800b883a 	mov	r5,r16
 8000ad0:	a809883a 	mov	r4,r21
 8000ad4:	80026ec0 	call	80026ec <_fflush_r>
 8000ad8:	103fbb1e 	bne	r2,zero,80009c8 <__alt_data_end+0xf80009c8>
 8000adc:	0011883a 	mov	r8,zero
 8000ae0:	003fdb06 	br	8000a50 <__alt_data_end+0xf8000a50>
 8000ae4:	94c0012e 	bgeu	r18,r19,8000aec <__sfvwrite_r+0x31c>
 8000ae8:	9027883a 	mov	r19,r18
 8000aec:	980d883a 	mov	r6,r19
 8000af0:	e00b883a 	mov	r5,fp
 8000af4:	800184c0 	call	800184c <memmove>
 8000af8:	80800217 	ldw	r2,8(r16)
 8000afc:	80c00017 	ldw	r3,0(r16)
 8000b00:	14c5c83a 	sub	r2,r2,r19
 8000b04:	1cc7883a 	add	r3,r3,r19
 8000b08:	80800215 	stw	r2,8(r16)
 8000b0c:	80c00015 	stw	r3,0(r16)
 8000b10:	10004326 	beq	r2,zero,8000c20 <__sfvwrite_r+0x450>
 8000b14:	9805883a 	mov	r2,r19
 8000b18:	003f8606 	br	8000934 <__alt_data_end+0xf8000934>
 8000b1c:	b00d883a 	mov	r6,r22
 8000b20:	e00b883a 	mov	r5,fp
 8000b24:	da000115 	stw	r8,4(sp)
 8000b28:	800184c0 	call	800184c <memmove>
 8000b2c:	80800217 	ldw	r2,8(r16)
 8000b30:	80c00017 	ldw	r3,0(r16)
 8000b34:	da000117 	ldw	r8,4(sp)
 8000b38:	1585c83a 	sub	r2,r2,r22
 8000b3c:	1dad883a 	add	r22,r3,r22
 8000b40:	80800215 	stw	r2,8(r16)
 8000b44:	85800015 	stw	r22,0(r16)
 8000b48:	003fbf06 	br	8000a48 <__alt_data_end+0xf8000a48>
 8000b4c:	81000017 	ldw	r4,0(r16)
 8000b50:	9027883a 	mov	r19,r18
 8000b54:	902f883a 	mov	r23,r18
 8000b58:	003f6c06 	br	800090c <__alt_data_end+0xf800090c>
 8000b5c:	900d883a 	mov	r6,r18
 8000b60:	01400284 	movi	r5,10
 8000b64:	e009883a 	mov	r4,fp
 8000b68:	80016200 	call	8001620 <memchr>
 8000b6c:	10003e26 	beq	r2,zero,8000c68 <__sfvwrite_r+0x498>
 8000b70:	10800044 	addi	r2,r2,1
 8000b74:	1727c83a 	sub	r19,r2,fp
 8000b78:	02000044 	movi	r8,1
 8000b7c:	003f9d06 	br	80009f4 <__alt_data_end+0xf80009f4>
 8000b80:	80800517 	ldw	r2,20(r16)
 8000b84:	81400417 	ldw	r5,16(r16)
 8000b88:	81c00017 	ldw	r7,0(r16)
 8000b8c:	10a7883a 	add	r19,r2,r2
 8000b90:	9885883a 	add	r2,r19,r2
 8000b94:	1026d7fa 	srli	r19,r2,31
 8000b98:	396dc83a 	sub	r22,r7,r5
 8000b9c:	b1000044 	addi	r4,r22,1
 8000ba0:	9885883a 	add	r2,r19,r2
 8000ba4:	1027d07a 	srai	r19,r2,1
 8000ba8:	2485883a 	add	r2,r4,r18
 8000bac:	980d883a 	mov	r6,r19
 8000bb0:	9880022e 	bgeu	r19,r2,8000bbc <__sfvwrite_r+0x3ec>
 8000bb4:	1027883a 	mov	r19,r2
 8000bb8:	100d883a 	mov	r6,r2
 8000bbc:	18c1000c 	andi	r3,r3,1024
 8000bc0:	18001c26 	beq	r3,zero,8000c34 <__sfvwrite_r+0x464>
 8000bc4:	300b883a 	mov	r5,r6
 8000bc8:	a809883a 	mov	r4,r21
 8000bcc:	8000e140 	call	8000e14 <_malloc_r>
 8000bd0:	102f883a 	mov	r23,r2
 8000bd4:	10002926 	beq	r2,zero,8000c7c <__sfvwrite_r+0x4ac>
 8000bd8:	81400417 	ldw	r5,16(r16)
 8000bdc:	b00d883a 	mov	r6,r22
 8000be0:	1009883a 	mov	r4,r2
 8000be4:	80017040 	call	8001704 <memcpy>
 8000be8:	8080030b 	ldhu	r2,12(r16)
 8000bec:	00fedfc4 	movi	r3,-1153
 8000bf0:	10c4703a 	and	r2,r2,r3
 8000bf4:	10802014 	ori	r2,r2,128
 8000bf8:	8080030d 	sth	r2,12(r16)
 8000bfc:	bd89883a 	add	r4,r23,r22
 8000c00:	9d8fc83a 	sub	r7,r19,r22
 8000c04:	85c00415 	stw	r23,16(r16)
 8000c08:	84c00515 	stw	r19,20(r16)
 8000c0c:	81000015 	stw	r4,0(r16)
 8000c10:	9027883a 	mov	r19,r18
 8000c14:	81c00215 	stw	r7,8(r16)
 8000c18:	902f883a 	mov	r23,r18
 8000c1c:	003f3b06 	br	800090c <__alt_data_end+0xf800090c>
 8000c20:	800b883a 	mov	r5,r16
 8000c24:	a809883a 	mov	r4,r21
 8000c28:	80026ec0 	call	80026ec <_fflush_r>
 8000c2c:	103fb926 	beq	r2,zero,8000b14 <__alt_data_end+0xf8000b14>
 8000c30:	003f6506 	br	80009c8 <__alt_data_end+0xf80009c8>
 8000c34:	a809883a 	mov	r4,r21
 8000c38:	8001ad00 	call	8001ad0 <_realloc_r>
 8000c3c:	102f883a 	mov	r23,r2
 8000c40:	103fee1e 	bne	r2,zero,8000bfc <__alt_data_end+0xf8000bfc>
 8000c44:	81400417 	ldw	r5,16(r16)
 8000c48:	a809883a 	mov	r4,r21
 8000c4c:	800289c0 	call	800289c <_free_r>
 8000c50:	8080030b 	ldhu	r2,12(r16)
 8000c54:	00ffdfc4 	movi	r3,-129
 8000c58:	1884703a 	and	r2,r3,r2
 8000c5c:	00c00304 	movi	r3,12
 8000c60:	a8c00015 	stw	r3,0(r21)
 8000c64:	003f5906 	br	80009cc <__alt_data_end+0xf80009cc>
 8000c68:	94c00044 	addi	r19,r18,1
 8000c6c:	02000044 	movi	r8,1
 8000c70:	003f6006 	br	80009f4 <__alt_data_end+0xf80009f4>
 8000c74:	00bfffc4 	movi	r2,-1
 8000c78:	003f0306 	br	8000888 <__alt_data_end+0xf8000888>
 8000c7c:	00800304 	movi	r2,12
 8000c80:	a8800015 	stw	r2,0(r21)
 8000c84:	8080030b 	ldhu	r2,12(r16)
 8000c88:	003f5006 	br	80009cc <__alt_data_end+0xf80009cc>

08000c8c <_fwalk>:
 8000c8c:	defff704 	addi	sp,sp,-36
 8000c90:	dd000415 	stw	r20,16(sp)
 8000c94:	dfc00815 	stw	ra,32(sp)
 8000c98:	ddc00715 	stw	r23,28(sp)
 8000c9c:	dd800615 	stw	r22,24(sp)
 8000ca0:	dd400515 	stw	r21,20(sp)
 8000ca4:	dcc00315 	stw	r19,12(sp)
 8000ca8:	dc800215 	stw	r18,8(sp)
 8000cac:	dc400115 	stw	r17,4(sp)
 8000cb0:	dc000015 	stw	r16,0(sp)
 8000cb4:	2500b804 	addi	r20,r4,736
 8000cb8:	a0002326 	beq	r20,zero,8000d48 <_fwalk+0xbc>
 8000cbc:	282b883a 	mov	r21,r5
 8000cc0:	002f883a 	mov	r23,zero
 8000cc4:	05800044 	movi	r22,1
 8000cc8:	04ffffc4 	movi	r19,-1
 8000ccc:	a4400117 	ldw	r17,4(r20)
 8000cd0:	a4800217 	ldw	r18,8(r20)
 8000cd4:	8c7fffc4 	addi	r17,r17,-1
 8000cd8:	88000d16 	blt	r17,zero,8000d10 <_fwalk+0x84>
 8000cdc:	94000304 	addi	r16,r18,12
 8000ce0:	94800384 	addi	r18,r18,14
 8000ce4:	8080000b 	ldhu	r2,0(r16)
 8000ce8:	8c7fffc4 	addi	r17,r17,-1
 8000cec:	813ffd04 	addi	r4,r16,-12
 8000cf0:	b080042e 	bgeu	r22,r2,8000d04 <_fwalk+0x78>
 8000cf4:	9080000f 	ldh	r2,0(r18)
 8000cf8:	14c00226 	beq	r2,r19,8000d04 <_fwalk+0x78>
 8000cfc:	a83ee83a 	callr	r21
 8000d00:	b8aeb03a 	or	r23,r23,r2
 8000d04:	84001a04 	addi	r16,r16,104
 8000d08:	94801a04 	addi	r18,r18,104
 8000d0c:	8cfff51e 	bne	r17,r19,8000ce4 <__alt_data_end+0xf8000ce4>
 8000d10:	a5000017 	ldw	r20,0(r20)
 8000d14:	a03fed1e 	bne	r20,zero,8000ccc <__alt_data_end+0xf8000ccc>
 8000d18:	b805883a 	mov	r2,r23
 8000d1c:	dfc00817 	ldw	ra,32(sp)
 8000d20:	ddc00717 	ldw	r23,28(sp)
 8000d24:	dd800617 	ldw	r22,24(sp)
 8000d28:	dd400517 	ldw	r21,20(sp)
 8000d2c:	dd000417 	ldw	r20,16(sp)
 8000d30:	dcc00317 	ldw	r19,12(sp)
 8000d34:	dc800217 	ldw	r18,8(sp)
 8000d38:	dc400117 	ldw	r17,4(sp)
 8000d3c:	dc000017 	ldw	r16,0(sp)
 8000d40:	dec00904 	addi	sp,sp,36
 8000d44:	f800283a 	ret
 8000d48:	002f883a 	mov	r23,zero
 8000d4c:	003ff206 	br	8000d18 <__alt_data_end+0xf8000d18>

08000d50 <_fwalk_reent>:
 8000d50:	defff704 	addi	sp,sp,-36
 8000d54:	dd000415 	stw	r20,16(sp)
 8000d58:	dfc00815 	stw	ra,32(sp)
 8000d5c:	ddc00715 	stw	r23,28(sp)
 8000d60:	dd800615 	stw	r22,24(sp)
 8000d64:	dd400515 	stw	r21,20(sp)
 8000d68:	dcc00315 	stw	r19,12(sp)
 8000d6c:	dc800215 	stw	r18,8(sp)
 8000d70:	dc400115 	stw	r17,4(sp)
 8000d74:	dc000015 	stw	r16,0(sp)
 8000d78:	2500b804 	addi	r20,r4,736
 8000d7c:	a0002326 	beq	r20,zero,8000e0c <_fwalk_reent+0xbc>
 8000d80:	282b883a 	mov	r21,r5
 8000d84:	2027883a 	mov	r19,r4
 8000d88:	002f883a 	mov	r23,zero
 8000d8c:	05800044 	movi	r22,1
 8000d90:	04bfffc4 	movi	r18,-1
 8000d94:	a4400117 	ldw	r17,4(r20)
 8000d98:	a4000217 	ldw	r16,8(r20)
 8000d9c:	8c7fffc4 	addi	r17,r17,-1
 8000da0:	88000c16 	blt	r17,zero,8000dd4 <_fwalk_reent+0x84>
 8000da4:	84000304 	addi	r16,r16,12
 8000da8:	8080000b 	ldhu	r2,0(r16)
 8000dac:	8c7fffc4 	addi	r17,r17,-1
 8000db0:	817ffd04 	addi	r5,r16,-12
 8000db4:	b080052e 	bgeu	r22,r2,8000dcc <_fwalk_reent+0x7c>
 8000db8:	8080008f 	ldh	r2,2(r16)
 8000dbc:	9809883a 	mov	r4,r19
 8000dc0:	14800226 	beq	r2,r18,8000dcc <_fwalk_reent+0x7c>
 8000dc4:	a83ee83a 	callr	r21
 8000dc8:	b8aeb03a 	or	r23,r23,r2
 8000dcc:	84001a04 	addi	r16,r16,104
 8000dd0:	8cbff51e 	bne	r17,r18,8000da8 <__alt_data_end+0xf8000da8>
 8000dd4:	a5000017 	ldw	r20,0(r20)
 8000dd8:	a03fee1e 	bne	r20,zero,8000d94 <__alt_data_end+0xf8000d94>
 8000ddc:	b805883a 	mov	r2,r23
 8000de0:	dfc00817 	ldw	ra,32(sp)
 8000de4:	ddc00717 	ldw	r23,28(sp)
 8000de8:	dd800617 	ldw	r22,24(sp)
 8000dec:	dd400517 	ldw	r21,20(sp)
 8000df0:	dd000417 	ldw	r20,16(sp)
 8000df4:	dcc00317 	ldw	r19,12(sp)
 8000df8:	dc800217 	ldw	r18,8(sp)
 8000dfc:	dc400117 	ldw	r17,4(sp)
 8000e00:	dc000017 	ldw	r16,0(sp)
 8000e04:	dec00904 	addi	sp,sp,36
 8000e08:	f800283a 	ret
 8000e0c:	002f883a 	mov	r23,zero
 8000e10:	003ff206 	br	8000ddc <__alt_data_end+0xf8000ddc>

08000e14 <_malloc_r>:
 8000e14:	defff504 	addi	sp,sp,-44
 8000e18:	dc800315 	stw	r18,12(sp)
 8000e1c:	dfc00a15 	stw	ra,40(sp)
 8000e20:	df000915 	stw	fp,36(sp)
 8000e24:	ddc00815 	stw	r23,32(sp)
 8000e28:	dd800715 	stw	r22,28(sp)
 8000e2c:	dd400615 	stw	r21,24(sp)
 8000e30:	dd000515 	stw	r20,20(sp)
 8000e34:	dcc00415 	stw	r19,16(sp)
 8000e38:	dc400215 	stw	r17,8(sp)
 8000e3c:	dc000115 	stw	r16,4(sp)
 8000e40:	288002c4 	addi	r2,r5,11
 8000e44:	00c00584 	movi	r3,22
 8000e48:	2025883a 	mov	r18,r4
 8000e4c:	18807f2e 	bgeu	r3,r2,800104c <_malloc_r+0x238>
 8000e50:	047ffe04 	movi	r17,-8
 8000e54:	1462703a 	and	r17,r2,r17
 8000e58:	8800a316 	blt	r17,zero,80010e8 <_malloc_r+0x2d4>
 8000e5c:	8940a236 	bltu	r17,r5,80010e8 <_malloc_r+0x2d4>
 8000e60:	80036080 	call	8003608 <__malloc_lock>
 8000e64:	00807dc4 	movi	r2,503
 8000e68:	1441e92e 	bgeu	r2,r17,8001610 <_malloc_r+0x7fc>
 8000e6c:	8804d27a 	srli	r2,r17,9
 8000e70:	1000a126 	beq	r2,zero,80010f8 <_malloc_r+0x2e4>
 8000e74:	00c00104 	movi	r3,4
 8000e78:	18811e36 	bltu	r3,r2,80012f4 <_malloc_r+0x4e0>
 8000e7c:	8804d1ba 	srli	r2,r17,6
 8000e80:	12000e44 	addi	r8,r2,57
 8000e84:	11c00e04 	addi	r7,r2,56
 8000e88:	4209883a 	add	r4,r8,r8
 8000e8c:	04c20034 	movhi	r19,2048
 8000e90:	2109883a 	add	r4,r4,r4
 8000e94:	9cd87204 	addi	r19,r19,25032
 8000e98:	2109883a 	add	r4,r4,r4
 8000e9c:	9909883a 	add	r4,r19,r4
 8000ea0:	24000117 	ldw	r16,4(r4)
 8000ea4:	213ffe04 	addi	r4,r4,-8
 8000ea8:	24009726 	beq	r4,r16,8001108 <_malloc_r+0x2f4>
 8000eac:	80800117 	ldw	r2,4(r16)
 8000eb0:	01bfff04 	movi	r6,-4
 8000eb4:	014003c4 	movi	r5,15
 8000eb8:	1184703a 	and	r2,r2,r6
 8000ebc:	1447c83a 	sub	r3,r2,r17
 8000ec0:	28c00716 	blt	r5,r3,8000ee0 <_malloc_r+0xcc>
 8000ec4:	1800920e 	bge	r3,zero,8001110 <_malloc_r+0x2fc>
 8000ec8:	84000317 	ldw	r16,12(r16)
 8000ecc:	24008e26 	beq	r4,r16,8001108 <_malloc_r+0x2f4>
 8000ed0:	80800117 	ldw	r2,4(r16)
 8000ed4:	1184703a 	and	r2,r2,r6
 8000ed8:	1447c83a 	sub	r3,r2,r17
 8000edc:	28fff90e 	bge	r5,r3,8000ec4 <__alt_data_end+0xf8000ec4>
 8000ee0:	3809883a 	mov	r4,r7
 8000ee4:	01820034 	movhi	r6,2048
 8000ee8:	9c000417 	ldw	r16,16(r19)
 8000eec:	31987204 	addi	r6,r6,25032
 8000ef0:	32000204 	addi	r8,r6,8
 8000ef4:	82013426 	beq	r16,r8,80013c8 <_malloc_r+0x5b4>
 8000ef8:	80c00117 	ldw	r3,4(r16)
 8000efc:	00bfff04 	movi	r2,-4
 8000f00:	188e703a 	and	r7,r3,r2
 8000f04:	3c45c83a 	sub	r2,r7,r17
 8000f08:	00c003c4 	movi	r3,15
 8000f0c:	18811f16 	blt	r3,r2,800138c <_malloc_r+0x578>
 8000f10:	32000515 	stw	r8,20(r6)
 8000f14:	32000415 	stw	r8,16(r6)
 8000f18:	10007f0e 	bge	r2,zero,8001118 <_malloc_r+0x304>
 8000f1c:	00807fc4 	movi	r2,511
 8000f20:	11c0fd36 	bltu	r2,r7,8001318 <_malloc_r+0x504>
 8000f24:	3806d0fa 	srli	r3,r7,3
 8000f28:	01c00044 	movi	r7,1
 8000f2c:	30800117 	ldw	r2,4(r6)
 8000f30:	19400044 	addi	r5,r3,1
 8000f34:	294b883a 	add	r5,r5,r5
 8000f38:	1807d0ba 	srai	r3,r3,2
 8000f3c:	294b883a 	add	r5,r5,r5
 8000f40:	294b883a 	add	r5,r5,r5
 8000f44:	298b883a 	add	r5,r5,r6
 8000f48:	38c6983a 	sll	r3,r7,r3
 8000f4c:	29c00017 	ldw	r7,0(r5)
 8000f50:	2a7ffe04 	addi	r9,r5,-8
 8000f54:	1886b03a 	or	r3,r3,r2
 8000f58:	82400315 	stw	r9,12(r16)
 8000f5c:	81c00215 	stw	r7,8(r16)
 8000f60:	30c00115 	stw	r3,4(r6)
 8000f64:	2c000015 	stw	r16,0(r5)
 8000f68:	3c000315 	stw	r16,12(r7)
 8000f6c:	2005d0ba 	srai	r2,r4,2
 8000f70:	01400044 	movi	r5,1
 8000f74:	288a983a 	sll	r5,r5,r2
 8000f78:	19406f36 	bltu	r3,r5,8001138 <_malloc_r+0x324>
 8000f7c:	28c4703a 	and	r2,r5,r3
 8000f80:	10000a1e 	bne	r2,zero,8000fac <_malloc_r+0x198>
 8000f84:	00bfff04 	movi	r2,-4
 8000f88:	294b883a 	add	r5,r5,r5
 8000f8c:	2088703a 	and	r4,r4,r2
 8000f90:	28c4703a 	and	r2,r5,r3
 8000f94:	21000104 	addi	r4,r4,4
 8000f98:	1000041e 	bne	r2,zero,8000fac <_malloc_r+0x198>
 8000f9c:	294b883a 	add	r5,r5,r5
 8000fa0:	28c4703a 	and	r2,r5,r3
 8000fa4:	21000104 	addi	r4,r4,4
 8000fa8:	103ffc26 	beq	r2,zero,8000f9c <__alt_data_end+0xf8000f9c>
 8000fac:	02bfff04 	movi	r10,-4
 8000fb0:	024003c4 	movi	r9,15
 8000fb4:	21800044 	addi	r6,r4,1
 8000fb8:	318d883a 	add	r6,r6,r6
 8000fbc:	318d883a 	add	r6,r6,r6
 8000fc0:	318d883a 	add	r6,r6,r6
 8000fc4:	998d883a 	add	r6,r19,r6
 8000fc8:	333ffe04 	addi	r12,r6,-8
 8000fcc:	2017883a 	mov	r11,r4
 8000fd0:	31800104 	addi	r6,r6,4
 8000fd4:	34000017 	ldw	r16,0(r6)
 8000fd8:	31fffd04 	addi	r7,r6,-12
 8000fdc:	81c0041e 	bne	r16,r7,8000ff0 <_malloc_r+0x1dc>
 8000fe0:	0000fb06 	br	80013d0 <_malloc_r+0x5bc>
 8000fe4:	1801030e 	bge	r3,zero,80013f4 <_malloc_r+0x5e0>
 8000fe8:	84000317 	ldw	r16,12(r16)
 8000fec:	81c0f826 	beq	r16,r7,80013d0 <_malloc_r+0x5bc>
 8000ff0:	80800117 	ldw	r2,4(r16)
 8000ff4:	1284703a 	and	r2,r2,r10
 8000ff8:	1447c83a 	sub	r3,r2,r17
 8000ffc:	48fff90e 	bge	r9,r3,8000fe4 <__alt_data_end+0xf8000fe4>
 8001000:	80800317 	ldw	r2,12(r16)
 8001004:	81000217 	ldw	r4,8(r16)
 8001008:	89400054 	ori	r5,r17,1
 800100c:	81400115 	stw	r5,4(r16)
 8001010:	20800315 	stw	r2,12(r4)
 8001014:	11000215 	stw	r4,8(r2)
 8001018:	8463883a 	add	r17,r16,r17
 800101c:	9c400515 	stw	r17,20(r19)
 8001020:	9c400415 	stw	r17,16(r19)
 8001024:	18800054 	ori	r2,r3,1
 8001028:	88800115 	stw	r2,4(r17)
 800102c:	8a000315 	stw	r8,12(r17)
 8001030:	8a000215 	stw	r8,8(r17)
 8001034:	88e3883a 	add	r17,r17,r3
 8001038:	88c00015 	stw	r3,0(r17)
 800103c:	9009883a 	mov	r4,r18
 8001040:	800362c0 	call	800362c <__malloc_unlock>
 8001044:	80800204 	addi	r2,r16,8
 8001048:	00001b06 	br	80010b8 <_malloc_r+0x2a4>
 800104c:	04400404 	movi	r17,16
 8001050:	89402536 	bltu	r17,r5,80010e8 <_malloc_r+0x2d4>
 8001054:	80036080 	call	8003608 <__malloc_lock>
 8001058:	00800184 	movi	r2,6
 800105c:	01000084 	movi	r4,2
 8001060:	04c20034 	movhi	r19,2048
 8001064:	1085883a 	add	r2,r2,r2
 8001068:	9cd87204 	addi	r19,r19,25032
 800106c:	1085883a 	add	r2,r2,r2
 8001070:	9885883a 	add	r2,r19,r2
 8001074:	14000117 	ldw	r16,4(r2)
 8001078:	10fffe04 	addi	r3,r2,-8
 800107c:	80c0d926 	beq	r16,r3,80013e4 <_malloc_r+0x5d0>
 8001080:	80c00117 	ldw	r3,4(r16)
 8001084:	81000317 	ldw	r4,12(r16)
 8001088:	00bfff04 	movi	r2,-4
 800108c:	1884703a 	and	r2,r3,r2
 8001090:	81400217 	ldw	r5,8(r16)
 8001094:	8085883a 	add	r2,r16,r2
 8001098:	10c00117 	ldw	r3,4(r2)
 800109c:	29000315 	stw	r4,12(r5)
 80010a0:	21400215 	stw	r5,8(r4)
 80010a4:	18c00054 	ori	r3,r3,1
 80010a8:	10c00115 	stw	r3,4(r2)
 80010ac:	9009883a 	mov	r4,r18
 80010b0:	800362c0 	call	800362c <__malloc_unlock>
 80010b4:	80800204 	addi	r2,r16,8
 80010b8:	dfc00a17 	ldw	ra,40(sp)
 80010bc:	df000917 	ldw	fp,36(sp)
 80010c0:	ddc00817 	ldw	r23,32(sp)
 80010c4:	dd800717 	ldw	r22,28(sp)
 80010c8:	dd400617 	ldw	r21,24(sp)
 80010cc:	dd000517 	ldw	r20,20(sp)
 80010d0:	dcc00417 	ldw	r19,16(sp)
 80010d4:	dc800317 	ldw	r18,12(sp)
 80010d8:	dc400217 	ldw	r17,8(sp)
 80010dc:	dc000117 	ldw	r16,4(sp)
 80010e0:	dec00b04 	addi	sp,sp,44
 80010e4:	f800283a 	ret
 80010e8:	00800304 	movi	r2,12
 80010ec:	90800015 	stw	r2,0(r18)
 80010f0:	0005883a 	mov	r2,zero
 80010f4:	003ff006 	br	80010b8 <__alt_data_end+0xf80010b8>
 80010f8:	01002004 	movi	r4,128
 80010fc:	02001004 	movi	r8,64
 8001100:	01c00fc4 	movi	r7,63
 8001104:	003f6106 	br	8000e8c <__alt_data_end+0xf8000e8c>
 8001108:	4009883a 	mov	r4,r8
 800110c:	003f7506 	br	8000ee4 <__alt_data_end+0xf8000ee4>
 8001110:	81000317 	ldw	r4,12(r16)
 8001114:	003fde06 	br	8001090 <__alt_data_end+0xf8001090>
 8001118:	81c5883a 	add	r2,r16,r7
 800111c:	11400117 	ldw	r5,4(r2)
 8001120:	9009883a 	mov	r4,r18
 8001124:	29400054 	ori	r5,r5,1
 8001128:	11400115 	stw	r5,4(r2)
 800112c:	800362c0 	call	800362c <__malloc_unlock>
 8001130:	80800204 	addi	r2,r16,8
 8001134:	003fe006 	br	80010b8 <__alt_data_end+0xf80010b8>
 8001138:	9c000217 	ldw	r16,8(r19)
 800113c:	00bfff04 	movi	r2,-4
 8001140:	85800117 	ldw	r22,4(r16)
 8001144:	b0ac703a 	and	r22,r22,r2
 8001148:	b4400336 	bltu	r22,r17,8001158 <_malloc_r+0x344>
 800114c:	b445c83a 	sub	r2,r22,r17
 8001150:	00c003c4 	movi	r3,15
 8001154:	18805d16 	blt	r3,r2,80012cc <_malloc_r+0x4b8>
 8001158:	05c20034 	movhi	r23,2048
 800115c:	00820074 	movhi	r2,2049
 8001160:	10a4b704 	addi	r2,r2,-27940
 8001164:	bdde0304 	addi	r23,r23,30732
 8001168:	15400017 	ldw	r21,0(r2)
 800116c:	b8c00017 	ldw	r3,0(r23)
 8001170:	00bfffc4 	movi	r2,-1
 8001174:	858d883a 	add	r6,r16,r22
 8001178:	8d6b883a 	add	r21,r17,r21
 800117c:	1880ea26 	beq	r3,r2,8001528 <_malloc_r+0x714>
 8001180:	ad4403c4 	addi	r21,r21,4111
 8001184:	00bc0004 	movi	r2,-4096
 8001188:	a8aa703a 	and	r21,r21,r2
 800118c:	a80b883a 	mov	r5,r21
 8001190:	9009883a 	mov	r4,r18
 8001194:	d9800015 	stw	r6,0(sp)
 8001198:	80020340 	call	8002034 <_sbrk_r>
 800119c:	1029883a 	mov	r20,r2
 80011a0:	00bfffc4 	movi	r2,-1
 80011a4:	d9800017 	ldw	r6,0(sp)
 80011a8:	a080e826 	beq	r20,r2,800154c <_malloc_r+0x738>
 80011ac:	a180a636 	bltu	r20,r6,8001448 <_malloc_r+0x634>
 80011b0:	07020074 	movhi	fp,2049
 80011b4:	e724c004 	addi	fp,fp,-27904
 80011b8:	e0800017 	ldw	r2,0(fp)
 80011bc:	a887883a 	add	r3,r21,r2
 80011c0:	e0c00015 	stw	r3,0(fp)
 80011c4:	3500e626 	beq	r6,r20,8001560 <_malloc_r+0x74c>
 80011c8:	b9000017 	ldw	r4,0(r23)
 80011cc:	00bfffc4 	movi	r2,-1
 80011d0:	2080ee26 	beq	r4,r2,800158c <_malloc_r+0x778>
 80011d4:	a185c83a 	sub	r2,r20,r6
 80011d8:	10c5883a 	add	r2,r2,r3
 80011dc:	e0800015 	stw	r2,0(fp)
 80011e0:	a0c001cc 	andi	r3,r20,7
 80011e4:	1800bc26 	beq	r3,zero,80014d8 <_malloc_r+0x6c4>
 80011e8:	a0e9c83a 	sub	r20,r20,r3
 80011ec:	00840204 	movi	r2,4104
 80011f0:	a5000204 	addi	r20,r20,8
 80011f4:	10c7c83a 	sub	r3,r2,r3
 80011f8:	a545883a 	add	r2,r20,r21
 80011fc:	1083ffcc 	andi	r2,r2,4095
 8001200:	18abc83a 	sub	r21,r3,r2
 8001204:	a80b883a 	mov	r5,r21
 8001208:	9009883a 	mov	r4,r18
 800120c:	80020340 	call	8002034 <_sbrk_r>
 8001210:	00ffffc4 	movi	r3,-1
 8001214:	10c0e126 	beq	r2,r3,800159c <_malloc_r+0x788>
 8001218:	1505c83a 	sub	r2,r2,r20
 800121c:	1545883a 	add	r2,r2,r21
 8001220:	10800054 	ori	r2,r2,1
 8001224:	e0c00017 	ldw	r3,0(fp)
 8001228:	9d000215 	stw	r20,8(r19)
 800122c:	a0800115 	stw	r2,4(r20)
 8001230:	a8c7883a 	add	r3,r21,r3
 8001234:	e0c00015 	stw	r3,0(fp)
 8001238:	84c00e26 	beq	r16,r19,8001274 <_malloc_r+0x460>
 800123c:	018003c4 	movi	r6,15
 8001240:	3580a72e 	bgeu	r6,r22,80014e0 <_malloc_r+0x6cc>
 8001244:	81400117 	ldw	r5,4(r16)
 8001248:	013ffe04 	movi	r4,-8
 800124c:	b0bffd04 	addi	r2,r22,-12
 8001250:	1104703a 	and	r2,r2,r4
 8001254:	2900004c 	andi	r4,r5,1
 8001258:	2088b03a 	or	r4,r4,r2
 800125c:	81000115 	stw	r4,4(r16)
 8001260:	01400144 	movi	r5,5
 8001264:	8089883a 	add	r4,r16,r2
 8001268:	21400115 	stw	r5,4(r4)
 800126c:	21400215 	stw	r5,8(r4)
 8001270:	3080cd36 	bltu	r6,r2,80015a8 <_malloc_r+0x794>
 8001274:	00820074 	movhi	r2,2049
 8001278:	10a4b604 	addi	r2,r2,-27944
 800127c:	11000017 	ldw	r4,0(r2)
 8001280:	20c0012e 	bgeu	r4,r3,8001288 <_malloc_r+0x474>
 8001284:	10c00015 	stw	r3,0(r2)
 8001288:	00820074 	movhi	r2,2049
 800128c:	10a4b504 	addi	r2,r2,-27948
 8001290:	11000017 	ldw	r4,0(r2)
 8001294:	9c000217 	ldw	r16,8(r19)
 8001298:	20c0012e 	bgeu	r4,r3,80012a0 <_malloc_r+0x48c>
 800129c:	10c00015 	stw	r3,0(r2)
 80012a0:	80c00117 	ldw	r3,4(r16)
 80012a4:	00bfff04 	movi	r2,-4
 80012a8:	1886703a 	and	r3,r3,r2
 80012ac:	1c45c83a 	sub	r2,r3,r17
 80012b0:	1c400236 	bltu	r3,r17,80012bc <_malloc_r+0x4a8>
 80012b4:	00c003c4 	movi	r3,15
 80012b8:	18800416 	blt	r3,r2,80012cc <_malloc_r+0x4b8>
 80012bc:	9009883a 	mov	r4,r18
 80012c0:	800362c0 	call	800362c <__malloc_unlock>
 80012c4:	0005883a 	mov	r2,zero
 80012c8:	003f7b06 	br	80010b8 <__alt_data_end+0xf80010b8>
 80012cc:	88c00054 	ori	r3,r17,1
 80012d0:	80c00115 	stw	r3,4(r16)
 80012d4:	8463883a 	add	r17,r16,r17
 80012d8:	10800054 	ori	r2,r2,1
 80012dc:	9c400215 	stw	r17,8(r19)
 80012e0:	88800115 	stw	r2,4(r17)
 80012e4:	9009883a 	mov	r4,r18
 80012e8:	800362c0 	call	800362c <__malloc_unlock>
 80012ec:	80800204 	addi	r2,r16,8
 80012f0:	003f7106 	br	80010b8 <__alt_data_end+0xf80010b8>
 80012f4:	00c00504 	movi	r3,20
 80012f8:	18804a2e 	bgeu	r3,r2,8001424 <_malloc_r+0x610>
 80012fc:	00c01504 	movi	r3,84
 8001300:	18806e36 	bltu	r3,r2,80014bc <_malloc_r+0x6a8>
 8001304:	8804d33a 	srli	r2,r17,12
 8001308:	12001bc4 	addi	r8,r2,111
 800130c:	11c01b84 	addi	r7,r2,110
 8001310:	4209883a 	add	r4,r8,r8
 8001314:	003edd06 	br	8000e8c <__alt_data_end+0xf8000e8c>
 8001318:	3804d27a 	srli	r2,r7,9
 800131c:	00c00104 	movi	r3,4
 8001320:	1880442e 	bgeu	r3,r2,8001434 <_malloc_r+0x620>
 8001324:	00c00504 	movi	r3,20
 8001328:	18808136 	bltu	r3,r2,8001530 <_malloc_r+0x71c>
 800132c:	11401704 	addi	r5,r2,92
 8001330:	10c016c4 	addi	r3,r2,91
 8001334:	294b883a 	add	r5,r5,r5
 8001338:	294b883a 	add	r5,r5,r5
 800133c:	294b883a 	add	r5,r5,r5
 8001340:	994b883a 	add	r5,r19,r5
 8001344:	28800017 	ldw	r2,0(r5)
 8001348:	01820034 	movhi	r6,2048
 800134c:	297ffe04 	addi	r5,r5,-8
 8001350:	31987204 	addi	r6,r6,25032
 8001354:	28806526 	beq	r5,r2,80014ec <_malloc_r+0x6d8>
 8001358:	01bfff04 	movi	r6,-4
 800135c:	10c00117 	ldw	r3,4(r2)
 8001360:	1986703a 	and	r3,r3,r6
 8001364:	38c0022e 	bgeu	r7,r3,8001370 <_malloc_r+0x55c>
 8001368:	10800217 	ldw	r2,8(r2)
 800136c:	28bffb1e 	bne	r5,r2,800135c <__alt_data_end+0xf800135c>
 8001370:	11400317 	ldw	r5,12(r2)
 8001374:	98c00117 	ldw	r3,4(r19)
 8001378:	81400315 	stw	r5,12(r16)
 800137c:	80800215 	stw	r2,8(r16)
 8001380:	2c000215 	stw	r16,8(r5)
 8001384:	14000315 	stw	r16,12(r2)
 8001388:	003ef806 	br	8000f6c <__alt_data_end+0xf8000f6c>
 800138c:	88c00054 	ori	r3,r17,1
 8001390:	80c00115 	stw	r3,4(r16)
 8001394:	8463883a 	add	r17,r16,r17
 8001398:	34400515 	stw	r17,20(r6)
 800139c:	34400415 	stw	r17,16(r6)
 80013a0:	10c00054 	ori	r3,r2,1
 80013a4:	8a000315 	stw	r8,12(r17)
 80013a8:	8a000215 	stw	r8,8(r17)
 80013ac:	88c00115 	stw	r3,4(r17)
 80013b0:	88a3883a 	add	r17,r17,r2
 80013b4:	88800015 	stw	r2,0(r17)
 80013b8:	9009883a 	mov	r4,r18
 80013bc:	800362c0 	call	800362c <__malloc_unlock>
 80013c0:	80800204 	addi	r2,r16,8
 80013c4:	003f3c06 	br	80010b8 <__alt_data_end+0xf80010b8>
 80013c8:	30c00117 	ldw	r3,4(r6)
 80013cc:	003ee706 	br	8000f6c <__alt_data_end+0xf8000f6c>
 80013d0:	5ac00044 	addi	r11,r11,1
 80013d4:	588000cc 	andi	r2,r11,3
 80013d8:	31800204 	addi	r6,r6,8
 80013dc:	103efd1e 	bne	r2,zero,8000fd4 <__alt_data_end+0xf8000fd4>
 80013e0:	00002406 	br	8001474 <_malloc_r+0x660>
 80013e4:	14000317 	ldw	r16,12(r2)
 80013e8:	143f251e 	bne	r2,r16,8001080 <__alt_data_end+0xf8001080>
 80013ec:	21000084 	addi	r4,r4,2
 80013f0:	003ebc06 	br	8000ee4 <__alt_data_end+0xf8000ee4>
 80013f4:	8085883a 	add	r2,r16,r2
 80013f8:	10c00117 	ldw	r3,4(r2)
 80013fc:	81000317 	ldw	r4,12(r16)
 8001400:	81400217 	ldw	r5,8(r16)
 8001404:	18c00054 	ori	r3,r3,1
 8001408:	10c00115 	stw	r3,4(r2)
 800140c:	29000315 	stw	r4,12(r5)
 8001410:	21400215 	stw	r5,8(r4)
 8001414:	9009883a 	mov	r4,r18
 8001418:	800362c0 	call	800362c <__malloc_unlock>
 800141c:	80800204 	addi	r2,r16,8
 8001420:	003f2506 	br	80010b8 <__alt_data_end+0xf80010b8>
 8001424:	12001704 	addi	r8,r2,92
 8001428:	11c016c4 	addi	r7,r2,91
 800142c:	4209883a 	add	r4,r8,r8
 8001430:	003e9606 	br	8000e8c <__alt_data_end+0xf8000e8c>
 8001434:	3804d1ba 	srli	r2,r7,6
 8001438:	11400e44 	addi	r5,r2,57
 800143c:	10c00e04 	addi	r3,r2,56
 8001440:	294b883a 	add	r5,r5,r5
 8001444:	003fbc06 	br	8001338 <__alt_data_end+0xf8001338>
 8001448:	84ff5926 	beq	r16,r19,80011b0 <__alt_data_end+0xf80011b0>
 800144c:	00820034 	movhi	r2,2048
 8001450:	10987204 	addi	r2,r2,25032
 8001454:	14000217 	ldw	r16,8(r2)
 8001458:	00bfff04 	movi	r2,-4
 800145c:	80c00117 	ldw	r3,4(r16)
 8001460:	1886703a 	and	r3,r3,r2
 8001464:	003f9106 	br	80012ac <__alt_data_end+0xf80012ac>
 8001468:	60800217 	ldw	r2,8(r12)
 800146c:	213fffc4 	addi	r4,r4,-1
 8001470:	1300651e 	bne	r2,r12,8001608 <_malloc_r+0x7f4>
 8001474:	208000cc 	andi	r2,r4,3
 8001478:	633ffe04 	addi	r12,r12,-8
 800147c:	103ffa1e 	bne	r2,zero,8001468 <__alt_data_end+0xf8001468>
 8001480:	98800117 	ldw	r2,4(r19)
 8001484:	0146303a 	nor	r3,zero,r5
 8001488:	1884703a 	and	r2,r3,r2
 800148c:	98800115 	stw	r2,4(r19)
 8001490:	294b883a 	add	r5,r5,r5
 8001494:	117f2836 	bltu	r2,r5,8001138 <__alt_data_end+0xf8001138>
 8001498:	283f2726 	beq	r5,zero,8001138 <__alt_data_end+0xf8001138>
 800149c:	2886703a 	and	r3,r5,r2
 80014a0:	5809883a 	mov	r4,r11
 80014a4:	183ec31e 	bne	r3,zero,8000fb4 <__alt_data_end+0xf8000fb4>
 80014a8:	294b883a 	add	r5,r5,r5
 80014ac:	2886703a 	and	r3,r5,r2
 80014b0:	21000104 	addi	r4,r4,4
 80014b4:	183ffc26 	beq	r3,zero,80014a8 <__alt_data_end+0xf80014a8>
 80014b8:	003ebe06 	br	8000fb4 <__alt_data_end+0xf8000fb4>
 80014bc:	00c05504 	movi	r3,340
 80014c0:	18801236 	bltu	r3,r2,800150c <_malloc_r+0x6f8>
 80014c4:	8804d3fa 	srli	r2,r17,15
 80014c8:	12001e04 	addi	r8,r2,120
 80014cc:	11c01dc4 	addi	r7,r2,119
 80014d0:	4209883a 	add	r4,r8,r8
 80014d4:	003e6d06 	br	8000e8c <__alt_data_end+0xf8000e8c>
 80014d8:	00c40004 	movi	r3,4096
 80014dc:	003f4606 	br	80011f8 <__alt_data_end+0xf80011f8>
 80014e0:	00800044 	movi	r2,1
 80014e4:	a0800115 	stw	r2,4(r20)
 80014e8:	003f7406 	br	80012bc <__alt_data_end+0xf80012bc>
 80014ec:	1805d0ba 	srai	r2,r3,2
 80014f0:	01c00044 	movi	r7,1
 80014f4:	30c00117 	ldw	r3,4(r6)
 80014f8:	388e983a 	sll	r7,r7,r2
 80014fc:	2805883a 	mov	r2,r5
 8001500:	38c6b03a 	or	r3,r7,r3
 8001504:	30c00115 	stw	r3,4(r6)
 8001508:	003f9b06 	br	8001378 <__alt_data_end+0xf8001378>
 800150c:	00c15504 	movi	r3,1364
 8001510:	18801a36 	bltu	r3,r2,800157c <_malloc_r+0x768>
 8001514:	8804d4ba 	srli	r2,r17,18
 8001518:	12001f44 	addi	r8,r2,125
 800151c:	11c01f04 	addi	r7,r2,124
 8001520:	4209883a 	add	r4,r8,r8
 8001524:	003e5906 	br	8000e8c <__alt_data_end+0xf8000e8c>
 8001528:	ad400404 	addi	r21,r21,16
 800152c:	003f1706 	br	800118c <__alt_data_end+0xf800118c>
 8001530:	00c01504 	movi	r3,84
 8001534:	18802336 	bltu	r3,r2,80015c4 <_malloc_r+0x7b0>
 8001538:	3804d33a 	srli	r2,r7,12
 800153c:	11401bc4 	addi	r5,r2,111
 8001540:	10c01b84 	addi	r3,r2,110
 8001544:	294b883a 	add	r5,r5,r5
 8001548:	003f7b06 	br	8001338 <__alt_data_end+0xf8001338>
 800154c:	9c000217 	ldw	r16,8(r19)
 8001550:	00bfff04 	movi	r2,-4
 8001554:	80c00117 	ldw	r3,4(r16)
 8001558:	1886703a 	and	r3,r3,r2
 800155c:	003f5306 	br	80012ac <__alt_data_end+0xf80012ac>
 8001560:	3083ffcc 	andi	r2,r6,4095
 8001564:	103f181e 	bne	r2,zero,80011c8 <__alt_data_end+0xf80011c8>
 8001568:	99000217 	ldw	r4,8(r19)
 800156c:	b545883a 	add	r2,r22,r21
 8001570:	10800054 	ori	r2,r2,1
 8001574:	20800115 	stw	r2,4(r4)
 8001578:	003f3e06 	br	8001274 <__alt_data_end+0xf8001274>
 800157c:	01003f84 	movi	r4,254
 8001580:	02001fc4 	movi	r8,127
 8001584:	01c01f84 	movi	r7,126
 8001588:	003e4006 	br	8000e8c <__alt_data_end+0xf8000e8c>
 800158c:	00820034 	movhi	r2,2048
 8001590:	109e0304 	addi	r2,r2,30732
 8001594:	15000015 	stw	r20,0(r2)
 8001598:	003f1106 	br	80011e0 <__alt_data_end+0xf80011e0>
 800159c:	00800044 	movi	r2,1
 80015a0:	002b883a 	mov	r21,zero
 80015a4:	003f1f06 	br	8001224 <__alt_data_end+0xf8001224>
 80015a8:	81400204 	addi	r5,r16,8
 80015ac:	9009883a 	mov	r4,r18
 80015b0:	800289c0 	call	800289c <_free_r>
 80015b4:	00820074 	movhi	r2,2049
 80015b8:	10a4c004 	addi	r2,r2,-27904
 80015bc:	10c00017 	ldw	r3,0(r2)
 80015c0:	003f2c06 	br	8001274 <__alt_data_end+0xf8001274>
 80015c4:	00c05504 	movi	r3,340
 80015c8:	18800536 	bltu	r3,r2,80015e0 <_malloc_r+0x7cc>
 80015cc:	3804d3fa 	srli	r2,r7,15
 80015d0:	11401e04 	addi	r5,r2,120
 80015d4:	10c01dc4 	addi	r3,r2,119
 80015d8:	294b883a 	add	r5,r5,r5
 80015dc:	003f5606 	br	8001338 <__alt_data_end+0xf8001338>
 80015e0:	00c15504 	movi	r3,1364
 80015e4:	18800536 	bltu	r3,r2,80015fc <_malloc_r+0x7e8>
 80015e8:	3804d4ba 	srli	r2,r7,18
 80015ec:	11401f44 	addi	r5,r2,125
 80015f0:	10c01f04 	addi	r3,r2,124
 80015f4:	294b883a 	add	r5,r5,r5
 80015f8:	003f4f06 	br	8001338 <__alt_data_end+0xf8001338>
 80015fc:	01403f84 	movi	r5,254
 8001600:	00c01f84 	movi	r3,126
 8001604:	003f4c06 	br	8001338 <__alt_data_end+0xf8001338>
 8001608:	98800117 	ldw	r2,4(r19)
 800160c:	003fa006 	br	8001490 <__alt_data_end+0xf8001490>
 8001610:	8808d0fa 	srli	r4,r17,3
 8001614:	20800044 	addi	r2,r4,1
 8001618:	1085883a 	add	r2,r2,r2
 800161c:	003e9006 	br	8001060 <__alt_data_end+0xf8001060>

08001620 <memchr>:
 8001620:	208000cc 	andi	r2,r4,3
 8001624:	280f883a 	mov	r7,r5
 8001628:	10003426 	beq	r2,zero,80016fc <memchr+0xdc>
 800162c:	30bfffc4 	addi	r2,r6,-1
 8001630:	30001a26 	beq	r6,zero,800169c <memchr+0x7c>
 8001634:	20c00003 	ldbu	r3,0(r4)
 8001638:	29803fcc 	andi	r6,r5,255
 800163c:	30c0051e 	bne	r6,r3,8001654 <memchr+0x34>
 8001640:	00001806 	br	80016a4 <memchr+0x84>
 8001644:	10001526 	beq	r2,zero,800169c <memchr+0x7c>
 8001648:	20c00003 	ldbu	r3,0(r4)
 800164c:	10bfffc4 	addi	r2,r2,-1
 8001650:	30c01426 	beq	r6,r3,80016a4 <memchr+0x84>
 8001654:	21000044 	addi	r4,r4,1
 8001658:	20c000cc 	andi	r3,r4,3
 800165c:	183ff91e 	bne	r3,zero,8001644 <__alt_data_end+0xf8001644>
 8001660:	020000c4 	movi	r8,3
 8001664:	40801136 	bltu	r8,r2,80016ac <memchr+0x8c>
 8001668:	10000c26 	beq	r2,zero,800169c <memchr+0x7c>
 800166c:	20c00003 	ldbu	r3,0(r4)
 8001670:	29403fcc 	andi	r5,r5,255
 8001674:	28c00b26 	beq	r5,r3,80016a4 <memchr+0x84>
 8001678:	20c00044 	addi	r3,r4,1
 800167c:	39803fcc 	andi	r6,r7,255
 8001680:	2089883a 	add	r4,r4,r2
 8001684:	00000306 	br	8001694 <memchr+0x74>
 8001688:	18c00044 	addi	r3,r3,1
 800168c:	197fffc3 	ldbu	r5,-1(r3)
 8001690:	31400526 	beq	r6,r5,80016a8 <memchr+0x88>
 8001694:	1805883a 	mov	r2,r3
 8001698:	20fffb1e 	bne	r4,r3,8001688 <__alt_data_end+0xf8001688>
 800169c:	0005883a 	mov	r2,zero
 80016a0:	f800283a 	ret
 80016a4:	2005883a 	mov	r2,r4
 80016a8:	f800283a 	ret
 80016ac:	28c03fcc 	andi	r3,r5,255
 80016b0:	1812923a 	slli	r9,r3,8
 80016b4:	02ffbff4 	movhi	r11,65279
 80016b8:	02a02074 	movhi	r10,32897
 80016bc:	48d2b03a 	or	r9,r9,r3
 80016c0:	4806943a 	slli	r3,r9,16
 80016c4:	5affbfc4 	addi	r11,r11,-257
 80016c8:	52a02004 	addi	r10,r10,-32640
 80016cc:	48d2b03a 	or	r9,r9,r3
 80016d0:	20c00017 	ldw	r3,0(r4)
 80016d4:	48c6f03a 	xor	r3,r9,r3
 80016d8:	1acd883a 	add	r6,r3,r11
 80016dc:	00c6303a 	nor	r3,zero,r3
 80016e0:	30c6703a 	and	r3,r6,r3
 80016e4:	1a86703a 	and	r3,r3,r10
 80016e8:	183fe01e 	bne	r3,zero,800166c <__alt_data_end+0xf800166c>
 80016ec:	10bfff04 	addi	r2,r2,-4
 80016f0:	21000104 	addi	r4,r4,4
 80016f4:	40bff636 	bltu	r8,r2,80016d0 <__alt_data_end+0xf80016d0>
 80016f8:	003fdb06 	br	8001668 <__alt_data_end+0xf8001668>
 80016fc:	3005883a 	mov	r2,r6
 8001700:	003fd706 	br	8001660 <__alt_data_end+0xf8001660>

08001704 <memcpy>:
 8001704:	defffd04 	addi	sp,sp,-12
 8001708:	dfc00215 	stw	ra,8(sp)
 800170c:	dc400115 	stw	r17,4(sp)
 8001710:	dc000015 	stw	r16,0(sp)
 8001714:	00c003c4 	movi	r3,15
 8001718:	2005883a 	mov	r2,r4
 800171c:	1980452e 	bgeu	r3,r6,8001834 <memcpy+0x130>
 8001720:	2906b03a 	or	r3,r5,r4
 8001724:	18c000cc 	andi	r3,r3,3
 8001728:	1800441e 	bne	r3,zero,800183c <memcpy+0x138>
 800172c:	347ffc04 	addi	r17,r6,-16
 8001730:	8822d13a 	srli	r17,r17,4
 8001734:	28c00104 	addi	r3,r5,4
 8001738:	23400104 	addi	r13,r4,4
 800173c:	8820913a 	slli	r16,r17,4
 8001740:	2b000204 	addi	r12,r5,8
 8001744:	22c00204 	addi	r11,r4,8
 8001748:	84000504 	addi	r16,r16,20
 800174c:	2a800304 	addi	r10,r5,12
 8001750:	22400304 	addi	r9,r4,12
 8001754:	2c21883a 	add	r16,r5,r16
 8001758:	2811883a 	mov	r8,r5
 800175c:	200f883a 	mov	r7,r4
 8001760:	41000017 	ldw	r4,0(r8)
 8001764:	1fc00017 	ldw	ra,0(r3)
 8001768:	63c00017 	ldw	r15,0(r12)
 800176c:	39000015 	stw	r4,0(r7)
 8001770:	53800017 	ldw	r14,0(r10)
 8001774:	6fc00015 	stw	ra,0(r13)
 8001778:	5bc00015 	stw	r15,0(r11)
 800177c:	4b800015 	stw	r14,0(r9)
 8001780:	18c00404 	addi	r3,r3,16
 8001784:	39c00404 	addi	r7,r7,16
 8001788:	42000404 	addi	r8,r8,16
 800178c:	6b400404 	addi	r13,r13,16
 8001790:	63000404 	addi	r12,r12,16
 8001794:	5ac00404 	addi	r11,r11,16
 8001798:	52800404 	addi	r10,r10,16
 800179c:	4a400404 	addi	r9,r9,16
 80017a0:	1c3fef1e 	bne	r3,r16,8001760 <__alt_data_end+0xf8001760>
 80017a4:	89c00044 	addi	r7,r17,1
 80017a8:	380e913a 	slli	r7,r7,4
 80017ac:	310003cc 	andi	r4,r6,15
 80017b0:	02c000c4 	movi	r11,3
 80017b4:	11c7883a 	add	r3,r2,r7
 80017b8:	29cb883a 	add	r5,r5,r7
 80017bc:	5900212e 	bgeu	r11,r4,8001844 <memcpy+0x140>
 80017c0:	1813883a 	mov	r9,r3
 80017c4:	2811883a 	mov	r8,r5
 80017c8:	200f883a 	mov	r7,r4
 80017cc:	42800017 	ldw	r10,0(r8)
 80017d0:	4a400104 	addi	r9,r9,4
 80017d4:	39ffff04 	addi	r7,r7,-4
 80017d8:	4abfff15 	stw	r10,-4(r9)
 80017dc:	42000104 	addi	r8,r8,4
 80017e0:	59fffa36 	bltu	r11,r7,80017cc <__alt_data_end+0xf80017cc>
 80017e4:	213fff04 	addi	r4,r4,-4
 80017e8:	2008d0ba 	srli	r4,r4,2
 80017ec:	318000cc 	andi	r6,r6,3
 80017f0:	21000044 	addi	r4,r4,1
 80017f4:	2109883a 	add	r4,r4,r4
 80017f8:	2109883a 	add	r4,r4,r4
 80017fc:	1907883a 	add	r3,r3,r4
 8001800:	290b883a 	add	r5,r5,r4
 8001804:	30000626 	beq	r6,zero,8001820 <memcpy+0x11c>
 8001808:	198d883a 	add	r6,r3,r6
 800180c:	29c00003 	ldbu	r7,0(r5)
 8001810:	18c00044 	addi	r3,r3,1
 8001814:	29400044 	addi	r5,r5,1
 8001818:	19ffffc5 	stb	r7,-1(r3)
 800181c:	19bffb1e 	bne	r3,r6,800180c <__alt_data_end+0xf800180c>
 8001820:	dfc00217 	ldw	ra,8(sp)
 8001824:	dc400117 	ldw	r17,4(sp)
 8001828:	dc000017 	ldw	r16,0(sp)
 800182c:	dec00304 	addi	sp,sp,12
 8001830:	f800283a 	ret
 8001834:	2007883a 	mov	r3,r4
 8001838:	003ff206 	br	8001804 <__alt_data_end+0xf8001804>
 800183c:	2007883a 	mov	r3,r4
 8001840:	003ff106 	br	8001808 <__alt_data_end+0xf8001808>
 8001844:	200d883a 	mov	r6,r4
 8001848:	003fee06 	br	8001804 <__alt_data_end+0xf8001804>

0800184c <memmove>:
 800184c:	2005883a 	mov	r2,r4
 8001850:	29000b2e 	bgeu	r5,r4,8001880 <memmove+0x34>
 8001854:	298f883a 	add	r7,r5,r6
 8001858:	21c0092e 	bgeu	r4,r7,8001880 <memmove+0x34>
 800185c:	2187883a 	add	r3,r4,r6
 8001860:	198bc83a 	sub	r5,r3,r6
 8001864:	30004826 	beq	r6,zero,8001988 <memmove+0x13c>
 8001868:	39ffffc4 	addi	r7,r7,-1
 800186c:	39000003 	ldbu	r4,0(r7)
 8001870:	18ffffc4 	addi	r3,r3,-1
 8001874:	19000005 	stb	r4,0(r3)
 8001878:	28fffb1e 	bne	r5,r3,8001868 <__alt_data_end+0xf8001868>
 800187c:	f800283a 	ret
 8001880:	00c003c4 	movi	r3,15
 8001884:	1980412e 	bgeu	r3,r6,800198c <memmove+0x140>
 8001888:	2886b03a 	or	r3,r5,r2
 800188c:	18c000cc 	andi	r3,r3,3
 8001890:	1800401e 	bne	r3,zero,8001994 <memmove+0x148>
 8001894:	33fffc04 	addi	r15,r6,-16
 8001898:	781ed13a 	srli	r15,r15,4
 800189c:	28c00104 	addi	r3,r5,4
 80018a0:	13400104 	addi	r13,r2,4
 80018a4:	781c913a 	slli	r14,r15,4
 80018a8:	2b000204 	addi	r12,r5,8
 80018ac:	12c00204 	addi	r11,r2,8
 80018b0:	73800504 	addi	r14,r14,20
 80018b4:	2a800304 	addi	r10,r5,12
 80018b8:	12400304 	addi	r9,r2,12
 80018bc:	2b9d883a 	add	r14,r5,r14
 80018c0:	2811883a 	mov	r8,r5
 80018c4:	100f883a 	mov	r7,r2
 80018c8:	41000017 	ldw	r4,0(r8)
 80018cc:	39c00404 	addi	r7,r7,16
 80018d0:	18c00404 	addi	r3,r3,16
 80018d4:	393ffc15 	stw	r4,-16(r7)
 80018d8:	193ffc17 	ldw	r4,-16(r3)
 80018dc:	6b400404 	addi	r13,r13,16
 80018e0:	5ac00404 	addi	r11,r11,16
 80018e4:	693ffc15 	stw	r4,-16(r13)
 80018e8:	61000017 	ldw	r4,0(r12)
 80018ec:	4a400404 	addi	r9,r9,16
 80018f0:	42000404 	addi	r8,r8,16
 80018f4:	593ffc15 	stw	r4,-16(r11)
 80018f8:	51000017 	ldw	r4,0(r10)
 80018fc:	63000404 	addi	r12,r12,16
 8001900:	52800404 	addi	r10,r10,16
 8001904:	493ffc15 	stw	r4,-16(r9)
 8001908:	1bbfef1e 	bne	r3,r14,80018c8 <__alt_data_end+0xf80018c8>
 800190c:	79000044 	addi	r4,r15,1
 8001910:	2008913a 	slli	r4,r4,4
 8001914:	328003cc 	andi	r10,r6,15
 8001918:	02c000c4 	movi	r11,3
 800191c:	1107883a 	add	r3,r2,r4
 8001920:	290b883a 	add	r5,r5,r4
 8001924:	5a801e2e 	bgeu	r11,r10,80019a0 <memmove+0x154>
 8001928:	1813883a 	mov	r9,r3
 800192c:	2811883a 	mov	r8,r5
 8001930:	500f883a 	mov	r7,r10
 8001934:	41000017 	ldw	r4,0(r8)
 8001938:	4a400104 	addi	r9,r9,4
 800193c:	39ffff04 	addi	r7,r7,-4
 8001940:	493fff15 	stw	r4,-4(r9)
 8001944:	42000104 	addi	r8,r8,4
 8001948:	59fffa36 	bltu	r11,r7,8001934 <__alt_data_end+0xf8001934>
 800194c:	513fff04 	addi	r4,r10,-4
 8001950:	2008d0ba 	srli	r4,r4,2
 8001954:	318000cc 	andi	r6,r6,3
 8001958:	21000044 	addi	r4,r4,1
 800195c:	2109883a 	add	r4,r4,r4
 8001960:	2109883a 	add	r4,r4,r4
 8001964:	1907883a 	add	r3,r3,r4
 8001968:	290b883a 	add	r5,r5,r4
 800196c:	30000b26 	beq	r6,zero,800199c <memmove+0x150>
 8001970:	198d883a 	add	r6,r3,r6
 8001974:	29c00003 	ldbu	r7,0(r5)
 8001978:	18c00044 	addi	r3,r3,1
 800197c:	29400044 	addi	r5,r5,1
 8001980:	19ffffc5 	stb	r7,-1(r3)
 8001984:	19bffb1e 	bne	r3,r6,8001974 <__alt_data_end+0xf8001974>
 8001988:	f800283a 	ret
 800198c:	1007883a 	mov	r3,r2
 8001990:	003ff606 	br	800196c <__alt_data_end+0xf800196c>
 8001994:	1007883a 	mov	r3,r2
 8001998:	003ff506 	br	8001970 <__alt_data_end+0xf8001970>
 800199c:	f800283a 	ret
 80019a0:	500d883a 	mov	r6,r10
 80019a4:	003ff106 	br	800196c <__alt_data_end+0xf800196c>

080019a8 <memset>:
 80019a8:	20c000cc 	andi	r3,r4,3
 80019ac:	2005883a 	mov	r2,r4
 80019b0:	18004426 	beq	r3,zero,8001ac4 <memset+0x11c>
 80019b4:	31ffffc4 	addi	r7,r6,-1
 80019b8:	30004026 	beq	r6,zero,8001abc <memset+0x114>
 80019bc:	2813883a 	mov	r9,r5
 80019c0:	200d883a 	mov	r6,r4
 80019c4:	2007883a 	mov	r3,r4
 80019c8:	00000406 	br	80019dc <memset+0x34>
 80019cc:	3a3fffc4 	addi	r8,r7,-1
 80019d0:	31800044 	addi	r6,r6,1
 80019d4:	38003926 	beq	r7,zero,8001abc <memset+0x114>
 80019d8:	400f883a 	mov	r7,r8
 80019dc:	18c00044 	addi	r3,r3,1
 80019e0:	32400005 	stb	r9,0(r6)
 80019e4:	1a0000cc 	andi	r8,r3,3
 80019e8:	403ff81e 	bne	r8,zero,80019cc <__alt_data_end+0xf80019cc>
 80019ec:	010000c4 	movi	r4,3
 80019f0:	21c02d2e 	bgeu	r4,r7,8001aa8 <memset+0x100>
 80019f4:	29003fcc 	andi	r4,r5,255
 80019f8:	200c923a 	slli	r6,r4,8
 80019fc:	3108b03a 	or	r4,r6,r4
 8001a00:	200c943a 	slli	r6,r4,16
 8001a04:	218cb03a 	or	r6,r4,r6
 8001a08:	010003c4 	movi	r4,15
 8001a0c:	21c0182e 	bgeu	r4,r7,8001a70 <memset+0xc8>
 8001a10:	3b3ffc04 	addi	r12,r7,-16
 8001a14:	6018d13a 	srli	r12,r12,4
 8001a18:	1a000104 	addi	r8,r3,4
 8001a1c:	1ac00204 	addi	r11,r3,8
 8001a20:	6008913a 	slli	r4,r12,4
 8001a24:	1a800304 	addi	r10,r3,12
 8001a28:	1813883a 	mov	r9,r3
 8001a2c:	21000504 	addi	r4,r4,20
 8001a30:	1909883a 	add	r4,r3,r4
 8001a34:	49800015 	stw	r6,0(r9)
 8001a38:	41800015 	stw	r6,0(r8)
 8001a3c:	59800015 	stw	r6,0(r11)
 8001a40:	51800015 	stw	r6,0(r10)
 8001a44:	42000404 	addi	r8,r8,16
 8001a48:	4a400404 	addi	r9,r9,16
 8001a4c:	5ac00404 	addi	r11,r11,16
 8001a50:	52800404 	addi	r10,r10,16
 8001a54:	413ff71e 	bne	r8,r4,8001a34 <__alt_data_end+0xf8001a34>
 8001a58:	63000044 	addi	r12,r12,1
 8001a5c:	6018913a 	slli	r12,r12,4
 8001a60:	39c003cc 	andi	r7,r7,15
 8001a64:	010000c4 	movi	r4,3
 8001a68:	1b07883a 	add	r3,r3,r12
 8001a6c:	21c00e2e 	bgeu	r4,r7,8001aa8 <memset+0x100>
 8001a70:	1813883a 	mov	r9,r3
 8001a74:	3811883a 	mov	r8,r7
 8001a78:	010000c4 	movi	r4,3
 8001a7c:	49800015 	stw	r6,0(r9)
 8001a80:	423fff04 	addi	r8,r8,-4
 8001a84:	4a400104 	addi	r9,r9,4
 8001a88:	223ffc36 	bltu	r4,r8,8001a7c <__alt_data_end+0xf8001a7c>
 8001a8c:	393fff04 	addi	r4,r7,-4
 8001a90:	2008d0ba 	srli	r4,r4,2
 8001a94:	39c000cc 	andi	r7,r7,3
 8001a98:	21000044 	addi	r4,r4,1
 8001a9c:	2109883a 	add	r4,r4,r4
 8001aa0:	2109883a 	add	r4,r4,r4
 8001aa4:	1907883a 	add	r3,r3,r4
 8001aa8:	38000526 	beq	r7,zero,8001ac0 <memset+0x118>
 8001aac:	19cf883a 	add	r7,r3,r7
 8001ab0:	19400005 	stb	r5,0(r3)
 8001ab4:	18c00044 	addi	r3,r3,1
 8001ab8:	38fffd1e 	bne	r7,r3,8001ab0 <__alt_data_end+0xf8001ab0>
 8001abc:	f800283a 	ret
 8001ac0:	f800283a 	ret
 8001ac4:	2007883a 	mov	r3,r4
 8001ac8:	300f883a 	mov	r7,r6
 8001acc:	003fc706 	br	80019ec <__alt_data_end+0xf80019ec>

08001ad0 <_realloc_r>:
 8001ad0:	defff604 	addi	sp,sp,-40
 8001ad4:	dc800215 	stw	r18,8(sp)
 8001ad8:	dfc00915 	stw	ra,36(sp)
 8001adc:	df000815 	stw	fp,32(sp)
 8001ae0:	ddc00715 	stw	r23,28(sp)
 8001ae4:	dd800615 	stw	r22,24(sp)
 8001ae8:	dd400515 	stw	r21,20(sp)
 8001aec:	dd000415 	stw	r20,16(sp)
 8001af0:	dcc00315 	stw	r19,12(sp)
 8001af4:	dc400115 	stw	r17,4(sp)
 8001af8:	dc000015 	stw	r16,0(sp)
 8001afc:	3025883a 	mov	r18,r6
 8001b00:	2800b726 	beq	r5,zero,8001de0 <_realloc_r+0x310>
 8001b04:	282b883a 	mov	r21,r5
 8001b08:	2029883a 	mov	r20,r4
 8001b0c:	80036080 	call	8003608 <__malloc_lock>
 8001b10:	a8bfff17 	ldw	r2,-4(r21)
 8001b14:	043fff04 	movi	r16,-4
 8001b18:	90c002c4 	addi	r3,r18,11
 8001b1c:	01000584 	movi	r4,22
 8001b20:	acfffe04 	addi	r19,r21,-8
 8001b24:	1420703a 	and	r16,r2,r16
 8001b28:	20c0332e 	bgeu	r4,r3,8001bf8 <_realloc_r+0x128>
 8001b2c:	047ffe04 	movi	r17,-8
 8001b30:	1c62703a 	and	r17,r3,r17
 8001b34:	8807883a 	mov	r3,r17
 8001b38:	88005816 	blt	r17,zero,8001c9c <_realloc_r+0x1cc>
 8001b3c:	8c805736 	bltu	r17,r18,8001c9c <_realloc_r+0x1cc>
 8001b40:	80c0300e 	bge	r16,r3,8001c04 <_realloc_r+0x134>
 8001b44:	07020034 	movhi	fp,2048
 8001b48:	e7187204 	addi	fp,fp,25032
 8001b4c:	e1c00217 	ldw	r7,8(fp)
 8001b50:	9c09883a 	add	r4,r19,r16
 8001b54:	22000117 	ldw	r8,4(r4)
 8001b58:	21c06326 	beq	r4,r7,8001ce8 <_realloc_r+0x218>
 8001b5c:	017fff84 	movi	r5,-2
 8001b60:	414a703a 	and	r5,r8,r5
 8001b64:	214b883a 	add	r5,r4,r5
 8001b68:	29800117 	ldw	r6,4(r5)
 8001b6c:	3180004c 	andi	r6,r6,1
 8001b70:	30003f26 	beq	r6,zero,8001c70 <_realloc_r+0x1a0>
 8001b74:	1080004c 	andi	r2,r2,1
 8001b78:	10008326 	beq	r2,zero,8001d88 <_realloc_r+0x2b8>
 8001b7c:	900b883a 	mov	r5,r18
 8001b80:	a009883a 	mov	r4,r20
 8001b84:	8000e140 	call	8000e14 <_malloc_r>
 8001b88:	1025883a 	mov	r18,r2
 8001b8c:	10011e26 	beq	r2,zero,8002008 <_realloc_r+0x538>
 8001b90:	a93fff17 	ldw	r4,-4(r21)
 8001b94:	10fffe04 	addi	r3,r2,-8
 8001b98:	00bfff84 	movi	r2,-2
 8001b9c:	2084703a 	and	r2,r4,r2
 8001ba0:	9885883a 	add	r2,r19,r2
 8001ba4:	1880ee26 	beq	r3,r2,8001f60 <_realloc_r+0x490>
 8001ba8:	81bfff04 	addi	r6,r16,-4
 8001bac:	00800904 	movi	r2,36
 8001bb0:	1180b836 	bltu	r2,r6,8001e94 <_realloc_r+0x3c4>
 8001bb4:	00c004c4 	movi	r3,19
 8001bb8:	19809636 	bltu	r3,r6,8001e14 <_realloc_r+0x344>
 8001bbc:	9005883a 	mov	r2,r18
 8001bc0:	a807883a 	mov	r3,r21
 8001bc4:	19000017 	ldw	r4,0(r3)
 8001bc8:	11000015 	stw	r4,0(r2)
 8001bcc:	19000117 	ldw	r4,4(r3)
 8001bd0:	11000115 	stw	r4,4(r2)
 8001bd4:	18c00217 	ldw	r3,8(r3)
 8001bd8:	10c00215 	stw	r3,8(r2)
 8001bdc:	a80b883a 	mov	r5,r21
 8001be0:	a009883a 	mov	r4,r20
 8001be4:	800289c0 	call	800289c <_free_r>
 8001be8:	a009883a 	mov	r4,r20
 8001bec:	800362c0 	call	800362c <__malloc_unlock>
 8001bf0:	9005883a 	mov	r2,r18
 8001bf4:	00001206 	br	8001c40 <_realloc_r+0x170>
 8001bf8:	00c00404 	movi	r3,16
 8001bfc:	1823883a 	mov	r17,r3
 8001c00:	003fce06 	br	8001b3c <__alt_data_end+0xf8001b3c>
 8001c04:	a825883a 	mov	r18,r21
 8001c08:	8445c83a 	sub	r2,r16,r17
 8001c0c:	00c003c4 	movi	r3,15
 8001c10:	18802636 	bltu	r3,r2,8001cac <_realloc_r+0x1dc>
 8001c14:	99800117 	ldw	r6,4(r19)
 8001c18:	9c07883a 	add	r3,r19,r16
 8001c1c:	3180004c 	andi	r6,r6,1
 8001c20:	3420b03a 	or	r16,r6,r16
 8001c24:	9c000115 	stw	r16,4(r19)
 8001c28:	18800117 	ldw	r2,4(r3)
 8001c2c:	10800054 	ori	r2,r2,1
 8001c30:	18800115 	stw	r2,4(r3)
 8001c34:	a009883a 	mov	r4,r20
 8001c38:	800362c0 	call	800362c <__malloc_unlock>
 8001c3c:	9005883a 	mov	r2,r18
 8001c40:	dfc00917 	ldw	ra,36(sp)
 8001c44:	df000817 	ldw	fp,32(sp)
 8001c48:	ddc00717 	ldw	r23,28(sp)
 8001c4c:	dd800617 	ldw	r22,24(sp)
 8001c50:	dd400517 	ldw	r21,20(sp)
 8001c54:	dd000417 	ldw	r20,16(sp)
 8001c58:	dcc00317 	ldw	r19,12(sp)
 8001c5c:	dc800217 	ldw	r18,8(sp)
 8001c60:	dc400117 	ldw	r17,4(sp)
 8001c64:	dc000017 	ldw	r16,0(sp)
 8001c68:	dec00a04 	addi	sp,sp,40
 8001c6c:	f800283a 	ret
 8001c70:	017fff04 	movi	r5,-4
 8001c74:	414a703a 	and	r5,r8,r5
 8001c78:	814d883a 	add	r6,r16,r5
 8001c7c:	30c01f16 	blt	r6,r3,8001cfc <_realloc_r+0x22c>
 8001c80:	20800317 	ldw	r2,12(r4)
 8001c84:	20c00217 	ldw	r3,8(r4)
 8001c88:	a825883a 	mov	r18,r21
 8001c8c:	3021883a 	mov	r16,r6
 8001c90:	18800315 	stw	r2,12(r3)
 8001c94:	10c00215 	stw	r3,8(r2)
 8001c98:	003fdb06 	br	8001c08 <__alt_data_end+0xf8001c08>
 8001c9c:	00800304 	movi	r2,12
 8001ca0:	a0800015 	stw	r2,0(r20)
 8001ca4:	0005883a 	mov	r2,zero
 8001ca8:	003fe506 	br	8001c40 <__alt_data_end+0xf8001c40>
 8001cac:	98c00117 	ldw	r3,4(r19)
 8001cb0:	9c4b883a 	add	r5,r19,r17
 8001cb4:	11000054 	ori	r4,r2,1
 8001cb8:	18c0004c 	andi	r3,r3,1
 8001cbc:	1c62b03a 	or	r17,r3,r17
 8001cc0:	9c400115 	stw	r17,4(r19)
 8001cc4:	29000115 	stw	r4,4(r5)
 8001cc8:	2885883a 	add	r2,r5,r2
 8001ccc:	10c00117 	ldw	r3,4(r2)
 8001cd0:	29400204 	addi	r5,r5,8
 8001cd4:	a009883a 	mov	r4,r20
 8001cd8:	18c00054 	ori	r3,r3,1
 8001cdc:	10c00115 	stw	r3,4(r2)
 8001ce0:	800289c0 	call	800289c <_free_r>
 8001ce4:	003fd306 	br	8001c34 <__alt_data_end+0xf8001c34>
 8001ce8:	017fff04 	movi	r5,-4
 8001cec:	414a703a 	and	r5,r8,r5
 8001cf0:	89800404 	addi	r6,r17,16
 8001cf4:	8151883a 	add	r8,r16,r5
 8001cf8:	4180590e 	bge	r8,r6,8001e60 <_realloc_r+0x390>
 8001cfc:	1080004c 	andi	r2,r2,1
 8001d00:	103f9e1e 	bne	r2,zero,8001b7c <__alt_data_end+0xf8001b7c>
 8001d04:	adbffe17 	ldw	r22,-8(r21)
 8001d08:	00bfff04 	movi	r2,-4
 8001d0c:	9dadc83a 	sub	r22,r19,r22
 8001d10:	b1800117 	ldw	r6,4(r22)
 8001d14:	3084703a 	and	r2,r6,r2
 8001d18:	20002026 	beq	r4,zero,8001d9c <_realloc_r+0x2cc>
 8001d1c:	80af883a 	add	r23,r16,r2
 8001d20:	b96f883a 	add	r23,r23,r5
 8001d24:	21c05f26 	beq	r4,r7,8001ea4 <_realloc_r+0x3d4>
 8001d28:	b8c01c16 	blt	r23,r3,8001d9c <_realloc_r+0x2cc>
 8001d2c:	20800317 	ldw	r2,12(r4)
 8001d30:	20c00217 	ldw	r3,8(r4)
 8001d34:	81bfff04 	addi	r6,r16,-4
 8001d38:	01000904 	movi	r4,36
 8001d3c:	18800315 	stw	r2,12(r3)
 8001d40:	10c00215 	stw	r3,8(r2)
 8001d44:	b0c00217 	ldw	r3,8(r22)
 8001d48:	b0800317 	ldw	r2,12(r22)
 8001d4c:	b4800204 	addi	r18,r22,8
 8001d50:	18800315 	stw	r2,12(r3)
 8001d54:	10c00215 	stw	r3,8(r2)
 8001d58:	21801b36 	bltu	r4,r6,8001dc8 <_realloc_r+0x2f8>
 8001d5c:	008004c4 	movi	r2,19
 8001d60:	1180352e 	bgeu	r2,r6,8001e38 <_realloc_r+0x368>
 8001d64:	a8800017 	ldw	r2,0(r21)
 8001d68:	b0800215 	stw	r2,8(r22)
 8001d6c:	a8800117 	ldw	r2,4(r21)
 8001d70:	b0800315 	stw	r2,12(r22)
 8001d74:	008006c4 	movi	r2,27
 8001d78:	11807f36 	bltu	r2,r6,8001f78 <_realloc_r+0x4a8>
 8001d7c:	b0800404 	addi	r2,r22,16
 8001d80:	ad400204 	addi	r21,r21,8
 8001d84:	00002d06 	br	8001e3c <_realloc_r+0x36c>
 8001d88:	adbffe17 	ldw	r22,-8(r21)
 8001d8c:	00bfff04 	movi	r2,-4
 8001d90:	9dadc83a 	sub	r22,r19,r22
 8001d94:	b1000117 	ldw	r4,4(r22)
 8001d98:	2084703a 	and	r2,r4,r2
 8001d9c:	b03f7726 	beq	r22,zero,8001b7c <__alt_data_end+0xf8001b7c>
 8001da0:	80af883a 	add	r23,r16,r2
 8001da4:	b8ff7516 	blt	r23,r3,8001b7c <__alt_data_end+0xf8001b7c>
 8001da8:	b0800317 	ldw	r2,12(r22)
 8001dac:	b0c00217 	ldw	r3,8(r22)
 8001db0:	81bfff04 	addi	r6,r16,-4
 8001db4:	01000904 	movi	r4,36
 8001db8:	18800315 	stw	r2,12(r3)
 8001dbc:	10c00215 	stw	r3,8(r2)
 8001dc0:	b4800204 	addi	r18,r22,8
 8001dc4:	21bfe52e 	bgeu	r4,r6,8001d5c <__alt_data_end+0xf8001d5c>
 8001dc8:	a80b883a 	mov	r5,r21
 8001dcc:	9009883a 	mov	r4,r18
 8001dd0:	800184c0 	call	800184c <memmove>
 8001dd4:	b821883a 	mov	r16,r23
 8001dd8:	b027883a 	mov	r19,r22
 8001ddc:	003f8a06 	br	8001c08 <__alt_data_end+0xf8001c08>
 8001de0:	300b883a 	mov	r5,r6
 8001de4:	dfc00917 	ldw	ra,36(sp)
 8001de8:	df000817 	ldw	fp,32(sp)
 8001dec:	ddc00717 	ldw	r23,28(sp)
 8001df0:	dd800617 	ldw	r22,24(sp)
 8001df4:	dd400517 	ldw	r21,20(sp)
 8001df8:	dd000417 	ldw	r20,16(sp)
 8001dfc:	dcc00317 	ldw	r19,12(sp)
 8001e00:	dc800217 	ldw	r18,8(sp)
 8001e04:	dc400117 	ldw	r17,4(sp)
 8001e08:	dc000017 	ldw	r16,0(sp)
 8001e0c:	dec00a04 	addi	sp,sp,40
 8001e10:	8000e141 	jmpi	8000e14 <_malloc_r>
 8001e14:	a8c00017 	ldw	r3,0(r21)
 8001e18:	90c00015 	stw	r3,0(r18)
 8001e1c:	a8c00117 	ldw	r3,4(r21)
 8001e20:	90c00115 	stw	r3,4(r18)
 8001e24:	00c006c4 	movi	r3,27
 8001e28:	19804536 	bltu	r3,r6,8001f40 <_realloc_r+0x470>
 8001e2c:	90800204 	addi	r2,r18,8
 8001e30:	a8c00204 	addi	r3,r21,8
 8001e34:	003f6306 	br	8001bc4 <__alt_data_end+0xf8001bc4>
 8001e38:	9005883a 	mov	r2,r18
 8001e3c:	a8c00017 	ldw	r3,0(r21)
 8001e40:	b821883a 	mov	r16,r23
 8001e44:	b027883a 	mov	r19,r22
 8001e48:	10c00015 	stw	r3,0(r2)
 8001e4c:	a8c00117 	ldw	r3,4(r21)
 8001e50:	10c00115 	stw	r3,4(r2)
 8001e54:	a8c00217 	ldw	r3,8(r21)
 8001e58:	10c00215 	stw	r3,8(r2)
 8001e5c:	003f6a06 	br	8001c08 <__alt_data_end+0xf8001c08>
 8001e60:	9c67883a 	add	r19,r19,r17
 8001e64:	4445c83a 	sub	r2,r8,r17
 8001e68:	e4c00215 	stw	r19,8(fp)
 8001e6c:	10800054 	ori	r2,r2,1
 8001e70:	98800115 	stw	r2,4(r19)
 8001e74:	a8bfff17 	ldw	r2,-4(r21)
 8001e78:	a009883a 	mov	r4,r20
 8001e7c:	1080004c 	andi	r2,r2,1
 8001e80:	1462b03a 	or	r17,r2,r17
 8001e84:	ac7fff15 	stw	r17,-4(r21)
 8001e88:	800362c0 	call	800362c <__malloc_unlock>
 8001e8c:	a805883a 	mov	r2,r21
 8001e90:	003f6b06 	br	8001c40 <__alt_data_end+0xf8001c40>
 8001e94:	a80b883a 	mov	r5,r21
 8001e98:	9009883a 	mov	r4,r18
 8001e9c:	800184c0 	call	800184c <memmove>
 8001ea0:	003f4e06 	br	8001bdc <__alt_data_end+0xf8001bdc>
 8001ea4:	89000404 	addi	r4,r17,16
 8001ea8:	b93fbc16 	blt	r23,r4,8001d9c <__alt_data_end+0xf8001d9c>
 8001eac:	b0800317 	ldw	r2,12(r22)
 8001eb0:	b0c00217 	ldw	r3,8(r22)
 8001eb4:	81bfff04 	addi	r6,r16,-4
 8001eb8:	01000904 	movi	r4,36
 8001ebc:	18800315 	stw	r2,12(r3)
 8001ec0:	10c00215 	stw	r3,8(r2)
 8001ec4:	b4800204 	addi	r18,r22,8
 8001ec8:	21804336 	bltu	r4,r6,8001fd8 <_realloc_r+0x508>
 8001ecc:	008004c4 	movi	r2,19
 8001ed0:	11803f2e 	bgeu	r2,r6,8001fd0 <_realloc_r+0x500>
 8001ed4:	a8800017 	ldw	r2,0(r21)
 8001ed8:	b0800215 	stw	r2,8(r22)
 8001edc:	a8800117 	ldw	r2,4(r21)
 8001ee0:	b0800315 	stw	r2,12(r22)
 8001ee4:	008006c4 	movi	r2,27
 8001ee8:	11803f36 	bltu	r2,r6,8001fe8 <_realloc_r+0x518>
 8001eec:	b0800404 	addi	r2,r22,16
 8001ef0:	ad400204 	addi	r21,r21,8
 8001ef4:	a8c00017 	ldw	r3,0(r21)
 8001ef8:	10c00015 	stw	r3,0(r2)
 8001efc:	a8c00117 	ldw	r3,4(r21)
 8001f00:	10c00115 	stw	r3,4(r2)
 8001f04:	a8c00217 	ldw	r3,8(r21)
 8001f08:	10c00215 	stw	r3,8(r2)
 8001f0c:	b447883a 	add	r3,r22,r17
 8001f10:	bc45c83a 	sub	r2,r23,r17
 8001f14:	e0c00215 	stw	r3,8(fp)
 8001f18:	10800054 	ori	r2,r2,1
 8001f1c:	18800115 	stw	r2,4(r3)
 8001f20:	b0800117 	ldw	r2,4(r22)
 8001f24:	a009883a 	mov	r4,r20
 8001f28:	1080004c 	andi	r2,r2,1
 8001f2c:	1462b03a 	or	r17,r2,r17
 8001f30:	b4400115 	stw	r17,4(r22)
 8001f34:	800362c0 	call	800362c <__malloc_unlock>
 8001f38:	9005883a 	mov	r2,r18
 8001f3c:	003f4006 	br	8001c40 <__alt_data_end+0xf8001c40>
 8001f40:	a8c00217 	ldw	r3,8(r21)
 8001f44:	90c00215 	stw	r3,8(r18)
 8001f48:	a8c00317 	ldw	r3,12(r21)
 8001f4c:	90c00315 	stw	r3,12(r18)
 8001f50:	30801126 	beq	r6,r2,8001f98 <_realloc_r+0x4c8>
 8001f54:	90800404 	addi	r2,r18,16
 8001f58:	a8c00404 	addi	r3,r21,16
 8001f5c:	003f1906 	br	8001bc4 <__alt_data_end+0xf8001bc4>
 8001f60:	90ffff17 	ldw	r3,-4(r18)
 8001f64:	00bfff04 	movi	r2,-4
 8001f68:	a825883a 	mov	r18,r21
 8001f6c:	1884703a 	and	r2,r3,r2
 8001f70:	80a1883a 	add	r16,r16,r2
 8001f74:	003f2406 	br	8001c08 <__alt_data_end+0xf8001c08>
 8001f78:	a8800217 	ldw	r2,8(r21)
 8001f7c:	b0800415 	stw	r2,16(r22)
 8001f80:	a8800317 	ldw	r2,12(r21)
 8001f84:	b0800515 	stw	r2,20(r22)
 8001f88:	31000a26 	beq	r6,r4,8001fb4 <_realloc_r+0x4e4>
 8001f8c:	b0800604 	addi	r2,r22,24
 8001f90:	ad400404 	addi	r21,r21,16
 8001f94:	003fa906 	br	8001e3c <__alt_data_end+0xf8001e3c>
 8001f98:	a9000417 	ldw	r4,16(r21)
 8001f9c:	90800604 	addi	r2,r18,24
 8001fa0:	a8c00604 	addi	r3,r21,24
 8001fa4:	91000415 	stw	r4,16(r18)
 8001fa8:	a9000517 	ldw	r4,20(r21)
 8001fac:	91000515 	stw	r4,20(r18)
 8001fb0:	003f0406 	br	8001bc4 <__alt_data_end+0xf8001bc4>
 8001fb4:	a8c00417 	ldw	r3,16(r21)
 8001fb8:	ad400604 	addi	r21,r21,24
 8001fbc:	b0800804 	addi	r2,r22,32
 8001fc0:	b0c00615 	stw	r3,24(r22)
 8001fc4:	a8ffff17 	ldw	r3,-4(r21)
 8001fc8:	b0c00715 	stw	r3,28(r22)
 8001fcc:	003f9b06 	br	8001e3c <__alt_data_end+0xf8001e3c>
 8001fd0:	9005883a 	mov	r2,r18
 8001fd4:	003fc706 	br	8001ef4 <__alt_data_end+0xf8001ef4>
 8001fd8:	a80b883a 	mov	r5,r21
 8001fdc:	9009883a 	mov	r4,r18
 8001fe0:	800184c0 	call	800184c <memmove>
 8001fe4:	003fc906 	br	8001f0c <__alt_data_end+0xf8001f0c>
 8001fe8:	a8800217 	ldw	r2,8(r21)
 8001fec:	b0800415 	stw	r2,16(r22)
 8001ff0:	a8800317 	ldw	r2,12(r21)
 8001ff4:	b0800515 	stw	r2,20(r22)
 8001ff8:	31000726 	beq	r6,r4,8002018 <_realloc_r+0x548>
 8001ffc:	b0800604 	addi	r2,r22,24
 8002000:	ad400404 	addi	r21,r21,16
 8002004:	003fbb06 	br	8001ef4 <__alt_data_end+0xf8001ef4>
 8002008:	a009883a 	mov	r4,r20
 800200c:	800362c0 	call	800362c <__malloc_unlock>
 8002010:	0005883a 	mov	r2,zero
 8002014:	003f0a06 	br	8001c40 <__alt_data_end+0xf8001c40>
 8002018:	a8c00417 	ldw	r3,16(r21)
 800201c:	ad400604 	addi	r21,r21,24
 8002020:	b0800804 	addi	r2,r22,32
 8002024:	b0c00615 	stw	r3,24(r22)
 8002028:	a8ffff17 	ldw	r3,-4(r21)
 800202c:	b0c00715 	stw	r3,28(r22)
 8002030:	003fb006 	br	8001ef4 <__alt_data_end+0xf8001ef4>

08002034 <_sbrk_r>:
 8002034:	defffd04 	addi	sp,sp,-12
 8002038:	dc000015 	stw	r16,0(sp)
 800203c:	04020074 	movhi	r16,2049
 8002040:	dc400115 	stw	r17,4(sp)
 8002044:	8424b804 	addi	r16,r16,-27936
 8002048:	2023883a 	mov	r17,r4
 800204c:	2809883a 	mov	r4,r5
 8002050:	dfc00215 	stw	ra,8(sp)
 8002054:	80000015 	stw	zero,0(r16)
 8002058:	80037ec0 	call	80037ec <sbrk>
 800205c:	00ffffc4 	movi	r3,-1
 8002060:	10c00526 	beq	r2,r3,8002078 <_sbrk_r+0x44>
 8002064:	dfc00217 	ldw	ra,8(sp)
 8002068:	dc400117 	ldw	r17,4(sp)
 800206c:	dc000017 	ldw	r16,0(sp)
 8002070:	dec00304 	addi	sp,sp,12
 8002074:	f800283a 	ret
 8002078:	80c00017 	ldw	r3,0(r16)
 800207c:	183ff926 	beq	r3,zero,8002064 <__alt_data_end+0xf8002064>
 8002080:	88c00015 	stw	r3,0(r17)
 8002084:	003ff706 	br	8002064 <__alt_data_end+0xf8002064>

08002088 <__sread>:
 8002088:	defffe04 	addi	sp,sp,-8
 800208c:	dc000015 	stw	r16,0(sp)
 8002090:	2821883a 	mov	r16,r5
 8002094:	2940038f 	ldh	r5,14(r5)
 8002098:	dfc00115 	stw	ra,4(sp)
 800209c:	8002dc80 	call	8002dc8 <_read_r>
 80020a0:	10000716 	blt	r2,zero,80020c0 <__sread+0x38>
 80020a4:	80c01417 	ldw	r3,80(r16)
 80020a8:	1887883a 	add	r3,r3,r2
 80020ac:	80c01415 	stw	r3,80(r16)
 80020b0:	dfc00117 	ldw	ra,4(sp)
 80020b4:	dc000017 	ldw	r16,0(sp)
 80020b8:	dec00204 	addi	sp,sp,8
 80020bc:	f800283a 	ret
 80020c0:	80c0030b 	ldhu	r3,12(r16)
 80020c4:	18fbffcc 	andi	r3,r3,61439
 80020c8:	80c0030d 	sth	r3,12(r16)
 80020cc:	dfc00117 	ldw	ra,4(sp)
 80020d0:	dc000017 	ldw	r16,0(sp)
 80020d4:	dec00204 	addi	sp,sp,8
 80020d8:	f800283a 	ret

080020dc <__seofread>:
 80020dc:	0005883a 	mov	r2,zero
 80020e0:	f800283a 	ret

080020e4 <__swrite>:
 80020e4:	2880030b 	ldhu	r2,12(r5)
 80020e8:	defffb04 	addi	sp,sp,-20
 80020ec:	dcc00315 	stw	r19,12(sp)
 80020f0:	dc800215 	stw	r18,8(sp)
 80020f4:	dc400115 	stw	r17,4(sp)
 80020f8:	dc000015 	stw	r16,0(sp)
 80020fc:	dfc00415 	stw	ra,16(sp)
 8002100:	10c0400c 	andi	r3,r2,256
 8002104:	2821883a 	mov	r16,r5
 8002108:	2023883a 	mov	r17,r4
 800210c:	3025883a 	mov	r18,r6
 8002110:	3827883a 	mov	r19,r7
 8002114:	18000526 	beq	r3,zero,800212c <__swrite+0x48>
 8002118:	2940038f 	ldh	r5,14(r5)
 800211c:	01c00084 	movi	r7,2
 8002120:	000d883a 	mov	r6,zero
 8002124:	8002bac0 	call	8002bac <_lseek_r>
 8002128:	8080030b 	ldhu	r2,12(r16)
 800212c:	8140038f 	ldh	r5,14(r16)
 8002130:	10bbffcc 	andi	r2,r2,61439
 8002134:	980f883a 	mov	r7,r19
 8002138:	900d883a 	mov	r6,r18
 800213c:	8809883a 	mov	r4,r17
 8002140:	8080030d 	sth	r2,12(r16)
 8002144:	dfc00417 	ldw	ra,16(sp)
 8002148:	dcc00317 	ldw	r19,12(sp)
 800214c:	dc800217 	ldw	r18,8(sp)
 8002150:	dc400117 	ldw	r17,4(sp)
 8002154:	dc000017 	ldw	r16,0(sp)
 8002158:	dec00504 	addi	sp,sp,20
 800215c:	80021c41 	jmpi	80021c4 <_write_r>

08002160 <__sseek>:
 8002160:	defffe04 	addi	sp,sp,-8
 8002164:	dc000015 	stw	r16,0(sp)
 8002168:	2821883a 	mov	r16,r5
 800216c:	2940038f 	ldh	r5,14(r5)
 8002170:	dfc00115 	stw	ra,4(sp)
 8002174:	8002bac0 	call	8002bac <_lseek_r>
 8002178:	00ffffc4 	movi	r3,-1
 800217c:	10c00826 	beq	r2,r3,80021a0 <__sseek+0x40>
 8002180:	80c0030b 	ldhu	r3,12(r16)
 8002184:	80801415 	stw	r2,80(r16)
 8002188:	18c40014 	ori	r3,r3,4096
 800218c:	80c0030d 	sth	r3,12(r16)
 8002190:	dfc00117 	ldw	ra,4(sp)
 8002194:	dc000017 	ldw	r16,0(sp)
 8002198:	dec00204 	addi	sp,sp,8
 800219c:	f800283a 	ret
 80021a0:	80c0030b 	ldhu	r3,12(r16)
 80021a4:	18fbffcc 	andi	r3,r3,61439
 80021a8:	80c0030d 	sth	r3,12(r16)
 80021ac:	dfc00117 	ldw	ra,4(sp)
 80021b0:	dc000017 	ldw	r16,0(sp)
 80021b4:	dec00204 	addi	sp,sp,8
 80021b8:	f800283a 	ret

080021bc <__sclose>:
 80021bc:	2940038f 	ldh	r5,14(r5)
 80021c0:	80023781 	jmpi	8002378 <_close_r>

080021c4 <_write_r>:
 80021c4:	defffd04 	addi	sp,sp,-12
 80021c8:	2805883a 	mov	r2,r5
 80021cc:	dc000015 	stw	r16,0(sp)
 80021d0:	04020074 	movhi	r16,2049
 80021d4:	dc400115 	stw	r17,4(sp)
 80021d8:	300b883a 	mov	r5,r6
 80021dc:	8424b804 	addi	r16,r16,-27936
 80021e0:	2023883a 	mov	r17,r4
 80021e4:	380d883a 	mov	r6,r7
 80021e8:	1009883a 	mov	r4,r2
 80021ec:	dfc00215 	stw	ra,8(sp)
 80021f0:	80000015 	stw	zero,0(r16)
 80021f4:	80038d80 	call	80038d8 <write>
 80021f8:	00ffffc4 	movi	r3,-1
 80021fc:	10c00526 	beq	r2,r3,8002214 <_write_r+0x50>
 8002200:	dfc00217 	ldw	ra,8(sp)
 8002204:	dc400117 	ldw	r17,4(sp)
 8002208:	dc000017 	ldw	r16,0(sp)
 800220c:	dec00304 	addi	sp,sp,12
 8002210:	f800283a 	ret
 8002214:	80c00017 	ldw	r3,0(r16)
 8002218:	183ff926 	beq	r3,zero,8002200 <__alt_data_end+0xf8002200>
 800221c:	88c00015 	stw	r3,0(r17)
 8002220:	003ff706 	br	8002200 <__alt_data_end+0xf8002200>

08002224 <__swsetup_r>:
 8002224:	00820034 	movhi	r2,2048
 8002228:	defffd04 	addi	sp,sp,-12
 800222c:	109e0204 	addi	r2,r2,30728
 8002230:	dc400115 	stw	r17,4(sp)
 8002234:	2023883a 	mov	r17,r4
 8002238:	11000017 	ldw	r4,0(r2)
 800223c:	dc000015 	stw	r16,0(sp)
 8002240:	dfc00215 	stw	ra,8(sp)
 8002244:	2821883a 	mov	r16,r5
 8002248:	20000226 	beq	r4,zero,8002254 <__swsetup_r+0x30>
 800224c:	20800e17 	ldw	r2,56(r4)
 8002250:	10003126 	beq	r2,zero,8002318 <__swsetup_r+0xf4>
 8002254:	8080030b 	ldhu	r2,12(r16)
 8002258:	10c0020c 	andi	r3,r2,8
 800225c:	1009883a 	mov	r4,r2
 8002260:	18000f26 	beq	r3,zero,80022a0 <__swsetup_r+0x7c>
 8002264:	80c00417 	ldw	r3,16(r16)
 8002268:	18001526 	beq	r3,zero,80022c0 <__swsetup_r+0x9c>
 800226c:	1100004c 	andi	r4,r2,1
 8002270:	20001c1e 	bne	r4,zero,80022e4 <__swsetup_r+0xc0>
 8002274:	1080008c 	andi	r2,r2,2
 8002278:	1000291e 	bne	r2,zero,8002320 <__swsetup_r+0xfc>
 800227c:	80800517 	ldw	r2,20(r16)
 8002280:	80800215 	stw	r2,8(r16)
 8002284:	18001c26 	beq	r3,zero,80022f8 <__swsetup_r+0xd4>
 8002288:	0005883a 	mov	r2,zero
 800228c:	dfc00217 	ldw	ra,8(sp)
 8002290:	dc400117 	ldw	r17,4(sp)
 8002294:	dc000017 	ldw	r16,0(sp)
 8002298:	dec00304 	addi	sp,sp,12
 800229c:	f800283a 	ret
 80022a0:	2080040c 	andi	r2,r4,16
 80022a4:	10002e26 	beq	r2,zero,8002360 <__swsetup_r+0x13c>
 80022a8:	2080010c 	andi	r2,r4,4
 80022ac:	10001e1e 	bne	r2,zero,8002328 <__swsetup_r+0x104>
 80022b0:	80c00417 	ldw	r3,16(r16)
 80022b4:	20800214 	ori	r2,r4,8
 80022b8:	8080030d 	sth	r2,12(r16)
 80022bc:	183feb1e 	bne	r3,zero,800226c <__alt_data_end+0xf800226c>
 80022c0:	1100a00c 	andi	r4,r2,640
 80022c4:	01408004 	movi	r5,512
 80022c8:	217fe826 	beq	r4,r5,800226c <__alt_data_end+0xf800226c>
 80022cc:	800b883a 	mov	r5,r16
 80022d0:	8809883a 	mov	r4,r17
 80022d4:	8002c0c0 	call	8002c0c <__smakebuf_r>
 80022d8:	8080030b 	ldhu	r2,12(r16)
 80022dc:	80c00417 	ldw	r3,16(r16)
 80022e0:	003fe206 	br	800226c <__alt_data_end+0xf800226c>
 80022e4:	80800517 	ldw	r2,20(r16)
 80022e8:	80000215 	stw	zero,8(r16)
 80022ec:	0085c83a 	sub	r2,zero,r2
 80022f0:	80800615 	stw	r2,24(r16)
 80022f4:	183fe41e 	bne	r3,zero,8002288 <__alt_data_end+0xf8002288>
 80022f8:	80c0030b 	ldhu	r3,12(r16)
 80022fc:	0005883a 	mov	r2,zero
 8002300:	1900200c 	andi	r4,r3,128
 8002304:	203fe126 	beq	r4,zero,800228c <__alt_data_end+0xf800228c>
 8002308:	18c01014 	ori	r3,r3,64
 800230c:	80c0030d 	sth	r3,12(r16)
 8002310:	00bfffc4 	movi	r2,-1
 8002314:	003fdd06 	br	800228c <__alt_data_end+0xf800228c>
 8002318:	80007800 	call	8000780 <__sinit>
 800231c:	003fcd06 	br	8002254 <__alt_data_end+0xf8002254>
 8002320:	0005883a 	mov	r2,zero
 8002324:	003fd606 	br	8002280 <__alt_data_end+0xf8002280>
 8002328:	81400c17 	ldw	r5,48(r16)
 800232c:	28000626 	beq	r5,zero,8002348 <__swsetup_r+0x124>
 8002330:	80801004 	addi	r2,r16,64
 8002334:	28800326 	beq	r5,r2,8002344 <__swsetup_r+0x120>
 8002338:	8809883a 	mov	r4,r17
 800233c:	800289c0 	call	800289c <_free_r>
 8002340:	8100030b 	ldhu	r4,12(r16)
 8002344:	80000c15 	stw	zero,48(r16)
 8002348:	80c00417 	ldw	r3,16(r16)
 800234c:	00bff6c4 	movi	r2,-37
 8002350:	1108703a 	and	r4,r2,r4
 8002354:	80000115 	stw	zero,4(r16)
 8002358:	80c00015 	stw	r3,0(r16)
 800235c:	003fd506 	br	80022b4 <__alt_data_end+0xf80022b4>
 8002360:	00800244 	movi	r2,9
 8002364:	88800015 	stw	r2,0(r17)
 8002368:	20801014 	ori	r2,r4,64
 800236c:	8080030d 	sth	r2,12(r16)
 8002370:	00bfffc4 	movi	r2,-1
 8002374:	003fc506 	br	800228c <__alt_data_end+0xf800228c>

08002378 <_close_r>:
 8002378:	defffd04 	addi	sp,sp,-12
 800237c:	dc000015 	stw	r16,0(sp)
 8002380:	04020074 	movhi	r16,2049
 8002384:	dc400115 	stw	r17,4(sp)
 8002388:	8424b804 	addi	r16,r16,-27936
 800238c:	2023883a 	mov	r17,r4
 8002390:	2809883a 	mov	r4,r5
 8002394:	dfc00215 	stw	ra,8(sp)
 8002398:	80000015 	stw	zero,0(r16)
 800239c:	80030c80 	call	80030c8 <close>
 80023a0:	00ffffc4 	movi	r3,-1
 80023a4:	10c00526 	beq	r2,r3,80023bc <_close_r+0x44>
 80023a8:	dfc00217 	ldw	ra,8(sp)
 80023ac:	dc400117 	ldw	r17,4(sp)
 80023b0:	dc000017 	ldw	r16,0(sp)
 80023b4:	dec00304 	addi	sp,sp,12
 80023b8:	f800283a 	ret
 80023bc:	80c00017 	ldw	r3,0(r16)
 80023c0:	183ff926 	beq	r3,zero,80023a8 <__alt_data_end+0xf80023a8>
 80023c4:	88c00015 	stw	r3,0(r17)
 80023c8:	003ff706 	br	80023a8 <__alt_data_end+0xf80023a8>

080023cc <_fclose_r>:
 80023cc:	28003926 	beq	r5,zero,80024b4 <_fclose_r+0xe8>
 80023d0:	defffc04 	addi	sp,sp,-16
 80023d4:	dc400115 	stw	r17,4(sp)
 80023d8:	dc000015 	stw	r16,0(sp)
 80023dc:	dfc00315 	stw	ra,12(sp)
 80023e0:	dc800215 	stw	r18,8(sp)
 80023e4:	2023883a 	mov	r17,r4
 80023e8:	2821883a 	mov	r16,r5
 80023ec:	20000226 	beq	r4,zero,80023f8 <_fclose_r+0x2c>
 80023f0:	20800e17 	ldw	r2,56(r4)
 80023f4:	10002726 	beq	r2,zero,8002494 <_fclose_r+0xc8>
 80023f8:	8080030f 	ldh	r2,12(r16)
 80023fc:	1000071e 	bne	r2,zero,800241c <_fclose_r+0x50>
 8002400:	0005883a 	mov	r2,zero
 8002404:	dfc00317 	ldw	ra,12(sp)
 8002408:	dc800217 	ldw	r18,8(sp)
 800240c:	dc400117 	ldw	r17,4(sp)
 8002410:	dc000017 	ldw	r16,0(sp)
 8002414:	dec00404 	addi	sp,sp,16
 8002418:	f800283a 	ret
 800241c:	800b883a 	mov	r5,r16
 8002420:	8809883a 	mov	r4,r17
 8002424:	80024d00 	call	80024d0 <__sflush_r>
 8002428:	1025883a 	mov	r18,r2
 800242c:	80800b17 	ldw	r2,44(r16)
 8002430:	10000426 	beq	r2,zero,8002444 <_fclose_r+0x78>
 8002434:	81400717 	ldw	r5,28(r16)
 8002438:	8809883a 	mov	r4,r17
 800243c:	103ee83a 	callr	r2
 8002440:	10001616 	blt	r2,zero,800249c <_fclose_r+0xd0>
 8002444:	8080030b 	ldhu	r2,12(r16)
 8002448:	1080200c 	andi	r2,r2,128
 800244c:	1000151e 	bne	r2,zero,80024a4 <_fclose_r+0xd8>
 8002450:	81400c17 	ldw	r5,48(r16)
 8002454:	28000526 	beq	r5,zero,800246c <_fclose_r+0xa0>
 8002458:	80801004 	addi	r2,r16,64
 800245c:	28800226 	beq	r5,r2,8002468 <_fclose_r+0x9c>
 8002460:	8809883a 	mov	r4,r17
 8002464:	800289c0 	call	800289c <_free_r>
 8002468:	80000c15 	stw	zero,48(r16)
 800246c:	81401117 	ldw	r5,68(r16)
 8002470:	28000326 	beq	r5,zero,8002480 <_fclose_r+0xb4>
 8002474:	8809883a 	mov	r4,r17
 8002478:	800289c0 	call	800289c <_free_r>
 800247c:	80001115 	stw	zero,68(r16)
 8002480:	80007900 	call	8000790 <__sfp_lock_acquire>
 8002484:	8000030d 	sth	zero,12(r16)
 8002488:	80007940 	call	8000794 <__sfp_lock_release>
 800248c:	9005883a 	mov	r2,r18
 8002490:	003fdc06 	br	8002404 <__alt_data_end+0xf8002404>
 8002494:	80007800 	call	8000780 <__sinit>
 8002498:	003fd706 	br	80023f8 <__alt_data_end+0xf80023f8>
 800249c:	04bfffc4 	movi	r18,-1
 80024a0:	003fe806 	br	8002444 <__alt_data_end+0xf8002444>
 80024a4:	81400417 	ldw	r5,16(r16)
 80024a8:	8809883a 	mov	r4,r17
 80024ac:	800289c0 	call	800289c <_free_r>
 80024b0:	003fe706 	br	8002450 <__alt_data_end+0xf8002450>
 80024b4:	0005883a 	mov	r2,zero
 80024b8:	f800283a 	ret

080024bc <fclose>:
 80024bc:	00820034 	movhi	r2,2048
 80024c0:	109e0204 	addi	r2,r2,30728
 80024c4:	200b883a 	mov	r5,r4
 80024c8:	11000017 	ldw	r4,0(r2)
 80024cc:	80023cc1 	jmpi	80023cc <_fclose_r>

080024d0 <__sflush_r>:
 80024d0:	2880030b 	ldhu	r2,12(r5)
 80024d4:	defffb04 	addi	sp,sp,-20
 80024d8:	dcc00315 	stw	r19,12(sp)
 80024dc:	dc400115 	stw	r17,4(sp)
 80024e0:	dfc00415 	stw	ra,16(sp)
 80024e4:	dc800215 	stw	r18,8(sp)
 80024e8:	dc000015 	stw	r16,0(sp)
 80024ec:	10c0020c 	andi	r3,r2,8
 80024f0:	2823883a 	mov	r17,r5
 80024f4:	2027883a 	mov	r19,r4
 80024f8:	1800311e 	bne	r3,zero,80025c0 <__sflush_r+0xf0>
 80024fc:	28c00117 	ldw	r3,4(r5)
 8002500:	10820014 	ori	r2,r2,2048
 8002504:	2880030d 	sth	r2,12(r5)
 8002508:	00c04b0e 	bge	zero,r3,8002638 <__sflush_r+0x168>
 800250c:	8a000a17 	ldw	r8,40(r17)
 8002510:	40002326 	beq	r8,zero,80025a0 <__sflush_r+0xd0>
 8002514:	9c000017 	ldw	r16,0(r19)
 8002518:	10c4000c 	andi	r3,r2,4096
 800251c:	98000015 	stw	zero,0(r19)
 8002520:	18004826 	beq	r3,zero,8002644 <__sflush_r+0x174>
 8002524:	89801417 	ldw	r6,80(r17)
 8002528:	10c0010c 	andi	r3,r2,4
 800252c:	18000626 	beq	r3,zero,8002548 <__sflush_r+0x78>
 8002530:	88c00117 	ldw	r3,4(r17)
 8002534:	88800c17 	ldw	r2,48(r17)
 8002538:	30cdc83a 	sub	r6,r6,r3
 800253c:	10000226 	beq	r2,zero,8002548 <__sflush_r+0x78>
 8002540:	88800f17 	ldw	r2,60(r17)
 8002544:	308dc83a 	sub	r6,r6,r2
 8002548:	89400717 	ldw	r5,28(r17)
 800254c:	000f883a 	mov	r7,zero
 8002550:	9809883a 	mov	r4,r19
 8002554:	403ee83a 	callr	r8
 8002558:	00ffffc4 	movi	r3,-1
 800255c:	10c04426 	beq	r2,r3,8002670 <__sflush_r+0x1a0>
 8002560:	88c0030b 	ldhu	r3,12(r17)
 8002564:	89000417 	ldw	r4,16(r17)
 8002568:	88000115 	stw	zero,4(r17)
 800256c:	197dffcc 	andi	r5,r3,63487
 8002570:	8940030d 	sth	r5,12(r17)
 8002574:	89000015 	stw	r4,0(r17)
 8002578:	18c4000c 	andi	r3,r3,4096
 800257c:	18002c1e 	bne	r3,zero,8002630 <__sflush_r+0x160>
 8002580:	89400c17 	ldw	r5,48(r17)
 8002584:	9c000015 	stw	r16,0(r19)
 8002588:	28000526 	beq	r5,zero,80025a0 <__sflush_r+0xd0>
 800258c:	88801004 	addi	r2,r17,64
 8002590:	28800226 	beq	r5,r2,800259c <__sflush_r+0xcc>
 8002594:	9809883a 	mov	r4,r19
 8002598:	800289c0 	call	800289c <_free_r>
 800259c:	88000c15 	stw	zero,48(r17)
 80025a0:	0005883a 	mov	r2,zero
 80025a4:	dfc00417 	ldw	ra,16(sp)
 80025a8:	dcc00317 	ldw	r19,12(sp)
 80025ac:	dc800217 	ldw	r18,8(sp)
 80025b0:	dc400117 	ldw	r17,4(sp)
 80025b4:	dc000017 	ldw	r16,0(sp)
 80025b8:	dec00504 	addi	sp,sp,20
 80025bc:	f800283a 	ret
 80025c0:	2c800417 	ldw	r18,16(r5)
 80025c4:	903ff626 	beq	r18,zero,80025a0 <__alt_data_end+0xf80025a0>
 80025c8:	2c000017 	ldw	r16,0(r5)
 80025cc:	108000cc 	andi	r2,r2,3
 80025d0:	2c800015 	stw	r18,0(r5)
 80025d4:	84a1c83a 	sub	r16,r16,r18
 80025d8:	1000131e 	bne	r2,zero,8002628 <__sflush_r+0x158>
 80025dc:	28800517 	ldw	r2,20(r5)
 80025e0:	88800215 	stw	r2,8(r17)
 80025e4:	04000316 	blt	zero,r16,80025f4 <__sflush_r+0x124>
 80025e8:	003fed06 	br	80025a0 <__alt_data_end+0xf80025a0>
 80025ec:	90a5883a 	add	r18,r18,r2
 80025f0:	043feb0e 	bge	zero,r16,80025a0 <__alt_data_end+0xf80025a0>
 80025f4:	88800917 	ldw	r2,36(r17)
 80025f8:	89400717 	ldw	r5,28(r17)
 80025fc:	800f883a 	mov	r7,r16
 8002600:	900d883a 	mov	r6,r18
 8002604:	9809883a 	mov	r4,r19
 8002608:	103ee83a 	callr	r2
 800260c:	80a1c83a 	sub	r16,r16,r2
 8002610:	00bff616 	blt	zero,r2,80025ec <__alt_data_end+0xf80025ec>
 8002614:	88c0030b 	ldhu	r3,12(r17)
 8002618:	00bfffc4 	movi	r2,-1
 800261c:	18c01014 	ori	r3,r3,64
 8002620:	88c0030d 	sth	r3,12(r17)
 8002624:	003fdf06 	br	80025a4 <__alt_data_end+0xf80025a4>
 8002628:	0005883a 	mov	r2,zero
 800262c:	003fec06 	br	80025e0 <__alt_data_end+0xf80025e0>
 8002630:	88801415 	stw	r2,80(r17)
 8002634:	003fd206 	br	8002580 <__alt_data_end+0xf8002580>
 8002638:	28c00f17 	ldw	r3,60(r5)
 800263c:	00ffb316 	blt	zero,r3,800250c <__alt_data_end+0xf800250c>
 8002640:	003fd706 	br	80025a0 <__alt_data_end+0xf80025a0>
 8002644:	89400717 	ldw	r5,28(r17)
 8002648:	000d883a 	mov	r6,zero
 800264c:	01c00044 	movi	r7,1
 8002650:	9809883a 	mov	r4,r19
 8002654:	403ee83a 	callr	r8
 8002658:	100d883a 	mov	r6,r2
 800265c:	00bfffc4 	movi	r2,-1
 8002660:	30801426 	beq	r6,r2,80026b4 <__sflush_r+0x1e4>
 8002664:	8880030b 	ldhu	r2,12(r17)
 8002668:	8a000a17 	ldw	r8,40(r17)
 800266c:	003fae06 	br	8002528 <__alt_data_end+0xf8002528>
 8002670:	98c00017 	ldw	r3,0(r19)
 8002674:	183fba26 	beq	r3,zero,8002560 <__alt_data_end+0xf8002560>
 8002678:	01000744 	movi	r4,29
 800267c:	19000626 	beq	r3,r4,8002698 <__sflush_r+0x1c8>
 8002680:	01000584 	movi	r4,22
 8002684:	19000426 	beq	r3,r4,8002698 <__sflush_r+0x1c8>
 8002688:	88c0030b 	ldhu	r3,12(r17)
 800268c:	18c01014 	ori	r3,r3,64
 8002690:	88c0030d 	sth	r3,12(r17)
 8002694:	003fc306 	br	80025a4 <__alt_data_end+0xf80025a4>
 8002698:	8880030b 	ldhu	r2,12(r17)
 800269c:	88c00417 	ldw	r3,16(r17)
 80026a0:	88000115 	stw	zero,4(r17)
 80026a4:	10bdffcc 	andi	r2,r2,63487
 80026a8:	8880030d 	sth	r2,12(r17)
 80026ac:	88c00015 	stw	r3,0(r17)
 80026b0:	003fb306 	br	8002580 <__alt_data_end+0xf8002580>
 80026b4:	98800017 	ldw	r2,0(r19)
 80026b8:	103fea26 	beq	r2,zero,8002664 <__alt_data_end+0xf8002664>
 80026bc:	00c00744 	movi	r3,29
 80026c0:	10c00226 	beq	r2,r3,80026cc <__sflush_r+0x1fc>
 80026c4:	00c00584 	movi	r3,22
 80026c8:	10c0031e 	bne	r2,r3,80026d8 <__sflush_r+0x208>
 80026cc:	9c000015 	stw	r16,0(r19)
 80026d0:	0005883a 	mov	r2,zero
 80026d4:	003fb306 	br	80025a4 <__alt_data_end+0xf80025a4>
 80026d8:	88c0030b 	ldhu	r3,12(r17)
 80026dc:	3005883a 	mov	r2,r6
 80026e0:	18c01014 	ori	r3,r3,64
 80026e4:	88c0030d 	sth	r3,12(r17)
 80026e8:	003fae06 	br	80025a4 <__alt_data_end+0xf80025a4>

080026ec <_fflush_r>:
 80026ec:	defffd04 	addi	sp,sp,-12
 80026f0:	dc000115 	stw	r16,4(sp)
 80026f4:	dfc00215 	stw	ra,8(sp)
 80026f8:	2021883a 	mov	r16,r4
 80026fc:	20000226 	beq	r4,zero,8002708 <_fflush_r+0x1c>
 8002700:	20800e17 	ldw	r2,56(r4)
 8002704:	10000c26 	beq	r2,zero,8002738 <_fflush_r+0x4c>
 8002708:	2880030f 	ldh	r2,12(r5)
 800270c:	1000051e 	bne	r2,zero,8002724 <_fflush_r+0x38>
 8002710:	0005883a 	mov	r2,zero
 8002714:	dfc00217 	ldw	ra,8(sp)
 8002718:	dc000117 	ldw	r16,4(sp)
 800271c:	dec00304 	addi	sp,sp,12
 8002720:	f800283a 	ret
 8002724:	8009883a 	mov	r4,r16
 8002728:	dfc00217 	ldw	ra,8(sp)
 800272c:	dc000117 	ldw	r16,4(sp)
 8002730:	dec00304 	addi	sp,sp,12
 8002734:	80024d01 	jmpi	80024d0 <__sflush_r>
 8002738:	d9400015 	stw	r5,0(sp)
 800273c:	80007800 	call	8000780 <__sinit>
 8002740:	d9400017 	ldw	r5,0(sp)
 8002744:	003ff006 	br	8002708 <__alt_data_end+0xf8002708>

08002748 <fflush>:
 8002748:	20000526 	beq	r4,zero,8002760 <fflush+0x18>
 800274c:	00820034 	movhi	r2,2048
 8002750:	109e0204 	addi	r2,r2,30728
 8002754:	200b883a 	mov	r5,r4
 8002758:	11000017 	ldw	r4,0(r2)
 800275c:	80026ec1 	jmpi	80026ec <_fflush_r>
 8002760:	00820034 	movhi	r2,2048
 8002764:	109e0104 	addi	r2,r2,30724
 8002768:	11000017 	ldw	r4,0(r2)
 800276c:	01420034 	movhi	r5,2048
 8002770:	2949bb04 	addi	r5,r5,9964
 8002774:	8000d501 	jmpi	8000d50 <_fwalk_reent>

08002778 <_malloc_trim_r>:
 8002778:	defffb04 	addi	sp,sp,-20
 800277c:	dcc00315 	stw	r19,12(sp)
 8002780:	04c20034 	movhi	r19,2048
 8002784:	dc800215 	stw	r18,8(sp)
 8002788:	dc400115 	stw	r17,4(sp)
 800278c:	dc000015 	stw	r16,0(sp)
 8002790:	dfc00415 	stw	ra,16(sp)
 8002794:	2821883a 	mov	r16,r5
 8002798:	9cd87204 	addi	r19,r19,25032
 800279c:	2025883a 	mov	r18,r4
 80027a0:	80036080 	call	8003608 <__malloc_lock>
 80027a4:	98800217 	ldw	r2,8(r19)
 80027a8:	14400117 	ldw	r17,4(r2)
 80027ac:	00bfff04 	movi	r2,-4
 80027b0:	88a2703a 	and	r17,r17,r2
 80027b4:	8c21c83a 	sub	r16,r17,r16
 80027b8:	8403fbc4 	addi	r16,r16,4079
 80027bc:	8020d33a 	srli	r16,r16,12
 80027c0:	0083ffc4 	movi	r2,4095
 80027c4:	843fffc4 	addi	r16,r16,-1
 80027c8:	8020933a 	slli	r16,r16,12
 80027cc:	1400060e 	bge	r2,r16,80027e8 <_malloc_trim_r+0x70>
 80027d0:	000b883a 	mov	r5,zero
 80027d4:	9009883a 	mov	r4,r18
 80027d8:	80020340 	call	8002034 <_sbrk_r>
 80027dc:	98c00217 	ldw	r3,8(r19)
 80027e0:	1c47883a 	add	r3,r3,r17
 80027e4:	10c00a26 	beq	r2,r3,8002810 <_malloc_trim_r+0x98>
 80027e8:	9009883a 	mov	r4,r18
 80027ec:	800362c0 	call	800362c <__malloc_unlock>
 80027f0:	0005883a 	mov	r2,zero
 80027f4:	dfc00417 	ldw	ra,16(sp)
 80027f8:	dcc00317 	ldw	r19,12(sp)
 80027fc:	dc800217 	ldw	r18,8(sp)
 8002800:	dc400117 	ldw	r17,4(sp)
 8002804:	dc000017 	ldw	r16,0(sp)
 8002808:	dec00504 	addi	sp,sp,20
 800280c:	f800283a 	ret
 8002810:	040bc83a 	sub	r5,zero,r16
 8002814:	9009883a 	mov	r4,r18
 8002818:	80020340 	call	8002034 <_sbrk_r>
 800281c:	00ffffc4 	movi	r3,-1
 8002820:	10c00d26 	beq	r2,r3,8002858 <_malloc_trim_r+0xe0>
 8002824:	00c20074 	movhi	r3,2049
 8002828:	18e4c004 	addi	r3,r3,-27904
 800282c:	18800017 	ldw	r2,0(r3)
 8002830:	99000217 	ldw	r4,8(r19)
 8002834:	8c23c83a 	sub	r17,r17,r16
 8002838:	8c400054 	ori	r17,r17,1
 800283c:	1421c83a 	sub	r16,r2,r16
 8002840:	24400115 	stw	r17,4(r4)
 8002844:	9009883a 	mov	r4,r18
 8002848:	1c000015 	stw	r16,0(r3)
 800284c:	800362c0 	call	800362c <__malloc_unlock>
 8002850:	00800044 	movi	r2,1
 8002854:	003fe706 	br	80027f4 <__alt_data_end+0xf80027f4>
 8002858:	000b883a 	mov	r5,zero
 800285c:	9009883a 	mov	r4,r18
 8002860:	80020340 	call	8002034 <_sbrk_r>
 8002864:	99000217 	ldw	r4,8(r19)
 8002868:	014003c4 	movi	r5,15
 800286c:	1107c83a 	sub	r3,r2,r4
 8002870:	28ffdd0e 	bge	r5,r3,80027e8 <__alt_data_end+0xf80027e8>
 8002874:	01420034 	movhi	r5,2048
 8002878:	295e0304 	addi	r5,r5,30732
 800287c:	29400017 	ldw	r5,0(r5)
 8002880:	18c00054 	ori	r3,r3,1
 8002884:	20c00115 	stw	r3,4(r4)
 8002888:	00c20074 	movhi	r3,2049
 800288c:	1145c83a 	sub	r2,r2,r5
 8002890:	18e4c004 	addi	r3,r3,-27904
 8002894:	18800015 	stw	r2,0(r3)
 8002898:	003fd306 	br	80027e8 <__alt_data_end+0xf80027e8>

0800289c <_free_r>:
 800289c:	28004126 	beq	r5,zero,80029a4 <_free_r+0x108>
 80028a0:	defffd04 	addi	sp,sp,-12
 80028a4:	dc400115 	stw	r17,4(sp)
 80028a8:	dc000015 	stw	r16,0(sp)
 80028ac:	2023883a 	mov	r17,r4
 80028b0:	2821883a 	mov	r16,r5
 80028b4:	dfc00215 	stw	ra,8(sp)
 80028b8:	80036080 	call	8003608 <__malloc_lock>
 80028bc:	81ffff17 	ldw	r7,-4(r16)
 80028c0:	00bfff84 	movi	r2,-2
 80028c4:	01020034 	movhi	r4,2048
 80028c8:	81bffe04 	addi	r6,r16,-8
 80028cc:	3884703a 	and	r2,r7,r2
 80028d0:	21187204 	addi	r4,r4,25032
 80028d4:	308b883a 	add	r5,r6,r2
 80028d8:	2a400117 	ldw	r9,4(r5)
 80028dc:	22000217 	ldw	r8,8(r4)
 80028e0:	00ffff04 	movi	r3,-4
 80028e4:	48c6703a 	and	r3,r9,r3
 80028e8:	2a005726 	beq	r5,r8,8002a48 <_free_r+0x1ac>
 80028ec:	28c00115 	stw	r3,4(r5)
 80028f0:	39c0004c 	andi	r7,r7,1
 80028f4:	3800091e 	bne	r7,zero,800291c <_free_r+0x80>
 80028f8:	823ffe17 	ldw	r8,-8(r16)
 80028fc:	22400204 	addi	r9,r4,8
 8002900:	320dc83a 	sub	r6,r6,r8
 8002904:	31c00217 	ldw	r7,8(r6)
 8002908:	1205883a 	add	r2,r2,r8
 800290c:	3a406526 	beq	r7,r9,8002aa4 <_free_r+0x208>
 8002910:	32000317 	ldw	r8,12(r6)
 8002914:	3a000315 	stw	r8,12(r7)
 8002918:	41c00215 	stw	r7,8(r8)
 800291c:	28cf883a 	add	r7,r5,r3
 8002920:	39c00117 	ldw	r7,4(r7)
 8002924:	39c0004c 	andi	r7,r7,1
 8002928:	38003a26 	beq	r7,zero,8002a14 <_free_r+0x178>
 800292c:	10c00054 	ori	r3,r2,1
 8002930:	30c00115 	stw	r3,4(r6)
 8002934:	3087883a 	add	r3,r6,r2
 8002938:	18800015 	stw	r2,0(r3)
 800293c:	00c07fc4 	movi	r3,511
 8002940:	18801936 	bltu	r3,r2,80029a8 <_free_r+0x10c>
 8002944:	1004d0fa 	srli	r2,r2,3
 8002948:	01c00044 	movi	r7,1
 800294c:	21400117 	ldw	r5,4(r4)
 8002950:	10c00044 	addi	r3,r2,1
 8002954:	18c7883a 	add	r3,r3,r3
 8002958:	1005d0ba 	srai	r2,r2,2
 800295c:	18c7883a 	add	r3,r3,r3
 8002960:	18c7883a 	add	r3,r3,r3
 8002964:	1907883a 	add	r3,r3,r4
 8002968:	3884983a 	sll	r2,r7,r2
 800296c:	19c00017 	ldw	r7,0(r3)
 8002970:	1a3ffe04 	addi	r8,r3,-8
 8002974:	1144b03a 	or	r2,r2,r5
 8002978:	32000315 	stw	r8,12(r6)
 800297c:	31c00215 	stw	r7,8(r6)
 8002980:	20800115 	stw	r2,4(r4)
 8002984:	19800015 	stw	r6,0(r3)
 8002988:	39800315 	stw	r6,12(r7)
 800298c:	8809883a 	mov	r4,r17
 8002990:	dfc00217 	ldw	ra,8(sp)
 8002994:	dc400117 	ldw	r17,4(sp)
 8002998:	dc000017 	ldw	r16,0(sp)
 800299c:	dec00304 	addi	sp,sp,12
 80029a0:	800362c1 	jmpi	800362c <__malloc_unlock>
 80029a4:	f800283a 	ret
 80029a8:	100ad27a 	srli	r5,r2,9
 80029ac:	00c00104 	movi	r3,4
 80029b0:	19404a36 	bltu	r3,r5,8002adc <_free_r+0x240>
 80029b4:	100ad1ba 	srli	r5,r2,6
 80029b8:	28c00e44 	addi	r3,r5,57
 80029bc:	18c7883a 	add	r3,r3,r3
 80029c0:	29400e04 	addi	r5,r5,56
 80029c4:	18c7883a 	add	r3,r3,r3
 80029c8:	18c7883a 	add	r3,r3,r3
 80029cc:	1909883a 	add	r4,r3,r4
 80029d0:	20c00017 	ldw	r3,0(r4)
 80029d4:	01c20034 	movhi	r7,2048
 80029d8:	213ffe04 	addi	r4,r4,-8
 80029dc:	39d87204 	addi	r7,r7,25032
 80029e0:	20c04426 	beq	r4,r3,8002af4 <_free_r+0x258>
 80029e4:	01ffff04 	movi	r7,-4
 80029e8:	19400117 	ldw	r5,4(r3)
 80029ec:	29ca703a 	and	r5,r5,r7
 80029f0:	1140022e 	bgeu	r2,r5,80029fc <_free_r+0x160>
 80029f4:	18c00217 	ldw	r3,8(r3)
 80029f8:	20fffb1e 	bne	r4,r3,80029e8 <__alt_data_end+0xf80029e8>
 80029fc:	19000317 	ldw	r4,12(r3)
 8002a00:	31000315 	stw	r4,12(r6)
 8002a04:	30c00215 	stw	r3,8(r6)
 8002a08:	21800215 	stw	r6,8(r4)
 8002a0c:	19800315 	stw	r6,12(r3)
 8002a10:	003fde06 	br	800298c <__alt_data_end+0xf800298c>
 8002a14:	29c00217 	ldw	r7,8(r5)
 8002a18:	10c5883a 	add	r2,r2,r3
 8002a1c:	00c20034 	movhi	r3,2048
 8002a20:	18d87404 	addi	r3,r3,25040
 8002a24:	38c03b26 	beq	r7,r3,8002b14 <_free_r+0x278>
 8002a28:	2a000317 	ldw	r8,12(r5)
 8002a2c:	11400054 	ori	r5,r2,1
 8002a30:	3087883a 	add	r3,r6,r2
 8002a34:	3a000315 	stw	r8,12(r7)
 8002a38:	41c00215 	stw	r7,8(r8)
 8002a3c:	31400115 	stw	r5,4(r6)
 8002a40:	18800015 	stw	r2,0(r3)
 8002a44:	003fbd06 	br	800293c <__alt_data_end+0xf800293c>
 8002a48:	39c0004c 	andi	r7,r7,1
 8002a4c:	10c5883a 	add	r2,r2,r3
 8002a50:	3800071e 	bne	r7,zero,8002a70 <_free_r+0x1d4>
 8002a54:	81fffe17 	ldw	r7,-8(r16)
 8002a58:	31cdc83a 	sub	r6,r6,r7
 8002a5c:	30c00317 	ldw	r3,12(r6)
 8002a60:	31400217 	ldw	r5,8(r6)
 8002a64:	11c5883a 	add	r2,r2,r7
 8002a68:	28c00315 	stw	r3,12(r5)
 8002a6c:	19400215 	stw	r5,8(r3)
 8002a70:	10c00054 	ori	r3,r2,1
 8002a74:	30c00115 	stw	r3,4(r6)
 8002a78:	00c20034 	movhi	r3,2048
 8002a7c:	18de0404 	addi	r3,r3,30736
 8002a80:	18c00017 	ldw	r3,0(r3)
 8002a84:	21800215 	stw	r6,8(r4)
 8002a88:	10ffc036 	bltu	r2,r3,800298c <__alt_data_end+0xf800298c>
 8002a8c:	00820074 	movhi	r2,2049
 8002a90:	10a4b704 	addi	r2,r2,-27940
 8002a94:	11400017 	ldw	r5,0(r2)
 8002a98:	8809883a 	mov	r4,r17
 8002a9c:	80027780 	call	8002778 <_malloc_trim_r>
 8002aa0:	003fba06 	br	800298c <__alt_data_end+0xf800298c>
 8002aa4:	28c9883a 	add	r4,r5,r3
 8002aa8:	21000117 	ldw	r4,4(r4)
 8002aac:	2100004c 	andi	r4,r4,1
 8002ab0:	2000391e 	bne	r4,zero,8002b98 <_free_r+0x2fc>
 8002ab4:	29c00217 	ldw	r7,8(r5)
 8002ab8:	29000317 	ldw	r4,12(r5)
 8002abc:	1885883a 	add	r2,r3,r2
 8002ac0:	10c00054 	ori	r3,r2,1
 8002ac4:	39000315 	stw	r4,12(r7)
 8002ac8:	21c00215 	stw	r7,8(r4)
 8002acc:	30c00115 	stw	r3,4(r6)
 8002ad0:	308d883a 	add	r6,r6,r2
 8002ad4:	30800015 	stw	r2,0(r6)
 8002ad8:	003fac06 	br	800298c <__alt_data_end+0xf800298c>
 8002adc:	00c00504 	movi	r3,20
 8002ae0:	19401536 	bltu	r3,r5,8002b38 <_free_r+0x29c>
 8002ae4:	28c01704 	addi	r3,r5,92
 8002ae8:	18c7883a 	add	r3,r3,r3
 8002aec:	294016c4 	addi	r5,r5,91
 8002af0:	003fb406 	br	80029c4 <__alt_data_end+0xf80029c4>
 8002af4:	280bd0ba 	srai	r5,r5,2
 8002af8:	00c00044 	movi	r3,1
 8002afc:	38800117 	ldw	r2,4(r7)
 8002b00:	194a983a 	sll	r5,r3,r5
 8002b04:	2007883a 	mov	r3,r4
 8002b08:	2884b03a 	or	r2,r5,r2
 8002b0c:	38800115 	stw	r2,4(r7)
 8002b10:	003fbb06 	br	8002a00 <__alt_data_end+0xf8002a00>
 8002b14:	21800515 	stw	r6,20(r4)
 8002b18:	21800415 	stw	r6,16(r4)
 8002b1c:	10c00054 	ori	r3,r2,1
 8002b20:	31c00315 	stw	r7,12(r6)
 8002b24:	31c00215 	stw	r7,8(r6)
 8002b28:	30c00115 	stw	r3,4(r6)
 8002b2c:	308d883a 	add	r6,r6,r2
 8002b30:	30800015 	stw	r2,0(r6)
 8002b34:	003f9506 	br	800298c <__alt_data_end+0xf800298c>
 8002b38:	00c01504 	movi	r3,84
 8002b3c:	19400536 	bltu	r3,r5,8002b54 <_free_r+0x2b8>
 8002b40:	100ad33a 	srli	r5,r2,12
 8002b44:	28c01bc4 	addi	r3,r5,111
 8002b48:	18c7883a 	add	r3,r3,r3
 8002b4c:	29401b84 	addi	r5,r5,110
 8002b50:	003f9c06 	br	80029c4 <__alt_data_end+0xf80029c4>
 8002b54:	00c05504 	movi	r3,340
 8002b58:	19400536 	bltu	r3,r5,8002b70 <_free_r+0x2d4>
 8002b5c:	100ad3fa 	srli	r5,r2,15
 8002b60:	28c01e04 	addi	r3,r5,120
 8002b64:	18c7883a 	add	r3,r3,r3
 8002b68:	29401dc4 	addi	r5,r5,119
 8002b6c:	003f9506 	br	80029c4 <__alt_data_end+0xf80029c4>
 8002b70:	00c15504 	movi	r3,1364
 8002b74:	19400536 	bltu	r3,r5,8002b8c <_free_r+0x2f0>
 8002b78:	100ad4ba 	srli	r5,r2,18
 8002b7c:	28c01f44 	addi	r3,r5,125
 8002b80:	18c7883a 	add	r3,r3,r3
 8002b84:	29401f04 	addi	r5,r5,124
 8002b88:	003f8e06 	br	80029c4 <__alt_data_end+0xf80029c4>
 8002b8c:	00c03f84 	movi	r3,254
 8002b90:	01401f84 	movi	r5,126
 8002b94:	003f8b06 	br	80029c4 <__alt_data_end+0xf80029c4>
 8002b98:	10c00054 	ori	r3,r2,1
 8002b9c:	30c00115 	stw	r3,4(r6)
 8002ba0:	308d883a 	add	r6,r6,r2
 8002ba4:	30800015 	stw	r2,0(r6)
 8002ba8:	003f7806 	br	800298c <__alt_data_end+0xf800298c>

08002bac <_lseek_r>:
 8002bac:	defffd04 	addi	sp,sp,-12
 8002bb0:	2805883a 	mov	r2,r5
 8002bb4:	dc000015 	stw	r16,0(sp)
 8002bb8:	04020074 	movhi	r16,2049
 8002bbc:	dc400115 	stw	r17,4(sp)
 8002bc0:	300b883a 	mov	r5,r6
 8002bc4:	8424b804 	addi	r16,r16,-27936
 8002bc8:	2023883a 	mov	r17,r4
 8002bcc:	380d883a 	mov	r6,r7
 8002bd0:	1009883a 	mov	r4,r2
 8002bd4:	dfc00215 	stw	ra,8(sp)
 8002bd8:	80000015 	stw	zero,0(r16)
 8002bdc:	80034b80 	call	80034b8 <lseek>
 8002be0:	00ffffc4 	movi	r3,-1
 8002be4:	10c00526 	beq	r2,r3,8002bfc <_lseek_r+0x50>
 8002be8:	dfc00217 	ldw	ra,8(sp)
 8002bec:	dc400117 	ldw	r17,4(sp)
 8002bf0:	dc000017 	ldw	r16,0(sp)
 8002bf4:	dec00304 	addi	sp,sp,12
 8002bf8:	f800283a 	ret
 8002bfc:	80c00017 	ldw	r3,0(r16)
 8002c00:	183ff926 	beq	r3,zero,8002be8 <__alt_data_end+0xf8002be8>
 8002c04:	88c00015 	stw	r3,0(r17)
 8002c08:	003ff706 	br	8002be8 <__alt_data_end+0xf8002be8>

08002c0c <__smakebuf_r>:
 8002c0c:	2880030b 	ldhu	r2,12(r5)
 8002c10:	10c0008c 	andi	r3,r2,2
 8002c14:	1800411e 	bne	r3,zero,8002d1c <__smakebuf_r+0x110>
 8002c18:	deffec04 	addi	sp,sp,-80
 8002c1c:	dc000f15 	stw	r16,60(sp)
 8002c20:	2821883a 	mov	r16,r5
 8002c24:	2940038f 	ldh	r5,14(r5)
 8002c28:	dc401015 	stw	r17,64(sp)
 8002c2c:	dfc01315 	stw	ra,76(sp)
 8002c30:	dcc01215 	stw	r19,72(sp)
 8002c34:	dc801115 	stw	r18,68(sp)
 8002c38:	2023883a 	mov	r17,r4
 8002c3c:	28001c16 	blt	r5,zero,8002cb0 <__smakebuf_r+0xa4>
 8002c40:	d80d883a 	mov	r6,sp
 8002c44:	8002e280 	call	8002e28 <_fstat_r>
 8002c48:	10001816 	blt	r2,zero,8002cac <__smakebuf_r+0xa0>
 8002c4c:	d8800117 	ldw	r2,4(sp)
 8002c50:	00e00014 	movui	r3,32768
 8002c54:	10bc000c 	andi	r2,r2,61440
 8002c58:	14c80020 	cmpeqi	r19,r2,8192
 8002c5c:	10c03726 	beq	r2,r3,8002d3c <__smakebuf_r+0x130>
 8002c60:	80c0030b 	ldhu	r3,12(r16)
 8002c64:	18c20014 	ori	r3,r3,2048
 8002c68:	80c0030d 	sth	r3,12(r16)
 8002c6c:	00c80004 	movi	r3,8192
 8002c70:	10c0521e 	bne	r2,r3,8002dbc <__smakebuf_r+0x1b0>
 8002c74:	8140038f 	ldh	r5,14(r16)
 8002c78:	8809883a 	mov	r4,r17
 8002c7c:	8002e840 	call	8002e84 <_isatty_r>
 8002c80:	10004c26 	beq	r2,zero,8002db4 <__smakebuf_r+0x1a8>
 8002c84:	8080030b 	ldhu	r2,12(r16)
 8002c88:	80c010c4 	addi	r3,r16,67
 8002c8c:	80c00015 	stw	r3,0(r16)
 8002c90:	10800054 	ori	r2,r2,1
 8002c94:	8080030d 	sth	r2,12(r16)
 8002c98:	00800044 	movi	r2,1
 8002c9c:	80c00415 	stw	r3,16(r16)
 8002ca0:	80800515 	stw	r2,20(r16)
 8002ca4:	04810004 	movi	r18,1024
 8002ca8:	00000706 	br	8002cc8 <__smakebuf_r+0xbc>
 8002cac:	8080030b 	ldhu	r2,12(r16)
 8002cb0:	10c0200c 	andi	r3,r2,128
 8002cb4:	18001f1e 	bne	r3,zero,8002d34 <__smakebuf_r+0x128>
 8002cb8:	04810004 	movi	r18,1024
 8002cbc:	10820014 	ori	r2,r2,2048
 8002cc0:	8080030d 	sth	r2,12(r16)
 8002cc4:	0027883a 	mov	r19,zero
 8002cc8:	900b883a 	mov	r5,r18
 8002ccc:	8809883a 	mov	r4,r17
 8002cd0:	8000e140 	call	8000e14 <_malloc_r>
 8002cd4:	10002c26 	beq	r2,zero,8002d88 <__smakebuf_r+0x17c>
 8002cd8:	80c0030b 	ldhu	r3,12(r16)
 8002cdc:	01020034 	movhi	r4,2048
 8002ce0:	21010e04 	addi	r4,r4,1080
 8002ce4:	89000f15 	stw	r4,60(r17)
 8002ce8:	18c02014 	ori	r3,r3,128
 8002cec:	80c0030d 	sth	r3,12(r16)
 8002cf0:	80800015 	stw	r2,0(r16)
 8002cf4:	80800415 	stw	r2,16(r16)
 8002cf8:	84800515 	stw	r18,20(r16)
 8002cfc:	98001a1e 	bne	r19,zero,8002d68 <__smakebuf_r+0x15c>
 8002d00:	dfc01317 	ldw	ra,76(sp)
 8002d04:	dcc01217 	ldw	r19,72(sp)
 8002d08:	dc801117 	ldw	r18,68(sp)
 8002d0c:	dc401017 	ldw	r17,64(sp)
 8002d10:	dc000f17 	ldw	r16,60(sp)
 8002d14:	dec01404 	addi	sp,sp,80
 8002d18:	f800283a 	ret
 8002d1c:	288010c4 	addi	r2,r5,67
 8002d20:	28800015 	stw	r2,0(r5)
 8002d24:	28800415 	stw	r2,16(r5)
 8002d28:	00800044 	movi	r2,1
 8002d2c:	28800515 	stw	r2,20(r5)
 8002d30:	f800283a 	ret
 8002d34:	04801004 	movi	r18,64
 8002d38:	003fe006 	br	8002cbc <__alt_data_end+0xf8002cbc>
 8002d3c:	81000a17 	ldw	r4,40(r16)
 8002d40:	00c20034 	movhi	r3,2048
 8002d44:	18c85804 	addi	r3,r3,8544
 8002d48:	20ffc51e 	bne	r4,r3,8002c60 <__alt_data_end+0xf8002c60>
 8002d4c:	8080030b 	ldhu	r2,12(r16)
 8002d50:	04810004 	movi	r18,1024
 8002d54:	84801315 	stw	r18,76(r16)
 8002d58:	1484b03a 	or	r2,r2,r18
 8002d5c:	8080030d 	sth	r2,12(r16)
 8002d60:	0027883a 	mov	r19,zero
 8002d64:	003fd806 	br	8002cc8 <__alt_data_end+0xf8002cc8>
 8002d68:	8140038f 	ldh	r5,14(r16)
 8002d6c:	8809883a 	mov	r4,r17
 8002d70:	8002e840 	call	8002e84 <_isatty_r>
 8002d74:	103fe226 	beq	r2,zero,8002d00 <__alt_data_end+0xf8002d00>
 8002d78:	8080030b 	ldhu	r2,12(r16)
 8002d7c:	10800054 	ori	r2,r2,1
 8002d80:	8080030d 	sth	r2,12(r16)
 8002d84:	003fde06 	br	8002d00 <__alt_data_end+0xf8002d00>
 8002d88:	8080030b 	ldhu	r2,12(r16)
 8002d8c:	10c0800c 	andi	r3,r2,512
 8002d90:	183fdb1e 	bne	r3,zero,8002d00 <__alt_data_end+0xf8002d00>
 8002d94:	10800094 	ori	r2,r2,2
 8002d98:	80c010c4 	addi	r3,r16,67
 8002d9c:	8080030d 	sth	r2,12(r16)
 8002da0:	00800044 	movi	r2,1
 8002da4:	80c00015 	stw	r3,0(r16)
 8002da8:	80c00415 	stw	r3,16(r16)
 8002dac:	80800515 	stw	r2,20(r16)
 8002db0:	003fd306 	br	8002d00 <__alt_data_end+0xf8002d00>
 8002db4:	04810004 	movi	r18,1024
 8002db8:	003fc306 	br	8002cc8 <__alt_data_end+0xf8002cc8>
 8002dbc:	0027883a 	mov	r19,zero
 8002dc0:	04810004 	movi	r18,1024
 8002dc4:	003fc006 	br	8002cc8 <__alt_data_end+0xf8002cc8>

08002dc8 <_read_r>:
 8002dc8:	defffd04 	addi	sp,sp,-12
 8002dcc:	2805883a 	mov	r2,r5
 8002dd0:	dc000015 	stw	r16,0(sp)
 8002dd4:	04020074 	movhi	r16,2049
 8002dd8:	dc400115 	stw	r17,4(sp)
 8002ddc:	300b883a 	mov	r5,r6
 8002de0:	8424b804 	addi	r16,r16,-27936
 8002de4:	2023883a 	mov	r17,r4
 8002de8:	380d883a 	mov	r6,r7
 8002dec:	1009883a 	mov	r4,r2
 8002df0:	dfc00215 	stw	ra,8(sp)
 8002df4:	80000015 	stw	zero,0(r16)
 8002df8:	800368c0 	call	800368c <read>
 8002dfc:	00ffffc4 	movi	r3,-1
 8002e00:	10c00526 	beq	r2,r3,8002e18 <_read_r+0x50>
 8002e04:	dfc00217 	ldw	ra,8(sp)
 8002e08:	dc400117 	ldw	r17,4(sp)
 8002e0c:	dc000017 	ldw	r16,0(sp)
 8002e10:	dec00304 	addi	sp,sp,12
 8002e14:	f800283a 	ret
 8002e18:	80c00017 	ldw	r3,0(r16)
 8002e1c:	183ff926 	beq	r3,zero,8002e04 <__alt_data_end+0xf8002e04>
 8002e20:	88c00015 	stw	r3,0(r17)
 8002e24:	003ff706 	br	8002e04 <__alt_data_end+0xf8002e04>

08002e28 <_fstat_r>:
 8002e28:	defffd04 	addi	sp,sp,-12
 8002e2c:	2805883a 	mov	r2,r5
 8002e30:	dc000015 	stw	r16,0(sp)
 8002e34:	04020074 	movhi	r16,2049
 8002e38:	dc400115 	stw	r17,4(sp)
 8002e3c:	8424b804 	addi	r16,r16,-27936
 8002e40:	2023883a 	mov	r17,r4
 8002e44:	300b883a 	mov	r5,r6
 8002e48:	1009883a 	mov	r4,r2
 8002e4c:	dfc00215 	stw	ra,8(sp)
 8002e50:	80000015 	stw	zero,0(r16)
 8002e54:	80032000 	call	8003200 <fstat>
 8002e58:	00ffffc4 	movi	r3,-1
 8002e5c:	10c00526 	beq	r2,r3,8002e74 <_fstat_r+0x4c>
 8002e60:	dfc00217 	ldw	ra,8(sp)
 8002e64:	dc400117 	ldw	r17,4(sp)
 8002e68:	dc000017 	ldw	r16,0(sp)
 8002e6c:	dec00304 	addi	sp,sp,12
 8002e70:	f800283a 	ret
 8002e74:	80c00017 	ldw	r3,0(r16)
 8002e78:	183ff926 	beq	r3,zero,8002e60 <__alt_data_end+0xf8002e60>
 8002e7c:	88c00015 	stw	r3,0(r17)
 8002e80:	003ff706 	br	8002e60 <__alt_data_end+0xf8002e60>

08002e84 <_isatty_r>:
 8002e84:	defffd04 	addi	sp,sp,-12
 8002e88:	dc000015 	stw	r16,0(sp)
 8002e8c:	04020074 	movhi	r16,2049
 8002e90:	dc400115 	stw	r17,4(sp)
 8002e94:	8424b804 	addi	r16,r16,-27936
 8002e98:	2023883a 	mov	r17,r4
 8002e9c:	2809883a 	mov	r4,r5
 8002ea0:	dfc00215 	stw	ra,8(sp)
 8002ea4:	80000015 	stw	zero,0(r16)
 8002ea8:	80032ec0 	call	80032ec <isatty>
 8002eac:	00ffffc4 	movi	r3,-1
 8002eb0:	10c00526 	beq	r2,r3,8002ec8 <_isatty_r+0x44>
 8002eb4:	dfc00217 	ldw	ra,8(sp)
 8002eb8:	dc400117 	ldw	r17,4(sp)
 8002ebc:	dc000017 	ldw	r16,0(sp)
 8002ec0:	dec00304 	addi	sp,sp,12
 8002ec4:	f800283a 	ret
 8002ec8:	80c00017 	ldw	r3,0(r16)
 8002ecc:	183ff926 	beq	r3,zero,8002eb4 <__alt_data_end+0xf8002eb4>
 8002ed0:	88c00015 	stw	r3,0(r17)
 8002ed4:	003ff706 	br	8002eb4 <__alt_data_end+0xf8002eb4>

08002ed8 <__divsi3>:
 8002ed8:	20001b16 	blt	r4,zero,8002f48 <__divsi3+0x70>
 8002edc:	000f883a 	mov	r7,zero
 8002ee0:	28001616 	blt	r5,zero,8002f3c <__divsi3+0x64>
 8002ee4:	200d883a 	mov	r6,r4
 8002ee8:	29001a2e 	bgeu	r5,r4,8002f54 <__divsi3+0x7c>
 8002eec:	00800804 	movi	r2,32
 8002ef0:	00c00044 	movi	r3,1
 8002ef4:	00000106 	br	8002efc <__divsi3+0x24>
 8002ef8:	10000d26 	beq	r2,zero,8002f30 <__divsi3+0x58>
 8002efc:	294b883a 	add	r5,r5,r5
 8002f00:	10bfffc4 	addi	r2,r2,-1
 8002f04:	18c7883a 	add	r3,r3,r3
 8002f08:	293ffb36 	bltu	r5,r4,8002ef8 <__alt_data_end+0xf8002ef8>
 8002f0c:	0005883a 	mov	r2,zero
 8002f10:	18000726 	beq	r3,zero,8002f30 <__divsi3+0x58>
 8002f14:	0005883a 	mov	r2,zero
 8002f18:	31400236 	bltu	r6,r5,8002f24 <__divsi3+0x4c>
 8002f1c:	314dc83a 	sub	r6,r6,r5
 8002f20:	10c4b03a 	or	r2,r2,r3
 8002f24:	1806d07a 	srli	r3,r3,1
 8002f28:	280ad07a 	srli	r5,r5,1
 8002f2c:	183ffa1e 	bne	r3,zero,8002f18 <__alt_data_end+0xf8002f18>
 8002f30:	38000126 	beq	r7,zero,8002f38 <__divsi3+0x60>
 8002f34:	0085c83a 	sub	r2,zero,r2
 8002f38:	f800283a 	ret
 8002f3c:	014bc83a 	sub	r5,zero,r5
 8002f40:	39c0005c 	xori	r7,r7,1
 8002f44:	003fe706 	br	8002ee4 <__alt_data_end+0xf8002ee4>
 8002f48:	0109c83a 	sub	r4,zero,r4
 8002f4c:	01c00044 	movi	r7,1
 8002f50:	003fe306 	br	8002ee0 <__alt_data_end+0xf8002ee0>
 8002f54:	00c00044 	movi	r3,1
 8002f58:	003fee06 	br	8002f14 <__alt_data_end+0xf8002f14>

08002f5c <__modsi3>:
 8002f5c:	20001716 	blt	r4,zero,8002fbc <__modsi3+0x60>
 8002f60:	000f883a 	mov	r7,zero
 8002f64:	2005883a 	mov	r2,r4
 8002f68:	28001216 	blt	r5,zero,8002fb4 <__modsi3+0x58>
 8002f6c:	2900162e 	bgeu	r5,r4,8002fc8 <__modsi3+0x6c>
 8002f70:	01800804 	movi	r6,32
 8002f74:	00c00044 	movi	r3,1
 8002f78:	00000106 	br	8002f80 <__modsi3+0x24>
 8002f7c:	30000a26 	beq	r6,zero,8002fa8 <__modsi3+0x4c>
 8002f80:	294b883a 	add	r5,r5,r5
 8002f84:	31bfffc4 	addi	r6,r6,-1
 8002f88:	18c7883a 	add	r3,r3,r3
 8002f8c:	293ffb36 	bltu	r5,r4,8002f7c <__alt_data_end+0xf8002f7c>
 8002f90:	18000526 	beq	r3,zero,8002fa8 <__modsi3+0x4c>
 8002f94:	1806d07a 	srli	r3,r3,1
 8002f98:	11400136 	bltu	r2,r5,8002fa0 <__modsi3+0x44>
 8002f9c:	1145c83a 	sub	r2,r2,r5
 8002fa0:	280ad07a 	srli	r5,r5,1
 8002fa4:	183ffb1e 	bne	r3,zero,8002f94 <__alt_data_end+0xf8002f94>
 8002fa8:	38000126 	beq	r7,zero,8002fb0 <__modsi3+0x54>
 8002fac:	0085c83a 	sub	r2,zero,r2
 8002fb0:	f800283a 	ret
 8002fb4:	014bc83a 	sub	r5,zero,r5
 8002fb8:	003fec06 	br	8002f6c <__alt_data_end+0xf8002f6c>
 8002fbc:	0109c83a 	sub	r4,zero,r4
 8002fc0:	01c00044 	movi	r7,1
 8002fc4:	003fe706 	br	8002f64 <__alt_data_end+0xf8002f64>
 8002fc8:	00c00044 	movi	r3,1
 8002fcc:	003ff106 	br	8002f94 <__alt_data_end+0xf8002f94>

08002fd0 <__udivsi3>:
 8002fd0:	200d883a 	mov	r6,r4
 8002fd4:	2900152e 	bgeu	r5,r4,800302c <__udivsi3+0x5c>
 8002fd8:	28001416 	blt	r5,zero,800302c <__udivsi3+0x5c>
 8002fdc:	00800804 	movi	r2,32
 8002fe0:	00c00044 	movi	r3,1
 8002fe4:	00000206 	br	8002ff0 <__udivsi3+0x20>
 8002fe8:	10000e26 	beq	r2,zero,8003024 <__udivsi3+0x54>
 8002fec:	28000516 	blt	r5,zero,8003004 <__udivsi3+0x34>
 8002ff0:	294b883a 	add	r5,r5,r5
 8002ff4:	10bfffc4 	addi	r2,r2,-1
 8002ff8:	18c7883a 	add	r3,r3,r3
 8002ffc:	293ffa36 	bltu	r5,r4,8002fe8 <__alt_data_end+0xf8002fe8>
 8003000:	18000826 	beq	r3,zero,8003024 <__udivsi3+0x54>
 8003004:	0005883a 	mov	r2,zero
 8003008:	31400236 	bltu	r6,r5,8003014 <__udivsi3+0x44>
 800300c:	314dc83a 	sub	r6,r6,r5
 8003010:	10c4b03a 	or	r2,r2,r3
 8003014:	1806d07a 	srli	r3,r3,1
 8003018:	280ad07a 	srli	r5,r5,1
 800301c:	183ffa1e 	bne	r3,zero,8003008 <__alt_data_end+0xf8003008>
 8003020:	f800283a 	ret
 8003024:	0005883a 	mov	r2,zero
 8003028:	f800283a 	ret
 800302c:	00c00044 	movi	r3,1
 8003030:	003ff406 	br	8003004 <__alt_data_end+0xf8003004>

08003034 <__umodsi3>:
 8003034:	2005883a 	mov	r2,r4
 8003038:	2900122e 	bgeu	r5,r4,8003084 <__umodsi3+0x50>
 800303c:	28001116 	blt	r5,zero,8003084 <__umodsi3+0x50>
 8003040:	01800804 	movi	r6,32
 8003044:	00c00044 	movi	r3,1
 8003048:	00000206 	br	8003054 <__umodsi3+0x20>
 800304c:	30000c26 	beq	r6,zero,8003080 <__umodsi3+0x4c>
 8003050:	28000516 	blt	r5,zero,8003068 <__umodsi3+0x34>
 8003054:	294b883a 	add	r5,r5,r5
 8003058:	31bfffc4 	addi	r6,r6,-1
 800305c:	18c7883a 	add	r3,r3,r3
 8003060:	293ffa36 	bltu	r5,r4,800304c <__alt_data_end+0xf800304c>
 8003064:	18000626 	beq	r3,zero,8003080 <__umodsi3+0x4c>
 8003068:	1806d07a 	srli	r3,r3,1
 800306c:	11400136 	bltu	r2,r5,8003074 <__umodsi3+0x40>
 8003070:	1145c83a 	sub	r2,r2,r5
 8003074:	280ad07a 	srli	r5,r5,1
 8003078:	183ffb1e 	bne	r3,zero,8003068 <__alt_data_end+0xf8003068>
 800307c:	f800283a 	ret
 8003080:	f800283a 	ret
 8003084:	00c00044 	movi	r3,1
 8003088:	003ff706 	br	8003068 <__alt_data_end+0xf8003068>

0800308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800308c:	defffe04 	addi	sp,sp,-8
 8003090:	dfc00115 	stw	ra,4(sp)
 8003094:	df000015 	stw	fp,0(sp)
 8003098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800309c:	d0a00917 	ldw	r2,-32732(gp)
 80030a0:	10000326 	beq	r2,zero,80030b0 <alt_get_errno+0x24>
 80030a4:	d0a00917 	ldw	r2,-32732(gp)
 80030a8:	103ee83a 	callr	r2
 80030ac:	00000106 	br	80030b4 <alt_get_errno+0x28>
 80030b0:	d0a6b704 	addi	r2,gp,-25892
}
 80030b4:	e037883a 	mov	sp,fp
 80030b8:	dfc00117 	ldw	ra,4(sp)
 80030bc:	df000017 	ldw	fp,0(sp)
 80030c0:	dec00204 	addi	sp,sp,8
 80030c4:	f800283a 	ret

080030c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80030c8:	defffb04 	addi	sp,sp,-20
 80030cc:	dfc00415 	stw	ra,16(sp)
 80030d0:	df000315 	stw	fp,12(sp)
 80030d4:	df000304 	addi	fp,sp,12
 80030d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80030dc:	e0bfff17 	ldw	r2,-4(fp)
 80030e0:	10000616 	blt	r2,zero,80030fc <close+0x34>
 80030e4:	e0bfff17 	ldw	r2,-4(fp)
 80030e8:	10c00324 	muli	r3,r2,12
 80030ec:	00820034 	movhi	r2,2048
 80030f0:	10997e04 	addi	r2,r2,26104
 80030f4:	1885883a 	add	r2,r3,r2
 80030f8:	00000106 	br	8003100 <close+0x38>
 80030fc:	0005883a 	mov	r2,zero
 8003100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8003104:	e0bffd17 	ldw	r2,-12(fp)
 8003108:	10001926 	beq	r2,zero,8003170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800310c:	e0bffd17 	ldw	r2,-12(fp)
 8003110:	10800017 	ldw	r2,0(r2)
 8003114:	10800417 	ldw	r2,16(r2)
 8003118:	10000626 	beq	r2,zero,8003134 <close+0x6c>
 800311c:	e0bffd17 	ldw	r2,-12(fp)
 8003120:	10800017 	ldw	r2,0(r2)
 8003124:	10800417 	ldw	r2,16(r2)
 8003128:	e13ffd17 	ldw	r4,-12(fp)
 800312c:	103ee83a 	callr	r2
 8003130:	00000106 	br	8003138 <close+0x70>
 8003134:	0005883a 	mov	r2,zero
 8003138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800313c:	e13fff17 	ldw	r4,-4(fp)
 8003140:	80037880 	call	8003788 <alt_release_fd>
    if (rval < 0)
 8003144:	e0bffe17 	ldw	r2,-8(fp)
 8003148:	1000070e 	bge	r2,zero,8003168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800314c:	800308c0 	call	800308c <alt_get_errno>
 8003150:	1007883a 	mov	r3,r2
 8003154:	e0bffe17 	ldw	r2,-8(fp)
 8003158:	0085c83a 	sub	r2,zero,r2
 800315c:	18800015 	stw	r2,0(r3)
      return -1;
 8003160:	00bfffc4 	movi	r2,-1
 8003164:	00000706 	br	8003184 <close+0xbc>
    }
    return 0;
 8003168:	0005883a 	mov	r2,zero
 800316c:	00000506 	br	8003184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003170:	800308c0 	call	800308c <alt_get_errno>
 8003174:	1007883a 	mov	r3,r2
 8003178:	00801444 	movi	r2,81
 800317c:	18800015 	stw	r2,0(r3)
    return -1;
 8003180:	00bfffc4 	movi	r2,-1
  }
}
 8003184:	e037883a 	mov	sp,fp
 8003188:	dfc00117 	ldw	ra,4(sp)
 800318c:	df000017 	ldw	fp,0(sp)
 8003190:	dec00204 	addi	sp,sp,8
 8003194:	f800283a 	ret

08003198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8003198:	defffc04 	addi	sp,sp,-16
 800319c:	df000315 	stw	fp,12(sp)
 80031a0:	df000304 	addi	fp,sp,12
 80031a4:	e13ffd15 	stw	r4,-12(fp)
 80031a8:	e17ffe15 	stw	r5,-8(fp)
 80031ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80031b0:	e0bfff17 	ldw	r2,-4(fp)
}
 80031b4:	e037883a 	mov	sp,fp
 80031b8:	df000017 	ldw	fp,0(sp)
 80031bc:	dec00104 	addi	sp,sp,4
 80031c0:	f800283a 	ret

080031c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80031c4:	defffe04 	addi	sp,sp,-8
 80031c8:	dfc00115 	stw	ra,4(sp)
 80031cc:	df000015 	stw	fp,0(sp)
 80031d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80031d4:	d0a00917 	ldw	r2,-32732(gp)
 80031d8:	10000326 	beq	r2,zero,80031e8 <alt_get_errno+0x24>
 80031dc:	d0a00917 	ldw	r2,-32732(gp)
 80031e0:	103ee83a 	callr	r2
 80031e4:	00000106 	br	80031ec <alt_get_errno+0x28>
 80031e8:	d0a6b704 	addi	r2,gp,-25892
}
 80031ec:	e037883a 	mov	sp,fp
 80031f0:	dfc00117 	ldw	ra,4(sp)
 80031f4:	df000017 	ldw	fp,0(sp)
 80031f8:	dec00204 	addi	sp,sp,8
 80031fc:	f800283a 	ret

08003200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8003200:	defffb04 	addi	sp,sp,-20
 8003204:	dfc00415 	stw	ra,16(sp)
 8003208:	df000315 	stw	fp,12(sp)
 800320c:	df000304 	addi	fp,sp,12
 8003210:	e13ffe15 	stw	r4,-8(fp)
 8003214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003218:	e0bffe17 	ldw	r2,-8(fp)
 800321c:	10000616 	blt	r2,zero,8003238 <fstat+0x38>
 8003220:	e0bffe17 	ldw	r2,-8(fp)
 8003224:	10c00324 	muli	r3,r2,12
 8003228:	00820034 	movhi	r2,2048
 800322c:	10997e04 	addi	r2,r2,26104
 8003230:	1885883a 	add	r2,r3,r2
 8003234:	00000106 	br	800323c <fstat+0x3c>
 8003238:	0005883a 	mov	r2,zero
 800323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8003240:	e0bffd17 	ldw	r2,-12(fp)
 8003244:	10001026 	beq	r2,zero,8003288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8003248:	e0bffd17 	ldw	r2,-12(fp)
 800324c:	10800017 	ldw	r2,0(r2)
 8003250:	10800817 	ldw	r2,32(r2)
 8003254:	10000726 	beq	r2,zero,8003274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8003258:	e0bffd17 	ldw	r2,-12(fp)
 800325c:	10800017 	ldw	r2,0(r2)
 8003260:	10800817 	ldw	r2,32(r2)
 8003264:	e17fff17 	ldw	r5,-4(fp)
 8003268:	e13ffd17 	ldw	r4,-12(fp)
 800326c:	103ee83a 	callr	r2
 8003270:	00000a06 	br	800329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8003274:	e0bfff17 	ldw	r2,-4(fp)
 8003278:	00c80004 	movi	r3,8192
 800327c:	10c00115 	stw	r3,4(r2)
      return 0;
 8003280:	0005883a 	mov	r2,zero
 8003284:	00000506 	br	800329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003288:	80031c40 	call	80031c4 <alt_get_errno>
 800328c:	1007883a 	mov	r3,r2
 8003290:	00801444 	movi	r2,81
 8003294:	18800015 	stw	r2,0(r3)
    return -1;
 8003298:	00bfffc4 	movi	r2,-1
  }
}
 800329c:	e037883a 	mov	sp,fp
 80032a0:	dfc00117 	ldw	ra,4(sp)
 80032a4:	df000017 	ldw	fp,0(sp)
 80032a8:	dec00204 	addi	sp,sp,8
 80032ac:	f800283a 	ret

080032b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80032b0:	defffe04 	addi	sp,sp,-8
 80032b4:	dfc00115 	stw	ra,4(sp)
 80032b8:	df000015 	stw	fp,0(sp)
 80032bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80032c0:	d0a00917 	ldw	r2,-32732(gp)
 80032c4:	10000326 	beq	r2,zero,80032d4 <alt_get_errno+0x24>
 80032c8:	d0a00917 	ldw	r2,-32732(gp)
 80032cc:	103ee83a 	callr	r2
 80032d0:	00000106 	br	80032d8 <alt_get_errno+0x28>
 80032d4:	d0a6b704 	addi	r2,gp,-25892
}
 80032d8:	e037883a 	mov	sp,fp
 80032dc:	dfc00117 	ldw	ra,4(sp)
 80032e0:	df000017 	ldw	fp,0(sp)
 80032e4:	dec00204 	addi	sp,sp,8
 80032e8:	f800283a 	ret

080032ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80032ec:	deffed04 	addi	sp,sp,-76
 80032f0:	dfc01215 	stw	ra,72(sp)
 80032f4:	df001115 	stw	fp,68(sp)
 80032f8:	df001104 	addi	fp,sp,68
 80032fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003300:	e0bfff17 	ldw	r2,-4(fp)
 8003304:	10000616 	blt	r2,zero,8003320 <isatty+0x34>
 8003308:	e0bfff17 	ldw	r2,-4(fp)
 800330c:	10c00324 	muli	r3,r2,12
 8003310:	00820034 	movhi	r2,2048
 8003314:	10997e04 	addi	r2,r2,26104
 8003318:	1885883a 	add	r2,r3,r2
 800331c:	00000106 	br	8003324 <isatty+0x38>
 8003320:	0005883a 	mov	r2,zero
 8003324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8003328:	e0bfef17 	ldw	r2,-68(fp)
 800332c:	10000e26 	beq	r2,zero,8003368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003330:	e0bfef17 	ldw	r2,-68(fp)
 8003334:	10800017 	ldw	r2,0(r2)
 8003338:	10800817 	ldw	r2,32(r2)
 800333c:	1000021e 	bne	r2,zero,8003348 <isatty+0x5c>
    {
      return 1;
 8003340:	00800044 	movi	r2,1
 8003344:	00000d06 	br	800337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003348:	e0bff004 	addi	r2,fp,-64
 800334c:	100b883a 	mov	r5,r2
 8003350:	e13fff17 	ldw	r4,-4(fp)
 8003354:	80032000 	call	8003200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003358:	e0bff117 	ldw	r2,-60(fp)
 800335c:	10880020 	cmpeqi	r2,r2,8192
 8003360:	10803fcc 	andi	r2,r2,255
 8003364:	00000506 	br	800337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003368:	80032b00 	call	80032b0 <alt_get_errno>
 800336c:	1007883a 	mov	r3,r2
 8003370:	00801444 	movi	r2,81
 8003374:	18800015 	stw	r2,0(r3)
    return 0;
 8003378:	0005883a 	mov	r2,zero
  }
}
 800337c:	e037883a 	mov	sp,fp
 8003380:	dfc00117 	ldw	ra,4(sp)
 8003384:	df000017 	ldw	fp,0(sp)
 8003388:	dec00204 	addi	sp,sp,8
 800338c:	f800283a 	ret

08003390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003390:	defffc04 	addi	sp,sp,-16
 8003394:	df000315 	stw	fp,12(sp)
 8003398:	df000304 	addi	fp,sp,12
 800339c:	e13ffd15 	stw	r4,-12(fp)
 80033a0:	e17ffe15 	stw	r5,-8(fp)
 80033a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80033a8:	e0fffe17 	ldw	r3,-8(fp)
 80033ac:	e0bffd17 	ldw	r2,-12(fp)
 80033b0:	18800c26 	beq	r3,r2,80033e4 <alt_load_section+0x54>
  {
    while( to != end )
 80033b4:	00000806 	br	80033d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80033b8:	e0bffe17 	ldw	r2,-8(fp)
 80033bc:	10c00104 	addi	r3,r2,4
 80033c0:	e0fffe15 	stw	r3,-8(fp)
 80033c4:	e0fffd17 	ldw	r3,-12(fp)
 80033c8:	19000104 	addi	r4,r3,4
 80033cc:	e13ffd15 	stw	r4,-12(fp)
 80033d0:	18c00017 	ldw	r3,0(r3)
 80033d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80033d8:	e0fffe17 	ldw	r3,-8(fp)
 80033dc:	e0bfff17 	ldw	r2,-4(fp)
 80033e0:	18bff51e 	bne	r3,r2,80033b8 <__alt_data_end+0xf80033b8>
    {
      *to++ = *from++;
    }
  }
}
 80033e4:	0001883a 	nop
 80033e8:	e037883a 	mov	sp,fp
 80033ec:	df000017 	ldw	fp,0(sp)
 80033f0:	dec00104 	addi	sp,sp,4
 80033f4:	f800283a 	ret

080033f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80033f8:	defffe04 	addi	sp,sp,-8
 80033fc:	dfc00115 	stw	ra,4(sp)
 8003400:	df000015 	stw	fp,0(sp)
 8003404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003408:	01820034 	movhi	r6,2048
 800340c:	319e0f04 	addi	r6,r6,30780
 8003410:	01420034 	movhi	r5,2048
 8003414:	29576904 	addi	r5,r5,23972
 8003418:	01020034 	movhi	r4,2048
 800341c:	211e0f04 	addi	r4,r4,30780
 8003420:	80033900 	call	8003390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003424:	01820034 	movhi	r6,2048
 8003428:	31809104 	addi	r6,r6,580
 800342c:	01420034 	movhi	r5,2048
 8003430:	29400804 	addi	r5,r5,32
 8003434:	01020034 	movhi	r4,2048
 8003438:	21000804 	addi	r4,r4,32
 800343c:	80033900 	call	8003390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003440:	01820034 	movhi	r6,2048
 8003444:	31976904 	addi	r6,r6,23972
 8003448:	01420034 	movhi	r5,2048
 800344c:	29575204 	addi	r5,r5,23880
 8003450:	01020034 	movhi	r4,2048
 8003454:	21175204 	addi	r4,r4,23880
 8003458:	80033900 	call	8003390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800345c:	8004c340 	call	8004c34 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003460:	8004eac0 	call	8004eac <alt_icache_flush_all>
}
 8003464:	0001883a 	nop
 8003468:	e037883a 	mov	sp,fp
 800346c:	dfc00117 	ldw	ra,4(sp)
 8003470:	df000017 	ldw	fp,0(sp)
 8003474:	dec00204 	addi	sp,sp,8
 8003478:	f800283a 	ret

0800347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800347c:	defffe04 	addi	sp,sp,-8
 8003480:	dfc00115 	stw	ra,4(sp)
 8003484:	df000015 	stw	fp,0(sp)
 8003488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800348c:	d0a00917 	ldw	r2,-32732(gp)
 8003490:	10000326 	beq	r2,zero,80034a0 <alt_get_errno+0x24>
 8003494:	d0a00917 	ldw	r2,-32732(gp)
 8003498:	103ee83a 	callr	r2
 800349c:	00000106 	br	80034a4 <alt_get_errno+0x28>
 80034a0:	d0a6b704 	addi	r2,gp,-25892
}
 80034a4:	e037883a 	mov	sp,fp
 80034a8:	dfc00117 	ldw	ra,4(sp)
 80034ac:	df000017 	ldw	fp,0(sp)
 80034b0:	dec00204 	addi	sp,sp,8
 80034b4:	f800283a 	ret

080034b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80034b8:	defff904 	addi	sp,sp,-28
 80034bc:	dfc00615 	stw	ra,24(sp)
 80034c0:	df000515 	stw	fp,20(sp)
 80034c4:	df000504 	addi	fp,sp,20
 80034c8:	e13ffd15 	stw	r4,-12(fp)
 80034cc:	e17ffe15 	stw	r5,-8(fp)
 80034d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80034d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80034d8:	e0bffd17 	ldw	r2,-12(fp)
 80034dc:	10000616 	blt	r2,zero,80034f8 <lseek+0x40>
 80034e0:	e0bffd17 	ldw	r2,-12(fp)
 80034e4:	10c00324 	muli	r3,r2,12
 80034e8:	00820034 	movhi	r2,2048
 80034ec:	10997e04 	addi	r2,r2,26104
 80034f0:	1885883a 	add	r2,r3,r2
 80034f4:	00000106 	br	80034fc <lseek+0x44>
 80034f8:	0005883a 	mov	r2,zero
 80034fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8003500:	e0bffc17 	ldw	r2,-16(fp)
 8003504:	10001026 	beq	r2,zero,8003548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8003508:	e0bffc17 	ldw	r2,-16(fp)
 800350c:	10800017 	ldw	r2,0(r2)
 8003510:	10800717 	ldw	r2,28(r2)
 8003514:	10000926 	beq	r2,zero,800353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8003518:	e0bffc17 	ldw	r2,-16(fp)
 800351c:	10800017 	ldw	r2,0(r2)
 8003520:	10800717 	ldw	r2,28(r2)
 8003524:	e1bfff17 	ldw	r6,-4(fp)
 8003528:	e17ffe17 	ldw	r5,-8(fp)
 800352c:	e13ffc17 	ldw	r4,-16(fp)
 8003530:	103ee83a 	callr	r2
 8003534:	e0bffb15 	stw	r2,-20(fp)
 8003538:	00000506 	br	8003550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800353c:	00bfde84 	movi	r2,-134
 8003540:	e0bffb15 	stw	r2,-20(fp)
 8003544:	00000206 	br	8003550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003548:	00bfebc4 	movi	r2,-81
 800354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003550:	e0bffb17 	ldw	r2,-20(fp)
 8003554:	1000070e 	bge	r2,zero,8003574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8003558:	800347c0 	call	800347c <alt_get_errno>
 800355c:	1007883a 	mov	r3,r2
 8003560:	e0bffb17 	ldw	r2,-20(fp)
 8003564:	0085c83a 	sub	r2,zero,r2
 8003568:	18800015 	stw	r2,0(r3)
    rc = -1;
 800356c:	00bfffc4 	movi	r2,-1
 8003570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8003574:	e0bffb17 	ldw	r2,-20(fp)
}
 8003578:	e037883a 	mov	sp,fp
 800357c:	dfc00117 	ldw	ra,4(sp)
 8003580:	df000017 	ldw	fp,0(sp)
 8003584:	dec00204 	addi	sp,sp,8
 8003588:	f800283a 	ret

0800358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800358c:	defffd04 	addi	sp,sp,-12
 8003590:	dfc00215 	stw	ra,8(sp)
 8003594:	df000115 	stw	fp,4(sp)
 8003598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800359c:	0009883a 	mov	r4,zero
 80035a0:	8003a040 	call	8003a04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80035a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80035a8:	8003a3c0 	call	8003a3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80035ac:	01820034 	movhi	r6,2048
 80035b0:	31975c04 	addi	r6,r6,23920
 80035b4:	01420034 	movhi	r5,2048
 80035b8:	29575c04 	addi	r5,r5,23920
 80035bc:	01020034 	movhi	r4,2048
 80035c0:	21175c04 	addi	r4,r4,23920
 80035c4:	80052440 	call	8005244 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80035c8:	8004d5c0 	call	8004d5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80035cc:	01020034 	movhi	r4,2048
 80035d0:	21136f04 	addi	r4,r4,19900
 80035d4:	80059b40 	call	80059b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80035d8:	d0a6b817 	ldw	r2,-25888(gp)
 80035dc:	d0e6b917 	ldw	r3,-25884(gp)
 80035e0:	d126ba17 	ldw	r4,-25880(gp)
 80035e4:	200d883a 	mov	r6,r4
 80035e8:	180b883a 	mov	r5,r3
 80035ec:	1009883a 	mov	r4,r2
 80035f0:	80002900 	call	8000290 <main>
 80035f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80035f8:	01000044 	movi	r4,1
 80035fc:	80030c80 	call	80030c8 <close>
  exit (result);
 8003600:	e13fff17 	ldw	r4,-4(fp)
 8003604:	80059c80 	call	80059c8 <exit>

08003608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003608:	defffe04 	addi	sp,sp,-8
 800360c:	df000115 	stw	fp,4(sp)
 8003610:	df000104 	addi	fp,sp,4
 8003614:	e13fff15 	stw	r4,-4(fp)
}
 8003618:	0001883a 	nop
 800361c:	e037883a 	mov	sp,fp
 8003620:	df000017 	ldw	fp,0(sp)
 8003624:	dec00104 	addi	sp,sp,4
 8003628:	f800283a 	ret

0800362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800362c:	defffe04 	addi	sp,sp,-8
 8003630:	df000115 	stw	fp,4(sp)
 8003634:	df000104 	addi	fp,sp,4
 8003638:	e13fff15 	stw	r4,-4(fp)
}
 800363c:	0001883a 	nop
 8003640:	e037883a 	mov	sp,fp
 8003644:	df000017 	ldw	fp,0(sp)
 8003648:	dec00104 	addi	sp,sp,4
 800364c:	f800283a 	ret

08003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003650:	defffe04 	addi	sp,sp,-8
 8003654:	dfc00115 	stw	ra,4(sp)
 8003658:	df000015 	stw	fp,0(sp)
 800365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003660:	d0a00917 	ldw	r2,-32732(gp)
 8003664:	10000326 	beq	r2,zero,8003674 <alt_get_errno+0x24>
 8003668:	d0a00917 	ldw	r2,-32732(gp)
 800366c:	103ee83a 	callr	r2
 8003670:	00000106 	br	8003678 <alt_get_errno+0x28>
 8003674:	d0a6b704 	addi	r2,gp,-25892
}
 8003678:	e037883a 	mov	sp,fp
 800367c:	dfc00117 	ldw	ra,4(sp)
 8003680:	df000017 	ldw	fp,0(sp)
 8003684:	dec00204 	addi	sp,sp,8
 8003688:	f800283a 	ret

0800368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800368c:	defff904 	addi	sp,sp,-28
 8003690:	dfc00615 	stw	ra,24(sp)
 8003694:	df000515 	stw	fp,20(sp)
 8003698:	df000504 	addi	fp,sp,20
 800369c:	e13ffd15 	stw	r4,-12(fp)
 80036a0:	e17ffe15 	stw	r5,-8(fp)
 80036a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80036a8:	e0bffd17 	ldw	r2,-12(fp)
 80036ac:	10000616 	blt	r2,zero,80036c8 <read+0x3c>
 80036b0:	e0bffd17 	ldw	r2,-12(fp)
 80036b4:	10c00324 	muli	r3,r2,12
 80036b8:	00820034 	movhi	r2,2048
 80036bc:	10997e04 	addi	r2,r2,26104
 80036c0:	1885883a 	add	r2,r3,r2
 80036c4:	00000106 	br	80036cc <read+0x40>
 80036c8:	0005883a 	mov	r2,zero
 80036cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80036d0:	e0bffb17 	ldw	r2,-20(fp)
 80036d4:	10002226 	beq	r2,zero,8003760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80036d8:	e0bffb17 	ldw	r2,-20(fp)
 80036dc:	10800217 	ldw	r2,8(r2)
 80036e0:	108000cc 	andi	r2,r2,3
 80036e4:	10800060 	cmpeqi	r2,r2,1
 80036e8:	1000181e 	bne	r2,zero,800374c <read+0xc0>
        (fd->dev->read))
 80036ec:	e0bffb17 	ldw	r2,-20(fp)
 80036f0:	10800017 	ldw	r2,0(r2)
 80036f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80036f8:	10001426 	beq	r2,zero,800374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80036fc:	e0bffb17 	ldw	r2,-20(fp)
 8003700:	10800017 	ldw	r2,0(r2)
 8003704:	10800517 	ldw	r2,20(r2)
 8003708:	e0ffff17 	ldw	r3,-4(fp)
 800370c:	180d883a 	mov	r6,r3
 8003710:	e17ffe17 	ldw	r5,-8(fp)
 8003714:	e13ffb17 	ldw	r4,-20(fp)
 8003718:	103ee83a 	callr	r2
 800371c:	e0bffc15 	stw	r2,-16(fp)
 8003720:	e0bffc17 	ldw	r2,-16(fp)
 8003724:	1000070e 	bge	r2,zero,8003744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8003728:	80036500 	call	8003650 <alt_get_errno>
 800372c:	1007883a 	mov	r3,r2
 8003730:	e0bffc17 	ldw	r2,-16(fp)
 8003734:	0085c83a 	sub	r2,zero,r2
 8003738:	18800015 	stw	r2,0(r3)
          return -1;
 800373c:	00bfffc4 	movi	r2,-1
 8003740:	00000c06 	br	8003774 <read+0xe8>
        }
        return rval;
 8003744:	e0bffc17 	ldw	r2,-16(fp)
 8003748:	00000a06 	br	8003774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800374c:	80036500 	call	8003650 <alt_get_errno>
 8003750:	1007883a 	mov	r3,r2
 8003754:	00800344 	movi	r2,13
 8003758:	18800015 	stw	r2,0(r3)
 800375c:	00000406 	br	8003770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8003760:	80036500 	call	8003650 <alt_get_errno>
 8003764:	1007883a 	mov	r3,r2
 8003768:	00801444 	movi	r2,81
 800376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003770:	00bfffc4 	movi	r2,-1
}
 8003774:	e037883a 	mov	sp,fp
 8003778:	dfc00117 	ldw	ra,4(sp)
 800377c:	df000017 	ldw	fp,0(sp)
 8003780:	dec00204 	addi	sp,sp,8
 8003784:	f800283a 	ret

08003788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003788:	defffe04 	addi	sp,sp,-8
 800378c:	df000115 	stw	fp,4(sp)
 8003790:	df000104 	addi	fp,sp,4
 8003794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003798:	e0bfff17 	ldw	r2,-4(fp)
 800379c:	108000d0 	cmplti	r2,r2,3
 80037a0:	10000d1e 	bne	r2,zero,80037d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80037a4:	00820034 	movhi	r2,2048
 80037a8:	10997e04 	addi	r2,r2,26104
 80037ac:	e0ffff17 	ldw	r3,-4(fp)
 80037b0:	18c00324 	muli	r3,r3,12
 80037b4:	10c5883a 	add	r2,r2,r3
 80037b8:	10800204 	addi	r2,r2,8
 80037bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80037c0:	00820034 	movhi	r2,2048
 80037c4:	10997e04 	addi	r2,r2,26104
 80037c8:	e0ffff17 	ldw	r3,-4(fp)
 80037cc:	18c00324 	muli	r3,r3,12
 80037d0:	10c5883a 	add	r2,r2,r3
 80037d4:	10000015 	stw	zero,0(r2)
  }
}
 80037d8:	0001883a 	nop
 80037dc:	e037883a 	mov	sp,fp
 80037e0:	df000017 	ldw	fp,0(sp)
 80037e4:	dec00104 	addi	sp,sp,4
 80037e8:	f800283a 	ret

080037ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80037ec:	defff904 	addi	sp,sp,-28
 80037f0:	df000615 	stw	fp,24(sp)
 80037f4:	df000604 	addi	fp,sp,24
 80037f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80037fc:	0005303a 	rdctl	r2,status
 8003800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003804:	e0fffe17 	ldw	r3,-8(fp)
 8003808:	00bfff84 	movi	r2,-2
 800380c:	1884703a 	and	r2,r3,r2
 8003810:	1001703a 	wrctl	status,r2
  
  return context;
 8003814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8003818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800381c:	d0a00a17 	ldw	r2,-32728(gp)
 8003820:	10c000c4 	addi	r3,r2,3
 8003824:	00bfff04 	movi	r2,-4
 8003828:	1884703a 	and	r2,r3,r2
 800382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003830:	d0e00a17 	ldw	r3,-32728(gp)
 8003834:	e0bfff17 	ldw	r2,-4(fp)
 8003838:	1887883a 	add	r3,r3,r2
 800383c:	00840034 	movhi	r2,4096
 8003840:	10800004 	addi	r2,r2,0
 8003844:	10c0062e 	bgeu	r2,r3,8003860 <sbrk+0x74>
 8003848:	e0bffb17 	ldw	r2,-20(fp)
 800384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003850:	e0bffa17 	ldw	r2,-24(fp)
 8003854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8003858:	00bfffc4 	movi	r2,-1
 800385c:	00000b06 	br	800388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8003860:	d0a00a17 	ldw	r2,-32728(gp)
 8003864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8003868:	d0e00a17 	ldw	r3,-32728(gp)
 800386c:	e0bfff17 	ldw	r2,-4(fp)
 8003870:	1885883a 	add	r2,r3,r2
 8003874:	d0a00a15 	stw	r2,-32728(gp)
 8003878:	e0bffb17 	ldw	r2,-20(fp)
 800387c:	e0bffc15 	stw	r2,-16(fp)
 8003880:	e0bffc17 	ldw	r2,-16(fp)
 8003884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8003888:	e0bffd17 	ldw	r2,-12(fp)
} 
 800388c:	e037883a 	mov	sp,fp
 8003890:	df000017 	ldw	fp,0(sp)
 8003894:	dec00104 	addi	sp,sp,4
 8003898:	f800283a 	ret

0800389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800389c:	defffe04 	addi	sp,sp,-8
 80038a0:	dfc00115 	stw	ra,4(sp)
 80038a4:	df000015 	stw	fp,0(sp)
 80038a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80038ac:	d0a00917 	ldw	r2,-32732(gp)
 80038b0:	10000326 	beq	r2,zero,80038c0 <alt_get_errno+0x24>
 80038b4:	d0a00917 	ldw	r2,-32732(gp)
 80038b8:	103ee83a 	callr	r2
 80038bc:	00000106 	br	80038c4 <alt_get_errno+0x28>
 80038c0:	d0a6b704 	addi	r2,gp,-25892
}
 80038c4:	e037883a 	mov	sp,fp
 80038c8:	dfc00117 	ldw	ra,4(sp)
 80038cc:	df000017 	ldw	fp,0(sp)
 80038d0:	dec00204 	addi	sp,sp,8
 80038d4:	f800283a 	ret

080038d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80038d8:	defff904 	addi	sp,sp,-28
 80038dc:	dfc00615 	stw	ra,24(sp)
 80038e0:	df000515 	stw	fp,20(sp)
 80038e4:	df000504 	addi	fp,sp,20
 80038e8:	e13ffd15 	stw	r4,-12(fp)
 80038ec:	e17ffe15 	stw	r5,-8(fp)
 80038f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80038f4:	e0bffd17 	ldw	r2,-12(fp)
 80038f8:	10000616 	blt	r2,zero,8003914 <write+0x3c>
 80038fc:	e0bffd17 	ldw	r2,-12(fp)
 8003900:	10c00324 	muli	r3,r2,12
 8003904:	00820034 	movhi	r2,2048
 8003908:	10997e04 	addi	r2,r2,26104
 800390c:	1885883a 	add	r2,r3,r2
 8003910:	00000106 	br	8003918 <write+0x40>
 8003914:	0005883a 	mov	r2,zero
 8003918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800391c:	e0bffb17 	ldw	r2,-20(fp)
 8003920:	10002126 	beq	r2,zero,80039a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003924:	e0bffb17 	ldw	r2,-20(fp)
 8003928:	10800217 	ldw	r2,8(r2)
 800392c:	108000cc 	andi	r2,r2,3
 8003930:	10001826 	beq	r2,zero,8003994 <write+0xbc>
 8003934:	e0bffb17 	ldw	r2,-20(fp)
 8003938:	10800017 	ldw	r2,0(r2)
 800393c:	10800617 	ldw	r2,24(r2)
 8003940:	10001426 	beq	r2,zero,8003994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8003944:	e0bffb17 	ldw	r2,-20(fp)
 8003948:	10800017 	ldw	r2,0(r2)
 800394c:	10800617 	ldw	r2,24(r2)
 8003950:	e0ffff17 	ldw	r3,-4(fp)
 8003954:	180d883a 	mov	r6,r3
 8003958:	e17ffe17 	ldw	r5,-8(fp)
 800395c:	e13ffb17 	ldw	r4,-20(fp)
 8003960:	103ee83a 	callr	r2
 8003964:	e0bffc15 	stw	r2,-16(fp)
 8003968:	e0bffc17 	ldw	r2,-16(fp)
 800396c:	1000070e 	bge	r2,zero,800398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8003970:	800389c0 	call	800389c <alt_get_errno>
 8003974:	1007883a 	mov	r3,r2
 8003978:	e0bffc17 	ldw	r2,-16(fp)
 800397c:	0085c83a 	sub	r2,zero,r2
 8003980:	18800015 	stw	r2,0(r3)
        return -1;
 8003984:	00bfffc4 	movi	r2,-1
 8003988:	00000c06 	br	80039bc <write+0xe4>
      }
      return rval;
 800398c:	e0bffc17 	ldw	r2,-16(fp)
 8003990:	00000a06 	br	80039bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8003994:	800389c0 	call	800389c <alt_get_errno>
 8003998:	1007883a 	mov	r3,r2
 800399c:	00800344 	movi	r2,13
 80039a0:	18800015 	stw	r2,0(r3)
 80039a4:	00000406 	br	80039b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80039a8:	800389c0 	call	800389c <alt_get_errno>
 80039ac:	1007883a 	mov	r3,r2
 80039b0:	00801444 	movi	r2,81
 80039b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80039b8:	00bfffc4 	movi	r2,-1
}
 80039bc:	e037883a 	mov	sp,fp
 80039c0:	dfc00117 	ldw	ra,4(sp)
 80039c4:	df000017 	ldw	fp,0(sp)
 80039c8:	dec00204 	addi	sp,sp,8
 80039cc:	f800283a 	ret

080039d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80039d0:	defffd04 	addi	sp,sp,-12
 80039d4:	dfc00215 	stw	ra,8(sp)
 80039d8:	df000115 	stw	fp,4(sp)
 80039dc:	df000104 	addi	fp,sp,4
 80039e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80039e4:	d1600604 	addi	r5,gp,-32744
 80039e8:	e13fff17 	ldw	r4,-4(fp)
 80039ec:	8004cb80 	call	8004cb8 <alt_dev_llist_insert>
}
 80039f0:	e037883a 	mov	sp,fp
 80039f4:	dfc00117 	ldw	ra,4(sp)
 80039f8:	df000017 	ldw	fp,0(sp)
 80039fc:	dec00204 	addi	sp,sp,8
 8003a00:	f800283a 	ret

08003a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003a04:	defffd04 	addi	sp,sp,-12
 8003a08:	dfc00215 	stw	ra,8(sp)
 8003a0c:	df000115 	stw	fp,4(sp)
 8003a10:	df000104 	addi	fp,sp,4
 8003a14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8003a18:	80056b80 	call	80056b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003a1c:	00800044 	movi	r2,1
 8003a20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003a24:	0001883a 	nop
 8003a28:	e037883a 	mov	sp,fp
 8003a2c:	dfc00117 	ldw	ra,4(sp)
 8003a30:	df000017 	ldw	fp,0(sp)
 8003a34:	dec00204 	addi	sp,sp,8
 8003a38:	f800283a 	ret

08003a3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003a3c:	defffe04 	addi	sp,sp,-8
 8003a40:	dfc00115 	stw	ra,4(sp)
 8003a44:	df000015 	stw	fp,0(sp)
 8003a48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
 8003a4c:	01c0fa04 	movi	r7,1000
 8003a50:	01800044 	movi	r6,1
 8003a54:	000b883a 	mov	r5,zero
 8003a58:	01000834 	movhi	r4,32
 8003a5c:	21043804 	addi	r4,r4,4320
 8003a60:	80045980 	call	8004598 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8003a64:	018000c4 	movi	r6,3
 8003a68:	000b883a 	mov	r5,zero
 8003a6c:	01020034 	movhi	r4,2048
 8003a70:	2119e804 	addi	r4,r4,26528
 8003a74:	8003c1c0 	call	8003c1c <altera_avalon_jtag_uart_init>
 8003a78:	01020034 	movhi	r4,2048
 8003a7c:	2119de04 	addi	r4,r4,26488
 8003a80:	80039d00 	call	80039d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8003a84:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
 8003a88:	01020034 	movhi	r4,2048
 8003a8c:	211df604 	addi	r4,r4,30680
 8003a90:	80046c80 	call	80046c8 <alt_up_character_lcd_init>
 8003a94:	01020034 	movhi	r4,2048
 8003a98:	211df604 	addi	r4,r4,30680
 8003a9c:	80039d00 	call	80039d0 <alt_dev_reg>
}
 8003aa0:	0001883a 	nop
 8003aa4:	e037883a 	mov	sp,fp
 8003aa8:	dfc00117 	ldw	ra,4(sp)
 8003aac:	df000017 	ldw	fp,0(sp)
 8003ab0:	dec00204 	addi	sp,sp,8
 8003ab4:	f800283a 	ret

08003ab8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003ab8:	defffa04 	addi	sp,sp,-24
 8003abc:	dfc00515 	stw	ra,20(sp)
 8003ac0:	df000415 	stw	fp,16(sp)
 8003ac4:	df000404 	addi	fp,sp,16
 8003ac8:	e13ffd15 	stw	r4,-12(fp)
 8003acc:	e17ffe15 	stw	r5,-8(fp)
 8003ad0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003ad4:	e0bffd17 	ldw	r2,-12(fp)
 8003ad8:	10800017 	ldw	r2,0(r2)
 8003adc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003ae0:	e0bffc17 	ldw	r2,-16(fp)
 8003ae4:	10c00a04 	addi	r3,r2,40
 8003ae8:	e0bffd17 	ldw	r2,-12(fp)
 8003aec:	10800217 	ldw	r2,8(r2)
 8003af0:	100f883a 	mov	r7,r2
 8003af4:	e1bfff17 	ldw	r6,-4(fp)
 8003af8:	e17ffe17 	ldw	r5,-8(fp)
 8003afc:	1809883a 	mov	r4,r3
 8003b00:	80040e00 	call	80040e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003b04:	e037883a 	mov	sp,fp
 8003b08:	dfc00117 	ldw	ra,4(sp)
 8003b0c:	df000017 	ldw	fp,0(sp)
 8003b10:	dec00204 	addi	sp,sp,8
 8003b14:	f800283a 	ret

08003b18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003b18:	defffa04 	addi	sp,sp,-24
 8003b1c:	dfc00515 	stw	ra,20(sp)
 8003b20:	df000415 	stw	fp,16(sp)
 8003b24:	df000404 	addi	fp,sp,16
 8003b28:	e13ffd15 	stw	r4,-12(fp)
 8003b2c:	e17ffe15 	stw	r5,-8(fp)
 8003b30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003b34:	e0bffd17 	ldw	r2,-12(fp)
 8003b38:	10800017 	ldw	r2,0(r2)
 8003b3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003b40:	e0bffc17 	ldw	r2,-16(fp)
 8003b44:	10c00a04 	addi	r3,r2,40
 8003b48:	e0bffd17 	ldw	r2,-12(fp)
 8003b4c:	10800217 	ldw	r2,8(r2)
 8003b50:	100f883a 	mov	r7,r2
 8003b54:	e1bfff17 	ldw	r6,-4(fp)
 8003b58:	e17ffe17 	ldw	r5,-8(fp)
 8003b5c:	1809883a 	mov	r4,r3
 8003b60:	80042fc0 	call	80042fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003b64:	e037883a 	mov	sp,fp
 8003b68:	dfc00117 	ldw	ra,4(sp)
 8003b6c:	df000017 	ldw	fp,0(sp)
 8003b70:	dec00204 	addi	sp,sp,8
 8003b74:	f800283a 	ret

08003b78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003b78:	defffc04 	addi	sp,sp,-16
 8003b7c:	dfc00315 	stw	ra,12(sp)
 8003b80:	df000215 	stw	fp,8(sp)
 8003b84:	df000204 	addi	fp,sp,8
 8003b88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003b8c:	e0bfff17 	ldw	r2,-4(fp)
 8003b90:	10800017 	ldw	r2,0(r2)
 8003b94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003b98:	e0bffe17 	ldw	r2,-8(fp)
 8003b9c:	10c00a04 	addi	r3,r2,40
 8003ba0:	e0bfff17 	ldw	r2,-4(fp)
 8003ba4:	10800217 	ldw	r2,8(r2)
 8003ba8:	100b883a 	mov	r5,r2
 8003bac:	1809883a 	mov	r4,r3
 8003bb0:	8003f880 	call	8003f88 <altera_avalon_jtag_uart_close>
}
 8003bb4:	e037883a 	mov	sp,fp
 8003bb8:	dfc00117 	ldw	ra,4(sp)
 8003bbc:	df000017 	ldw	fp,0(sp)
 8003bc0:	dec00204 	addi	sp,sp,8
 8003bc4:	f800283a 	ret

08003bc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003bc8:	defffa04 	addi	sp,sp,-24
 8003bcc:	dfc00515 	stw	ra,20(sp)
 8003bd0:	df000415 	stw	fp,16(sp)
 8003bd4:	df000404 	addi	fp,sp,16
 8003bd8:	e13ffd15 	stw	r4,-12(fp)
 8003bdc:	e17ffe15 	stw	r5,-8(fp)
 8003be0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003be4:	e0bffd17 	ldw	r2,-12(fp)
 8003be8:	10800017 	ldw	r2,0(r2)
 8003bec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8003bf0:	e0bffc17 	ldw	r2,-16(fp)
 8003bf4:	10800a04 	addi	r2,r2,40
 8003bf8:	e1bfff17 	ldw	r6,-4(fp)
 8003bfc:	e17ffe17 	ldw	r5,-8(fp)
 8003c00:	1009883a 	mov	r4,r2
 8003c04:	8003ff00 	call	8003ff0 <altera_avalon_jtag_uart_ioctl>
}
 8003c08:	e037883a 	mov	sp,fp
 8003c0c:	dfc00117 	ldw	ra,4(sp)
 8003c10:	df000017 	ldw	fp,0(sp)
 8003c14:	dec00204 	addi	sp,sp,8
 8003c18:	f800283a 	ret

08003c1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003c1c:	defffa04 	addi	sp,sp,-24
 8003c20:	dfc00515 	stw	ra,20(sp)
 8003c24:	df000415 	stw	fp,16(sp)
 8003c28:	df000404 	addi	fp,sp,16
 8003c2c:	e13ffd15 	stw	r4,-12(fp)
 8003c30:	e17ffe15 	stw	r5,-8(fp)
 8003c34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003c38:	e0bffd17 	ldw	r2,-12(fp)
 8003c3c:	00c00044 	movi	r3,1
 8003c40:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003c44:	e0bffd17 	ldw	r2,-12(fp)
 8003c48:	10800017 	ldw	r2,0(r2)
 8003c4c:	10800104 	addi	r2,r2,4
 8003c50:	1007883a 	mov	r3,r2
 8003c54:	e0bffd17 	ldw	r2,-12(fp)
 8003c58:	10800817 	ldw	r2,32(r2)
 8003c5c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003c60:	e0bffe17 	ldw	r2,-8(fp)
 8003c64:	e0ffff17 	ldw	r3,-4(fp)
 8003c68:	d8000015 	stw	zero,0(sp)
 8003c6c:	e1fffd17 	ldw	r7,-12(fp)
 8003c70:	01820034 	movhi	r6,2048
 8003c74:	318f3704 	addi	r6,r6,15580
 8003c78:	180b883a 	mov	r5,r3
 8003c7c:	1009883a 	mov	r4,r2
 8003c80:	8004ee00 	call	8004ee0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003c84:	e0bffd17 	ldw	r2,-12(fp)
 8003c88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003c8c:	e0bffd17 	ldw	r2,-12(fp)
 8003c90:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003c94:	d0e6bc17 	ldw	r3,-25872(gp)
 8003c98:	e1fffd17 	ldw	r7,-12(fp)
 8003c9c:	01820034 	movhi	r6,2048
 8003ca0:	318fba04 	addi	r6,r6,16104
 8003ca4:	180b883a 	mov	r5,r3
 8003ca8:	1009883a 	mov	r4,r2
 8003cac:	8004b080 	call	8004b08 <alt_alarm_start>
 8003cb0:	1000040e 	bge	r2,zero,8003cc4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003cb4:	e0fffd17 	ldw	r3,-12(fp)
 8003cb8:	00a00034 	movhi	r2,32768
 8003cbc:	10bfffc4 	addi	r2,r2,-1
 8003cc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003cc4:	0001883a 	nop
 8003cc8:	e037883a 	mov	sp,fp
 8003ccc:	dfc00117 	ldw	ra,4(sp)
 8003cd0:	df000017 	ldw	fp,0(sp)
 8003cd4:	dec00204 	addi	sp,sp,8
 8003cd8:	f800283a 	ret

08003cdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003cdc:	defff804 	addi	sp,sp,-32
 8003ce0:	df000715 	stw	fp,28(sp)
 8003ce4:	df000704 	addi	fp,sp,28
 8003ce8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003cec:	e0bfff17 	ldw	r2,-4(fp)
 8003cf0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003cf4:	e0bffb17 	ldw	r2,-20(fp)
 8003cf8:	10800017 	ldw	r2,0(r2)
 8003cfc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003d00:	e0bffc17 	ldw	r2,-16(fp)
 8003d04:	10800104 	addi	r2,r2,4
 8003d08:	10800037 	ldwio	r2,0(r2)
 8003d0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003d10:	e0bffd17 	ldw	r2,-12(fp)
 8003d14:	1080c00c 	andi	r2,r2,768
 8003d18:	10006d26 	beq	r2,zero,8003ed0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003d1c:	e0bffd17 	ldw	r2,-12(fp)
 8003d20:	1080400c 	andi	r2,r2,256
 8003d24:	10003526 	beq	r2,zero,8003dfc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003d28:	00800074 	movhi	r2,1
 8003d2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003d30:	e0bffb17 	ldw	r2,-20(fp)
 8003d34:	10800a17 	ldw	r2,40(r2)
 8003d38:	10800044 	addi	r2,r2,1
 8003d3c:	1081ffcc 	andi	r2,r2,2047
 8003d40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003d44:	e0bffb17 	ldw	r2,-20(fp)
 8003d48:	10c00b17 	ldw	r3,44(r2)
 8003d4c:	e0bffe17 	ldw	r2,-8(fp)
 8003d50:	18801526 	beq	r3,r2,8003da8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003d54:	e0bffc17 	ldw	r2,-16(fp)
 8003d58:	10800037 	ldwio	r2,0(r2)
 8003d5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003d60:	e0bff917 	ldw	r2,-28(fp)
 8003d64:	10a0000c 	andi	r2,r2,32768
 8003d68:	10001126 	beq	r2,zero,8003db0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003d6c:	e0bffb17 	ldw	r2,-20(fp)
 8003d70:	10800a17 	ldw	r2,40(r2)
 8003d74:	e0fff917 	ldw	r3,-28(fp)
 8003d78:	1809883a 	mov	r4,r3
 8003d7c:	e0fffb17 	ldw	r3,-20(fp)
 8003d80:	1885883a 	add	r2,r3,r2
 8003d84:	10800e04 	addi	r2,r2,56
 8003d88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003d8c:	e0bffb17 	ldw	r2,-20(fp)
 8003d90:	10800a17 	ldw	r2,40(r2)
 8003d94:	10800044 	addi	r2,r2,1
 8003d98:	10c1ffcc 	andi	r3,r2,2047
 8003d9c:	e0bffb17 	ldw	r2,-20(fp)
 8003da0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003da4:	003fe206 	br	8003d30 <__alt_data_end+0xf8003d30>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8003da8:	0001883a 	nop
 8003dac:	00000106 	br	8003db4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8003db0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003db4:	e0bff917 	ldw	r2,-28(fp)
 8003db8:	10bfffec 	andhi	r2,r2,65535
 8003dbc:	10000f26 	beq	r2,zero,8003dfc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003dc0:	e0bffb17 	ldw	r2,-20(fp)
 8003dc4:	10c00817 	ldw	r3,32(r2)
 8003dc8:	00bfff84 	movi	r2,-2
 8003dcc:	1886703a 	and	r3,r3,r2
 8003dd0:	e0bffb17 	ldw	r2,-20(fp)
 8003dd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003dd8:	e0bffc17 	ldw	r2,-16(fp)
 8003ddc:	10800104 	addi	r2,r2,4
 8003de0:	1007883a 	mov	r3,r2
 8003de4:	e0bffb17 	ldw	r2,-20(fp)
 8003de8:	10800817 	ldw	r2,32(r2)
 8003dec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003df0:	e0bffc17 	ldw	r2,-16(fp)
 8003df4:	10800104 	addi	r2,r2,4
 8003df8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003dfc:	e0bffd17 	ldw	r2,-12(fp)
 8003e00:	1080800c 	andi	r2,r2,512
 8003e04:	103fbe26 	beq	r2,zero,8003d00 <__alt_data_end+0xf8003d00>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003e08:	e0bffd17 	ldw	r2,-12(fp)
 8003e0c:	1004d43a 	srli	r2,r2,16
 8003e10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003e14:	00001406 	br	8003e68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003e18:	e0bffc17 	ldw	r2,-16(fp)
 8003e1c:	e0fffb17 	ldw	r3,-20(fp)
 8003e20:	18c00d17 	ldw	r3,52(r3)
 8003e24:	e13ffb17 	ldw	r4,-20(fp)
 8003e28:	20c7883a 	add	r3,r4,r3
 8003e2c:	18c20e04 	addi	r3,r3,2104
 8003e30:	18c00003 	ldbu	r3,0(r3)
 8003e34:	18c03fcc 	andi	r3,r3,255
 8003e38:	18c0201c 	xori	r3,r3,128
 8003e3c:	18ffe004 	addi	r3,r3,-128
 8003e40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003e44:	e0bffb17 	ldw	r2,-20(fp)
 8003e48:	10800d17 	ldw	r2,52(r2)
 8003e4c:	10800044 	addi	r2,r2,1
 8003e50:	10c1ffcc 	andi	r3,r2,2047
 8003e54:	e0bffb17 	ldw	r2,-20(fp)
 8003e58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003e5c:	e0bffa17 	ldw	r2,-24(fp)
 8003e60:	10bfffc4 	addi	r2,r2,-1
 8003e64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003e68:	e0bffa17 	ldw	r2,-24(fp)
 8003e6c:	10000526 	beq	r2,zero,8003e84 <altera_avalon_jtag_uart_irq+0x1a8>
 8003e70:	e0bffb17 	ldw	r2,-20(fp)
 8003e74:	10c00d17 	ldw	r3,52(r2)
 8003e78:	e0bffb17 	ldw	r2,-20(fp)
 8003e7c:	10800c17 	ldw	r2,48(r2)
 8003e80:	18bfe51e 	bne	r3,r2,8003e18 <__alt_data_end+0xf8003e18>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003e84:	e0bffa17 	ldw	r2,-24(fp)
 8003e88:	103f9d26 	beq	r2,zero,8003d00 <__alt_data_end+0xf8003d00>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003e8c:	e0bffb17 	ldw	r2,-20(fp)
 8003e90:	10c00817 	ldw	r3,32(r2)
 8003e94:	00bfff44 	movi	r2,-3
 8003e98:	1886703a 	and	r3,r3,r2
 8003e9c:	e0bffb17 	ldw	r2,-20(fp)
 8003ea0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003ea4:	e0bffb17 	ldw	r2,-20(fp)
 8003ea8:	10800017 	ldw	r2,0(r2)
 8003eac:	10800104 	addi	r2,r2,4
 8003eb0:	1007883a 	mov	r3,r2
 8003eb4:	e0bffb17 	ldw	r2,-20(fp)
 8003eb8:	10800817 	ldw	r2,32(r2)
 8003ebc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003ec0:	e0bffc17 	ldw	r2,-16(fp)
 8003ec4:	10800104 	addi	r2,r2,4
 8003ec8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003ecc:	003f8c06 	br	8003d00 <__alt_data_end+0xf8003d00>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8003ed0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8003ed4:	0001883a 	nop
 8003ed8:	e037883a 	mov	sp,fp
 8003edc:	df000017 	ldw	fp,0(sp)
 8003ee0:	dec00104 	addi	sp,sp,4
 8003ee4:	f800283a 	ret

08003ee8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003ee8:	defff804 	addi	sp,sp,-32
 8003eec:	df000715 	stw	fp,28(sp)
 8003ef0:	df000704 	addi	fp,sp,28
 8003ef4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003ef8:	e0bffb17 	ldw	r2,-20(fp)
 8003efc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003f00:	e0bff917 	ldw	r2,-28(fp)
 8003f04:	10800017 	ldw	r2,0(r2)
 8003f08:	10800104 	addi	r2,r2,4
 8003f0c:	10800037 	ldwio	r2,0(r2)
 8003f10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003f14:	e0bffa17 	ldw	r2,-24(fp)
 8003f18:	1081000c 	andi	r2,r2,1024
 8003f1c:	10000b26 	beq	r2,zero,8003f4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003f20:	e0bff917 	ldw	r2,-28(fp)
 8003f24:	10800017 	ldw	r2,0(r2)
 8003f28:	10800104 	addi	r2,r2,4
 8003f2c:	1007883a 	mov	r3,r2
 8003f30:	e0bff917 	ldw	r2,-28(fp)
 8003f34:	10800817 	ldw	r2,32(r2)
 8003f38:	10810014 	ori	r2,r2,1024
 8003f3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003f40:	e0bff917 	ldw	r2,-28(fp)
 8003f44:	10000915 	stw	zero,36(r2)
 8003f48:	00000a06 	br	8003f74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003f4c:	e0bff917 	ldw	r2,-28(fp)
 8003f50:	10c00917 	ldw	r3,36(r2)
 8003f54:	00a00034 	movhi	r2,32768
 8003f58:	10bfff04 	addi	r2,r2,-4
 8003f5c:	10c00536 	bltu	r2,r3,8003f74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003f60:	e0bff917 	ldw	r2,-28(fp)
 8003f64:	10800917 	ldw	r2,36(r2)
 8003f68:	10c00044 	addi	r3,r2,1
 8003f6c:	e0bff917 	ldw	r2,-28(fp)
 8003f70:	10c00915 	stw	r3,36(r2)
 8003f74:	d0a6bc17 	ldw	r2,-25872(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003f78:	e037883a 	mov	sp,fp
 8003f7c:	df000017 	ldw	fp,0(sp)
 8003f80:	dec00104 	addi	sp,sp,4
 8003f84:	f800283a 	ret

08003f88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003f88:	defffd04 	addi	sp,sp,-12
 8003f8c:	df000215 	stw	fp,8(sp)
 8003f90:	df000204 	addi	fp,sp,8
 8003f94:	e13ffe15 	stw	r4,-8(fp)
 8003f98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003f9c:	00000506 	br	8003fb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8003fa0:	e0bfff17 	ldw	r2,-4(fp)
 8003fa4:	1090000c 	andi	r2,r2,16384
 8003fa8:	10000226 	beq	r2,zero,8003fb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8003fac:	00bffd44 	movi	r2,-11
 8003fb0:	00000b06 	br	8003fe0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003fb4:	e0bffe17 	ldw	r2,-8(fp)
 8003fb8:	10c00d17 	ldw	r3,52(r2)
 8003fbc:	e0bffe17 	ldw	r2,-8(fp)
 8003fc0:	10800c17 	ldw	r2,48(r2)
 8003fc4:	18800526 	beq	r3,r2,8003fdc <altera_avalon_jtag_uart_close+0x54>
 8003fc8:	e0bffe17 	ldw	r2,-8(fp)
 8003fcc:	10c00917 	ldw	r3,36(r2)
 8003fd0:	e0bffe17 	ldw	r2,-8(fp)
 8003fd4:	10800117 	ldw	r2,4(r2)
 8003fd8:	18bff136 	bltu	r3,r2,8003fa0 <__alt_data_end+0xf8003fa0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003fdc:	0005883a 	mov	r2,zero
}
 8003fe0:	e037883a 	mov	sp,fp
 8003fe4:	df000017 	ldw	fp,0(sp)
 8003fe8:	dec00104 	addi	sp,sp,4
 8003fec:	f800283a 	ret

08003ff0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003ff0:	defffa04 	addi	sp,sp,-24
 8003ff4:	df000515 	stw	fp,20(sp)
 8003ff8:	df000504 	addi	fp,sp,20
 8003ffc:	e13ffd15 	stw	r4,-12(fp)
 8004000:	e17ffe15 	stw	r5,-8(fp)
 8004004:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8004008:	00bff9c4 	movi	r2,-25
 800400c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8004010:	e0bffe17 	ldw	r2,-8(fp)
 8004014:	10da8060 	cmpeqi	r3,r2,27137
 8004018:	1800031e 	bne	r3,zero,8004028 <altera_avalon_jtag_uart_ioctl+0x38>
 800401c:	109a80a0 	cmpeqi	r2,r2,27138
 8004020:	1000181e 	bne	r2,zero,8004084 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8004024:	00002906 	br	80040cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8004028:	e0bffd17 	ldw	r2,-12(fp)
 800402c:	10c00117 	ldw	r3,4(r2)
 8004030:	00a00034 	movhi	r2,32768
 8004034:	10bfffc4 	addi	r2,r2,-1
 8004038:	18802126 	beq	r3,r2,80040c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800403c:	e0bfff17 	ldw	r2,-4(fp)
 8004040:	10800017 	ldw	r2,0(r2)
 8004044:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8004048:	e0bffc17 	ldw	r2,-16(fp)
 800404c:	10800090 	cmplti	r2,r2,2
 8004050:	1000061e 	bne	r2,zero,800406c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004054:	e0fffc17 	ldw	r3,-16(fp)
 8004058:	00a00034 	movhi	r2,32768
 800405c:	10bfffc4 	addi	r2,r2,-1
 8004060:	18800226 	beq	r3,r2,800406c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004064:	e0bffc17 	ldw	r2,-16(fp)
 8004068:	00000206 	br	8004074 <altera_avalon_jtag_uart_ioctl+0x84>
 800406c:	00a00034 	movhi	r2,32768
 8004070:	10bfff84 	addi	r2,r2,-2
 8004074:	e0fffd17 	ldw	r3,-12(fp)
 8004078:	18800115 	stw	r2,4(r3)
      rc = 0;
 800407c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8004080:	00000f06 	br	80040c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8004084:	e0bffd17 	ldw	r2,-12(fp)
 8004088:	10c00117 	ldw	r3,4(r2)
 800408c:	00a00034 	movhi	r2,32768
 8004090:	10bfffc4 	addi	r2,r2,-1
 8004094:	18800c26 	beq	r3,r2,80040c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004098:	e0bffd17 	ldw	r2,-12(fp)
 800409c:	10c00917 	ldw	r3,36(r2)
 80040a0:	e0bffd17 	ldw	r2,-12(fp)
 80040a4:	10800117 	ldw	r2,4(r2)
 80040a8:	1885803a 	cmpltu	r2,r3,r2
 80040ac:	10c03fcc 	andi	r3,r2,255
 80040b0:	e0bfff17 	ldw	r2,-4(fp)
 80040b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80040b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80040bc:	00000206 	br	80040c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80040c0:	0001883a 	nop
 80040c4:	00000106 	br	80040cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80040c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80040cc:	e0bffb17 	ldw	r2,-20(fp)
}
 80040d0:	e037883a 	mov	sp,fp
 80040d4:	df000017 	ldw	fp,0(sp)
 80040d8:	dec00104 	addi	sp,sp,4
 80040dc:	f800283a 	ret

080040e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80040e0:	defff304 	addi	sp,sp,-52
 80040e4:	dfc00c15 	stw	ra,48(sp)
 80040e8:	df000b15 	stw	fp,44(sp)
 80040ec:	df000b04 	addi	fp,sp,44
 80040f0:	e13ffc15 	stw	r4,-16(fp)
 80040f4:	e17ffd15 	stw	r5,-12(fp)
 80040f8:	e1bffe15 	stw	r6,-8(fp)
 80040fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8004100:	e0bffd17 	ldw	r2,-12(fp)
 8004104:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004108:	00004706 	br	8004228 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800410c:	e0bffc17 	ldw	r2,-16(fp)
 8004110:	10800a17 	ldw	r2,40(r2)
 8004114:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8004118:	e0bffc17 	ldw	r2,-16(fp)
 800411c:	10800b17 	ldw	r2,44(r2)
 8004120:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8004124:	e0fff717 	ldw	r3,-36(fp)
 8004128:	e0bff817 	ldw	r2,-32(fp)
 800412c:	18800536 	bltu	r3,r2,8004144 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004130:	e0fff717 	ldw	r3,-36(fp)
 8004134:	e0bff817 	ldw	r2,-32(fp)
 8004138:	1885c83a 	sub	r2,r3,r2
 800413c:	e0bff615 	stw	r2,-40(fp)
 8004140:	00000406 	br	8004154 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004144:	00c20004 	movi	r3,2048
 8004148:	e0bff817 	ldw	r2,-32(fp)
 800414c:	1885c83a 	sub	r2,r3,r2
 8004150:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004154:	e0bff617 	ldw	r2,-40(fp)
 8004158:	10001e26 	beq	r2,zero,80041d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800415c:	e0fffe17 	ldw	r3,-8(fp)
 8004160:	e0bff617 	ldw	r2,-40(fp)
 8004164:	1880022e 	bgeu	r3,r2,8004170 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8004168:	e0bffe17 	ldw	r2,-8(fp)
 800416c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004170:	e0bffc17 	ldw	r2,-16(fp)
 8004174:	10c00e04 	addi	r3,r2,56
 8004178:	e0bff817 	ldw	r2,-32(fp)
 800417c:	1885883a 	add	r2,r3,r2
 8004180:	e1bff617 	ldw	r6,-40(fp)
 8004184:	100b883a 	mov	r5,r2
 8004188:	e13ff517 	ldw	r4,-44(fp)
 800418c:	80017040 	call	8001704 <memcpy>
      ptr   += n;
 8004190:	e0fff517 	ldw	r3,-44(fp)
 8004194:	e0bff617 	ldw	r2,-40(fp)
 8004198:	1885883a 	add	r2,r3,r2
 800419c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80041a0:	e0fffe17 	ldw	r3,-8(fp)
 80041a4:	e0bff617 	ldw	r2,-40(fp)
 80041a8:	1885c83a 	sub	r2,r3,r2
 80041ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80041b0:	e0fff817 	ldw	r3,-32(fp)
 80041b4:	e0bff617 	ldw	r2,-40(fp)
 80041b8:	1885883a 	add	r2,r3,r2
 80041bc:	10c1ffcc 	andi	r3,r2,2047
 80041c0:	e0bffc17 	ldw	r2,-16(fp)
 80041c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80041c8:	e0bffe17 	ldw	r2,-8(fp)
 80041cc:	00bfcf16 	blt	zero,r2,800410c <__alt_data_end+0xf800410c>
 80041d0:	00000106 	br	80041d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80041d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80041d8:	e0fff517 	ldw	r3,-44(fp)
 80041dc:	e0bffd17 	ldw	r2,-12(fp)
 80041e0:	1880141e 	bne	r3,r2,8004234 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80041e4:	e0bfff17 	ldw	r2,-4(fp)
 80041e8:	1090000c 	andi	r2,r2,16384
 80041ec:	1000131e 	bne	r2,zero,800423c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80041f0:	0001883a 	nop
 80041f4:	e0bffc17 	ldw	r2,-16(fp)
 80041f8:	10c00a17 	ldw	r3,40(r2)
 80041fc:	e0bff717 	ldw	r2,-36(fp)
 8004200:	1880051e 	bne	r3,r2,8004218 <altera_avalon_jtag_uart_read+0x138>
 8004204:	e0bffc17 	ldw	r2,-16(fp)
 8004208:	10c00917 	ldw	r3,36(r2)
 800420c:	e0bffc17 	ldw	r2,-16(fp)
 8004210:	10800117 	ldw	r2,4(r2)
 8004214:	18bff736 	bltu	r3,r2,80041f4 <__alt_data_end+0xf80041f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004218:	e0bffc17 	ldw	r2,-16(fp)
 800421c:	10c00a17 	ldw	r3,40(r2)
 8004220:	e0bff717 	ldw	r2,-36(fp)
 8004224:	18800726 	beq	r3,r2,8004244 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004228:	e0bffe17 	ldw	r2,-8(fp)
 800422c:	00bfb716 	blt	zero,r2,800410c <__alt_data_end+0xf800410c>
 8004230:	00000506 	br	8004248 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8004234:	0001883a 	nop
 8004238:	00000306 	br	8004248 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800423c:	0001883a 	nop
 8004240:	00000106 	br	8004248 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8004244:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004248:	e0fff517 	ldw	r3,-44(fp)
 800424c:	e0bffd17 	ldw	r2,-12(fp)
 8004250:	18801826 	beq	r3,r2,80042b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004254:	0005303a 	rdctl	r2,status
 8004258:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800425c:	e0fffb17 	ldw	r3,-20(fp)
 8004260:	00bfff84 	movi	r2,-2
 8004264:	1884703a 	and	r2,r3,r2
 8004268:	1001703a 	wrctl	status,r2
  
  return context;
 800426c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004270:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004274:	e0bffc17 	ldw	r2,-16(fp)
 8004278:	10800817 	ldw	r2,32(r2)
 800427c:	10c00054 	ori	r3,r2,1
 8004280:	e0bffc17 	ldw	r2,-16(fp)
 8004284:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004288:	e0bffc17 	ldw	r2,-16(fp)
 800428c:	10800017 	ldw	r2,0(r2)
 8004290:	10800104 	addi	r2,r2,4
 8004294:	1007883a 	mov	r3,r2
 8004298:	e0bffc17 	ldw	r2,-16(fp)
 800429c:	10800817 	ldw	r2,32(r2)
 80042a0:	18800035 	stwio	r2,0(r3)
 80042a4:	e0bffa17 	ldw	r2,-24(fp)
 80042a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80042ac:	e0bff917 	ldw	r2,-28(fp)
 80042b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80042b4:	e0fff517 	ldw	r3,-44(fp)
 80042b8:	e0bffd17 	ldw	r2,-12(fp)
 80042bc:	18800426 	beq	r3,r2,80042d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80042c0:	e0fff517 	ldw	r3,-44(fp)
 80042c4:	e0bffd17 	ldw	r2,-12(fp)
 80042c8:	1885c83a 	sub	r2,r3,r2
 80042cc:	00000606 	br	80042e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80042d0:	e0bfff17 	ldw	r2,-4(fp)
 80042d4:	1090000c 	andi	r2,r2,16384
 80042d8:	10000226 	beq	r2,zero,80042e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80042dc:	00bffd44 	movi	r2,-11
 80042e0:	00000106 	br	80042e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80042e4:	00bffec4 	movi	r2,-5
}
 80042e8:	e037883a 	mov	sp,fp
 80042ec:	dfc00117 	ldw	ra,4(sp)
 80042f0:	df000017 	ldw	fp,0(sp)
 80042f4:	dec00204 	addi	sp,sp,8
 80042f8:	f800283a 	ret

080042fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80042fc:	defff304 	addi	sp,sp,-52
 8004300:	dfc00c15 	stw	ra,48(sp)
 8004304:	df000b15 	stw	fp,44(sp)
 8004308:	df000b04 	addi	fp,sp,44
 800430c:	e13ffc15 	stw	r4,-16(fp)
 8004310:	e17ffd15 	stw	r5,-12(fp)
 8004314:	e1bffe15 	stw	r6,-8(fp)
 8004318:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800431c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004320:	e0bffd17 	ldw	r2,-12(fp)
 8004324:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004328:	00003706 	br	8004408 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800432c:	e0bffc17 	ldw	r2,-16(fp)
 8004330:	10800c17 	ldw	r2,48(r2)
 8004334:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8004338:	e0bffc17 	ldw	r2,-16(fp)
 800433c:	10800d17 	ldw	r2,52(r2)
 8004340:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004344:	e0fff917 	ldw	r3,-28(fp)
 8004348:	e0bff517 	ldw	r2,-44(fp)
 800434c:	1880062e 	bgeu	r3,r2,8004368 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004350:	e0fff517 	ldw	r3,-44(fp)
 8004354:	e0bff917 	ldw	r2,-28(fp)
 8004358:	1885c83a 	sub	r2,r3,r2
 800435c:	10bfffc4 	addi	r2,r2,-1
 8004360:	e0bff615 	stw	r2,-40(fp)
 8004364:	00000b06 	br	8004394 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004368:	e0bff517 	ldw	r2,-44(fp)
 800436c:	10000526 	beq	r2,zero,8004384 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004370:	00c20004 	movi	r3,2048
 8004374:	e0bff917 	ldw	r2,-28(fp)
 8004378:	1885c83a 	sub	r2,r3,r2
 800437c:	e0bff615 	stw	r2,-40(fp)
 8004380:	00000406 	br	8004394 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004384:	00c1ffc4 	movi	r3,2047
 8004388:	e0bff917 	ldw	r2,-28(fp)
 800438c:	1885c83a 	sub	r2,r3,r2
 8004390:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004394:	e0bff617 	ldw	r2,-40(fp)
 8004398:	10001e26 	beq	r2,zero,8004414 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800439c:	e0fffe17 	ldw	r3,-8(fp)
 80043a0:	e0bff617 	ldw	r2,-40(fp)
 80043a4:	1880022e 	bgeu	r3,r2,80043b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80043a8:	e0bffe17 	ldw	r2,-8(fp)
 80043ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80043b0:	e0bffc17 	ldw	r2,-16(fp)
 80043b4:	10c20e04 	addi	r3,r2,2104
 80043b8:	e0bff917 	ldw	r2,-28(fp)
 80043bc:	1885883a 	add	r2,r3,r2
 80043c0:	e1bff617 	ldw	r6,-40(fp)
 80043c4:	e17ffd17 	ldw	r5,-12(fp)
 80043c8:	1009883a 	mov	r4,r2
 80043cc:	80017040 	call	8001704 <memcpy>
      ptr   += n;
 80043d0:	e0fffd17 	ldw	r3,-12(fp)
 80043d4:	e0bff617 	ldw	r2,-40(fp)
 80043d8:	1885883a 	add	r2,r3,r2
 80043dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80043e0:	e0fffe17 	ldw	r3,-8(fp)
 80043e4:	e0bff617 	ldw	r2,-40(fp)
 80043e8:	1885c83a 	sub	r2,r3,r2
 80043ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80043f0:	e0fff917 	ldw	r3,-28(fp)
 80043f4:	e0bff617 	ldw	r2,-40(fp)
 80043f8:	1885883a 	add	r2,r3,r2
 80043fc:	10c1ffcc 	andi	r3,r2,2047
 8004400:	e0bffc17 	ldw	r2,-16(fp)
 8004404:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004408:	e0bffe17 	ldw	r2,-8(fp)
 800440c:	00bfc716 	blt	zero,r2,800432c <__alt_data_end+0xf800432c>
 8004410:	00000106 	br	8004418 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8004414:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004418:	0005303a 	rdctl	r2,status
 800441c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004420:	e0fffb17 	ldw	r3,-20(fp)
 8004424:	00bfff84 	movi	r2,-2
 8004428:	1884703a 	and	r2,r3,r2
 800442c:	1001703a 	wrctl	status,r2
  
  return context;
 8004430:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004434:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004438:	e0bffc17 	ldw	r2,-16(fp)
 800443c:	10800817 	ldw	r2,32(r2)
 8004440:	10c00094 	ori	r3,r2,2
 8004444:	e0bffc17 	ldw	r2,-16(fp)
 8004448:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800444c:	e0bffc17 	ldw	r2,-16(fp)
 8004450:	10800017 	ldw	r2,0(r2)
 8004454:	10800104 	addi	r2,r2,4
 8004458:	1007883a 	mov	r3,r2
 800445c:	e0bffc17 	ldw	r2,-16(fp)
 8004460:	10800817 	ldw	r2,32(r2)
 8004464:	18800035 	stwio	r2,0(r3)
 8004468:	e0bffa17 	ldw	r2,-24(fp)
 800446c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004470:	e0bff817 	ldw	r2,-32(fp)
 8004474:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004478:	e0bffe17 	ldw	r2,-8(fp)
 800447c:	0080100e 	bge	zero,r2,80044c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8004480:	e0bfff17 	ldw	r2,-4(fp)
 8004484:	1090000c 	andi	r2,r2,16384
 8004488:	1000101e 	bne	r2,zero,80044cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800448c:	0001883a 	nop
 8004490:	e0bffc17 	ldw	r2,-16(fp)
 8004494:	10c00d17 	ldw	r3,52(r2)
 8004498:	e0bff517 	ldw	r2,-44(fp)
 800449c:	1880051e 	bne	r3,r2,80044b4 <altera_avalon_jtag_uart_write+0x1b8>
 80044a0:	e0bffc17 	ldw	r2,-16(fp)
 80044a4:	10c00917 	ldw	r3,36(r2)
 80044a8:	e0bffc17 	ldw	r2,-16(fp)
 80044ac:	10800117 	ldw	r2,4(r2)
 80044b0:	18bff736 	bltu	r3,r2,8004490 <__alt_data_end+0xf8004490>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80044b4:	e0bffc17 	ldw	r2,-16(fp)
 80044b8:	10800917 	ldw	r2,36(r2)
 80044bc:	1000051e 	bne	r2,zero,80044d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80044c0:	e0bffe17 	ldw	r2,-8(fp)
 80044c4:	00bfd016 	blt	zero,r2,8004408 <__alt_data_end+0xf8004408>
 80044c8:	00000306 	br	80044d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80044cc:	0001883a 	nop
 80044d0:	00000106 	br	80044d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80044d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80044d8:	e0fffd17 	ldw	r3,-12(fp)
 80044dc:	e0bff717 	ldw	r2,-36(fp)
 80044e0:	18800426 	beq	r3,r2,80044f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80044e4:	e0fffd17 	ldw	r3,-12(fp)
 80044e8:	e0bff717 	ldw	r2,-36(fp)
 80044ec:	1885c83a 	sub	r2,r3,r2
 80044f0:	00000606 	br	800450c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80044f4:	e0bfff17 	ldw	r2,-4(fp)
 80044f8:	1090000c 	andi	r2,r2,16384
 80044fc:	10000226 	beq	r2,zero,8004508 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8004500:	00bffd44 	movi	r2,-11
 8004504:	00000106 	br	800450c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8004508:	00bffec4 	movi	r2,-5
}
 800450c:	e037883a 	mov	sp,fp
 8004510:	dfc00117 	ldw	ra,4(sp)
 8004514:	df000017 	ldw	fp,0(sp)
 8004518:	dec00204 	addi	sp,sp,8
 800451c:	f800283a 	ret

08004520 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8004520:	defffa04 	addi	sp,sp,-24
 8004524:	dfc00515 	stw	ra,20(sp)
 8004528:	df000415 	stw	fp,16(sp)
 800452c:	df000404 	addi	fp,sp,16
 8004530:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8004534:	0007883a 	mov	r3,zero
 8004538:	e0bfff17 	ldw	r2,-4(fp)
 800453c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8004540:	e0bfff17 	ldw	r2,-4(fp)
 8004544:	10800104 	addi	r2,r2,4
 8004548:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800454c:	0005303a 	rdctl	r2,status
 8004550:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004554:	e0fffd17 	ldw	r3,-12(fp)
 8004558:	00bfff84 	movi	r2,-2
 800455c:	1884703a 	and	r2,r3,r2
 8004560:	1001703a 	wrctl	status,r2
  
  return context;
 8004564:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8004568:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800456c:	80055b00 	call	80055b0 <alt_tick>
 8004570:	e0bffc17 	ldw	r2,-16(fp)
 8004574:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004578:	e0bffe17 	ldw	r2,-8(fp)
 800457c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8004580:	0001883a 	nop
 8004584:	e037883a 	mov	sp,fp
 8004588:	dfc00117 	ldw	ra,4(sp)
 800458c:	df000017 	ldw	fp,0(sp)
 8004590:	dec00204 	addi	sp,sp,8
 8004594:	f800283a 	ret

08004598 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8004598:	defff804 	addi	sp,sp,-32
 800459c:	dfc00715 	stw	ra,28(sp)
 80045a0:	df000615 	stw	fp,24(sp)
 80045a4:	df000604 	addi	fp,sp,24
 80045a8:	e13ffc15 	stw	r4,-16(fp)
 80045ac:	e17ffd15 	stw	r5,-12(fp)
 80045b0:	e1bffe15 	stw	r6,-8(fp)
 80045b4:	e1ffff15 	stw	r7,-4(fp)
 80045b8:	e0bfff17 	ldw	r2,-4(fp)
 80045bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80045c0:	d0a6bc17 	ldw	r2,-25872(gp)
 80045c4:	1000021e 	bne	r2,zero,80045d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80045c8:	e0bffb17 	ldw	r2,-20(fp)
 80045cc:	d0a6bc15 	stw	r2,-25872(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80045d0:	e0bffc17 	ldw	r2,-16(fp)
 80045d4:	10800104 	addi	r2,r2,4
 80045d8:	00c001c4 	movi	r3,7
 80045dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80045e0:	d8000015 	stw	zero,0(sp)
 80045e4:	e1fffc17 	ldw	r7,-16(fp)
 80045e8:	01820034 	movhi	r6,2048
 80045ec:	31914804 	addi	r6,r6,17696
 80045f0:	e17ffe17 	ldw	r5,-8(fp)
 80045f4:	e13ffd17 	ldw	r4,-12(fp)
 80045f8:	8004ee00 	call	8004ee0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80045fc:	0001883a 	nop
 8004600:	e037883a 	mov	sp,fp
 8004604:	dfc00117 	ldw	ra,4(sp)
 8004608:	df000017 	ldw	fp,0(sp)
 800460c:	dec00204 	addi	sp,sp,8
 8004610:	f800283a 	ret

08004614 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8004614:	defffc04 	addi	sp,sp,-16
 8004618:	df000315 	stw	fp,12(sp)
 800461c:	df000304 	addi	fp,sp,12
 8004620:	e13ffe15 	stw	r4,-8(fp)
 8004624:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8004628:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800462c:	e0bfff17 	ldw	r2,-4(fp)
 8004630:	1000061e 	bne	r2,zero,800464c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8004634:	e0bffe17 	ldw	r2,-8(fp)
 8004638:	1007883a 	mov	r3,r2
 800463c:	e0bffd03 	ldbu	r2,-12(fp)
 8004640:	1884b03a 	or	r2,r3,r2
 8004644:	e0bffd05 	stb	r2,-12(fp)
 8004648:	00000806 	br	800466c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800464c:	e0bffe17 	ldw	r2,-8(fp)
 8004650:	1007883a 	mov	r3,r2
 8004654:	e0bffd03 	ldbu	r2,-12(fp)
 8004658:	1884b03a 	or	r2,r3,r2
 800465c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8004660:	e0bffd03 	ldbu	r2,-12(fp)
 8004664:	10801014 	ori	r2,r2,64
 8004668:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800466c:	e0fffd03 	ldbu	r3,-12(fp)
 8004670:	00bfe004 	movi	r2,-128
 8004674:	1884b03a 	or	r2,r3,r2
}
 8004678:	e037883a 	mov	sp,fp
 800467c:	df000017 	ldw	fp,0(sp)
 8004680:	dec00104 	addi	sp,sp,4
 8004684:	f800283a 	ret

08004688 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8004688:	defffd04 	addi	sp,sp,-12
 800468c:	df000215 	stw	fp,8(sp)
 8004690:	df000204 	addi	fp,sp,8
 8004694:	e13ffe15 	stw	r4,-8(fp)
 8004698:	2805883a 	mov	r2,r5
 800469c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80046a0:	e0bffe17 	ldw	r2,-8(fp)
 80046a4:	10800a17 	ldw	r2,40(r2)
 80046a8:	1007883a 	mov	r3,r2
 80046ac:	e0bfff03 	ldbu	r2,-4(fp)
 80046b0:	18800025 	stbio	r2,0(r3)
}
 80046b4:	0001883a 	nop
 80046b8:	e037883a 	mov	sp,fp
 80046bc:	df000017 	ldw	fp,0(sp)
 80046c0:	dec00104 	addi	sp,sp,4
 80046c4:	f800283a 	ret

080046c8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80046c8:	defffe04 	addi	sp,sp,-8
 80046cc:	df000115 	stw	fp,4(sp)
 80046d0:	df000104 	addi	fp,sp,4
 80046d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80046d8:	e0bfff17 	ldw	r2,-4(fp)
 80046dc:	10800a17 	ldw	r2,40(r2)
 80046e0:	1007883a 	mov	r3,r2
 80046e4:	00800044 	movi	r2,1
 80046e8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 80046ec:	0001883a 	nop
 80046f0:	e037883a 	mov	sp,fp
 80046f4:	df000017 	ldw	fp,0(sp)
 80046f8:	dec00104 	addi	sp,sp,4
 80046fc:	f800283a 	ret

08004700 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8004700:	defffc04 	addi	sp,sp,-16
 8004704:	dfc00315 	stw	ra,12(sp)
 8004708:	df000215 	stw	fp,8(sp)
 800470c:	df000204 	addi	fp,sp,8
 8004710:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8004714:	d1600604 	addi	r5,gp,-32744
 8004718:	e13fff17 	ldw	r4,-4(fp)
 800471c:	8004e1c0 	call	8004e1c <alt_find_dev>
 8004720:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8004724:	e0bffe17 	ldw	r2,-8(fp)
}
 8004728:	e037883a 	mov	sp,fp
 800472c:	dfc00117 	ldw	ra,4(sp)
 8004730:	df000017 	ldw	fp,0(sp)
 8004734:	dec00204 	addi	sp,sp,8
 8004738:	f800283a 	ret

0800473c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800473c:	defffb04 	addi	sp,sp,-20
 8004740:	df000415 	stw	fp,16(sp)
 8004744:	df000404 	addi	fp,sp,16
 8004748:	e13ffd15 	stw	r4,-12(fp)
 800474c:	e17ffe15 	stw	r5,-8(fp)
 8004750:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8004754:	e03ffc15 	stw	zero,-16(fp)
 8004758:	00000f06 	br	8004798 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800475c:	e0bffd17 	ldw	r2,-12(fp)
 8004760:	10800a17 	ldw	r2,40(r2)
 8004764:	10800044 	addi	r2,r2,1
 8004768:	1009883a 	mov	r4,r2
 800476c:	e0fffe17 	ldw	r3,-8(fp)
 8004770:	e0bffc17 	ldw	r2,-16(fp)
 8004774:	1885883a 	add	r2,r3,r2
 8004778:	10800003 	ldbu	r2,0(r2)
 800477c:	10803fcc 	andi	r2,r2,255
 8004780:	1080201c 	xori	r2,r2,128
 8004784:	10bfe004 	addi	r2,r2,-128
 8004788:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800478c:	e0bffc17 	ldw	r2,-16(fp)
 8004790:	10800044 	addi	r2,r2,1
 8004794:	e0bffc15 	stw	r2,-16(fp)
 8004798:	e0fffc17 	ldw	r3,-16(fp)
 800479c:	e0bfff17 	ldw	r2,-4(fp)
 80047a0:	18bfee36 	bltu	r3,r2,800475c <__alt_data_end+0xf800475c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 80047a4:	0001883a 	nop
 80047a8:	e037883a 	mov	sp,fp
 80047ac:	df000017 	ldw	fp,0(sp)
 80047b0:	dec00104 	addi	sp,sp,4
 80047b4:	f800283a 	ret

080047b8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 80047b8:	defffd04 	addi	sp,sp,-12
 80047bc:	df000215 	stw	fp,8(sp)
 80047c0:	df000204 	addi	fp,sp,8
 80047c4:	e13ffe15 	stw	r4,-8(fp)
 80047c8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 80047cc:	00000d06 	br	8004804 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80047d0:	e0bffe17 	ldw	r2,-8(fp)
 80047d4:	10800a17 	ldw	r2,40(r2)
 80047d8:	10800044 	addi	r2,r2,1
 80047dc:	1007883a 	mov	r3,r2
 80047e0:	e0bfff17 	ldw	r2,-4(fp)
 80047e4:	10800003 	ldbu	r2,0(r2)
 80047e8:	10803fcc 	andi	r2,r2,255
 80047ec:	1080201c 	xori	r2,r2,128
 80047f0:	10bfe004 	addi	r2,r2,-128
 80047f4:	18800025 	stbio	r2,0(r3)
		++ptr;
 80047f8:	e0bfff17 	ldw	r2,-4(fp)
 80047fc:	10800044 	addi	r2,r2,1
 8004800:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8004804:	e0bfff17 	ldw	r2,-4(fp)
 8004808:	10800003 	ldbu	r2,0(r2)
 800480c:	10803fcc 	andi	r2,r2,255
 8004810:	1080201c 	xori	r2,r2,128
 8004814:	10bfe004 	addi	r2,r2,-128
 8004818:	103fed1e 	bne	r2,zero,80047d0 <__alt_data_end+0xf80047d0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800481c:	0001883a 	nop
 8004820:	e037883a 	mov	sp,fp
 8004824:	df000017 	ldw	fp,0(sp)
 8004828:	dec00104 	addi	sp,sp,4
 800482c:	f800283a 	ret

08004830 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8004830:	defffb04 	addi	sp,sp,-20
 8004834:	dfc00415 	stw	ra,16(sp)
 8004838:	df000315 	stw	fp,12(sp)
 800483c:	df000304 	addi	fp,sp,12
 8004840:	e13ffd15 	stw	r4,-12(fp)
 8004844:	e17ffe15 	stw	r5,-8(fp)
 8004848:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800484c:	e0bffd17 	ldw	r2,-12(fp)
 8004850:	10800017 	ldw	r2,0(r2)
 8004854:	e0ffff17 	ldw	r3,-4(fp)
 8004858:	180d883a 	mov	r6,r3
 800485c:	e17ffe17 	ldw	r5,-8(fp)
 8004860:	1009883a 	mov	r4,r2
 8004864:	800473c0 	call	800473c <alt_up_character_lcd_write>
	return 0;
 8004868:	0005883a 	mov	r2,zero
}
 800486c:	e037883a 	mov	sp,fp
 8004870:	dfc00117 	ldw	ra,4(sp)
 8004874:	df000017 	ldw	fp,0(sp)
 8004878:	dec00204 	addi	sp,sp,8
 800487c:	f800283a 	ret

08004880 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8004880:	defffa04 	addi	sp,sp,-24
 8004884:	dfc00515 	stw	ra,20(sp)
 8004888:	df000415 	stw	fp,16(sp)
 800488c:	df000404 	addi	fp,sp,16
 8004890:	e13ffd15 	stw	r4,-12(fp)
 8004894:	e17ffe15 	stw	r5,-8(fp)
 8004898:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800489c:	e0bffe17 	ldw	r2,-8(fp)
 80048a0:	10800a28 	cmpgeui	r2,r2,40
 80048a4:	1000031e 	bne	r2,zero,80048b4 <alt_up_character_lcd_set_cursor_pos+0x34>
 80048a8:	e0bfff17 	ldw	r2,-4(fp)
 80048ac:	108000b0 	cmpltui	r2,r2,2
 80048b0:	1000021e 	bne	r2,zero,80048bc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 80048b4:	00bfffc4 	movi	r2,-1
 80048b8:	00000906 	br	80048e0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 80048bc:	e17fff17 	ldw	r5,-4(fp)
 80048c0:	e13ffe17 	ldw	r4,-8(fp)
 80048c4:	80046140 	call	8004614 <get_DDRAM_addr>
 80048c8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 80048cc:	e0bffc03 	ldbu	r2,-16(fp)
 80048d0:	100b883a 	mov	r5,r2
 80048d4:	e13ffd17 	ldw	r4,-12(fp)
 80048d8:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
	return 0;
 80048dc:	0005883a 	mov	r2,zero
}
 80048e0:	e037883a 	mov	sp,fp
 80048e4:	dfc00117 	ldw	ra,4(sp)
 80048e8:	df000017 	ldw	fp,0(sp)
 80048ec:	dec00204 	addi	sp,sp,8
 80048f0:	f800283a 	ret

080048f4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80048f4:	defffb04 	addi	sp,sp,-20
 80048f8:	dfc00415 	stw	ra,16(sp)
 80048fc:	df000315 	stw	fp,12(sp)
 8004900:	df000304 	addi	fp,sp,12
 8004904:	e13ffe15 	stw	r4,-8(fp)
 8004908:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800490c:	e0bfff17 	ldw	r2,-4(fp)
 8004910:	10001526 	beq	r2,zero,8004968 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8004914:	e0bfff17 	ldw	r2,-4(fp)
 8004918:	0080020e 	bge	zero,r2,8004924 <alt_up_character_lcd_shift_cursor+0x30>
 800491c:	00800504 	movi	r2,20
 8004920:	00000106 	br	8004928 <alt_up_character_lcd_shift_cursor+0x34>
 8004924:	00800404 	movi	r2,16
 8004928:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800492c:	e0bfff17 	ldw	r2,-4(fp)
 8004930:	1000010e 	bge	r2,zero,8004938 <alt_up_character_lcd_shift_cursor+0x44>
 8004934:	0085c83a 	sub	r2,zero,r2
 8004938:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800493c:	00000406 	br	8004950 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8004940:	e0bffd43 	ldbu	r2,-11(fp)
 8004944:	100b883a 	mov	r5,r2
 8004948:	e13ffe17 	ldw	r4,-8(fp)
 800494c:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8004950:	e0bffd03 	ldbu	r2,-12(fp)
 8004954:	10ffffc4 	addi	r3,r2,-1
 8004958:	e0fffd05 	stb	r3,-12(fp)
 800495c:	10803fcc 	andi	r2,r2,255
 8004960:	103ff71e 	bne	r2,zero,8004940 <__alt_data_end+0xf8004940>
 8004964:	00000106 	br	800496c <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 8004968:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800496c:	e037883a 	mov	sp,fp
 8004970:	dfc00117 	ldw	ra,4(sp)
 8004974:	df000017 	ldw	fp,0(sp)
 8004978:	dec00204 	addi	sp,sp,8
 800497c:	f800283a 	ret

08004980 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8004980:	defffb04 	addi	sp,sp,-20
 8004984:	dfc00415 	stw	ra,16(sp)
 8004988:	df000315 	stw	fp,12(sp)
 800498c:	df000304 	addi	fp,sp,12
 8004990:	e13ffe15 	stw	r4,-8(fp)
 8004994:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8004998:	e0bfff17 	ldw	r2,-4(fp)
 800499c:	10001526 	beq	r2,zero,80049f4 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80049a0:	e0bfff17 	ldw	r2,-4(fp)
 80049a4:	0080020e 	bge	zero,r2,80049b0 <alt_up_character_lcd_shift_display+0x30>
 80049a8:	00800704 	movi	r2,28
 80049ac:	00000106 	br	80049b4 <alt_up_character_lcd_shift_display+0x34>
 80049b0:	00800604 	movi	r2,24
 80049b4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80049b8:	e0bfff17 	ldw	r2,-4(fp)
 80049bc:	1000010e 	bge	r2,zero,80049c4 <alt_up_character_lcd_shift_display+0x44>
 80049c0:	0085c83a 	sub	r2,zero,r2
 80049c4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80049c8:	00000406 	br	80049dc <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80049cc:	e0bffd43 	ldbu	r2,-11(fp)
 80049d0:	100b883a 	mov	r5,r2
 80049d4:	e13ffe17 	ldw	r4,-8(fp)
 80049d8:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80049dc:	e0bffd03 	ldbu	r2,-12(fp)
 80049e0:	10ffffc4 	addi	r3,r2,-1
 80049e4:	e0fffd05 	stb	r3,-12(fp)
 80049e8:	10803fcc 	andi	r2,r2,255
 80049ec:	103ff71e 	bne	r2,zero,80049cc <__alt_data_end+0xf80049cc>
 80049f0:	00000106 	br	80049f8 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 80049f4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80049f8:	e037883a 	mov	sp,fp
 80049fc:	dfc00117 	ldw	ra,4(sp)
 8004a00:	df000017 	ldw	fp,0(sp)
 8004a04:	dec00204 	addi	sp,sp,8
 8004a08:	f800283a 	ret

08004a0c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8004a0c:	defffa04 	addi	sp,sp,-24
 8004a10:	dfc00515 	stw	ra,20(sp)
 8004a14:	df000415 	stw	fp,16(sp)
 8004a18:	df000404 	addi	fp,sp,16
 8004a1c:	e13ffd15 	stw	r4,-12(fp)
 8004a20:	e17ffe15 	stw	r5,-8(fp)
 8004a24:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8004a28:	e0bffe17 	ldw	r2,-8(fp)
 8004a2c:	10800a28 	cmpgeui	r2,r2,40
 8004a30:	1000031e 	bne	r2,zero,8004a40 <alt_up_character_lcd_erase_pos+0x34>
 8004a34:	e0bfff17 	ldw	r2,-4(fp)
 8004a38:	108000b0 	cmpltui	r2,r2,2
 8004a3c:	1000021e 	bne	r2,zero,8004a48 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8004a40:	00bfffc4 	movi	r2,-1
 8004a44:	00000f06 	br	8004a84 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8004a48:	e17fff17 	ldw	r5,-4(fp)
 8004a4c:	e13ffe17 	ldw	r4,-8(fp)
 8004a50:	80046140 	call	8004614 <get_DDRAM_addr>
 8004a54:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8004a58:	e0bffc03 	ldbu	r2,-16(fp)
 8004a5c:	100b883a 	mov	r5,r2
 8004a60:	e13ffd17 	ldw	r4,-12(fp)
 8004a64:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8004a68:	e0bffd17 	ldw	r2,-12(fp)
 8004a6c:	10800a17 	ldw	r2,40(r2)
 8004a70:	10800044 	addi	r2,r2,1
 8004a74:	1007883a 	mov	r3,r2
 8004a78:	00800084 	movi	r2,2
 8004a7c:	18800025 	stbio	r2,0(r3)
	return 0;
 8004a80:	0005883a 	mov	r2,zero
}
 8004a84:	e037883a 	mov	sp,fp
 8004a88:	dfc00117 	ldw	ra,4(sp)
 8004a8c:	df000017 	ldw	fp,0(sp)
 8004a90:	dec00204 	addi	sp,sp,8
 8004a94:	f800283a 	ret

08004a98 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8004a98:	defffd04 	addi	sp,sp,-12
 8004a9c:	dfc00215 	stw	ra,8(sp)
 8004aa0:	df000115 	stw	fp,4(sp)
 8004aa4:	df000104 	addi	fp,sp,4
 8004aa8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8004aac:	01400304 	movi	r5,12
 8004ab0:	e13fff17 	ldw	r4,-4(fp)
 8004ab4:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
}
 8004ab8:	0001883a 	nop
 8004abc:	e037883a 	mov	sp,fp
 8004ac0:	dfc00117 	ldw	ra,4(sp)
 8004ac4:	df000017 	ldw	fp,0(sp)
 8004ac8:	dec00204 	addi	sp,sp,8
 8004acc:	f800283a 	ret

08004ad0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8004ad0:	defffd04 	addi	sp,sp,-12
 8004ad4:	dfc00215 	stw	ra,8(sp)
 8004ad8:	df000115 	stw	fp,4(sp)
 8004adc:	df000104 	addi	fp,sp,4
 8004ae0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8004ae4:	014003c4 	movi	r5,15
 8004ae8:	e13fff17 	ldw	r4,-4(fp)
 8004aec:	80046880 	call	8004688 <alt_up_character_lcd_send_cmd>
}
 8004af0:	0001883a 	nop
 8004af4:	e037883a 	mov	sp,fp
 8004af8:	dfc00117 	ldw	ra,4(sp)
 8004afc:	df000017 	ldw	fp,0(sp)
 8004b00:	dec00204 	addi	sp,sp,8
 8004b04:	f800283a 	ret

08004b08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8004b08:	defff504 	addi	sp,sp,-44
 8004b0c:	df000a15 	stw	fp,40(sp)
 8004b10:	df000a04 	addi	fp,sp,40
 8004b14:	e13ffc15 	stw	r4,-16(fp)
 8004b18:	e17ffd15 	stw	r5,-12(fp)
 8004b1c:	e1bffe15 	stw	r6,-8(fp)
 8004b20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8004b24:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004b28:	d0a6bc17 	ldw	r2,-25872(gp)
  
  if (alt_ticks_per_second ())
 8004b2c:	10003c26 	beq	r2,zero,8004c20 <alt_alarm_start+0x118>
  {
    if (alarm)
 8004b30:	e0bffc17 	ldw	r2,-16(fp)
 8004b34:	10003826 	beq	r2,zero,8004c18 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8004b38:	e0bffc17 	ldw	r2,-16(fp)
 8004b3c:	e0fffe17 	ldw	r3,-8(fp)
 8004b40:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8004b44:	e0bffc17 	ldw	r2,-16(fp)
 8004b48:	e0ffff17 	ldw	r3,-4(fp)
 8004b4c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004b50:	0005303a 	rdctl	r2,status
 8004b54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004b58:	e0fff917 	ldw	r3,-28(fp)
 8004b5c:	00bfff84 	movi	r2,-2
 8004b60:	1884703a 	and	r2,r3,r2
 8004b64:	1001703a 	wrctl	status,r2
  
  return context;
 8004b68:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8004b6c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004b70:	d0a6bd17 	ldw	r2,-25868(gp)
      
      current_nticks = alt_nticks();
 8004b74:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8004b78:	e0fffd17 	ldw	r3,-12(fp)
 8004b7c:	e0bff617 	ldw	r2,-40(fp)
 8004b80:	1885883a 	add	r2,r3,r2
 8004b84:	10c00044 	addi	r3,r2,1
 8004b88:	e0bffc17 	ldw	r2,-16(fp)
 8004b8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8004b90:	e0bffc17 	ldw	r2,-16(fp)
 8004b94:	10c00217 	ldw	r3,8(r2)
 8004b98:	e0bff617 	ldw	r2,-40(fp)
 8004b9c:	1880042e 	bgeu	r3,r2,8004bb0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8004ba0:	e0bffc17 	ldw	r2,-16(fp)
 8004ba4:	00c00044 	movi	r3,1
 8004ba8:	10c00405 	stb	r3,16(r2)
 8004bac:	00000206 	br	8004bb8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8004bb0:	e0bffc17 	ldw	r2,-16(fp)
 8004bb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8004bb8:	e0bffc17 	ldw	r2,-16(fp)
 8004bbc:	d0e00c04 	addi	r3,gp,-32720
 8004bc0:	e0fffa15 	stw	r3,-24(fp)
 8004bc4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004bc8:	e0bffb17 	ldw	r2,-20(fp)
 8004bcc:	e0fffa17 	ldw	r3,-24(fp)
 8004bd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004bd4:	e0bffa17 	ldw	r2,-24(fp)
 8004bd8:	10c00017 	ldw	r3,0(r2)
 8004bdc:	e0bffb17 	ldw	r2,-20(fp)
 8004be0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004be4:	e0bffa17 	ldw	r2,-24(fp)
 8004be8:	10800017 	ldw	r2,0(r2)
 8004bec:	e0fffb17 	ldw	r3,-20(fp)
 8004bf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004bf4:	e0bffa17 	ldw	r2,-24(fp)
 8004bf8:	e0fffb17 	ldw	r3,-20(fp)
 8004bfc:	10c00015 	stw	r3,0(r2)
 8004c00:	e0bff817 	ldw	r2,-32(fp)
 8004c04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004c08:	e0bff717 	ldw	r2,-36(fp)
 8004c0c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8004c10:	0005883a 	mov	r2,zero
 8004c14:	00000306 	br	8004c24 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8004c18:	00bffa84 	movi	r2,-22
 8004c1c:	00000106 	br	8004c24 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8004c20:	00bfde84 	movi	r2,-134
  }
}
 8004c24:	e037883a 	mov	sp,fp
 8004c28:	df000017 	ldw	fp,0(sp)
 8004c2c:	dec00104 	addi	sp,sp,4
 8004c30:	f800283a 	ret

08004c34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8004c34:	defffe04 	addi	sp,sp,-8
 8004c38:	df000115 	stw	fp,4(sp)
 8004c3c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8004c40:	e03fff15 	stw	zero,-4(fp)
 8004c44:	00000506 	br	8004c5c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8004c48:	e0bfff17 	ldw	r2,-4(fp)
 8004c4c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8004c50:	e0bfff17 	ldw	r2,-4(fp)
 8004c54:	10800804 	addi	r2,r2,32
 8004c58:	e0bfff15 	stw	r2,-4(fp)
 8004c5c:	e0bfff17 	ldw	r2,-4(fp)
 8004c60:	10820030 	cmpltui	r2,r2,2048
 8004c64:	103ff81e 	bne	r2,zero,8004c48 <__alt_data_end+0xf8004c48>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004c68:	0001883a 	nop
 8004c6c:	e037883a 	mov	sp,fp
 8004c70:	df000017 	ldw	fp,0(sp)
 8004c74:	dec00104 	addi	sp,sp,4
 8004c78:	f800283a 	ret

08004c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004c7c:	defffe04 	addi	sp,sp,-8
 8004c80:	dfc00115 	stw	ra,4(sp)
 8004c84:	df000015 	stw	fp,0(sp)
 8004c88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004c8c:	d0a00917 	ldw	r2,-32732(gp)
 8004c90:	10000326 	beq	r2,zero,8004ca0 <alt_get_errno+0x24>
 8004c94:	d0a00917 	ldw	r2,-32732(gp)
 8004c98:	103ee83a 	callr	r2
 8004c9c:	00000106 	br	8004ca4 <alt_get_errno+0x28>
 8004ca0:	d0a6b704 	addi	r2,gp,-25892
}
 8004ca4:	e037883a 	mov	sp,fp
 8004ca8:	dfc00117 	ldw	ra,4(sp)
 8004cac:	df000017 	ldw	fp,0(sp)
 8004cb0:	dec00204 	addi	sp,sp,8
 8004cb4:	f800283a 	ret

08004cb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004cb8:	defffa04 	addi	sp,sp,-24
 8004cbc:	dfc00515 	stw	ra,20(sp)
 8004cc0:	df000415 	stw	fp,16(sp)
 8004cc4:	df000404 	addi	fp,sp,16
 8004cc8:	e13ffe15 	stw	r4,-8(fp)
 8004ccc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8004cd0:	e0bffe17 	ldw	r2,-8(fp)
 8004cd4:	10000326 	beq	r2,zero,8004ce4 <alt_dev_llist_insert+0x2c>
 8004cd8:	e0bffe17 	ldw	r2,-8(fp)
 8004cdc:	10800217 	ldw	r2,8(r2)
 8004ce0:	1000061e 	bne	r2,zero,8004cfc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8004ce4:	8004c7c0 	call	8004c7c <alt_get_errno>
 8004ce8:	1007883a 	mov	r3,r2
 8004cec:	00800584 	movi	r2,22
 8004cf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8004cf4:	00bffa84 	movi	r2,-22
 8004cf8:	00001306 	br	8004d48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8004cfc:	e0bffe17 	ldw	r2,-8(fp)
 8004d00:	e0ffff17 	ldw	r3,-4(fp)
 8004d04:	e0fffc15 	stw	r3,-16(fp)
 8004d08:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004d0c:	e0bffd17 	ldw	r2,-12(fp)
 8004d10:	e0fffc17 	ldw	r3,-16(fp)
 8004d14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004d18:	e0bffc17 	ldw	r2,-16(fp)
 8004d1c:	10c00017 	ldw	r3,0(r2)
 8004d20:	e0bffd17 	ldw	r2,-12(fp)
 8004d24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004d28:	e0bffc17 	ldw	r2,-16(fp)
 8004d2c:	10800017 	ldw	r2,0(r2)
 8004d30:	e0fffd17 	ldw	r3,-12(fp)
 8004d34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004d38:	e0bffc17 	ldw	r2,-16(fp)
 8004d3c:	e0fffd17 	ldw	r3,-12(fp)
 8004d40:	10c00015 	stw	r3,0(r2)

  return 0;  
 8004d44:	0005883a 	mov	r2,zero
}
 8004d48:	e037883a 	mov	sp,fp
 8004d4c:	dfc00117 	ldw	ra,4(sp)
 8004d50:	df000017 	ldw	fp,0(sp)
 8004d54:	dec00204 	addi	sp,sp,8
 8004d58:	f800283a 	ret

08004d5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004d5c:	defffd04 	addi	sp,sp,-12
 8004d60:	dfc00215 	stw	ra,8(sp)
 8004d64:	df000115 	stw	fp,4(sp)
 8004d68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004d6c:	00820034 	movhi	r2,2048
 8004d70:	10975104 	addi	r2,r2,23876
 8004d74:	e0bfff15 	stw	r2,-4(fp)
 8004d78:	00000606 	br	8004d94 <_do_ctors+0x38>
        (*ctor) (); 
 8004d7c:	e0bfff17 	ldw	r2,-4(fp)
 8004d80:	10800017 	ldw	r2,0(r2)
 8004d84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004d88:	e0bfff17 	ldw	r2,-4(fp)
 8004d8c:	10bfff04 	addi	r2,r2,-4
 8004d90:	e0bfff15 	stw	r2,-4(fp)
 8004d94:	e0ffff17 	ldw	r3,-4(fp)
 8004d98:	00820034 	movhi	r2,2048
 8004d9c:	10975204 	addi	r2,r2,23880
 8004da0:	18bff62e 	bgeu	r3,r2,8004d7c <__alt_data_end+0xf8004d7c>
        (*ctor) (); 
}
 8004da4:	0001883a 	nop
 8004da8:	e037883a 	mov	sp,fp
 8004dac:	dfc00117 	ldw	ra,4(sp)
 8004db0:	df000017 	ldw	fp,0(sp)
 8004db4:	dec00204 	addi	sp,sp,8
 8004db8:	f800283a 	ret

08004dbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004dbc:	defffd04 	addi	sp,sp,-12
 8004dc0:	dfc00215 	stw	ra,8(sp)
 8004dc4:	df000115 	stw	fp,4(sp)
 8004dc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004dcc:	00820034 	movhi	r2,2048
 8004dd0:	10975104 	addi	r2,r2,23876
 8004dd4:	e0bfff15 	stw	r2,-4(fp)
 8004dd8:	00000606 	br	8004df4 <_do_dtors+0x38>
        (*dtor) (); 
 8004ddc:	e0bfff17 	ldw	r2,-4(fp)
 8004de0:	10800017 	ldw	r2,0(r2)
 8004de4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004de8:	e0bfff17 	ldw	r2,-4(fp)
 8004dec:	10bfff04 	addi	r2,r2,-4
 8004df0:	e0bfff15 	stw	r2,-4(fp)
 8004df4:	e0ffff17 	ldw	r3,-4(fp)
 8004df8:	00820034 	movhi	r2,2048
 8004dfc:	10975204 	addi	r2,r2,23880
 8004e00:	18bff62e 	bgeu	r3,r2,8004ddc <__alt_data_end+0xf8004ddc>
        (*dtor) (); 
}
 8004e04:	0001883a 	nop
 8004e08:	e037883a 	mov	sp,fp
 8004e0c:	dfc00117 	ldw	ra,4(sp)
 8004e10:	df000017 	ldw	fp,0(sp)
 8004e14:	dec00204 	addi	sp,sp,8
 8004e18:	f800283a 	ret

08004e1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004e1c:	defffa04 	addi	sp,sp,-24
 8004e20:	dfc00515 	stw	ra,20(sp)
 8004e24:	df000415 	stw	fp,16(sp)
 8004e28:	df000404 	addi	fp,sp,16
 8004e2c:	e13ffe15 	stw	r4,-8(fp)
 8004e30:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004e34:	e0bfff17 	ldw	r2,-4(fp)
 8004e38:	10800017 	ldw	r2,0(r2)
 8004e3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004e40:	e13ffe17 	ldw	r4,-8(fp)
 8004e44:	80003980 	call	8000398 <strlen>
 8004e48:	10800044 	addi	r2,r2,1
 8004e4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004e50:	00000d06 	br	8004e88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004e54:	e0bffc17 	ldw	r2,-16(fp)
 8004e58:	10800217 	ldw	r2,8(r2)
 8004e5c:	e0fffd17 	ldw	r3,-12(fp)
 8004e60:	180d883a 	mov	r6,r3
 8004e64:	e17ffe17 	ldw	r5,-8(fp)
 8004e68:	1009883a 	mov	r4,r2
 8004e6c:	8005a000 	call	8005a00 <memcmp>
 8004e70:	1000021e 	bne	r2,zero,8004e7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004e74:	e0bffc17 	ldw	r2,-16(fp)
 8004e78:	00000706 	br	8004e98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004e7c:	e0bffc17 	ldw	r2,-16(fp)
 8004e80:	10800017 	ldw	r2,0(r2)
 8004e84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004e88:	e0fffc17 	ldw	r3,-16(fp)
 8004e8c:	e0bfff17 	ldw	r2,-4(fp)
 8004e90:	18bff01e 	bne	r3,r2,8004e54 <__alt_data_end+0xf8004e54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004e94:	0005883a 	mov	r2,zero
}
 8004e98:	e037883a 	mov	sp,fp
 8004e9c:	dfc00117 	ldw	ra,4(sp)
 8004ea0:	df000017 	ldw	fp,0(sp)
 8004ea4:	dec00204 	addi	sp,sp,8
 8004ea8:	f800283a 	ret

08004eac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8004eac:	defffe04 	addi	sp,sp,-8
 8004eb0:	dfc00115 	stw	ra,4(sp)
 8004eb4:	df000015 	stw	fp,0(sp)
 8004eb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8004ebc:	01440004 	movi	r5,4096
 8004ec0:	0009883a 	mov	r4,zero
 8004ec4:	80058880 	call	8005888 <alt_icache_flush>
#endif
}
 8004ec8:	0001883a 	nop
 8004ecc:	e037883a 	mov	sp,fp
 8004ed0:	dfc00117 	ldw	ra,4(sp)
 8004ed4:	df000017 	ldw	fp,0(sp)
 8004ed8:	dec00204 	addi	sp,sp,8
 8004edc:	f800283a 	ret

08004ee0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004ee0:	defff904 	addi	sp,sp,-28
 8004ee4:	dfc00615 	stw	ra,24(sp)
 8004ee8:	df000515 	stw	fp,20(sp)
 8004eec:	df000504 	addi	fp,sp,20
 8004ef0:	e13ffc15 	stw	r4,-16(fp)
 8004ef4:	e17ffd15 	stw	r5,-12(fp)
 8004ef8:	e1bffe15 	stw	r6,-8(fp)
 8004efc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8004f00:	e0800217 	ldw	r2,8(fp)
 8004f04:	d8800015 	stw	r2,0(sp)
 8004f08:	e1ffff17 	ldw	r7,-4(fp)
 8004f0c:	e1bffe17 	ldw	r6,-8(fp)
 8004f10:	e17ffd17 	ldw	r5,-12(fp)
 8004f14:	e13ffc17 	ldw	r4,-16(fp)
 8004f18:	80050900 	call	8005090 <alt_iic_isr_register>
}  
 8004f1c:	e037883a 	mov	sp,fp
 8004f20:	dfc00117 	ldw	ra,4(sp)
 8004f24:	df000017 	ldw	fp,0(sp)
 8004f28:	dec00204 	addi	sp,sp,8
 8004f2c:	f800283a 	ret

08004f30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8004f30:	defff904 	addi	sp,sp,-28
 8004f34:	df000615 	stw	fp,24(sp)
 8004f38:	df000604 	addi	fp,sp,24
 8004f3c:	e13ffe15 	stw	r4,-8(fp)
 8004f40:	e17fff15 	stw	r5,-4(fp)
 8004f44:	e0bfff17 	ldw	r2,-4(fp)
 8004f48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004f4c:	0005303a 	rdctl	r2,status
 8004f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004f54:	e0fffb17 	ldw	r3,-20(fp)
 8004f58:	00bfff84 	movi	r2,-2
 8004f5c:	1884703a 	and	r2,r3,r2
 8004f60:	1001703a 	wrctl	status,r2
  
  return context;
 8004f64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004f68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8004f6c:	00c00044 	movi	r3,1
 8004f70:	e0bffa17 	ldw	r2,-24(fp)
 8004f74:	1884983a 	sll	r2,r3,r2
 8004f78:	1007883a 	mov	r3,r2
 8004f7c:	d0a6bb17 	ldw	r2,-25876(gp)
 8004f80:	1884b03a 	or	r2,r3,r2
 8004f84:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004f88:	d0a6bb17 	ldw	r2,-25876(gp)
 8004f8c:	100170fa 	wrctl	ienable,r2
 8004f90:	e0bffc17 	ldw	r2,-16(fp)
 8004f94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004f98:	e0bffd17 	ldw	r2,-12(fp)
 8004f9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004fa0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8004fa4:	0001883a 	nop
}
 8004fa8:	e037883a 	mov	sp,fp
 8004fac:	df000017 	ldw	fp,0(sp)
 8004fb0:	dec00104 	addi	sp,sp,4
 8004fb4:	f800283a 	ret

08004fb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8004fb8:	defff904 	addi	sp,sp,-28
 8004fbc:	df000615 	stw	fp,24(sp)
 8004fc0:	df000604 	addi	fp,sp,24
 8004fc4:	e13ffe15 	stw	r4,-8(fp)
 8004fc8:	e17fff15 	stw	r5,-4(fp)
 8004fcc:	e0bfff17 	ldw	r2,-4(fp)
 8004fd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004fd4:	0005303a 	rdctl	r2,status
 8004fd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004fdc:	e0fffb17 	ldw	r3,-20(fp)
 8004fe0:	00bfff84 	movi	r2,-2
 8004fe4:	1884703a 	and	r2,r3,r2
 8004fe8:	1001703a 	wrctl	status,r2
  
  return context;
 8004fec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004ff0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8004ff4:	00c00044 	movi	r3,1
 8004ff8:	e0bffa17 	ldw	r2,-24(fp)
 8004ffc:	1884983a 	sll	r2,r3,r2
 8005000:	0084303a 	nor	r2,zero,r2
 8005004:	1007883a 	mov	r3,r2
 8005008:	d0a6bb17 	ldw	r2,-25876(gp)
 800500c:	1884703a 	and	r2,r3,r2
 8005010:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005014:	d0a6bb17 	ldw	r2,-25876(gp)
 8005018:	100170fa 	wrctl	ienable,r2
 800501c:	e0bffc17 	ldw	r2,-16(fp)
 8005020:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005024:	e0bffd17 	ldw	r2,-12(fp)
 8005028:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800502c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8005030:	0001883a 	nop
}
 8005034:	e037883a 	mov	sp,fp
 8005038:	df000017 	ldw	fp,0(sp)
 800503c:	dec00104 	addi	sp,sp,4
 8005040:	f800283a 	ret

08005044 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8005044:	defffc04 	addi	sp,sp,-16
 8005048:	df000315 	stw	fp,12(sp)
 800504c:	df000304 	addi	fp,sp,12
 8005050:	e13ffe15 	stw	r4,-8(fp)
 8005054:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8005058:	000530fa 	rdctl	r2,ienable
 800505c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8005060:	00c00044 	movi	r3,1
 8005064:	e0bfff17 	ldw	r2,-4(fp)
 8005068:	1884983a 	sll	r2,r3,r2
 800506c:	1007883a 	mov	r3,r2
 8005070:	e0bffd17 	ldw	r2,-12(fp)
 8005074:	1884703a 	and	r2,r3,r2
 8005078:	1004c03a 	cmpne	r2,r2,zero
 800507c:	10803fcc 	andi	r2,r2,255
}
 8005080:	e037883a 	mov	sp,fp
 8005084:	df000017 	ldw	fp,0(sp)
 8005088:	dec00104 	addi	sp,sp,4
 800508c:	f800283a 	ret

08005090 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005090:	defff504 	addi	sp,sp,-44
 8005094:	dfc00a15 	stw	ra,40(sp)
 8005098:	df000915 	stw	fp,36(sp)
 800509c:	df000904 	addi	fp,sp,36
 80050a0:	e13ffc15 	stw	r4,-16(fp)
 80050a4:	e17ffd15 	stw	r5,-12(fp)
 80050a8:	e1bffe15 	stw	r6,-8(fp)
 80050ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80050b0:	00bffa84 	movi	r2,-22
 80050b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80050b8:	e0bffd17 	ldw	r2,-12(fp)
 80050bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80050c0:	e0bff817 	ldw	r2,-32(fp)
 80050c4:	10800808 	cmpgei	r2,r2,32
 80050c8:	1000271e 	bne	r2,zero,8005168 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80050cc:	0005303a 	rdctl	r2,status
 80050d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80050d4:	e0fffb17 	ldw	r3,-20(fp)
 80050d8:	00bfff84 	movi	r2,-2
 80050dc:	1884703a 	and	r2,r3,r2
 80050e0:	1001703a 	wrctl	status,r2
  
  return context;
 80050e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80050e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80050ec:	00820074 	movhi	r2,2049
 80050f0:	10a4ca04 	addi	r2,r2,-27864
 80050f4:	e0fff817 	ldw	r3,-32(fp)
 80050f8:	180690fa 	slli	r3,r3,3
 80050fc:	10c5883a 	add	r2,r2,r3
 8005100:	e0fffe17 	ldw	r3,-8(fp)
 8005104:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8005108:	00820074 	movhi	r2,2049
 800510c:	10a4ca04 	addi	r2,r2,-27864
 8005110:	e0fff817 	ldw	r3,-32(fp)
 8005114:	180690fa 	slli	r3,r3,3
 8005118:	10c5883a 	add	r2,r2,r3
 800511c:	10800104 	addi	r2,r2,4
 8005120:	e0ffff17 	ldw	r3,-4(fp)
 8005124:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8005128:	e0bffe17 	ldw	r2,-8(fp)
 800512c:	10000526 	beq	r2,zero,8005144 <alt_iic_isr_register+0xb4>
 8005130:	e0bff817 	ldw	r2,-32(fp)
 8005134:	100b883a 	mov	r5,r2
 8005138:	e13ffc17 	ldw	r4,-16(fp)
 800513c:	8004f300 	call	8004f30 <alt_ic_irq_enable>
 8005140:	00000406 	br	8005154 <alt_iic_isr_register+0xc4>
 8005144:	e0bff817 	ldw	r2,-32(fp)
 8005148:	100b883a 	mov	r5,r2
 800514c:	e13ffc17 	ldw	r4,-16(fp)
 8005150:	8004fb80 	call	8004fb8 <alt_ic_irq_disable>
 8005154:	e0bff715 	stw	r2,-36(fp)
 8005158:	e0bffa17 	ldw	r2,-24(fp)
 800515c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005160:	e0bff917 	ldw	r2,-28(fp)
 8005164:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8005168:	e0bff717 	ldw	r2,-36(fp)
}
 800516c:	e037883a 	mov	sp,fp
 8005170:	dfc00117 	ldw	ra,4(sp)
 8005174:	df000017 	ldw	fp,0(sp)
 8005178:	dec00204 	addi	sp,sp,8
 800517c:	f800283a 	ret

08005180 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8005180:	defff904 	addi	sp,sp,-28
 8005184:	dfc00615 	stw	ra,24(sp)
 8005188:	df000515 	stw	fp,20(sp)
 800518c:	df000504 	addi	fp,sp,20
 8005190:	e13ffc15 	stw	r4,-16(fp)
 8005194:	e17ffd15 	stw	r5,-12(fp)
 8005198:	e1bffe15 	stw	r6,-8(fp)
 800519c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80051a0:	e1bfff17 	ldw	r6,-4(fp)
 80051a4:	e17ffe17 	ldw	r5,-8(fp)
 80051a8:	e13ffd17 	ldw	r4,-12(fp)
 80051ac:	80053c00 	call	80053c0 <open>
 80051b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80051b4:	e0bffb17 	ldw	r2,-20(fp)
 80051b8:	10001c16 	blt	r2,zero,800522c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80051bc:	00820034 	movhi	r2,2048
 80051c0:	10997e04 	addi	r2,r2,26104
 80051c4:	e0fffb17 	ldw	r3,-20(fp)
 80051c8:	18c00324 	muli	r3,r3,12
 80051cc:	10c5883a 	add	r2,r2,r3
 80051d0:	10c00017 	ldw	r3,0(r2)
 80051d4:	e0bffc17 	ldw	r2,-16(fp)
 80051d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80051dc:	00820034 	movhi	r2,2048
 80051e0:	10997e04 	addi	r2,r2,26104
 80051e4:	e0fffb17 	ldw	r3,-20(fp)
 80051e8:	18c00324 	muli	r3,r3,12
 80051ec:	10c5883a 	add	r2,r2,r3
 80051f0:	10800104 	addi	r2,r2,4
 80051f4:	10c00017 	ldw	r3,0(r2)
 80051f8:	e0bffc17 	ldw	r2,-16(fp)
 80051fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8005200:	00820034 	movhi	r2,2048
 8005204:	10997e04 	addi	r2,r2,26104
 8005208:	e0fffb17 	ldw	r3,-20(fp)
 800520c:	18c00324 	muli	r3,r3,12
 8005210:	10c5883a 	add	r2,r2,r3
 8005214:	10800204 	addi	r2,r2,8
 8005218:	10c00017 	ldw	r3,0(r2)
 800521c:	e0bffc17 	ldw	r2,-16(fp)
 8005220:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8005224:	e13ffb17 	ldw	r4,-20(fp)
 8005228:	80037880 	call	8003788 <alt_release_fd>
  }
} 
 800522c:	0001883a 	nop
 8005230:	e037883a 	mov	sp,fp
 8005234:	dfc00117 	ldw	ra,4(sp)
 8005238:	df000017 	ldw	fp,0(sp)
 800523c:	dec00204 	addi	sp,sp,8
 8005240:	f800283a 	ret

08005244 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8005244:	defffb04 	addi	sp,sp,-20
 8005248:	dfc00415 	stw	ra,16(sp)
 800524c:	df000315 	stw	fp,12(sp)
 8005250:	df000304 	addi	fp,sp,12
 8005254:	e13ffd15 	stw	r4,-12(fp)
 8005258:	e17ffe15 	stw	r5,-8(fp)
 800525c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8005260:	01c07fc4 	movi	r7,511
 8005264:	01800044 	movi	r6,1
 8005268:	e17ffd17 	ldw	r5,-12(fp)
 800526c:	01020034 	movhi	r4,2048
 8005270:	21198104 	addi	r4,r4,26116
 8005274:	80051800 	call	8005180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8005278:	01c07fc4 	movi	r7,511
 800527c:	000d883a 	mov	r6,zero
 8005280:	e17ffe17 	ldw	r5,-8(fp)
 8005284:	01020034 	movhi	r4,2048
 8005288:	21197e04 	addi	r4,r4,26104
 800528c:	80051800 	call	8005180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8005290:	01c07fc4 	movi	r7,511
 8005294:	01800044 	movi	r6,1
 8005298:	e17fff17 	ldw	r5,-4(fp)
 800529c:	01020034 	movhi	r4,2048
 80052a0:	21198404 	addi	r4,r4,26128
 80052a4:	80051800 	call	8005180 <alt_open_fd>
}  
 80052a8:	0001883a 	nop
 80052ac:	e037883a 	mov	sp,fp
 80052b0:	dfc00117 	ldw	ra,4(sp)
 80052b4:	df000017 	ldw	fp,0(sp)
 80052b8:	dec00204 	addi	sp,sp,8
 80052bc:	f800283a 	ret

080052c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80052c0:	defffe04 	addi	sp,sp,-8
 80052c4:	dfc00115 	stw	ra,4(sp)
 80052c8:	df000015 	stw	fp,0(sp)
 80052cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80052d0:	d0a00917 	ldw	r2,-32732(gp)
 80052d4:	10000326 	beq	r2,zero,80052e4 <alt_get_errno+0x24>
 80052d8:	d0a00917 	ldw	r2,-32732(gp)
 80052dc:	103ee83a 	callr	r2
 80052e0:	00000106 	br	80052e8 <alt_get_errno+0x28>
 80052e4:	d0a6b704 	addi	r2,gp,-25892
}
 80052e8:	e037883a 	mov	sp,fp
 80052ec:	dfc00117 	ldw	ra,4(sp)
 80052f0:	df000017 	ldw	fp,0(sp)
 80052f4:	dec00204 	addi	sp,sp,8
 80052f8:	f800283a 	ret

080052fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80052fc:	defffd04 	addi	sp,sp,-12
 8005300:	df000215 	stw	fp,8(sp)
 8005304:	df000204 	addi	fp,sp,8
 8005308:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800530c:	e0bfff17 	ldw	r2,-4(fp)
 8005310:	10800217 	ldw	r2,8(r2)
 8005314:	10d00034 	orhi	r3,r2,16384
 8005318:	e0bfff17 	ldw	r2,-4(fp)
 800531c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005320:	e03ffe15 	stw	zero,-8(fp)
 8005324:	00001d06 	br	800539c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005328:	00820034 	movhi	r2,2048
 800532c:	10997e04 	addi	r2,r2,26104
 8005330:	e0fffe17 	ldw	r3,-8(fp)
 8005334:	18c00324 	muli	r3,r3,12
 8005338:	10c5883a 	add	r2,r2,r3
 800533c:	10c00017 	ldw	r3,0(r2)
 8005340:	e0bfff17 	ldw	r2,-4(fp)
 8005344:	10800017 	ldw	r2,0(r2)
 8005348:	1880111e 	bne	r3,r2,8005390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800534c:	00820034 	movhi	r2,2048
 8005350:	10997e04 	addi	r2,r2,26104
 8005354:	e0fffe17 	ldw	r3,-8(fp)
 8005358:	18c00324 	muli	r3,r3,12
 800535c:	10c5883a 	add	r2,r2,r3
 8005360:	10800204 	addi	r2,r2,8
 8005364:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005368:	1000090e 	bge	r2,zero,8005390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800536c:	e0bffe17 	ldw	r2,-8(fp)
 8005370:	10c00324 	muli	r3,r2,12
 8005374:	00820034 	movhi	r2,2048
 8005378:	10997e04 	addi	r2,r2,26104
 800537c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005380:	e0bfff17 	ldw	r2,-4(fp)
 8005384:	18800226 	beq	r3,r2,8005390 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8005388:	00bffcc4 	movi	r2,-13
 800538c:	00000806 	br	80053b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005390:	e0bffe17 	ldw	r2,-8(fp)
 8005394:	10800044 	addi	r2,r2,1
 8005398:	e0bffe15 	stw	r2,-8(fp)
 800539c:	d0a00817 	ldw	r2,-32736(gp)
 80053a0:	1007883a 	mov	r3,r2
 80053a4:	e0bffe17 	ldw	r2,-8(fp)
 80053a8:	18bfdf2e 	bgeu	r3,r2,8005328 <__alt_data_end+0xf8005328>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80053ac:	0005883a 	mov	r2,zero
}
 80053b0:	e037883a 	mov	sp,fp
 80053b4:	df000017 	ldw	fp,0(sp)
 80053b8:	dec00104 	addi	sp,sp,4
 80053bc:	f800283a 	ret

080053c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80053c0:	defff604 	addi	sp,sp,-40
 80053c4:	dfc00915 	stw	ra,36(sp)
 80053c8:	df000815 	stw	fp,32(sp)
 80053cc:	df000804 	addi	fp,sp,32
 80053d0:	e13ffd15 	stw	r4,-12(fp)
 80053d4:	e17ffe15 	stw	r5,-8(fp)
 80053d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80053dc:	00bfffc4 	movi	r2,-1
 80053e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80053e4:	00bffb44 	movi	r2,-19
 80053e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80053ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80053f0:	d1600604 	addi	r5,gp,-32744
 80053f4:	e13ffd17 	ldw	r4,-12(fp)
 80053f8:	8004e1c0 	call	8004e1c <alt_find_dev>
 80053fc:	e0bff815 	stw	r2,-32(fp)
 8005400:	e0bff817 	ldw	r2,-32(fp)
 8005404:	1000051e 	bne	r2,zero,800541c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8005408:	e13ffd17 	ldw	r4,-12(fp)
 800540c:	80056dc0 	call	80056dc <alt_find_file>
 8005410:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8005414:	00800044 	movi	r2,1
 8005418:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800541c:	e0bff817 	ldw	r2,-32(fp)
 8005420:	10002926 	beq	r2,zero,80054c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8005424:	e13ff817 	ldw	r4,-32(fp)
 8005428:	80057e40 	call	80057e4 <alt_get_fd>
 800542c:	e0bff915 	stw	r2,-28(fp)
 8005430:	e0bff917 	ldw	r2,-28(fp)
 8005434:	1000030e 	bge	r2,zero,8005444 <open+0x84>
    {
      status = index;
 8005438:	e0bff917 	ldw	r2,-28(fp)
 800543c:	e0bffa15 	stw	r2,-24(fp)
 8005440:	00002306 	br	80054d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8005444:	e0bff917 	ldw	r2,-28(fp)
 8005448:	10c00324 	muli	r3,r2,12
 800544c:	00820034 	movhi	r2,2048
 8005450:	10997e04 	addi	r2,r2,26104
 8005454:	1885883a 	add	r2,r3,r2
 8005458:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800545c:	e0fffe17 	ldw	r3,-8(fp)
 8005460:	00900034 	movhi	r2,16384
 8005464:	10bfffc4 	addi	r2,r2,-1
 8005468:	1886703a 	and	r3,r3,r2
 800546c:	e0bffc17 	ldw	r2,-16(fp)
 8005470:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8005474:	e0bffb17 	ldw	r2,-20(fp)
 8005478:	1000051e 	bne	r2,zero,8005490 <open+0xd0>
 800547c:	e13ffc17 	ldw	r4,-16(fp)
 8005480:	80052fc0 	call	80052fc <alt_file_locked>
 8005484:	e0bffa15 	stw	r2,-24(fp)
 8005488:	e0bffa17 	ldw	r2,-24(fp)
 800548c:	10001016 	blt	r2,zero,80054d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8005490:	e0bff817 	ldw	r2,-32(fp)
 8005494:	10800317 	ldw	r2,12(r2)
 8005498:	10000826 	beq	r2,zero,80054bc <open+0xfc>
 800549c:	e0bff817 	ldw	r2,-32(fp)
 80054a0:	10800317 	ldw	r2,12(r2)
 80054a4:	e1ffff17 	ldw	r7,-4(fp)
 80054a8:	e1bffe17 	ldw	r6,-8(fp)
 80054ac:	e17ffd17 	ldw	r5,-12(fp)
 80054b0:	e13ffc17 	ldw	r4,-16(fp)
 80054b4:	103ee83a 	callr	r2
 80054b8:	00000106 	br	80054c0 <open+0x100>
 80054bc:	0005883a 	mov	r2,zero
 80054c0:	e0bffa15 	stw	r2,-24(fp)
 80054c4:	00000206 	br	80054d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80054c8:	00bffb44 	movi	r2,-19
 80054cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80054d0:	e0bffa17 	ldw	r2,-24(fp)
 80054d4:	1000090e 	bge	r2,zero,80054fc <open+0x13c>
  {
    alt_release_fd (index);  
 80054d8:	e13ff917 	ldw	r4,-28(fp)
 80054dc:	80037880 	call	8003788 <alt_release_fd>
    ALT_ERRNO = -status;
 80054e0:	80052c00 	call	80052c0 <alt_get_errno>
 80054e4:	1007883a 	mov	r3,r2
 80054e8:	e0bffa17 	ldw	r2,-24(fp)
 80054ec:	0085c83a 	sub	r2,zero,r2
 80054f0:	18800015 	stw	r2,0(r3)
    return -1;
 80054f4:	00bfffc4 	movi	r2,-1
 80054f8:	00000106 	br	8005500 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 80054fc:	e0bff917 	ldw	r2,-28(fp)
}
 8005500:	e037883a 	mov	sp,fp
 8005504:	dfc00117 	ldw	ra,4(sp)
 8005508:	df000017 	ldw	fp,0(sp)
 800550c:	dec00204 	addi	sp,sp,8
 8005510:	f800283a 	ret

08005514 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8005514:	defffa04 	addi	sp,sp,-24
 8005518:	df000515 	stw	fp,20(sp)
 800551c:	df000504 	addi	fp,sp,20
 8005520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005524:	0005303a 	rdctl	r2,status
 8005528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800552c:	e0fffc17 	ldw	r3,-16(fp)
 8005530:	00bfff84 	movi	r2,-2
 8005534:	1884703a 	and	r2,r3,r2
 8005538:	1001703a 	wrctl	status,r2
  
  return context;
 800553c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8005540:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8005544:	e0bfff17 	ldw	r2,-4(fp)
 8005548:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800554c:	e0bffd17 	ldw	r2,-12(fp)
 8005550:	10800017 	ldw	r2,0(r2)
 8005554:	e0fffd17 	ldw	r3,-12(fp)
 8005558:	18c00117 	ldw	r3,4(r3)
 800555c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8005560:	e0bffd17 	ldw	r2,-12(fp)
 8005564:	10800117 	ldw	r2,4(r2)
 8005568:	e0fffd17 	ldw	r3,-12(fp)
 800556c:	18c00017 	ldw	r3,0(r3)
 8005570:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8005574:	e0bffd17 	ldw	r2,-12(fp)
 8005578:	e0fffd17 	ldw	r3,-12(fp)
 800557c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8005580:	e0bffd17 	ldw	r2,-12(fp)
 8005584:	e0fffd17 	ldw	r3,-12(fp)
 8005588:	10c00015 	stw	r3,0(r2)
 800558c:	e0bffb17 	ldw	r2,-20(fp)
 8005590:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005594:	e0bffe17 	ldw	r2,-8(fp)
 8005598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800559c:	0001883a 	nop
 80055a0:	e037883a 	mov	sp,fp
 80055a4:	df000017 	ldw	fp,0(sp)
 80055a8:	dec00104 	addi	sp,sp,4
 80055ac:	f800283a 	ret

080055b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80055b0:	defffb04 	addi	sp,sp,-20
 80055b4:	dfc00415 	stw	ra,16(sp)
 80055b8:	df000315 	stw	fp,12(sp)
 80055bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80055c0:	d0a00c17 	ldw	r2,-32720(gp)
 80055c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80055c8:	d0a6bd17 	ldw	r2,-25868(gp)
 80055cc:	10800044 	addi	r2,r2,1
 80055d0:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80055d4:	00002e06 	br	8005690 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80055d8:	e0bffd17 	ldw	r2,-12(fp)
 80055dc:	10800017 	ldw	r2,0(r2)
 80055e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80055e4:	e0bffd17 	ldw	r2,-12(fp)
 80055e8:	10800403 	ldbu	r2,16(r2)
 80055ec:	10803fcc 	andi	r2,r2,255
 80055f0:	10000426 	beq	r2,zero,8005604 <alt_tick+0x54>
 80055f4:	d0a6bd17 	ldw	r2,-25868(gp)
 80055f8:	1000021e 	bne	r2,zero,8005604 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80055fc:	e0bffd17 	ldw	r2,-12(fp)
 8005600:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8005604:	e0bffd17 	ldw	r2,-12(fp)
 8005608:	10800217 	ldw	r2,8(r2)
 800560c:	d0e6bd17 	ldw	r3,-25868(gp)
 8005610:	18801d36 	bltu	r3,r2,8005688 <alt_tick+0xd8>
 8005614:	e0bffd17 	ldw	r2,-12(fp)
 8005618:	10800403 	ldbu	r2,16(r2)
 800561c:	10803fcc 	andi	r2,r2,255
 8005620:	1000191e 	bne	r2,zero,8005688 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8005624:	e0bffd17 	ldw	r2,-12(fp)
 8005628:	10800317 	ldw	r2,12(r2)
 800562c:	e0fffd17 	ldw	r3,-12(fp)
 8005630:	18c00517 	ldw	r3,20(r3)
 8005634:	1809883a 	mov	r4,r3
 8005638:	103ee83a 	callr	r2
 800563c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8005640:	e0bfff17 	ldw	r2,-4(fp)
 8005644:	1000031e 	bne	r2,zero,8005654 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8005648:	e13ffd17 	ldw	r4,-12(fp)
 800564c:	80055140 	call	8005514 <alt_alarm_stop>
 8005650:	00000d06 	br	8005688 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8005654:	e0bffd17 	ldw	r2,-12(fp)
 8005658:	10c00217 	ldw	r3,8(r2)
 800565c:	e0bfff17 	ldw	r2,-4(fp)
 8005660:	1887883a 	add	r3,r3,r2
 8005664:	e0bffd17 	ldw	r2,-12(fp)
 8005668:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800566c:	e0bffd17 	ldw	r2,-12(fp)
 8005670:	10c00217 	ldw	r3,8(r2)
 8005674:	d0a6bd17 	ldw	r2,-25868(gp)
 8005678:	1880032e 	bgeu	r3,r2,8005688 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800567c:	e0bffd17 	ldw	r2,-12(fp)
 8005680:	00c00044 	movi	r3,1
 8005684:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8005688:	e0bffe17 	ldw	r2,-8(fp)
 800568c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005690:	e0fffd17 	ldw	r3,-12(fp)
 8005694:	d0a00c04 	addi	r2,gp,-32720
 8005698:	18bfcf1e 	bne	r3,r2,80055d8 <__alt_data_end+0xf80055d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800569c:	0001883a 	nop
}
 80056a0:	0001883a 	nop
 80056a4:	e037883a 	mov	sp,fp
 80056a8:	dfc00117 	ldw	ra,4(sp)
 80056ac:	df000017 	ldw	fp,0(sp)
 80056b0:	dec00204 	addi	sp,sp,8
 80056b4:	f800283a 	ret

080056b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80056b8:	deffff04 	addi	sp,sp,-4
 80056bc:	df000015 	stw	fp,0(sp)
 80056c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80056c4:	000170fa 	wrctl	ienable,zero
}
 80056c8:	0001883a 	nop
 80056cc:	e037883a 	mov	sp,fp
 80056d0:	df000017 	ldw	fp,0(sp)
 80056d4:	dec00104 	addi	sp,sp,4
 80056d8:	f800283a 	ret

080056dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80056dc:	defffb04 	addi	sp,sp,-20
 80056e0:	dfc00415 	stw	ra,16(sp)
 80056e4:	df000315 	stw	fp,12(sp)
 80056e8:	df000304 	addi	fp,sp,12
 80056ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80056f0:	d0a00417 	ldw	r2,-32752(gp)
 80056f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80056f8:	00003106 	br	80057c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80056fc:	e0bffd17 	ldw	r2,-12(fp)
 8005700:	10800217 	ldw	r2,8(r2)
 8005704:	1009883a 	mov	r4,r2
 8005708:	80003980 	call	8000398 <strlen>
 800570c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8005710:	e0bffd17 	ldw	r2,-12(fp)
 8005714:	10c00217 	ldw	r3,8(r2)
 8005718:	e0bffe17 	ldw	r2,-8(fp)
 800571c:	10bfffc4 	addi	r2,r2,-1
 8005720:	1885883a 	add	r2,r3,r2
 8005724:	10800003 	ldbu	r2,0(r2)
 8005728:	10803fcc 	andi	r2,r2,255
 800572c:	1080201c 	xori	r2,r2,128
 8005730:	10bfe004 	addi	r2,r2,-128
 8005734:	10800bd8 	cmpnei	r2,r2,47
 8005738:	1000031e 	bne	r2,zero,8005748 <alt_find_file+0x6c>
    {
      len -= 1;
 800573c:	e0bffe17 	ldw	r2,-8(fp)
 8005740:	10bfffc4 	addi	r2,r2,-1
 8005744:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005748:	e0bffe17 	ldw	r2,-8(fp)
 800574c:	e0ffff17 	ldw	r3,-4(fp)
 8005750:	1885883a 	add	r2,r3,r2
 8005754:	10800003 	ldbu	r2,0(r2)
 8005758:	10803fcc 	andi	r2,r2,255
 800575c:	1080201c 	xori	r2,r2,128
 8005760:	10bfe004 	addi	r2,r2,-128
 8005764:	10800be0 	cmpeqi	r2,r2,47
 8005768:	1000081e 	bne	r2,zero,800578c <alt_find_file+0xb0>
 800576c:	e0bffe17 	ldw	r2,-8(fp)
 8005770:	e0ffff17 	ldw	r3,-4(fp)
 8005774:	1885883a 	add	r2,r3,r2
 8005778:	10800003 	ldbu	r2,0(r2)
 800577c:	10803fcc 	andi	r2,r2,255
 8005780:	1080201c 	xori	r2,r2,128
 8005784:	10bfe004 	addi	r2,r2,-128
 8005788:	10000a1e 	bne	r2,zero,80057b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800578c:	e0bffd17 	ldw	r2,-12(fp)
 8005790:	10800217 	ldw	r2,8(r2)
 8005794:	e0fffe17 	ldw	r3,-8(fp)
 8005798:	180d883a 	mov	r6,r3
 800579c:	e17fff17 	ldw	r5,-4(fp)
 80057a0:	1009883a 	mov	r4,r2
 80057a4:	8005a000 	call	8005a00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80057a8:	1000021e 	bne	r2,zero,80057b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80057ac:	e0bffd17 	ldw	r2,-12(fp)
 80057b0:	00000706 	br	80057d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80057b4:	e0bffd17 	ldw	r2,-12(fp)
 80057b8:	10800017 	ldw	r2,0(r2)
 80057bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80057c0:	e0fffd17 	ldw	r3,-12(fp)
 80057c4:	d0a00404 	addi	r2,gp,-32752
 80057c8:	18bfcc1e 	bne	r3,r2,80056fc <__alt_data_end+0xf80056fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80057cc:	0005883a 	mov	r2,zero
}
 80057d0:	e037883a 	mov	sp,fp
 80057d4:	dfc00117 	ldw	ra,4(sp)
 80057d8:	df000017 	ldw	fp,0(sp)
 80057dc:	dec00204 	addi	sp,sp,8
 80057e0:	f800283a 	ret

080057e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80057e4:	defffc04 	addi	sp,sp,-16
 80057e8:	df000315 	stw	fp,12(sp)
 80057ec:	df000304 	addi	fp,sp,12
 80057f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80057f4:	00bffa04 	movi	r2,-24
 80057f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80057fc:	e03ffd15 	stw	zero,-12(fp)
 8005800:	00001906 	br	8005868 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8005804:	00820034 	movhi	r2,2048
 8005808:	10997e04 	addi	r2,r2,26104
 800580c:	e0fffd17 	ldw	r3,-12(fp)
 8005810:	18c00324 	muli	r3,r3,12
 8005814:	10c5883a 	add	r2,r2,r3
 8005818:	10800017 	ldw	r2,0(r2)
 800581c:	10000f1e 	bne	r2,zero,800585c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8005820:	00820034 	movhi	r2,2048
 8005824:	10997e04 	addi	r2,r2,26104
 8005828:	e0fffd17 	ldw	r3,-12(fp)
 800582c:	18c00324 	muli	r3,r3,12
 8005830:	10c5883a 	add	r2,r2,r3
 8005834:	e0ffff17 	ldw	r3,-4(fp)
 8005838:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800583c:	d0e00817 	ldw	r3,-32736(gp)
 8005840:	e0bffd17 	ldw	r2,-12(fp)
 8005844:	1880020e 	bge	r3,r2,8005850 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8005848:	e0bffd17 	ldw	r2,-12(fp)
 800584c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8005850:	e0bffd17 	ldw	r2,-12(fp)
 8005854:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8005858:	00000606 	br	8005874 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800585c:	e0bffd17 	ldw	r2,-12(fp)
 8005860:	10800044 	addi	r2,r2,1
 8005864:	e0bffd15 	stw	r2,-12(fp)
 8005868:	e0bffd17 	ldw	r2,-12(fp)
 800586c:	10800810 	cmplti	r2,r2,32
 8005870:	103fe41e 	bne	r2,zero,8005804 <__alt_data_end+0xf8005804>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8005874:	e0bffe17 	ldw	r2,-8(fp)
}
 8005878:	e037883a 	mov	sp,fp
 800587c:	df000017 	ldw	fp,0(sp)
 8005880:	dec00104 	addi	sp,sp,4
 8005884:	f800283a 	ret

08005888 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8005888:	defffb04 	addi	sp,sp,-20
 800588c:	df000415 	stw	fp,16(sp)
 8005890:	df000404 	addi	fp,sp,16
 8005894:	e13ffe15 	stw	r4,-8(fp)
 8005898:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800589c:	e0bfff17 	ldw	r2,-4(fp)
 80058a0:	10840070 	cmpltui	r2,r2,4097
 80058a4:	1000021e 	bne	r2,zero,80058b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80058a8:	00840004 	movi	r2,4096
 80058ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80058b0:	e0fffe17 	ldw	r3,-8(fp)
 80058b4:	e0bfff17 	ldw	r2,-4(fp)
 80058b8:	1885883a 	add	r2,r3,r2
 80058bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80058c0:	e0bffe17 	ldw	r2,-8(fp)
 80058c4:	e0bffc15 	stw	r2,-16(fp)
 80058c8:	00000506 	br	80058e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80058cc:	e0bffc17 	ldw	r2,-16(fp)
 80058d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80058d4:	e0bffc17 	ldw	r2,-16(fp)
 80058d8:	10800804 	addi	r2,r2,32
 80058dc:	e0bffc15 	stw	r2,-16(fp)
 80058e0:	e0fffc17 	ldw	r3,-16(fp)
 80058e4:	e0bffd17 	ldw	r2,-12(fp)
 80058e8:	18bff836 	bltu	r3,r2,80058cc <__alt_data_end+0xf80058cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80058ec:	e0bffe17 	ldw	r2,-8(fp)
 80058f0:	108007cc 	andi	r2,r2,31
 80058f4:	10000226 	beq	r2,zero,8005900 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80058f8:	e0bffc17 	ldw	r2,-16(fp)
 80058fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8005900:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8005904:	0001883a 	nop
 8005908:	e037883a 	mov	sp,fp
 800590c:	df000017 	ldw	fp,0(sp)
 8005910:	dec00104 	addi	sp,sp,4
 8005914:	f800283a 	ret

08005918 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8005918:	defffe04 	addi	sp,sp,-8
 800591c:	df000115 	stw	fp,4(sp)
 8005920:	df000104 	addi	fp,sp,4
 8005924:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8005928:	e0bfff17 	ldw	r2,-4(fp)
 800592c:	10bffe84 	addi	r2,r2,-6
 8005930:	10c00428 	cmpgeui	r3,r2,16
 8005934:	18001a1e 	bne	r3,zero,80059a0 <alt_exception_cause_generated_bad_addr+0x88>
 8005938:	100690ba 	slli	r3,r2,2
 800593c:	00820034 	movhi	r2,2048
 8005940:	10965404 	addi	r2,r2,22864
 8005944:	1885883a 	add	r2,r3,r2
 8005948:	10800017 	ldw	r2,0(r2)
 800594c:	1000683a 	jmp	r2
 8005950:	08005990 	cmplti	zero,at,358
 8005954:	08005990 	cmplti	zero,at,358
 8005958:	080059a0 	cmpeqi	zero,at,358
 800595c:	080059a0 	cmpeqi	zero,at,358
 8005960:	080059a0 	cmpeqi	zero,at,358
 8005964:	08005990 	cmplti	zero,at,358
 8005968:	08005998 	cmpnei	zero,at,358
 800596c:	080059a0 	cmpeqi	zero,at,358
 8005970:	08005990 	cmplti	zero,at,358
 8005974:	08005990 	cmplti	zero,at,358
 8005978:	080059a0 	cmpeqi	zero,at,358
 800597c:	08005990 	cmplti	zero,at,358
 8005980:	08005998 	cmpnei	zero,at,358
 8005984:	080059a0 	cmpeqi	zero,at,358
 8005988:	080059a0 	cmpeqi	zero,at,358
 800598c:	08005990 	cmplti	zero,at,358
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8005990:	00800044 	movi	r2,1
 8005994:	00000306 	br	80059a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8005998:	0005883a 	mov	r2,zero
 800599c:	00000106 	br	80059a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80059a0:	0005883a 	mov	r2,zero
  }
}
 80059a4:	e037883a 	mov	sp,fp
 80059a8:	df000017 	ldw	fp,0(sp)
 80059ac:	dec00104 	addi	sp,sp,4
 80059b0:	f800283a 	ret

080059b4 <atexit>:
 80059b4:	200b883a 	mov	r5,r4
 80059b8:	000f883a 	mov	r7,zero
 80059bc:	000d883a 	mov	r6,zero
 80059c0:	0009883a 	mov	r4,zero
 80059c4:	8005a7c1 	jmpi	8005a7c <__register_exitproc>

080059c8 <exit>:
 80059c8:	defffe04 	addi	sp,sp,-8
 80059cc:	000b883a 	mov	r5,zero
 80059d0:	dc000015 	stw	r16,0(sp)
 80059d4:	dfc00115 	stw	ra,4(sp)
 80059d8:	2021883a 	mov	r16,r4
 80059dc:	8005b940 	call	8005b94 <__call_exitprocs>
 80059e0:	00820034 	movhi	r2,2048
 80059e4:	109e0104 	addi	r2,r2,30724
 80059e8:	11000017 	ldw	r4,0(r2)
 80059ec:	20800f17 	ldw	r2,60(r4)
 80059f0:	10000126 	beq	r2,zero,80059f8 <exit+0x30>
 80059f4:	103ee83a 	callr	r2
 80059f8:	8009883a 	mov	r4,r16
 80059fc:	8005d140 	call	8005d14 <_exit>

08005a00 <memcmp>:
 8005a00:	01c000c4 	movi	r7,3
 8005a04:	3980192e 	bgeu	r7,r6,8005a6c <memcmp+0x6c>
 8005a08:	2144b03a 	or	r2,r4,r5
 8005a0c:	11c4703a 	and	r2,r2,r7
 8005a10:	10000f26 	beq	r2,zero,8005a50 <memcmp+0x50>
 8005a14:	20800003 	ldbu	r2,0(r4)
 8005a18:	28c00003 	ldbu	r3,0(r5)
 8005a1c:	10c0151e 	bne	r2,r3,8005a74 <memcmp+0x74>
 8005a20:	31bfff84 	addi	r6,r6,-2
 8005a24:	01ffffc4 	movi	r7,-1
 8005a28:	00000406 	br	8005a3c <memcmp+0x3c>
 8005a2c:	20800003 	ldbu	r2,0(r4)
 8005a30:	28c00003 	ldbu	r3,0(r5)
 8005a34:	31bfffc4 	addi	r6,r6,-1
 8005a38:	10c00e1e 	bne	r2,r3,8005a74 <memcmp+0x74>
 8005a3c:	21000044 	addi	r4,r4,1
 8005a40:	29400044 	addi	r5,r5,1
 8005a44:	31fff91e 	bne	r6,r7,8005a2c <__alt_data_end+0xf8005a2c>
 8005a48:	0005883a 	mov	r2,zero
 8005a4c:	f800283a 	ret
 8005a50:	20c00017 	ldw	r3,0(r4)
 8005a54:	28800017 	ldw	r2,0(r5)
 8005a58:	18bfee1e 	bne	r3,r2,8005a14 <__alt_data_end+0xf8005a14>
 8005a5c:	31bfff04 	addi	r6,r6,-4
 8005a60:	21000104 	addi	r4,r4,4
 8005a64:	29400104 	addi	r5,r5,4
 8005a68:	39bff936 	bltu	r7,r6,8005a50 <__alt_data_end+0xf8005a50>
 8005a6c:	303fe91e 	bne	r6,zero,8005a14 <__alt_data_end+0xf8005a14>
 8005a70:	003ff506 	br	8005a48 <__alt_data_end+0xf8005a48>
 8005a74:	10c5c83a 	sub	r2,r2,r3
 8005a78:	f800283a 	ret

08005a7c <__register_exitproc>:
 8005a7c:	defffa04 	addi	sp,sp,-24
 8005a80:	dc000315 	stw	r16,12(sp)
 8005a84:	04020034 	movhi	r16,2048
 8005a88:	841e0104 	addi	r16,r16,30724
 8005a8c:	80c00017 	ldw	r3,0(r16)
 8005a90:	dc400415 	stw	r17,16(sp)
 8005a94:	dfc00515 	stw	ra,20(sp)
 8005a98:	18805217 	ldw	r2,328(r3)
 8005a9c:	2023883a 	mov	r17,r4
 8005aa0:	10003726 	beq	r2,zero,8005b80 <__register_exitproc+0x104>
 8005aa4:	10c00117 	ldw	r3,4(r2)
 8005aa8:	010007c4 	movi	r4,31
 8005aac:	20c00e16 	blt	r4,r3,8005ae8 <__register_exitproc+0x6c>
 8005ab0:	1a000044 	addi	r8,r3,1
 8005ab4:	8800221e 	bne	r17,zero,8005b40 <__register_exitproc+0xc4>
 8005ab8:	18c00084 	addi	r3,r3,2
 8005abc:	18c7883a 	add	r3,r3,r3
 8005ac0:	18c7883a 	add	r3,r3,r3
 8005ac4:	12000115 	stw	r8,4(r2)
 8005ac8:	10c7883a 	add	r3,r2,r3
 8005acc:	19400015 	stw	r5,0(r3)
 8005ad0:	0005883a 	mov	r2,zero
 8005ad4:	dfc00517 	ldw	ra,20(sp)
 8005ad8:	dc400417 	ldw	r17,16(sp)
 8005adc:	dc000317 	ldw	r16,12(sp)
 8005ae0:	dec00604 	addi	sp,sp,24
 8005ae4:	f800283a 	ret
 8005ae8:	00800034 	movhi	r2,0
 8005aec:	10800004 	addi	r2,r2,0
 8005af0:	10002626 	beq	r2,zero,8005b8c <__register_exitproc+0x110>
 8005af4:	01006404 	movi	r4,400
 8005af8:	d9400015 	stw	r5,0(sp)
 8005afc:	d9800115 	stw	r6,4(sp)
 8005b00:	d9c00215 	stw	r7,8(sp)
 8005b04:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8005b08:	d9400017 	ldw	r5,0(sp)
 8005b0c:	d9800117 	ldw	r6,4(sp)
 8005b10:	d9c00217 	ldw	r7,8(sp)
 8005b14:	10001d26 	beq	r2,zero,8005b8c <__register_exitproc+0x110>
 8005b18:	81000017 	ldw	r4,0(r16)
 8005b1c:	10000115 	stw	zero,4(r2)
 8005b20:	02000044 	movi	r8,1
 8005b24:	22405217 	ldw	r9,328(r4)
 8005b28:	0007883a 	mov	r3,zero
 8005b2c:	12400015 	stw	r9,0(r2)
 8005b30:	20805215 	stw	r2,328(r4)
 8005b34:	10006215 	stw	zero,392(r2)
 8005b38:	10006315 	stw	zero,396(r2)
 8005b3c:	883fde26 	beq	r17,zero,8005ab8 <__alt_data_end+0xf8005ab8>
 8005b40:	18c9883a 	add	r4,r3,r3
 8005b44:	2109883a 	add	r4,r4,r4
 8005b48:	1109883a 	add	r4,r2,r4
 8005b4c:	21802215 	stw	r6,136(r4)
 8005b50:	01800044 	movi	r6,1
 8005b54:	12406217 	ldw	r9,392(r2)
 8005b58:	30cc983a 	sll	r6,r6,r3
 8005b5c:	4992b03a 	or	r9,r9,r6
 8005b60:	12406215 	stw	r9,392(r2)
 8005b64:	21c04215 	stw	r7,264(r4)
 8005b68:	01000084 	movi	r4,2
 8005b6c:	893fd21e 	bne	r17,r4,8005ab8 <__alt_data_end+0xf8005ab8>
 8005b70:	11006317 	ldw	r4,396(r2)
 8005b74:	218cb03a 	or	r6,r4,r6
 8005b78:	11806315 	stw	r6,396(r2)
 8005b7c:	003fce06 	br	8005ab8 <__alt_data_end+0xf8005ab8>
 8005b80:	18805304 	addi	r2,r3,332
 8005b84:	18805215 	stw	r2,328(r3)
 8005b88:	003fc606 	br	8005aa4 <__alt_data_end+0xf8005aa4>
 8005b8c:	00bfffc4 	movi	r2,-1
 8005b90:	003fd006 	br	8005ad4 <__alt_data_end+0xf8005ad4>

08005b94 <__call_exitprocs>:
 8005b94:	defff504 	addi	sp,sp,-44
 8005b98:	df000915 	stw	fp,36(sp)
 8005b9c:	dd400615 	stw	r21,24(sp)
 8005ba0:	dc800315 	stw	r18,12(sp)
 8005ba4:	dfc00a15 	stw	ra,40(sp)
 8005ba8:	ddc00815 	stw	r23,32(sp)
 8005bac:	dd800715 	stw	r22,28(sp)
 8005bb0:	dd000515 	stw	r20,20(sp)
 8005bb4:	dcc00415 	stw	r19,16(sp)
 8005bb8:	dc400215 	stw	r17,8(sp)
 8005bbc:	dc000115 	stw	r16,4(sp)
 8005bc0:	d9000015 	stw	r4,0(sp)
 8005bc4:	2839883a 	mov	fp,r5
 8005bc8:	04800044 	movi	r18,1
 8005bcc:	057fffc4 	movi	r21,-1
 8005bd0:	00820034 	movhi	r2,2048
 8005bd4:	109e0104 	addi	r2,r2,30724
 8005bd8:	12000017 	ldw	r8,0(r2)
 8005bdc:	45005217 	ldw	r20,328(r8)
 8005be0:	44c05204 	addi	r19,r8,328
 8005be4:	a0001c26 	beq	r20,zero,8005c58 <__call_exitprocs+0xc4>
 8005be8:	a0800117 	ldw	r2,4(r20)
 8005bec:	15ffffc4 	addi	r23,r2,-1
 8005bf0:	b8000d16 	blt	r23,zero,8005c28 <__call_exitprocs+0x94>
 8005bf4:	14000044 	addi	r16,r2,1
 8005bf8:	8421883a 	add	r16,r16,r16
 8005bfc:	8421883a 	add	r16,r16,r16
 8005c00:	84402004 	addi	r17,r16,128
 8005c04:	a463883a 	add	r17,r20,r17
 8005c08:	a421883a 	add	r16,r20,r16
 8005c0c:	e0001e26 	beq	fp,zero,8005c88 <__call_exitprocs+0xf4>
 8005c10:	80804017 	ldw	r2,256(r16)
 8005c14:	e0801c26 	beq	fp,r2,8005c88 <__call_exitprocs+0xf4>
 8005c18:	bdffffc4 	addi	r23,r23,-1
 8005c1c:	843fff04 	addi	r16,r16,-4
 8005c20:	8c7fff04 	addi	r17,r17,-4
 8005c24:	bd7ff91e 	bne	r23,r21,8005c0c <__alt_data_end+0xf8005c0c>
 8005c28:	00800034 	movhi	r2,0
 8005c2c:	10800004 	addi	r2,r2,0
 8005c30:	10000926 	beq	r2,zero,8005c58 <__call_exitprocs+0xc4>
 8005c34:	a0800117 	ldw	r2,4(r20)
 8005c38:	1000301e 	bne	r2,zero,8005cfc <__call_exitprocs+0x168>
 8005c3c:	a0800017 	ldw	r2,0(r20)
 8005c40:	10003226 	beq	r2,zero,8005d0c <__call_exitprocs+0x178>
 8005c44:	a009883a 	mov	r4,r20
 8005c48:	98800015 	stw	r2,0(r19)
 8005c4c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>
 8005c50:	9d000017 	ldw	r20,0(r19)
 8005c54:	a03fe41e 	bne	r20,zero,8005be8 <__alt_data_end+0xf8005be8>
 8005c58:	dfc00a17 	ldw	ra,40(sp)
 8005c5c:	df000917 	ldw	fp,36(sp)
 8005c60:	ddc00817 	ldw	r23,32(sp)
 8005c64:	dd800717 	ldw	r22,28(sp)
 8005c68:	dd400617 	ldw	r21,24(sp)
 8005c6c:	dd000517 	ldw	r20,20(sp)
 8005c70:	dcc00417 	ldw	r19,16(sp)
 8005c74:	dc800317 	ldw	r18,12(sp)
 8005c78:	dc400217 	ldw	r17,8(sp)
 8005c7c:	dc000117 	ldw	r16,4(sp)
 8005c80:	dec00b04 	addi	sp,sp,44
 8005c84:	f800283a 	ret
 8005c88:	a0800117 	ldw	r2,4(r20)
 8005c8c:	80c00017 	ldw	r3,0(r16)
 8005c90:	10bfffc4 	addi	r2,r2,-1
 8005c94:	15c01426 	beq	r2,r23,8005ce8 <__call_exitprocs+0x154>
 8005c98:	80000015 	stw	zero,0(r16)
 8005c9c:	183fde26 	beq	r3,zero,8005c18 <__alt_data_end+0xf8005c18>
 8005ca0:	95c8983a 	sll	r4,r18,r23
 8005ca4:	a0806217 	ldw	r2,392(r20)
 8005ca8:	a5800117 	ldw	r22,4(r20)
 8005cac:	2084703a 	and	r2,r4,r2
 8005cb0:	10000b26 	beq	r2,zero,8005ce0 <__call_exitprocs+0x14c>
 8005cb4:	a0806317 	ldw	r2,396(r20)
 8005cb8:	2088703a 	and	r4,r4,r2
 8005cbc:	20000c1e 	bne	r4,zero,8005cf0 <__call_exitprocs+0x15c>
 8005cc0:	89400017 	ldw	r5,0(r17)
 8005cc4:	d9000017 	ldw	r4,0(sp)
 8005cc8:	183ee83a 	callr	r3
 8005ccc:	a0800117 	ldw	r2,4(r20)
 8005cd0:	15bfbf1e 	bne	r2,r22,8005bd0 <__alt_data_end+0xf8005bd0>
 8005cd4:	98800017 	ldw	r2,0(r19)
 8005cd8:	153fcf26 	beq	r2,r20,8005c18 <__alt_data_end+0xf8005c18>
 8005cdc:	003fbc06 	br	8005bd0 <__alt_data_end+0xf8005bd0>
 8005ce0:	183ee83a 	callr	r3
 8005ce4:	003ff906 	br	8005ccc <__alt_data_end+0xf8005ccc>
 8005ce8:	a5c00115 	stw	r23,4(r20)
 8005cec:	003feb06 	br	8005c9c <__alt_data_end+0xf8005c9c>
 8005cf0:	89000017 	ldw	r4,0(r17)
 8005cf4:	183ee83a 	callr	r3
 8005cf8:	003ff406 	br	8005ccc <__alt_data_end+0xf8005ccc>
 8005cfc:	a0800017 	ldw	r2,0(r20)
 8005d00:	a027883a 	mov	r19,r20
 8005d04:	1029883a 	mov	r20,r2
 8005d08:	003fb606 	br	8005be4 <__alt_data_end+0xf8005be4>
 8005d0c:	0005883a 	mov	r2,zero
 8005d10:	003ffb06 	br	8005d00 <__alt_data_end+0xf8005d00>

08005d14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8005d14:	defffd04 	addi	sp,sp,-12
 8005d18:	df000215 	stw	fp,8(sp)
 8005d1c:	df000204 	addi	fp,sp,8
 8005d20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8005d24:	0001883a 	nop
 8005d28:	e0bfff17 	ldw	r2,-4(fp)
 8005d2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8005d30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8005d34:	10000226 	beq	r2,zero,8005d40 <_exit+0x2c>
    ALT_SIM_FAIL();
 8005d38:	002af070 	cmpltui	zero,zero,43969
 8005d3c:	00000106 	br	8005d44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8005d40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8005d44:	003fff06 	br	8005d44 <__alt_data_end+0xf8005d44>


rtos.elf:     file format elf32-littlenios2
rtos.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00019374 memsz 0x00019374 flags r-x
    LOAD off    0x0001a394 vaddr 0x08019394 paddr 0x0801af34 align 2**12
         filesz 0x00001ba0 memsz 0x00001ba0 flags rw-
    LOAD off    0x0001cad4 vaddr 0x0801cad4 paddr 0x0801cad4 align 2**12
         filesz 0x00000000 memsz 0x000073f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018c78  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004d8  08018ebc  08018ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba0  08019394  0801af34  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073f0  0801cad4  0801cad4  0001cad4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00200000  00200000  0001bf34  2**0
                  CONTENTS
  7 .sdram        00000000  08023ec4  08023ec4  0001bf34  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001bf34  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001058  00000000  00000000  0001bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ddd6  00000000  00000000  0001cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aeb8  00000000  00000000  0004ad86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000df12  00000000  00000000  00055c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000034c0  00000000  00000000  00063b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bae  00000000  00000000  00067010  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  0006bbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00083428  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00083458  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00089b26  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00089b2c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00089b38  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00089b39  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00089b3a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00089b3e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00089b42  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00089b46  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00089b51  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00089b5c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00089b67  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000014  00000000  00000000  00089b71  2**0
                  CONTENTS, READONLY
 30 .jdi          000048e1  00000000  00000000  00089b85  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009522d  00000000  00000000  0008e466  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08018ebc l    d  .rodata	00000000 .rodata
08019394 l    d  .rwdata	00000000 .rwdata
0801cad4 l    d  .bss	00000000 .bss
00200000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08023ec4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rtos_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
080003c8 l     F .text	0000006c pio_init
08000434 l     F .text	000000ac handle_key_interrupts
080004e0 l     F .text	00000050 key1_isr
08000530 l     F .text	00000050 key2_isr
08000580 l     F .text	00000050 key3_isr
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08018faa l     O .rodata	00000010 zeroes.4404
08002a94 l     F .text	000000bc __sbprintf
08018fba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002ca4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080047d4 l     F .text	00000008 __fp_unlock
080047e8 l     F .text	0000019c __sinit.part.1
08004984 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08019394 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080197d8 l     O .rwdata	00000020 lc_ctype_charset
080197b8 l     O .rwdata	00000020 lc_message_charset
080197f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08018fec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007d80 l     F .text	000000fc __sprint_r.part.0
08019120 l     O .rodata	00000010 blanks.4348
08019110 l     O .rodata	00000010 zeroes.4349
0800930c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cfc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d0d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d48c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d56c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d658 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801aeac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800da70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0801aeb0 l     O .rwdata	00000004 lockid
0801cb0c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0801aeb4 l     O .rwdata	00000004 lockid
0801cb14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0800f4a0 l     F .text	00000048 OS_InitMisc
0800f4e8 l     F .text	0000006c OS_InitRdyList
0800f654 l     F .text	000000e4 OS_InitTCBList
0800f3c0 l     F .text	000000e0 OS_InitEventList
0800f554 l     F .text	00000080 OS_InitTaskIdle
0800f5d4 l     F .text	00000080 OS_InitTaskStat
0800f8c4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
080115d4 l     F .text	000000f4 OS_FlagTaskRdy
08011394 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
08012e48 l     F .text	00000190 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08016790 l     F .text	00000034 alt_dev_reg
08019de0 l     O .rwdata	0000106c jtag_uart_0
0801ae4c l     O .rwdata	0000002c lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016b24 l     F .text	000002a4 altera_avalon_jtag_uart_irq
08016dc8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080175a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08017d00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08018000 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08018140 l     F .text	0000003c alt_get_errno
0801817c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801cb6c g     O .bss	00000004 alt_instruction_exception_handler
080073c4 g     F .text	00000074 _mprec_log10
0801af02 g     O .rwdata	00000002 OSTaskNameSize
080074b0 g     F .text	0000008c __any_on
080098a8 g     F .text	00000054 _isatty_r
08018ff8 g     O .rodata	00000028 __mprec_tinytens
0800d768 g     F .text	000000bc alt_main
08000714 g     F .text	000000c0 _puts_r
08020ba0 g     O .bss	00000100 alt_irq
080098fc g     F .text	00000060 _lseek_r
08011df4 g     F .text	000000cc OS_MemInit
0801af34 g       *ABS*	00000000 __flash_rwdata_start
08016730 g     F .text	00000060 OSTimeSet
0801770c g     F .text	00000040 alt_up_character_lcd_send_cmd
0800baf4 g     F .text	00000088 .hidden __eqdf2
0800e114 g     F .text	00000610 OSEventPendMulti
08023ec4 g       *ABS*	00000000 __alt_heap_start
08018788 g     F .text	00000024 OSTaskCreateHook
0801cba0 g     O .bss	00002000 task1_stk
080006d8 g     F .text	0000003c printf
0801aeda g     O .rwdata	00000002 OSMboxEn
0800e77c g     F .text	0000004c OSIntEnter
08009b14 g     F .text	0000009c _wcrtomb_r
08007c40 g     F .text	0000005c __sseek
08004b24 g     F .text	00000010 __sinit
080099bc g     F .text	00000140 __swbuf_r
0801aeea g     O .rwdata	00000002 OSQEn
080055ec g     F .text	0000007c _setlocale_r
0800498c g     F .text	00000068 __sfmoreglue
0800dde8 g     F .text	000000cc __malloc_unlock
080187f0 g     F .text	00000020 OSTaskStatHook
0801cb1c g     O .bss	00000001 OSLockNesting
0801af28 g     O .rwdata	00000002 OSDataSize
0801cb1d g     O .bss	00000001 OSRunning
080062bc g     F .text	0000015c memmove
08018830 g     F .text	00000020 OSInitHookBegin
0801af20 g     O .rwdata	00000002 OSTmrSize
08004b0c g     F .text	00000018 _cleanup
08006540 g     F .text	000000a8 _Balloc
0801cb20 g     O .bss	00000004 OSIdleCtr
0800bb7c g     F .text	000000dc .hidden __gtdf2
08018538 g     F .text	00000024 altera_nios2_gen2_irq_init
08018608 g       .text	00000000 OSStartTsk
08017698 g     F .text	00000074 get_DDRAM_addr
0800fbf4 g     F .text	000002d4 OS_TCBInit
08000000 g     F .entry	0000001c __reset
0801cad4 g     O .bss	00000004 edge_capture
0801af26 g     O .rwdata	00000002 OSTmrWheelTblSize
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801aec6 g     O .rwdata	00000002 OSEventSize
0801cb24 g     O .bss	00000001 OSPrioHighRdy
0800984c g     F .text	0000005c _fstat_r
080187ac g     F .text	00000024 OSTaskDelHook
0801caf4 g     O .bss	00000004 errno
08007bbc g     F .text	00000008 __seofread
080185e8 g       .text	00000000 OSStartHighRdy
080151d8 g     F .text	000001e4 OSTaskCreateExt
08010edc g     F .text	00000060 OSFlagPendGetFlagsRdy
0801af06 g     O .rwdata	00000002 OSTaskStatStkSize
08010058 g     F .text	00000308 OSFlagAccept
08013544 g     F .text	000000b8 OSQFlush
08012fd8 g     F .text	00000140 OSQAccept
0801cb04 g     O .bss	00000004 alt_argv
08022e78 g       *ABS*	00000000 _gp
0801502c g     F .text	000001ac OSTaskCreate
08014b3c g     F .text	000004f0 OSTaskChangePrio
0801cb18 g     O .bss	00000004 alt_heapsem
0800fec8 g     F .text	00000190 OSDebugInit
080153bc g     F .text	00000344 OSTaskDel
08011ec0 g     F .text	000001a4 OSMutexAccept
08019c60 g     O .rwdata	00000180 alt_fd_list
08020ca0 g     O .bss	00000370 OSFlagTbl
0800f1a0 g     F .text	000000b8 OS_EventTaskRemove
08017ea0 g     F .text	00000090 alt_find_dev
08006174 g     F .text	00000148 memcpy
0801aef0 g     O .rwdata	00000002 OSRdyTblSize
080178b4 g     F .text	00000050 alt_up_character_lcd_write_fd
080047dc g     F .text	0000000c _cleanup_r
0800cde0 g     F .text	000000dc .hidden __floatsidf
080180c4 g     F .text	0000007c alt_io_redirect
0800bc58 g     F .text	000000f4 .hidden __ltdf2
08018ebc g       *ABS*	00000000 __DTOR_END__
080007d4 g     F .text	00000014 puts
08017f64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800deb4 g     F .text	00000120 OSEventNameGet
0801aed4 g     O .rwdata	00000002 OSFlagMax
08007aa0 g     F .text	00000074 __fpclassifyd
08012528 g     F .text	0000059c OSMutexPend
08007320 g     F .text	000000a4 __ratio
0800e7c8 g     F .text	000000f8 OSIntExit
080092f0 g     F .text	0000001c __vfiprintf_internal
0801af0e g     O .rwdata	00000002 OSTCBSize
0801cb25 g     O .bss	00000001 OSPrioCur
08017024 g     F .text	000002bc altera_avalon_jtag_uart_read
080006a8 g     F .text	00000030 _printf_r
00200000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a8a4 g     F .text	00000064 .hidden __udivsi3
0800d4c8 g     F .text	000000a4 isatty
0801aef4 g     O .rwdata	00000002 OSStkWidth
08019048 g     O .rodata	000000c8 __mprec_tens
0801aee8 g     O .rwdata	00000002 OSPtrSize
08005668 g     F .text	0000000c __locale_charset
0801aec8 g     O .rwdata	00000002 OSEventTblSize
0801855c g       .text	00000000 OSCtxSw
08018a98 g     F .text	00000090 alt_icache_flush
0801caf0 g     O .bss	00000004 __malloc_top_pad
0801cb28 g     O .bss	00000004 OSTCBList
0801caf8 g     O .bss	00000004 alt_fd_list_lock
0801ae80 g     O .rwdata	00000004 __mb_cur_max
08005698 g     F .text	0000000c _localeconv_r
0800694c g     F .text	0000003c __i2b
08004fa8 g     F .text	000004bc __sfvwrite_r
08021010 g     O .bss	00000c30 OSMemTbl
0801cb2c g     O .bss	00000001 OSTickStepState
08007b14 g     F .text	00000054 _sbrk_r
0801aeec g     O .rwdata	00000002 OSQMax
0801222c g     F .text	000002fc OSMutexDel
08021c40 g     O .bss	00000800 OSTaskStatStk
08011a30 g     F .text	000000f0 OSMemNameGet
0801aecc g     O .rwdata	00000002 OSFlagEn
0800995c g     F .text	00000060 _read_r
0801af12 g     O .rwdata	00000002 OSTimeTickHookEn
080139f4 g     F .text	00000168 OSQPost
080116c8 g     F .text	000000a4 OS_FlagUnlink
0801aea0 g     O .rwdata	00000004 alt_max_fd
0800f78c g     F .text	00000068 OS_MemCopy
0800f7f4 g     F .text	000000d0 OS_Sched
08009540 g     F .text	000000f0 _fclose_r
08011940 g     F .text	000000f0 OSMemGet
080159e8 g     F .text	000001b4 OSTaskNameSet
080047a4 g     F .text	00000030 fflush
0801caec g     O .bss	00000004 __malloc_max_sbrked_mem
0801cb30 g     O .bss	00000004 OSCtxSwCtr
08018810 g     F .text	00000020 OSTimeTickHook
0801aed6 g     O .rwdata	00000002 OSFlagNameSize
0800f258 g     F .text	00000100 OS_EventTaskRemoveMulti
0800a960 g     F .text	000008ac .hidden __adddf3
0800f050 g     F .text	00000150 OS_EventTaskWaitMulti
080070c8 g     F .text	0000010c __b2d
0801aeee g     O .rwdata	00000002 OSQSize
0800a274 g     F .text	00000538 .hidden __umoddi3
0800d694 g     F .text	000000d4 lseek
080144a4 g     F .text	0000020c OSSemPend
0801ae78 g     O .rwdata	00000004 _global_impure_ptr
0800753c g     F .text	00000564 _realloc_r
0801aed8 g     O .rwdata	00000002 OSLowestPrio
08023ec4 g       *ABS*	00000000 __bss_end
0800d39c g     F .text	000000f0 alt_iic_isr_register
08018890 g     F .text	00000024 OSTCBInitHook
0801af1e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
08018430 g     F .text	00000108 alt_tick
08009cfc g     F .text	00000578 .hidden __udivdi3
080097a8 g     F .text	00000024 _fputwc_r
0801aec0 g     O .rwdata	00000002 OSEventEn
08019020 g     O .rodata	00000028 __mprec_bigtens
08006730 g     F .text	00000104 __s2b
0801af1a g     O .rwdata	00000002 OSTmrCfgNameSize
0800cebc g     F .text	000000a8 .hidden __floatunsidf
08006e08 g     F .text	00000060 __mcmp
08004b44 g     F .text	00000018 __fp_lock_all
0800d350 g     F .text	0000004c alt_ic_irq_enabled
080114f4 g     F .text	000000e0 OS_FlagInit
08018394 g     F .text	0000009c alt_alarm_stop
0801aefc g     O .rwdata	00000002 OSTaskIdleStkSize
0801cafc g     O .bss	00000004 alt_irq_active
080140dc g     F .text	000000b0 OSSemAccept
08011c34 g     F .text	000000d8 OSMemPut
0801176c g     F .text	000001d4 OSMemCreate
0801cb34 g     O .bss	00000004 OSIdleCtrMax
080000fc g     F .exceptions	000000d4 alt_irq_handler
08019c38 g     O .rwdata	00000028 alt_dev_null
0801af10 g     O .rwdata	00000002 OSTicksPerSec
08017b54 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0801855c g       .text	00000000 OSIntCtxSw
08017cb8 g     F .text	00000048 alt_dcache_flush_all
08006834 g     F .text	00000068 __hi0bits
0800cd60 g     F .text	00000080 .hidden __fixdfsi
0801cb38 g     O .bss	00000004 OSTCBFreeList
0801af34 g       *ABS*	00000000 __ram_rwdata_end
080146b0 g     F .text	0000016c OSSemPendAbort
0801ae98 g     O .rwdata	00000008 alt_dev_list
0800daac g     F .text	000000f8 write
0801af14 g     O .rwdata	00000002 OSVersionNbr
08019394 g       *ABS*	00000000 __ram_rodata_end
0800d13c g     F .text	000000b0 fstat
0800bc58 g     F .text	000000f4 .hidden __ledf2
0801aebc g     O .rwdata	00000004 OSEndiannessTest
08006b80 g     F .text	00000140 __pow5mult
08007e94 g     F .text	0000145c ___vfiprintf_internal_r
0801cae4 g     O .bss	00000004 __nlocale_changed
0800a908 g     F .text	00000058 .hidden __umodsi3
0801aece g     O .rwdata	00000002 OSFlagGrpSize
08023ec4 g       *ABS*	00000000 end
080169dc g     F .text	00000148 altera_avalon_jtag_uart_init
0800fa5c g     F .text	000000cc OS_TaskStat
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08018ebc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0801761c g     F .text	0000007c alt_avalon_timer_sc_init
0800cf64 g     F .text	00000064 .hidden __clzsi2
080172e0 g     F .text	000002c4 altera_avalon_jtag_uart_write
08004b34 g     F .text	00000004 __sfp_lock_acquire
08006090 g     F .text	000000e4 memchr
0800f738 g     F .text	00000054 OS_MemClr
080177c0 g     F .text	0000007c alt_up_character_lcd_write
08000880 g     F .text	000021f8 ___vfprintf_internal_r
0801862c g     F .text	0000015c OSTaskStkInit
08000290 g     F .text	0000009c task1
08004c98 g     F .text	00000310 _free_r
08005674 g     F .text	00000010 __locale_mb_cur_max
0800eda8 g     F .text	00000198 OS_EventTaskRdy
08018d08 g     F .text	00000180 __call_exitprocs
0801cb3c g     O .bss	00000001 OSCPUUsage
0801cae0 g     O .bss	00000004 __mlocale_changed
0801ae84 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0800032c g     F .text	0000009c task2
0801cb70 g     O .bss	00000004 _alt_tick_rate
080135fc g     F .text	0000028c OSQPend
080162a8 g     F .text	00000104 OSTimeDly
08006cc0 g     F .text	00000148 __lshift
0801cb74 g     O .bss	00000004 _alt_nticks
0800d860 g     F .text	000000fc read
080167fc g     F .text	0000007c alt_sys_init
08017a04 g     F .text	0000008c alt_up_character_lcd_shift_display
08018bf0 g     F .text	00000118 __register_exitproc
0801cb3d g     O .bss	00000001 OSTaskCtr
080163ac g     F .text	00000154 OSTimeDlyHMSM
08006988 g     F .text	000001f8 __multiply
08017a90 g     F .text	0000008c alt_up_character_lcd_erase_pos
08016ecc g     F .text	00000068 altera_avalon_jtag_uart_close
08019394 g       *ABS*	00000000 __ram_rwdata_start
08018ebc g       *ABS*	00000000 __ram_rodata_start
0801cb78 g     O .bss	00000028 __malloc_current_mallinfo
0801aec2 g     O .rwdata	00000002 OSEventMax
080071d4 g     F .text	0000014c __d2b
0801481c g     F .text	00000110 OSSemPost
0800e94c g     F .text	000000dc OSSchedUnlock
08016878 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080189bc g     F .text	000000dc alt_get_fd
0801cb40 g     O .bss	00000004 OSMemFreeList
0800ea98 g     F .text	000000b0 OSStatInit
080112d0 g     F .text	000000c4 OSFlagQuery
0801aef8 g     O .rwdata	00000002 OSTaskCreateExtEn
08009428 g     F .text	00000054 _close_r
08018b74 g     F .text	0000007c memcmp
0800ed88 g     F .text	00000020 OS_Dummy
08016938 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08023ec4 g       *ABS*	00000000 __alt_stack_base
08016988 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002b50 g     F .text	00000154 __swsetup_r
08022440 g     O .bss	000001e0 OSQTbl
0800b20c g     F .text	000008e8 .hidden __divdf3
080049f4 g     F .text	00000118 __sfp
08007438 g     F .text	00000078 __copybits
08019830 g     O .rwdata	00000408 __malloc_av_
08004b40 g     F .text	00000004 __sinit_lock_release
0801cad8 g     O .bss	00000004 ledMutex
0801cb44 g     O .bss	00000004 OSTCBHighRdy
0800bd4c g     F .text	00000718 .hidden __muldf3
08007b68 g     F .text	00000054 __sread
0801cb48 g     O .bss	00000004 OSQFreeList
080188b4 g     F .text	00000108 alt_find_file
08017d3c g     F .text	000000a4 alt_dev_llist_insert
0800dcc8 g     F .text	00000120 __malloc_lock
0800d9c0 g     F .text	000000b0 sbrk
0800dfd4 g     F .text	00000140 OSEventNameSet
08004748 g     F .text	0000005c _fflush_r
0800947c g     F .text	000000c4 _calloc_r
0801cb4c g     O .bss	00000001 OSRdyGrp
0801cad4 g       *ABS*	00000000 __bss_start
08006418 g     F .text	00000128 memset
080005d0 g     F .text	000000d8 main
0801cb08 g     O .bss	00000004 alt_envp
0801cae8 g     O .bss	00000004 __malloc_max_total_mem
080168d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009afc g     F .text	00000018 __swbuf
08019250 g     O .rodata	00000100 OSUnMapTbl
0801aef2 g     O .rwdata	00000002 OSSemEn
08017978 g     F .text	0000008c alt_up_character_lcd_shift_cursor
08010f3c g     F .text	00000394 OSFlagPost
08007c9c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08009630 g     F .text	00000014 fclose
0800ef40 g     F .text	00000110 OS_EventTaskWait
0801eba0 g     O .bss	00002000 task2_stk
0800fb28 g     F .text	000000cc OS_TaskStatStkChk
08015700 g     F .text	00000150 OSTaskDelReq
08002ea4 g     F .text	00001688 _dtoa_r
08005884 g     F .text	0000080c _malloc_r
08009c70 g     F .text	00000030 __ascii_wctomb
08012064 g     F .text	000001c8 OSMutexCreate
0801aea4 g     O .rwdata	00000004 alt_errno
0800ea28 g     F .text	00000070 OSStart
0800dc68 g     F .text	00000060 __env_unlock
08005464 g     F .text	000000c4 _fwalk
08015b9c g     F .text	000001d4 OSTaskResume
08011d0c g     F .text	000000e8 OSMemQuery
0801af04 g     O .rwdata	00000002 OSTaskStatEn
0801aede g     O .rwdata	00000002 OSMemMax
08013b5c g     F .text	00000170 OSQPostFront
0800a7ac g     F .text	00000084 .hidden __divsi3
0801cb4d g     O .bss	00000003 OSRdyTbl
0801aeb8 g     O .rwdata	00000002 OSDebugEn
08017784 g     F .text	0000003c alt_up_character_lcd_open_dev
08004b74 g     F .text	00000124 _malloc_trim_r
08018ebc g       *ABS*	00000000 __CTOR_END__
0801aed0 g     O .rwdata	00000002 OSFlagNodeSize
0801af18 g     O .rwdata	00000002 OSTmrCfgMax
0801774c g     F .text	00000038 alt_up_character_lcd_init
08007ca4 g     F .text	000000dc strcmp
08013118 g     F .text	000001ac OSQCreate
08015850 g     F .text	00000198 OSTaskNameGet
08018ebc g       *ABS*	00000000 __flash_rodata_start
08013ccc g     F .text	0000020c OSQPostOpt
0800eb48 g     F .text	00000220 OSTimeTick
0801af00 g     O .rwdata	00000002 OSTaskMax
08018ebc g       *ABS*	00000000 __DTOR_LIST__
0801418c g     F .text	000000d8 OSSemCreate
0801af24 g     O .rwdata	00000002 OSTmrWheelSize
08012cdc g     F .text	0000016c OSMutexQuery
0800baf4 g     F .text	00000088 .hidden __nedf2
0801aefa g     O .rwdata	00000002 OSTaskDelEn
0801492c g     F .text	00000110 OSSemQuery
080132c4 g     F .text	00000280 OSQDel
08013888 g     F .text	0000016c OSQPendAbort
080167c4 g     F .text	00000038 alt_irq_init
0800d95c g     F .text	00000064 alt_release_fd
08017b1c g     F .text	00000038 alt_up_character_lcd_cursor_off
08019130 g     O .rodata	00000100 .hidden __clz_tab
0801cadc g     O .bss	00000004 _PathLocale
08018b28 g     F .text	00000014 atexit
080093c8 g     F .text	00000060 _write_r
0800e8c0 g     F .text	0000008c OSSchedLock
080056a4 g     F .text	00000018 setlocale
08010360 g     F .text	00000108 OSFlagCreate
0801ae7c g     O .rwdata	00000004 _impure_ptr
0801cb00 g     O .bss	00000004 alt_argc
0800452c g     F .text	0000021c __sflush_r
08017e40 g     F .text	00000060 _do_dtors
08005690 g     F .text	00000008 __locale_cjk_lang
0801aeca g     O .rwdata	00000002 OSEventMultiEn
08010468 g     F .text	00000248 OSFlagDel
0801cb50 g     O .bss	00000004 OSEventFreeList
08000020 g       .exceptions	00000000 alt_irq_entry
08007064 g     F .text	00000064 __ulp
08010924 g     F .text	000005b8 OSFlagPend
0801af16 g     O .rwdata	00000002 OSTmrEn
08004b5c g     F .text	00000018 __fp_unlock_all
0801ae90 g     O .rwdata	00000008 alt_fs_list
0800f938 g     F .text	00000074 OS_StrCopy
0801aee0 g     O .rwdata	00000002 OSMemNameSize
08018850 g     F .text	00000020 OSInitHookEnd
08000020 g       *ABS*	00000000 __ram_exceptions_start
0801af0c g     O .rwdata	00000002 OSTCBPrioTblMax
080056bc g     F .text	0000000c localeconv
0801af08 g     O .rwdata	00000002 OSTaskStatStkChkEn
0800d1ec g     F .text	00000050 alt_ic_isr_register
0801aedc g     O .rwdata	00000002 OSMemEn
0801aee6 g     O .rwdata	00000002 OSMutexEn
0801af34 g       *ABS*	00000000 _edata
08023ec4 g       *ABS*	00000000 _end
0801cb54 g     O .bss	00000001 OSIntNesting
08009644 g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
08016f34 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08016500 g     F .text	000001d4 OSTimeDlyResume
080107d8 g     F .text	0000014c OSFlagNameSet
08015d70 g     F .text	000001c0 OSTaskStkChk
0800d2c4 g     F .text	0000008c alt_ic_irq_disable
0801aee2 g     O .rwdata	00000002 OSMemSize
08007bc4 g     F .text	0000007c __swrite
0801ae88 g     O .rwdata	00000004 __malloc_trim_threshold
08005684 g     F .text	0000000c __locale_msgcharset
0801cb58 g     O .bss	00000004 OSTCBCur
08018b3c g     F .text	00000038 exit
08012ac4 g     F .text	00000218 OSMutexPost
0801aee4 g     O .rwdata	00000002 OSMemTblSize
08005528 g     F .text	000000c4 _fwalk_reent
08006e68 g     F .text	000001fc __mdiff
0800a830 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004b38 g     F .text	00000004 __sfp_lock_release
0800e724 g     F .text	00000058 OSInit
08000000 g       *ABS*	00000000 __alt_mem_sdram
08016114 g     F .text	00000124 OSTaskQuery
0801783c g     F .text	00000078 alt_up_character_lcd_string
08014034 g     F .text	000000a8 OS_QInit
0800f9ac g     F .text	00000054 OS_StrLen
08011b20 g     F .text	00000114 OSMemNameSet
0801aefe g     O .rwdata	00000002 OSTaskProfileEn
0801cb5c g     O .bss	00000004 OSTime
08022620 g     O .bss	00000800 OSTaskIdleStk
08018e88 g     F .text	00000034 _exit
08017b8c g     F .text	0000012c alt_alarm_start
080106b0 g     F .text	00000128 OSFlagNameGet
080166d4 g     F .text	0000005c OSTimeGet
080056c8 g     F .text	000001bc __smakebuf_r
080007e8 g     F .text	00000098 strlen
080187d0 g     F .text	00000020 OSTaskSwHook
08018240 g     F .text	00000154 open
08022e20 g     O .bss	00000b40 OSEventTbl
0800bb7c g     F .text	000000dc .hidden __gedf2
08023960 g     O .bss	00000510 OSTCBTbl
08014a3c g     F .text	00000100 OSSemSet
0801ae8c g     O .rwdata	00000004 __wctomb
08007e7c g     F .text	00000018 __sprint_r
08017f30 g     F .text	00000034 alt_icache_flush_all
08017904 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0801aea8 g     O .rwdata	00000004 alt_priority_mask
08014264 g     F .text	00000240 OSSemDel
0801cb60 g     O .bss	00000004 OSFlagFreeList
0800d23c g     F .text	00000088 alt_ic_irq_enable
0801aec4 g     O .rwdata	00000002 OSEventNameSize
08002a78 g     F .text	0000001c __vfprintf_internal
0801cb64 g     O .bss	00000001 OSStatRdy
08023e70 g     O .bss	00000054 OSTCBPrioTbl
08009ca0 g     F .text	0000005c _wctomb_r
0800dba4 g     F .text	000000c4 __env_lock
0801af0a g     O .rwdata	00000002 OSTaskSwHookEn
0800c464 g     F .text	000008fc .hidden __subdf3
0800689c g     F .text	000000b0 __lo0bits
0801af2c g     O .rwdata	00000008 alt_alarm_list
0801aed2 g     O .rwdata	00000002 OSFlagWidth
08017de0 g     F .text	00000060 _do_ctors
08009bb0 g     F .text	000000c0 wcrtomb
0800d004 g     F .text	000000d0 close
0801cb10 g     O .bss	00000004 alt_envsem
0801cb68 g     O .bss	00000004 OSIdleCtrRun
0800ed68 g     F .text	00000020 OSVersion
0801af1c g     O .rwdata	00000002 OSTmrCfgWheelSize
0800d5d4 g     F .text	00000084 alt_load
08016238 g     F .text	00000070 OS_TaskStkClr
0801aef6 g     O .rwdata	00000002 OSTaskCreateEn
0800f358 g     F .text	00000068 OS_EventWaitListInit
080097cc g     F .text	00000080 fputwc
08018870 g     F .text	00000020 OSTaskIdleHook
08004b3c g     F .text	00000004 __sinit_lock_acquire
08006610 g     F .text	00000120 __multadd
08015f30 g     F .text	000001e4 OSTaskSuspend
080065e8 g     F .text	00000028 _Bfree
0800fa00 g     F .text	0000005c OS_TaskIdle
0801af22 g     O .rwdata	00000002 OSTmrTblSize
08013ed8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	800e77c0 	call	800e77c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	1082e804 	addi	r2,r2,2976
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	1082e804 	addi	r2,r2,2976
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	800e7c80 	call	800e7c8 <OSIntExit>
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a73d17 	ldw	r2,-25356(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a73d17 	ldw	r2,-25356(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xf8000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 8000260:	d68b9e14 	ori	gp,gp,11896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	10b2b514 	ori	r2,r2,51924

    movhi r3, %hi(__bss_end)
 800026c:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 8000270:	18cfb114 	ori	r3,r3,16068

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xf8000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800d5d40 	call	800d5d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800d7680 	call	800d768 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xf800028c>

08000290 <task1>:
 *
 */


void task1(void* pdata)
{
 8000290:	defffb04 	addi	sp,sp,-20
 8000294:	dfc00415 	stw	ra,16(sp)
 8000298:	df000315 	stw	fp,12(sp)
 800029c:	df000304 	addi	fp,sp,12
 80002a0:	e13fff15 	stw	r4,-4(fp)
    INT8U err;
    while (1)
    {
        INT32U timestamp = OSTimeGet();
 80002a4:	80166d40 	call	80166d4 <OSTimeGet>
 80002a8:	e0bffd15 	stw	r2,-12(fp)
        printf("Task1 is running at timestamp: %lu\n", timestamp);
 80002ac:	e17ffd17 	ldw	r5,-12(fp)
 80002b0:	010200b4 	movhi	r4,2050
 80002b4:	2123af04 	addi	r4,r4,-28996
 80002b8:	80006d80 	call	80006d8 <printf>
        // Request ownership of the mutex
        OSMutexPend(ledMutex, 0, &err);
 80002bc:	d0a71817 	ldw	r2,-25504(gp)
 80002c0:	e0fffe04 	addi	r3,fp,-8
 80002c4:	180d883a 	mov	r6,r3
 80002c8:	000b883a 	mov	r5,zero
 80002cc:	1009883a 	mov	r4,r2
 80002d0:	80125280 	call	8012528 <OSMutexPend>
        IOWR(LEDS_BASE, 0, 0x1);  // Turn on LED 1
 80002d4:	00c00044 	movi	r3,1
 80002d8:	00800834 	movhi	r2,32
 80002dc:	10840804 	addi	r2,r2,4128
 80002e0:	10c00035 	stwio	r3,0(r2)
        OSTimeDlyHMSM(0, 0, 3, 0);
 80002e4:	000f883a 	mov	r7,zero
 80002e8:	018000c4 	movi	r6,3
 80002ec:	000b883a 	mov	r5,zero
 80002f0:	0009883a 	mov	r4,zero
 80002f4:	80163ac0 	call	80163ac <OSTimeDlyHMSM>
        IOWR(LEDS_BASE, 0, 0x0);  // Turn off LED 1
 80002f8:	0007883a 	mov	r3,zero
 80002fc:	00800834 	movhi	r2,32
 8000300:	10840804 	addi	r2,r2,4128
 8000304:	10c00035 	stwio	r3,0(r2)


        OSTimeDlyHMSM(0, 0, 3, 0);  // Sleep for 3 seconds before repeating
 8000308:	000f883a 	mov	r7,zero
 800030c:	018000c4 	movi	r6,3
 8000310:	000b883a 	mov	r5,zero
 8000314:	0009883a 	mov	r4,zero
 8000318:	80163ac0 	call	80163ac <OSTimeDlyHMSM>
        // Release ownership of the mutex
        OSMutexPost(ledMutex);
 800031c:	d0a71817 	ldw	r2,-25504(gp)
 8000320:	1009883a 	mov	r4,r2
 8000324:	8012ac40 	call	8012ac4 <OSMutexPost>
    }
 8000328:	003fde06 	br	80002a4 <__alt_data_end+0xf80002a4>

0800032c <task2>:
}

void task2(void* pdata)
{
 800032c:	defffb04 	addi	sp,sp,-20
 8000330:	dfc00415 	stw	ra,16(sp)
 8000334:	df000315 	stw	fp,12(sp)
 8000338:	df000304 	addi	fp,sp,12
 800033c:	e13fff15 	stw	r4,-4(fp)
    INT8U err;
    while (1)
    {
        INT32U timestamp = OSTimeGet();
 8000340:	80166d40 	call	80166d4 <OSTimeGet>
 8000344:	e0bffd15 	stw	r2,-12(fp)
        printf("Task2 is running at timestamp: %lu\n", timestamp);
 8000348:	e17ffd17 	ldw	r5,-12(fp)
 800034c:	010200b4 	movhi	r4,2050
 8000350:	2123b804 	addi	r4,r4,-28960
 8000354:	80006d80 	call	80006d8 <printf>

        OSMutexPend(ledMutex, 0, &err);
 8000358:	d0a71817 	ldw	r2,-25504(gp)
 800035c:	e0fffe04 	addi	r3,fp,-8
 8000360:	180d883a 	mov	r6,r3
 8000364:	000b883a 	mov	r5,zero
 8000368:	1009883a 	mov	r4,r2
 800036c:	80125280 	call	8012528 <OSMutexPend>
        IOWR(LEDS_BASE, 0, 0x2);  // Turn on LED 2
 8000370:	00c00084 	movi	r3,2
 8000374:	00800834 	movhi	r2,32
 8000378:	10840804 	addi	r2,r2,4128
 800037c:	10c00035 	stwio	r3,0(r2)
        OSTimeDlyHMSM(0, 0, 3, 0);
 8000380:	000f883a 	mov	r7,zero
 8000384:	018000c4 	movi	r6,3
 8000388:	000b883a 	mov	r5,zero
 800038c:	0009883a 	mov	r4,zero
 8000390:	80163ac0 	call	80163ac <OSTimeDlyHMSM>
        IOWR(LEDS_BASE, 0, 0x0);  // Turn off LED 2
 8000394:	0007883a 	mov	r3,zero
 8000398:	00800834 	movhi	r2,32
 800039c:	10840804 	addi	r2,r2,4128
 80003a0:	10c00035 	stwio	r3,0(r2)


        OSTimeDlyHMSM(0, 0, 3, 0);  // Sleep for 3 seconds before repeating
 80003a4:	000f883a 	mov	r7,zero
 80003a8:	018000c4 	movi	r6,3
 80003ac:	000b883a 	mov	r5,zero
 80003b0:	0009883a 	mov	r4,zero
 80003b4:	80163ac0 	call	80163ac <OSTimeDlyHMSM>
        OSMutexPost(ledMutex);
 80003b8:	d0a71817 	ldw	r2,-25504(gp)
 80003bc:	1009883a 	mov	r4,r2
 80003c0:	8012ac40 	call	8012ac4 <OSMutexPost>
    }
 80003c4:	003fde06 	br	8000340 <__alt_data_end+0xf8000340>

080003c8 <pio_init>:
 **********************
 **** KEY ISR CODE ****
 **********************
 **********************/

static void pio_init() {
 80003c8:	defffc04 	addi	sp,sp,-16
 80003cc:	dfc00315 	stw	ra,12(sp)
 80003d0:	df000215 	stw	fp,8(sp)
 80003d4:	df000204 	addi	fp,sp,8
	// Initialize interrupt function
	void* edge_capture_ptr = (void*)&(edge_capture); // get edge capture pointer ready for use
 80003d8:	d0a71704 	addi	r2,gp,-25508
 80003dc:	e0bfff15 	stw	r2,-4(fp)
	// Turn edge capture pointer in a void pointer (this is what the alt_ic_isr_register() takes in)
	// Key0 is system reset so only mask out Keys 3-1
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0X7); // Bit masks for Key 3,2,1
 80003e0:	00c001c4 	movi	r3,7
 80003e4:	00800834 	movhi	r2,32
 80003e8:	10841a04 	addi	r2,r2,4200
 80003ec:	10c00035 	stwio	r3,0(r2)
	// Clear pushbutton key's edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0X00); // clear edge capture register
 80003f0:	0007883a 	mov	r3,zero
 80003f4:	00800834 	movhi	r2,32
 80003f8:	10841b04 	addi	r2,r2,4204
 80003fc:	10c00035 	stwio	r3,0(r2)
	// register interrupt handler with values for keys, edge capture pointer, etc.
	alt_ic_isr_register(KEYS_IRQ_INTERRUPT_CONTROLLER_ID, KEYS_IRQ, handle_key_interrupts, edge_capture_ptr, 0);
 8000400:	d8000015 	stw	zero,0(sp)
 8000404:	e1ffff17 	ldw	r7,-4(fp)
 8000408:	01820034 	movhi	r6,2048
 800040c:	31810d04 	addi	r6,r6,1076
 8000410:	000b883a 	mov	r5,zero
 8000414:	0009883a 	mov	r4,zero
 8000418:	800d1ec0 	call	800d1ec <alt_ic_isr_register>
}
 800041c:	0001883a 	nop
 8000420:	e037883a 	mov	sp,fp
 8000424:	dfc00117 	ldw	ra,4(sp)
 8000428:	df000017 	ldw	fp,0(sp)
 800042c:	dec00204 	addi	sp,sp,8
 8000430:	f800283a 	ret

08000434 <handle_key_interrupts>:

static void handle_key_interrupts(void* context) {
 8000434:	defffc04 	addi	sp,sp,-16
 8000438:	dfc00315 	stw	ra,12(sp)
 800043c:	df000215 	stw	fp,8(sp)
 8000440:	df000204 	addi	fp,sp,8
 8000444:	e13fff15 	stw	r4,-4(fp)
	// Interrupt Handler
	// Cast context to edge_capture's type
	// Make it volatile so compiler doesn't try to optimize it
	volatile int* edge_capture_ptr = (volatile int*) context;
 8000448:	e0bfff17 	ldw	r2,-4(fp)
 800044c:	e0bffe15 	stw	r2,-8(fp)
	// Read the edge capture register on the button PIO and store the value
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 8000450:	00800834 	movhi	r2,32
 8000454:	10841b04 	addi	r2,r2,4204
 8000458:	10c00037 	ldwio	r3,0(r2)
 800045c:	e0bffe17 	ldw	r2,-8(fp)
 8000460:	10c00015 	stw	r3,0(r2)
	switch (*edge_capture_ptr) {
 8000464:	e0bffe17 	ldw	r2,-8(fp)
 8000468:	10800017 	ldw	r2,0(r2)
 800046c:	10c000a0 	cmpeqi	r3,r2,2
 8000470:	1800061e 	bne	r3,zero,800048c <handle_key_interrupts+0x58>
 8000474:	10c00120 	cmpeqi	r3,r2,4
 8000478:	1800061e 	bne	r3,zero,8000494 <handle_key_interrupts+0x60>
 800047c:	10800060 	cmpeqi	r2,r2,1
 8000480:	10000626 	beq	r2,zero,800049c <handle_key_interrupts+0x68>
	case 0x1:
		key1_isr();
 8000484:	80004e00 	call	80004e0 <key1_isr>
		break;
 8000488:	00000f06 	br	80004c8 <handle_key_interrupts+0x94>
	case 0x2:
		key2_isr();
 800048c:	80005300 	call	8000530 <key2_isr>
		break;
 8000490:	00000d06 	br	80004c8 <handle_key_interrupts+0x94>
	case 0x4:
		key3_isr();
 8000494:	80005800 	call	8000580 <key3_isr>
		break;
 8000498:	00000b06 	br	80004c8 <handle_key_interrupts+0x94>
	default:
		printf("UNKNOWN INTERRUPT..., received: %d\n", *edge_capture_ptr);
 800049c:	e0bffe17 	ldw	r2,-8(fp)
 80004a0:	10800017 	ldw	r2,0(r2)
 80004a4:	100b883a 	mov	r5,r2
 80004a8:	010200b4 	movhi	r4,2050
 80004ac:	2123c104 	addi	r4,r4,-28924
 80004b0:	80006d80 	call	80006d8 <printf>
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x00);
 80004b4:	0007883a 	mov	r3,zero
 80004b8:	00800834 	movhi	r2,32
 80004bc:	10841b04 	addi	r2,r2,4204
 80004c0:	10c00035 	stwio	r3,0(r2)
		break;
 80004c4:	0001883a 	nop
	}
	return;
 80004c8:	0001883a 	nop
}
 80004cc:	e037883a 	mov	sp,fp
 80004d0:	dfc00117 	ldw	ra,4(sp)
 80004d4:	df000017 	ldw	fp,0(sp)
 80004d8:	dec00204 	addi	sp,sp,8
 80004dc:	f800283a 	ret

080004e0 <key1_isr>:


static void key1_isr() {
 80004e0:	defffe04 	addi	sp,sp,-8
 80004e4:	dfc00115 	stw	ra,4(sp)
 80004e8:	df000015 	stw	fp,0(sp)
 80004ec:	d839883a 	mov	fp,sp
	// Interrupt Service Routine - Key 1


	printf("\nKEY 1 ISR RAN!\n");
 80004f0:	010200b4 	movhi	r4,2050
 80004f4:	2123ca04 	addi	r4,r4,-28888
 80004f8:	80007d40 	call	80007d4 <puts>

	// Write to the edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x00);
 80004fc:	0007883a 	mov	r3,zero
 8000500:	00800834 	movhi	r2,32
 8000504:	10841b04 	addi	r2,r2,4204
 8000508:	10c00035 	stwio	r3,0(r2)
	// Read the PIO to delay the ISR's exit
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 800050c:	00800834 	movhi	r2,32
 8000510:	10841b04 	addi	r2,r2,4204
 8000514:	10800037 	ldwio	r2,0(r2)
	return;
 8000518:	0001883a 	nop
}
 800051c:	e037883a 	mov	sp,fp
 8000520:	dfc00117 	ldw	ra,4(sp)
 8000524:	df000017 	ldw	fp,0(sp)
 8000528:	dec00204 	addi	sp,sp,8
 800052c:	f800283a 	ret

08000530 <key2_isr>:

static void key2_isr() {
 8000530:	defffe04 	addi	sp,sp,-8
 8000534:	dfc00115 	stw	ra,4(sp)
 8000538:	df000015 	stw	fp,0(sp)
 800053c:	d839883a 	mov	fp,sp
	// Interrupt Service Routine - Key 2


	printf("\nKEY 2 ISR RAN!\n");
 8000540:	010200b4 	movhi	r4,2050
 8000544:	2123ce04 	addi	r4,r4,-28872
 8000548:	80007d40 	call	80007d4 <puts>

	// Write to the edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x00);
 800054c:	0007883a 	mov	r3,zero
 8000550:	00800834 	movhi	r2,32
 8000554:	10841b04 	addi	r2,r2,4204
 8000558:	10c00035 	stwio	r3,0(r2)
	// Read the PIO to delay the ISR's exit
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 800055c:	00800834 	movhi	r2,32
 8000560:	10841b04 	addi	r2,r2,4204
 8000564:	10800037 	ldwio	r2,0(r2)
	return;
 8000568:	0001883a 	nop
}
 800056c:	e037883a 	mov	sp,fp
 8000570:	dfc00117 	ldw	ra,4(sp)
 8000574:	df000017 	ldw	fp,0(sp)
 8000578:	dec00204 	addi	sp,sp,8
 800057c:	f800283a 	ret

08000580 <key3_isr>:

static void key3_isr() {
 8000580:	defffe04 	addi	sp,sp,-8
 8000584:	dfc00115 	stw	ra,4(sp)
 8000588:	df000015 	stw	fp,0(sp)
 800058c:	d839883a 	mov	fp,sp
	// Interrupt Service Routine - Key 3


	printf("\nKEY 3 ISR RAN!\n");
 8000590:	010200b4 	movhi	r4,2050
 8000594:	2123d204 	addi	r4,r4,-28856
 8000598:	80007d40 	call	80007d4 <puts>

	// Write to the edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0x00);
 800059c:	0007883a 	mov	r3,zero
 80005a0:	00800834 	movhi	r2,32
 80005a4:	10841b04 	addi	r2,r2,4204
 80005a8:	10c00035 	stwio	r3,0(r2)
	// Read the PIO to delay the ISR's exit
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 80005ac:	00800834 	movhi	r2,32
 80005b0:	10841b04 	addi	r2,r2,4204
 80005b4:	10800037 	ldwio	r2,0(r2)
	return;
 80005b8:	0001883a 	nop
}
 80005bc:	e037883a 	mov	sp,fp
 80005c0:	dfc00117 	ldw	ra,4(sp)
 80005c4:	df000017 	ldw	fp,0(sp)
 80005c8:	dec00204 	addi	sp,sp,8
 80005cc:	f800283a 	ret

080005d0 <main>:
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 80005d0:	defff804 	addi	sp,sp,-32
 80005d4:	dfc00715 	stw	ra,28(sp)
 80005d8:	df000615 	stw	fp,24(sp)
 80005dc:	df000604 	addi	fp,sp,24
  INT8U err;
  IOWR(LEDS_BASE, 0, 0);
 80005e0:	0007883a 	mov	r3,zero
 80005e4:	00800834 	movhi	r2,32
 80005e8:	10840804 	addi	r2,r2,4128
 80005ec:	10c00035 	stwio	r3,0(r2)
  printf("Main init\n");
 80005f0:	010200b4 	movhi	r4,2050
 80005f4:	2123d604 	addi	r4,r4,-28840
 80005f8:	80007d40 	call	80007d4 <puts>
  ledMutex = OSMutexCreate(0, &err);  // Create a mutex for controlling access to the LED resource
 80005fc:	e17fff04 	addi	r5,fp,-4
 8000600:	0009883a 	mov	r4,zero
 8000604:	80120640 	call	8012064 <OSMutexCreate>
 8000608:	d0a71815 	stw	r2,-25504(gp)
  OSTaskCreateExt(task1,
 800060c:	d8000415 	stw	zero,16(sp)
 8000610:	d8000315 	stw	zero,12(sp)
 8000614:	00820004 	movi	r2,2048
 8000618:	d8800215 	stw	r2,8(sp)
 800061c:	008200b4 	movhi	r2,2050
 8000620:	10b2e804 	addi	r2,r2,-13408
 8000624:	d8800115 	stw	r2,4(sp)
 8000628:	00800044 	movi	r2,1
 800062c:	d8800015 	stw	r2,0(sp)
 8000630:	01c00044 	movi	r7,1
 8000634:	018200b4 	movhi	r6,2050
 8000638:	31bae704 	addi	r6,r6,-5220
 800063c:	000b883a 	mov	r5,zero
 8000640:	01020034 	movhi	r4,2048
 8000644:	2100a404 	addi	r4,r4,656
 8000648:	80151d80 	call	80151d8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
 800064c:	d8000415 	stw	zero,16(sp)
 8000650:	d8000315 	stw	zero,12(sp)
 8000654:	00820004 	movi	r2,2048
 8000658:	d8800215 	stw	r2,8(sp)
 800065c:	008200b4 	movhi	r2,2050
 8000660:	10bae804 	addi	r2,r2,-5216
 8000664:	d8800115 	stw	r2,4(sp)
 8000668:	00800084 	movi	r2,2
 800066c:	d8800015 	stw	r2,0(sp)
 8000670:	01c00084 	movi	r7,2
 8000674:	018200b4 	movhi	r6,2050
 8000678:	3182e704 	addi	r6,r6,2972
 800067c:	000b883a 	mov	r5,zero
 8000680:	01020034 	movhi	r4,2048
 8000684:	2100cb04 	addi	r4,r4,812
 8000688:	80151d80 	call	80151d8 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
 800068c:	800ea280 	call	800ea28 <OSStart>
  return 0;
 8000690:	0005883a 	mov	r2,zero
}
 8000694:	e037883a 	mov	sp,fp
 8000698:	dfc00117 	ldw	ra,4(sp)
 800069c:	df000017 	ldw	fp,0(sp)
 80006a0:	dec00204 	addi	sp,sp,8
 80006a4:	f800283a 	ret

080006a8 <_printf_r>:
 80006a8:	defffd04 	addi	sp,sp,-12
 80006ac:	2805883a 	mov	r2,r5
 80006b0:	dfc00015 	stw	ra,0(sp)
 80006b4:	d9800115 	stw	r6,4(sp)
 80006b8:	d9c00215 	stw	r7,8(sp)
 80006bc:	21400217 	ldw	r5,8(r4)
 80006c0:	d9c00104 	addi	r7,sp,4
 80006c4:	100d883a 	mov	r6,r2
 80006c8:	80008800 	call	8000880 <___vfprintf_internal_r>
 80006cc:	dfc00017 	ldw	ra,0(sp)
 80006d0:	dec00304 	addi	sp,sp,12
 80006d4:	f800283a 	ret

080006d8 <printf>:
 80006d8:	defffc04 	addi	sp,sp,-16
 80006dc:	dfc00015 	stw	ra,0(sp)
 80006e0:	d9400115 	stw	r5,4(sp)
 80006e4:	d9800215 	stw	r6,8(sp)
 80006e8:	d9c00315 	stw	r7,12(sp)
 80006ec:	008200b4 	movhi	r2,2050
 80006f0:	10ab9f04 	addi	r2,r2,-20868
 80006f4:	10800017 	ldw	r2,0(r2)
 80006f8:	200b883a 	mov	r5,r4
 80006fc:	d9800104 	addi	r6,sp,4
 8000700:	11000217 	ldw	r4,8(r2)
 8000704:	8002a780 	call	8002a78 <__vfprintf_internal>
 8000708:	dfc00017 	ldw	ra,0(sp)
 800070c:	dec00404 	addi	sp,sp,16
 8000710:	f800283a 	ret

08000714 <_puts_r>:
 8000714:	defff604 	addi	sp,sp,-40
 8000718:	dc000715 	stw	r16,28(sp)
 800071c:	2021883a 	mov	r16,r4
 8000720:	2809883a 	mov	r4,r5
 8000724:	dc400815 	stw	r17,32(sp)
 8000728:	dfc00915 	stw	ra,36(sp)
 800072c:	2823883a 	mov	r17,r5
 8000730:	80007e80 	call	80007e8 <strlen>
 8000734:	10c00044 	addi	r3,r2,1
 8000738:	d8800115 	stw	r2,4(sp)
 800073c:	008200b4 	movhi	r2,2050
 8000740:	10a3d904 	addi	r2,r2,-28828
 8000744:	d8800215 	stw	r2,8(sp)
 8000748:	00800044 	movi	r2,1
 800074c:	d8800315 	stw	r2,12(sp)
 8000750:	00800084 	movi	r2,2
 8000754:	dc400015 	stw	r17,0(sp)
 8000758:	d8c00615 	stw	r3,24(sp)
 800075c:	dec00415 	stw	sp,16(sp)
 8000760:	d8800515 	stw	r2,20(sp)
 8000764:	80000226 	beq	r16,zero,8000770 <_puts_r+0x5c>
 8000768:	80800e17 	ldw	r2,56(r16)
 800076c:	10001426 	beq	r2,zero,80007c0 <_puts_r+0xac>
 8000770:	81400217 	ldw	r5,8(r16)
 8000774:	2880030b 	ldhu	r2,12(r5)
 8000778:	10c8000c 	andi	r3,r2,8192
 800077c:	1800061e 	bne	r3,zero,8000798 <_puts_r+0x84>
 8000780:	29001917 	ldw	r4,100(r5)
 8000784:	00f7ffc4 	movi	r3,-8193
 8000788:	10880014 	ori	r2,r2,8192
 800078c:	20c6703a 	and	r3,r4,r3
 8000790:	2880030d 	sth	r2,12(r5)
 8000794:	28c01915 	stw	r3,100(r5)
 8000798:	d9800404 	addi	r6,sp,16
 800079c:	8009883a 	mov	r4,r16
 80007a0:	8004fa80 	call	8004fa8 <__sfvwrite_r>
 80007a4:	1000091e 	bne	r2,zero,80007cc <_puts_r+0xb8>
 80007a8:	00800284 	movi	r2,10
 80007ac:	dfc00917 	ldw	ra,36(sp)
 80007b0:	dc400817 	ldw	r17,32(sp)
 80007b4:	dc000717 	ldw	r16,28(sp)
 80007b8:	dec00a04 	addi	sp,sp,40
 80007bc:	f800283a 	ret
 80007c0:	8009883a 	mov	r4,r16
 80007c4:	8004b240 	call	8004b24 <__sinit>
 80007c8:	003fe906 	br	8000770 <__alt_data_end+0xf8000770>
 80007cc:	00bfffc4 	movi	r2,-1
 80007d0:	003ff606 	br	80007ac <__alt_data_end+0xf80007ac>

080007d4 <puts>:
 80007d4:	008200b4 	movhi	r2,2050
 80007d8:	10ab9f04 	addi	r2,r2,-20868
 80007dc:	200b883a 	mov	r5,r4
 80007e0:	11000017 	ldw	r4,0(r2)
 80007e4:	80007141 	jmpi	8000714 <_puts_r>

080007e8 <strlen>:
 80007e8:	208000cc 	andi	r2,r4,3
 80007ec:	10002026 	beq	r2,zero,8000870 <strlen+0x88>
 80007f0:	20800007 	ldb	r2,0(r4)
 80007f4:	10002026 	beq	r2,zero,8000878 <strlen+0x90>
 80007f8:	2005883a 	mov	r2,r4
 80007fc:	00000206 	br	8000808 <strlen+0x20>
 8000800:	10c00007 	ldb	r3,0(r2)
 8000804:	18001826 	beq	r3,zero,8000868 <strlen+0x80>
 8000808:	10800044 	addi	r2,r2,1
 800080c:	10c000cc 	andi	r3,r2,3
 8000810:	183ffb1e 	bne	r3,zero,8000800 <__alt_data_end+0xf8000800>
 8000814:	10c00017 	ldw	r3,0(r2)
 8000818:	01ffbff4 	movhi	r7,65279
 800081c:	39ffbfc4 	addi	r7,r7,-257
 8000820:	00ca303a 	nor	r5,zero,r3
 8000824:	01a02074 	movhi	r6,32897
 8000828:	19c7883a 	add	r3,r3,r7
 800082c:	31a02004 	addi	r6,r6,-32640
 8000830:	1946703a 	and	r3,r3,r5
 8000834:	1986703a 	and	r3,r3,r6
 8000838:	1800091e 	bne	r3,zero,8000860 <strlen+0x78>
 800083c:	10800104 	addi	r2,r2,4
 8000840:	10c00017 	ldw	r3,0(r2)
 8000844:	19cb883a 	add	r5,r3,r7
 8000848:	00c6303a 	nor	r3,zero,r3
 800084c:	28c6703a 	and	r3,r5,r3
 8000850:	1986703a 	and	r3,r3,r6
 8000854:	183ff926 	beq	r3,zero,800083c <__alt_data_end+0xf800083c>
 8000858:	00000106 	br	8000860 <strlen+0x78>
 800085c:	10800044 	addi	r2,r2,1
 8000860:	10c00007 	ldb	r3,0(r2)
 8000864:	183ffd1e 	bne	r3,zero,800085c <__alt_data_end+0xf800085c>
 8000868:	1105c83a 	sub	r2,r2,r4
 800086c:	f800283a 	ret
 8000870:	2005883a 	mov	r2,r4
 8000874:	003fe706 	br	8000814 <__alt_data_end+0xf8000814>
 8000878:	0005883a 	mov	r2,zero
 800087c:	f800283a 	ret

08000880 <___vfprintf_internal_r>:
 8000880:	deffb804 	addi	sp,sp,-288
 8000884:	dfc04715 	stw	ra,284(sp)
 8000888:	ddc04515 	stw	r23,276(sp)
 800088c:	dd404315 	stw	r21,268(sp)
 8000890:	d9002c15 	stw	r4,176(sp)
 8000894:	282f883a 	mov	r23,r5
 8000898:	302b883a 	mov	r21,r6
 800089c:	d9c02d15 	stw	r7,180(sp)
 80008a0:	df004615 	stw	fp,280(sp)
 80008a4:	dd804415 	stw	r22,272(sp)
 80008a8:	dd004215 	stw	r20,264(sp)
 80008ac:	dcc04115 	stw	r19,260(sp)
 80008b0:	dc804015 	stw	r18,256(sp)
 80008b4:	dc403f15 	stw	r17,252(sp)
 80008b8:	dc003e15 	stw	r16,248(sp)
 80008bc:	80056980 	call	8005698 <_localeconv_r>
 80008c0:	10800017 	ldw	r2,0(r2)
 80008c4:	1009883a 	mov	r4,r2
 80008c8:	d8803415 	stw	r2,208(sp)
 80008cc:	80007e80 	call	80007e8 <strlen>
 80008d0:	d8803715 	stw	r2,220(sp)
 80008d4:	d8802c17 	ldw	r2,176(sp)
 80008d8:	10000226 	beq	r2,zero,80008e4 <___vfprintf_internal_r+0x64>
 80008dc:	10800e17 	ldw	r2,56(r2)
 80008e0:	1000f926 	beq	r2,zero,8000cc8 <___vfprintf_internal_r+0x448>
 80008e4:	b880030b 	ldhu	r2,12(r23)
 80008e8:	10c8000c 	andi	r3,r2,8192
 80008ec:	1800061e 	bne	r3,zero,8000908 <___vfprintf_internal_r+0x88>
 80008f0:	b9001917 	ldw	r4,100(r23)
 80008f4:	00f7ffc4 	movi	r3,-8193
 80008f8:	10880014 	ori	r2,r2,8192
 80008fc:	20c6703a 	and	r3,r4,r3
 8000900:	b880030d 	sth	r2,12(r23)
 8000904:	b8c01915 	stw	r3,100(r23)
 8000908:	10c0020c 	andi	r3,r2,8
 800090c:	1800c126 	beq	r3,zero,8000c14 <___vfprintf_internal_r+0x394>
 8000910:	b8c00417 	ldw	r3,16(r23)
 8000914:	1800bf26 	beq	r3,zero,8000c14 <___vfprintf_internal_r+0x394>
 8000918:	1080068c 	andi	r2,r2,26
 800091c:	00c00284 	movi	r3,10
 8000920:	10c0c426 	beq	r2,r3,8000c34 <___vfprintf_internal_r+0x3b4>
 8000924:	d8c00404 	addi	r3,sp,16
 8000928:	050200b4 	movhi	r20,2050
 800092c:	d9001e04 	addi	r4,sp,120
 8000930:	a523ea84 	addi	r20,r20,-28758
 8000934:	d8c01e15 	stw	r3,120(sp)
 8000938:	d8002015 	stw	zero,128(sp)
 800093c:	d8001f15 	stw	zero,124(sp)
 8000940:	d8003315 	stw	zero,204(sp)
 8000944:	d8003615 	stw	zero,216(sp)
 8000948:	d8003815 	stw	zero,224(sp)
 800094c:	1811883a 	mov	r8,r3
 8000950:	d8003915 	stw	zero,228(sp)
 8000954:	d8003a15 	stw	zero,232(sp)
 8000958:	d8002f15 	stw	zero,188(sp)
 800095c:	d9002815 	stw	r4,160(sp)
 8000960:	a8800007 	ldb	r2,0(r21)
 8000964:	10027b26 	beq	r2,zero,8001354 <___vfprintf_internal_r+0xad4>
 8000968:	00c00944 	movi	r3,37
 800096c:	a821883a 	mov	r16,r21
 8000970:	10c0021e 	bne	r2,r3,800097c <___vfprintf_internal_r+0xfc>
 8000974:	00001406 	br	80009c8 <___vfprintf_internal_r+0x148>
 8000978:	10c00326 	beq	r2,r3,8000988 <___vfprintf_internal_r+0x108>
 800097c:	84000044 	addi	r16,r16,1
 8000980:	80800007 	ldb	r2,0(r16)
 8000984:	103ffc1e 	bne	r2,zero,8000978 <__alt_data_end+0xf8000978>
 8000988:	8563c83a 	sub	r17,r16,r21
 800098c:	88000e26 	beq	r17,zero,80009c8 <___vfprintf_internal_r+0x148>
 8000990:	d8c02017 	ldw	r3,128(sp)
 8000994:	d8801f17 	ldw	r2,124(sp)
 8000998:	45400015 	stw	r21,0(r8)
 800099c:	1c47883a 	add	r3,r3,r17
 80009a0:	10800044 	addi	r2,r2,1
 80009a4:	d8c02015 	stw	r3,128(sp)
 80009a8:	44400115 	stw	r17,4(r8)
 80009ac:	d8801f15 	stw	r2,124(sp)
 80009b0:	00c001c4 	movi	r3,7
 80009b4:	1880a716 	blt	r3,r2,8000c54 <___vfprintf_internal_r+0x3d4>
 80009b8:	42000204 	addi	r8,r8,8
 80009bc:	d9402f17 	ldw	r5,188(sp)
 80009c0:	2c4b883a 	add	r5,r5,r17
 80009c4:	d9402f15 	stw	r5,188(sp)
 80009c8:	80800007 	ldb	r2,0(r16)
 80009cc:	1000a826 	beq	r2,zero,8000c70 <___vfprintf_internal_r+0x3f0>
 80009d0:	84400047 	ldb	r17,1(r16)
 80009d4:	00bfffc4 	movi	r2,-1
 80009d8:	85400044 	addi	r21,r16,1
 80009dc:	d8002785 	stb	zero,158(sp)
 80009e0:	0007883a 	mov	r3,zero
 80009e4:	000f883a 	mov	r7,zero
 80009e8:	d8802915 	stw	r2,164(sp)
 80009ec:	d8003115 	stw	zero,196(sp)
 80009f0:	0025883a 	mov	r18,zero
 80009f4:	01401604 	movi	r5,88
 80009f8:	01800244 	movi	r6,9
 80009fc:	02800a84 	movi	r10,42
 8000a00:	02401b04 	movi	r9,108
 8000a04:	ad400044 	addi	r21,r21,1
 8000a08:	88bff804 	addi	r2,r17,-32
 8000a0c:	28830436 	bltu	r5,r2,8001620 <___vfprintf_internal_r+0xda0>
 8000a10:	100490ba 	slli	r2,r2,2
 8000a14:	01020034 	movhi	r4,2048
 8000a18:	21028a04 	addi	r4,r4,2600
 8000a1c:	1105883a 	add	r2,r2,r4
 8000a20:	10800017 	ldw	r2,0(r2)
 8000a24:	1000683a 	jmp	r2
 8000a28:	08001540 	call	800154 <__alt_mem_onchip_memory2_0+0x600154>
 8000a2c:	08001620 	cmpeqi	zero,at,88
 8000a30:	08001620 	cmpeqi	zero,at,88
 8000a34:	08001560 	cmpeqi	zero,at,85
 8000a38:	08001620 	cmpeqi	zero,at,88
 8000a3c:	08001620 	cmpeqi	zero,at,88
 8000a40:	08001620 	cmpeqi	zero,at,88
 8000a44:	08001620 	cmpeqi	zero,at,88
 8000a48:	08001620 	cmpeqi	zero,at,88
 8000a4c:	08001620 	cmpeqi	zero,at,88
 8000a50:	08000cd4 	ori	zero,at,51
 8000a54:	0800147c 	xorhi	zero,at,81
 8000a58:	08001620 	cmpeqi	zero,at,88
 8000a5c:	08000b9c 	xori	zero,at,46
 8000a60:	08000cfc 	xorhi	zero,at,51
 8000a64:	08001620 	cmpeqi	zero,at,88
 8000a68:	08000d3c 	xorhi	zero,at,52
 8000a6c:	08000d48 	cmpgei	zero,at,53
 8000a70:	08000d48 	cmpgei	zero,at,53
 8000a74:	08000d48 	cmpgei	zero,at,53
 8000a78:	08000d48 	cmpgei	zero,at,53
 8000a7c:	08000d48 	cmpgei	zero,at,53
 8000a80:	08000d48 	cmpgei	zero,at,53
 8000a84:	08000d48 	cmpgei	zero,at,53
 8000a88:	08000d48 	cmpgei	zero,at,53
 8000a8c:	08000d48 	cmpgei	zero,at,53
 8000a90:	08001620 	cmpeqi	zero,at,88
 8000a94:	08001620 	cmpeqi	zero,at,88
 8000a98:	08001620 	cmpeqi	zero,at,88
 8000a9c:	08001620 	cmpeqi	zero,at,88
 8000aa0:	08001620 	cmpeqi	zero,at,88
 8000aa4:	08001620 	cmpeqi	zero,at,88
 8000aa8:	08001620 	cmpeqi	zero,at,88
 8000aac:	08001620 	cmpeqi	zero,at,88
 8000ab0:	08001620 	cmpeqi	zero,at,88
 8000ab4:	08001620 	cmpeqi	zero,at,88
 8000ab8:	08000d7c 	xorhi	zero,at,53
 8000abc:	08000e38 	rdprs	zero,at,56
 8000ac0:	08001620 	cmpeqi	zero,at,88
 8000ac4:	08000e38 	rdprs	zero,at,56
 8000ac8:	08001620 	cmpeqi	zero,at,88
 8000acc:	08001620 	cmpeqi	zero,at,88
 8000ad0:	08001620 	cmpeqi	zero,at,88
 8000ad4:	08001620 	cmpeqi	zero,at,88
 8000ad8:	08000ed8 	cmpnei	zero,at,59
 8000adc:	08001620 	cmpeqi	zero,at,88
 8000ae0:	08001620 	cmpeqi	zero,at,88
 8000ae4:	08000ee4 	muli	zero,at,59
 8000ae8:	08001620 	cmpeqi	zero,at,88
 8000aec:	08001620 	cmpeqi	zero,at,88
 8000af0:	08001620 	cmpeqi	zero,at,88
 8000af4:	08001620 	cmpeqi	zero,at,88
 8000af8:	08001620 	cmpeqi	zero,at,88
 8000afc:	0800135c 	xori	zero,at,77
 8000b00:	08001620 	cmpeqi	zero,at,88
 8000b04:	08001620 	cmpeqi	zero,at,88
 8000b08:	080013bc 	xorhi	zero,at,78
 8000b0c:	08001620 	cmpeqi	zero,at,88
 8000b10:	08001620 	cmpeqi	zero,at,88
 8000b14:	08001620 	cmpeqi	zero,at,88
 8000b18:	08001620 	cmpeqi	zero,at,88
 8000b1c:	08001620 	cmpeqi	zero,at,88
 8000b20:	08001620 	cmpeqi	zero,at,88
 8000b24:	08001620 	cmpeqi	zero,at,88
 8000b28:	08001620 	cmpeqi	zero,at,88
 8000b2c:	08001620 	cmpeqi	zero,at,88
 8000b30:	08001620 	cmpeqi	zero,at,88
 8000b34:	080015cc 	andi	zero,at,87
 8000b38:	0800156c 	andhi	zero,at,85
 8000b3c:	08000e38 	rdprs	zero,at,56
 8000b40:	08000e38 	rdprs	zero,at,56
 8000b44:	08000e38 	rdprs	zero,at,56
 8000b48:	0800157c 	xorhi	zero,at,85
 8000b4c:	0800156c 	andhi	zero,at,85
 8000b50:	08001620 	cmpeqi	zero,at,88
 8000b54:	08001620 	cmpeqi	zero,at,88
 8000b58:	08001588 	cmpgei	zero,at,86
 8000b5c:	08001620 	cmpeqi	zero,at,88
 8000b60:	08001598 	cmpnei	zero,at,86
 8000b64:	0800146c 	andhi	zero,at,81
 8000b68:	08000ba8 	cmpgeui	zero,at,46
 8000b6c:	0800148c 	andi	zero,at,82
 8000b70:	08001620 	cmpeqi	zero,at,88
 8000b74:	08001498 	cmpnei	zero,at,82
 8000b78:	08001620 	cmpeqi	zero,at,88
 8000b7c:	080014f4 	orhi	zero,at,83
 8000b80:	08001620 	cmpeqi	zero,at,88
 8000b84:	08001620 	cmpeqi	zero,at,88
 8000b88:	08001504 	addi	zero,at,84
 8000b8c:	d9003117 	ldw	r4,196(sp)
 8000b90:	d8802d15 	stw	r2,180(sp)
 8000b94:	0109c83a 	sub	r4,zero,r4
 8000b98:	d9003115 	stw	r4,196(sp)
 8000b9c:	94800114 	ori	r18,r18,4
 8000ba0:	ac400007 	ldb	r17,0(r21)
 8000ba4:	003f9706 	br	8000a04 <__alt_data_end+0xf8000a04>
 8000ba8:	00800c04 	movi	r2,48
 8000bac:	d9002d17 	ldw	r4,180(sp)
 8000bb0:	d9402917 	ldw	r5,164(sp)
 8000bb4:	d8802705 	stb	r2,156(sp)
 8000bb8:	00801e04 	movi	r2,120
 8000bbc:	d8802745 	stb	r2,157(sp)
 8000bc0:	d8002785 	stb	zero,158(sp)
 8000bc4:	20c00104 	addi	r3,r4,4
 8000bc8:	24c00017 	ldw	r19,0(r4)
 8000bcc:	002d883a 	mov	r22,zero
 8000bd0:	90800094 	ori	r2,r18,2
 8000bd4:	28029a16 	blt	r5,zero,8001640 <___vfprintf_internal_r+0xdc0>
 8000bd8:	00bfdfc4 	movi	r2,-129
 8000bdc:	90a4703a 	and	r18,r18,r2
 8000be0:	d8c02d15 	stw	r3,180(sp)
 8000be4:	94800094 	ori	r18,r18,2
 8000be8:	9802871e 	bne	r19,zero,8001608 <___vfprintf_internal_r+0xd88>
 8000bec:	008200b4 	movhi	r2,2050
 8000bf0:	10a3e304 	addi	r2,r2,-28788
 8000bf4:	d8803915 	stw	r2,228(sp)
 8000bf8:	04401e04 	movi	r17,120
 8000bfc:	d8802917 	ldw	r2,164(sp)
 8000c00:	0039883a 	mov	fp,zero
 8000c04:	1001e926 	beq	r2,zero,80013ac <___vfprintf_internal_r+0xb2c>
 8000c08:	0027883a 	mov	r19,zero
 8000c0c:	002d883a 	mov	r22,zero
 8000c10:	00020506 	br	8001428 <___vfprintf_internal_r+0xba8>
 8000c14:	d9002c17 	ldw	r4,176(sp)
 8000c18:	b80b883a 	mov	r5,r23
 8000c1c:	8002b500 	call	8002b50 <__swsetup_r>
 8000c20:	1005ac1e 	bne	r2,zero,80022d4 <___vfprintf_internal_r+0x1a54>
 8000c24:	b880030b 	ldhu	r2,12(r23)
 8000c28:	00c00284 	movi	r3,10
 8000c2c:	1080068c 	andi	r2,r2,26
 8000c30:	10ff3c1e 	bne	r2,r3,8000924 <__alt_data_end+0xf8000924>
 8000c34:	b880038f 	ldh	r2,14(r23)
 8000c38:	103f3a16 	blt	r2,zero,8000924 <__alt_data_end+0xf8000924>
 8000c3c:	d9c02d17 	ldw	r7,180(sp)
 8000c40:	d9002c17 	ldw	r4,176(sp)
 8000c44:	a80d883a 	mov	r6,r21
 8000c48:	b80b883a 	mov	r5,r23
 8000c4c:	8002a940 	call	8002a94 <__sbprintf>
 8000c50:	00001106 	br	8000c98 <___vfprintf_internal_r+0x418>
 8000c54:	d9002c17 	ldw	r4,176(sp)
 8000c58:	d9801e04 	addi	r6,sp,120
 8000c5c:	b80b883a 	mov	r5,r23
 8000c60:	8007e7c0 	call	8007e7c <__sprint_r>
 8000c64:	1000081e 	bne	r2,zero,8000c88 <___vfprintf_internal_r+0x408>
 8000c68:	da000404 	addi	r8,sp,16
 8000c6c:	003f5306 	br	80009bc <__alt_data_end+0xf80009bc>
 8000c70:	d8802017 	ldw	r2,128(sp)
 8000c74:	10000426 	beq	r2,zero,8000c88 <___vfprintf_internal_r+0x408>
 8000c78:	d9002c17 	ldw	r4,176(sp)
 8000c7c:	d9801e04 	addi	r6,sp,120
 8000c80:	b80b883a 	mov	r5,r23
 8000c84:	8007e7c0 	call	8007e7c <__sprint_r>
 8000c88:	b880030b 	ldhu	r2,12(r23)
 8000c8c:	1080100c 	andi	r2,r2,64
 8000c90:	1005901e 	bne	r2,zero,80022d4 <___vfprintf_internal_r+0x1a54>
 8000c94:	d8802f17 	ldw	r2,188(sp)
 8000c98:	dfc04717 	ldw	ra,284(sp)
 8000c9c:	df004617 	ldw	fp,280(sp)
 8000ca0:	ddc04517 	ldw	r23,276(sp)
 8000ca4:	dd804417 	ldw	r22,272(sp)
 8000ca8:	dd404317 	ldw	r21,268(sp)
 8000cac:	dd004217 	ldw	r20,264(sp)
 8000cb0:	dcc04117 	ldw	r19,260(sp)
 8000cb4:	dc804017 	ldw	r18,256(sp)
 8000cb8:	dc403f17 	ldw	r17,252(sp)
 8000cbc:	dc003e17 	ldw	r16,248(sp)
 8000cc0:	dec04804 	addi	sp,sp,288
 8000cc4:	f800283a 	ret
 8000cc8:	d9002c17 	ldw	r4,176(sp)
 8000ccc:	8004b240 	call	8004b24 <__sinit>
 8000cd0:	003f0406 	br	80008e4 <__alt_data_end+0xf80008e4>
 8000cd4:	d8802d17 	ldw	r2,180(sp)
 8000cd8:	d9002d17 	ldw	r4,180(sp)
 8000cdc:	10800017 	ldw	r2,0(r2)
 8000ce0:	d8803115 	stw	r2,196(sp)
 8000ce4:	20800104 	addi	r2,r4,4
 8000ce8:	d9003117 	ldw	r4,196(sp)
 8000cec:	203fa716 	blt	r4,zero,8000b8c <__alt_data_end+0xf8000b8c>
 8000cf0:	d8802d15 	stw	r2,180(sp)
 8000cf4:	ac400007 	ldb	r17,0(r21)
 8000cf8:	003f4206 	br	8000a04 <__alt_data_end+0xf8000a04>
 8000cfc:	ac400007 	ldb	r17,0(r21)
 8000d00:	aac00044 	addi	r11,r21,1
 8000d04:	8a872826 	beq	r17,r10,80029a8 <___vfprintf_internal_r+0x2128>
 8000d08:	88bff404 	addi	r2,r17,-48
 8000d0c:	0009883a 	mov	r4,zero
 8000d10:	30867d36 	bltu	r6,r2,8002708 <___vfprintf_internal_r+0x1e88>
 8000d14:	5c400007 	ldb	r17,0(r11)
 8000d18:	210002a4 	muli	r4,r4,10
 8000d1c:	5d400044 	addi	r21,r11,1
 8000d20:	a817883a 	mov	r11,r21
 8000d24:	2089883a 	add	r4,r4,r2
 8000d28:	88bff404 	addi	r2,r17,-48
 8000d2c:	30bff92e 	bgeu	r6,r2,8000d14 <__alt_data_end+0xf8000d14>
 8000d30:	2005c916 	blt	r4,zero,8002458 <___vfprintf_internal_r+0x1bd8>
 8000d34:	d9002915 	stw	r4,164(sp)
 8000d38:	003f3306 	br	8000a08 <__alt_data_end+0xf8000a08>
 8000d3c:	94802014 	ori	r18,r18,128
 8000d40:	ac400007 	ldb	r17,0(r21)
 8000d44:	003f2f06 	br	8000a04 <__alt_data_end+0xf8000a04>
 8000d48:	a809883a 	mov	r4,r21
 8000d4c:	d8003115 	stw	zero,196(sp)
 8000d50:	88bff404 	addi	r2,r17,-48
 8000d54:	0017883a 	mov	r11,zero
 8000d58:	24400007 	ldb	r17,0(r4)
 8000d5c:	5ac002a4 	muli	r11,r11,10
 8000d60:	ad400044 	addi	r21,r21,1
 8000d64:	a809883a 	mov	r4,r21
 8000d68:	12d7883a 	add	r11,r2,r11
 8000d6c:	88bff404 	addi	r2,r17,-48
 8000d70:	30bff92e 	bgeu	r6,r2,8000d58 <__alt_data_end+0xf8000d58>
 8000d74:	dac03115 	stw	r11,196(sp)
 8000d78:	003f2306 	br	8000a08 <__alt_data_end+0xf8000a08>
 8000d7c:	18c03fcc 	andi	r3,r3,255
 8000d80:	18072b1e 	bne	r3,zero,8002a30 <___vfprintf_internal_r+0x21b0>
 8000d84:	94800414 	ori	r18,r18,16
 8000d88:	9080080c 	andi	r2,r18,32
 8000d8c:	10037b26 	beq	r2,zero,8001b7c <___vfprintf_internal_r+0x12fc>
 8000d90:	d9402d17 	ldw	r5,180(sp)
 8000d94:	28800117 	ldw	r2,4(r5)
 8000d98:	2cc00017 	ldw	r19,0(r5)
 8000d9c:	29400204 	addi	r5,r5,8
 8000da0:	d9402d15 	stw	r5,180(sp)
 8000da4:	102d883a 	mov	r22,r2
 8000da8:	10044b16 	blt	r2,zero,8001ed8 <___vfprintf_internal_r+0x1658>
 8000dac:	d9402917 	ldw	r5,164(sp)
 8000db0:	df002783 	ldbu	fp,158(sp)
 8000db4:	2803bc16 	blt	r5,zero,8001ca8 <___vfprintf_internal_r+0x1428>
 8000db8:	00ffdfc4 	movi	r3,-129
 8000dbc:	9d84b03a 	or	r2,r19,r22
 8000dc0:	90e4703a 	and	r18,r18,r3
 8000dc4:	10017726 	beq	r2,zero,80013a4 <___vfprintf_internal_r+0xb24>
 8000dc8:	b0038326 	beq	r22,zero,8001bd8 <___vfprintf_internal_r+0x1358>
 8000dcc:	dc402a15 	stw	r17,168(sp)
 8000dd0:	dc001e04 	addi	r16,sp,120
 8000dd4:	b023883a 	mov	r17,r22
 8000dd8:	402d883a 	mov	r22,r8
 8000ddc:	9809883a 	mov	r4,r19
 8000de0:	880b883a 	mov	r5,r17
 8000de4:	01800284 	movi	r6,10
 8000de8:	000f883a 	mov	r7,zero
 8000dec:	800a2740 	call	800a274 <__umoddi3>
 8000df0:	10800c04 	addi	r2,r2,48
 8000df4:	843fffc4 	addi	r16,r16,-1
 8000df8:	9809883a 	mov	r4,r19
 8000dfc:	880b883a 	mov	r5,r17
 8000e00:	80800005 	stb	r2,0(r16)
 8000e04:	01800284 	movi	r6,10
 8000e08:	000f883a 	mov	r7,zero
 8000e0c:	8009cfc0 	call	8009cfc <__udivdi3>
 8000e10:	1027883a 	mov	r19,r2
 8000e14:	10c4b03a 	or	r2,r2,r3
 8000e18:	1823883a 	mov	r17,r3
 8000e1c:	103fef1e 	bne	r2,zero,8000ddc <__alt_data_end+0xf8000ddc>
 8000e20:	d8c02817 	ldw	r3,160(sp)
 8000e24:	dc402a17 	ldw	r17,168(sp)
 8000e28:	b011883a 	mov	r8,r22
 8000e2c:	1c07c83a 	sub	r3,r3,r16
 8000e30:	d8c02e15 	stw	r3,184(sp)
 8000e34:	00005906 	br	8000f9c <___vfprintf_internal_r+0x71c>
 8000e38:	18c03fcc 	andi	r3,r3,255
 8000e3c:	1806fa1e 	bne	r3,zero,8002a28 <___vfprintf_internal_r+0x21a8>
 8000e40:	9080020c 	andi	r2,r18,8
 8000e44:	10048a26 	beq	r2,zero,8002070 <___vfprintf_internal_r+0x17f0>
 8000e48:	d8c02d17 	ldw	r3,180(sp)
 8000e4c:	d9002d17 	ldw	r4,180(sp)
 8000e50:	d9402d17 	ldw	r5,180(sp)
 8000e54:	18c00017 	ldw	r3,0(r3)
 8000e58:	21000117 	ldw	r4,4(r4)
 8000e5c:	29400204 	addi	r5,r5,8
 8000e60:	d8c03615 	stw	r3,216(sp)
 8000e64:	d9003815 	stw	r4,224(sp)
 8000e68:	d9402d15 	stw	r5,180(sp)
 8000e6c:	d9003617 	ldw	r4,216(sp)
 8000e70:	d9403817 	ldw	r5,224(sp)
 8000e74:	da003d15 	stw	r8,244(sp)
 8000e78:	04000044 	movi	r16,1
 8000e7c:	8007aa00 	call	8007aa0 <__fpclassifyd>
 8000e80:	da003d17 	ldw	r8,244(sp)
 8000e84:	14041f1e 	bne	r2,r16,8001f04 <___vfprintf_internal_r+0x1684>
 8000e88:	d9003617 	ldw	r4,216(sp)
 8000e8c:	d9403817 	ldw	r5,224(sp)
 8000e90:	000d883a 	mov	r6,zero
 8000e94:	000f883a 	mov	r7,zero
 8000e98:	800bc580 	call	800bc58 <__ledf2>
 8000e9c:	da003d17 	ldw	r8,244(sp)
 8000ea0:	1005be16 	blt	r2,zero,800259c <___vfprintf_internal_r+0x1d1c>
 8000ea4:	df002783 	ldbu	fp,158(sp)
 8000ea8:	008011c4 	movi	r2,71
 8000eac:	1445330e 	bge	r2,r17,800237c <___vfprintf_internal_r+0x1afc>
 8000eb0:	040200b4 	movhi	r16,2050
 8000eb4:	8423db04 	addi	r16,r16,-28820
 8000eb8:	00c000c4 	movi	r3,3
 8000ebc:	00bfdfc4 	movi	r2,-129
 8000ec0:	d8c02a15 	stw	r3,168(sp)
 8000ec4:	90a4703a 	and	r18,r18,r2
 8000ec8:	d8c02e15 	stw	r3,184(sp)
 8000ecc:	d8002915 	stw	zero,164(sp)
 8000ed0:	d8003215 	stw	zero,200(sp)
 8000ed4:	00003706 	br	8000fb4 <___vfprintf_internal_r+0x734>
 8000ed8:	94800214 	ori	r18,r18,8
 8000edc:	ac400007 	ldb	r17,0(r21)
 8000ee0:	003ec806 	br	8000a04 <__alt_data_end+0xf8000a04>
 8000ee4:	18c03fcc 	andi	r3,r3,255
 8000ee8:	1806db1e 	bne	r3,zero,8002a58 <___vfprintf_internal_r+0x21d8>
 8000eec:	94800414 	ori	r18,r18,16
 8000ef0:	9080080c 	andi	r2,r18,32
 8000ef4:	1002d826 	beq	r2,zero,8001a58 <___vfprintf_internal_r+0x11d8>
 8000ef8:	d9402d17 	ldw	r5,180(sp)
 8000efc:	d8c02917 	ldw	r3,164(sp)
 8000f00:	d8002785 	stb	zero,158(sp)
 8000f04:	28800204 	addi	r2,r5,8
 8000f08:	2cc00017 	ldw	r19,0(r5)
 8000f0c:	2d800117 	ldw	r22,4(r5)
 8000f10:	18048f16 	blt	r3,zero,8002150 <___vfprintf_internal_r+0x18d0>
 8000f14:	013fdfc4 	movi	r4,-129
 8000f18:	9d86b03a 	or	r3,r19,r22
 8000f1c:	d8802d15 	stw	r2,180(sp)
 8000f20:	9124703a 	and	r18,r18,r4
 8000f24:	1802d91e 	bne	r3,zero,8001a8c <___vfprintf_internal_r+0x120c>
 8000f28:	d8c02917 	ldw	r3,164(sp)
 8000f2c:	0039883a 	mov	fp,zero
 8000f30:	1805c326 	beq	r3,zero,8002640 <___vfprintf_internal_r+0x1dc0>
 8000f34:	0027883a 	mov	r19,zero
 8000f38:	002d883a 	mov	r22,zero
 8000f3c:	dc001e04 	addi	r16,sp,120
 8000f40:	9806d0fa 	srli	r3,r19,3
 8000f44:	b008977a 	slli	r4,r22,29
 8000f48:	b02cd0fa 	srli	r22,r22,3
 8000f4c:	9cc001cc 	andi	r19,r19,7
 8000f50:	98800c04 	addi	r2,r19,48
 8000f54:	843fffc4 	addi	r16,r16,-1
 8000f58:	20e6b03a 	or	r19,r4,r3
 8000f5c:	80800005 	stb	r2,0(r16)
 8000f60:	9d86b03a 	or	r3,r19,r22
 8000f64:	183ff61e 	bne	r3,zero,8000f40 <__alt_data_end+0xf8000f40>
 8000f68:	90c0004c 	andi	r3,r18,1
 8000f6c:	18013b26 	beq	r3,zero,800145c <___vfprintf_internal_r+0xbdc>
 8000f70:	10803fcc 	andi	r2,r2,255
 8000f74:	1080201c 	xori	r2,r2,128
 8000f78:	10bfe004 	addi	r2,r2,-128
 8000f7c:	00c00c04 	movi	r3,48
 8000f80:	10c13626 	beq	r2,r3,800145c <___vfprintf_internal_r+0xbdc>
 8000f84:	80ffffc5 	stb	r3,-1(r16)
 8000f88:	d8c02817 	ldw	r3,160(sp)
 8000f8c:	80bfffc4 	addi	r2,r16,-1
 8000f90:	1021883a 	mov	r16,r2
 8000f94:	1887c83a 	sub	r3,r3,r2
 8000f98:	d8c02e15 	stw	r3,184(sp)
 8000f9c:	d8802e17 	ldw	r2,184(sp)
 8000fa0:	d9002917 	ldw	r4,164(sp)
 8000fa4:	1100010e 	bge	r2,r4,8000fac <___vfprintf_internal_r+0x72c>
 8000fa8:	2005883a 	mov	r2,r4
 8000fac:	d8802a15 	stw	r2,168(sp)
 8000fb0:	d8003215 	stw	zero,200(sp)
 8000fb4:	e7003fcc 	andi	fp,fp,255
 8000fb8:	e700201c 	xori	fp,fp,128
 8000fbc:	e73fe004 	addi	fp,fp,-128
 8000fc0:	e0000326 	beq	fp,zero,8000fd0 <___vfprintf_internal_r+0x750>
 8000fc4:	d8c02a17 	ldw	r3,168(sp)
 8000fc8:	18c00044 	addi	r3,r3,1
 8000fcc:	d8c02a15 	stw	r3,168(sp)
 8000fd0:	90c0008c 	andi	r3,r18,2
 8000fd4:	d8c02b15 	stw	r3,172(sp)
 8000fd8:	18000326 	beq	r3,zero,8000fe8 <___vfprintf_internal_r+0x768>
 8000fdc:	d8c02a17 	ldw	r3,168(sp)
 8000fe0:	18c00084 	addi	r3,r3,2
 8000fe4:	d8c02a15 	stw	r3,168(sp)
 8000fe8:	90c0210c 	andi	r3,r18,132
 8000fec:	d8c03015 	stw	r3,192(sp)
 8000ff0:	1801a31e 	bne	r3,zero,8001680 <___vfprintf_internal_r+0xe00>
 8000ff4:	d9003117 	ldw	r4,196(sp)
 8000ff8:	d8c02a17 	ldw	r3,168(sp)
 8000ffc:	20e7c83a 	sub	r19,r4,r3
 8001000:	04c19f0e 	bge	zero,r19,8001680 <___vfprintf_internal_r+0xe00>
 8001004:	02400404 	movi	r9,16
 8001008:	d8c02017 	ldw	r3,128(sp)
 800100c:	d8801f17 	ldw	r2,124(sp)
 8001010:	4cc50d0e 	bge	r9,r19,8002448 <___vfprintf_internal_r+0x1bc8>
 8001014:	014200b4 	movhi	r5,2050
 8001018:	2963ee84 	addi	r5,r5,-28742
 800101c:	dc403b15 	stw	r17,236(sp)
 8001020:	d9403515 	stw	r5,212(sp)
 8001024:	9823883a 	mov	r17,r19
 8001028:	482d883a 	mov	r22,r9
 800102c:	9027883a 	mov	r19,r18
 8001030:	070001c4 	movi	fp,7
 8001034:	8025883a 	mov	r18,r16
 8001038:	dc002c17 	ldw	r16,176(sp)
 800103c:	00000306 	br	800104c <___vfprintf_internal_r+0x7cc>
 8001040:	8c7ffc04 	addi	r17,r17,-16
 8001044:	42000204 	addi	r8,r8,8
 8001048:	b440130e 	bge	r22,r17,8001098 <___vfprintf_internal_r+0x818>
 800104c:	010200b4 	movhi	r4,2050
 8001050:	18c00404 	addi	r3,r3,16
 8001054:	10800044 	addi	r2,r2,1
 8001058:	2123ee84 	addi	r4,r4,-28742
 800105c:	41000015 	stw	r4,0(r8)
 8001060:	45800115 	stw	r22,4(r8)
 8001064:	d8c02015 	stw	r3,128(sp)
 8001068:	d8801f15 	stw	r2,124(sp)
 800106c:	e0bff40e 	bge	fp,r2,8001040 <__alt_data_end+0xf8001040>
 8001070:	d9801e04 	addi	r6,sp,120
 8001074:	b80b883a 	mov	r5,r23
 8001078:	8009883a 	mov	r4,r16
 800107c:	8007e7c0 	call	8007e7c <__sprint_r>
 8001080:	103f011e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001084:	8c7ffc04 	addi	r17,r17,-16
 8001088:	d8c02017 	ldw	r3,128(sp)
 800108c:	d8801f17 	ldw	r2,124(sp)
 8001090:	da000404 	addi	r8,sp,16
 8001094:	b47fed16 	blt	r22,r17,800104c <__alt_data_end+0xf800104c>
 8001098:	9021883a 	mov	r16,r18
 800109c:	9825883a 	mov	r18,r19
 80010a0:	8827883a 	mov	r19,r17
 80010a4:	dc403b17 	ldw	r17,236(sp)
 80010a8:	d9403517 	ldw	r5,212(sp)
 80010ac:	98c7883a 	add	r3,r19,r3
 80010b0:	10800044 	addi	r2,r2,1
 80010b4:	41400015 	stw	r5,0(r8)
 80010b8:	44c00115 	stw	r19,4(r8)
 80010bc:	d8c02015 	stw	r3,128(sp)
 80010c0:	d8801f15 	stw	r2,124(sp)
 80010c4:	010001c4 	movi	r4,7
 80010c8:	2082a316 	blt	r4,r2,8001b58 <___vfprintf_internal_r+0x12d8>
 80010cc:	df002787 	ldb	fp,158(sp)
 80010d0:	42000204 	addi	r8,r8,8
 80010d4:	e0000c26 	beq	fp,zero,8001108 <___vfprintf_internal_r+0x888>
 80010d8:	d8801f17 	ldw	r2,124(sp)
 80010dc:	d9002784 	addi	r4,sp,158
 80010e0:	18c00044 	addi	r3,r3,1
 80010e4:	10800044 	addi	r2,r2,1
 80010e8:	41000015 	stw	r4,0(r8)
 80010ec:	01000044 	movi	r4,1
 80010f0:	41000115 	stw	r4,4(r8)
 80010f4:	d8c02015 	stw	r3,128(sp)
 80010f8:	d8801f15 	stw	r2,124(sp)
 80010fc:	010001c4 	movi	r4,7
 8001100:	20823c16 	blt	r4,r2,80019f4 <___vfprintf_internal_r+0x1174>
 8001104:	42000204 	addi	r8,r8,8
 8001108:	d8802b17 	ldw	r2,172(sp)
 800110c:	10000c26 	beq	r2,zero,8001140 <___vfprintf_internal_r+0x8c0>
 8001110:	d8801f17 	ldw	r2,124(sp)
 8001114:	d9002704 	addi	r4,sp,156
 8001118:	18c00084 	addi	r3,r3,2
 800111c:	10800044 	addi	r2,r2,1
 8001120:	41000015 	stw	r4,0(r8)
 8001124:	01000084 	movi	r4,2
 8001128:	41000115 	stw	r4,4(r8)
 800112c:	d8c02015 	stw	r3,128(sp)
 8001130:	d8801f15 	stw	r2,124(sp)
 8001134:	010001c4 	movi	r4,7
 8001138:	20823616 	blt	r4,r2,8001a14 <___vfprintf_internal_r+0x1194>
 800113c:	42000204 	addi	r8,r8,8
 8001140:	d9003017 	ldw	r4,192(sp)
 8001144:	00802004 	movi	r2,128
 8001148:	20819926 	beq	r4,r2,80017b0 <___vfprintf_internal_r+0xf30>
 800114c:	d9402917 	ldw	r5,164(sp)
 8001150:	d8802e17 	ldw	r2,184(sp)
 8001154:	28adc83a 	sub	r22,r5,r2
 8001158:	0580310e 	bge	zero,r22,8001220 <___vfprintf_internal_r+0x9a0>
 800115c:	07000404 	movi	fp,16
 8001160:	d8801f17 	ldw	r2,124(sp)
 8001164:	e584140e 	bge	fp,r22,80021b8 <___vfprintf_internal_r+0x1938>
 8001168:	014200b4 	movhi	r5,2050
 800116c:	2963ea84 	addi	r5,r5,-28758
 8001170:	dc402915 	stw	r17,164(sp)
 8001174:	d9402b15 	stw	r5,172(sp)
 8001178:	b023883a 	mov	r17,r22
 800117c:	04c001c4 	movi	r19,7
 8001180:	a82d883a 	mov	r22,r21
 8001184:	902b883a 	mov	r21,r18
 8001188:	8025883a 	mov	r18,r16
 800118c:	dc002c17 	ldw	r16,176(sp)
 8001190:	00000306 	br	80011a0 <___vfprintf_internal_r+0x920>
 8001194:	8c7ffc04 	addi	r17,r17,-16
 8001198:	42000204 	addi	r8,r8,8
 800119c:	e440110e 	bge	fp,r17,80011e4 <___vfprintf_internal_r+0x964>
 80011a0:	18c00404 	addi	r3,r3,16
 80011a4:	10800044 	addi	r2,r2,1
 80011a8:	45000015 	stw	r20,0(r8)
 80011ac:	47000115 	stw	fp,4(r8)
 80011b0:	d8c02015 	stw	r3,128(sp)
 80011b4:	d8801f15 	stw	r2,124(sp)
 80011b8:	98bff60e 	bge	r19,r2,8001194 <__alt_data_end+0xf8001194>
 80011bc:	d9801e04 	addi	r6,sp,120
 80011c0:	b80b883a 	mov	r5,r23
 80011c4:	8009883a 	mov	r4,r16
 80011c8:	8007e7c0 	call	8007e7c <__sprint_r>
 80011cc:	103eae1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80011d0:	8c7ffc04 	addi	r17,r17,-16
 80011d4:	d8c02017 	ldw	r3,128(sp)
 80011d8:	d8801f17 	ldw	r2,124(sp)
 80011dc:	da000404 	addi	r8,sp,16
 80011e0:	e47fef16 	blt	fp,r17,80011a0 <__alt_data_end+0xf80011a0>
 80011e4:	9021883a 	mov	r16,r18
 80011e8:	a825883a 	mov	r18,r21
 80011ec:	b02b883a 	mov	r21,r22
 80011f0:	882d883a 	mov	r22,r17
 80011f4:	dc402917 	ldw	r17,164(sp)
 80011f8:	d9002b17 	ldw	r4,172(sp)
 80011fc:	1d87883a 	add	r3,r3,r22
 8001200:	10800044 	addi	r2,r2,1
 8001204:	41000015 	stw	r4,0(r8)
 8001208:	45800115 	stw	r22,4(r8)
 800120c:	d8c02015 	stw	r3,128(sp)
 8001210:	d8801f15 	stw	r2,124(sp)
 8001214:	010001c4 	movi	r4,7
 8001218:	2081ee16 	blt	r4,r2,80019d4 <___vfprintf_internal_r+0x1154>
 800121c:	42000204 	addi	r8,r8,8
 8001220:	9080400c 	andi	r2,r18,256
 8001224:	1001181e 	bne	r2,zero,8001688 <___vfprintf_internal_r+0xe08>
 8001228:	d9402e17 	ldw	r5,184(sp)
 800122c:	d8801f17 	ldw	r2,124(sp)
 8001230:	44000015 	stw	r16,0(r8)
 8001234:	1947883a 	add	r3,r3,r5
 8001238:	10800044 	addi	r2,r2,1
 800123c:	41400115 	stw	r5,4(r8)
 8001240:	d8c02015 	stw	r3,128(sp)
 8001244:	d8801f15 	stw	r2,124(sp)
 8001248:	010001c4 	movi	r4,7
 800124c:	2081d316 	blt	r4,r2,800199c <___vfprintf_internal_r+0x111c>
 8001250:	42000204 	addi	r8,r8,8
 8001254:	9480010c 	andi	r18,r18,4
 8001258:	90003226 	beq	r18,zero,8001324 <___vfprintf_internal_r+0xaa4>
 800125c:	d9403117 	ldw	r5,196(sp)
 8001260:	d8802a17 	ldw	r2,168(sp)
 8001264:	28a1c83a 	sub	r16,r5,r2
 8001268:	04002e0e 	bge	zero,r16,8001324 <___vfprintf_internal_r+0xaa4>
 800126c:	04400404 	movi	r17,16
 8001270:	d8801f17 	ldw	r2,124(sp)
 8001274:	8c04a20e 	bge	r17,r16,8002500 <___vfprintf_internal_r+0x1c80>
 8001278:	014200b4 	movhi	r5,2050
 800127c:	2963ee84 	addi	r5,r5,-28742
 8001280:	d9403515 	stw	r5,212(sp)
 8001284:	048001c4 	movi	r18,7
 8001288:	dcc02c17 	ldw	r19,176(sp)
 800128c:	00000306 	br	800129c <___vfprintf_internal_r+0xa1c>
 8001290:	843ffc04 	addi	r16,r16,-16
 8001294:	42000204 	addi	r8,r8,8
 8001298:	8c00130e 	bge	r17,r16,80012e8 <___vfprintf_internal_r+0xa68>
 800129c:	010200b4 	movhi	r4,2050
 80012a0:	18c00404 	addi	r3,r3,16
 80012a4:	10800044 	addi	r2,r2,1
 80012a8:	2123ee84 	addi	r4,r4,-28742
 80012ac:	41000015 	stw	r4,0(r8)
 80012b0:	44400115 	stw	r17,4(r8)
 80012b4:	d8c02015 	stw	r3,128(sp)
 80012b8:	d8801f15 	stw	r2,124(sp)
 80012bc:	90bff40e 	bge	r18,r2,8001290 <__alt_data_end+0xf8001290>
 80012c0:	d9801e04 	addi	r6,sp,120
 80012c4:	b80b883a 	mov	r5,r23
 80012c8:	9809883a 	mov	r4,r19
 80012cc:	8007e7c0 	call	8007e7c <__sprint_r>
 80012d0:	103e6d1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80012d4:	843ffc04 	addi	r16,r16,-16
 80012d8:	d8c02017 	ldw	r3,128(sp)
 80012dc:	d8801f17 	ldw	r2,124(sp)
 80012e0:	da000404 	addi	r8,sp,16
 80012e4:	8c3fed16 	blt	r17,r16,800129c <__alt_data_end+0xf800129c>
 80012e8:	d9403517 	ldw	r5,212(sp)
 80012ec:	1c07883a 	add	r3,r3,r16
 80012f0:	10800044 	addi	r2,r2,1
 80012f4:	41400015 	stw	r5,0(r8)
 80012f8:	44000115 	stw	r16,4(r8)
 80012fc:	d8c02015 	stw	r3,128(sp)
 8001300:	d8801f15 	stw	r2,124(sp)
 8001304:	010001c4 	movi	r4,7
 8001308:	2080060e 	bge	r4,r2,8001324 <___vfprintf_internal_r+0xaa4>
 800130c:	d9002c17 	ldw	r4,176(sp)
 8001310:	d9801e04 	addi	r6,sp,120
 8001314:	b80b883a 	mov	r5,r23
 8001318:	8007e7c0 	call	8007e7c <__sprint_r>
 800131c:	103e5a1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001320:	d8c02017 	ldw	r3,128(sp)
 8001324:	d8803117 	ldw	r2,196(sp)
 8001328:	d9002a17 	ldw	r4,168(sp)
 800132c:	1100010e 	bge	r2,r4,8001334 <___vfprintf_internal_r+0xab4>
 8001330:	2005883a 	mov	r2,r4
 8001334:	d9402f17 	ldw	r5,188(sp)
 8001338:	288b883a 	add	r5,r5,r2
 800133c:	d9402f15 	stw	r5,188(sp)
 8001340:	18019e1e 	bne	r3,zero,80019bc <___vfprintf_internal_r+0x113c>
 8001344:	a8800007 	ldb	r2,0(r21)
 8001348:	d8001f15 	stw	zero,124(sp)
 800134c:	da000404 	addi	r8,sp,16
 8001350:	103d851e 	bne	r2,zero,8000968 <__alt_data_end+0xf8000968>
 8001354:	a821883a 	mov	r16,r21
 8001358:	003d9b06 	br	80009c8 <__alt_data_end+0xf80009c8>
 800135c:	18c03fcc 	andi	r3,r3,255
 8001360:	1805c11e 	bne	r3,zero,8002a68 <___vfprintf_internal_r+0x21e8>
 8001364:	94800414 	ori	r18,r18,16
 8001368:	9080080c 	andi	r2,r18,32
 800136c:	10020c26 	beq	r2,zero,8001ba0 <___vfprintf_internal_r+0x1320>
 8001370:	d8802d17 	ldw	r2,180(sp)
 8001374:	d9002917 	ldw	r4,164(sp)
 8001378:	d8002785 	stb	zero,158(sp)
 800137c:	10c00204 	addi	r3,r2,8
 8001380:	14c00017 	ldw	r19,0(r2)
 8001384:	15800117 	ldw	r22,4(r2)
 8001388:	20040f16 	blt	r4,zero,80023c8 <___vfprintf_internal_r+0x1b48>
 800138c:	013fdfc4 	movi	r4,-129
 8001390:	9d84b03a 	or	r2,r19,r22
 8001394:	d8c02d15 	stw	r3,180(sp)
 8001398:	9124703a 	and	r18,r18,r4
 800139c:	0039883a 	mov	fp,zero
 80013a0:	103e891e 	bne	r2,zero,8000dc8 <__alt_data_end+0xf8000dc8>
 80013a4:	d9002917 	ldw	r4,164(sp)
 80013a8:	2002c11e 	bne	r4,zero,8001eb0 <___vfprintf_internal_r+0x1630>
 80013ac:	d8002915 	stw	zero,164(sp)
 80013b0:	d8002e15 	stw	zero,184(sp)
 80013b4:	dc001e04 	addi	r16,sp,120
 80013b8:	003ef806 	br	8000f9c <__alt_data_end+0xf8000f9c>
 80013bc:	18c03fcc 	andi	r3,r3,255
 80013c0:	18059d1e 	bne	r3,zero,8002a38 <___vfprintf_internal_r+0x21b8>
 80013c4:	014200b4 	movhi	r5,2050
 80013c8:	2963de04 	addi	r5,r5,-28808
 80013cc:	d9403915 	stw	r5,228(sp)
 80013d0:	9080080c 	andi	r2,r18,32
 80013d4:	10005226 	beq	r2,zero,8001520 <___vfprintf_internal_r+0xca0>
 80013d8:	d8802d17 	ldw	r2,180(sp)
 80013dc:	14c00017 	ldw	r19,0(r2)
 80013e0:	15800117 	ldw	r22,4(r2)
 80013e4:	10800204 	addi	r2,r2,8
 80013e8:	d8802d15 	stw	r2,180(sp)
 80013ec:	9080004c 	andi	r2,r18,1
 80013f0:	10019026 	beq	r2,zero,8001a34 <___vfprintf_internal_r+0x11b4>
 80013f4:	9d84b03a 	or	r2,r19,r22
 80013f8:	10036926 	beq	r2,zero,80021a0 <___vfprintf_internal_r+0x1920>
 80013fc:	d8c02917 	ldw	r3,164(sp)
 8001400:	00800c04 	movi	r2,48
 8001404:	d8802705 	stb	r2,156(sp)
 8001408:	dc402745 	stb	r17,157(sp)
 800140c:	d8002785 	stb	zero,158(sp)
 8001410:	90800094 	ori	r2,r18,2
 8001414:	18045d16 	blt	r3,zero,800258c <___vfprintf_internal_r+0x1d0c>
 8001418:	00bfdfc4 	movi	r2,-129
 800141c:	90a4703a 	and	r18,r18,r2
 8001420:	94800094 	ori	r18,r18,2
 8001424:	0039883a 	mov	fp,zero
 8001428:	d9003917 	ldw	r4,228(sp)
 800142c:	dc001e04 	addi	r16,sp,120
 8001430:	988003cc 	andi	r2,r19,15
 8001434:	b006973a 	slli	r3,r22,28
 8001438:	2085883a 	add	r2,r4,r2
 800143c:	9826d13a 	srli	r19,r19,4
 8001440:	10800003 	ldbu	r2,0(r2)
 8001444:	b02cd13a 	srli	r22,r22,4
 8001448:	843fffc4 	addi	r16,r16,-1
 800144c:	1ce6b03a 	or	r19,r3,r19
 8001450:	80800005 	stb	r2,0(r16)
 8001454:	9d84b03a 	or	r2,r19,r22
 8001458:	103ff51e 	bne	r2,zero,8001430 <__alt_data_end+0xf8001430>
 800145c:	d8c02817 	ldw	r3,160(sp)
 8001460:	1c07c83a 	sub	r3,r3,r16
 8001464:	d8c02e15 	stw	r3,184(sp)
 8001468:	003ecc06 	br	8000f9c <__alt_data_end+0xf8000f9c>
 800146c:	18c03fcc 	andi	r3,r3,255
 8001470:	183e9f26 	beq	r3,zero,8000ef0 <__alt_data_end+0xf8000ef0>
 8001474:	d9c02785 	stb	r7,158(sp)
 8001478:	003e9d06 	br	8000ef0 <__alt_data_end+0xf8000ef0>
 800147c:	00c00044 	movi	r3,1
 8001480:	01c00ac4 	movi	r7,43
 8001484:	ac400007 	ldb	r17,0(r21)
 8001488:	003d5e06 	br	8000a04 <__alt_data_end+0xf8000a04>
 800148c:	94800814 	ori	r18,r18,32
 8001490:	ac400007 	ldb	r17,0(r21)
 8001494:	003d5b06 	br	8000a04 <__alt_data_end+0xf8000a04>
 8001498:	d8c02d17 	ldw	r3,180(sp)
 800149c:	d8002785 	stb	zero,158(sp)
 80014a0:	1c000017 	ldw	r16,0(r3)
 80014a4:	1cc00104 	addi	r19,r3,4
 80014a8:	80041926 	beq	r16,zero,8002510 <___vfprintf_internal_r+0x1c90>
 80014ac:	d9002917 	ldw	r4,164(sp)
 80014b0:	2003d016 	blt	r4,zero,80023f4 <___vfprintf_internal_r+0x1b74>
 80014b4:	200d883a 	mov	r6,r4
 80014b8:	000b883a 	mov	r5,zero
 80014bc:	8009883a 	mov	r4,r16
 80014c0:	da003d15 	stw	r8,244(sp)
 80014c4:	80060900 	call	8006090 <memchr>
 80014c8:	da003d17 	ldw	r8,244(sp)
 80014cc:	10045426 	beq	r2,zero,8002620 <___vfprintf_internal_r+0x1da0>
 80014d0:	1405c83a 	sub	r2,r2,r16
 80014d4:	d8802e15 	stw	r2,184(sp)
 80014d8:	1003cc16 	blt	r2,zero,800240c <___vfprintf_internal_r+0x1b8c>
 80014dc:	df002783 	ldbu	fp,158(sp)
 80014e0:	d8802a15 	stw	r2,168(sp)
 80014e4:	dcc02d15 	stw	r19,180(sp)
 80014e8:	d8002915 	stw	zero,164(sp)
 80014ec:	d8003215 	stw	zero,200(sp)
 80014f0:	003eb006 	br	8000fb4 <__alt_data_end+0xf8000fb4>
 80014f4:	18c03fcc 	andi	r3,r3,255
 80014f8:	183f9b26 	beq	r3,zero,8001368 <__alt_data_end+0xf8001368>
 80014fc:	d9c02785 	stb	r7,158(sp)
 8001500:	003f9906 	br	8001368 <__alt_data_end+0xf8001368>
 8001504:	18c03fcc 	andi	r3,r3,255
 8001508:	1805551e 	bne	r3,zero,8002a60 <___vfprintf_internal_r+0x21e0>
 800150c:	014200b4 	movhi	r5,2050
 8001510:	2963e304 	addi	r5,r5,-28788
 8001514:	d9403915 	stw	r5,228(sp)
 8001518:	9080080c 	andi	r2,r18,32
 800151c:	103fae1e 	bne	r2,zero,80013d8 <__alt_data_end+0xf80013d8>
 8001520:	9080040c 	andi	r2,r18,16
 8001524:	1002de26 	beq	r2,zero,80020a0 <___vfprintf_internal_r+0x1820>
 8001528:	d8c02d17 	ldw	r3,180(sp)
 800152c:	002d883a 	mov	r22,zero
 8001530:	1cc00017 	ldw	r19,0(r3)
 8001534:	18c00104 	addi	r3,r3,4
 8001538:	d8c02d15 	stw	r3,180(sp)
 800153c:	003fab06 	br	80013ec <__alt_data_end+0xf80013ec>
 8001540:	38803fcc 	andi	r2,r7,255
 8001544:	1080201c 	xori	r2,r2,128
 8001548:	10bfe004 	addi	r2,r2,-128
 800154c:	1002d21e 	bne	r2,zero,8002098 <___vfprintf_internal_r+0x1818>
 8001550:	00c00044 	movi	r3,1
 8001554:	01c00804 	movi	r7,32
 8001558:	ac400007 	ldb	r17,0(r21)
 800155c:	003d2906 	br	8000a04 <__alt_data_end+0xf8000a04>
 8001560:	94800054 	ori	r18,r18,1
 8001564:	ac400007 	ldb	r17,0(r21)
 8001568:	003d2606 	br	8000a04 <__alt_data_end+0xf8000a04>
 800156c:	18c03fcc 	andi	r3,r3,255
 8001570:	183e0526 	beq	r3,zero,8000d88 <__alt_data_end+0xf8000d88>
 8001574:	d9c02785 	stb	r7,158(sp)
 8001578:	003e0306 	br	8000d88 <__alt_data_end+0xf8000d88>
 800157c:	94801014 	ori	r18,r18,64
 8001580:	ac400007 	ldb	r17,0(r21)
 8001584:	003d1f06 	br	8000a04 <__alt_data_end+0xf8000a04>
 8001588:	ac400007 	ldb	r17,0(r21)
 800158c:	8a438726 	beq	r17,r9,80023ac <___vfprintf_internal_r+0x1b2c>
 8001590:	94800414 	ori	r18,r18,16
 8001594:	003d1b06 	br	8000a04 <__alt_data_end+0xf8000a04>
 8001598:	18c03fcc 	andi	r3,r3,255
 800159c:	1805341e 	bne	r3,zero,8002a70 <___vfprintf_internal_r+0x21f0>
 80015a0:	9080080c 	andi	r2,r18,32
 80015a4:	1002cd26 	beq	r2,zero,80020dc <___vfprintf_internal_r+0x185c>
 80015a8:	d9402d17 	ldw	r5,180(sp)
 80015ac:	d9002f17 	ldw	r4,188(sp)
 80015b0:	28800017 	ldw	r2,0(r5)
 80015b4:	2007d7fa 	srai	r3,r4,31
 80015b8:	29400104 	addi	r5,r5,4
 80015bc:	d9402d15 	stw	r5,180(sp)
 80015c0:	11000015 	stw	r4,0(r2)
 80015c4:	10c00115 	stw	r3,4(r2)
 80015c8:	003ce506 	br	8000960 <__alt_data_end+0xf8000960>
 80015cc:	d8c02d17 	ldw	r3,180(sp)
 80015d0:	d9002d17 	ldw	r4,180(sp)
 80015d4:	d8002785 	stb	zero,158(sp)
 80015d8:	18800017 	ldw	r2,0(r3)
 80015dc:	21000104 	addi	r4,r4,4
 80015e0:	00c00044 	movi	r3,1
 80015e4:	d8c02a15 	stw	r3,168(sp)
 80015e8:	d8801405 	stb	r2,80(sp)
 80015ec:	d9002d15 	stw	r4,180(sp)
 80015f0:	d8c02e15 	stw	r3,184(sp)
 80015f4:	d8002915 	stw	zero,164(sp)
 80015f8:	d8003215 	stw	zero,200(sp)
 80015fc:	dc001404 	addi	r16,sp,80
 8001600:	0039883a 	mov	fp,zero
 8001604:	003e7206 	br	8000fd0 <__alt_data_end+0xf8000fd0>
 8001608:	010200b4 	movhi	r4,2050
 800160c:	2123e304 	addi	r4,r4,-28788
 8001610:	0039883a 	mov	fp,zero
 8001614:	d9003915 	stw	r4,228(sp)
 8001618:	04401e04 	movi	r17,120
 800161c:	003f8206 	br	8001428 <__alt_data_end+0xf8001428>
 8001620:	18c03fcc 	andi	r3,r3,255
 8001624:	1805061e 	bne	r3,zero,8002a40 <___vfprintf_internal_r+0x21c0>
 8001628:	883d9126 	beq	r17,zero,8000c70 <__alt_data_end+0xf8000c70>
 800162c:	00c00044 	movi	r3,1
 8001630:	d8c02a15 	stw	r3,168(sp)
 8001634:	dc401405 	stb	r17,80(sp)
 8001638:	d8002785 	stb	zero,158(sp)
 800163c:	003fec06 	br	80015f0 <__alt_data_end+0xf80015f0>
 8001640:	014200b4 	movhi	r5,2050
 8001644:	2963e304 	addi	r5,r5,-28788
 8001648:	d9403915 	stw	r5,228(sp)
 800164c:	d8c02d15 	stw	r3,180(sp)
 8001650:	1025883a 	mov	r18,r2
 8001654:	04401e04 	movi	r17,120
 8001658:	9d84b03a 	or	r2,r19,r22
 800165c:	1000fc1e 	bne	r2,zero,8001a50 <___vfprintf_internal_r+0x11d0>
 8001660:	0039883a 	mov	fp,zero
 8001664:	00800084 	movi	r2,2
 8001668:	10803fcc 	andi	r2,r2,255
 800166c:	00c00044 	movi	r3,1
 8001670:	10c20f26 	beq	r2,r3,8001eb0 <___vfprintf_internal_r+0x1630>
 8001674:	00c00084 	movi	r3,2
 8001678:	10fd6326 	beq	r2,r3,8000c08 <__alt_data_end+0xf8000c08>
 800167c:	003e2d06 	br	8000f34 <__alt_data_end+0xf8000f34>
 8001680:	d8c02017 	ldw	r3,128(sp)
 8001684:	003e9306 	br	80010d4 <__alt_data_end+0xf80010d4>
 8001688:	00801944 	movi	r2,101
 800168c:	14407e0e 	bge	r2,r17,8001888 <___vfprintf_internal_r+0x1008>
 8001690:	d9003617 	ldw	r4,216(sp)
 8001694:	d9403817 	ldw	r5,224(sp)
 8001698:	000d883a 	mov	r6,zero
 800169c:	000f883a 	mov	r7,zero
 80016a0:	d8c03c15 	stw	r3,240(sp)
 80016a4:	da003d15 	stw	r8,244(sp)
 80016a8:	800baf40 	call	800baf4 <__eqdf2>
 80016ac:	d8c03c17 	ldw	r3,240(sp)
 80016b0:	da003d17 	ldw	r8,244(sp)
 80016b4:	1000f71e 	bne	r2,zero,8001a94 <___vfprintf_internal_r+0x1214>
 80016b8:	d8801f17 	ldw	r2,124(sp)
 80016bc:	010200b4 	movhi	r4,2050
 80016c0:	2123ea04 	addi	r4,r4,-28760
 80016c4:	18c00044 	addi	r3,r3,1
 80016c8:	10800044 	addi	r2,r2,1
 80016cc:	41000015 	stw	r4,0(r8)
 80016d0:	01000044 	movi	r4,1
 80016d4:	41000115 	stw	r4,4(r8)
 80016d8:	d8c02015 	stw	r3,128(sp)
 80016dc:	d8801f15 	stw	r2,124(sp)
 80016e0:	010001c4 	movi	r4,7
 80016e4:	2082b816 	blt	r4,r2,80021c8 <___vfprintf_internal_r+0x1948>
 80016e8:	42000204 	addi	r8,r8,8
 80016ec:	d8802617 	ldw	r2,152(sp)
 80016f0:	d9403317 	ldw	r5,204(sp)
 80016f4:	11400216 	blt	r2,r5,8001700 <___vfprintf_internal_r+0xe80>
 80016f8:	9080004c 	andi	r2,r18,1
 80016fc:	103ed526 	beq	r2,zero,8001254 <__alt_data_end+0xf8001254>
 8001700:	d8803717 	ldw	r2,220(sp)
 8001704:	d9003417 	ldw	r4,208(sp)
 8001708:	d9403717 	ldw	r5,220(sp)
 800170c:	1887883a 	add	r3,r3,r2
 8001710:	d8801f17 	ldw	r2,124(sp)
 8001714:	41000015 	stw	r4,0(r8)
 8001718:	41400115 	stw	r5,4(r8)
 800171c:	10800044 	addi	r2,r2,1
 8001720:	d8c02015 	stw	r3,128(sp)
 8001724:	d8801f15 	stw	r2,124(sp)
 8001728:	010001c4 	movi	r4,7
 800172c:	20832916 	blt	r4,r2,80023d4 <___vfprintf_internal_r+0x1b54>
 8001730:	42000204 	addi	r8,r8,8
 8001734:	d8803317 	ldw	r2,204(sp)
 8001738:	143fffc4 	addi	r16,r2,-1
 800173c:	043ec50e 	bge	zero,r16,8001254 <__alt_data_end+0xf8001254>
 8001740:	04400404 	movi	r17,16
 8001744:	d8801f17 	ldw	r2,124(sp)
 8001748:	8c00880e 	bge	r17,r16,800196c <___vfprintf_internal_r+0x10ec>
 800174c:	014200b4 	movhi	r5,2050
 8001750:	2963ea84 	addi	r5,r5,-28758
 8001754:	d9402b15 	stw	r5,172(sp)
 8001758:	058001c4 	movi	r22,7
 800175c:	dcc02c17 	ldw	r19,176(sp)
 8001760:	00000306 	br	8001770 <___vfprintf_internal_r+0xef0>
 8001764:	42000204 	addi	r8,r8,8
 8001768:	843ffc04 	addi	r16,r16,-16
 800176c:	8c00820e 	bge	r17,r16,8001978 <___vfprintf_internal_r+0x10f8>
 8001770:	18c00404 	addi	r3,r3,16
 8001774:	10800044 	addi	r2,r2,1
 8001778:	45000015 	stw	r20,0(r8)
 800177c:	44400115 	stw	r17,4(r8)
 8001780:	d8c02015 	stw	r3,128(sp)
 8001784:	d8801f15 	stw	r2,124(sp)
 8001788:	b0bff60e 	bge	r22,r2,8001764 <__alt_data_end+0xf8001764>
 800178c:	d9801e04 	addi	r6,sp,120
 8001790:	b80b883a 	mov	r5,r23
 8001794:	9809883a 	mov	r4,r19
 8001798:	8007e7c0 	call	8007e7c <__sprint_r>
 800179c:	103d3a1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80017a0:	d8c02017 	ldw	r3,128(sp)
 80017a4:	d8801f17 	ldw	r2,124(sp)
 80017a8:	da000404 	addi	r8,sp,16
 80017ac:	003fee06 	br	8001768 <__alt_data_end+0xf8001768>
 80017b0:	d9403117 	ldw	r5,196(sp)
 80017b4:	d8802a17 	ldw	r2,168(sp)
 80017b8:	28adc83a 	sub	r22,r5,r2
 80017bc:	05be630e 	bge	zero,r22,800114c <__alt_data_end+0xf800114c>
 80017c0:	07000404 	movi	fp,16
 80017c4:	d8801f17 	ldw	r2,124(sp)
 80017c8:	e5838f0e 	bge	fp,r22,8002608 <___vfprintf_internal_r+0x1d88>
 80017cc:	014200b4 	movhi	r5,2050
 80017d0:	2963ea84 	addi	r5,r5,-28758
 80017d4:	dc403015 	stw	r17,192(sp)
 80017d8:	d9402b15 	stw	r5,172(sp)
 80017dc:	b023883a 	mov	r17,r22
 80017e0:	04c001c4 	movi	r19,7
 80017e4:	a82d883a 	mov	r22,r21
 80017e8:	902b883a 	mov	r21,r18
 80017ec:	8025883a 	mov	r18,r16
 80017f0:	dc002c17 	ldw	r16,176(sp)
 80017f4:	00000306 	br	8001804 <___vfprintf_internal_r+0xf84>
 80017f8:	8c7ffc04 	addi	r17,r17,-16
 80017fc:	42000204 	addi	r8,r8,8
 8001800:	e440110e 	bge	fp,r17,8001848 <___vfprintf_internal_r+0xfc8>
 8001804:	18c00404 	addi	r3,r3,16
 8001808:	10800044 	addi	r2,r2,1
 800180c:	45000015 	stw	r20,0(r8)
 8001810:	47000115 	stw	fp,4(r8)
 8001814:	d8c02015 	stw	r3,128(sp)
 8001818:	d8801f15 	stw	r2,124(sp)
 800181c:	98bff60e 	bge	r19,r2,80017f8 <__alt_data_end+0xf80017f8>
 8001820:	d9801e04 	addi	r6,sp,120
 8001824:	b80b883a 	mov	r5,r23
 8001828:	8009883a 	mov	r4,r16
 800182c:	8007e7c0 	call	8007e7c <__sprint_r>
 8001830:	103d151e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001834:	8c7ffc04 	addi	r17,r17,-16
 8001838:	d8c02017 	ldw	r3,128(sp)
 800183c:	d8801f17 	ldw	r2,124(sp)
 8001840:	da000404 	addi	r8,sp,16
 8001844:	e47fef16 	blt	fp,r17,8001804 <__alt_data_end+0xf8001804>
 8001848:	9021883a 	mov	r16,r18
 800184c:	a825883a 	mov	r18,r21
 8001850:	b02b883a 	mov	r21,r22
 8001854:	882d883a 	mov	r22,r17
 8001858:	dc403017 	ldw	r17,192(sp)
 800185c:	d9002b17 	ldw	r4,172(sp)
 8001860:	1d87883a 	add	r3,r3,r22
 8001864:	10800044 	addi	r2,r2,1
 8001868:	41000015 	stw	r4,0(r8)
 800186c:	45800115 	stw	r22,4(r8)
 8001870:	d8c02015 	stw	r3,128(sp)
 8001874:	d8801f15 	stw	r2,124(sp)
 8001878:	010001c4 	movi	r4,7
 800187c:	20818e16 	blt	r4,r2,8001eb8 <___vfprintf_internal_r+0x1638>
 8001880:	42000204 	addi	r8,r8,8
 8001884:	003e3106 	br	800114c <__alt_data_end+0xf800114c>
 8001888:	d9403317 	ldw	r5,204(sp)
 800188c:	00800044 	movi	r2,1
 8001890:	18c00044 	addi	r3,r3,1
 8001894:	1141530e 	bge	r2,r5,8001de4 <___vfprintf_internal_r+0x1564>
 8001898:	dc401f17 	ldw	r17,124(sp)
 800189c:	00800044 	movi	r2,1
 80018a0:	40800115 	stw	r2,4(r8)
 80018a4:	8c400044 	addi	r17,r17,1
 80018a8:	44000015 	stw	r16,0(r8)
 80018ac:	d8c02015 	stw	r3,128(sp)
 80018b0:	dc401f15 	stw	r17,124(sp)
 80018b4:	008001c4 	movi	r2,7
 80018b8:	14416b16 	blt	r2,r17,8001e68 <___vfprintf_internal_r+0x15e8>
 80018bc:	42000204 	addi	r8,r8,8
 80018c0:	d8803717 	ldw	r2,220(sp)
 80018c4:	d9003417 	ldw	r4,208(sp)
 80018c8:	8c400044 	addi	r17,r17,1
 80018cc:	10c7883a 	add	r3,r2,r3
 80018d0:	40800115 	stw	r2,4(r8)
 80018d4:	41000015 	stw	r4,0(r8)
 80018d8:	d8c02015 	stw	r3,128(sp)
 80018dc:	dc401f15 	stw	r17,124(sp)
 80018e0:	008001c4 	movi	r2,7
 80018e4:	14416916 	blt	r2,r17,8001e8c <___vfprintf_internal_r+0x160c>
 80018e8:	45800204 	addi	r22,r8,8
 80018ec:	d9003617 	ldw	r4,216(sp)
 80018f0:	d9403817 	ldw	r5,224(sp)
 80018f4:	000d883a 	mov	r6,zero
 80018f8:	000f883a 	mov	r7,zero
 80018fc:	d8c03c15 	stw	r3,240(sp)
 8001900:	800baf40 	call	800baf4 <__eqdf2>
 8001904:	d8c03c17 	ldw	r3,240(sp)
 8001908:	1000bc26 	beq	r2,zero,8001bfc <___vfprintf_internal_r+0x137c>
 800190c:	d9403317 	ldw	r5,204(sp)
 8001910:	84000044 	addi	r16,r16,1
 8001914:	8c400044 	addi	r17,r17,1
 8001918:	28bfffc4 	addi	r2,r5,-1
 800191c:	1887883a 	add	r3,r3,r2
 8001920:	b0800115 	stw	r2,4(r22)
 8001924:	b4000015 	stw	r16,0(r22)
 8001928:	d8c02015 	stw	r3,128(sp)
 800192c:	dc401f15 	stw	r17,124(sp)
 8001930:	008001c4 	movi	r2,7
 8001934:	14414316 	blt	r2,r17,8001e44 <___vfprintf_internal_r+0x15c4>
 8001938:	b5800204 	addi	r22,r22,8
 800193c:	d9003a17 	ldw	r4,232(sp)
 8001940:	df0022c4 	addi	fp,sp,139
 8001944:	8c400044 	addi	r17,r17,1
 8001948:	20c7883a 	add	r3,r4,r3
 800194c:	b7000015 	stw	fp,0(r22)
 8001950:	b1000115 	stw	r4,4(r22)
 8001954:	d8c02015 	stw	r3,128(sp)
 8001958:	dc401f15 	stw	r17,124(sp)
 800195c:	008001c4 	movi	r2,7
 8001960:	14400e16 	blt	r2,r17,800199c <___vfprintf_internal_r+0x111c>
 8001964:	b2000204 	addi	r8,r22,8
 8001968:	003e3a06 	br	8001254 <__alt_data_end+0xf8001254>
 800196c:	010200b4 	movhi	r4,2050
 8001970:	2123ea84 	addi	r4,r4,-28758
 8001974:	d9002b15 	stw	r4,172(sp)
 8001978:	d9002b17 	ldw	r4,172(sp)
 800197c:	1c07883a 	add	r3,r3,r16
 8001980:	44000115 	stw	r16,4(r8)
 8001984:	41000015 	stw	r4,0(r8)
 8001988:	10800044 	addi	r2,r2,1
 800198c:	d8c02015 	stw	r3,128(sp)
 8001990:	d8801f15 	stw	r2,124(sp)
 8001994:	010001c4 	movi	r4,7
 8001998:	20be2d0e 	bge	r4,r2,8001250 <__alt_data_end+0xf8001250>
 800199c:	d9002c17 	ldw	r4,176(sp)
 80019a0:	d9801e04 	addi	r6,sp,120
 80019a4:	b80b883a 	mov	r5,r23
 80019a8:	8007e7c0 	call	8007e7c <__sprint_r>
 80019ac:	103cb61e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80019b0:	d8c02017 	ldw	r3,128(sp)
 80019b4:	da000404 	addi	r8,sp,16
 80019b8:	003e2606 	br	8001254 <__alt_data_end+0xf8001254>
 80019bc:	d9002c17 	ldw	r4,176(sp)
 80019c0:	d9801e04 	addi	r6,sp,120
 80019c4:	b80b883a 	mov	r5,r23
 80019c8:	8007e7c0 	call	8007e7c <__sprint_r>
 80019cc:	103e5d26 	beq	r2,zero,8001344 <__alt_data_end+0xf8001344>
 80019d0:	003cad06 	br	8000c88 <__alt_data_end+0xf8000c88>
 80019d4:	d9002c17 	ldw	r4,176(sp)
 80019d8:	d9801e04 	addi	r6,sp,120
 80019dc:	b80b883a 	mov	r5,r23
 80019e0:	8007e7c0 	call	8007e7c <__sprint_r>
 80019e4:	103ca81e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80019e8:	d8c02017 	ldw	r3,128(sp)
 80019ec:	da000404 	addi	r8,sp,16
 80019f0:	003e0b06 	br	8001220 <__alt_data_end+0xf8001220>
 80019f4:	d9002c17 	ldw	r4,176(sp)
 80019f8:	d9801e04 	addi	r6,sp,120
 80019fc:	b80b883a 	mov	r5,r23
 8001a00:	8007e7c0 	call	8007e7c <__sprint_r>
 8001a04:	103ca01e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001a08:	d8c02017 	ldw	r3,128(sp)
 8001a0c:	da000404 	addi	r8,sp,16
 8001a10:	003dbd06 	br	8001108 <__alt_data_end+0xf8001108>
 8001a14:	d9002c17 	ldw	r4,176(sp)
 8001a18:	d9801e04 	addi	r6,sp,120
 8001a1c:	b80b883a 	mov	r5,r23
 8001a20:	8007e7c0 	call	8007e7c <__sprint_r>
 8001a24:	103c981e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001a28:	d8c02017 	ldw	r3,128(sp)
 8001a2c:	da000404 	addi	r8,sp,16
 8001a30:	003dc306 	br	8001140 <__alt_data_end+0xf8001140>
 8001a34:	d8802917 	ldw	r2,164(sp)
 8001a38:	d8002785 	stb	zero,158(sp)
 8001a3c:	103f0616 	blt	r2,zero,8001658 <__alt_data_end+0xf8001658>
 8001a40:	00ffdfc4 	movi	r3,-129
 8001a44:	9d84b03a 	or	r2,r19,r22
 8001a48:	90e4703a 	and	r18,r18,r3
 8001a4c:	103c6b26 	beq	r2,zero,8000bfc <__alt_data_end+0xf8000bfc>
 8001a50:	0039883a 	mov	fp,zero
 8001a54:	003e7406 	br	8001428 <__alt_data_end+0xf8001428>
 8001a58:	9080040c 	andi	r2,r18,16
 8001a5c:	1001b326 	beq	r2,zero,800212c <___vfprintf_internal_r+0x18ac>
 8001a60:	d9002d17 	ldw	r4,180(sp)
 8001a64:	d9402917 	ldw	r5,164(sp)
 8001a68:	d8002785 	stb	zero,158(sp)
 8001a6c:	20800104 	addi	r2,r4,4
 8001a70:	24c00017 	ldw	r19,0(r4)
 8001a74:	002d883a 	mov	r22,zero
 8001a78:	2801b516 	blt	r5,zero,8002150 <___vfprintf_internal_r+0x18d0>
 8001a7c:	00ffdfc4 	movi	r3,-129
 8001a80:	d8802d15 	stw	r2,180(sp)
 8001a84:	90e4703a 	and	r18,r18,r3
 8001a88:	983d2726 	beq	r19,zero,8000f28 <__alt_data_end+0xf8000f28>
 8001a8c:	0039883a 	mov	fp,zero
 8001a90:	003d2a06 	br	8000f3c <__alt_data_end+0xf8000f3c>
 8001a94:	dc402617 	ldw	r17,152(sp)
 8001a98:	0441d30e 	bge	zero,r17,80021e8 <___vfprintf_internal_r+0x1968>
 8001a9c:	dc403217 	ldw	r17,200(sp)
 8001aa0:	d8803317 	ldw	r2,204(sp)
 8001aa4:	1440010e 	bge	r2,r17,8001aac <___vfprintf_internal_r+0x122c>
 8001aa8:	1023883a 	mov	r17,r2
 8001aac:	04400a0e 	bge	zero,r17,8001ad8 <___vfprintf_internal_r+0x1258>
 8001ab0:	d8801f17 	ldw	r2,124(sp)
 8001ab4:	1c47883a 	add	r3,r3,r17
 8001ab8:	44000015 	stw	r16,0(r8)
 8001abc:	10800044 	addi	r2,r2,1
 8001ac0:	44400115 	stw	r17,4(r8)
 8001ac4:	d8c02015 	stw	r3,128(sp)
 8001ac8:	d8801f15 	stw	r2,124(sp)
 8001acc:	010001c4 	movi	r4,7
 8001ad0:	20826516 	blt	r4,r2,8002468 <___vfprintf_internal_r+0x1be8>
 8001ad4:	42000204 	addi	r8,r8,8
 8001ad8:	88026116 	blt	r17,zero,8002460 <___vfprintf_internal_r+0x1be0>
 8001adc:	d9003217 	ldw	r4,200(sp)
 8001ae0:	2463c83a 	sub	r17,r4,r17
 8001ae4:	04407b0e 	bge	zero,r17,8001cd4 <___vfprintf_internal_r+0x1454>
 8001ae8:	05800404 	movi	r22,16
 8001aec:	d8801f17 	ldw	r2,124(sp)
 8001af0:	b4419d0e 	bge	r22,r17,8002168 <___vfprintf_internal_r+0x18e8>
 8001af4:	010200b4 	movhi	r4,2050
 8001af8:	2123ea84 	addi	r4,r4,-28758
 8001afc:	d9002b15 	stw	r4,172(sp)
 8001b00:	070001c4 	movi	fp,7
 8001b04:	dcc02c17 	ldw	r19,176(sp)
 8001b08:	00000306 	br	8001b18 <___vfprintf_internal_r+0x1298>
 8001b0c:	42000204 	addi	r8,r8,8
 8001b10:	8c7ffc04 	addi	r17,r17,-16
 8001b14:	b441970e 	bge	r22,r17,8002174 <___vfprintf_internal_r+0x18f4>
 8001b18:	18c00404 	addi	r3,r3,16
 8001b1c:	10800044 	addi	r2,r2,1
 8001b20:	45000015 	stw	r20,0(r8)
 8001b24:	45800115 	stw	r22,4(r8)
 8001b28:	d8c02015 	stw	r3,128(sp)
 8001b2c:	d8801f15 	stw	r2,124(sp)
 8001b30:	e0bff60e 	bge	fp,r2,8001b0c <__alt_data_end+0xf8001b0c>
 8001b34:	d9801e04 	addi	r6,sp,120
 8001b38:	b80b883a 	mov	r5,r23
 8001b3c:	9809883a 	mov	r4,r19
 8001b40:	8007e7c0 	call	8007e7c <__sprint_r>
 8001b44:	103c501e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001b48:	d8c02017 	ldw	r3,128(sp)
 8001b4c:	d8801f17 	ldw	r2,124(sp)
 8001b50:	da000404 	addi	r8,sp,16
 8001b54:	003fee06 	br	8001b10 <__alt_data_end+0xf8001b10>
 8001b58:	d9002c17 	ldw	r4,176(sp)
 8001b5c:	d9801e04 	addi	r6,sp,120
 8001b60:	b80b883a 	mov	r5,r23
 8001b64:	8007e7c0 	call	8007e7c <__sprint_r>
 8001b68:	103c471e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001b6c:	d8c02017 	ldw	r3,128(sp)
 8001b70:	df002787 	ldb	fp,158(sp)
 8001b74:	da000404 	addi	r8,sp,16
 8001b78:	003d5606 	br	80010d4 <__alt_data_end+0xf80010d4>
 8001b7c:	9080040c 	andi	r2,r18,16
 8001b80:	10016126 	beq	r2,zero,8002108 <___vfprintf_internal_r+0x1888>
 8001b84:	d8802d17 	ldw	r2,180(sp)
 8001b88:	14c00017 	ldw	r19,0(r2)
 8001b8c:	10800104 	addi	r2,r2,4
 8001b90:	d8802d15 	stw	r2,180(sp)
 8001b94:	982dd7fa 	srai	r22,r19,31
 8001b98:	b005883a 	mov	r2,r22
 8001b9c:	003c8206 	br	8000da8 <__alt_data_end+0xf8000da8>
 8001ba0:	9080040c 	andi	r2,r18,16
 8001ba4:	10003526 	beq	r2,zero,8001c7c <___vfprintf_internal_r+0x13fc>
 8001ba8:	d9402d17 	ldw	r5,180(sp)
 8001bac:	d8c02917 	ldw	r3,164(sp)
 8001bb0:	d8002785 	stb	zero,158(sp)
 8001bb4:	28800104 	addi	r2,r5,4
 8001bb8:	2cc00017 	ldw	r19,0(r5)
 8001bbc:	002d883a 	mov	r22,zero
 8001bc0:	18003716 	blt	r3,zero,8001ca0 <___vfprintf_internal_r+0x1420>
 8001bc4:	00ffdfc4 	movi	r3,-129
 8001bc8:	d8802d15 	stw	r2,180(sp)
 8001bcc:	90e4703a 	and	r18,r18,r3
 8001bd0:	0039883a 	mov	fp,zero
 8001bd4:	983df326 	beq	r19,zero,80013a4 <__alt_data_end+0xf80013a4>
 8001bd8:	00800244 	movi	r2,9
 8001bdc:	14fc7b36 	bltu	r2,r19,8000dcc <__alt_data_end+0xf8000dcc>
 8001be0:	d8c02817 	ldw	r3,160(sp)
 8001be4:	dc001dc4 	addi	r16,sp,119
 8001be8:	9cc00c04 	addi	r19,r19,48
 8001bec:	1c07c83a 	sub	r3,r3,r16
 8001bf0:	dcc01dc5 	stb	r19,119(sp)
 8001bf4:	d8c02e15 	stw	r3,184(sp)
 8001bf8:	003ce806 	br	8000f9c <__alt_data_end+0xf8000f9c>
 8001bfc:	d8803317 	ldw	r2,204(sp)
 8001c00:	143fffc4 	addi	r16,r2,-1
 8001c04:	043f4d0e 	bge	zero,r16,800193c <__alt_data_end+0xf800193c>
 8001c08:	07000404 	movi	fp,16
 8001c0c:	e400810e 	bge	fp,r16,8001e14 <___vfprintf_internal_r+0x1594>
 8001c10:	014200b4 	movhi	r5,2050
 8001c14:	2963ea84 	addi	r5,r5,-28758
 8001c18:	d9402b15 	stw	r5,172(sp)
 8001c1c:	01c001c4 	movi	r7,7
 8001c20:	dcc02c17 	ldw	r19,176(sp)
 8001c24:	00000306 	br	8001c34 <___vfprintf_internal_r+0x13b4>
 8001c28:	b5800204 	addi	r22,r22,8
 8001c2c:	843ffc04 	addi	r16,r16,-16
 8001c30:	e4007b0e 	bge	fp,r16,8001e20 <___vfprintf_internal_r+0x15a0>
 8001c34:	18c00404 	addi	r3,r3,16
 8001c38:	8c400044 	addi	r17,r17,1
 8001c3c:	b5000015 	stw	r20,0(r22)
 8001c40:	b7000115 	stw	fp,4(r22)
 8001c44:	d8c02015 	stw	r3,128(sp)
 8001c48:	dc401f15 	stw	r17,124(sp)
 8001c4c:	3c7ff60e 	bge	r7,r17,8001c28 <__alt_data_end+0xf8001c28>
 8001c50:	d9801e04 	addi	r6,sp,120
 8001c54:	b80b883a 	mov	r5,r23
 8001c58:	9809883a 	mov	r4,r19
 8001c5c:	d9c03c15 	stw	r7,240(sp)
 8001c60:	8007e7c0 	call	8007e7c <__sprint_r>
 8001c64:	d9c03c17 	ldw	r7,240(sp)
 8001c68:	103c071e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001c6c:	d8c02017 	ldw	r3,128(sp)
 8001c70:	dc401f17 	ldw	r17,124(sp)
 8001c74:	dd800404 	addi	r22,sp,16
 8001c78:	003fec06 	br	8001c2c <__alt_data_end+0xf8001c2c>
 8001c7c:	9080100c 	andi	r2,r18,64
 8001c80:	d8002785 	stb	zero,158(sp)
 8001c84:	10010e26 	beq	r2,zero,80020c0 <___vfprintf_internal_r+0x1840>
 8001c88:	d9002d17 	ldw	r4,180(sp)
 8001c8c:	d9402917 	ldw	r5,164(sp)
 8001c90:	002d883a 	mov	r22,zero
 8001c94:	20800104 	addi	r2,r4,4
 8001c98:	24c0000b 	ldhu	r19,0(r4)
 8001c9c:	283fc90e 	bge	r5,zero,8001bc4 <__alt_data_end+0xf8001bc4>
 8001ca0:	d8802d15 	stw	r2,180(sp)
 8001ca4:	0039883a 	mov	fp,zero
 8001ca8:	9d84b03a 	or	r2,r19,r22
 8001cac:	103c461e 	bne	r2,zero,8000dc8 <__alt_data_end+0xf8000dc8>
 8001cb0:	00800044 	movi	r2,1
 8001cb4:	003e6c06 	br	8001668 <__alt_data_end+0xf8001668>
 8001cb8:	d9002c17 	ldw	r4,176(sp)
 8001cbc:	d9801e04 	addi	r6,sp,120
 8001cc0:	b80b883a 	mov	r5,r23
 8001cc4:	8007e7c0 	call	8007e7c <__sprint_r>
 8001cc8:	103bef1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001ccc:	d8c02017 	ldw	r3,128(sp)
 8001cd0:	da000404 	addi	r8,sp,16
 8001cd4:	d9003217 	ldw	r4,200(sp)
 8001cd8:	d8802617 	ldw	r2,152(sp)
 8001cdc:	d9403317 	ldw	r5,204(sp)
 8001ce0:	8123883a 	add	r17,r16,r4
 8001ce4:	11400216 	blt	r2,r5,8001cf0 <___vfprintf_internal_r+0x1470>
 8001ce8:	9100004c 	andi	r4,r18,1
 8001cec:	20000d26 	beq	r4,zero,8001d24 <___vfprintf_internal_r+0x14a4>
 8001cf0:	d9003717 	ldw	r4,220(sp)
 8001cf4:	d9403417 	ldw	r5,208(sp)
 8001cf8:	1907883a 	add	r3,r3,r4
 8001cfc:	d9001f17 	ldw	r4,124(sp)
 8001d00:	41400015 	stw	r5,0(r8)
 8001d04:	d9403717 	ldw	r5,220(sp)
 8001d08:	21000044 	addi	r4,r4,1
 8001d0c:	d8c02015 	stw	r3,128(sp)
 8001d10:	41400115 	stw	r5,4(r8)
 8001d14:	d9001f15 	stw	r4,124(sp)
 8001d18:	014001c4 	movi	r5,7
 8001d1c:	2901e816 	blt	r5,r4,80024c0 <___vfprintf_internal_r+0x1c40>
 8001d20:	42000204 	addi	r8,r8,8
 8001d24:	d9003317 	ldw	r4,204(sp)
 8001d28:	8121883a 	add	r16,r16,r4
 8001d2c:	2085c83a 	sub	r2,r4,r2
 8001d30:	8461c83a 	sub	r16,r16,r17
 8001d34:	1400010e 	bge	r2,r16,8001d3c <___vfprintf_internal_r+0x14bc>
 8001d38:	1021883a 	mov	r16,r2
 8001d3c:	04000a0e 	bge	zero,r16,8001d68 <___vfprintf_internal_r+0x14e8>
 8001d40:	d9001f17 	ldw	r4,124(sp)
 8001d44:	1c07883a 	add	r3,r3,r16
 8001d48:	44400015 	stw	r17,0(r8)
 8001d4c:	21000044 	addi	r4,r4,1
 8001d50:	44000115 	stw	r16,4(r8)
 8001d54:	d8c02015 	stw	r3,128(sp)
 8001d58:	d9001f15 	stw	r4,124(sp)
 8001d5c:	014001c4 	movi	r5,7
 8001d60:	2901fb16 	blt	r5,r4,8002550 <___vfprintf_internal_r+0x1cd0>
 8001d64:	42000204 	addi	r8,r8,8
 8001d68:	8001f716 	blt	r16,zero,8002548 <___vfprintf_internal_r+0x1cc8>
 8001d6c:	1421c83a 	sub	r16,r2,r16
 8001d70:	043d380e 	bge	zero,r16,8001254 <__alt_data_end+0xf8001254>
 8001d74:	04400404 	movi	r17,16
 8001d78:	d8801f17 	ldw	r2,124(sp)
 8001d7c:	8c3efb0e 	bge	r17,r16,800196c <__alt_data_end+0xf800196c>
 8001d80:	014200b4 	movhi	r5,2050
 8001d84:	2963ea84 	addi	r5,r5,-28758
 8001d88:	d9402b15 	stw	r5,172(sp)
 8001d8c:	058001c4 	movi	r22,7
 8001d90:	dcc02c17 	ldw	r19,176(sp)
 8001d94:	00000306 	br	8001da4 <___vfprintf_internal_r+0x1524>
 8001d98:	42000204 	addi	r8,r8,8
 8001d9c:	843ffc04 	addi	r16,r16,-16
 8001da0:	8c3ef50e 	bge	r17,r16,8001978 <__alt_data_end+0xf8001978>
 8001da4:	18c00404 	addi	r3,r3,16
 8001da8:	10800044 	addi	r2,r2,1
 8001dac:	45000015 	stw	r20,0(r8)
 8001db0:	44400115 	stw	r17,4(r8)
 8001db4:	d8c02015 	stw	r3,128(sp)
 8001db8:	d8801f15 	stw	r2,124(sp)
 8001dbc:	b0bff60e 	bge	r22,r2,8001d98 <__alt_data_end+0xf8001d98>
 8001dc0:	d9801e04 	addi	r6,sp,120
 8001dc4:	b80b883a 	mov	r5,r23
 8001dc8:	9809883a 	mov	r4,r19
 8001dcc:	8007e7c0 	call	8007e7c <__sprint_r>
 8001dd0:	103bad1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001dd4:	d8c02017 	ldw	r3,128(sp)
 8001dd8:	d8801f17 	ldw	r2,124(sp)
 8001ddc:	da000404 	addi	r8,sp,16
 8001de0:	003fee06 	br	8001d9c <__alt_data_end+0xf8001d9c>
 8001de4:	9088703a 	and	r4,r18,r2
 8001de8:	203eab1e 	bne	r4,zero,8001898 <__alt_data_end+0xf8001898>
 8001dec:	dc401f17 	ldw	r17,124(sp)
 8001df0:	40800115 	stw	r2,4(r8)
 8001df4:	44000015 	stw	r16,0(r8)
 8001df8:	8c400044 	addi	r17,r17,1
 8001dfc:	d8c02015 	stw	r3,128(sp)
 8001e00:	dc401f15 	stw	r17,124(sp)
 8001e04:	008001c4 	movi	r2,7
 8001e08:	14400e16 	blt	r2,r17,8001e44 <___vfprintf_internal_r+0x15c4>
 8001e0c:	45800204 	addi	r22,r8,8
 8001e10:	003eca06 	br	800193c <__alt_data_end+0xf800193c>
 8001e14:	010200b4 	movhi	r4,2050
 8001e18:	2123ea84 	addi	r4,r4,-28758
 8001e1c:	d9002b15 	stw	r4,172(sp)
 8001e20:	d8802b17 	ldw	r2,172(sp)
 8001e24:	1c07883a 	add	r3,r3,r16
 8001e28:	8c400044 	addi	r17,r17,1
 8001e2c:	b0800015 	stw	r2,0(r22)
 8001e30:	b4000115 	stw	r16,4(r22)
 8001e34:	d8c02015 	stw	r3,128(sp)
 8001e38:	dc401f15 	stw	r17,124(sp)
 8001e3c:	008001c4 	movi	r2,7
 8001e40:	147ebd0e 	bge	r2,r17,8001938 <__alt_data_end+0xf8001938>
 8001e44:	d9002c17 	ldw	r4,176(sp)
 8001e48:	d9801e04 	addi	r6,sp,120
 8001e4c:	b80b883a 	mov	r5,r23
 8001e50:	8007e7c0 	call	8007e7c <__sprint_r>
 8001e54:	103b8c1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001e58:	d8c02017 	ldw	r3,128(sp)
 8001e5c:	dc401f17 	ldw	r17,124(sp)
 8001e60:	dd800404 	addi	r22,sp,16
 8001e64:	003eb506 	br	800193c <__alt_data_end+0xf800193c>
 8001e68:	d9002c17 	ldw	r4,176(sp)
 8001e6c:	d9801e04 	addi	r6,sp,120
 8001e70:	b80b883a 	mov	r5,r23
 8001e74:	8007e7c0 	call	8007e7c <__sprint_r>
 8001e78:	103b831e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001e7c:	d8c02017 	ldw	r3,128(sp)
 8001e80:	dc401f17 	ldw	r17,124(sp)
 8001e84:	da000404 	addi	r8,sp,16
 8001e88:	003e8d06 	br	80018c0 <__alt_data_end+0xf80018c0>
 8001e8c:	d9002c17 	ldw	r4,176(sp)
 8001e90:	d9801e04 	addi	r6,sp,120
 8001e94:	b80b883a 	mov	r5,r23
 8001e98:	8007e7c0 	call	8007e7c <__sprint_r>
 8001e9c:	103b7a1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001ea0:	d8c02017 	ldw	r3,128(sp)
 8001ea4:	dc401f17 	ldw	r17,124(sp)
 8001ea8:	dd800404 	addi	r22,sp,16
 8001eac:	003e8f06 	br	80018ec <__alt_data_end+0xf80018ec>
 8001eb0:	0027883a 	mov	r19,zero
 8001eb4:	003f4a06 	br	8001be0 <__alt_data_end+0xf8001be0>
 8001eb8:	d9002c17 	ldw	r4,176(sp)
 8001ebc:	d9801e04 	addi	r6,sp,120
 8001ec0:	b80b883a 	mov	r5,r23
 8001ec4:	8007e7c0 	call	8007e7c <__sprint_r>
 8001ec8:	103b6f1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8001ecc:	d8c02017 	ldw	r3,128(sp)
 8001ed0:	da000404 	addi	r8,sp,16
 8001ed4:	003c9d06 	br	800114c <__alt_data_end+0xf800114c>
 8001ed8:	04e7c83a 	sub	r19,zero,r19
 8001edc:	9804c03a 	cmpne	r2,r19,zero
 8001ee0:	05adc83a 	sub	r22,zero,r22
 8001ee4:	b0adc83a 	sub	r22,r22,r2
 8001ee8:	d8802917 	ldw	r2,164(sp)
 8001eec:	07000b44 	movi	fp,45
 8001ef0:	df002785 	stb	fp,158(sp)
 8001ef4:	10017b16 	blt	r2,zero,80024e4 <___vfprintf_internal_r+0x1c64>
 8001ef8:	00bfdfc4 	movi	r2,-129
 8001efc:	90a4703a 	and	r18,r18,r2
 8001f00:	003bb106 	br	8000dc8 <__alt_data_end+0xf8000dc8>
 8001f04:	d9003617 	ldw	r4,216(sp)
 8001f08:	d9403817 	ldw	r5,224(sp)
 8001f0c:	da003d15 	stw	r8,244(sp)
 8001f10:	8007aa00 	call	8007aa0 <__fpclassifyd>
 8001f14:	da003d17 	ldw	r8,244(sp)
 8001f18:	1000f026 	beq	r2,zero,80022dc <___vfprintf_internal_r+0x1a5c>
 8001f1c:	d9002917 	ldw	r4,164(sp)
 8001f20:	05bff7c4 	movi	r22,-33
 8001f24:	00bfffc4 	movi	r2,-1
 8001f28:	8dac703a 	and	r22,r17,r22
 8001f2c:	20820026 	beq	r4,r2,8002730 <___vfprintf_internal_r+0x1eb0>
 8001f30:	008011c4 	movi	r2,71
 8001f34:	b081f726 	beq	r22,r2,8002714 <___vfprintf_internal_r+0x1e94>
 8001f38:	d9003817 	ldw	r4,224(sp)
 8001f3c:	90c04014 	ori	r3,r18,256
 8001f40:	d8c02b15 	stw	r3,172(sp)
 8001f44:	20021516 	blt	r4,zero,800279c <___vfprintf_internal_r+0x1f1c>
 8001f48:	dcc03817 	ldw	r19,224(sp)
 8001f4c:	d8002a05 	stb	zero,168(sp)
 8001f50:	00801984 	movi	r2,102
 8001f54:	8881f926 	beq	r17,r2,800273c <___vfprintf_internal_r+0x1ebc>
 8001f58:	00801184 	movi	r2,70
 8001f5c:	88821c26 	beq	r17,r2,80027d0 <___vfprintf_internal_r+0x1f50>
 8001f60:	00801144 	movi	r2,69
 8001f64:	b081ef26 	beq	r22,r2,8002724 <___vfprintf_internal_r+0x1ea4>
 8001f68:	d8c02917 	ldw	r3,164(sp)
 8001f6c:	d8802104 	addi	r2,sp,132
 8001f70:	d8800315 	stw	r2,12(sp)
 8001f74:	d9403617 	ldw	r5,216(sp)
 8001f78:	d8802504 	addi	r2,sp,148
 8001f7c:	d9002c17 	ldw	r4,176(sp)
 8001f80:	d8800215 	stw	r2,8(sp)
 8001f84:	d8802604 	addi	r2,sp,152
 8001f88:	d8c00015 	stw	r3,0(sp)
 8001f8c:	d8800115 	stw	r2,4(sp)
 8001f90:	01c00084 	movi	r7,2
 8001f94:	980d883a 	mov	r6,r19
 8001f98:	d8c03c15 	stw	r3,240(sp)
 8001f9c:	da003d15 	stw	r8,244(sp)
 8001fa0:	8002ea40 	call	8002ea4 <_dtoa_r>
 8001fa4:	1021883a 	mov	r16,r2
 8001fa8:	008019c4 	movi	r2,103
 8001fac:	d8c03c17 	ldw	r3,240(sp)
 8001fb0:	da003d17 	ldw	r8,244(sp)
 8001fb4:	88817126 	beq	r17,r2,800257c <___vfprintf_internal_r+0x1cfc>
 8001fb8:	008011c4 	movi	r2,71
 8001fbc:	88829226 	beq	r17,r2,8002a08 <___vfprintf_internal_r+0x2188>
 8001fc0:	80f9883a 	add	fp,r16,r3
 8001fc4:	d9003617 	ldw	r4,216(sp)
 8001fc8:	000d883a 	mov	r6,zero
 8001fcc:	000f883a 	mov	r7,zero
 8001fd0:	980b883a 	mov	r5,r19
 8001fd4:	da003d15 	stw	r8,244(sp)
 8001fd8:	800baf40 	call	800baf4 <__eqdf2>
 8001fdc:	da003d17 	ldw	r8,244(sp)
 8001fe0:	10018d26 	beq	r2,zero,8002618 <___vfprintf_internal_r+0x1d98>
 8001fe4:	d8802117 	ldw	r2,132(sp)
 8001fe8:	1700062e 	bgeu	r2,fp,8002004 <___vfprintf_internal_r+0x1784>
 8001fec:	01000c04 	movi	r4,48
 8001ff0:	10c00044 	addi	r3,r2,1
 8001ff4:	d8c02115 	stw	r3,132(sp)
 8001ff8:	11000005 	stb	r4,0(r2)
 8001ffc:	d8802117 	ldw	r2,132(sp)
 8002000:	173ffb36 	bltu	r2,fp,8001ff0 <__alt_data_end+0xf8001ff0>
 8002004:	1405c83a 	sub	r2,r2,r16
 8002008:	d8803315 	stw	r2,204(sp)
 800200c:	008011c4 	movi	r2,71
 8002010:	b0817626 	beq	r22,r2,80025ec <___vfprintf_internal_r+0x1d6c>
 8002014:	00801944 	movi	r2,101
 8002018:	1442810e 	bge	r2,r17,8002a20 <___vfprintf_internal_r+0x21a0>
 800201c:	d8c02617 	ldw	r3,152(sp)
 8002020:	00801984 	movi	r2,102
 8002024:	d8c03215 	stw	r3,200(sp)
 8002028:	8881fe26 	beq	r17,r2,8002824 <___vfprintf_internal_r+0x1fa4>
 800202c:	d8c03217 	ldw	r3,200(sp)
 8002030:	d9003317 	ldw	r4,204(sp)
 8002034:	1901dd16 	blt	r3,r4,80027ac <___vfprintf_internal_r+0x1f2c>
 8002038:	9480004c 	andi	r18,r18,1
 800203c:	90022b1e 	bne	r18,zero,80028ec <___vfprintf_internal_r+0x206c>
 8002040:	1805883a 	mov	r2,r3
 8002044:	18028016 	blt	r3,zero,8002a48 <___vfprintf_internal_r+0x21c8>
 8002048:	d8c03217 	ldw	r3,200(sp)
 800204c:	044019c4 	movi	r17,103
 8002050:	d8c02e15 	stw	r3,184(sp)
 8002054:	df002a07 	ldb	fp,168(sp)
 8002058:	e001531e 	bne	fp,zero,80025a8 <___vfprintf_internal_r+0x1d28>
 800205c:	df002783 	ldbu	fp,158(sp)
 8002060:	d8802a15 	stw	r2,168(sp)
 8002064:	dc802b17 	ldw	r18,172(sp)
 8002068:	d8002915 	stw	zero,164(sp)
 800206c:	003bd106 	br	8000fb4 <__alt_data_end+0xf8000fb4>
 8002070:	d8802d17 	ldw	r2,180(sp)
 8002074:	d8c02d17 	ldw	r3,180(sp)
 8002078:	d9002d17 	ldw	r4,180(sp)
 800207c:	10800017 	ldw	r2,0(r2)
 8002080:	18c00117 	ldw	r3,4(r3)
 8002084:	21000204 	addi	r4,r4,8
 8002088:	d8803615 	stw	r2,216(sp)
 800208c:	d8c03815 	stw	r3,224(sp)
 8002090:	d9002d15 	stw	r4,180(sp)
 8002094:	003b7506 	br	8000e6c <__alt_data_end+0xf8000e6c>
 8002098:	ac400007 	ldb	r17,0(r21)
 800209c:	003a5906 	br	8000a04 <__alt_data_end+0xf8000a04>
 80020a0:	9080100c 	andi	r2,r18,64
 80020a4:	1000a826 	beq	r2,zero,8002348 <___vfprintf_internal_r+0x1ac8>
 80020a8:	d9002d17 	ldw	r4,180(sp)
 80020ac:	002d883a 	mov	r22,zero
 80020b0:	24c0000b 	ldhu	r19,0(r4)
 80020b4:	21000104 	addi	r4,r4,4
 80020b8:	d9002d15 	stw	r4,180(sp)
 80020bc:	003ccb06 	br	80013ec <__alt_data_end+0xf80013ec>
 80020c0:	d8c02d17 	ldw	r3,180(sp)
 80020c4:	d9002917 	ldw	r4,164(sp)
 80020c8:	002d883a 	mov	r22,zero
 80020cc:	18800104 	addi	r2,r3,4
 80020d0:	1cc00017 	ldw	r19,0(r3)
 80020d4:	203ebb0e 	bge	r4,zero,8001bc4 <__alt_data_end+0xf8001bc4>
 80020d8:	003ef106 	br	8001ca0 <__alt_data_end+0xf8001ca0>
 80020dc:	9080040c 	andi	r2,r18,16
 80020e0:	1000921e 	bne	r2,zero,800232c <___vfprintf_internal_r+0x1aac>
 80020e4:	9480100c 	andi	r18,r18,64
 80020e8:	90013926 	beq	r18,zero,80025d0 <___vfprintf_internal_r+0x1d50>
 80020ec:	d9002d17 	ldw	r4,180(sp)
 80020f0:	d9402f17 	ldw	r5,188(sp)
 80020f4:	20800017 	ldw	r2,0(r4)
 80020f8:	21000104 	addi	r4,r4,4
 80020fc:	d9002d15 	stw	r4,180(sp)
 8002100:	1140000d 	sth	r5,0(r2)
 8002104:	003a1606 	br	8000960 <__alt_data_end+0xf8000960>
 8002108:	9080100c 	andi	r2,r18,64
 800210c:	10008026 	beq	r2,zero,8002310 <___vfprintf_internal_r+0x1a90>
 8002110:	d8c02d17 	ldw	r3,180(sp)
 8002114:	1cc0000f 	ldh	r19,0(r3)
 8002118:	18c00104 	addi	r3,r3,4
 800211c:	d8c02d15 	stw	r3,180(sp)
 8002120:	982dd7fa 	srai	r22,r19,31
 8002124:	b005883a 	mov	r2,r22
 8002128:	003b1f06 	br	8000da8 <__alt_data_end+0xf8000da8>
 800212c:	9080100c 	andi	r2,r18,64
 8002130:	d8002785 	stb	zero,158(sp)
 8002134:	10008a1e 	bne	r2,zero,8002360 <___vfprintf_internal_r+0x1ae0>
 8002138:	d9402d17 	ldw	r5,180(sp)
 800213c:	d8c02917 	ldw	r3,164(sp)
 8002140:	002d883a 	mov	r22,zero
 8002144:	28800104 	addi	r2,r5,4
 8002148:	2cc00017 	ldw	r19,0(r5)
 800214c:	183e4b0e 	bge	r3,zero,8001a7c <__alt_data_end+0xf8001a7c>
 8002150:	9d86b03a 	or	r3,r19,r22
 8002154:	d8802d15 	stw	r2,180(sp)
 8002158:	183e4c1e 	bne	r3,zero,8001a8c <__alt_data_end+0xf8001a8c>
 800215c:	0039883a 	mov	fp,zero
 8002160:	0005883a 	mov	r2,zero
 8002164:	003d4006 	br	8001668 <__alt_data_end+0xf8001668>
 8002168:	014200b4 	movhi	r5,2050
 800216c:	2963ea84 	addi	r5,r5,-28758
 8002170:	d9402b15 	stw	r5,172(sp)
 8002174:	d9402b17 	ldw	r5,172(sp)
 8002178:	1c47883a 	add	r3,r3,r17
 800217c:	10800044 	addi	r2,r2,1
 8002180:	41400015 	stw	r5,0(r8)
 8002184:	44400115 	stw	r17,4(r8)
 8002188:	d8c02015 	stw	r3,128(sp)
 800218c:	d8801f15 	stw	r2,124(sp)
 8002190:	010001c4 	movi	r4,7
 8002194:	20bec816 	blt	r4,r2,8001cb8 <__alt_data_end+0xf8001cb8>
 8002198:	42000204 	addi	r8,r8,8
 800219c:	003ecd06 	br	8001cd4 <__alt_data_end+0xf8001cd4>
 80021a0:	d9002917 	ldw	r4,164(sp)
 80021a4:	d8002785 	stb	zero,158(sp)
 80021a8:	203d2d16 	blt	r4,zero,8001660 <__alt_data_end+0xf8001660>
 80021ac:	00bfdfc4 	movi	r2,-129
 80021b0:	90a4703a 	and	r18,r18,r2
 80021b4:	003a9106 	br	8000bfc <__alt_data_end+0xf8000bfc>
 80021b8:	010200b4 	movhi	r4,2050
 80021bc:	2123ea84 	addi	r4,r4,-28758
 80021c0:	d9002b15 	stw	r4,172(sp)
 80021c4:	003c0c06 	br	80011f8 <__alt_data_end+0xf80011f8>
 80021c8:	d9002c17 	ldw	r4,176(sp)
 80021cc:	d9801e04 	addi	r6,sp,120
 80021d0:	b80b883a 	mov	r5,r23
 80021d4:	8007e7c0 	call	8007e7c <__sprint_r>
 80021d8:	103aab1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80021dc:	d8c02017 	ldw	r3,128(sp)
 80021e0:	da000404 	addi	r8,sp,16
 80021e4:	003d4106 	br	80016ec <__alt_data_end+0xf80016ec>
 80021e8:	d8801f17 	ldw	r2,124(sp)
 80021ec:	014200b4 	movhi	r5,2050
 80021f0:	01000044 	movi	r4,1
 80021f4:	18c00044 	addi	r3,r3,1
 80021f8:	10800044 	addi	r2,r2,1
 80021fc:	2963ea04 	addi	r5,r5,-28760
 8002200:	41000115 	stw	r4,4(r8)
 8002204:	41400015 	stw	r5,0(r8)
 8002208:	d8c02015 	stw	r3,128(sp)
 800220c:	d8801f15 	stw	r2,124(sp)
 8002210:	010001c4 	movi	r4,7
 8002214:	20805c16 	blt	r4,r2,8002388 <___vfprintf_internal_r+0x1b08>
 8002218:	42000204 	addi	r8,r8,8
 800221c:	8800041e 	bne	r17,zero,8002230 <___vfprintf_internal_r+0x19b0>
 8002220:	d8803317 	ldw	r2,204(sp)
 8002224:	1000021e 	bne	r2,zero,8002230 <___vfprintf_internal_r+0x19b0>
 8002228:	9080004c 	andi	r2,r18,1
 800222c:	103c0926 	beq	r2,zero,8001254 <__alt_data_end+0xf8001254>
 8002230:	d9003717 	ldw	r4,220(sp)
 8002234:	d8801f17 	ldw	r2,124(sp)
 8002238:	d9403417 	ldw	r5,208(sp)
 800223c:	20c7883a 	add	r3,r4,r3
 8002240:	10800044 	addi	r2,r2,1
 8002244:	41000115 	stw	r4,4(r8)
 8002248:	41400015 	stw	r5,0(r8)
 800224c:	d8c02015 	stw	r3,128(sp)
 8002250:	d8801f15 	stw	r2,124(sp)
 8002254:	010001c4 	movi	r4,7
 8002258:	20812116 	blt	r4,r2,80026e0 <___vfprintf_internal_r+0x1e60>
 800225c:	42000204 	addi	r8,r8,8
 8002260:	0463c83a 	sub	r17,zero,r17
 8002264:	0440730e 	bge	zero,r17,8002434 <___vfprintf_internal_r+0x1bb4>
 8002268:	05800404 	movi	r22,16
 800226c:	b440860e 	bge	r22,r17,8002488 <___vfprintf_internal_r+0x1c08>
 8002270:	014200b4 	movhi	r5,2050
 8002274:	2963ea84 	addi	r5,r5,-28758
 8002278:	d9402b15 	stw	r5,172(sp)
 800227c:	070001c4 	movi	fp,7
 8002280:	dcc02c17 	ldw	r19,176(sp)
 8002284:	00000306 	br	8002294 <___vfprintf_internal_r+0x1a14>
 8002288:	42000204 	addi	r8,r8,8
 800228c:	8c7ffc04 	addi	r17,r17,-16
 8002290:	b440800e 	bge	r22,r17,8002494 <___vfprintf_internal_r+0x1c14>
 8002294:	18c00404 	addi	r3,r3,16
 8002298:	10800044 	addi	r2,r2,1
 800229c:	45000015 	stw	r20,0(r8)
 80022a0:	45800115 	stw	r22,4(r8)
 80022a4:	d8c02015 	stw	r3,128(sp)
 80022a8:	d8801f15 	stw	r2,124(sp)
 80022ac:	e0bff60e 	bge	fp,r2,8002288 <__alt_data_end+0xf8002288>
 80022b0:	d9801e04 	addi	r6,sp,120
 80022b4:	b80b883a 	mov	r5,r23
 80022b8:	9809883a 	mov	r4,r19
 80022bc:	8007e7c0 	call	8007e7c <__sprint_r>
 80022c0:	103a711e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80022c4:	d8c02017 	ldw	r3,128(sp)
 80022c8:	d8801f17 	ldw	r2,124(sp)
 80022cc:	da000404 	addi	r8,sp,16
 80022d0:	003fee06 	br	800228c <__alt_data_end+0xf800228c>
 80022d4:	00bfffc4 	movi	r2,-1
 80022d8:	003a6f06 	br	8000c98 <__alt_data_end+0xf8000c98>
 80022dc:	008011c4 	movi	r2,71
 80022e0:	1440b816 	blt	r2,r17,80025c4 <___vfprintf_internal_r+0x1d44>
 80022e4:	040200b4 	movhi	r16,2050
 80022e8:	8423dc04 	addi	r16,r16,-28816
 80022ec:	00c000c4 	movi	r3,3
 80022f0:	00bfdfc4 	movi	r2,-129
 80022f4:	d8c02a15 	stw	r3,168(sp)
 80022f8:	90a4703a 	and	r18,r18,r2
 80022fc:	df002783 	ldbu	fp,158(sp)
 8002300:	d8c02e15 	stw	r3,184(sp)
 8002304:	d8002915 	stw	zero,164(sp)
 8002308:	d8003215 	stw	zero,200(sp)
 800230c:	003b2906 	br	8000fb4 <__alt_data_end+0xf8000fb4>
 8002310:	d9002d17 	ldw	r4,180(sp)
 8002314:	24c00017 	ldw	r19,0(r4)
 8002318:	21000104 	addi	r4,r4,4
 800231c:	d9002d15 	stw	r4,180(sp)
 8002320:	982dd7fa 	srai	r22,r19,31
 8002324:	b005883a 	mov	r2,r22
 8002328:	003a9f06 	br	8000da8 <__alt_data_end+0xf8000da8>
 800232c:	d9402d17 	ldw	r5,180(sp)
 8002330:	d8c02f17 	ldw	r3,188(sp)
 8002334:	28800017 	ldw	r2,0(r5)
 8002338:	29400104 	addi	r5,r5,4
 800233c:	d9402d15 	stw	r5,180(sp)
 8002340:	10c00015 	stw	r3,0(r2)
 8002344:	00398606 	br	8000960 <__alt_data_end+0xf8000960>
 8002348:	d9402d17 	ldw	r5,180(sp)
 800234c:	002d883a 	mov	r22,zero
 8002350:	2cc00017 	ldw	r19,0(r5)
 8002354:	29400104 	addi	r5,r5,4
 8002358:	d9402d15 	stw	r5,180(sp)
 800235c:	003c2306 	br	80013ec <__alt_data_end+0xf80013ec>
 8002360:	d8c02d17 	ldw	r3,180(sp)
 8002364:	d9002917 	ldw	r4,164(sp)
 8002368:	002d883a 	mov	r22,zero
 800236c:	18800104 	addi	r2,r3,4
 8002370:	1cc0000b 	ldhu	r19,0(r3)
 8002374:	203dc10e 	bge	r4,zero,8001a7c <__alt_data_end+0xf8001a7c>
 8002378:	003f7506 	br	8002150 <__alt_data_end+0xf8002150>
 800237c:	040200b4 	movhi	r16,2050
 8002380:	8423da04 	addi	r16,r16,-28824
 8002384:	003acc06 	br	8000eb8 <__alt_data_end+0xf8000eb8>
 8002388:	d9002c17 	ldw	r4,176(sp)
 800238c:	d9801e04 	addi	r6,sp,120
 8002390:	b80b883a 	mov	r5,r23
 8002394:	8007e7c0 	call	8007e7c <__sprint_r>
 8002398:	103a3b1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 800239c:	dc402617 	ldw	r17,152(sp)
 80023a0:	d8c02017 	ldw	r3,128(sp)
 80023a4:	da000404 	addi	r8,sp,16
 80023a8:	003f9c06 	br	800221c <__alt_data_end+0xf800221c>
 80023ac:	ac400043 	ldbu	r17,1(r21)
 80023b0:	94800814 	ori	r18,r18,32
 80023b4:	ad400044 	addi	r21,r21,1
 80023b8:	8c403fcc 	andi	r17,r17,255
 80023bc:	8c40201c 	xori	r17,r17,128
 80023c0:	8c7fe004 	addi	r17,r17,-128
 80023c4:	00398f06 	br	8000a04 <__alt_data_end+0xf8000a04>
 80023c8:	d8c02d15 	stw	r3,180(sp)
 80023cc:	0039883a 	mov	fp,zero
 80023d0:	003e3506 	br	8001ca8 <__alt_data_end+0xf8001ca8>
 80023d4:	d9002c17 	ldw	r4,176(sp)
 80023d8:	d9801e04 	addi	r6,sp,120
 80023dc:	b80b883a 	mov	r5,r23
 80023e0:	8007e7c0 	call	8007e7c <__sprint_r>
 80023e4:	103a281e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80023e8:	d8c02017 	ldw	r3,128(sp)
 80023ec:	da000404 	addi	r8,sp,16
 80023f0:	003cd006 	br	8001734 <__alt_data_end+0xf8001734>
 80023f4:	8009883a 	mov	r4,r16
 80023f8:	da003d15 	stw	r8,244(sp)
 80023fc:	80007e80 	call	80007e8 <strlen>
 8002400:	d8802e15 	stw	r2,184(sp)
 8002404:	da003d17 	ldw	r8,244(sp)
 8002408:	103c340e 	bge	r2,zero,80014dc <__alt_data_end+0xf80014dc>
 800240c:	0005883a 	mov	r2,zero
 8002410:	003c3206 	br	80014dc <__alt_data_end+0xf80014dc>
 8002414:	d9002c17 	ldw	r4,176(sp)
 8002418:	d9801e04 	addi	r6,sp,120
 800241c:	b80b883a 	mov	r5,r23
 8002420:	8007e7c0 	call	8007e7c <__sprint_r>
 8002424:	103a181e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8002428:	d8c02017 	ldw	r3,128(sp)
 800242c:	d8801f17 	ldw	r2,124(sp)
 8002430:	da000404 	addi	r8,sp,16
 8002434:	d9403317 	ldw	r5,204(sp)
 8002438:	10800044 	addi	r2,r2,1
 800243c:	44000015 	stw	r16,0(r8)
 8002440:	28c7883a 	add	r3,r5,r3
 8002444:	003b7d06 	br	800123c <__alt_data_end+0xf800123c>
 8002448:	010200b4 	movhi	r4,2050
 800244c:	2123ee84 	addi	r4,r4,-28742
 8002450:	d9003515 	stw	r4,212(sp)
 8002454:	003b1406 	br	80010a8 <__alt_data_end+0xf80010a8>
 8002458:	013fffc4 	movi	r4,-1
 800245c:	003a3506 	br	8000d34 <__alt_data_end+0xf8000d34>
 8002460:	0023883a 	mov	r17,zero
 8002464:	003d9d06 	br	8001adc <__alt_data_end+0xf8001adc>
 8002468:	d9002c17 	ldw	r4,176(sp)
 800246c:	d9801e04 	addi	r6,sp,120
 8002470:	b80b883a 	mov	r5,r23
 8002474:	8007e7c0 	call	8007e7c <__sprint_r>
 8002478:	103a031e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 800247c:	d8c02017 	ldw	r3,128(sp)
 8002480:	da000404 	addi	r8,sp,16
 8002484:	003d9406 	br	8001ad8 <__alt_data_end+0xf8001ad8>
 8002488:	010200b4 	movhi	r4,2050
 800248c:	2123ea84 	addi	r4,r4,-28758
 8002490:	d9002b15 	stw	r4,172(sp)
 8002494:	d9002b17 	ldw	r4,172(sp)
 8002498:	1c47883a 	add	r3,r3,r17
 800249c:	10800044 	addi	r2,r2,1
 80024a0:	41000015 	stw	r4,0(r8)
 80024a4:	44400115 	stw	r17,4(r8)
 80024a8:	d8c02015 	stw	r3,128(sp)
 80024ac:	d8801f15 	stw	r2,124(sp)
 80024b0:	010001c4 	movi	r4,7
 80024b4:	20bfd716 	blt	r4,r2,8002414 <__alt_data_end+0xf8002414>
 80024b8:	42000204 	addi	r8,r8,8
 80024bc:	003fdd06 	br	8002434 <__alt_data_end+0xf8002434>
 80024c0:	d9002c17 	ldw	r4,176(sp)
 80024c4:	d9801e04 	addi	r6,sp,120
 80024c8:	b80b883a 	mov	r5,r23
 80024cc:	8007e7c0 	call	8007e7c <__sprint_r>
 80024d0:	1039ed1e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80024d4:	d8802617 	ldw	r2,152(sp)
 80024d8:	d8c02017 	ldw	r3,128(sp)
 80024dc:	da000404 	addi	r8,sp,16
 80024e0:	003e1006 	br	8001d24 <__alt_data_end+0xf8001d24>
 80024e4:	00800044 	movi	r2,1
 80024e8:	10803fcc 	andi	r2,r2,255
 80024ec:	00c00044 	movi	r3,1
 80024f0:	10fa3526 	beq	r2,r3,8000dc8 <__alt_data_end+0xf8000dc8>
 80024f4:	00c00084 	movi	r3,2
 80024f8:	10fbcb26 	beq	r2,r3,8001428 <__alt_data_end+0xf8001428>
 80024fc:	003a8f06 	br	8000f3c <__alt_data_end+0xf8000f3c>
 8002500:	010200b4 	movhi	r4,2050
 8002504:	2123ee84 	addi	r4,r4,-28742
 8002508:	d9003515 	stw	r4,212(sp)
 800250c:	003b7606 	br	80012e8 <__alt_data_end+0xf80012e8>
 8002510:	d8802917 	ldw	r2,164(sp)
 8002514:	00c00184 	movi	r3,6
 8002518:	1880012e 	bgeu	r3,r2,8002520 <___vfprintf_internal_r+0x1ca0>
 800251c:	1805883a 	mov	r2,r3
 8002520:	d8802e15 	stw	r2,184(sp)
 8002524:	1000ef16 	blt	r2,zero,80028e4 <___vfprintf_internal_r+0x2064>
 8002528:	040200b4 	movhi	r16,2050
 800252c:	d8802a15 	stw	r2,168(sp)
 8002530:	dcc02d15 	stw	r19,180(sp)
 8002534:	d8002915 	stw	zero,164(sp)
 8002538:	d8003215 	stw	zero,200(sp)
 800253c:	8423e804 	addi	r16,r16,-28768
 8002540:	0039883a 	mov	fp,zero
 8002544:	003aa206 	br	8000fd0 <__alt_data_end+0xf8000fd0>
 8002548:	0021883a 	mov	r16,zero
 800254c:	003e0706 	br	8001d6c <__alt_data_end+0xf8001d6c>
 8002550:	d9002c17 	ldw	r4,176(sp)
 8002554:	d9801e04 	addi	r6,sp,120
 8002558:	b80b883a 	mov	r5,r23
 800255c:	8007e7c0 	call	8007e7c <__sprint_r>
 8002560:	1039c91e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 8002564:	d8802617 	ldw	r2,152(sp)
 8002568:	d9403317 	ldw	r5,204(sp)
 800256c:	d8c02017 	ldw	r3,128(sp)
 8002570:	da000404 	addi	r8,sp,16
 8002574:	2885c83a 	sub	r2,r5,r2
 8002578:	003dfb06 	br	8001d68 <__alt_data_end+0xf8001d68>
 800257c:	9080004c 	andi	r2,r18,1
 8002580:	103e8f1e 	bne	r2,zero,8001fc0 <__alt_data_end+0xf8001fc0>
 8002584:	d8802117 	ldw	r2,132(sp)
 8002588:	003e9e06 	br	8002004 <__alt_data_end+0xf8002004>
 800258c:	1025883a 	mov	r18,r2
 8002590:	0039883a 	mov	fp,zero
 8002594:	00800084 	movi	r2,2
 8002598:	003fd306 	br	80024e8 <__alt_data_end+0xf80024e8>
 800259c:	07000b44 	movi	fp,45
 80025a0:	df002785 	stb	fp,158(sp)
 80025a4:	003a4006 	br	8000ea8 <__alt_data_end+0xf8000ea8>
 80025a8:	00c00b44 	movi	r3,45
 80025ac:	d8c02785 	stb	r3,158(sp)
 80025b0:	d8802a15 	stw	r2,168(sp)
 80025b4:	dc802b17 	ldw	r18,172(sp)
 80025b8:	d8002915 	stw	zero,164(sp)
 80025bc:	07000b44 	movi	fp,45
 80025c0:	003a8006 	br	8000fc4 <__alt_data_end+0xf8000fc4>
 80025c4:	040200b4 	movhi	r16,2050
 80025c8:	8423dd04 	addi	r16,r16,-28812
 80025cc:	003f4706 	br	80022ec <__alt_data_end+0xf80022ec>
 80025d0:	d8c02d17 	ldw	r3,180(sp)
 80025d4:	d9002f17 	ldw	r4,188(sp)
 80025d8:	18800017 	ldw	r2,0(r3)
 80025dc:	18c00104 	addi	r3,r3,4
 80025e0:	d8c02d15 	stw	r3,180(sp)
 80025e4:	11000015 	stw	r4,0(r2)
 80025e8:	0038dd06 	br	8000960 <__alt_data_end+0xf8000960>
 80025ec:	dd802617 	ldw	r22,152(sp)
 80025f0:	00bfff44 	movi	r2,-3
 80025f4:	b0801c16 	blt	r22,r2,8002668 <___vfprintf_internal_r+0x1de8>
 80025f8:	d9402917 	ldw	r5,164(sp)
 80025fc:	2d801a16 	blt	r5,r22,8002668 <___vfprintf_internal_r+0x1de8>
 8002600:	dd803215 	stw	r22,200(sp)
 8002604:	003e8906 	br	800202c <__alt_data_end+0xf800202c>
 8002608:	010200b4 	movhi	r4,2050
 800260c:	2123ea84 	addi	r4,r4,-28758
 8002610:	d9002b15 	stw	r4,172(sp)
 8002614:	003c9106 	br	800185c <__alt_data_end+0xf800185c>
 8002618:	e005883a 	mov	r2,fp
 800261c:	003e7906 	br	8002004 <__alt_data_end+0xf8002004>
 8002620:	d9402917 	ldw	r5,164(sp)
 8002624:	df002783 	ldbu	fp,158(sp)
 8002628:	dcc02d15 	stw	r19,180(sp)
 800262c:	d9402a15 	stw	r5,168(sp)
 8002630:	d9402e15 	stw	r5,184(sp)
 8002634:	d8002915 	stw	zero,164(sp)
 8002638:	d8003215 	stw	zero,200(sp)
 800263c:	003a5d06 	br	8000fb4 <__alt_data_end+0xf8000fb4>
 8002640:	9080004c 	andi	r2,r18,1
 8002644:	0039883a 	mov	fp,zero
 8002648:	10000426 	beq	r2,zero,800265c <___vfprintf_internal_r+0x1ddc>
 800264c:	00800c04 	movi	r2,48
 8002650:	dc001dc4 	addi	r16,sp,119
 8002654:	d8801dc5 	stb	r2,119(sp)
 8002658:	003b8006 	br	800145c <__alt_data_end+0xf800145c>
 800265c:	d8002e15 	stw	zero,184(sp)
 8002660:	dc001e04 	addi	r16,sp,120
 8002664:	003a4d06 	br	8000f9c <__alt_data_end+0xf8000f9c>
 8002668:	8c7fff84 	addi	r17,r17,-2
 800266c:	b5bfffc4 	addi	r22,r22,-1
 8002670:	dd802615 	stw	r22,152(sp)
 8002674:	dc4022c5 	stb	r17,139(sp)
 8002678:	b000bf16 	blt	r22,zero,8002978 <___vfprintf_internal_r+0x20f8>
 800267c:	00800ac4 	movi	r2,43
 8002680:	d8802305 	stb	r2,140(sp)
 8002684:	00800244 	movi	r2,9
 8002688:	15807016 	blt	r2,r22,800284c <___vfprintf_internal_r+0x1fcc>
 800268c:	00800c04 	movi	r2,48
 8002690:	b5800c04 	addi	r22,r22,48
 8002694:	d8802345 	stb	r2,141(sp)
 8002698:	dd802385 	stb	r22,142(sp)
 800269c:	d88023c4 	addi	r2,sp,143
 80026a0:	df0022c4 	addi	fp,sp,139
 80026a4:	d8c03317 	ldw	r3,204(sp)
 80026a8:	1739c83a 	sub	fp,r2,fp
 80026ac:	d9003317 	ldw	r4,204(sp)
 80026b0:	e0c7883a 	add	r3,fp,r3
 80026b4:	df003a15 	stw	fp,232(sp)
 80026b8:	d8c02e15 	stw	r3,184(sp)
 80026bc:	00800044 	movi	r2,1
 80026c0:	1100b30e 	bge	r2,r4,8002990 <___vfprintf_internal_r+0x2110>
 80026c4:	d8c02e17 	ldw	r3,184(sp)
 80026c8:	18c00044 	addi	r3,r3,1
 80026cc:	d8c02e15 	stw	r3,184(sp)
 80026d0:	1805883a 	mov	r2,r3
 80026d4:	1800ac16 	blt	r3,zero,8002988 <___vfprintf_internal_r+0x2108>
 80026d8:	d8003215 	stw	zero,200(sp)
 80026dc:	003e5d06 	br	8002054 <__alt_data_end+0xf8002054>
 80026e0:	d9002c17 	ldw	r4,176(sp)
 80026e4:	d9801e04 	addi	r6,sp,120
 80026e8:	b80b883a 	mov	r5,r23
 80026ec:	8007e7c0 	call	8007e7c <__sprint_r>
 80026f0:	1039651e 	bne	r2,zero,8000c88 <__alt_data_end+0xf8000c88>
 80026f4:	dc402617 	ldw	r17,152(sp)
 80026f8:	d8c02017 	ldw	r3,128(sp)
 80026fc:	d8801f17 	ldw	r2,124(sp)
 8002700:	da000404 	addi	r8,sp,16
 8002704:	003ed606 	br	8002260 <__alt_data_end+0xf8002260>
 8002708:	582b883a 	mov	r21,r11
 800270c:	d8002915 	stw	zero,164(sp)
 8002710:	0038bd06 	br	8000a08 <__alt_data_end+0xf8000a08>
 8002714:	d8802917 	ldw	r2,164(sp)
 8002718:	103e071e 	bne	r2,zero,8001f38 <__alt_data_end+0xf8001f38>
 800271c:	dc002915 	stw	r16,164(sp)
 8002720:	003e0506 	br	8001f38 <__alt_data_end+0xf8001f38>
 8002724:	d9002917 	ldw	r4,164(sp)
 8002728:	20c00044 	addi	r3,r4,1
 800272c:	003e0f06 	br	8001f6c <__alt_data_end+0xf8001f6c>
 8002730:	01400184 	movi	r5,6
 8002734:	d9402915 	stw	r5,164(sp)
 8002738:	003dff06 	br	8001f38 <__alt_data_end+0xf8001f38>
 800273c:	d8802104 	addi	r2,sp,132
 8002740:	d8800315 	stw	r2,12(sp)
 8002744:	d8802504 	addi	r2,sp,148
 8002748:	d8800215 	stw	r2,8(sp)
 800274c:	d8802604 	addi	r2,sp,152
 8002750:	d8800115 	stw	r2,4(sp)
 8002754:	d8802917 	ldw	r2,164(sp)
 8002758:	d9403617 	ldw	r5,216(sp)
 800275c:	d9002c17 	ldw	r4,176(sp)
 8002760:	d8800015 	stw	r2,0(sp)
 8002764:	01c000c4 	movi	r7,3
 8002768:	980d883a 	mov	r6,r19
 800276c:	da003d15 	stw	r8,244(sp)
 8002770:	8002ea40 	call	8002ea4 <_dtoa_r>
 8002774:	d8c02917 	ldw	r3,164(sp)
 8002778:	da003d17 	ldw	r8,244(sp)
 800277c:	1021883a 	mov	r16,r2
 8002780:	10f9883a 	add	fp,r2,r3
 8002784:	81000007 	ldb	r4,0(r16)
 8002788:	00800c04 	movi	r2,48
 800278c:	20805e26 	beq	r4,r2,8002908 <___vfprintf_internal_r+0x2088>
 8002790:	d8c02617 	ldw	r3,152(sp)
 8002794:	e0f9883a 	add	fp,fp,r3
 8002798:	003e0a06 	br	8001fc4 <__alt_data_end+0xf8001fc4>
 800279c:	00c00b44 	movi	r3,45
 80027a0:	24e0003c 	xorhi	r19,r4,32768
 80027a4:	d8c02a05 	stb	r3,168(sp)
 80027a8:	003de906 	br	8001f50 <__alt_data_end+0xf8001f50>
 80027ac:	d8c03217 	ldw	r3,200(sp)
 80027b0:	00c07a0e 	bge	zero,r3,800299c <___vfprintf_internal_r+0x211c>
 80027b4:	00800044 	movi	r2,1
 80027b8:	d9003317 	ldw	r4,204(sp)
 80027bc:	1105883a 	add	r2,r2,r4
 80027c0:	d8802e15 	stw	r2,184(sp)
 80027c4:	10004e16 	blt	r2,zero,8002900 <___vfprintf_internal_r+0x2080>
 80027c8:	044019c4 	movi	r17,103
 80027cc:	003e2106 	br	8002054 <__alt_data_end+0xf8002054>
 80027d0:	d9002917 	ldw	r4,164(sp)
 80027d4:	d8802104 	addi	r2,sp,132
 80027d8:	d8800315 	stw	r2,12(sp)
 80027dc:	d9000015 	stw	r4,0(sp)
 80027e0:	d8802504 	addi	r2,sp,148
 80027e4:	d9403617 	ldw	r5,216(sp)
 80027e8:	d9002c17 	ldw	r4,176(sp)
 80027ec:	d8800215 	stw	r2,8(sp)
 80027f0:	d8802604 	addi	r2,sp,152
 80027f4:	d8800115 	stw	r2,4(sp)
 80027f8:	01c000c4 	movi	r7,3
 80027fc:	980d883a 	mov	r6,r19
 8002800:	da003d15 	stw	r8,244(sp)
 8002804:	8002ea40 	call	8002ea4 <_dtoa_r>
 8002808:	d8c02917 	ldw	r3,164(sp)
 800280c:	da003d17 	ldw	r8,244(sp)
 8002810:	1021883a 	mov	r16,r2
 8002814:	00801184 	movi	r2,70
 8002818:	80f9883a 	add	fp,r16,r3
 800281c:	88bfd926 	beq	r17,r2,8002784 <__alt_data_end+0xf8002784>
 8002820:	003de806 	br	8001fc4 <__alt_data_end+0xf8001fc4>
 8002824:	d9002917 	ldw	r4,164(sp)
 8002828:	00c04d0e 	bge	zero,r3,8002960 <___vfprintf_internal_r+0x20e0>
 800282c:	2000441e 	bne	r4,zero,8002940 <___vfprintf_internal_r+0x20c0>
 8002830:	9480004c 	andi	r18,r18,1
 8002834:	9000421e 	bne	r18,zero,8002940 <___vfprintf_internal_r+0x20c0>
 8002838:	1805883a 	mov	r2,r3
 800283c:	18007016 	blt	r3,zero,8002a00 <___vfprintf_internal_r+0x2180>
 8002840:	d8c03217 	ldw	r3,200(sp)
 8002844:	d8c02e15 	stw	r3,184(sp)
 8002848:	003e0206 	br	8002054 <__alt_data_end+0xf8002054>
 800284c:	df0022c4 	addi	fp,sp,139
 8002850:	dc002915 	stw	r16,164(sp)
 8002854:	4027883a 	mov	r19,r8
 8002858:	e021883a 	mov	r16,fp
 800285c:	b009883a 	mov	r4,r22
 8002860:	01400284 	movi	r5,10
 8002864:	800a8300 	call	800a830 <__modsi3>
 8002868:	10800c04 	addi	r2,r2,48
 800286c:	843fffc4 	addi	r16,r16,-1
 8002870:	b009883a 	mov	r4,r22
 8002874:	01400284 	movi	r5,10
 8002878:	80800005 	stb	r2,0(r16)
 800287c:	800a7ac0 	call	800a7ac <__divsi3>
 8002880:	102d883a 	mov	r22,r2
 8002884:	00800244 	movi	r2,9
 8002888:	15bff416 	blt	r2,r22,800285c <__alt_data_end+0xf800285c>
 800288c:	9811883a 	mov	r8,r19
 8002890:	b0800c04 	addi	r2,r22,48
 8002894:	8027883a 	mov	r19,r16
 8002898:	997fffc4 	addi	r5,r19,-1
 800289c:	98bfffc5 	stb	r2,-1(r19)
 80028a0:	dc002917 	ldw	r16,164(sp)
 80028a4:	2f006a2e 	bgeu	r5,fp,8002a50 <___vfprintf_internal_r+0x21d0>
 80028a8:	d9c02384 	addi	r7,sp,142
 80028ac:	3ccfc83a 	sub	r7,r7,r19
 80028b0:	d9002344 	addi	r4,sp,141
 80028b4:	e1cf883a 	add	r7,fp,r7
 80028b8:	00000106 	br	80028c0 <___vfprintf_internal_r+0x2040>
 80028bc:	28800003 	ldbu	r2,0(r5)
 80028c0:	20800005 	stb	r2,0(r4)
 80028c4:	21000044 	addi	r4,r4,1
 80028c8:	29400044 	addi	r5,r5,1
 80028cc:	393ffb1e 	bne	r7,r4,80028bc <__alt_data_end+0xf80028bc>
 80028d0:	d8802304 	addi	r2,sp,140
 80028d4:	14c5c83a 	sub	r2,r2,r19
 80028d8:	d8c02344 	addi	r3,sp,141
 80028dc:	1885883a 	add	r2,r3,r2
 80028e0:	003f7006 	br	80026a4 <__alt_data_end+0xf80026a4>
 80028e4:	0005883a 	mov	r2,zero
 80028e8:	003f0f06 	br	8002528 <__alt_data_end+0xf8002528>
 80028ec:	d8c03217 	ldw	r3,200(sp)
 80028f0:	18c00044 	addi	r3,r3,1
 80028f4:	d8c02e15 	stw	r3,184(sp)
 80028f8:	1805883a 	mov	r2,r3
 80028fc:	183fb20e 	bge	r3,zero,80027c8 <__alt_data_end+0xf80027c8>
 8002900:	0005883a 	mov	r2,zero
 8002904:	003fb006 	br	80027c8 <__alt_data_end+0xf80027c8>
 8002908:	d9003617 	ldw	r4,216(sp)
 800290c:	000d883a 	mov	r6,zero
 8002910:	000f883a 	mov	r7,zero
 8002914:	980b883a 	mov	r5,r19
 8002918:	d8c03c15 	stw	r3,240(sp)
 800291c:	da003d15 	stw	r8,244(sp)
 8002920:	800baf40 	call	800baf4 <__eqdf2>
 8002924:	d8c03c17 	ldw	r3,240(sp)
 8002928:	da003d17 	ldw	r8,244(sp)
 800292c:	103f9826 	beq	r2,zero,8002790 <__alt_data_end+0xf8002790>
 8002930:	00800044 	movi	r2,1
 8002934:	10c7c83a 	sub	r3,r2,r3
 8002938:	d8c02615 	stw	r3,152(sp)
 800293c:	003f9506 	br	8002794 <__alt_data_end+0xf8002794>
 8002940:	d9002917 	ldw	r4,164(sp)
 8002944:	d8c03217 	ldw	r3,200(sp)
 8002948:	20800044 	addi	r2,r4,1
 800294c:	1885883a 	add	r2,r3,r2
 8002950:	d8802e15 	stw	r2,184(sp)
 8002954:	103dbf0e 	bge	r2,zero,8002054 <__alt_data_end+0xf8002054>
 8002958:	0005883a 	mov	r2,zero
 800295c:	003dbd06 	br	8002054 <__alt_data_end+0xf8002054>
 8002960:	2000211e 	bne	r4,zero,80029e8 <___vfprintf_internal_r+0x2168>
 8002964:	9480004c 	andi	r18,r18,1
 8002968:	90001f1e 	bne	r18,zero,80029e8 <___vfprintf_internal_r+0x2168>
 800296c:	00800044 	movi	r2,1
 8002970:	d8802e15 	stw	r2,184(sp)
 8002974:	003db706 	br	8002054 <__alt_data_end+0xf8002054>
 8002978:	00800b44 	movi	r2,45
 800297c:	05adc83a 	sub	r22,zero,r22
 8002980:	d8802305 	stb	r2,140(sp)
 8002984:	003f3f06 	br	8002684 <__alt_data_end+0xf8002684>
 8002988:	0005883a 	mov	r2,zero
 800298c:	003f5206 	br	80026d8 <__alt_data_end+0xf80026d8>
 8002990:	90a4703a 	and	r18,r18,r2
 8002994:	903f4e26 	beq	r18,zero,80026d0 <__alt_data_end+0xf80026d0>
 8002998:	003f4a06 	br	80026c4 <__alt_data_end+0xf80026c4>
 800299c:	00800084 	movi	r2,2
 80029a0:	10c5c83a 	sub	r2,r2,r3
 80029a4:	003f8406 	br	80027b8 <__alt_data_end+0xf80027b8>
 80029a8:	d8802d17 	ldw	r2,180(sp)
 80029ac:	d9002d17 	ldw	r4,180(sp)
 80029b0:	ac400043 	ldbu	r17,1(r21)
 80029b4:	10800017 	ldw	r2,0(r2)
 80029b8:	582b883a 	mov	r21,r11
 80029bc:	d8802915 	stw	r2,164(sp)
 80029c0:	20800104 	addi	r2,r4,4
 80029c4:	d9002917 	ldw	r4,164(sp)
 80029c8:	d8802d15 	stw	r2,180(sp)
 80029cc:	203e7a0e 	bge	r4,zero,80023b8 <__alt_data_end+0xf80023b8>
 80029d0:	8c403fcc 	andi	r17,r17,255
 80029d4:	00bfffc4 	movi	r2,-1
 80029d8:	8c40201c 	xori	r17,r17,128
 80029dc:	d8802915 	stw	r2,164(sp)
 80029e0:	8c7fe004 	addi	r17,r17,-128
 80029e4:	00380706 	br	8000a04 <__alt_data_end+0xf8000a04>
 80029e8:	d8c02917 	ldw	r3,164(sp)
 80029ec:	18c00084 	addi	r3,r3,2
 80029f0:	d8c02e15 	stw	r3,184(sp)
 80029f4:	1805883a 	mov	r2,r3
 80029f8:	183d960e 	bge	r3,zero,8002054 <__alt_data_end+0xf8002054>
 80029fc:	003fd606 	br	8002958 <__alt_data_end+0xf8002958>
 8002a00:	0005883a 	mov	r2,zero
 8002a04:	003f8e06 	br	8002840 <__alt_data_end+0xf8002840>
 8002a08:	9080004c 	andi	r2,r18,1
 8002a0c:	103f811e 	bne	r2,zero,8002814 <__alt_data_end+0xf8002814>
 8002a10:	d8802117 	ldw	r2,132(sp)
 8002a14:	1405c83a 	sub	r2,r2,r16
 8002a18:	d8803315 	stw	r2,204(sp)
 8002a1c:	b47ef326 	beq	r22,r17,80025ec <__alt_data_end+0xf80025ec>
 8002a20:	dd802617 	ldw	r22,152(sp)
 8002a24:	003f1106 	br	800266c <__alt_data_end+0xf800266c>
 8002a28:	d9c02785 	stb	r7,158(sp)
 8002a2c:	00390406 	br	8000e40 <__alt_data_end+0xf8000e40>
 8002a30:	d9c02785 	stb	r7,158(sp)
 8002a34:	0038d306 	br	8000d84 <__alt_data_end+0xf8000d84>
 8002a38:	d9c02785 	stb	r7,158(sp)
 8002a3c:	003a6106 	br	80013c4 <__alt_data_end+0xf80013c4>
 8002a40:	d9c02785 	stb	r7,158(sp)
 8002a44:	003af806 	br	8001628 <__alt_data_end+0xf8001628>
 8002a48:	0005883a 	mov	r2,zero
 8002a4c:	003d7e06 	br	8002048 <__alt_data_end+0xf8002048>
 8002a50:	d8802344 	addi	r2,sp,141
 8002a54:	003f1306 	br	80026a4 <__alt_data_end+0xf80026a4>
 8002a58:	d9c02785 	stb	r7,158(sp)
 8002a5c:	00392306 	br	8000eec <__alt_data_end+0xf8000eec>
 8002a60:	d9c02785 	stb	r7,158(sp)
 8002a64:	003aa906 	br	800150c <__alt_data_end+0xf800150c>
 8002a68:	d9c02785 	stb	r7,158(sp)
 8002a6c:	003a3d06 	br	8001364 <__alt_data_end+0xf8001364>
 8002a70:	d9c02785 	stb	r7,158(sp)
 8002a74:	003aca06 	br	80015a0 <__alt_data_end+0xf80015a0>

08002a78 <__vfprintf_internal>:
 8002a78:	008200b4 	movhi	r2,2050
 8002a7c:	10ab9f04 	addi	r2,r2,-20868
 8002a80:	300f883a 	mov	r7,r6
 8002a84:	280d883a 	mov	r6,r5
 8002a88:	200b883a 	mov	r5,r4
 8002a8c:	11000017 	ldw	r4,0(r2)
 8002a90:	80008801 	jmpi	8000880 <___vfprintf_internal_r>

08002a94 <__sbprintf>:
 8002a94:	2880030b 	ldhu	r2,12(r5)
 8002a98:	2ac01917 	ldw	r11,100(r5)
 8002a9c:	2a80038b 	ldhu	r10,14(r5)
 8002aa0:	2a400717 	ldw	r9,28(r5)
 8002aa4:	2a000917 	ldw	r8,36(r5)
 8002aa8:	defee204 	addi	sp,sp,-1144
 8002aac:	00c10004 	movi	r3,1024
 8002ab0:	dc011a15 	stw	r16,1128(sp)
 8002ab4:	10bfff4c 	andi	r2,r2,65533
 8002ab8:	2821883a 	mov	r16,r5
 8002abc:	d8cb883a 	add	r5,sp,r3
 8002ac0:	dc811c15 	stw	r18,1136(sp)
 8002ac4:	dc411b15 	stw	r17,1132(sp)
 8002ac8:	dfc11d15 	stw	ra,1140(sp)
 8002acc:	2025883a 	mov	r18,r4
 8002ad0:	d881030d 	sth	r2,1036(sp)
 8002ad4:	dac11915 	stw	r11,1124(sp)
 8002ad8:	da81038d 	sth	r10,1038(sp)
 8002adc:	da410715 	stw	r9,1052(sp)
 8002ae0:	da010915 	stw	r8,1060(sp)
 8002ae4:	dec10015 	stw	sp,1024(sp)
 8002ae8:	dec10415 	stw	sp,1040(sp)
 8002aec:	d8c10215 	stw	r3,1032(sp)
 8002af0:	d8c10515 	stw	r3,1044(sp)
 8002af4:	d8010615 	stw	zero,1048(sp)
 8002af8:	80008800 	call	8000880 <___vfprintf_internal_r>
 8002afc:	1023883a 	mov	r17,r2
 8002b00:	10000416 	blt	r2,zero,8002b14 <__sbprintf+0x80>
 8002b04:	d9410004 	addi	r5,sp,1024
 8002b08:	9009883a 	mov	r4,r18
 8002b0c:	80047480 	call	8004748 <_fflush_r>
 8002b10:	10000d1e 	bne	r2,zero,8002b48 <__sbprintf+0xb4>
 8002b14:	d881030b 	ldhu	r2,1036(sp)
 8002b18:	1080100c 	andi	r2,r2,64
 8002b1c:	10000326 	beq	r2,zero,8002b2c <__sbprintf+0x98>
 8002b20:	8080030b 	ldhu	r2,12(r16)
 8002b24:	10801014 	ori	r2,r2,64
 8002b28:	8080030d 	sth	r2,12(r16)
 8002b2c:	8805883a 	mov	r2,r17
 8002b30:	dfc11d17 	ldw	ra,1140(sp)
 8002b34:	dc811c17 	ldw	r18,1136(sp)
 8002b38:	dc411b17 	ldw	r17,1132(sp)
 8002b3c:	dc011a17 	ldw	r16,1128(sp)
 8002b40:	dec11e04 	addi	sp,sp,1144
 8002b44:	f800283a 	ret
 8002b48:	047fffc4 	movi	r17,-1
 8002b4c:	003ff106 	br	8002b14 <__alt_data_end+0xf8002b14>

08002b50 <__swsetup_r>:
 8002b50:	008200b4 	movhi	r2,2050
 8002b54:	defffd04 	addi	sp,sp,-12
 8002b58:	10ab9f04 	addi	r2,r2,-20868
 8002b5c:	dc400115 	stw	r17,4(sp)
 8002b60:	2023883a 	mov	r17,r4
 8002b64:	11000017 	ldw	r4,0(r2)
 8002b68:	dc000015 	stw	r16,0(sp)
 8002b6c:	dfc00215 	stw	ra,8(sp)
 8002b70:	2821883a 	mov	r16,r5
 8002b74:	20000226 	beq	r4,zero,8002b80 <__swsetup_r+0x30>
 8002b78:	20800e17 	ldw	r2,56(r4)
 8002b7c:	10003126 	beq	r2,zero,8002c44 <__swsetup_r+0xf4>
 8002b80:	8080030b 	ldhu	r2,12(r16)
 8002b84:	10c0020c 	andi	r3,r2,8
 8002b88:	1009883a 	mov	r4,r2
 8002b8c:	18000f26 	beq	r3,zero,8002bcc <__swsetup_r+0x7c>
 8002b90:	80c00417 	ldw	r3,16(r16)
 8002b94:	18001526 	beq	r3,zero,8002bec <__swsetup_r+0x9c>
 8002b98:	1100004c 	andi	r4,r2,1
 8002b9c:	20001c1e 	bne	r4,zero,8002c10 <__swsetup_r+0xc0>
 8002ba0:	1080008c 	andi	r2,r2,2
 8002ba4:	1000291e 	bne	r2,zero,8002c4c <__swsetup_r+0xfc>
 8002ba8:	80800517 	ldw	r2,20(r16)
 8002bac:	80800215 	stw	r2,8(r16)
 8002bb0:	18001c26 	beq	r3,zero,8002c24 <__swsetup_r+0xd4>
 8002bb4:	0005883a 	mov	r2,zero
 8002bb8:	dfc00217 	ldw	ra,8(sp)
 8002bbc:	dc400117 	ldw	r17,4(sp)
 8002bc0:	dc000017 	ldw	r16,0(sp)
 8002bc4:	dec00304 	addi	sp,sp,12
 8002bc8:	f800283a 	ret
 8002bcc:	2080040c 	andi	r2,r4,16
 8002bd0:	10002e26 	beq	r2,zero,8002c8c <__swsetup_r+0x13c>
 8002bd4:	2080010c 	andi	r2,r4,4
 8002bd8:	10001e1e 	bne	r2,zero,8002c54 <__swsetup_r+0x104>
 8002bdc:	80c00417 	ldw	r3,16(r16)
 8002be0:	20800214 	ori	r2,r4,8
 8002be4:	8080030d 	sth	r2,12(r16)
 8002be8:	183feb1e 	bne	r3,zero,8002b98 <__alt_data_end+0xf8002b98>
 8002bec:	1100a00c 	andi	r4,r2,640
 8002bf0:	01408004 	movi	r5,512
 8002bf4:	217fe826 	beq	r4,r5,8002b98 <__alt_data_end+0xf8002b98>
 8002bf8:	800b883a 	mov	r5,r16
 8002bfc:	8809883a 	mov	r4,r17
 8002c00:	80056c80 	call	80056c8 <__smakebuf_r>
 8002c04:	8080030b 	ldhu	r2,12(r16)
 8002c08:	80c00417 	ldw	r3,16(r16)
 8002c0c:	003fe206 	br	8002b98 <__alt_data_end+0xf8002b98>
 8002c10:	80800517 	ldw	r2,20(r16)
 8002c14:	80000215 	stw	zero,8(r16)
 8002c18:	0085c83a 	sub	r2,zero,r2
 8002c1c:	80800615 	stw	r2,24(r16)
 8002c20:	183fe41e 	bne	r3,zero,8002bb4 <__alt_data_end+0xf8002bb4>
 8002c24:	80c0030b 	ldhu	r3,12(r16)
 8002c28:	0005883a 	mov	r2,zero
 8002c2c:	1900200c 	andi	r4,r3,128
 8002c30:	203fe126 	beq	r4,zero,8002bb8 <__alt_data_end+0xf8002bb8>
 8002c34:	18c01014 	ori	r3,r3,64
 8002c38:	80c0030d 	sth	r3,12(r16)
 8002c3c:	00bfffc4 	movi	r2,-1
 8002c40:	003fdd06 	br	8002bb8 <__alt_data_end+0xf8002bb8>
 8002c44:	8004b240 	call	8004b24 <__sinit>
 8002c48:	003fcd06 	br	8002b80 <__alt_data_end+0xf8002b80>
 8002c4c:	0005883a 	mov	r2,zero
 8002c50:	003fd606 	br	8002bac <__alt_data_end+0xf8002bac>
 8002c54:	81400c17 	ldw	r5,48(r16)
 8002c58:	28000626 	beq	r5,zero,8002c74 <__swsetup_r+0x124>
 8002c5c:	80801004 	addi	r2,r16,64
 8002c60:	28800326 	beq	r5,r2,8002c70 <__swsetup_r+0x120>
 8002c64:	8809883a 	mov	r4,r17
 8002c68:	8004c980 	call	8004c98 <_free_r>
 8002c6c:	8100030b 	ldhu	r4,12(r16)
 8002c70:	80000c15 	stw	zero,48(r16)
 8002c74:	80c00417 	ldw	r3,16(r16)
 8002c78:	00bff6c4 	movi	r2,-37
 8002c7c:	1108703a 	and	r4,r2,r4
 8002c80:	80000115 	stw	zero,4(r16)
 8002c84:	80c00015 	stw	r3,0(r16)
 8002c88:	003fd506 	br	8002be0 <__alt_data_end+0xf8002be0>
 8002c8c:	00800244 	movi	r2,9
 8002c90:	88800015 	stw	r2,0(r17)
 8002c94:	20801014 	ori	r2,r4,64
 8002c98:	8080030d 	sth	r2,12(r16)
 8002c9c:	00bfffc4 	movi	r2,-1
 8002ca0:	003fc506 	br	8002bb8 <__alt_data_end+0xf8002bb8>

08002ca4 <quorem>:
 8002ca4:	defff704 	addi	sp,sp,-36
 8002ca8:	dc800215 	stw	r18,8(sp)
 8002cac:	20800417 	ldw	r2,16(r4)
 8002cb0:	2c800417 	ldw	r18,16(r5)
 8002cb4:	dfc00815 	stw	ra,32(sp)
 8002cb8:	ddc00715 	stw	r23,28(sp)
 8002cbc:	dd800615 	stw	r22,24(sp)
 8002cc0:	dd400515 	stw	r21,20(sp)
 8002cc4:	dd000415 	stw	r20,16(sp)
 8002cc8:	dcc00315 	stw	r19,12(sp)
 8002ccc:	dc400115 	stw	r17,4(sp)
 8002cd0:	dc000015 	stw	r16,0(sp)
 8002cd4:	14807116 	blt	r2,r18,8002e9c <quorem+0x1f8>
 8002cd8:	94bfffc4 	addi	r18,r18,-1
 8002cdc:	94ad883a 	add	r22,r18,r18
 8002ce0:	b5ad883a 	add	r22,r22,r22
 8002ce4:	2c400504 	addi	r17,r5,20
 8002ce8:	8da9883a 	add	r20,r17,r22
 8002cec:	25400504 	addi	r21,r4,20
 8002cf0:	282f883a 	mov	r23,r5
 8002cf4:	adad883a 	add	r22,r21,r22
 8002cf8:	a1400017 	ldw	r5,0(r20)
 8002cfc:	2021883a 	mov	r16,r4
 8002d00:	b1000017 	ldw	r4,0(r22)
 8002d04:	29400044 	addi	r5,r5,1
 8002d08:	800a8a40 	call	800a8a4 <__udivsi3>
 8002d0c:	1027883a 	mov	r19,r2
 8002d10:	10002c26 	beq	r2,zero,8002dc4 <quorem+0x120>
 8002d14:	a813883a 	mov	r9,r21
 8002d18:	880b883a 	mov	r5,r17
 8002d1c:	0009883a 	mov	r4,zero
 8002d20:	000d883a 	mov	r6,zero
 8002d24:	2a000017 	ldw	r8,0(r5)
 8002d28:	49c00017 	ldw	r7,0(r9)
 8002d2c:	29400104 	addi	r5,r5,4
 8002d30:	40bfffcc 	andi	r2,r8,65535
 8002d34:	14c5383a 	mul	r2,r2,r19
 8002d38:	4010d43a 	srli	r8,r8,16
 8002d3c:	38ffffcc 	andi	r3,r7,65535
 8002d40:	1105883a 	add	r2,r2,r4
 8002d44:	1008d43a 	srli	r4,r2,16
 8002d48:	44d1383a 	mul	r8,r8,r19
 8002d4c:	198d883a 	add	r6,r3,r6
 8002d50:	10ffffcc 	andi	r3,r2,65535
 8002d54:	30c7c83a 	sub	r3,r6,r3
 8002d58:	380ed43a 	srli	r7,r7,16
 8002d5c:	4105883a 	add	r2,r8,r4
 8002d60:	180dd43a 	srai	r6,r3,16
 8002d64:	113fffcc 	andi	r4,r2,65535
 8002d68:	390fc83a 	sub	r7,r7,r4
 8002d6c:	398d883a 	add	r6,r7,r6
 8002d70:	300e943a 	slli	r7,r6,16
 8002d74:	18ffffcc 	andi	r3,r3,65535
 8002d78:	1008d43a 	srli	r4,r2,16
 8002d7c:	38ceb03a 	or	r7,r7,r3
 8002d80:	49c00015 	stw	r7,0(r9)
 8002d84:	300dd43a 	srai	r6,r6,16
 8002d88:	4a400104 	addi	r9,r9,4
 8002d8c:	a17fe52e 	bgeu	r20,r5,8002d24 <__alt_data_end+0xf8002d24>
 8002d90:	b0800017 	ldw	r2,0(r22)
 8002d94:	10000b1e 	bne	r2,zero,8002dc4 <quorem+0x120>
 8002d98:	b0bfff04 	addi	r2,r22,-4
 8002d9c:	a880082e 	bgeu	r21,r2,8002dc0 <quorem+0x11c>
 8002da0:	b0ffff17 	ldw	r3,-4(r22)
 8002da4:	18000326 	beq	r3,zero,8002db4 <quorem+0x110>
 8002da8:	00000506 	br	8002dc0 <quorem+0x11c>
 8002dac:	10c00017 	ldw	r3,0(r2)
 8002db0:	1800031e 	bne	r3,zero,8002dc0 <quorem+0x11c>
 8002db4:	10bfff04 	addi	r2,r2,-4
 8002db8:	94bfffc4 	addi	r18,r18,-1
 8002dbc:	a8bffb36 	bltu	r21,r2,8002dac <__alt_data_end+0xf8002dac>
 8002dc0:	84800415 	stw	r18,16(r16)
 8002dc4:	b80b883a 	mov	r5,r23
 8002dc8:	8009883a 	mov	r4,r16
 8002dcc:	8006e080 	call	8006e08 <__mcmp>
 8002dd0:	10002616 	blt	r2,zero,8002e6c <quorem+0x1c8>
 8002dd4:	9cc00044 	addi	r19,r19,1
 8002dd8:	a805883a 	mov	r2,r21
 8002ddc:	000b883a 	mov	r5,zero
 8002de0:	11000017 	ldw	r4,0(r2)
 8002de4:	89800017 	ldw	r6,0(r17)
 8002de8:	10800104 	addi	r2,r2,4
 8002dec:	20ffffcc 	andi	r3,r4,65535
 8002df0:	194b883a 	add	r5,r3,r5
 8002df4:	30ffffcc 	andi	r3,r6,65535
 8002df8:	28c7c83a 	sub	r3,r5,r3
 8002dfc:	300cd43a 	srli	r6,r6,16
 8002e00:	2008d43a 	srli	r4,r4,16
 8002e04:	180bd43a 	srai	r5,r3,16
 8002e08:	18ffffcc 	andi	r3,r3,65535
 8002e0c:	2189c83a 	sub	r4,r4,r6
 8002e10:	2149883a 	add	r4,r4,r5
 8002e14:	200c943a 	slli	r6,r4,16
 8002e18:	8c400104 	addi	r17,r17,4
 8002e1c:	200bd43a 	srai	r5,r4,16
 8002e20:	30c6b03a 	or	r3,r6,r3
 8002e24:	10ffff15 	stw	r3,-4(r2)
 8002e28:	a47fed2e 	bgeu	r20,r17,8002de0 <__alt_data_end+0xf8002de0>
 8002e2c:	9485883a 	add	r2,r18,r18
 8002e30:	1085883a 	add	r2,r2,r2
 8002e34:	a887883a 	add	r3,r21,r2
 8002e38:	18800017 	ldw	r2,0(r3)
 8002e3c:	10000b1e 	bne	r2,zero,8002e6c <quorem+0x1c8>
 8002e40:	18bfff04 	addi	r2,r3,-4
 8002e44:	a880082e 	bgeu	r21,r2,8002e68 <quorem+0x1c4>
 8002e48:	18ffff17 	ldw	r3,-4(r3)
 8002e4c:	18000326 	beq	r3,zero,8002e5c <quorem+0x1b8>
 8002e50:	00000506 	br	8002e68 <quorem+0x1c4>
 8002e54:	10c00017 	ldw	r3,0(r2)
 8002e58:	1800031e 	bne	r3,zero,8002e68 <quorem+0x1c4>
 8002e5c:	10bfff04 	addi	r2,r2,-4
 8002e60:	94bfffc4 	addi	r18,r18,-1
 8002e64:	a8bffb36 	bltu	r21,r2,8002e54 <__alt_data_end+0xf8002e54>
 8002e68:	84800415 	stw	r18,16(r16)
 8002e6c:	9805883a 	mov	r2,r19
 8002e70:	dfc00817 	ldw	ra,32(sp)
 8002e74:	ddc00717 	ldw	r23,28(sp)
 8002e78:	dd800617 	ldw	r22,24(sp)
 8002e7c:	dd400517 	ldw	r21,20(sp)
 8002e80:	dd000417 	ldw	r20,16(sp)
 8002e84:	dcc00317 	ldw	r19,12(sp)
 8002e88:	dc800217 	ldw	r18,8(sp)
 8002e8c:	dc400117 	ldw	r17,4(sp)
 8002e90:	dc000017 	ldw	r16,0(sp)
 8002e94:	dec00904 	addi	sp,sp,36
 8002e98:	f800283a 	ret
 8002e9c:	0005883a 	mov	r2,zero
 8002ea0:	003ff306 	br	8002e70 <__alt_data_end+0xf8002e70>

08002ea4 <_dtoa_r>:
 8002ea4:	20801017 	ldw	r2,64(r4)
 8002ea8:	deffde04 	addi	sp,sp,-136
 8002eac:	df002015 	stw	fp,128(sp)
 8002eb0:	dcc01b15 	stw	r19,108(sp)
 8002eb4:	dc801a15 	stw	r18,104(sp)
 8002eb8:	dc401915 	stw	r17,100(sp)
 8002ebc:	dc001815 	stw	r16,96(sp)
 8002ec0:	dfc02115 	stw	ra,132(sp)
 8002ec4:	ddc01f15 	stw	r23,124(sp)
 8002ec8:	dd801e15 	stw	r22,120(sp)
 8002ecc:	dd401d15 	stw	r21,116(sp)
 8002ed0:	dd001c15 	stw	r20,112(sp)
 8002ed4:	d9c00315 	stw	r7,12(sp)
 8002ed8:	2039883a 	mov	fp,r4
 8002edc:	3023883a 	mov	r17,r6
 8002ee0:	2825883a 	mov	r18,r5
 8002ee4:	dc002417 	ldw	r16,144(sp)
 8002ee8:	3027883a 	mov	r19,r6
 8002eec:	10000826 	beq	r2,zero,8002f10 <_dtoa_r+0x6c>
 8002ef0:	21801117 	ldw	r6,68(r4)
 8002ef4:	00c00044 	movi	r3,1
 8002ef8:	100b883a 	mov	r5,r2
 8002efc:	1986983a 	sll	r3,r3,r6
 8002f00:	11800115 	stw	r6,4(r2)
 8002f04:	10c00215 	stw	r3,8(r2)
 8002f08:	80065e80 	call	80065e8 <_Bfree>
 8002f0c:	e0001015 	stw	zero,64(fp)
 8002f10:	88002e16 	blt	r17,zero,8002fcc <_dtoa_r+0x128>
 8002f14:	80000015 	stw	zero,0(r16)
 8002f18:	889ffc2c 	andhi	r2,r17,32752
 8002f1c:	00dffc34 	movhi	r3,32752
 8002f20:	10c01c26 	beq	r2,r3,8002f94 <_dtoa_r+0xf0>
 8002f24:	000d883a 	mov	r6,zero
 8002f28:	000f883a 	mov	r7,zero
 8002f2c:	9009883a 	mov	r4,r18
 8002f30:	980b883a 	mov	r5,r19
 8002f34:	800baf40 	call	800baf4 <__eqdf2>
 8002f38:	10002b1e 	bne	r2,zero,8002fe8 <_dtoa_r+0x144>
 8002f3c:	d9c02317 	ldw	r7,140(sp)
 8002f40:	00800044 	movi	r2,1
 8002f44:	38800015 	stw	r2,0(r7)
 8002f48:	d8802517 	ldw	r2,148(sp)
 8002f4c:	10019e26 	beq	r2,zero,80035c8 <_dtoa_r+0x724>
 8002f50:	d8c02517 	ldw	r3,148(sp)
 8002f54:	008200b4 	movhi	r2,2050
 8002f58:	10a3ea44 	addi	r2,r2,-28759
 8002f5c:	18800015 	stw	r2,0(r3)
 8002f60:	10bfffc4 	addi	r2,r2,-1
 8002f64:	dfc02117 	ldw	ra,132(sp)
 8002f68:	df002017 	ldw	fp,128(sp)
 8002f6c:	ddc01f17 	ldw	r23,124(sp)
 8002f70:	dd801e17 	ldw	r22,120(sp)
 8002f74:	dd401d17 	ldw	r21,116(sp)
 8002f78:	dd001c17 	ldw	r20,112(sp)
 8002f7c:	dcc01b17 	ldw	r19,108(sp)
 8002f80:	dc801a17 	ldw	r18,104(sp)
 8002f84:	dc401917 	ldw	r17,100(sp)
 8002f88:	dc001817 	ldw	r16,96(sp)
 8002f8c:	dec02204 	addi	sp,sp,136
 8002f90:	f800283a 	ret
 8002f94:	d8c02317 	ldw	r3,140(sp)
 8002f98:	0089c3c4 	movi	r2,9999
 8002f9c:	18800015 	stw	r2,0(r3)
 8002fa0:	90017726 	beq	r18,zero,8003580 <_dtoa_r+0x6dc>
 8002fa4:	008200b4 	movhi	r2,2050
 8002fa8:	10a3f604 	addi	r2,r2,-28712
 8002fac:	d9002517 	ldw	r4,148(sp)
 8002fb0:	203fec26 	beq	r4,zero,8002f64 <__alt_data_end+0xf8002f64>
 8002fb4:	10c000c7 	ldb	r3,3(r2)
 8002fb8:	1801781e 	bne	r3,zero,800359c <_dtoa_r+0x6f8>
 8002fbc:	10c000c4 	addi	r3,r2,3
 8002fc0:	d9802517 	ldw	r6,148(sp)
 8002fc4:	30c00015 	stw	r3,0(r6)
 8002fc8:	003fe606 	br	8002f64 <__alt_data_end+0xf8002f64>
 8002fcc:	04e00034 	movhi	r19,32768
 8002fd0:	9cffffc4 	addi	r19,r19,-1
 8002fd4:	00800044 	movi	r2,1
 8002fd8:	8ce6703a 	and	r19,r17,r19
 8002fdc:	80800015 	stw	r2,0(r16)
 8002fe0:	9823883a 	mov	r17,r19
 8002fe4:	003fcc06 	br	8002f18 <__alt_data_end+0xf8002f18>
 8002fe8:	d8800204 	addi	r2,sp,8
 8002fec:	d8800015 	stw	r2,0(sp)
 8002ff0:	d9c00104 	addi	r7,sp,4
 8002ff4:	900b883a 	mov	r5,r18
 8002ff8:	980d883a 	mov	r6,r19
 8002ffc:	e009883a 	mov	r4,fp
 8003000:	8820d53a 	srli	r16,r17,20
 8003004:	80071d40 	call	80071d4 <__d2b>
 8003008:	d8800915 	stw	r2,36(sp)
 800300c:	8001651e 	bne	r16,zero,80035a4 <_dtoa_r+0x700>
 8003010:	dd800217 	ldw	r22,8(sp)
 8003014:	dc000117 	ldw	r16,4(sp)
 8003018:	00800804 	movi	r2,32
 800301c:	b421883a 	add	r16,r22,r16
 8003020:	80c10c84 	addi	r3,r16,1074
 8003024:	10c2d10e 	bge	r2,r3,8003b6c <_dtoa_r+0xcc8>
 8003028:	00801004 	movi	r2,64
 800302c:	81010484 	addi	r4,r16,1042
 8003030:	10c7c83a 	sub	r3,r2,r3
 8003034:	9108d83a 	srl	r4,r18,r4
 8003038:	88e2983a 	sll	r17,r17,r3
 800303c:	2448b03a 	or	r4,r4,r17
 8003040:	800cebc0 	call	800cebc <__floatunsidf>
 8003044:	017f8434 	movhi	r5,65040
 8003048:	01800044 	movi	r6,1
 800304c:	1009883a 	mov	r4,r2
 8003050:	194b883a 	add	r5,r3,r5
 8003054:	843fffc4 	addi	r16,r16,-1
 8003058:	d9801115 	stw	r6,68(sp)
 800305c:	000d883a 	mov	r6,zero
 8003060:	01cffe34 	movhi	r7,16376
 8003064:	800c4640 	call	800c464 <__subdf3>
 8003068:	0198dbf4 	movhi	r6,25455
 800306c:	01cff4f4 	movhi	r7,16339
 8003070:	3190d844 	addi	r6,r6,17249
 8003074:	39e1e9c4 	addi	r7,r7,-30809
 8003078:	1009883a 	mov	r4,r2
 800307c:	180b883a 	mov	r5,r3
 8003080:	800bd4c0 	call	800bd4c <__muldf3>
 8003084:	01a2d874 	movhi	r6,35681
 8003088:	01cff1f4 	movhi	r7,16327
 800308c:	31b22cc4 	addi	r6,r6,-14157
 8003090:	39e28a04 	addi	r7,r7,-30168
 8003094:	180b883a 	mov	r5,r3
 8003098:	1009883a 	mov	r4,r2
 800309c:	800a9600 	call	800a960 <__adddf3>
 80030a0:	8009883a 	mov	r4,r16
 80030a4:	1029883a 	mov	r20,r2
 80030a8:	1823883a 	mov	r17,r3
 80030ac:	800cde00 	call	800cde0 <__floatsidf>
 80030b0:	019427f4 	movhi	r6,20639
 80030b4:	01cff4f4 	movhi	r7,16339
 80030b8:	319e7ec4 	addi	r6,r6,31227
 80030bc:	39d104c4 	addi	r7,r7,17427
 80030c0:	1009883a 	mov	r4,r2
 80030c4:	180b883a 	mov	r5,r3
 80030c8:	800bd4c0 	call	800bd4c <__muldf3>
 80030cc:	100d883a 	mov	r6,r2
 80030d0:	180f883a 	mov	r7,r3
 80030d4:	a009883a 	mov	r4,r20
 80030d8:	880b883a 	mov	r5,r17
 80030dc:	800a9600 	call	800a960 <__adddf3>
 80030e0:	1009883a 	mov	r4,r2
 80030e4:	180b883a 	mov	r5,r3
 80030e8:	1029883a 	mov	r20,r2
 80030ec:	1823883a 	mov	r17,r3
 80030f0:	800cd600 	call	800cd60 <__fixdfsi>
 80030f4:	000d883a 	mov	r6,zero
 80030f8:	000f883a 	mov	r7,zero
 80030fc:	a009883a 	mov	r4,r20
 8003100:	880b883a 	mov	r5,r17
 8003104:	d8800515 	stw	r2,20(sp)
 8003108:	800bc580 	call	800bc58 <__ledf2>
 800310c:	10028716 	blt	r2,zero,8003b2c <_dtoa_r+0xc88>
 8003110:	d8c00517 	ldw	r3,20(sp)
 8003114:	00800584 	movi	r2,22
 8003118:	10c27536 	bltu	r2,r3,8003af0 <_dtoa_r+0xc4c>
 800311c:	180490fa 	slli	r2,r3,3
 8003120:	00c200b4 	movhi	r3,2050
 8003124:	18e41204 	addi	r3,r3,-28600
 8003128:	1885883a 	add	r2,r3,r2
 800312c:	11000017 	ldw	r4,0(r2)
 8003130:	11400117 	ldw	r5,4(r2)
 8003134:	900d883a 	mov	r6,r18
 8003138:	980f883a 	mov	r7,r19
 800313c:	800bb7c0 	call	800bb7c <__gedf2>
 8003140:	00828d0e 	bge	zero,r2,8003b78 <_dtoa_r+0xcd4>
 8003144:	d9000517 	ldw	r4,20(sp)
 8003148:	d8000e15 	stw	zero,56(sp)
 800314c:	213fffc4 	addi	r4,r4,-1
 8003150:	d9000515 	stw	r4,20(sp)
 8003154:	b42dc83a 	sub	r22,r22,r16
 8003158:	b5bfffc4 	addi	r22,r22,-1
 800315c:	b0026f16 	blt	r22,zero,8003b1c <_dtoa_r+0xc78>
 8003160:	d8000815 	stw	zero,32(sp)
 8003164:	d9c00517 	ldw	r7,20(sp)
 8003168:	38026416 	blt	r7,zero,8003afc <_dtoa_r+0xc58>
 800316c:	b1ed883a 	add	r22,r22,r7
 8003170:	d9c00d15 	stw	r7,52(sp)
 8003174:	d8000a15 	stw	zero,40(sp)
 8003178:	d9800317 	ldw	r6,12(sp)
 800317c:	00800244 	movi	r2,9
 8003180:	11811436 	bltu	r2,r6,80035d4 <_dtoa_r+0x730>
 8003184:	00800144 	movi	r2,5
 8003188:	1184e10e 	bge	r2,r6,8004510 <_dtoa_r+0x166c>
 800318c:	31bfff04 	addi	r6,r6,-4
 8003190:	d9800315 	stw	r6,12(sp)
 8003194:	0023883a 	mov	r17,zero
 8003198:	d9800317 	ldw	r6,12(sp)
 800319c:	008000c4 	movi	r2,3
 80031a0:	30836726 	beq	r6,r2,8003f40 <_dtoa_r+0x109c>
 80031a4:	1183410e 	bge	r2,r6,8003eac <_dtoa_r+0x1008>
 80031a8:	d9c00317 	ldw	r7,12(sp)
 80031ac:	00800104 	movi	r2,4
 80031b0:	38827c26 	beq	r7,r2,8003ba4 <_dtoa_r+0xd00>
 80031b4:	00800144 	movi	r2,5
 80031b8:	3884c41e 	bne	r7,r2,80044cc <_dtoa_r+0x1628>
 80031bc:	00800044 	movi	r2,1
 80031c0:	d8800b15 	stw	r2,44(sp)
 80031c4:	d8c00517 	ldw	r3,20(sp)
 80031c8:	d9002217 	ldw	r4,136(sp)
 80031cc:	1907883a 	add	r3,r3,r4
 80031d0:	19800044 	addi	r6,r3,1
 80031d4:	d8c00c15 	stw	r3,48(sp)
 80031d8:	d9800615 	stw	r6,24(sp)
 80031dc:	0183a40e 	bge	zero,r6,8004070 <_dtoa_r+0x11cc>
 80031e0:	d9800617 	ldw	r6,24(sp)
 80031e4:	3021883a 	mov	r16,r6
 80031e8:	e0001115 	stw	zero,68(fp)
 80031ec:	008005c4 	movi	r2,23
 80031f0:	1184c92e 	bgeu	r2,r6,8004518 <_dtoa_r+0x1674>
 80031f4:	00c00044 	movi	r3,1
 80031f8:	00800104 	movi	r2,4
 80031fc:	1085883a 	add	r2,r2,r2
 8003200:	11000504 	addi	r4,r2,20
 8003204:	180b883a 	mov	r5,r3
 8003208:	18c00044 	addi	r3,r3,1
 800320c:	313ffb2e 	bgeu	r6,r4,80031fc <__alt_data_end+0xf80031fc>
 8003210:	e1401115 	stw	r5,68(fp)
 8003214:	e009883a 	mov	r4,fp
 8003218:	80065400 	call	8006540 <_Balloc>
 800321c:	d8800715 	stw	r2,28(sp)
 8003220:	e0801015 	stw	r2,64(fp)
 8003224:	00800384 	movi	r2,14
 8003228:	1400f736 	bltu	r2,r16,8003608 <_dtoa_r+0x764>
 800322c:	8800f626 	beq	r17,zero,8003608 <_dtoa_r+0x764>
 8003230:	d9c00517 	ldw	r7,20(sp)
 8003234:	01c39a0e 	bge	zero,r7,80040a0 <_dtoa_r+0x11fc>
 8003238:	388003cc 	andi	r2,r7,15
 800323c:	100490fa 	slli	r2,r2,3
 8003240:	382bd13a 	srai	r21,r7,4
 8003244:	00c200b4 	movhi	r3,2050
 8003248:	18e41204 	addi	r3,r3,-28600
 800324c:	1885883a 	add	r2,r3,r2
 8003250:	a8c0040c 	andi	r3,r21,16
 8003254:	12400017 	ldw	r9,0(r2)
 8003258:	12000117 	ldw	r8,4(r2)
 800325c:	18037926 	beq	r3,zero,8004044 <_dtoa_r+0x11a0>
 8003260:	008200b4 	movhi	r2,2050
 8003264:	10a40804 	addi	r2,r2,-28640
 8003268:	11800817 	ldw	r6,32(r2)
 800326c:	11c00917 	ldw	r7,36(r2)
 8003270:	9009883a 	mov	r4,r18
 8003274:	980b883a 	mov	r5,r19
 8003278:	da001715 	stw	r8,92(sp)
 800327c:	da401615 	stw	r9,88(sp)
 8003280:	800b20c0 	call	800b20c <__divdf3>
 8003284:	da001717 	ldw	r8,92(sp)
 8003288:	da401617 	ldw	r9,88(sp)
 800328c:	ad4003cc 	andi	r21,r21,15
 8003290:	040000c4 	movi	r16,3
 8003294:	1023883a 	mov	r17,r2
 8003298:	1829883a 	mov	r20,r3
 800329c:	a8001126 	beq	r21,zero,80032e4 <_dtoa_r+0x440>
 80032a0:	05c200b4 	movhi	r23,2050
 80032a4:	bde40804 	addi	r23,r23,-28640
 80032a8:	4805883a 	mov	r2,r9
 80032ac:	4007883a 	mov	r3,r8
 80032b0:	a980004c 	andi	r6,r21,1
 80032b4:	1009883a 	mov	r4,r2
 80032b8:	a82bd07a 	srai	r21,r21,1
 80032bc:	180b883a 	mov	r5,r3
 80032c0:	30000426 	beq	r6,zero,80032d4 <_dtoa_r+0x430>
 80032c4:	b9800017 	ldw	r6,0(r23)
 80032c8:	b9c00117 	ldw	r7,4(r23)
 80032cc:	84000044 	addi	r16,r16,1
 80032d0:	800bd4c0 	call	800bd4c <__muldf3>
 80032d4:	bdc00204 	addi	r23,r23,8
 80032d8:	a83ff51e 	bne	r21,zero,80032b0 <__alt_data_end+0xf80032b0>
 80032dc:	1013883a 	mov	r9,r2
 80032e0:	1811883a 	mov	r8,r3
 80032e4:	480d883a 	mov	r6,r9
 80032e8:	400f883a 	mov	r7,r8
 80032ec:	8809883a 	mov	r4,r17
 80032f0:	a00b883a 	mov	r5,r20
 80032f4:	800b20c0 	call	800b20c <__divdf3>
 80032f8:	d8800f15 	stw	r2,60(sp)
 80032fc:	d8c01015 	stw	r3,64(sp)
 8003300:	d8c00e17 	ldw	r3,56(sp)
 8003304:	18000626 	beq	r3,zero,8003320 <_dtoa_r+0x47c>
 8003308:	d9000f17 	ldw	r4,60(sp)
 800330c:	d9401017 	ldw	r5,64(sp)
 8003310:	000d883a 	mov	r6,zero
 8003314:	01cffc34 	movhi	r7,16368
 8003318:	800bc580 	call	800bc58 <__ledf2>
 800331c:	10040b16 	blt	r2,zero,800434c <_dtoa_r+0x14a8>
 8003320:	8009883a 	mov	r4,r16
 8003324:	800cde00 	call	800cde0 <__floatsidf>
 8003328:	d9800f17 	ldw	r6,60(sp)
 800332c:	d9c01017 	ldw	r7,64(sp)
 8003330:	1009883a 	mov	r4,r2
 8003334:	180b883a 	mov	r5,r3
 8003338:	800bd4c0 	call	800bd4c <__muldf3>
 800333c:	000d883a 	mov	r6,zero
 8003340:	01d00734 	movhi	r7,16412
 8003344:	1009883a 	mov	r4,r2
 8003348:	180b883a 	mov	r5,r3
 800334c:	800a9600 	call	800a960 <__adddf3>
 8003350:	1021883a 	mov	r16,r2
 8003354:	d8800617 	ldw	r2,24(sp)
 8003358:	047f3034 	movhi	r17,64704
 800335c:	1c63883a 	add	r17,r3,r17
 8003360:	10031826 	beq	r2,zero,8003fc4 <_dtoa_r+0x1120>
 8003364:	d8c00517 	ldw	r3,20(sp)
 8003368:	db000617 	ldw	r12,24(sp)
 800336c:	d8c01315 	stw	r3,76(sp)
 8003370:	d9000b17 	ldw	r4,44(sp)
 8003374:	20038f26 	beq	r4,zero,80041b4 <_dtoa_r+0x1310>
 8003378:	60bfffc4 	addi	r2,r12,-1
 800337c:	100490fa 	slli	r2,r2,3
 8003380:	00c200b4 	movhi	r3,2050
 8003384:	18e41204 	addi	r3,r3,-28600
 8003388:	1885883a 	add	r2,r3,r2
 800338c:	11800017 	ldw	r6,0(r2)
 8003390:	11c00117 	ldw	r7,4(r2)
 8003394:	d8800717 	ldw	r2,28(sp)
 8003398:	0009883a 	mov	r4,zero
 800339c:	014ff834 	movhi	r5,16352
 80033a0:	db001615 	stw	r12,88(sp)
 80033a4:	15c00044 	addi	r23,r2,1
 80033a8:	800b20c0 	call	800b20c <__divdf3>
 80033ac:	800d883a 	mov	r6,r16
 80033b0:	880f883a 	mov	r7,r17
 80033b4:	1009883a 	mov	r4,r2
 80033b8:	180b883a 	mov	r5,r3
 80033bc:	800c4640 	call	800c464 <__subdf3>
 80033c0:	d9401017 	ldw	r5,64(sp)
 80033c4:	d9000f17 	ldw	r4,60(sp)
 80033c8:	102b883a 	mov	r21,r2
 80033cc:	d8c01215 	stw	r3,72(sp)
 80033d0:	800cd600 	call	800cd60 <__fixdfsi>
 80033d4:	1009883a 	mov	r4,r2
 80033d8:	1029883a 	mov	r20,r2
 80033dc:	800cde00 	call	800cde0 <__floatsidf>
 80033e0:	d9000f17 	ldw	r4,60(sp)
 80033e4:	d9401017 	ldw	r5,64(sp)
 80033e8:	100d883a 	mov	r6,r2
 80033ec:	180f883a 	mov	r7,r3
 80033f0:	800c4640 	call	800c464 <__subdf3>
 80033f4:	1823883a 	mov	r17,r3
 80033f8:	d8c00717 	ldw	r3,28(sp)
 80033fc:	d9401217 	ldw	r5,72(sp)
 8003400:	a2000c04 	addi	r8,r20,48
 8003404:	1021883a 	mov	r16,r2
 8003408:	1a000005 	stb	r8,0(r3)
 800340c:	800d883a 	mov	r6,r16
 8003410:	880f883a 	mov	r7,r17
 8003414:	a809883a 	mov	r4,r21
 8003418:	4029883a 	mov	r20,r8
 800341c:	800bb7c0 	call	800bb7c <__gedf2>
 8003420:	00841d16 	blt	zero,r2,8004498 <_dtoa_r+0x15f4>
 8003424:	800d883a 	mov	r6,r16
 8003428:	880f883a 	mov	r7,r17
 800342c:	0009883a 	mov	r4,zero
 8003430:	014ffc34 	movhi	r5,16368
 8003434:	800c4640 	call	800c464 <__subdf3>
 8003438:	d9401217 	ldw	r5,72(sp)
 800343c:	100d883a 	mov	r6,r2
 8003440:	180f883a 	mov	r7,r3
 8003444:	a809883a 	mov	r4,r21
 8003448:	800bb7c0 	call	800bb7c <__gedf2>
 800344c:	db001617 	ldw	r12,88(sp)
 8003450:	00840e16 	blt	zero,r2,800448c <_dtoa_r+0x15e8>
 8003454:	00800044 	movi	r2,1
 8003458:	13006b0e 	bge	r2,r12,8003608 <_dtoa_r+0x764>
 800345c:	d9000717 	ldw	r4,28(sp)
 8003460:	dd800f15 	stw	r22,60(sp)
 8003464:	dcc01015 	stw	r19,64(sp)
 8003468:	2319883a 	add	r12,r4,r12
 800346c:	dcc01217 	ldw	r19,72(sp)
 8003470:	602d883a 	mov	r22,r12
 8003474:	dc801215 	stw	r18,72(sp)
 8003478:	b825883a 	mov	r18,r23
 800347c:	00000906 	br	80034a4 <_dtoa_r+0x600>
 8003480:	800c4640 	call	800c464 <__subdf3>
 8003484:	a80d883a 	mov	r6,r21
 8003488:	980f883a 	mov	r7,r19
 800348c:	1009883a 	mov	r4,r2
 8003490:	180b883a 	mov	r5,r3
 8003494:	800bc580 	call	800bc58 <__ledf2>
 8003498:	1003e816 	blt	r2,zero,800443c <_dtoa_r+0x1598>
 800349c:	b825883a 	mov	r18,r23
 80034a0:	bd83e926 	beq	r23,r22,8004448 <_dtoa_r+0x15a4>
 80034a4:	a809883a 	mov	r4,r21
 80034a8:	980b883a 	mov	r5,r19
 80034ac:	000d883a 	mov	r6,zero
 80034b0:	01d00934 	movhi	r7,16420
 80034b4:	800bd4c0 	call	800bd4c <__muldf3>
 80034b8:	000d883a 	mov	r6,zero
 80034bc:	01d00934 	movhi	r7,16420
 80034c0:	8009883a 	mov	r4,r16
 80034c4:	880b883a 	mov	r5,r17
 80034c8:	102b883a 	mov	r21,r2
 80034cc:	1827883a 	mov	r19,r3
 80034d0:	800bd4c0 	call	800bd4c <__muldf3>
 80034d4:	180b883a 	mov	r5,r3
 80034d8:	1009883a 	mov	r4,r2
 80034dc:	1821883a 	mov	r16,r3
 80034e0:	1023883a 	mov	r17,r2
 80034e4:	800cd600 	call	800cd60 <__fixdfsi>
 80034e8:	1009883a 	mov	r4,r2
 80034ec:	1029883a 	mov	r20,r2
 80034f0:	800cde00 	call	800cde0 <__floatsidf>
 80034f4:	8809883a 	mov	r4,r17
 80034f8:	800b883a 	mov	r5,r16
 80034fc:	100d883a 	mov	r6,r2
 8003500:	180f883a 	mov	r7,r3
 8003504:	800c4640 	call	800c464 <__subdf3>
 8003508:	a5000c04 	addi	r20,r20,48
 800350c:	a80d883a 	mov	r6,r21
 8003510:	980f883a 	mov	r7,r19
 8003514:	1009883a 	mov	r4,r2
 8003518:	180b883a 	mov	r5,r3
 800351c:	95000005 	stb	r20,0(r18)
 8003520:	1021883a 	mov	r16,r2
 8003524:	1823883a 	mov	r17,r3
 8003528:	800bc580 	call	800bc58 <__ledf2>
 800352c:	bdc00044 	addi	r23,r23,1
 8003530:	800d883a 	mov	r6,r16
 8003534:	880f883a 	mov	r7,r17
 8003538:	0009883a 	mov	r4,zero
 800353c:	014ffc34 	movhi	r5,16368
 8003540:	103fcf0e 	bge	r2,zero,8003480 <__alt_data_end+0xf8003480>
 8003544:	d8c01317 	ldw	r3,76(sp)
 8003548:	d8c00515 	stw	r3,20(sp)
 800354c:	d9400917 	ldw	r5,36(sp)
 8003550:	e009883a 	mov	r4,fp
 8003554:	80065e80 	call	80065e8 <_Bfree>
 8003558:	d9000517 	ldw	r4,20(sp)
 800355c:	d9802317 	ldw	r6,140(sp)
 8003560:	d9c02517 	ldw	r7,148(sp)
 8003564:	b8000005 	stb	zero,0(r23)
 8003568:	20800044 	addi	r2,r4,1
 800356c:	30800015 	stw	r2,0(r6)
 8003570:	3802aa26 	beq	r7,zero,800401c <_dtoa_r+0x1178>
 8003574:	3dc00015 	stw	r23,0(r7)
 8003578:	d8800717 	ldw	r2,28(sp)
 800357c:	003e7906 	br	8002f64 <__alt_data_end+0xf8002f64>
 8003580:	00800434 	movhi	r2,16
 8003584:	10bfffc4 	addi	r2,r2,-1
 8003588:	88a2703a 	and	r17,r17,r2
 800358c:	883e851e 	bne	r17,zero,8002fa4 <__alt_data_end+0xf8002fa4>
 8003590:	008200b4 	movhi	r2,2050
 8003594:	10a3f304 	addi	r2,r2,-28724
 8003598:	003e8406 	br	8002fac <__alt_data_end+0xf8002fac>
 800359c:	10c00204 	addi	r3,r2,8
 80035a0:	003e8706 	br	8002fc0 <__alt_data_end+0xf8002fc0>
 80035a4:	01400434 	movhi	r5,16
 80035a8:	297fffc4 	addi	r5,r5,-1
 80035ac:	994a703a 	and	r5,r19,r5
 80035b0:	9009883a 	mov	r4,r18
 80035b4:	843f0044 	addi	r16,r16,-1023
 80035b8:	294ffc34 	orhi	r5,r5,16368
 80035bc:	dd800217 	ldw	r22,8(sp)
 80035c0:	d8001115 	stw	zero,68(sp)
 80035c4:	003ea506 	br	800305c <__alt_data_end+0xf800305c>
 80035c8:	008200b4 	movhi	r2,2050
 80035cc:	10a3ea04 	addi	r2,r2,-28760
 80035d0:	003e6406 	br	8002f64 <__alt_data_end+0xf8002f64>
 80035d4:	e0001115 	stw	zero,68(fp)
 80035d8:	000b883a 	mov	r5,zero
 80035dc:	e009883a 	mov	r4,fp
 80035e0:	80065400 	call	8006540 <_Balloc>
 80035e4:	01bfffc4 	movi	r6,-1
 80035e8:	01c00044 	movi	r7,1
 80035ec:	d8800715 	stw	r2,28(sp)
 80035f0:	d9800c15 	stw	r6,48(sp)
 80035f4:	e0801015 	stw	r2,64(fp)
 80035f8:	d8000315 	stw	zero,12(sp)
 80035fc:	d9c00b15 	stw	r7,44(sp)
 8003600:	d9800615 	stw	r6,24(sp)
 8003604:	d8002215 	stw	zero,136(sp)
 8003608:	d8800117 	ldw	r2,4(sp)
 800360c:	10008916 	blt	r2,zero,8003834 <_dtoa_r+0x990>
 8003610:	d9000517 	ldw	r4,20(sp)
 8003614:	00c00384 	movi	r3,14
 8003618:	19008616 	blt	r3,r4,8003834 <_dtoa_r+0x990>
 800361c:	200490fa 	slli	r2,r4,3
 8003620:	00c200b4 	movhi	r3,2050
 8003624:	d9802217 	ldw	r6,136(sp)
 8003628:	18e41204 	addi	r3,r3,-28600
 800362c:	1885883a 	add	r2,r3,r2
 8003630:	14000017 	ldw	r16,0(r2)
 8003634:	14400117 	ldw	r17,4(r2)
 8003638:	30016316 	blt	r6,zero,8003bc8 <_dtoa_r+0xd24>
 800363c:	800d883a 	mov	r6,r16
 8003640:	880f883a 	mov	r7,r17
 8003644:	9009883a 	mov	r4,r18
 8003648:	980b883a 	mov	r5,r19
 800364c:	800b20c0 	call	800b20c <__divdf3>
 8003650:	180b883a 	mov	r5,r3
 8003654:	1009883a 	mov	r4,r2
 8003658:	800cd600 	call	800cd60 <__fixdfsi>
 800365c:	1009883a 	mov	r4,r2
 8003660:	102b883a 	mov	r21,r2
 8003664:	800cde00 	call	800cde0 <__floatsidf>
 8003668:	800d883a 	mov	r6,r16
 800366c:	880f883a 	mov	r7,r17
 8003670:	1009883a 	mov	r4,r2
 8003674:	180b883a 	mov	r5,r3
 8003678:	800bd4c0 	call	800bd4c <__muldf3>
 800367c:	100d883a 	mov	r6,r2
 8003680:	180f883a 	mov	r7,r3
 8003684:	9009883a 	mov	r4,r18
 8003688:	980b883a 	mov	r5,r19
 800368c:	800c4640 	call	800c464 <__subdf3>
 8003690:	d9c00717 	ldw	r7,28(sp)
 8003694:	1009883a 	mov	r4,r2
 8003698:	a8800c04 	addi	r2,r21,48
 800369c:	38800005 	stb	r2,0(r7)
 80036a0:	3dc00044 	addi	r23,r7,1
 80036a4:	d9c00617 	ldw	r7,24(sp)
 80036a8:	01800044 	movi	r6,1
 80036ac:	180b883a 	mov	r5,r3
 80036b0:	2005883a 	mov	r2,r4
 80036b4:	39803826 	beq	r7,r6,8003798 <_dtoa_r+0x8f4>
 80036b8:	000d883a 	mov	r6,zero
 80036bc:	01d00934 	movhi	r7,16420
 80036c0:	800bd4c0 	call	800bd4c <__muldf3>
 80036c4:	000d883a 	mov	r6,zero
 80036c8:	000f883a 	mov	r7,zero
 80036cc:	1009883a 	mov	r4,r2
 80036d0:	180b883a 	mov	r5,r3
 80036d4:	1025883a 	mov	r18,r2
 80036d8:	1827883a 	mov	r19,r3
 80036dc:	800baf40 	call	800baf4 <__eqdf2>
 80036e0:	103f9a26 	beq	r2,zero,800354c <__alt_data_end+0xf800354c>
 80036e4:	d9c00617 	ldw	r7,24(sp)
 80036e8:	d8c00717 	ldw	r3,28(sp)
 80036ec:	b829883a 	mov	r20,r23
 80036f0:	38bfffc4 	addi	r2,r7,-1
 80036f4:	18ad883a 	add	r22,r3,r2
 80036f8:	00000a06 	br	8003724 <_dtoa_r+0x880>
 80036fc:	800bd4c0 	call	800bd4c <__muldf3>
 8003700:	000d883a 	mov	r6,zero
 8003704:	000f883a 	mov	r7,zero
 8003708:	1009883a 	mov	r4,r2
 800370c:	180b883a 	mov	r5,r3
 8003710:	1025883a 	mov	r18,r2
 8003714:	1827883a 	mov	r19,r3
 8003718:	b829883a 	mov	r20,r23
 800371c:	800baf40 	call	800baf4 <__eqdf2>
 8003720:	103f8a26 	beq	r2,zero,800354c <__alt_data_end+0xf800354c>
 8003724:	800d883a 	mov	r6,r16
 8003728:	880f883a 	mov	r7,r17
 800372c:	9009883a 	mov	r4,r18
 8003730:	980b883a 	mov	r5,r19
 8003734:	800b20c0 	call	800b20c <__divdf3>
 8003738:	180b883a 	mov	r5,r3
 800373c:	1009883a 	mov	r4,r2
 8003740:	800cd600 	call	800cd60 <__fixdfsi>
 8003744:	1009883a 	mov	r4,r2
 8003748:	102b883a 	mov	r21,r2
 800374c:	800cde00 	call	800cde0 <__floatsidf>
 8003750:	800d883a 	mov	r6,r16
 8003754:	880f883a 	mov	r7,r17
 8003758:	1009883a 	mov	r4,r2
 800375c:	180b883a 	mov	r5,r3
 8003760:	800bd4c0 	call	800bd4c <__muldf3>
 8003764:	100d883a 	mov	r6,r2
 8003768:	180f883a 	mov	r7,r3
 800376c:	9009883a 	mov	r4,r18
 8003770:	980b883a 	mov	r5,r19
 8003774:	800c4640 	call	800c464 <__subdf3>
 8003778:	aa000c04 	addi	r8,r21,48
 800377c:	a2000005 	stb	r8,0(r20)
 8003780:	000d883a 	mov	r6,zero
 8003784:	01d00934 	movhi	r7,16420
 8003788:	1009883a 	mov	r4,r2
 800378c:	180b883a 	mov	r5,r3
 8003790:	a5c00044 	addi	r23,r20,1
 8003794:	b53fd91e 	bne	r22,r20,80036fc <__alt_data_end+0xf80036fc>
 8003798:	100d883a 	mov	r6,r2
 800379c:	180f883a 	mov	r7,r3
 80037a0:	1009883a 	mov	r4,r2
 80037a4:	180b883a 	mov	r5,r3
 80037a8:	800a9600 	call	800a960 <__adddf3>
 80037ac:	100d883a 	mov	r6,r2
 80037b0:	180f883a 	mov	r7,r3
 80037b4:	8009883a 	mov	r4,r16
 80037b8:	880b883a 	mov	r5,r17
 80037bc:	1027883a 	mov	r19,r2
 80037c0:	1825883a 	mov	r18,r3
 80037c4:	800bc580 	call	800bc58 <__ledf2>
 80037c8:	10000816 	blt	r2,zero,80037ec <_dtoa_r+0x948>
 80037cc:	980d883a 	mov	r6,r19
 80037d0:	900f883a 	mov	r7,r18
 80037d4:	8009883a 	mov	r4,r16
 80037d8:	880b883a 	mov	r5,r17
 80037dc:	800baf40 	call	800baf4 <__eqdf2>
 80037e0:	103f5a1e 	bne	r2,zero,800354c <__alt_data_end+0xf800354c>
 80037e4:	ad40004c 	andi	r21,r21,1
 80037e8:	a83f5826 	beq	r21,zero,800354c <__alt_data_end+0xf800354c>
 80037ec:	bd3fffc3 	ldbu	r20,-1(r23)
 80037f0:	b8bfffc4 	addi	r2,r23,-1
 80037f4:	1007883a 	mov	r3,r2
 80037f8:	01400e44 	movi	r5,57
 80037fc:	d9800717 	ldw	r6,28(sp)
 8003800:	00000506 	br	8003818 <_dtoa_r+0x974>
 8003804:	18ffffc4 	addi	r3,r3,-1
 8003808:	11824726 	beq	r2,r6,8004128 <_dtoa_r+0x1284>
 800380c:	1d000003 	ldbu	r20,0(r3)
 8003810:	102f883a 	mov	r23,r2
 8003814:	10bfffc4 	addi	r2,r2,-1
 8003818:	a1003fcc 	andi	r4,r20,255
 800381c:	2100201c 	xori	r4,r4,128
 8003820:	213fe004 	addi	r4,r4,-128
 8003824:	217ff726 	beq	r4,r5,8003804 <__alt_data_end+0xf8003804>
 8003828:	a2000044 	addi	r8,r20,1
 800382c:	12000005 	stb	r8,0(r2)
 8003830:	003f4606 	br	800354c <__alt_data_end+0xf800354c>
 8003834:	d9000b17 	ldw	r4,44(sp)
 8003838:	2000c826 	beq	r4,zero,8003b5c <_dtoa_r+0xcb8>
 800383c:	d9800317 	ldw	r6,12(sp)
 8003840:	00c00044 	movi	r3,1
 8003844:	1980f90e 	bge	r3,r6,8003c2c <_dtoa_r+0xd88>
 8003848:	d8800617 	ldw	r2,24(sp)
 800384c:	d8c00a17 	ldw	r3,40(sp)
 8003850:	157fffc4 	addi	r21,r2,-1
 8003854:	1d41f316 	blt	r3,r21,8004024 <_dtoa_r+0x1180>
 8003858:	1d6bc83a 	sub	r21,r3,r21
 800385c:	d9c00617 	ldw	r7,24(sp)
 8003860:	3802aa16 	blt	r7,zero,800430c <_dtoa_r+0x1468>
 8003864:	dd000817 	ldw	r20,32(sp)
 8003868:	d8800617 	ldw	r2,24(sp)
 800386c:	d8c00817 	ldw	r3,32(sp)
 8003870:	01400044 	movi	r5,1
 8003874:	e009883a 	mov	r4,fp
 8003878:	1887883a 	add	r3,r3,r2
 800387c:	d8c00815 	stw	r3,32(sp)
 8003880:	b0ad883a 	add	r22,r22,r2
 8003884:	800694c0 	call	800694c <__i2b>
 8003888:	1023883a 	mov	r17,r2
 800388c:	a0000826 	beq	r20,zero,80038b0 <_dtoa_r+0xa0c>
 8003890:	0580070e 	bge	zero,r22,80038b0 <_dtoa_r+0xa0c>
 8003894:	a005883a 	mov	r2,r20
 8003898:	b500b916 	blt	r22,r20,8003b80 <_dtoa_r+0xcdc>
 800389c:	d9000817 	ldw	r4,32(sp)
 80038a0:	a0a9c83a 	sub	r20,r20,r2
 80038a4:	b0adc83a 	sub	r22,r22,r2
 80038a8:	2089c83a 	sub	r4,r4,r2
 80038ac:	d9000815 	stw	r4,32(sp)
 80038b0:	d9800a17 	ldw	r6,40(sp)
 80038b4:	0181810e 	bge	zero,r6,8003ebc <_dtoa_r+0x1018>
 80038b8:	d9c00b17 	ldw	r7,44(sp)
 80038bc:	3800b326 	beq	r7,zero,8003b8c <_dtoa_r+0xce8>
 80038c0:	a800b226 	beq	r21,zero,8003b8c <_dtoa_r+0xce8>
 80038c4:	880b883a 	mov	r5,r17
 80038c8:	a80d883a 	mov	r6,r21
 80038cc:	e009883a 	mov	r4,fp
 80038d0:	8006b800 	call	8006b80 <__pow5mult>
 80038d4:	d9800917 	ldw	r6,36(sp)
 80038d8:	100b883a 	mov	r5,r2
 80038dc:	e009883a 	mov	r4,fp
 80038e0:	1023883a 	mov	r17,r2
 80038e4:	80069880 	call	8006988 <__multiply>
 80038e8:	1021883a 	mov	r16,r2
 80038ec:	d8800a17 	ldw	r2,40(sp)
 80038f0:	d9400917 	ldw	r5,36(sp)
 80038f4:	e009883a 	mov	r4,fp
 80038f8:	1545c83a 	sub	r2,r2,r21
 80038fc:	d8800a15 	stw	r2,40(sp)
 8003900:	80065e80 	call	80065e8 <_Bfree>
 8003904:	d8c00a17 	ldw	r3,40(sp)
 8003908:	18009f1e 	bne	r3,zero,8003b88 <_dtoa_r+0xce4>
 800390c:	05c00044 	movi	r23,1
 8003910:	e009883a 	mov	r4,fp
 8003914:	b80b883a 	mov	r5,r23
 8003918:	800694c0 	call	800694c <__i2b>
 800391c:	d9000d17 	ldw	r4,52(sp)
 8003920:	102b883a 	mov	r21,r2
 8003924:	2000ce26 	beq	r4,zero,8003c60 <_dtoa_r+0xdbc>
 8003928:	200d883a 	mov	r6,r4
 800392c:	100b883a 	mov	r5,r2
 8003930:	e009883a 	mov	r4,fp
 8003934:	8006b800 	call	8006b80 <__pow5mult>
 8003938:	d9800317 	ldw	r6,12(sp)
 800393c:	102b883a 	mov	r21,r2
 8003940:	b981810e 	bge	r23,r6,8003f48 <_dtoa_r+0x10a4>
 8003944:	0027883a 	mov	r19,zero
 8003948:	a8800417 	ldw	r2,16(r21)
 800394c:	05c00804 	movi	r23,32
 8003950:	10800104 	addi	r2,r2,4
 8003954:	1085883a 	add	r2,r2,r2
 8003958:	1085883a 	add	r2,r2,r2
 800395c:	a885883a 	add	r2,r21,r2
 8003960:	11000017 	ldw	r4,0(r2)
 8003964:	80068340 	call	8006834 <__hi0bits>
 8003968:	b885c83a 	sub	r2,r23,r2
 800396c:	1585883a 	add	r2,r2,r22
 8003970:	108007cc 	andi	r2,r2,31
 8003974:	1000b326 	beq	r2,zero,8003c44 <_dtoa_r+0xda0>
 8003978:	00c00804 	movi	r3,32
 800397c:	1887c83a 	sub	r3,r3,r2
 8003980:	01000104 	movi	r4,4
 8003984:	20c2cd0e 	bge	r4,r3,80044bc <_dtoa_r+0x1618>
 8003988:	00c00704 	movi	r3,28
 800398c:	1885c83a 	sub	r2,r3,r2
 8003990:	d8c00817 	ldw	r3,32(sp)
 8003994:	a0a9883a 	add	r20,r20,r2
 8003998:	b0ad883a 	add	r22,r22,r2
 800399c:	1887883a 	add	r3,r3,r2
 80039a0:	d8c00815 	stw	r3,32(sp)
 80039a4:	d9800817 	ldw	r6,32(sp)
 80039a8:	0180040e 	bge	zero,r6,80039bc <_dtoa_r+0xb18>
 80039ac:	800b883a 	mov	r5,r16
 80039b0:	e009883a 	mov	r4,fp
 80039b4:	8006cc00 	call	8006cc0 <__lshift>
 80039b8:	1021883a 	mov	r16,r2
 80039bc:	0580050e 	bge	zero,r22,80039d4 <_dtoa_r+0xb30>
 80039c0:	a80b883a 	mov	r5,r21
 80039c4:	b00d883a 	mov	r6,r22
 80039c8:	e009883a 	mov	r4,fp
 80039cc:	8006cc00 	call	8006cc0 <__lshift>
 80039d0:	102b883a 	mov	r21,r2
 80039d4:	d9c00e17 	ldw	r7,56(sp)
 80039d8:	3801211e 	bne	r7,zero,8003e60 <_dtoa_r+0xfbc>
 80039dc:	d9800617 	ldw	r6,24(sp)
 80039e0:	0181380e 	bge	zero,r6,8003ec4 <_dtoa_r+0x1020>
 80039e4:	d8c00b17 	ldw	r3,44(sp)
 80039e8:	1800ab1e 	bne	r3,zero,8003c98 <_dtoa_r+0xdf4>
 80039ec:	dc800717 	ldw	r18,28(sp)
 80039f0:	dcc00617 	ldw	r19,24(sp)
 80039f4:	9029883a 	mov	r20,r18
 80039f8:	00000206 	br	8003a04 <_dtoa_r+0xb60>
 80039fc:	80066100 	call	8006610 <__multadd>
 8003a00:	1021883a 	mov	r16,r2
 8003a04:	a80b883a 	mov	r5,r21
 8003a08:	8009883a 	mov	r4,r16
 8003a0c:	8002ca40 	call	8002ca4 <quorem>
 8003a10:	10800c04 	addi	r2,r2,48
 8003a14:	90800005 	stb	r2,0(r18)
 8003a18:	94800044 	addi	r18,r18,1
 8003a1c:	9507c83a 	sub	r3,r18,r20
 8003a20:	000f883a 	mov	r7,zero
 8003a24:	01800284 	movi	r6,10
 8003a28:	800b883a 	mov	r5,r16
 8003a2c:	e009883a 	mov	r4,fp
 8003a30:	1cfff216 	blt	r3,r19,80039fc <__alt_data_end+0xf80039fc>
 8003a34:	1011883a 	mov	r8,r2
 8003a38:	d8800617 	ldw	r2,24(sp)
 8003a3c:	0082370e 	bge	zero,r2,800431c <_dtoa_r+0x1478>
 8003a40:	d9000717 	ldw	r4,28(sp)
 8003a44:	0025883a 	mov	r18,zero
 8003a48:	20af883a 	add	r23,r4,r2
 8003a4c:	01800044 	movi	r6,1
 8003a50:	800b883a 	mov	r5,r16
 8003a54:	e009883a 	mov	r4,fp
 8003a58:	da001715 	stw	r8,92(sp)
 8003a5c:	8006cc00 	call	8006cc0 <__lshift>
 8003a60:	a80b883a 	mov	r5,r21
 8003a64:	1009883a 	mov	r4,r2
 8003a68:	d8800915 	stw	r2,36(sp)
 8003a6c:	8006e080 	call	8006e08 <__mcmp>
 8003a70:	da001717 	ldw	r8,92(sp)
 8003a74:	0081800e 	bge	zero,r2,8004078 <_dtoa_r+0x11d4>
 8003a78:	b93fffc3 	ldbu	r4,-1(r23)
 8003a7c:	b8bfffc4 	addi	r2,r23,-1
 8003a80:	1007883a 	mov	r3,r2
 8003a84:	01800e44 	movi	r6,57
 8003a88:	d9c00717 	ldw	r7,28(sp)
 8003a8c:	00000506 	br	8003aa4 <_dtoa_r+0xc00>
 8003a90:	18ffffc4 	addi	r3,r3,-1
 8003a94:	11c12326 	beq	r2,r7,8003f24 <_dtoa_r+0x1080>
 8003a98:	19000003 	ldbu	r4,0(r3)
 8003a9c:	102f883a 	mov	r23,r2
 8003aa0:	10bfffc4 	addi	r2,r2,-1
 8003aa4:	21403fcc 	andi	r5,r4,255
 8003aa8:	2940201c 	xori	r5,r5,128
 8003aac:	297fe004 	addi	r5,r5,-128
 8003ab0:	29bff726 	beq	r5,r6,8003a90 <__alt_data_end+0xf8003a90>
 8003ab4:	21000044 	addi	r4,r4,1
 8003ab8:	11000005 	stb	r4,0(r2)
 8003abc:	a80b883a 	mov	r5,r21
 8003ac0:	e009883a 	mov	r4,fp
 8003ac4:	80065e80 	call	80065e8 <_Bfree>
 8003ac8:	883ea026 	beq	r17,zero,800354c <__alt_data_end+0xf800354c>
 8003acc:	90000426 	beq	r18,zero,8003ae0 <_dtoa_r+0xc3c>
 8003ad0:	94400326 	beq	r18,r17,8003ae0 <_dtoa_r+0xc3c>
 8003ad4:	900b883a 	mov	r5,r18
 8003ad8:	e009883a 	mov	r4,fp
 8003adc:	80065e80 	call	80065e8 <_Bfree>
 8003ae0:	880b883a 	mov	r5,r17
 8003ae4:	e009883a 	mov	r4,fp
 8003ae8:	80065e80 	call	80065e8 <_Bfree>
 8003aec:	003e9706 	br	800354c <__alt_data_end+0xf800354c>
 8003af0:	01800044 	movi	r6,1
 8003af4:	d9800e15 	stw	r6,56(sp)
 8003af8:	003d9606 	br	8003154 <__alt_data_end+0xf8003154>
 8003afc:	d8800817 	ldw	r2,32(sp)
 8003b00:	d8c00517 	ldw	r3,20(sp)
 8003b04:	d8000d15 	stw	zero,52(sp)
 8003b08:	10c5c83a 	sub	r2,r2,r3
 8003b0c:	00c9c83a 	sub	r4,zero,r3
 8003b10:	d8800815 	stw	r2,32(sp)
 8003b14:	d9000a15 	stw	r4,40(sp)
 8003b18:	003d9706 	br	8003178 <__alt_data_end+0xf8003178>
 8003b1c:	05adc83a 	sub	r22,zero,r22
 8003b20:	dd800815 	stw	r22,32(sp)
 8003b24:	002d883a 	mov	r22,zero
 8003b28:	003d8e06 	br	8003164 <__alt_data_end+0xf8003164>
 8003b2c:	d9000517 	ldw	r4,20(sp)
 8003b30:	800cde00 	call	800cde0 <__floatsidf>
 8003b34:	100d883a 	mov	r6,r2
 8003b38:	180f883a 	mov	r7,r3
 8003b3c:	a009883a 	mov	r4,r20
 8003b40:	880b883a 	mov	r5,r17
 8003b44:	800baf40 	call	800baf4 <__eqdf2>
 8003b48:	103d7126 	beq	r2,zero,8003110 <__alt_data_end+0xf8003110>
 8003b4c:	d9c00517 	ldw	r7,20(sp)
 8003b50:	39ffffc4 	addi	r7,r7,-1
 8003b54:	d9c00515 	stw	r7,20(sp)
 8003b58:	003d6d06 	br	8003110 <__alt_data_end+0xf8003110>
 8003b5c:	dd400a17 	ldw	r21,40(sp)
 8003b60:	dd000817 	ldw	r20,32(sp)
 8003b64:	0023883a 	mov	r17,zero
 8003b68:	003f4806 	br	800388c <__alt_data_end+0xf800388c>
 8003b6c:	10e3c83a 	sub	r17,r2,r3
 8003b70:	9448983a 	sll	r4,r18,r17
 8003b74:	003d3206 	br	8003040 <__alt_data_end+0xf8003040>
 8003b78:	d8000e15 	stw	zero,56(sp)
 8003b7c:	003d7506 	br	8003154 <__alt_data_end+0xf8003154>
 8003b80:	b005883a 	mov	r2,r22
 8003b84:	003f4506 	br	800389c <__alt_data_end+0xf800389c>
 8003b88:	dc000915 	stw	r16,36(sp)
 8003b8c:	d9800a17 	ldw	r6,40(sp)
 8003b90:	d9400917 	ldw	r5,36(sp)
 8003b94:	e009883a 	mov	r4,fp
 8003b98:	8006b800 	call	8006b80 <__pow5mult>
 8003b9c:	1021883a 	mov	r16,r2
 8003ba0:	003f5a06 	br	800390c <__alt_data_end+0xf800390c>
 8003ba4:	01c00044 	movi	r7,1
 8003ba8:	d9c00b15 	stw	r7,44(sp)
 8003bac:	d8802217 	ldw	r2,136(sp)
 8003bb0:	0081280e 	bge	zero,r2,8004054 <_dtoa_r+0x11b0>
 8003bb4:	100d883a 	mov	r6,r2
 8003bb8:	1021883a 	mov	r16,r2
 8003bbc:	d8800c15 	stw	r2,48(sp)
 8003bc0:	d8800615 	stw	r2,24(sp)
 8003bc4:	003d8806 	br	80031e8 <__alt_data_end+0xf80031e8>
 8003bc8:	d8800617 	ldw	r2,24(sp)
 8003bcc:	00be9b16 	blt	zero,r2,800363c <__alt_data_end+0xf800363c>
 8003bd0:	10010f1e 	bne	r2,zero,8004010 <_dtoa_r+0x116c>
 8003bd4:	880b883a 	mov	r5,r17
 8003bd8:	000d883a 	mov	r6,zero
 8003bdc:	01d00534 	movhi	r7,16404
 8003be0:	8009883a 	mov	r4,r16
 8003be4:	800bd4c0 	call	800bd4c <__muldf3>
 8003be8:	900d883a 	mov	r6,r18
 8003bec:	980f883a 	mov	r7,r19
 8003bf0:	1009883a 	mov	r4,r2
 8003bf4:	180b883a 	mov	r5,r3
 8003bf8:	800bb7c0 	call	800bb7c <__gedf2>
 8003bfc:	002b883a 	mov	r21,zero
 8003c00:	0023883a 	mov	r17,zero
 8003c04:	1000bf16 	blt	r2,zero,8003f04 <_dtoa_r+0x1060>
 8003c08:	d9802217 	ldw	r6,136(sp)
 8003c0c:	ddc00717 	ldw	r23,28(sp)
 8003c10:	018c303a 	nor	r6,zero,r6
 8003c14:	d9800515 	stw	r6,20(sp)
 8003c18:	a80b883a 	mov	r5,r21
 8003c1c:	e009883a 	mov	r4,fp
 8003c20:	80065e80 	call	80065e8 <_Bfree>
 8003c24:	883e4926 	beq	r17,zero,800354c <__alt_data_end+0xf800354c>
 8003c28:	003fad06 	br	8003ae0 <__alt_data_end+0xf8003ae0>
 8003c2c:	d9c01117 	ldw	r7,68(sp)
 8003c30:	3801bc26 	beq	r7,zero,8004324 <_dtoa_r+0x1480>
 8003c34:	10810cc4 	addi	r2,r2,1075
 8003c38:	dd400a17 	ldw	r21,40(sp)
 8003c3c:	dd000817 	ldw	r20,32(sp)
 8003c40:	003f0a06 	br	800386c <__alt_data_end+0xf800386c>
 8003c44:	00800704 	movi	r2,28
 8003c48:	d9000817 	ldw	r4,32(sp)
 8003c4c:	a0a9883a 	add	r20,r20,r2
 8003c50:	b0ad883a 	add	r22,r22,r2
 8003c54:	2089883a 	add	r4,r4,r2
 8003c58:	d9000815 	stw	r4,32(sp)
 8003c5c:	003f5106 	br	80039a4 <__alt_data_end+0xf80039a4>
 8003c60:	d8c00317 	ldw	r3,12(sp)
 8003c64:	b8c1fc0e 	bge	r23,r3,8004458 <_dtoa_r+0x15b4>
 8003c68:	0027883a 	mov	r19,zero
 8003c6c:	b805883a 	mov	r2,r23
 8003c70:	003f3e06 	br	800396c <__alt_data_end+0xf800396c>
 8003c74:	880b883a 	mov	r5,r17
 8003c78:	e009883a 	mov	r4,fp
 8003c7c:	000f883a 	mov	r7,zero
 8003c80:	01800284 	movi	r6,10
 8003c84:	80066100 	call	8006610 <__multadd>
 8003c88:	d9000c17 	ldw	r4,48(sp)
 8003c8c:	1023883a 	mov	r17,r2
 8003c90:	0102040e 	bge	zero,r4,80044a4 <_dtoa_r+0x1600>
 8003c94:	d9000615 	stw	r4,24(sp)
 8003c98:	0500050e 	bge	zero,r20,8003cb0 <_dtoa_r+0xe0c>
 8003c9c:	880b883a 	mov	r5,r17
 8003ca0:	a00d883a 	mov	r6,r20
 8003ca4:	e009883a 	mov	r4,fp
 8003ca8:	8006cc00 	call	8006cc0 <__lshift>
 8003cac:	1023883a 	mov	r17,r2
 8003cb0:	9801241e 	bne	r19,zero,8004144 <_dtoa_r+0x12a0>
 8003cb4:	8829883a 	mov	r20,r17
 8003cb8:	d9000617 	ldw	r4,24(sp)
 8003cbc:	dcc00717 	ldw	r19,28(sp)
 8003cc0:	9480004c 	andi	r18,r18,1
 8003cc4:	20bfffc4 	addi	r2,r4,-1
 8003cc8:	9885883a 	add	r2,r19,r2
 8003ccc:	d8800415 	stw	r2,16(sp)
 8003cd0:	dc800615 	stw	r18,24(sp)
 8003cd4:	a80b883a 	mov	r5,r21
 8003cd8:	8009883a 	mov	r4,r16
 8003cdc:	8002ca40 	call	8002ca4 <quorem>
 8003ce0:	880b883a 	mov	r5,r17
 8003ce4:	8009883a 	mov	r4,r16
 8003ce8:	102f883a 	mov	r23,r2
 8003cec:	8006e080 	call	8006e08 <__mcmp>
 8003cf0:	a80b883a 	mov	r5,r21
 8003cf4:	a00d883a 	mov	r6,r20
 8003cf8:	e009883a 	mov	r4,fp
 8003cfc:	102d883a 	mov	r22,r2
 8003d00:	8006e680 	call	8006e68 <__mdiff>
 8003d04:	1007883a 	mov	r3,r2
 8003d08:	10800317 	ldw	r2,12(r2)
 8003d0c:	bc800c04 	addi	r18,r23,48
 8003d10:	180b883a 	mov	r5,r3
 8003d14:	10004e1e 	bne	r2,zero,8003e50 <_dtoa_r+0xfac>
 8003d18:	8009883a 	mov	r4,r16
 8003d1c:	d8c01615 	stw	r3,88(sp)
 8003d20:	8006e080 	call	8006e08 <__mcmp>
 8003d24:	d8c01617 	ldw	r3,88(sp)
 8003d28:	e009883a 	mov	r4,fp
 8003d2c:	d8801615 	stw	r2,88(sp)
 8003d30:	180b883a 	mov	r5,r3
 8003d34:	80065e80 	call	80065e8 <_Bfree>
 8003d38:	d8801617 	ldw	r2,88(sp)
 8003d3c:	1000041e 	bne	r2,zero,8003d50 <_dtoa_r+0xeac>
 8003d40:	d9800317 	ldw	r6,12(sp)
 8003d44:	3000021e 	bne	r6,zero,8003d50 <_dtoa_r+0xeac>
 8003d48:	d8c00617 	ldw	r3,24(sp)
 8003d4c:	18003726 	beq	r3,zero,8003e2c <_dtoa_r+0xf88>
 8003d50:	b0002016 	blt	r22,zero,8003dd4 <_dtoa_r+0xf30>
 8003d54:	b000041e 	bne	r22,zero,8003d68 <_dtoa_r+0xec4>
 8003d58:	d9000317 	ldw	r4,12(sp)
 8003d5c:	2000021e 	bne	r4,zero,8003d68 <_dtoa_r+0xec4>
 8003d60:	d8c00617 	ldw	r3,24(sp)
 8003d64:	18001b26 	beq	r3,zero,8003dd4 <_dtoa_r+0xf30>
 8003d68:	00810716 	blt	zero,r2,8004188 <_dtoa_r+0x12e4>
 8003d6c:	d8c00417 	ldw	r3,16(sp)
 8003d70:	9d800044 	addi	r22,r19,1
 8003d74:	9c800005 	stb	r18,0(r19)
 8003d78:	b02f883a 	mov	r23,r22
 8003d7c:	98c10626 	beq	r19,r3,8004198 <_dtoa_r+0x12f4>
 8003d80:	800b883a 	mov	r5,r16
 8003d84:	000f883a 	mov	r7,zero
 8003d88:	01800284 	movi	r6,10
 8003d8c:	e009883a 	mov	r4,fp
 8003d90:	80066100 	call	8006610 <__multadd>
 8003d94:	1021883a 	mov	r16,r2
 8003d98:	000f883a 	mov	r7,zero
 8003d9c:	01800284 	movi	r6,10
 8003da0:	880b883a 	mov	r5,r17
 8003da4:	e009883a 	mov	r4,fp
 8003da8:	8d002526 	beq	r17,r20,8003e40 <_dtoa_r+0xf9c>
 8003dac:	80066100 	call	8006610 <__multadd>
 8003db0:	a00b883a 	mov	r5,r20
 8003db4:	000f883a 	mov	r7,zero
 8003db8:	01800284 	movi	r6,10
 8003dbc:	e009883a 	mov	r4,fp
 8003dc0:	1023883a 	mov	r17,r2
 8003dc4:	80066100 	call	8006610 <__multadd>
 8003dc8:	1029883a 	mov	r20,r2
 8003dcc:	b027883a 	mov	r19,r22
 8003dd0:	003fc006 	br	8003cd4 <__alt_data_end+0xf8003cd4>
 8003dd4:	9011883a 	mov	r8,r18
 8003dd8:	00800e0e 	bge	zero,r2,8003e14 <_dtoa_r+0xf70>
 8003ddc:	800b883a 	mov	r5,r16
 8003de0:	01800044 	movi	r6,1
 8003de4:	e009883a 	mov	r4,fp
 8003de8:	da001715 	stw	r8,92(sp)
 8003dec:	8006cc00 	call	8006cc0 <__lshift>
 8003df0:	a80b883a 	mov	r5,r21
 8003df4:	1009883a 	mov	r4,r2
 8003df8:	1021883a 	mov	r16,r2
 8003dfc:	8006e080 	call	8006e08 <__mcmp>
 8003e00:	da001717 	ldw	r8,92(sp)
 8003e04:	0081960e 	bge	zero,r2,8004460 <_dtoa_r+0x15bc>
 8003e08:	00800e44 	movi	r2,57
 8003e0c:	40817026 	beq	r8,r2,80043d0 <_dtoa_r+0x152c>
 8003e10:	ba000c44 	addi	r8,r23,49
 8003e14:	8825883a 	mov	r18,r17
 8003e18:	9dc00044 	addi	r23,r19,1
 8003e1c:	9a000005 	stb	r8,0(r19)
 8003e20:	a023883a 	mov	r17,r20
 8003e24:	dc000915 	stw	r16,36(sp)
 8003e28:	003f2406 	br	8003abc <__alt_data_end+0xf8003abc>
 8003e2c:	00800e44 	movi	r2,57
 8003e30:	9011883a 	mov	r8,r18
 8003e34:	90816626 	beq	r18,r2,80043d0 <_dtoa_r+0x152c>
 8003e38:	05bff516 	blt	zero,r22,8003e10 <__alt_data_end+0xf8003e10>
 8003e3c:	003ff506 	br	8003e14 <__alt_data_end+0xf8003e14>
 8003e40:	80066100 	call	8006610 <__multadd>
 8003e44:	1023883a 	mov	r17,r2
 8003e48:	1029883a 	mov	r20,r2
 8003e4c:	003fdf06 	br	8003dcc <__alt_data_end+0xf8003dcc>
 8003e50:	e009883a 	mov	r4,fp
 8003e54:	80065e80 	call	80065e8 <_Bfree>
 8003e58:	00800044 	movi	r2,1
 8003e5c:	003fbc06 	br	8003d50 <__alt_data_end+0xf8003d50>
 8003e60:	a80b883a 	mov	r5,r21
 8003e64:	8009883a 	mov	r4,r16
 8003e68:	8006e080 	call	8006e08 <__mcmp>
 8003e6c:	103edb0e 	bge	r2,zero,80039dc <__alt_data_end+0xf80039dc>
 8003e70:	800b883a 	mov	r5,r16
 8003e74:	000f883a 	mov	r7,zero
 8003e78:	01800284 	movi	r6,10
 8003e7c:	e009883a 	mov	r4,fp
 8003e80:	80066100 	call	8006610 <__multadd>
 8003e84:	1021883a 	mov	r16,r2
 8003e88:	d8800517 	ldw	r2,20(sp)
 8003e8c:	d8c00b17 	ldw	r3,44(sp)
 8003e90:	10bfffc4 	addi	r2,r2,-1
 8003e94:	d8800515 	stw	r2,20(sp)
 8003e98:	183f761e 	bne	r3,zero,8003c74 <__alt_data_end+0xf8003c74>
 8003e9c:	d9000c17 	ldw	r4,48(sp)
 8003ea0:	0101730e 	bge	zero,r4,8004470 <_dtoa_r+0x15cc>
 8003ea4:	d9000615 	stw	r4,24(sp)
 8003ea8:	003ed006 	br	80039ec <__alt_data_end+0xf80039ec>
 8003eac:	00800084 	movi	r2,2
 8003eb0:	3081861e 	bne	r6,r2,80044cc <_dtoa_r+0x1628>
 8003eb4:	d8000b15 	stw	zero,44(sp)
 8003eb8:	003f3c06 	br	8003bac <__alt_data_end+0xf8003bac>
 8003ebc:	dc000917 	ldw	r16,36(sp)
 8003ec0:	003e9206 	br	800390c <__alt_data_end+0xf800390c>
 8003ec4:	d9c00317 	ldw	r7,12(sp)
 8003ec8:	00800084 	movi	r2,2
 8003ecc:	11fec50e 	bge	r2,r7,80039e4 <__alt_data_end+0xf80039e4>
 8003ed0:	d9000617 	ldw	r4,24(sp)
 8003ed4:	20013c1e 	bne	r4,zero,80043c8 <_dtoa_r+0x1524>
 8003ed8:	a80b883a 	mov	r5,r21
 8003edc:	000f883a 	mov	r7,zero
 8003ee0:	01800144 	movi	r6,5
 8003ee4:	e009883a 	mov	r4,fp
 8003ee8:	80066100 	call	8006610 <__multadd>
 8003eec:	100b883a 	mov	r5,r2
 8003ef0:	8009883a 	mov	r4,r16
 8003ef4:	102b883a 	mov	r21,r2
 8003ef8:	8006e080 	call	8006e08 <__mcmp>
 8003efc:	dc000915 	stw	r16,36(sp)
 8003f00:	00bf410e 	bge	zero,r2,8003c08 <__alt_data_end+0xf8003c08>
 8003f04:	d9c00717 	ldw	r7,28(sp)
 8003f08:	00800c44 	movi	r2,49
 8003f0c:	38800005 	stb	r2,0(r7)
 8003f10:	d8800517 	ldw	r2,20(sp)
 8003f14:	3dc00044 	addi	r23,r7,1
 8003f18:	10800044 	addi	r2,r2,1
 8003f1c:	d8800515 	stw	r2,20(sp)
 8003f20:	003f3d06 	br	8003c18 <__alt_data_end+0xf8003c18>
 8003f24:	d9800517 	ldw	r6,20(sp)
 8003f28:	d9c00717 	ldw	r7,28(sp)
 8003f2c:	00800c44 	movi	r2,49
 8003f30:	31800044 	addi	r6,r6,1
 8003f34:	d9800515 	stw	r6,20(sp)
 8003f38:	38800005 	stb	r2,0(r7)
 8003f3c:	003edf06 	br	8003abc <__alt_data_end+0xf8003abc>
 8003f40:	d8000b15 	stw	zero,44(sp)
 8003f44:	003c9f06 	br	80031c4 <__alt_data_end+0xf80031c4>
 8003f48:	903e7e1e 	bne	r18,zero,8003944 <__alt_data_end+0xf8003944>
 8003f4c:	00800434 	movhi	r2,16
 8003f50:	10bfffc4 	addi	r2,r2,-1
 8003f54:	9884703a 	and	r2,r19,r2
 8003f58:	1000ea1e 	bne	r2,zero,8004304 <_dtoa_r+0x1460>
 8003f5c:	9cdffc2c 	andhi	r19,r19,32752
 8003f60:	9800e826 	beq	r19,zero,8004304 <_dtoa_r+0x1460>
 8003f64:	d9c00817 	ldw	r7,32(sp)
 8003f68:	b5800044 	addi	r22,r22,1
 8003f6c:	04c00044 	movi	r19,1
 8003f70:	39c00044 	addi	r7,r7,1
 8003f74:	d9c00815 	stw	r7,32(sp)
 8003f78:	d8800d17 	ldw	r2,52(sp)
 8003f7c:	103e721e 	bne	r2,zero,8003948 <__alt_data_end+0xf8003948>
 8003f80:	00800044 	movi	r2,1
 8003f84:	003e7906 	br	800396c <__alt_data_end+0xf800396c>
 8003f88:	8009883a 	mov	r4,r16
 8003f8c:	800cde00 	call	800cde0 <__floatsidf>
 8003f90:	d9800f17 	ldw	r6,60(sp)
 8003f94:	d9c01017 	ldw	r7,64(sp)
 8003f98:	1009883a 	mov	r4,r2
 8003f9c:	180b883a 	mov	r5,r3
 8003fa0:	800bd4c0 	call	800bd4c <__muldf3>
 8003fa4:	000d883a 	mov	r6,zero
 8003fa8:	01d00734 	movhi	r7,16412
 8003fac:	1009883a 	mov	r4,r2
 8003fb0:	180b883a 	mov	r5,r3
 8003fb4:	800a9600 	call	800a960 <__adddf3>
 8003fb8:	047f3034 	movhi	r17,64704
 8003fbc:	1021883a 	mov	r16,r2
 8003fc0:	1c63883a 	add	r17,r3,r17
 8003fc4:	d9000f17 	ldw	r4,60(sp)
 8003fc8:	d9401017 	ldw	r5,64(sp)
 8003fcc:	000d883a 	mov	r6,zero
 8003fd0:	01d00534 	movhi	r7,16404
 8003fd4:	800c4640 	call	800c464 <__subdf3>
 8003fd8:	800d883a 	mov	r6,r16
 8003fdc:	880f883a 	mov	r7,r17
 8003fe0:	1009883a 	mov	r4,r2
 8003fe4:	180b883a 	mov	r5,r3
 8003fe8:	102b883a 	mov	r21,r2
 8003fec:	1829883a 	mov	r20,r3
 8003ff0:	800bb7c0 	call	800bb7c <__gedf2>
 8003ff4:	00806c16 	blt	zero,r2,80041a8 <_dtoa_r+0x1304>
 8003ff8:	89e0003c 	xorhi	r7,r17,32768
 8003ffc:	800d883a 	mov	r6,r16
 8004000:	a809883a 	mov	r4,r21
 8004004:	a00b883a 	mov	r5,r20
 8004008:	800bc580 	call	800bc58 <__ledf2>
 800400c:	103d7e0e 	bge	r2,zero,8003608 <__alt_data_end+0xf8003608>
 8004010:	002b883a 	mov	r21,zero
 8004014:	0023883a 	mov	r17,zero
 8004018:	003efb06 	br	8003c08 <__alt_data_end+0xf8003c08>
 800401c:	d8800717 	ldw	r2,28(sp)
 8004020:	003bd006 	br	8002f64 <__alt_data_end+0xf8002f64>
 8004024:	d9000a17 	ldw	r4,40(sp)
 8004028:	d9800d17 	ldw	r6,52(sp)
 800402c:	dd400a15 	stw	r21,40(sp)
 8004030:	a905c83a 	sub	r2,r21,r4
 8004034:	308d883a 	add	r6,r6,r2
 8004038:	d9800d15 	stw	r6,52(sp)
 800403c:	002b883a 	mov	r21,zero
 8004040:	003e0606 	br	800385c <__alt_data_end+0xf800385c>
 8004044:	9023883a 	mov	r17,r18
 8004048:	9829883a 	mov	r20,r19
 800404c:	04000084 	movi	r16,2
 8004050:	003c9206 	br	800329c <__alt_data_end+0xf800329c>
 8004054:	04000044 	movi	r16,1
 8004058:	dc000c15 	stw	r16,48(sp)
 800405c:	dc000615 	stw	r16,24(sp)
 8004060:	dc002215 	stw	r16,136(sp)
 8004064:	e0001115 	stw	zero,68(fp)
 8004068:	000b883a 	mov	r5,zero
 800406c:	003c6906 	br	8003214 <__alt_data_end+0xf8003214>
 8004070:	3021883a 	mov	r16,r6
 8004074:	003ffb06 	br	8004064 <__alt_data_end+0xf8004064>
 8004078:	1000021e 	bne	r2,zero,8004084 <_dtoa_r+0x11e0>
 800407c:	4200004c 	andi	r8,r8,1
 8004080:	403e7d1e 	bne	r8,zero,8003a78 <__alt_data_end+0xf8003a78>
 8004084:	01000c04 	movi	r4,48
 8004088:	00000106 	br	8004090 <_dtoa_r+0x11ec>
 800408c:	102f883a 	mov	r23,r2
 8004090:	b8bfffc4 	addi	r2,r23,-1
 8004094:	10c00007 	ldb	r3,0(r2)
 8004098:	193ffc26 	beq	r3,r4,800408c <__alt_data_end+0xf800408c>
 800409c:	003e8706 	br	8003abc <__alt_data_end+0xf8003abc>
 80040a0:	d8800517 	ldw	r2,20(sp)
 80040a4:	00a3c83a 	sub	r17,zero,r2
 80040a8:	8800a426 	beq	r17,zero,800433c <_dtoa_r+0x1498>
 80040ac:	888003cc 	andi	r2,r17,15
 80040b0:	100490fa 	slli	r2,r2,3
 80040b4:	00c200b4 	movhi	r3,2050
 80040b8:	18e41204 	addi	r3,r3,-28600
 80040bc:	1885883a 	add	r2,r3,r2
 80040c0:	11800017 	ldw	r6,0(r2)
 80040c4:	11c00117 	ldw	r7,4(r2)
 80040c8:	9009883a 	mov	r4,r18
 80040cc:	980b883a 	mov	r5,r19
 80040d0:	8823d13a 	srai	r17,r17,4
 80040d4:	800bd4c0 	call	800bd4c <__muldf3>
 80040d8:	d8800f15 	stw	r2,60(sp)
 80040dc:	d8c01015 	stw	r3,64(sp)
 80040e0:	8800e826 	beq	r17,zero,8004484 <_dtoa_r+0x15e0>
 80040e4:	050200b4 	movhi	r20,2050
 80040e8:	a5240804 	addi	r20,r20,-28640
 80040ec:	04000084 	movi	r16,2
 80040f0:	8980004c 	andi	r6,r17,1
 80040f4:	1009883a 	mov	r4,r2
 80040f8:	8823d07a 	srai	r17,r17,1
 80040fc:	180b883a 	mov	r5,r3
 8004100:	30000426 	beq	r6,zero,8004114 <_dtoa_r+0x1270>
 8004104:	a1800017 	ldw	r6,0(r20)
 8004108:	a1c00117 	ldw	r7,4(r20)
 800410c:	84000044 	addi	r16,r16,1
 8004110:	800bd4c0 	call	800bd4c <__muldf3>
 8004114:	a5000204 	addi	r20,r20,8
 8004118:	883ff51e 	bne	r17,zero,80040f0 <__alt_data_end+0xf80040f0>
 800411c:	d8800f15 	stw	r2,60(sp)
 8004120:	d8c01015 	stw	r3,64(sp)
 8004124:	003c7606 	br	8003300 <__alt_data_end+0xf8003300>
 8004128:	00c00c04 	movi	r3,48
 800412c:	10c00005 	stb	r3,0(r2)
 8004130:	d8c00517 	ldw	r3,20(sp)
 8004134:	bd3fffc3 	ldbu	r20,-1(r23)
 8004138:	18c00044 	addi	r3,r3,1
 800413c:	d8c00515 	stw	r3,20(sp)
 8004140:	003db906 	br	8003828 <__alt_data_end+0xf8003828>
 8004144:	89400117 	ldw	r5,4(r17)
 8004148:	e009883a 	mov	r4,fp
 800414c:	80065400 	call	8006540 <_Balloc>
 8004150:	89800417 	ldw	r6,16(r17)
 8004154:	89400304 	addi	r5,r17,12
 8004158:	11000304 	addi	r4,r2,12
 800415c:	31800084 	addi	r6,r6,2
 8004160:	318d883a 	add	r6,r6,r6
 8004164:	318d883a 	add	r6,r6,r6
 8004168:	1027883a 	mov	r19,r2
 800416c:	80061740 	call	8006174 <memcpy>
 8004170:	01800044 	movi	r6,1
 8004174:	980b883a 	mov	r5,r19
 8004178:	e009883a 	mov	r4,fp
 800417c:	8006cc00 	call	8006cc0 <__lshift>
 8004180:	1029883a 	mov	r20,r2
 8004184:	003ecc06 	br	8003cb8 <__alt_data_end+0xf8003cb8>
 8004188:	00800e44 	movi	r2,57
 800418c:	90809026 	beq	r18,r2,80043d0 <_dtoa_r+0x152c>
 8004190:	92000044 	addi	r8,r18,1
 8004194:	003f1f06 	br	8003e14 <__alt_data_end+0xf8003e14>
 8004198:	9011883a 	mov	r8,r18
 800419c:	8825883a 	mov	r18,r17
 80041a0:	a023883a 	mov	r17,r20
 80041a4:	003e2906 	br	8003a4c <__alt_data_end+0xf8003a4c>
 80041a8:	002b883a 	mov	r21,zero
 80041ac:	0023883a 	mov	r17,zero
 80041b0:	003f5406 	br	8003f04 <__alt_data_end+0xf8003f04>
 80041b4:	61bfffc4 	addi	r6,r12,-1
 80041b8:	300490fa 	slli	r2,r6,3
 80041bc:	00c200b4 	movhi	r3,2050
 80041c0:	18e41204 	addi	r3,r3,-28600
 80041c4:	1885883a 	add	r2,r3,r2
 80041c8:	11000017 	ldw	r4,0(r2)
 80041cc:	11400117 	ldw	r5,4(r2)
 80041d0:	d8800717 	ldw	r2,28(sp)
 80041d4:	880f883a 	mov	r7,r17
 80041d8:	d9801215 	stw	r6,72(sp)
 80041dc:	800d883a 	mov	r6,r16
 80041e0:	db001615 	stw	r12,88(sp)
 80041e4:	15c00044 	addi	r23,r2,1
 80041e8:	800bd4c0 	call	800bd4c <__muldf3>
 80041ec:	d9401017 	ldw	r5,64(sp)
 80041f0:	d9000f17 	ldw	r4,60(sp)
 80041f4:	d8c01515 	stw	r3,84(sp)
 80041f8:	d8801415 	stw	r2,80(sp)
 80041fc:	800cd600 	call	800cd60 <__fixdfsi>
 8004200:	1009883a 	mov	r4,r2
 8004204:	1021883a 	mov	r16,r2
 8004208:	800cde00 	call	800cde0 <__floatsidf>
 800420c:	d9000f17 	ldw	r4,60(sp)
 8004210:	d9401017 	ldw	r5,64(sp)
 8004214:	100d883a 	mov	r6,r2
 8004218:	180f883a 	mov	r7,r3
 800421c:	800c4640 	call	800c464 <__subdf3>
 8004220:	1829883a 	mov	r20,r3
 8004224:	d8c00717 	ldw	r3,28(sp)
 8004228:	84000c04 	addi	r16,r16,48
 800422c:	1023883a 	mov	r17,r2
 8004230:	1c000005 	stb	r16,0(r3)
 8004234:	db001617 	ldw	r12,88(sp)
 8004238:	00800044 	movi	r2,1
 800423c:	60802226 	beq	r12,r2,80042c8 <_dtoa_r+0x1424>
 8004240:	d9c00717 	ldw	r7,28(sp)
 8004244:	8805883a 	mov	r2,r17
 8004248:	b82b883a 	mov	r21,r23
 800424c:	3b19883a 	add	r12,r7,r12
 8004250:	6023883a 	mov	r17,r12
 8004254:	a007883a 	mov	r3,r20
 8004258:	dc800f15 	stw	r18,60(sp)
 800425c:	000d883a 	mov	r6,zero
 8004260:	01d00934 	movhi	r7,16420
 8004264:	1009883a 	mov	r4,r2
 8004268:	180b883a 	mov	r5,r3
 800426c:	800bd4c0 	call	800bd4c <__muldf3>
 8004270:	180b883a 	mov	r5,r3
 8004274:	1009883a 	mov	r4,r2
 8004278:	1829883a 	mov	r20,r3
 800427c:	1025883a 	mov	r18,r2
 8004280:	800cd600 	call	800cd60 <__fixdfsi>
 8004284:	1009883a 	mov	r4,r2
 8004288:	1021883a 	mov	r16,r2
 800428c:	800cde00 	call	800cde0 <__floatsidf>
 8004290:	100d883a 	mov	r6,r2
 8004294:	180f883a 	mov	r7,r3
 8004298:	9009883a 	mov	r4,r18
 800429c:	a00b883a 	mov	r5,r20
 80042a0:	84000c04 	addi	r16,r16,48
 80042a4:	800c4640 	call	800c464 <__subdf3>
 80042a8:	ad400044 	addi	r21,r21,1
 80042ac:	ac3fffc5 	stb	r16,-1(r21)
 80042b0:	ac7fea1e 	bne	r21,r17,800425c <__alt_data_end+0xf800425c>
 80042b4:	1023883a 	mov	r17,r2
 80042b8:	d8801217 	ldw	r2,72(sp)
 80042bc:	dc800f17 	ldw	r18,60(sp)
 80042c0:	1829883a 	mov	r20,r3
 80042c4:	b8af883a 	add	r23,r23,r2
 80042c8:	d9001417 	ldw	r4,80(sp)
 80042cc:	d9401517 	ldw	r5,84(sp)
 80042d0:	000d883a 	mov	r6,zero
 80042d4:	01cff834 	movhi	r7,16352
 80042d8:	800a9600 	call	800a960 <__adddf3>
 80042dc:	880d883a 	mov	r6,r17
 80042e0:	a00f883a 	mov	r7,r20
 80042e4:	1009883a 	mov	r4,r2
 80042e8:	180b883a 	mov	r5,r3
 80042ec:	800bc580 	call	800bc58 <__ledf2>
 80042f0:	10003e0e 	bge	r2,zero,80043ec <_dtoa_r+0x1548>
 80042f4:	d9001317 	ldw	r4,76(sp)
 80042f8:	bd3fffc3 	ldbu	r20,-1(r23)
 80042fc:	d9000515 	stw	r4,20(sp)
 8004300:	003d3b06 	br	80037f0 <__alt_data_end+0xf80037f0>
 8004304:	0027883a 	mov	r19,zero
 8004308:	003f1b06 	br	8003f78 <__alt_data_end+0xf8003f78>
 800430c:	d8800817 	ldw	r2,32(sp)
 8004310:	11e9c83a 	sub	r20,r2,r7
 8004314:	0005883a 	mov	r2,zero
 8004318:	003d5406 	br	800386c <__alt_data_end+0xf800386c>
 800431c:	00800044 	movi	r2,1
 8004320:	003dc706 	br	8003a40 <__alt_data_end+0xf8003a40>
 8004324:	d8c00217 	ldw	r3,8(sp)
 8004328:	00800d84 	movi	r2,54
 800432c:	dd400a17 	ldw	r21,40(sp)
 8004330:	10c5c83a 	sub	r2,r2,r3
 8004334:	dd000817 	ldw	r20,32(sp)
 8004338:	003d4c06 	br	800386c <__alt_data_end+0xf800386c>
 800433c:	dc800f15 	stw	r18,60(sp)
 8004340:	dcc01015 	stw	r19,64(sp)
 8004344:	04000084 	movi	r16,2
 8004348:	003bed06 	br	8003300 <__alt_data_end+0xf8003300>
 800434c:	d9000617 	ldw	r4,24(sp)
 8004350:	203f0d26 	beq	r4,zero,8003f88 <__alt_data_end+0xf8003f88>
 8004354:	d9800c17 	ldw	r6,48(sp)
 8004358:	01bcab0e 	bge	zero,r6,8003608 <__alt_data_end+0xf8003608>
 800435c:	d9401017 	ldw	r5,64(sp)
 8004360:	d9000f17 	ldw	r4,60(sp)
 8004364:	000d883a 	mov	r6,zero
 8004368:	01d00934 	movhi	r7,16420
 800436c:	800bd4c0 	call	800bd4c <__muldf3>
 8004370:	81000044 	addi	r4,r16,1
 8004374:	d8800f15 	stw	r2,60(sp)
 8004378:	d8c01015 	stw	r3,64(sp)
 800437c:	800cde00 	call	800cde0 <__floatsidf>
 8004380:	d9800f17 	ldw	r6,60(sp)
 8004384:	d9c01017 	ldw	r7,64(sp)
 8004388:	1009883a 	mov	r4,r2
 800438c:	180b883a 	mov	r5,r3
 8004390:	800bd4c0 	call	800bd4c <__muldf3>
 8004394:	01d00734 	movhi	r7,16412
 8004398:	000d883a 	mov	r6,zero
 800439c:	1009883a 	mov	r4,r2
 80043a0:	180b883a 	mov	r5,r3
 80043a4:	800a9600 	call	800a960 <__adddf3>
 80043a8:	d9c00517 	ldw	r7,20(sp)
 80043ac:	047f3034 	movhi	r17,64704
 80043b0:	1021883a 	mov	r16,r2
 80043b4:	39ffffc4 	addi	r7,r7,-1
 80043b8:	d9c01315 	stw	r7,76(sp)
 80043bc:	1c63883a 	add	r17,r3,r17
 80043c0:	db000c17 	ldw	r12,48(sp)
 80043c4:	003bea06 	br	8003370 <__alt_data_end+0xf8003370>
 80043c8:	dc000915 	stw	r16,36(sp)
 80043cc:	003e0e06 	br	8003c08 <__alt_data_end+0xf8003c08>
 80043d0:	01000e44 	movi	r4,57
 80043d4:	8825883a 	mov	r18,r17
 80043d8:	9dc00044 	addi	r23,r19,1
 80043dc:	99000005 	stb	r4,0(r19)
 80043e0:	a023883a 	mov	r17,r20
 80043e4:	dc000915 	stw	r16,36(sp)
 80043e8:	003da406 	br	8003a7c <__alt_data_end+0xf8003a7c>
 80043ec:	d9801417 	ldw	r6,80(sp)
 80043f0:	d9c01517 	ldw	r7,84(sp)
 80043f4:	0009883a 	mov	r4,zero
 80043f8:	014ff834 	movhi	r5,16352
 80043fc:	800c4640 	call	800c464 <__subdf3>
 8004400:	880d883a 	mov	r6,r17
 8004404:	a00f883a 	mov	r7,r20
 8004408:	1009883a 	mov	r4,r2
 800440c:	180b883a 	mov	r5,r3
 8004410:	800bb7c0 	call	800bb7c <__gedf2>
 8004414:	00bc7c0e 	bge	zero,r2,8003608 <__alt_data_end+0xf8003608>
 8004418:	01000c04 	movi	r4,48
 800441c:	00000106 	br	8004424 <_dtoa_r+0x1580>
 8004420:	102f883a 	mov	r23,r2
 8004424:	b8bfffc4 	addi	r2,r23,-1
 8004428:	10c00007 	ldb	r3,0(r2)
 800442c:	193ffc26 	beq	r3,r4,8004420 <__alt_data_end+0xf8004420>
 8004430:	d9801317 	ldw	r6,76(sp)
 8004434:	d9800515 	stw	r6,20(sp)
 8004438:	003c4406 	br	800354c <__alt_data_end+0xf800354c>
 800443c:	d9801317 	ldw	r6,76(sp)
 8004440:	d9800515 	stw	r6,20(sp)
 8004444:	003cea06 	br	80037f0 <__alt_data_end+0xf80037f0>
 8004448:	dd800f17 	ldw	r22,60(sp)
 800444c:	dcc01017 	ldw	r19,64(sp)
 8004450:	dc801217 	ldw	r18,72(sp)
 8004454:	003c6c06 	br	8003608 <__alt_data_end+0xf8003608>
 8004458:	903e031e 	bne	r18,zero,8003c68 <__alt_data_end+0xf8003c68>
 800445c:	003ebb06 	br	8003f4c <__alt_data_end+0xf8003f4c>
 8004460:	103e6c1e 	bne	r2,zero,8003e14 <__alt_data_end+0xf8003e14>
 8004464:	4080004c 	andi	r2,r8,1
 8004468:	103e6a26 	beq	r2,zero,8003e14 <__alt_data_end+0xf8003e14>
 800446c:	003e6606 	br	8003e08 <__alt_data_end+0xf8003e08>
 8004470:	d8c00317 	ldw	r3,12(sp)
 8004474:	00800084 	movi	r2,2
 8004478:	10c02916 	blt	r2,r3,8004520 <_dtoa_r+0x167c>
 800447c:	d9000c17 	ldw	r4,48(sp)
 8004480:	003e8806 	br	8003ea4 <__alt_data_end+0xf8003ea4>
 8004484:	04000084 	movi	r16,2
 8004488:	003b9d06 	br	8003300 <__alt_data_end+0xf8003300>
 800448c:	d9001317 	ldw	r4,76(sp)
 8004490:	d9000515 	stw	r4,20(sp)
 8004494:	003cd606 	br	80037f0 <__alt_data_end+0xf80037f0>
 8004498:	d8801317 	ldw	r2,76(sp)
 800449c:	d8800515 	stw	r2,20(sp)
 80044a0:	003c2a06 	br	800354c <__alt_data_end+0xf800354c>
 80044a4:	d9800317 	ldw	r6,12(sp)
 80044a8:	00800084 	movi	r2,2
 80044ac:	11801516 	blt	r2,r6,8004504 <_dtoa_r+0x1660>
 80044b0:	d9c00c17 	ldw	r7,48(sp)
 80044b4:	d9c00615 	stw	r7,24(sp)
 80044b8:	003df706 	br	8003c98 <__alt_data_end+0xf8003c98>
 80044bc:	193d3926 	beq	r3,r4,80039a4 <__alt_data_end+0xf80039a4>
 80044c0:	00c00f04 	movi	r3,60
 80044c4:	1885c83a 	sub	r2,r3,r2
 80044c8:	003ddf06 	br	8003c48 <__alt_data_end+0xf8003c48>
 80044cc:	e009883a 	mov	r4,fp
 80044d0:	e0001115 	stw	zero,68(fp)
 80044d4:	000b883a 	mov	r5,zero
 80044d8:	80065400 	call	8006540 <_Balloc>
 80044dc:	d8800715 	stw	r2,28(sp)
 80044e0:	d8c00717 	ldw	r3,28(sp)
 80044e4:	00bfffc4 	movi	r2,-1
 80044e8:	01000044 	movi	r4,1
 80044ec:	d8800c15 	stw	r2,48(sp)
 80044f0:	e0c01015 	stw	r3,64(fp)
 80044f4:	d9000b15 	stw	r4,44(sp)
 80044f8:	d8800615 	stw	r2,24(sp)
 80044fc:	d8002215 	stw	zero,136(sp)
 8004500:	003c4106 	br	8003608 <__alt_data_end+0xf8003608>
 8004504:	d8c00c17 	ldw	r3,48(sp)
 8004508:	d8c00615 	stw	r3,24(sp)
 800450c:	003e7006 	br	8003ed0 <__alt_data_end+0xf8003ed0>
 8004510:	04400044 	movi	r17,1
 8004514:	003b2006 	br	8003198 <__alt_data_end+0xf8003198>
 8004518:	000b883a 	mov	r5,zero
 800451c:	003b3d06 	br	8003214 <__alt_data_end+0xf8003214>
 8004520:	d8800c17 	ldw	r2,48(sp)
 8004524:	d8800615 	stw	r2,24(sp)
 8004528:	003e6906 	br	8003ed0 <__alt_data_end+0xf8003ed0>

0800452c <__sflush_r>:
 800452c:	2880030b 	ldhu	r2,12(r5)
 8004530:	defffb04 	addi	sp,sp,-20
 8004534:	dcc00315 	stw	r19,12(sp)
 8004538:	dc400115 	stw	r17,4(sp)
 800453c:	dfc00415 	stw	ra,16(sp)
 8004540:	dc800215 	stw	r18,8(sp)
 8004544:	dc000015 	stw	r16,0(sp)
 8004548:	10c0020c 	andi	r3,r2,8
 800454c:	2823883a 	mov	r17,r5
 8004550:	2027883a 	mov	r19,r4
 8004554:	1800311e 	bne	r3,zero,800461c <__sflush_r+0xf0>
 8004558:	28c00117 	ldw	r3,4(r5)
 800455c:	10820014 	ori	r2,r2,2048
 8004560:	2880030d 	sth	r2,12(r5)
 8004564:	00c04b0e 	bge	zero,r3,8004694 <__sflush_r+0x168>
 8004568:	8a000a17 	ldw	r8,40(r17)
 800456c:	40002326 	beq	r8,zero,80045fc <__sflush_r+0xd0>
 8004570:	9c000017 	ldw	r16,0(r19)
 8004574:	10c4000c 	andi	r3,r2,4096
 8004578:	98000015 	stw	zero,0(r19)
 800457c:	18004826 	beq	r3,zero,80046a0 <__sflush_r+0x174>
 8004580:	89801417 	ldw	r6,80(r17)
 8004584:	10c0010c 	andi	r3,r2,4
 8004588:	18000626 	beq	r3,zero,80045a4 <__sflush_r+0x78>
 800458c:	88c00117 	ldw	r3,4(r17)
 8004590:	88800c17 	ldw	r2,48(r17)
 8004594:	30cdc83a 	sub	r6,r6,r3
 8004598:	10000226 	beq	r2,zero,80045a4 <__sflush_r+0x78>
 800459c:	88800f17 	ldw	r2,60(r17)
 80045a0:	308dc83a 	sub	r6,r6,r2
 80045a4:	89400717 	ldw	r5,28(r17)
 80045a8:	000f883a 	mov	r7,zero
 80045ac:	9809883a 	mov	r4,r19
 80045b0:	403ee83a 	callr	r8
 80045b4:	00ffffc4 	movi	r3,-1
 80045b8:	10c04426 	beq	r2,r3,80046cc <__sflush_r+0x1a0>
 80045bc:	88c0030b 	ldhu	r3,12(r17)
 80045c0:	89000417 	ldw	r4,16(r17)
 80045c4:	88000115 	stw	zero,4(r17)
 80045c8:	197dffcc 	andi	r5,r3,63487
 80045cc:	8940030d 	sth	r5,12(r17)
 80045d0:	89000015 	stw	r4,0(r17)
 80045d4:	18c4000c 	andi	r3,r3,4096
 80045d8:	18002c1e 	bne	r3,zero,800468c <__sflush_r+0x160>
 80045dc:	89400c17 	ldw	r5,48(r17)
 80045e0:	9c000015 	stw	r16,0(r19)
 80045e4:	28000526 	beq	r5,zero,80045fc <__sflush_r+0xd0>
 80045e8:	88801004 	addi	r2,r17,64
 80045ec:	28800226 	beq	r5,r2,80045f8 <__sflush_r+0xcc>
 80045f0:	9809883a 	mov	r4,r19
 80045f4:	8004c980 	call	8004c98 <_free_r>
 80045f8:	88000c15 	stw	zero,48(r17)
 80045fc:	0005883a 	mov	r2,zero
 8004600:	dfc00417 	ldw	ra,16(sp)
 8004604:	dcc00317 	ldw	r19,12(sp)
 8004608:	dc800217 	ldw	r18,8(sp)
 800460c:	dc400117 	ldw	r17,4(sp)
 8004610:	dc000017 	ldw	r16,0(sp)
 8004614:	dec00504 	addi	sp,sp,20
 8004618:	f800283a 	ret
 800461c:	2c800417 	ldw	r18,16(r5)
 8004620:	903ff626 	beq	r18,zero,80045fc <__alt_data_end+0xf80045fc>
 8004624:	2c000017 	ldw	r16,0(r5)
 8004628:	108000cc 	andi	r2,r2,3
 800462c:	2c800015 	stw	r18,0(r5)
 8004630:	84a1c83a 	sub	r16,r16,r18
 8004634:	1000131e 	bne	r2,zero,8004684 <__sflush_r+0x158>
 8004638:	28800517 	ldw	r2,20(r5)
 800463c:	88800215 	stw	r2,8(r17)
 8004640:	04000316 	blt	zero,r16,8004650 <__sflush_r+0x124>
 8004644:	003fed06 	br	80045fc <__alt_data_end+0xf80045fc>
 8004648:	90a5883a 	add	r18,r18,r2
 800464c:	043feb0e 	bge	zero,r16,80045fc <__alt_data_end+0xf80045fc>
 8004650:	88800917 	ldw	r2,36(r17)
 8004654:	89400717 	ldw	r5,28(r17)
 8004658:	800f883a 	mov	r7,r16
 800465c:	900d883a 	mov	r6,r18
 8004660:	9809883a 	mov	r4,r19
 8004664:	103ee83a 	callr	r2
 8004668:	80a1c83a 	sub	r16,r16,r2
 800466c:	00bff616 	blt	zero,r2,8004648 <__alt_data_end+0xf8004648>
 8004670:	88c0030b 	ldhu	r3,12(r17)
 8004674:	00bfffc4 	movi	r2,-1
 8004678:	18c01014 	ori	r3,r3,64
 800467c:	88c0030d 	sth	r3,12(r17)
 8004680:	003fdf06 	br	8004600 <__alt_data_end+0xf8004600>
 8004684:	0005883a 	mov	r2,zero
 8004688:	003fec06 	br	800463c <__alt_data_end+0xf800463c>
 800468c:	88801415 	stw	r2,80(r17)
 8004690:	003fd206 	br	80045dc <__alt_data_end+0xf80045dc>
 8004694:	28c00f17 	ldw	r3,60(r5)
 8004698:	00ffb316 	blt	zero,r3,8004568 <__alt_data_end+0xf8004568>
 800469c:	003fd706 	br	80045fc <__alt_data_end+0xf80045fc>
 80046a0:	89400717 	ldw	r5,28(r17)
 80046a4:	000d883a 	mov	r6,zero
 80046a8:	01c00044 	movi	r7,1
 80046ac:	9809883a 	mov	r4,r19
 80046b0:	403ee83a 	callr	r8
 80046b4:	100d883a 	mov	r6,r2
 80046b8:	00bfffc4 	movi	r2,-1
 80046bc:	30801426 	beq	r6,r2,8004710 <__sflush_r+0x1e4>
 80046c0:	8880030b 	ldhu	r2,12(r17)
 80046c4:	8a000a17 	ldw	r8,40(r17)
 80046c8:	003fae06 	br	8004584 <__alt_data_end+0xf8004584>
 80046cc:	98c00017 	ldw	r3,0(r19)
 80046d0:	183fba26 	beq	r3,zero,80045bc <__alt_data_end+0xf80045bc>
 80046d4:	01000744 	movi	r4,29
 80046d8:	19000626 	beq	r3,r4,80046f4 <__sflush_r+0x1c8>
 80046dc:	01000584 	movi	r4,22
 80046e0:	19000426 	beq	r3,r4,80046f4 <__sflush_r+0x1c8>
 80046e4:	88c0030b 	ldhu	r3,12(r17)
 80046e8:	18c01014 	ori	r3,r3,64
 80046ec:	88c0030d 	sth	r3,12(r17)
 80046f0:	003fc306 	br	8004600 <__alt_data_end+0xf8004600>
 80046f4:	8880030b 	ldhu	r2,12(r17)
 80046f8:	88c00417 	ldw	r3,16(r17)
 80046fc:	88000115 	stw	zero,4(r17)
 8004700:	10bdffcc 	andi	r2,r2,63487
 8004704:	8880030d 	sth	r2,12(r17)
 8004708:	88c00015 	stw	r3,0(r17)
 800470c:	003fb306 	br	80045dc <__alt_data_end+0xf80045dc>
 8004710:	98800017 	ldw	r2,0(r19)
 8004714:	103fea26 	beq	r2,zero,80046c0 <__alt_data_end+0xf80046c0>
 8004718:	00c00744 	movi	r3,29
 800471c:	10c00226 	beq	r2,r3,8004728 <__sflush_r+0x1fc>
 8004720:	00c00584 	movi	r3,22
 8004724:	10c0031e 	bne	r2,r3,8004734 <__sflush_r+0x208>
 8004728:	9c000015 	stw	r16,0(r19)
 800472c:	0005883a 	mov	r2,zero
 8004730:	003fb306 	br	8004600 <__alt_data_end+0xf8004600>
 8004734:	88c0030b 	ldhu	r3,12(r17)
 8004738:	3005883a 	mov	r2,r6
 800473c:	18c01014 	ori	r3,r3,64
 8004740:	88c0030d 	sth	r3,12(r17)
 8004744:	003fae06 	br	8004600 <__alt_data_end+0xf8004600>

08004748 <_fflush_r>:
 8004748:	defffd04 	addi	sp,sp,-12
 800474c:	dc000115 	stw	r16,4(sp)
 8004750:	dfc00215 	stw	ra,8(sp)
 8004754:	2021883a 	mov	r16,r4
 8004758:	20000226 	beq	r4,zero,8004764 <_fflush_r+0x1c>
 800475c:	20800e17 	ldw	r2,56(r4)
 8004760:	10000c26 	beq	r2,zero,8004794 <_fflush_r+0x4c>
 8004764:	2880030f 	ldh	r2,12(r5)
 8004768:	1000051e 	bne	r2,zero,8004780 <_fflush_r+0x38>
 800476c:	0005883a 	mov	r2,zero
 8004770:	dfc00217 	ldw	ra,8(sp)
 8004774:	dc000117 	ldw	r16,4(sp)
 8004778:	dec00304 	addi	sp,sp,12
 800477c:	f800283a 	ret
 8004780:	8009883a 	mov	r4,r16
 8004784:	dfc00217 	ldw	ra,8(sp)
 8004788:	dc000117 	ldw	r16,4(sp)
 800478c:	dec00304 	addi	sp,sp,12
 8004790:	800452c1 	jmpi	800452c <__sflush_r>
 8004794:	d9400015 	stw	r5,0(sp)
 8004798:	8004b240 	call	8004b24 <__sinit>
 800479c:	d9400017 	ldw	r5,0(sp)
 80047a0:	003ff006 	br	8004764 <__alt_data_end+0xf8004764>

080047a4 <fflush>:
 80047a4:	20000526 	beq	r4,zero,80047bc <fflush+0x18>
 80047a8:	008200b4 	movhi	r2,2050
 80047ac:	10ab9f04 	addi	r2,r2,-20868
 80047b0:	200b883a 	mov	r5,r4
 80047b4:	11000017 	ldw	r4,0(r2)
 80047b8:	80047481 	jmpi	8004748 <_fflush_r>
 80047bc:	008200b4 	movhi	r2,2050
 80047c0:	10ab9e04 	addi	r2,r2,-20872
 80047c4:	11000017 	ldw	r4,0(r2)
 80047c8:	01420034 	movhi	r5,2048
 80047cc:	2951d204 	addi	r5,r5,18248
 80047d0:	80055281 	jmpi	8005528 <_fwalk_reent>

080047d4 <__fp_unlock>:
 80047d4:	0005883a 	mov	r2,zero
 80047d8:	f800283a 	ret

080047dc <_cleanup_r>:
 80047dc:	01420074 	movhi	r5,2049
 80047e0:	29655004 	addi	r5,r5,-27328
 80047e4:	80055281 	jmpi	8005528 <_fwalk_reent>

080047e8 <__sinit.part.1>:
 80047e8:	defff704 	addi	sp,sp,-36
 80047ec:	00c20034 	movhi	r3,2048
 80047f0:	dfc00815 	stw	ra,32(sp)
 80047f4:	ddc00715 	stw	r23,28(sp)
 80047f8:	dd800615 	stw	r22,24(sp)
 80047fc:	dd400515 	stw	r21,20(sp)
 8004800:	dd000415 	stw	r20,16(sp)
 8004804:	dcc00315 	stw	r19,12(sp)
 8004808:	dc800215 	stw	r18,8(sp)
 800480c:	dc400115 	stw	r17,4(sp)
 8004810:	dc000015 	stw	r16,0(sp)
 8004814:	18d1f704 	addi	r3,r3,18396
 8004818:	24000117 	ldw	r16,4(r4)
 800481c:	20c00f15 	stw	r3,60(r4)
 8004820:	2080bb04 	addi	r2,r4,748
 8004824:	00c000c4 	movi	r3,3
 8004828:	20c0b915 	stw	r3,740(r4)
 800482c:	2080ba15 	stw	r2,744(r4)
 8004830:	2000b815 	stw	zero,736(r4)
 8004834:	05c00204 	movi	r23,8
 8004838:	00800104 	movi	r2,4
 800483c:	2025883a 	mov	r18,r4
 8004840:	b80d883a 	mov	r6,r23
 8004844:	81001704 	addi	r4,r16,92
 8004848:	000b883a 	mov	r5,zero
 800484c:	80000015 	stw	zero,0(r16)
 8004850:	80000115 	stw	zero,4(r16)
 8004854:	80000215 	stw	zero,8(r16)
 8004858:	8080030d 	sth	r2,12(r16)
 800485c:	80001915 	stw	zero,100(r16)
 8004860:	8000038d 	sth	zero,14(r16)
 8004864:	80000415 	stw	zero,16(r16)
 8004868:	80000515 	stw	zero,20(r16)
 800486c:	80000615 	stw	zero,24(r16)
 8004870:	80064180 	call	8006418 <memset>
 8004874:	05820034 	movhi	r22,2048
 8004878:	94400217 	ldw	r17,8(r18)
 800487c:	05420034 	movhi	r21,2048
 8004880:	05020034 	movhi	r20,2048
 8004884:	04c20034 	movhi	r19,2048
 8004888:	b59eda04 	addi	r22,r22,31592
 800488c:	ad5ef104 	addi	r21,r21,31684
 8004890:	a51f1004 	addi	r20,r20,31808
 8004894:	9cdf2704 	addi	r19,r19,31900
 8004898:	85800815 	stw	r22,32(r16)
 800489c:	85400915 	stw	r21,36(r16)
 80048a0:	85000a15 	stw	r20,40(r16)
 80048a4:	84c00b15 	stw	r19,44(r16)
 80048a8:	84000715 	stw	r16,28(r16)
 80048ac:	00800284 	movi	r2,10
 80048b0:	8880030d 	sth	r2,12(r17)
 80048b4:	00800044 	movi	r2,1
 80048b8:	b80d883a 	mov	r6,r23
 80048bc:	89001704 	addi	r4,r17,92
 80048c0:	000b883a 	mov	r5,zero
 80048c4:	88000015 	stw	zero,0(r17)
 80048c8:	88000115 	stw	zero,4(r17)
 80048cc:	88000215 	stw	zero,8(r17)
 80048d0:	88001915 	stw	zero,100(r17)
 80048d4:	8880038d 	sth	r2,14(r17)
 80048d8:	88000415 	stw	zero,16(r17)
 80048dc:	88000515 	stw	zero,20(r17)
 80048e0:	88000615 	stw	zero,24(r17)
 80048e4:	80064180 	call	8006418 <memset>
 80048e8:	94000317 	ldw	r16,12(r18)
 80048ec:	00800484 	movi	r2,18
 80048f0:	8c400715 	stw	r17,28(r17)
 80048f4:	8d800815 	stw	r22,32(r17)
 80048f8:	8d400915 	stw	r21,36(r17)
 80048fc:	8d000a15 	stw	r20,40(r17)
 8004900:	8cc00b15 	stw	r19,44(r17)
 8004904:	8080030d 	sth	r2,12(r16)
 8004908:	00800084 	movi	r2,2
 800490c:	80000015 	stw	zero,0(r16)
 8004910:	80000115 	stw	zero,4(r16)
 8004914:	80000215 	stw	zero,8(r16)
 8004918:	80001915 	stw	zero,100(r16)
 800491c:	8080038d 	sth	r2,14(r16)
 8004920:	80000415 	stw	zero,16(r16)
 8004924:	80000515 	stw	zero,20(r16)
 8004928:	80000615 	stw	zero,24(r16)
 800492c:	b80d883a 	mov	r6,r23
 8004930:	000b883a 	mov	r5,zero
 8004934:	81001704 	addi	r4,r16,92
 8004938:	80064180 	call	8006418 <memset>
 800493c:	00800044 	movi	r2,1
 8004940:	84000715 	stw	r16,28(r16)
 8004944:	85800815 	stw	r22,32(r16)
 8004948:	85400915 	stw	r21,36(r16)
 800494c:	85000a15 	stw	r20,40(r16)
 8004950:	84c00b15 	stw	r19,44(r16)
 8004954:	90800e15 	stw	r2,56(r18)
 8004958:	dfc00817 	ldw	ra,32(sp)
 800495c:	ddc00717 	ldw	r23,28(sp)
 8004960:	dd800617 	ldw	r22,24(sp)
 8004964:	dd400517 	ldw	r21,20(sp)
 8004968:	dd000417 	ldw	r20,16(sp)
 800496c:	dcc00317 	ldw	r19,12(sp)
 8004970:	dc800217 	ldw	r18,8(sp)
 8004974:	dc400117 	ldw	r17,4(sp)
 8004978:	dc000017 	ldw	r16,0(sp)
 800497c:	dec00904 	addi	sp,sp,36
 8004980:	f800283a 	ret

08004984 <__fp_lock>:
 8004984:	0005883a 	mov	r2,zero
 8004988:	f800283a 	ret

0800498c <__sfmoreglue>:
 800498c:	defffc04 	addi	sp,sp,-16
 8004990:	dc400115 	stw	r17,4(sp)
 8004994:	2c7fffc4 	addi	r17,r5,-1
 8004998:	8c401a24 	muli	r17,r17,104
 800499c:	dc800215 	stw	r18,8(sp)
 80049a0:	2825883a 	mov	r18,r5
 80049a4:	89401d04 	addi	r5,r17,116
 80049a8:	dc000015 	stw	r16,0(sp)
 80049ac:	dfc00315 	stw	ra,12(sp)
 80049b0:	80058840 	call	8005884 <_malloc_r>
 80049b4:	1021883a 	mov	r16,r2
 80049b8:	10000726 	beq	r2,zero,80049d8 <__sfmoreglue+0x4c>
 80049bc:	11000304 	addi	r4,r2,12
 80049c0:	10000015 	stw	zero,0(r2)
 80049c4:	14800115 	stw	r18,4(r2)
 80049c8:	11000215 	stw	r4,8(r2)
 80049cc:	89801a04 	addi	r6,r17,104
 80049d0:	000b883a 	mov	r5,zero
 80049d4:	80064180 	call	8006418 <memset>
 80049d8:	8005883a 	mov	r2,r16
 80049dc:	dfc00317 	ldw	ra,12(sp)
 80049e0:	dc800217 	ldw	r18,8(sp)
 80049e4:	dc400117 	ldw	r17,4(sp)
 80049e8:	dc000017 	ldw	r16,0(sp)
 80049ec:	dec00404 	addi	sp,sp,16
 80049f0:	f800283a 	ret

080049f4 <__sfp>:
 80049f4:	defffb04 	addi	sp,sp,-20
 80049f8:	dc000015 	stw	r16,0(sp)
 80049fc:	040200b4 	movhi	r16,2050
 8004a00:	842b9e04 	addi	r16,r16,-20872
 8004a04:	dcc00315 	stw	r19,12(sp)
 8004a08:	2027883a 	mov	r19,r4
 8004a0c:	81000017 	ldw	r4,0(r16)
 8004a10:	dfc00415 	stw	ra,16(sp)
 8004a14:	dc800215 	stw	r18,8(sp)
 8004a18:	20800e17 	ldw	r2,56(r4)
 8004a1c:	dc400115 	stw	r17,4(sp)
 8004a20:	1000021e 	bne	r2,zero,8004a2c <__sfp+0x38>
 8004a24:	80047e80 	call	80047e8 <__sinit.part.1>
 8004a28:	81000017 	ldw	r4,0(r16)
 8004a2c:	2480b804 	addi	r18,r4,736
 8004a30:	047fffc4 	movi	r17,-1
 8004a34:	91000117 	ldw	r4,4(r18)
 8004a38:	94000217 	ldw	r16,8(r18)
 8004a3c:	213fffc4 	addi	r4,r4,-1
 8004a40:	20000a16 	blt	r4,zero,8004a6c <__sfp+0x78>
 8004a44:	8080030f 	ldh	r2,12(r16)
 8004a48:	10000c26 	beq	r2,zero,8004a7c <__sfp+0x88>
 8004a4c:	80c01d04 	addi	r3,r16,116
 8004a50:	00000206 	br	8004a5c <__sfp+0x68>
 8004a54:	18bfe60f 	ldh	r2,-104(r3)
 8004a58:	10000826 	beq	r2,zero,8004a7c <__sfp+0x88>
 8004a5c:	213fffc4 	addi	r4,r4,-1
 8004a60:	1c3ffd04 	addi	r16,r3,-12
 8004a64:	18c01a04 	addi	r3,r3,104
 8004a68:	247ffa1e 	bne	r4,r17,8004a54 <__alt_data_end+0xf8004a54>
 8004a6c:	90800017 	ldw	r2,0(r18)
 8004a70:	10001d26 	beq	r2,zero,8004ae8 <__sfp+0xf4>
 8004a74:	1025883a 	mov	r18,r2
 8004a78:	003fee06 	br	8004a34 <__alt_data_end+0xf8004a34>
 8004a7c:	00bfffc4 	movi	r2,-1
 8004a80:	8080038d 	sth	r2,14(r16)
 8004a84:	00800044 	movi	r2,1
 8004a88:	8080030d 	sth	r2,12(r16)
 8004a8c:	80001915 	stw	zero,100(r16)
 8004a90:	80000015 	stw	zero,0(r16)
 8004a94:	80000215 	stw	zero,8(r16)
 8004a98:	80000115 	stw	zero,4(r16)
 8004a9c:	80000415 	stw	zero,16(r16)
 8004aa0:	80000515 	stw	zero,20(r16)
 8004aa4:	80000615 	stw	zero,24(r16)
 8004aa8:	01800204 	movi	r6,8
 8004aac:	000b883a 	mov	r5,zero
 8004ab0:	81001704 	addi	r4,r16,92
 8004ab4:	80064180 	call	8006418 <memset>
 8004ab8:	8005883a 	mov	r2,r16
 8004abc:	80000c15 	stw	zero,48(r16)
 8004ac0:	80000d15 	stw	zero,52(r16)
 8004ac4:	80001115 	stw	zero,68(r16)
 8004ac8:	80001215 	stw	zero,72(r16)
 8004acc:	dfc00417 	ldw	ra,16(sp)
 8004ad0:	dcc00317 	ldw	r19,12(sp)
 8004ad4:	dc800217 	ldw	r18,8(sp)
 8004ad8:	dc400117 	ldw	r17,4(sp)
 8004adc:	dc000017 	ldw	r16,0(sp)
 8004ae0:	dec00504 	addi	sp,sp,20
 8004ae4:	f800283a 	ret
 8004ae8:	01400104 	movi	r5,4
 8004aec:	9809883a 	mov	r4,r19
 8004af0:	800498c0 	call	800498c <__sfmoreglue>
 8004af4:	90800015 	stw	r2,0(r18)
 8004af8:	103fde1e 	bne	r2,zero,8004a74 <__alt_data_end+0xf8004a74>
 8004afc:	00800304 	movi	r2,12
 8004b00:	98800015 	stw	r2,0(r19)
 8004b04:	0005883a 	mov	r2,zero
 8004b08:	003ff006 	br	8004acc <__alt_data_end+0xf8004acc>

08004b0c <_cleanup>:
 8004b0c:	008200b4 	movhi	r2,2050
 8004b10:	10ab9e04 	addi	r2,r2,-20872
 8004b14:	11000017 	ldw	r4,0(r2)
 8004b18:	01420074 	movhi	r5,2049
 8004b1c:	29655004 	addi	r5,r5,-27328
 8004b20:	80055281 	jmpi	8005528 <_fwalk_reent>

08004b24 <__sinit>:
 8004b24:	20800e17 	ldw	r2,56(r4)
 8004b28:	10000126 	beq	r2,zero,8004b30 <__sinit+0xc>
 8004b2c:	f800283a 	ret
 8004b30:	80047e81 	jmpi	80047e8 <__sinit.part.1>

08004b34 <__sfp_lock_acquire>:
 8004b34:	f800283a 	ret

08004b38 <__sfp_lock_release>:
 8004b38:	f800283a 	ret

08004b3c <__sinit_lock_acquire>:
 8004b3c:	f800283a 	ret

08004b40 <__sinit_lock_release>:
 8004b40:	f800283a 	ret

08004b44 <__fp_lock_all>:
 8004b44:	008200b4 	movhi	r2,2050
 8004b48:	10ab9f04 	addi	r2,r2,-20868
 8004b4c:	11000017 	ldw	r4,0(r2)
 8004b50:	01420034 	movhi	r5,2048
 8004b54:	29526104 	addi	r5,r5,18820
 8004b58:	80054641 	jmpi	8005464 <_fwalk>

08004b5c <__fp_unlock_all>:
 8004b5c:	008200b4 	movhi	r2,2050
 8004b60:	10ab9f04 	addi	r2,r2,-20868
 8004b64:	11000017 	ldw	r4,0(r2)
 8004b68:	01420034 	movhi	r5,2048
 8004b6c:	2951f504 	addi	r5,r5,18388
 8004b70:	80054641 	jmpi	8005464 <_fwalk>

08004b74 <_malloc_trim_r>:
 8004b74:	defffb04 	addi	sp,sp,-20
 8004b78:	dcc00315 	stw	r19,12(sp)
 8004b7c:	04c200b4 	movhi	r19,2050
 8004b80:	dc800215 	stw	r18,8(sp)
 8004b84:	dc400115 	stw	r17,4(sp)
 8004b88:	dc000015 	stw	r16,0(sp)
 8004b8c:	dfc00415 	stw	ra,16(sp)
 8004b90:	2821883a 	mov	r16,r5
 8004b94:	9ce60c04 	addi	r19,r19,-26576
 8004b98:	2025883a 	mov	r18,r4
 8004b9c:	800dcc80 	call	800dcc8 <__malloc_lock>
 8004ba0:	98800217 	ldw	r2,8(r19)
 8004ba4:	14400117 	ldw	r17,4(r2)
 8004ba8:	00bfff04 	movi	r2,-4
 8004bac:	88a2703a 	and	r17,r17,r2
 8004bb0:	8c21c83a 	sub	r16,r17,r16
 8004bb4:	8403fbc4 	addi	r16,r16,4079
 8004bb8:	8020d33a 	srli	r16,r16,12
 8004bbc:	0083ffc4 	movi	r2,4095
 8004bc0:	843fffc4 	addi	r16,r16,-1
 8004bc4:	8020933a 	slli	r16,r16,12
 8004bc8:	1400060e 	bge	r2,r16,8004be4 <_malloc_trim_r+0x70>
 8004bcc:	000b883a 	mov	r5,zero
 8004bd0:	9009883a 	mov	r4,r18
 8004bd4:	8007b140 	call	8007b14 <_sbrk_r>
 8004bd8:	98c00217 	ldw	r3,8(r19)
 8004bdc:	1c47883a 	add	r3,r3,r17
 8004be0:	10c00a26 	beq	r2,r3,8004c0c <_malloc_trim_r+0x98>
 8004be4:	9009883a 	mov	r4,r18
 8004be8:	800dde80 	call	800dde8 <__malloc_unlock>
 8004bec:	0005883a 	mov	r2,zero
 8004bf0:	dfc00417 	ldw	ra,16(sp)
 8004bf4:	dcc00317 	ldw	r19,12(sp)
 8004bf8:	dc800217 	ldw	r18,8(sp)
 8004bfc:	dc400117 	ldw	r17,4(sp)
 8004c00:	dc000017 	ldw	r16,0(sp)
 8004c04:	dec00504 	addi	sp,sp,20
 8004c08:	f800283a 	ret
 8004c0c:	040bc83a 	sub	r5,zero,r16
 8004c10:	9009883a 	mov	r4,r18
 8004c14:	8007b140 	call	8007b14 <_sbrk_r>
 8004c18:	00ffffc4 	movi	r3,-1
 8004c1c:	10c00d26 	beq	r2,r3,8004c54 <_malloc_trim_r+0xe0>
 8004c20:	00c200b4 	movhi	r3,2050
 8004c24:	18f2de04 	addi	r3,r3,-13448
 8004c28:	18800017 	ldw	r2,0(r3)
 8004c2c:	99000217 	ldw	r4,8(r19)
 8004c30:	8c23c83a 	sub	r17,r17,r16
 8004c34:	8c400054 	ori	r17,r17,1
 8004c38:	1421c83a 	sub	r16,r2,r16
 8004c3c:	24400115 	stw	r17,4(r4)
 8004c40:	9009883a 	mov	r4,r18
 8004c44:	1c000015 	stw	r16,0(r3)
 8004c48:	800dde80 	call	800dde8 <__malloc_unlock>
 8004c4c:	00800044 	movi	r2,1
 8004c50:	003fe706 	br	8004bf0 <__alt_data_end+0xf8004bf0>
 8004c54:	000b883a 	mov	r5,zero
 8004c58:	9009883a 	mov	r4,r18
 8004c5c:	8007b140 	call	8007b14 <_sbrk_r>
 8004c60:	99000217 	ldw	r4,8(r19)
 8004c64:	014003c4 	movi	r5,15
 8004c68:	1107c83a 	sub	r3,r2,r4
 8004c6c:	28ffdd0e 	bge	r5,r3,8004be4 <__alt_data_end+0xf8004be4>
 8004c70:	014200b4 	movhi	r5,2050
 8004c74:	296ba104 	addi	r5,r5,-20860
 8004c78:	29400017 	ldw	r5,0(r5)
 8004c7c:	18c00054 	ori	r3,r3,1
 8004c80:	20c00115 	stw	r3,4(r4)
 8004c84:	00c200b4 	movhi	r3,2050
 8004c88:	1145c83a 	sub	r2,r2,r5
 8004c8c:	18f2de04 	addi	r3,r3,-13448
 8004c90:	18800015 	stw	r2,0(r3)
 8004c94:	003fd306 	br	8004be4 <__alt_data_end+0xf8004be4>

08004c98 <_free_r>:
 8004c98:	28004126 	beq	r5,zero,8004da0 <_free_r+0x108>
 8004c9c:	defffd04 	addi	sp,sp,-12
 8004ca0:	dc400115 	stw	r17,4(sp)
 8004ca4:	dc000015 	stw	r16,0(sp)
 8004ca8:	2023883a 	mov	r17,r4
 8004cac:	2821883a 	mov	r16,r5
 8004cb0:	dfc00215 	stw	ra,8(sp)
 8004cb4:	800dcc80 	call	800dcc8 <__malloc_lock>
 8004cb8:	81ffff17 	ldw	r7,-4(r16)
 8004cbc:	00bfff84 	movi	r2,-2
 8004cc0:	010200b4 	movhi	r4,2050
 8004cc4:	81bffe04 	addi	r6,r16,-8
 8004cc8:	3884703a 	and	r2,r7,r2
 8004ccc:	21260c04 	addi	r4,r4,-26576
 8004cd0:	308b883a 	add	r5,r6,r2
 8004cd4:	2a400117 	ldw	r9,4(r5)
 8004cd8:	22000217 	ldw	r8,8(r4)
 8004cdc:	00ffff04 	movi	r3,-4
 8004ce0:	48c6703a 	and	r3,r9,r3
 8004ce4:	2a005726 	beq	r5,r8,8004e44 <_free_r+0x1ac>
 8004ce8:	28c00115 	stw	r3,4(r5)
 8004cec:	39c0004c 	andi	r7,r7,1
 8004cf0:	3800091e 	bne	r7,zero,8004d18 <_free_r+0x80>
 8004cf4:	823ffe17 	ldw	r8,-8(r16)
 8004cf8:	22400204 	addi	r9,r4,8
 8004cfc:	320dc83a 	sub	r6,r6,r8
 8004d00:	31c00217 	ldw	r7,8(r6)
 8004d04:	1205883a 	add	r2,r2,r8
 8004d08:	3a406526 	beq	r7,r9,8004ea0 <_free_r+0x208>
 8004d0c:	32000317 	ldw	r8,12(r6)
 8004d10:	3a000315 	stw	r8,12(r7)
 8004d14:	41c00215 	stw	r7,8(r8)
 8004d18:	28cf883a 	add	r7,r5,r3
 8004d1c:	39c00117 	ldw	r7,4(r7)
 8004d20:	39c0004c 	andi	r7,r7,1
 8004d24:	38003a26 	beq	r7,zero,8004e10 <_free_r+0x178>
 8004d28:	10c00054 	ori	r3,r2,1
 8004d2c:	30c00115 	stw	r3,4(r6)
 8004d30:	3087883a 	add	r3,r6,r2
 8004d34:	18800015 	stw	r2,0(r3)
 8004d38:	00c07fc4 	movi	r3,511
 8004d3c:	18801936 	bltu	r3,r2,8004da4 <_free_r+0x10c>
 8004d40:	1004d0fa 	srli	r2,r2,3
 8004d44:	01c00044 	movi	r7,1
 8004d48:	21400117 	ldw	r5,4(r4)
 8004d4c:	10c00044 	addi	r3,r2,1
 8004d50:	18c7883a 	add	r3,r3,r3
 8004d54:	1005d0ba 	srai	r2,r2,2
 8004d58:	18c7883a 	add	r3,r3,r3
 8004d5c:	18c7883a 	add	r3,r3,r3
 8004d60:	1907883a 	add	r3,r3,r4
 8004d64:	3884983a 	sll	r2,r7,r2
 8004d68:	19c00017 	ldw	r7,0(r3)
 8004d6c:	1a3ffe04 	addi	r8,r3,-8
 8004d70:	1144b03a 	or	r2,r2,r5
 8004d74:	32000315 	stw	r8,12(r6)
 8004d78:	31c00215 	stw	r7,8(r6)
 8004d7c:	20800115 	stw	r2,4(r4)
 8004d80:	19800015 	stw	r6,0(r3)
 8004d84:	39800315 	stw	r6,12(r7)
 8004d88:	8809883a 	mov	r4,r17
 8004d8c:	dfc00217 	ldw	ra,8(sp)
 8004d90:	dc400117 	ldw	r17,4(sp)
 8004d94:	dc000017 	ldw	r16,0(sp)
 8004d98:	dec00304 	addi	sp,sp,12
 8004d9c:	800dde81 	jmpi	800dde8 <__malloc_unlock>
 8004da0:	f800283a 	ret
 8004da4:	100ad27a 	srli	r5,r2,9
 8004da8:	00c00104 	movi	r3,4
 8004dac:	19404a36 	bltu	r3,r5,8004ed8 <_free_r+0x240>
 8004db0:	100ad1ba 	srli	r5,r2,6
 8004db4:	28c00e44 	addi	r3,r5,57
 8004db8:	18c7883a 	add	r3,r3,r3
 8004dbc:	29400e04 	addi	r5,r5,56
 8004dc0:	18c7883a 	add	r3,r3,r3
 8004dc4:	18c7883a 	add	r3,r3,r3
 8004dc8:	1909883a 	add	r4,r3,r4
 8004dcc:	20c00017 	ldw	r3,0(r4)
 8004dd0:	01c200b4 	movhi	r7,2050
 8004dd4:	213ffe04 	addi	r4,r4,-8
 8004dd8:	39e60c04 	addi	r7,r7,-26576
 8004ddc:	20c04426 	beq	r4,r3,8004ef0 <_free_r+0x258>
 8004de0:	01ffff04 	movi	r7,-4
 8004de4:	19400117 	ldw	r5,4(r3)
 8004de8:	29ca703a 	and	r5,r5,r7
 8004dec:	1140022e 	bgeu	r2,r5,8004df8 <_free_r+0x160>
 8004df0:	18c00217 	ldw	r3,8(r3)
 8004df4:	20fffb1e 	bne	r4,r3,8004de4 <__alt_data_end+0xf8004de4>
 8004df8:	19000317 	ldw	r4,12(r3)
 8004dfc:	31000315 	stw	r4,12(r6)
 8004e00:	30c00215 	stw	r3,8(r6)
 8004e04:	21800215 	stw	r6,8(r4)
 8004e08:	19800315 	stw	r6,12(r3)
 8004e0c:	003fde06 	br	8004d88 <__alt_data_end+0xf8004d88>
 8004e10:	29c00217 	ldw	r7,8(r5)
 8004e14:	10c5883a 	add	r2,r2,r3
 8004e18:	00c200b4 	movhi	r3,2050
 8004e1c:	18e60e04 	addi	r3,r3,-26568
 8004e20:	38c03b26 	beq	r7,r3,8004f10 <_free_r+0x278>
 8004e24:	2a000317 	ldw	r8,12(r5)
 8004e28:	11400054 	ori	r5,r2,1
 8004e2c:	3087883a 	add	r3,r6,r2
 8004e30:	3a000315 	stw	r8,12(r7)
 8004e34:	41c00215 	stw	r7,8(r8)
 8004e38:	31400115 	stw	r5,4(r6)
 8004e3c:	18800015 	stw	r2,0(r3)
 8004e40:	003fbd06 	br	8004d38 <__alt_data_end+0xf8004d38>
 8004e44:	39c0004c 	andi	r7,r7,1
 8004e48:	10c5883a 	add	r2,r2,r3
 8004e4c:	3800071e 	bne	r7,zero,8004e6c <_free_r+0x1d4>
 8004e50:	81fffe17 	ldw	r7,-8(r16)
 8004e54:	31cdc83a 	sub	r6,r6,r7
 8004e58:	30c00317 	ldw	r3,12(r6)
 8004e5c:	31400217 	ldw	r5,8(r6)
 8004e60:	11c5883a 	add	r2,r2,r7
 8004e64:	28c00315 	stw	r3,12(r5)
 8004e68:	19400215 	stw	r5,8(r3)
 8004e6c:	10c00054 	ori	r3,r2,1
 8004e70:	30c00115 	stw	r3,4(r6)
 8004e74:	00c200b4 	movhi	r3,2050
 8004e78:	18eba204 	addi	r3,r3,-20856
 8004e7c:	18c00017 	ldw	r3,0(r3)
 8004e80:	21800215 	stw	r6,8(r4)
 8004e84:	10ffc036 	bltu	r2,r3,8004d88 <__alt_data_end+0xf8004d88>
 8004e88:	008200b4 	movhi	r2,2050
 8004e8c:	10b2bc04 	addi	r2,r2,-13584
 8004e90:	11400017 	ldw	r5,0(r2)
 8004e94:	8809883a 	mov	r4,r17
 8004e98:	8004b740 	call	8004b74 <_malloc_trim_r>
 8004e9c:	003fba06 	br	8004d88 <__alt_data_end+0xf8004d88>
 8004ea0:	28c9883a 	add	r4,r5,r3
 8004ea4:	21000117 	ldw	r4,4(r4)
 8004ea8:	2100004c 	andi	r4,r4,1
 8004eac:	2000391e 	bne	r4,zero,8004f94 <_free_r+0x2fc>
 8004eb0:	29c00217 	ldw	r7,8(r5)
 8004eb4:	29000317 	ldw	r4,12(r5)
 8004eb8:	1885883a 	add	r2,r3,r2
 8004ebc:	10c00054 	ori	r3,r2,1
 8004ec0:	39000315 	stw	r4,12(r7)
 8004ec4:	21c00215 	stw	r7,8(r4)
 8004ec8:	30c00115 	stw	r3,4(r6)
 8004ecc:	308d883a 	add	r6,r6,r2
 8004ed0:	30800015 	stw	r2,0(r6)
 8004ed4:	003fac06 	br	8004d88 <__alt_data_end+0xf8004d88>
 8004ed8:	00c00504 	movi	r3,20
 8004edc:	19401536 	bltu	r3,r5,8004f34 <_free_r+0x29c>
 8004ee0:	28c01704 	addi	r3,r5,92
 8004ee4:	18c7883a 	add	r3,r3,r3
 8004ee8:	294016c4 	addi	r5,r5,91
 8004eec:	003fb406 	br	8004dc0 <__alt_data_end+0xf8004dc0>
 8004ef0:	280bd0ba 	srai	r5,r5,2
 8004ef4:	00c00044 	movi	r3,1
 8004ef8:	38800117 	ldw	r2,4(r7)
 8004efc:	194a983a 	sll	r5,r3,r5
 8004f00:	2007883a 	mov	r3,r4
 8004f04:	2884b03a 	or	r2,r5,r2
 8004f08:	38800115 	stw	r2,4(r7)
 8004f0c:	003fbb06 	br	8004dfc <__alt_data_end+0xf8004dfc>
 8004f10:	21800515 	stw	r6,20(r4)
 8004f14:	21800415 	stw	r6,16(r4)
 8004f18:	10c00054 	ori	r3,r2,1
 8004f1c:	31c00315 	stw	r7,12(r6)
 8004f20:	31c00215 	stw	r7,8(r6)
 8004f24:	30c00115 	stw	r3,4(r6)
 8004f28:	308d883a 	add	r6,r6,r2
 8004f2c:	30800015 	stw	r2,0(r6)
 8004f30:	003f9506 	br	8004d88 <__alt_data_end+0xf8004d88>
 8004f34:	00c01504 	movi	r3,84
 8004f38:	19400536 	bltu	r3,r5,8004f50 <_free_r+0x2b8>
 8004f3c:	100ad33a 	srli	r5,r2,12
 8004f40:	28c01bc4 	addi	r3,r5,111
 8004f44:	18c7883a 	add	r3,r3,r3
 8004f48:	29401b84 	addi	r5,r5,110
 8004f4c:	003f9c06 	br	8004dc0 <__alt_data_end+0xf8004dc0>
 8004f50:	00c05504 	movi	r3,340
 8004f54:	19400536 	bltu	r3,r5,8004f6c <_free_r+0x2d4>
 8004f58:	100ad3fa 	srli	r5,r2,15
 8004f5c:	28c01e04 	addi	r3,r5,120
 8004f60:	18c7883a 	add	r3,r3,r3
 8004f64:	29401dc4 	addi	r5,r5,119
 8004f68:	003f9506 	br	8004dc0 <__alt_data_end+0xf8004dc0>
 8004f6c:	00c15504 	movi	r3,1364
 8004f70:	19400536 	bltu	r3,r5,8004f88 <_free_r+0x2f0>
 8004f74:	100ad4ba 	srli	r5,r2,18
 8004f78:	28c01f44 	addi	r3,r5,125
 8004f7c:	18c7883a 	add	r3,r3,r3
 8004f80:	29401f04 	addi	r5,r5,124
 8004f84:	003f8e06 	br	8004dc0 <__alt_data_end+0xf8004dc0>
 8004f88:	00c03f84 	movi	r3,254
 8004f8c:	01401f84 	movi	r5,126
 8004f90:	003f8b06 	br	8004dc0 <__alt_data_end+0xf8004dc0>
 8004f94:	10c00054 	ori	r3,r2,1
 8004f98:	30c00115 	stw	r3,4(r6)
 8004f9c:	308d883a 	add	r6,r6,r2
 8004fa0:	30800015 	stw	r2,0(r6)
 8004fa4:	003f7806 	br	8004d88 <__alt_data_end+0xf8004d88>

08004fa8 <__sfvwrite_r>:
 8004fa8:	30800217 	ldw	r2,8(r6)
 8004fac:	10006726 	beq	r2,zero,800514c <__sfvwrite_r+0x1a4>
 8004fb0:	28c0030b 	ldhu	r3,12(r5)
 8004fb4:	defff404 	addi	sp,sp,-48
 8004fb8:	dd400715 	stw	r21,28(sp)
 8004fbc:	dd000615 	stw	r20,24(sp)
 8004fc0:	dc000215 	stw	r16,8(sp)
 8004fc4:	dfc00b15 	stw	ra,44(sp)
 8004fc8:	df000a15 	stw	fp,40(sp)
 8004fcc:	ddc00915 	stw	r23,36(sp)
 8004fd0:	dd800815 	stw	r22,32(sp)
 8004fd4:	dcc00515 	stw	r19,20(sp)
 8004fd8:	dc800415 	stw	r18,16(sp)
 8004fdc:	dc400315 	stw	r17,12(sp)
 8004fe0:	1880020c 	andi	r2,r3,8
 8004fe4:	2821883a 	mov	r16,r5
 8004fe8:	202b883a 	mov	r21,r4
 8004fec:	3029883a 	mov	r20,r6
 8004ff0:	10002726 	beq	r2,zero,8005090 <__sfvwrite_r+0xe8>
 8004ff4:	28800417 	ldw	r2,16(r5)
 8004ff8:	10002526 	beq	r2,zero,8005090 <__sfvwrite_r+0xe8>
 8004ffc:	1880008c 	andi	r2,r3,2
 8005000:	a4400017 	ldw	r17,0(r20)
 8005004:	10002a26 	beq	r2,zero,80050b0 <__sfvwrite_r+0x108>
 8005008:	05a00034 	movhi	r22,32768
 800500c:	0027883a 	mov	r19,zero
 8005010:	0025883a 	mov	r18,zero
 8005014:	b5bf0004 	addi	r22,r22,-1024
 8005018:	980d883a 	mov	r6,r19
 800501c:	a809883a 	mov	r4,r21
 8005020:	90004626 	beq	r18,zero,800513c <__sfvwrite_r+0x194>
 8005024:	900f883a 	mov	r7,r18
 8005028:	b480022e 	bgeu	r22,r18,8005034 <__sfvwrite_r+0x8c>
 800502c:	01e00034 	movhi	r7,32768
 8005030:	39ff0004 	addi	r7,r7,-1024
 8005034:	80800917 	ldw	r2,36(r16)
 8005038:	81400717 	ldw	r5,28(r16)
 800503c:	103ee83a 	callr	r2
 8005040:	0080570e 	bge	zero,r2,80051a0 <__sfvwrite_r+0x1f8>
 8005044:	a0c00217 	ldw	r3,8(r20)
 8005048:	98a7883a 	add	r19,r19,r2
 800504c:	90a5c83a 	sub	r18,r18,r2
 8005050:	1885c83a 	sub	r2,r3,r2
 8005054:	a0800215 	stw	r2,8(r20)
 8005058:	103fef1e 	bne	r2,zero,8005018 <__alt_data_end+0xf8005018>
 800505c:	0005883a 	mov	r2,zero
 8005060:	dfc00b17 	ldw	ra,44(sp)
 8005064:	df000a17 	ldw	fp,40(sp)
 8005068:	ddc00917 	ldw	r23,36(sp)
 800506c:	dd800817 	ldw	r22,32(sp)
 8005070:	dd400717 	ldw	r21,28(sp)
 8005074:	dd000617 	ldw	r20,24(sp)
 8005078:	dcc00517 	ldw	r19,20(sp)
 800507c:	dc800417 	ldw	r18,16(sp)
 8005080:	dc400317 	ldw	r17,12(sp)
 8005084:	dc000217 	ldw	r16,8(sp)
 8005088:	dec00c04 	addi	sp,sp,48
 800508c:	f800283a 	ret
 8005090:	800b883a 	mov	r5,r16
 8005094:	a809883a 	mov	r4,r21
 8005098:	8002b500 	call	8002b50 <__swsetup_r>
 800509c:	1000eb1e 	bne	r2,zero,800544c <__sfvwrite_r+0x4a4>
 80050a0:	80c0030b 	ldhu	r3,12(r16)
 80050a4:	a4400017 	ldw	r17,0(r20)
 80050a8:	1880008c 	andi	r2,r3,2
 80050ac:	103fd61e 	bne	r2,zero,8005008 <__alt_data_end+0xf8005008>
 80050b0:	1880004c 	andi	r2,r3,1
 80050b4:	10003f1e 	bne	r2,zero,80051b4 <__sfvwrite_r+0x20c>
 80050b8:	0039883a 	mov	fp,zero
 80050bc:	0025883a 	mov	r18,zero
 80050c0:	90001a26 	beq	r18,zero,800512c <__sfvwrite_r+0x184>
 80050c4:	1880800c 	andi	r2,r3,512
 80050c8:	84c00217 	ldw	r19,8(r16)
 80050cc:	10002126 	beq	r2,zero,8005154 <__sfvwrite_r+0x1ac>
 80050d0:	982f883a 	mov	r23,r19
 80050d4:	94c09336 	bltu	r18,r19,8005324 <__sfvwrite_r+0x37c>
 80050d8:	1881200c 	andi	r2,r3,1152
 80050dc:	10009e1e 	bne	r2,zero,8005358 <__sfvwrite_r+0x3b0>
 80050e0:	81000017 	ldw	r4,0(r16)
 80050e4:	b80d883a 	mov	r6,r23
 80050e8:	e00b883a 	mov	r5,fp
 80050ec:	80062bc0 	call	80062bc <memmove>
 80050f0:	80c00217 	ldw	r3,8(r16)
 80050f4:	81000017 	ldw	r4,0(r16)
 80050f8:	9005883a 	mov	r2,r18
 80050fc:	1ce7c83a 	sub	r19,r3,r19
 8005100:	25cf883a 	add	r7,r4,r23
 8005104:	84c00215 	stw	r19,8(r16)
 8005108:	81c00015 	stw	r7,0(r16)
 800510c:	a0c00217 	ldw	r3,8(r20)
 8005110:	e0b9883a 	add	fp,fp,r2
 8005114:	90a5c83a 	sub	r18,r18,r2
 8005118:	18a7c83a 	sub	r19,r3,r2
 800511c:	a4c00215 	stw	r19,8(r20)
 8005120:	983fce26 	beq	r19,zero,800505c <__alt_data_end+0xf800505c>
 8005124:	80c0030b 	ldhu	r3,12(r16)
 8005128:	903fe61e 	bne	r18,zero,80050c4 <__alt_data_end+0xf80050c4>
 800512c:	8f000017 	ldw	fp,0(r17)
 8005130:	8c800117 	ldw	r18,4(r17)
 8005134:	8c400204 	addi	r17,r17,8
 8005138:	003fe106 	br	80050c0 <__alt_data_end+0xf80050c0>
 800513c:	8cc00017 	ldw	r19,0(r17)
 8005140:	8c800117 	ldw	r18,4(r17)
 8005144:	8c400204 	addi	r17,r17,8
 8005148:	003fb306 	br	8005018 <__alt_data_end+0xf8005018>
 800514c:	0005883a 	mov	r2,zero
 8005150:	f800283a 	ret
 8005154:	81000017 	ldw	r4,0(r16)
 8005158:	80800417 	ldw	r2,16(r16)
 800515c:	11005736 	bltu	r2,r4,80052bc <__sfvwrite_r+0x314>
 8005160:	85c00517 	ldw	r23,20(r16)
 8005164:	95c05536 	bltu	r18,r23,80052bc <__sfvwrite_r+0x314>
 8005168:	00a00034 	movhi	r2,32768
 800516c:	10bfffc4 	addi	r2,r2,-1
 8005170:	9009883a 	mov	r4,r18
 8005174:	1480012e 	bgeu	r2,r18,800517c <__sfvwrite_r+0x1d4>
 8005178:	1009883a 	mov	r4,r2
 800517c:	b80b883a 	mov	r5,r23
 8005180:	800a7ac0 	call	800a7ac <__divsi3>
 8005184:	15cf383a 	mul	r7,r2,r23
 8005188:	81400717 	ldw	r5,28(r16)
 800518c:	80800917 	ldw	r2,36(r16)
 8005190:	e00d883a 	mov	r6,fp
 8005194:	a809883a 	mov	r4,r21
 8005198:	103ee83a 	callr	r2
 800519c:	00bfdb16 	blt	zero,r2,800510c <__alt_data_end+0xf800510c>
 80051a0:	8080030b 	ldhu	r2,12(r16)
 80051a4:	10801014 	ori	r2,r2,64
 80051a8:	8080030d 	sth	r2,12(r16)
 80051ac:	00bfffc4 	movi	r2,-1
 80051b0:	003fab06 	br	8005060 <__alt_data_end+0xf8005060>
 80051b4:	0027883a 	mov	r19,zero
 80051b8:	0011883a 	mov	r8,zero
 80051bc:	0039883a 	mov	fp,zero
 80051c0:	0025883a 	mov	r18,zero
 80051c4:	90001f26 	beq	r18,zero,8005244 <__sfvwrite_r+0x29c>
 80051c8:	40005a26 	beq	r8,zero,8005334 <__sfvwrite_r+0x38c>
 80051cc:	982d883a 	mov	r22,r19
 80051d0:	94c0012e 	bgeu	r18,r19,80051d8 <__sfvwrite_r+0x230>
 80051d4:	902d883a 	mov	r22,r18
 80051d8:	81000017 	ldw	r4,0(r16)
 80051dc:	80800417 	ldw	r2,16(r16)
 80051e0:	b02f883a 	mov	r23,r22
 80051e4:	81c00517 	ldw	r7,20(r16)
 80051e8:	1100032e 	bgeu	r2,r4,80051f8 <__sfvwrite_r+0x250>
 80051ec:	80c00217 	ldw	r3,8(r16)
 80051f0:	38c7883a 	add	r3,r7,r3
 80051f4:	1d801816 	blt	r3,r22,8005258 <__sfvwrite_r+0x2b0>
 80051f8:	b1c03e16 	blt	r22,r7,80052f4 <__sfvwrite_r+0x34c>
 80051fc:	80800917 	ldw	r2,36(r16)
 8005200:	81400717 	ldw	r5,28(r16)
 8005204:	e00d883a 	mov	r6,fp
 8005208:	da000115 	stw	r8,4(sp)
 800520c:	a809883a 	mov	r4,r21
 8005210:	103ee83a 	callr	r2
 8005214:	102f883a 	mov	r23,r2
 8005218:	da000117 	ldw	r8,4(sp)
 800521c:	00bfe00e 	bge	zero,r2,80051a0 <__alt_data_end+0xf80051a0>
 8005220:	9de7c83a 	sub	r19,r19,r23
 8005224:	98001f26 	beq	r19,zero,80052a4 <__sfvwrite_r+0x2fc>
 8005228:	a0800217 	ldw	r2,8(r20)
 800522c:	e5f9883a 	add	fp,fp,r23
 8005230:	95e5c83a 	sub	r18,r18,r23
 8005234:	15efc83a 	sub	r23,r2,r23
 8005238:	a5c00215 	stw	r23,8(r20)
 800523c:	b83f8726 	beq	r23,zero,800505c <__alt_data_end+0xf800505c>
 8005240:	903fe11e 	bne	r18,zero,80051c8 <__alt_data_end+0xf80051c8>
 8005244:	8f000017 	ldw	fp,0(r17)
 8005248:	8c800117 	ldw	r18,4(r17)
 800524c:	0011883a 	mov	r8,zero
 8005250:	8c400204 	addi	r17,r17,8
 8005254:	003fdb06 	br	80051c4 <__alt_data_end+0xf80051c4>
 8005258:	180d883a 	mov	r6,r3
 800525c:	e00b883a 	mov	r5,fp
 8005260:	da000115 	stw	r8,4(sp)
 8005264:	d8c00015 	stw	r3,0(sp)
 8005268:	80062bc0 	call	80062bc <memmove>
 800526c:	d8c00017 	ldw	r3,0(sp)
 8005270:	80800017 	ldw	r2,0(r16)
 8005274:	800b883a 	mov	r5,r16
 8005278:	a809883a 	mov	r4,r21
 800527c:	10c5883a 	add	r2,r2,r3
 8005280:	80800015 	stw	r2,0(r16)
 8005284:	d8c00015 	stw	r3,0(sp)
 8005288:	80047480 	call	8004748 <_fflush_r>
 800528c:	d8c00017 	ldw	r3,0(sp)
 8005290:	da000117 	ldw	r8,4(sp)
 8005294:	103fc21e 	bne	r2,zero,80051a0 <__alt_data_end+0xf80051a0>
 8005298:	182f883a 	mov	r23,r3
 800529c:	9de7c83a 	sub	r19,r19,r23
 80052a0:	983fe11e 	bne	r19,zero,8005228 <__alt_data_end+0xf8005228>
 80052a4:	800b883a 	mov	r5,r16
 80052a8:	a809883a 	mov	r4,r21
 80052ac:	80047480 	call	8004748 <_fflush_r>
 80052b0:	103fbb1e 	bne	r2,zero,80051a0 <__alt_data_end+0xf80051a0>
 80052b4:	0011883a 	mov	r8,zero
 80052b8:	003fdb06 	br	8005228 <__alt_data_end+0xf8005228>
 80052bc:	94c0012e 	bgeu	r18,r19,80052c4 <__sfvwrite_r+0x31c>
 80052c0:	9027883a 	mov	r19,r18
 80052c4:	980d883a 	mov	r6,r19
 80052c8:	e00b883a 	mov	r5,fp
 80052cc:	80062bc0 	call	80062bc <memmove>
 80052d0:	80800217 	ldw	r2,8(r16)
 80052d4:	80c00017 	ldw	r3,0(r16)
 80052d8:	14c5c83a 	sub	r2,r2,r19
 80052dc:	1cc7883a 	add	r3,r3,r19
 80052e0:	80800215 	stw	r2,8(r16)
 80052e4:	80c00015 	stw	r3,0(r16)
 80052e8:	10004326 	beq	r2,zero,80053f8 <__sfvwrite_r+0x450>
 80052ec:	9805883a 	mov	r2,r19
 80052f0:	003f8606 	br	800510c <__alt_data_end+0xf800510c>
 80052f4:	b00d883a 	mov	r6,r22
 80052f8:	e00b883a 	mov	r5,fp
 80052fc:	da000115 	stw	r8,4(sp)
 8005300:	80062bc0 	call	80062bc <memmove>
 8005304:	80800217 	ldw	r2,8(r16)
 8005308:	80c00017 	ldw	r3,0(r16)
 800530c:	da000117 	ldw	r8,4(sp)
 8005310:	1585c83a 	sub	r2,r2,r22
 8005314:	1dad883a 	add	r22,r3,r22
 8005318:	80800215 	stw	r2,8(r16)
 800531c:	85800015 	stw	r22,0(r16)
 8005320:	003fbf06 	br	8005220 <__alt_data_end+0xf8005220>
 8005324:	81000017 	ldw	r4,0(r16)
 8005328:	9027883a 	mov	r19,r18
 800532c:	902f883a 	mov	r23,r18
 8005330:	003f6c06 	br	80050e4 <__alt_data_end+0xf80050e4>
 8005334:	900d883a 	mov	r6,r18
 8005338:	01400284 	movi	r5,10
 800533c:	e009883a 	mov	r4,fp
 8005340:	80060900 	call	8006090 <memchr>
 8005344:	10003e26 	beq	r2,zero,8005440 <__sfvwrite_r+0x498>
 8005348:	10800044 	addi	r2,r2,1
 800534c:	1727c83a 	sub	r19,r2,fp
 8005350:	02000044 	movi	r8,1
 8005354:	003f9d06 	br	80051cc <__alt_data_end+0xf80051cc>
 8005358:	80800517 	ldw	r2,20(r16)
 800535c:	81400417 	ldw	r5,16(r16)
 8005360:	81c00017 	ldw	r7,0(r16)
 8005364:	10a7883a 	add	r19,r2,r2
 8005368:	9885883a 	add	r2,r19,r2
 800536c:	1026d7fa 	srli	r19,r2,31
 8005370:	396dc83a 	sub	r22,r7,r5
 8005374:	b1000044 	addi	r4,r22,1
 8005378:	9885883a 	add	r2,r19,r2
 800537c:	1027d07a 	srai	r19,r2,1
 8005380:	2485883a 	add	r2,r4,r18
 8005384:	980d883a 	mov	r6,r19
 8005388:	9880022e 	bgeu	r19,r2,8005394 <__sfvwrite_r+0x3ec>
 800538c:	1027883a 	mov	r19,r2
 8005390:	100d883a 	mov	r6,r2
 8005394:	18c1000c 	andi	r3,r3,1024
 8005398:	18001c26 	beq	r3,zero,800540c <__sfvwrite_r+0x464>
 800539c:	300b883a 	mov	r5,r6
 80053a0:	a809883a 	mov	r4,r21
 80053a4:	80058840 	call	8005884 <_malloc_r>
 80053a8:	102f883a 	mov	r23,r2
 80053ac:	10002926 	beq	r2,zero,8005454 <__sfvwrite_r+0x4ac>
 80053b0:	81400417 	ldw	r5,16(r16)
 80053b4:	b00d883a 	mov	r6,r22
 80053b8:	1009883a 	mov	r4,r2
 80053bc:	80061740 	call	8006174 <memcpy>
 80053c0:	8080030b 	ldhu	r2,12(r16)
 80053c4:	00fedfc4 	movi	r3,-1153
 80053c8:	10c4703a 	and	r2,r2,r3
 80053cc:	10802014 	ori	r2,r2,128
 80053d0:	8080030d 	sth	r2,12(r16)
 80053d4:	bd89883a 	add	r4,r23,r22
 80053d8:	9d8fc83a 	sub	r7,r19,r22
 80053dc:	85c00415 	stw	r23,16(r16)
 80053e0:	84c00515 	stw	r19,20(r16)
 80053e4:	81000015 	stw	r4,0(r16)
 80053e8:	9027883a 	mov	r19,r18
 80053ec:	81c00215 	stw	r7,8(r16)
 80053f0:	902f883a 	mov	r23,r18
 80053f4:	003f3b06 	br	80050e4 <__alt_data_end+0xf80050e4>
 80053f8:	800b883a 	mov	r5,r16
 80053fc:	a809883a 	mov	r4,r21
 8005400:	80047480 	call	8004748 <_fflush_r>
 8005404:	103fb926 	beq	r2,zero,80052ec <__alt_data_end+0xf80052ec>
 8005408:	003f6506 	br	80051a0 <__alt_data_end+0xf80051a0>
 800540c:	a809883a 	mov	r4,r21
 8005410:	800753c0 	call	800753c <_realloc_r>
 8005414:	102f883a 	mov	r23,r2
 8005418:	103fee1e 	bne	r2,zero,80053d4 <__alt_data_end+0xf80053d4>
 800541c:	81400417 	ldw	r5,16(r16)
 8005420:	a809883a 	mov	r4,r21
 8005424:	8004c980 	call	8004c98 <_free_r>
 8005428:	8080030b 	ldhu	r2,12(r16)
 800542c:	00ffdfc4 	movi	r3,-129
 8005430:	1884703a 	and	r2,r3,r2
 8005434:	00c00304 	movi	r3,12
 8005438:	a8c00015 	stw	r3,0(r21)
 800543c:	003f5906 	br	80051a4 <__alt_data_end+0xf80051a4>
 8005440:	94c00044 	addi	r19,r18,1
 8005444:	02000044 	movi	r8,1
 8005448:	003f6006 	br	80051cc <__alt_data_end+0xf80051cc>
 800544c:	00bfffc4 	movi	r2,-1
 8005450:	003f0306 	br	8005060 <__alt_data_end+0xf8005060>
 8005454:	00800304 	movi	r2,12
 8005458:	a8800015 	stw	r2,0(r21)
 800545c:	8080030b 	ldhu	r2,12(r16)
 8005460:	003f5006 	br	80051a4 <__alt_data_end+0xf80051a4>

08005464 <_fwalk>:
 8005464:	defff704 	addi	sp,sp,-36
 8005468:	dd000415 	stw	r20,16(sp)
 800546c:	dfc00815 	stw	ra,32(sp)
 8005470:	ddc00715 	stw	r23,28(sp)
 8005474:	dd800615 	stw	r22,24(sp)
 8005478:	dd400515 	stw	r21,20(sp)
 800547c:	dcc00315 	stw	r19,12(sp)
 8005480:	dc800215 	stw	r18,8(sp)
 8005484:	dc400115 	stw	r17,4(sp)
 8005488:	dc000015 	stw	r16,0(sp)
 800548c:	2500b804 	addi	r20,r4,736
 8005490:	a0002326 	beq	r20,zero,8005520 <_fwalk+0xbc>
 8005494:	282b883a 	mov	r21,r5
 8005498:	002f883a 	mov	r23,zero
 800549c:	05800044 	movi	r22,1
 80054a0:	04ffffc4 	movi	r19,-1
 80054a4:	a4400117 	ldw	r17,4(r20)
 80054a8:	a4800217 	ldw	r18,8(r20)
 80054ac:	8c7fffc4 	addi	r17,r17,-1
 80054b0:	88000d16 	blt	r17,zero,80054e8 <_fwalk+0x84>
 80054b4:	94000304 	addi	r16,r18,12
 80054b8:	94800384 	addi	r18,r18,14
 80054bc:	8080000b 	ldhu	r2,0(r16)
 80054c0:	8c7fffc4 	addi	r17,r17,-1
 80054c4:	813ffd04 	addi	r4,r16,-12
 80054c8:	b080042e 	bgeu	r22,r2,80054dc <_fwalk+0x78>
 80054cc:	9080000f 	ldh	r2,0(r18)
 80054d0:	14c00226 	beq	r2,r19,80054dc <_fwalk+0x78>
 80054d4:	a83ee83a 	callr	r21
 80054d8:	b8aeb03a 	or	r23,r23,r2
 80054dc:	84001a04 	addi	r16,r16,104
 80054e0:	94801a04 	addi	r18,r18,104
 80054e4:	8cfff51e 	bne	r17,r19,80054bc <__alt_data_end+0xf80054bc>
 80054e8:	a5000017 	ldw	r20,0(r20)
 80054ec:	a03fed1e 	bne	r20,zero,80054a4 <__alt_data_end+0xf80054a4>
 80054f0:	b805883a 	mov	r2,r23
 80054f4:	dfc00817 	ldw	ra,32(sp)
 80054f8:	ddc00717 	ldw	r23,28(sp)
 80054fc:	dd800617 	ldw	r22,24(sp)
 8005500:	dd400517 	ldw	r21,20(sp)
 8005504:	dd000417 	ldw	r20,16(sp)
 8005508:	dcc00317 	ldw	r19,12(sp)
 800550c:	dc800217 	ldw	r18,8(sp)
 8005510:	dc400117 	ldw	r17,4(sp)
 8005514:	dc000017 	ldw	r16,0(sp)
 8005518:	dec00904 	addi	sp,sp,36
 800551c:	f800283a 	ret
 8005520:	002f883a 	mov	r23,zero
 8005524:	003ff206 	br	80054f0 <__alt_data_end+0xf80054f0>

08005528 <_fwalk_reent>:
 8005528:	defff704 	addi	sp,sp,-36
 800552c:	dd000415 	stw	r20,16(sp)
 8005530:	dfc00815 	stw	ra,32(sp)
 8005534:	ddc00715 	stw	r23,28(sp)
 8005538:	dd800615 	stw	r22,24(sp)
 800553c:	dd400515 	stw	r21,20(sp)
 8005540:	dcc00315 	stw	r19,12(sp)
 8005544:	dc800215 	stw	r18,8(sp)
 8005548:	dc400115 	stw	r17,4(sp)
 800554c:	dc000015 	stw	r16,0(sp)
 8005550:	2500b804 	addi	r20,r4,736
 8005554:	a0002326 	beq	r20,zero,80055e4 <_fwalk_reent+0xbc>
 8005558:	282b883a 	mov	r21,r5
 800555c:	2027883a 	mov	r19,r4
 8005560:	002f883a 	mov	r23,zero
 8005564:	05800044 	movi	r22,1
 8005568:	04bfffc4 	movi	r18,-1
 800556c:	a4400117 	ldw	r17,4(r20)
 8005570:	a4000217 	ldw	r16,8(r20)
 8005574:	8c7fffc4 	addi	r17,r17,-1
 8005578:	88000c16 	blt	r17,zero,80055ac <_fwalk_reent+0x84>
 800557c:	84000304 	addi	r16,r16,12
 8005580:	8080000b 	ldhu	r2,0(r16)
 8005584:	8c7fffc4 	addi	r17,r17,-1
 8005588:	817ffd04 	addi	r5,r16,-12
 800558c:	b080052e 	bgeu	r22,r2,80055a4 <_fwalk_reent+0x7c>
 8005590:	8080008f 	ldh	r2,2(r16)
 8005594:	9809883a 	mov	r4,r19
 8005598:	14800226 	beq	r2,r18,80055a4 <_fwalk_reent+0x7c>
 800559c:	a83ee83a 	callr	r21
 80055a0:	b8aeb03a 	or	r23,r23,r2
 80055a4:	84001a04 	addi	r16,r16,104
 80055a8:	8cbff51e 	bne	r17,r18,8005580 <__alt_data_end+0xf8005580>
 80055ac:	a5000017 	ldw	r20,0(r20)
 80055b0:	a03fee1e 	bne	r20,zero,800556c <__alt_data_end+0xf800556c>
 80055b4:	b805883a 	mov	r2,r23
 80055b8:	dfc00817 	ldw	ra,32(sp)
 80055bc:	ddc00717 	ldw	r23,28(sp)
 80055c0:	dd800617 	ldw	r22,24(sp)
 80055c4:	dd400517 	ldw	r21,20(sp)
 80055c8:	dd000417 	ldw	r20,16(sp)
 80055cc:	dcc00317 	ldw	r19,12(sp)
 80055d0:	dc800217 	ldw	r18,8(sp)
 80055d4:	dc400117 	ldw	r17,4(sp)
 80055d8:	dc000017 	ldw	r16,0(sp)
 80055dc:	dec00904 	addi	sp,sp,36
 80055e0:	f800283a 	ret
 80055e4:	002f883a 	mov	r23,zero
 80055e8:	003ff206 	br	80055b4 <__alt_data_end+0xf80055b4>

080055ec <_setlocale_r>:
 80055ec:	30001b26 	beq	r6,zero,800565c <_setlocale_r+0x70>
 80055f0:	014200b4 	movhi	r5,2050
 80055f4:	defffe04 	addi	sp,sp,-8
 80055f8:	2963f804 	addi	r5,r5,-28704
 80055fc:	3009883a 	mov	r4,r6
 8005600:	dc000015 	stw	r16,0(sp)
 8005604:	dfc00115 	stw	ra,4(sp)
 8005608:	3021883a 	mov	r16,r6
 800560c:	8007ca40 	call	8007ca4 <strcmp>
 8005610:	1000061e 	bne	r2,zero,800562c <_setlocale_r+0x40>
 8005614:	008200b4 	movhi	r2,2050
 8005618:	10a3f704 	addi	r2,r2,-28708
 800561c:	dfc00117 	ldw	ra,4(sp)
 8005620:	dc000017 	ldw	r16,0(sp)
 8005624:	dec00204 	addi	sp,sp,8
 8005628:	f800283a 	ret
 800562c:	014200b4 	movhi	r5,2050
 8005630:	2963f704 	addi	r5,r5,-28708
 8005634:	8009883a 	mov	r4,r16
 8005638:	8007ca40 	call	8007ca4 <strcmp>
 800563c:	103ff526 	beq	r2,zero,8005614 <__alt_data_end+0xf8005614>
 8005640:	014200b4 	movhi	r5,2050
 8005644:	2963e204 	addi	r5,r5,-28792
 8005648:	8009883a 	mov	r4,r16
 800564c:	8007ca40 	call	8007ca4 <strcmp>
 8005650:	103ff026 	beq	r2,zero,8005614 <__alt_data_end+0xf8005614>
 8005654:	0005883a 	mov	r2,zero
 8005658:	003ff006 	br	800561c <__alt_data_end+0xf800561c>
 800565c:	008200b4 	movhi	r2,2050
 8005660:	10a3f704 	addi	r2,r2,-28708
 8005664:	f800283a 	ret

08005668 <__locale_charset>:
 8005668:	008200b4 	movhi	r2,2050
 800566c:	10a5f604 	addi	r2,r2,-26664
 8005670:	f800283a 	ret

08005674 <__locale_mb_cur_max>:
 8005674:	008200b4 	movhi	r2,2050
 8005678:	10aba004 	addi	r2,r2,-20864
 800567c:	10800017 	ldw	r2,0(r2)
 8005680:	f800283a 	ret

08005684 <__locale_msgcharset>:
 8005684:	008200b4 	movhi	r2,2050
 8005688:	10a5ee04 	addi	r2,r2,-26696
 800568c:	f800283a 	ret

08005690 <__locale_cjk_lang>:
 8005690:	0005883a 	mov	r2,zero
 8005694:	f800283a 	ret

08005698 <_localeconv_r>:
 8005698:	008200b4 	movhi	r2,2050
 800569c:	10a5fe04 	addi	r2,r2,-26632
 80056a0:	f800283a 	ret

080056a4 <setlocale>:
 80056a4:	008200b4 	movhi	r2,2050
 80056a8:	10ab9f04 	addi	r2,r2,-20868
 80056ac:	280d883a 	mov	r6,r5
 80056b0:	200b883a 	mov	r5,r4
 80056b4:	11000017 	ldw	r4,0(r2)
 80056b8:	80055ec1 	jmpi	80055ec <_setlocale_r>

080056bc <localeconv>:
 80056bc:	008200b4 	movhi	r2,2050
 80056c0:	10a5fe04 	addi	r2,r2,-26632
 80056c4:	f800283a 	ret

080056c8 <__smakebuf_r>:
 80056c8:	2880030b 	ldhu	r2,12(r5)
 80056cc:	10c0008c 	andi	r3,r2,2
 80056d0:	1800411e 	bne	r3,zero,80057d8 <__smakebuf_r+0x110>
 80056d4:	deffec04 	addi	sp,sp,-80
 80056d8:	dc000f15 	stw	r16,60(sp)
 80056dc:	2821883a 	mov	r16,r5
 80056e0:	2940038f 	ldh	r5,14(r5)
 80056e4:	dc401015 	stw	r17,64(sp)
 80056e8:	dfc01315 	stw	ra,76(sp)
 80056ec:	dcc01215 	stw	r19,72(sp)
 80056f0:	dc801115 	stw	r18,68(sp)
 80056f4:	2023883a 	mov	r17,r4
 80056f8:	28001c16 	blt	r5,zero,800576c <__smakebuf_r+0xa4>
 80056fc:	d80d883a 	mov	r6,sp
 8005700:	800984c0 	call	800984c <_fstat_r>
 8005704:	10001816 	blt	r2,zero,8005768 <__smakebuf_r+0xa0>
 8005708:	d8800117 	ldw	r2,4(sp)
 800570c:	00e00014 	movui	r3,32768
 8005710:	10bc000c 	andi	r2,r2,61440
 8005714:	14c80020 	cmpeqi	r19,r2,8192
 8005718:	10c03726 	beq	r2,r3,80057f8 <__smakebuf_r+0x130>
 800571c:	80c0030b 	ldhu	r3,12(r16)
 8005720:	18c20014 	ori	r3,r3,2048
 8005724:	80c0030d 	sth	r3,12(r16)
 8005728:	00c80004 	movi	r3,8192
 800572c:	10c0521e 	bne	r2,r3,8005878 <__smakebuf_r+0x1b0>
 8005730:	8140038f 	ldh	r5,14(r16)
 8005734:	8809883a 	mov	r4,r17
 8005738:	80098a80 	call	80098a8 <_isatty_r>
 800573c:	10004c26 	beq	r2,zero,8005870 <__smakebuf_r+0x1a8>
 8005740:	8080030b 	ldhu	r2,12(r16)
 8005744:	80c010c4 	addi	r3,r16,67
 8005748:	80c00015 	stw	r3,0(r16)
 800574c:	10800054 	ori	r2,r2,1
 8005750:	8080030d 	sth	r2,12(r16)
 8005754:	00800044 	movi	r2,1
 8005758:	80c00415 	stw	r3,16(r16)
 800575c:	80800515 	stw	r2,20(r16)
 8005760:	04810004 	movi	r18,1024
 8005764:	00000706 	br	8005784 <__smakebuf_r+0xbc>
 8005768:	8080030b 	ldhu	r2,12(r16)
 800576c:	10c0200c 	andi	r3,r2,128
 8005770:	18001f1e 	bne	r3,zero,80057f0 <__smakebuf_r+0x128>
 8005774:	04810004 	movi	r18,1024
 8005778:	10820014 	ori	r2,r2,2048
 800577c:	8080030d 	sth	r2,12(r16)
 8005780:	0027883a 	mov	r19,zero
 8005784:	900b883a 	mov	r5,r18
 8005788:	8809883a 	mov	r4,r17
 800578c:	80058840 	call	8005884 <_malloc_r>
 8005790:	10002c26 	beq	r2,zero,8005844 <__smakebuf_r+0x17c>
 8005794:	80c0030b 	ldhu	r3,12(r16)
 8005798:	01020034 	movhi	r4,2048
 800579c:	2111f704 	addi	r4,r4,18396
 80057a0:	89000f15 	stw	r4,60(r17)
 80057a4:	18c02014 	ori	r3,r3,128
 80057a8:	80c0030d 	sth	r3,12(r16)
 80057ac:	80800015 	stw	r2,0(r16)
 80057b0:	80800415 	stw	r2,16(r16)
 80057b4:	84800515 	stw	r18,20(r16)
 80057b8:	98001a1e 	bne	r19,zero,8005824 <__smakebuf_r+0x15c>
 80057bc:	dfc01317 	ldw	ra,76(sp)
 80057c0:	dcc01217 	ldw	r19,72(sp)
 80057c4:	dc801117 	ldw	r18,68(sp)
 80057c8:	dc401017 	ldw	r17,64(sp)
 80057cc:	dc000f17 	ldw	r16,60(sp)
 80057d0:	dec01404 	addi	sp,sp,80
 80057d4:	f800283a 	ret
 80057d8:	288010c4 	addi	r2,r5,67
 80057dc:	28800015 	stw	r2,0(r5)
 80057e0:	28800415 	stw	r2,16(r5)
 80057e4:	00800044 	movi	r2,1
 80057e8:	28800515 	stw	r2,20(r5)
 80057ec:	f800283a 	ret
 80057f0:	04801004 	movi	r18,64
 80057f4:	003fe006 	br	8005778 <__alt_data_end+0xf8005778>
 80057f8:	81000a17 	ldw	r4,40(r16)
 80057fc:	00c20034 	movhi	r3,2048
 8005800:	18df1004 	addi	r3,r3,31808
 8005804:	20ffc51e 	bne	r4,r3,800571c <__alt_data_end+0xf800571c>
 8005808:	8080030b 	ldhu	r2,12(r16)
 800580c:	04810004 	movi	r18,1024
 8005810:	84801315 	stw	r18,76(r16)
 8005814:	1484b03a 	or	r2,r2,r18
 8005818:	8080030d 	sth	r2,12(r16)
 800581c:	0027883a 	mov	r19,zero
 8005820:	003fd806 	br	8005784 <__alt_data_end+0xf8005784>
 8005824:	8140038f 	ldh	r5,14(r16)
 8005828:	8809883a 	mov	r4,r17
 800582c:	80098a80 	call	80098a8 <_isatty_r>
 8005830:	103fe226 	beq	r2,zero,80057bc <__alt_data_end+0xf80057bc>
 8005834:	8080030b 	ldhu	r2,12(r16)
 8005838:	10800054 	ori	r2,r2,1
 800583c:	8080030d 	sth	r2,12(r16)
 8005840:	003fde06 	br	80057bc <__alt_data_end+0xf80057bc>
 8005844:	8080030b 	ldhu	r2,12(r16)
 8005848:	10c0800c 	andi	r3,r2,512
 800584c:	183fdb1e 	bne	r3,zero,80057bc <__alt_data_end+0xf80057bc>
 8005850:	10800094 	ori	r2,r2,2
 8005854:	80c010c4 	addi	r3,r16,67
 8005858:	8080030d 	sth	r2,12(r16)
 800585c:	00800044 	movi	r2,1
 8005860:	80c00015 	stw	r3,0(r16)
 8005864:	80c00415 	stw	r3,16(r16)
 8005868:	80800515 	stw	r2,20(r16)
 800586c:	003fd306 	br	80057bc <__alt_data_end+0xf80057bc>
 8005870:	04810004 	movi	r18,1024
 8005874:	003fc306 	br	8005784 <__alt_data_end+0xf8005784>
 8005878:	0027883a 	mov	r19,zero
 800587c:	04810004 	movi	r18,1024
 8005880:	003fc006 	br	8005784 <__alt_data_end+0xf8005784>

08005884 <_malloc_r>:
 8005884:	defff504 	addi	sp,sp,-44
 8005888:	dc800315 	stw	r18,12(sp)
 800588c:	dfc00a15 	stw	ra,40(sp)
 8005890:	df000915 	stw	fp,36(sp)
 8005894:	ddc00815 	stw	r23,32(sp)
 8005898:	dd800715 	stw	r22,28(sp)
 800589c:	dd400615 	stw	r21,24(sp)
 80058a0:	dd000515 	stw	r20,20(sp)
 80058a4:	dcc00415 	stw	r19,16(sp)
 80058a8:	dc400215 	stw	r17,8(sp)
 80058ac:	dc000115 	stw	r16,4(sp)
 80058b0:	288002c4 	addi	r2,r5,11
 80058b4:	00c00584 	movi	r3,22
 80058b8:	2025883a 	mov	r18,r4
 80058bc:	18807f2e 	bgeu	r3,r2,8005abc <_malloc_r+0x238>
 80058c0:	047ffe04 	movi	r17,-8
 80058c4:	1462703a 	and	r17,r2,r17
 80058c8:	8800a316 	blt	r17,zero,8005b58 <_malloc_r+0x2d4>
 80058cc:	8940a236 	bltu	r17,r5,8005b58 <_malloc_r+0x2d4>
 80058d0:	800dcc80 	call	800dcc8 <__malloc_lock>
 80058d4:	00807dc4 	movi	r2,503
 80058d8:	1441e92e 	bgeu	r2,r17,8006080 <_malloc_r+0x7fc>
 80058dc:	8804d27a 	srli	r2,r17,9
 80058e0:	1000a126 	beq	r2,zero,8005b68 <_malloc_r+0x2e4>
 80058e4:	00c00104 	movi	r3,4
 80058e8:	18811e36 	bltu	r3,r2,8005d64 <_malloc_r+0x4e0>
 80058ec:	8804d1ba 	srli	r2,r17,6
 80058f0:	12000e44 	addi	r8,r2,57
 80058f4:	11c00e04 	addi	r7,r2,56
 80058f8:	4209883a 	add	r4,r8,r8
 80058fc:	04c200b4 	movhi	r19,2050
 8005900:	2109883a 	add	r4,r4,r4
 8005904:	9ce60c04 	addi	r19,r19,-26576
 8005908:	2109883a 	add	r4,r4,r4
 800590c:	9909883a 	add	r4,r19,r4
 8005910:	24000117 	ldw	r16,4(r4)
 8005914:	213ffe04 	addi	r4,r4,-8
 8005918:	24009726 	beq	r4,r16,8005b78 <_malloc_r+0x2f4>
 800591c:	80800117 	ldw	r2,4(r16)
 8005920:	01bfff04 	movi	r6,-4
 8005924:	014003c4 	movi	r5,15
 8005928:	1184703a 	and	r2,r2,r6
 800592c:	1447c83a 	sub	r3,r2,r17
 8005930:	28c00716 	blt	r5,r3,8005950 <_malloc_r+0xcc>
 8005934:	1800920e 	bge	r3,zero,8005b80 <_malloc_r+0x2fc>
 8005938:	84000317 	ldw	r16,12(r16)
 800593c:	24008e26 	beq	r4,r16,8005b78 <_malloc_r+0x2f4>
 8005940:	80800117 	ldw	r2,4(r16)
 8005944:	1184703a 	and	r2,r2,r6
 8005948:	1447c83a 	sub	r3,r2,r17
 800594c:	28fff90e 	bge	r5,r3,8005934 <__alt_data_end+0xf8005934>
 8005950:	3809883a 	mov	r4,r7
 8005954:	018200b4 	movhi	r6,2050
 8005958:	9c000417 	ldw	r16,16(r19)
 800595c:	31a60c04 	addi	r6,r6,-26576
 8005960:	32000204 	addi	r8,r6,8
 8005964:	82013426 	beq	r16,r8,8005e38 <_malloc_r+0x5b4>
 8005968:	80c00117 	ldw	r3,4(r16)
 800596c:	00bfff04 	movi	r2,-4
 8005970:	188e703a 	and	r7,r3,r2
 8005974:	3c45c83a 	sub	r2,r7,r17
 8005978:	00c003c4 	movi	r3,15
 800597c:	18811f16 	blt	r3,r2,8005dfc <_malloc_r+0x578>
 8005980:	32000515 	stw	r8,20(r6)
 8005984:	32000415 	stw	r8,16(r6)
 8005988:	10007f0e 	bge	r2,zero,8005b88 <_malloc_r+0x304>
 800598c:	00807fc4 	movi	r2,511
 8005990:	11c0fd36 	bltu	r2,r7,8005d88 <_malloc_r+0x504>
 8005994:	3806d0fa 	srli	r3,r7,3
 8005998:	01c00044 	movi	r7,1
 800599c:	30800117 	ldw	r2,4(r6)
 80059a0:	19400044 	addi	r5,r3,1
 80059a4:	294b883a 	add	r5,r5,r5
 80059a8:	1807d0ba 	srai	r3,r3,2
 80059ac:	294b883a 	add	r5,r5,r5
 80059b0:	294b883a 	add	r5,r5,r5
 80059b4:	298b883a 	add	r5,r5,r6
 80059b8:	38c6983a 	sll	r3,r7,r3
 80059bc:	29c00017 	ldw	r7,0(r5)
 80059c0:	2a7ffe04 	addi	r9,r5,-8
 80059c4:	1886b03a 	or	r3,r3,r2
 80059c8:	82400315 	stw	r9,12(r16)
 80059cc:	81c00215 	stw	r7,8(r16)
 80059d0:	30c00115 	stw	r3,4(r6)
 80059d4:	2c000015 	stw	r16,0(r5)
 80059d8:	3c000315 	stw	r16,12(r7)
 80059dc:	2005d0ba 	srai	r2,r4,2
 80059e0:	01400044 	movi	r5,1
 80059e4:	288a983a 	sll	r5,r5,r2
 80059e8:	19406f36 	bltu	r3,r5,8005ba8 <_malloc_r+0x324>
 80059ec:	28c4703a 	and	r2,r5,r3
 80059f0:	10000a1e 	bne	r2,zero,8005a1c <_malloc_r+0x198>
 80059f4:	00bfff04 	movi	r2,-4
 80059f8:	294b883a 	add	r5,r5,r5
 80059fc:	2088703a 	and	r4,r4,r2
 8005a00:	28c4703a 	and	r2,r5,r3
 8005a04:	21000104 	addi	r4,r4,4
 8005a08:	1000041e 	bne	r2,zero,8005a1c <_malloc_r+0x198>
 8005a0c:	294b883a 	add	r5,r5,r5
 8005a10:	28c4703a 	and	r2,r5,r3
 8005a14:	21000104 	addi	r4,r4,4
 8005a18:	103ffc26 	beq	r2,zero,8005a0c <__alt_data_end+0xf8005a0c>
 8005a1c:	02bfff04 	movi	r10,-4
 8005a20:	024003c4 	movi	r9,15
 8005a24:	21800044 	addi	r6,r4,1
 8005a28:	318d883a 	add	r6,r6,r6
 8005a2c:	318d883a 	add	r6,r6,r6
 8005a30:	318d883a 	add	r6,r6,r6
 8005a34:	998d883a 	add	r6,r19,r6
 8005a38:	333ffe04 	addi	r12,r6,-8
 8005a3c:	2017883a 	mov	r11,r4
 8005a40:	31800104 	addi	r6,r6,4
 8005a44:	34000017 	ldw	r16,0(r6)
 8005a48:	31fffd04 	addi	r7,r6,-12
 8005a4c:	81c0041e 	bne	r16,r7,8005a60 <_malloc_r+0x1dc>
 8005a50:	0000fb06 	br	8005e40 <_malloc_r+0x5bc>
 8005a54:	1801030e 	bge	r3,zero,8005e64 <_malloc_r+0x5e0>
 8005a58:	84000317 	ldw	r16,12(r16)
 8005a5c:	81c0f826 	beq	r16,r7,8005e40 <_malloc_r+0x5bc>
 8005a60:	80800117 	ldw	r2,4(r16)
 8005a64:	1284703a 	and	r2,r2,r10
 8005a68:	1447c83a 	sub	r3,r2,r17
 8005a6c:	48fff90e 	bge	r9,r3,8005a54 <__alt_data_end+0xf8005a54>
 8005a70:	80800317 	ldw	r2,12(r16)
 8005a74:	81000217 	ldw	r4,8(r16)
 8005a78:	89400054 	ori	r5,r17,1
 8005a7c:	81400115 	stw	r5,4(r16)
 8005a80:	20800315 	stw	r2,12(r4)
 8005a84:	11000215 	stw	r4,8(r2)
 8005a88:	8463883a 	add	r17,r16,r17
 8005a8c:	9c400515 	stw	r17,20(r19)
 8005a90:	9c400415 	stw	r17,16(r19)
 8005a94:	18800054 	ori	r2,r3,1
 8005a98:	88800115 	stw	r2,4(r17)
 8005a9c:	8a000315 	stw	r8,12(r17)
 8005aa0:	8a000215 	stw	r8,8(r17)
 8005aa4:	88e3883a 	add	r17,r17,r3
 8005aa8:	88c00015 	stw	r3,0(r17)
 8005aac:	9009883a 	mov	r4,r18
 8005ab0:	800dde80 	call	800dde8 <__malloc_unlock>
 8005ab4:	80800204 	addi	r2,r16,8
 8005ab8:	00001b06 	br	8005b28 <_malloc_r+0x2a4>
 8005abc:	04400404 	movi	r17,16
 8005ac0:	89402536 	bltu	r17,r5,8005b58 <_malloc_r+0x2d4>
 8005ac4:	800dcc80 	call	800dcc8 <__malloc_lock>
 8005ac8:	00800184 	movi	r2,6
 8005acc:	01000084 	movi	r4,2
 8005ad0:	04c200b4 	movhi	r19,2050
 8005ad4:	1085883a 	add	r2,r2,r2
 8005ad8:	9ce60c04 	addi	r19,r19,-26576
 8005adc:	1085883a 	add	r2,r2,r2
 8005ae0:	9885883a 	add	r2,r19,r2
 8005ae4:	14000117 	ldw	r16,4(r2)
 8005ae8:	10fffe04 	addi	r3,r2,-8
 8005aec:	80c0d926 	beq	r16,r3,8005e54 <_malloc_r+0x5d0>
 8005af0:	80c00117 	ldw	r3,4(r16)
 8005af4:	81000317 	ldw	r4,12(r16)
 8005af8:	00bfff04 	movi	r2,-4
 8005afc:	1884703a 	and	r2,r3,r2
 8005b00:	81400217 	ldw	r5,8(r16)
 8005b04:	8085883a 	add	r2,r16,r2
 8005b08:	10c00117 	ldw	r3,4(r2)
 8005b0c:	29000315 	stw	r4,12(r5)
 8005b10:	21400215 	stw	r5,8(r4)
 8005b14:	18c00054 	ori	r3,r3,1
 8005b18:	10c00115 	stw	r3,4(r2)
 8005b1c:	9009883a 	mov	r4,r18
 8005b20:	800dde80 	call	800dde8 <__malloc_unlock>
 8005b24:	80800204 	addi	r2,r16,8
 8005b28:	dfc00a17 	ldw	ra,40(sp)
 8005b2c:	df000917 	ldw	fp,36(sp)
 8005b30:	ddc00817 	ldw	r23,32(sp)
 8005b34:	dd800717 	ldw	r22,28(sp)
 8005b38:	dd400617 	ldw	r21,24(sp)
 8005b3c:	dd000517 	ldw	r20,20(sp)
 8005b40:	dcc00417 	ldw	r19,16(sp)
 8005b44:	dc800317 	ldw	r18,12(sp)
 8005b48:	dc400217 	ldw	r17,8(sp)
 8005b4c:	dc000117 	ldw	r16,4(sp)
 8005b50:	dec00b04 	addi	sp,sp,44
 8005b54:	f800283a 	ret
 8005b58:	00800304 	movi	r2,12
 8005b5c:	90800015 	stw	r2,0(r18)
 8005b60:	0005883a 	mov	r2,zero
 8005b64:	003ff006 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005b68:	01002004 	movi	r4,128
 8005b6c:	02001004 	movi	r8,64
 8005b70:	01c00fc4 	movi	r7,63
 8005b74:	003f6106 	br	80058fc <__alt_data_end+0xf80058fc>
 8005b78:	4009883a 	mov	r4,r8
 8005b7c:	003f7506 	br	8005954 <__alt_data_end+0xf8005954>
 8005b80:	81000317 	ldw	r4,12(r16)
 8005b84:	003fde06 	br	8005b00 <__alt_data_end+0xf8005b00>
 8005b88:	81c5883a 	add	r2,r16,r7
 8005b8c:	11400117 	ldw	r5,4(r2)
 8005b90:	9009883a 	mov	r4,r18
 8005b94:	29400054 	ori	r5,r5,1
 8005b98:	11400115 	stw	r5,4(r2)
 8005b9c:	800dde80 	call	800dde8 <__malloc_unlock>
 8005ba0:	80800204 	addi	r2,r16,8
 8005ba4:	003fe006 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005ba8:	9c000217 	ldw	r16,8(r19)
 8005bac:	00bfff04 	movi	r2,-4
 8005bb0:	85800117 	ldw	r22,4(r16)
 8005bb4:	b0ac703a 	and	r22,r22,r2
 8005bb8:	b4400336 	bltu	r22,r17,8005bc8 <_malloc_r+0x344>
 8005bbc:	b445c83a 	sub	r2,r22,r17
 8005bc0:	00c003c4 	movi	r3,15
 8005bc4:	18805d16 	blt	r3,r2,8005d3c <_malloc_r+0x4b8>
 8005bc8:	05c200b4 	movhi	r23,2050
 8005bcc:	008200b4 	movhi	r2,2050
 8005bd0:	10b2bc04 	addi	r2,r2,-13584
 8005bd4:	bdeba104 	addi	r23,r23,-20860
 8005bd8:	15400017 	ldw	r21,0(r2)
 8005bdc:	b8c00017 	ldw	r3,0(r23)
 8005be0:	00bfffc4 	movi	r2,-1
 8005be4:	858d883a 	add	r6,r16,r22
 8005be8:	8d6b883a 	add	r21,r17,r21
 8005bec:	1880ea26 	beq	r3,r2,8005f98 <_malloc_r+0x714>
 8005bf0:	ad4403c4 	addi	r21,r21,4111
 8005bf4:	00bc0004 	movi	r2,-4096
 8005bf8:	a8aa703a 	and	r21,r21,r2
 8005bfc:	a80b883a 	mov	r5,r21
 8005c00:	9009883a 	mov	r4,r18
 8005c04:	d9800015 	stw	r6,0(sp)
 8005c08:	8007b140 	call	8007b14 <_sbrk_r>
 8005c0c:	1029883a 	mov	r20,r2
 8005c10:	00bfffc4 	movi	r2,-1
 8005c14:	d9800017 	ldw	r6,0(sp)
 8005c18:	a080e826 	beq	r20,r2,8005fbc <_malloc_r+0x738>
 8005c1c:	a180a636 	bltu	r20,r6,8005eb8 <_malloc_r+0x634>
 8005c20:	070200b4 	movhi	fp,2050
 8005c24:	e732de04 	addi	fp,fp,-13448
 8005c28:	e0800017 	ldw	r2,0(fp)
 8005c2c:	a887883a 	add	r3,r21,r2
 8005c30:	e0c00015 	stw	r3,0(fp)
 8005c34:	3500e626 	beq	r6,r20,8005fd0 <_malloc_r+0x74c>
 8005c38:	b9000017 	ldw	r4,0(r23)
 8005c3c:	00bfffc4 	movi	r2,-1
 8005c40:	2080ee26 	beq	r4,r2,8005ffc <_malloc_r+0x778>
 8005c44:	a185c83a 	sub	r2,r20,r6
 8005c48:	10c5883a 	add	r2,r2,r3
 8005c4c:	e0800015 	stw	r2,0(fp)
 8005c50:	a0c001cc 	andi	r3,r20,7
 8005c54:	1800bc26 	beq	r3,zero,8005f48 <_malloc_r+0x6c4>
 8005c58:	a0e9c83a 	sub	r20,r20,r3
 8005c5c:	00840204 	movi	r2,4104
 8005c60:	a5000204 	addi	r20,r20,8
 8005c64:	10c7c83a 	sub	r3,r2,r3
 8005c68:	a545883a 	add	r2,r20,r21
 8005c6c:	1083ffcc 	andi	r2,r2,4095
 8005c70:	18abc83a 	sub	r21,r3,r2
 8005c74:	a80b883a 	mov	r5,r21
 8005c78:	9009883a 	mov	r4,r18
 8005c7c:	8007b140 	call	8007b14 <_sbrk_r>
 8005c80:	00ffffc4 	movi	r3,-1
 8005c84:	10c0e126 	beq	r2,r3,800600c <_malloc_r+0x788>
 8005c88:	1505c83a 	sub	r2,r2,r20
 8005c8c:	1545883a 	add	r2,r2,r21
 8005c90:	10800054 	ori	r2,r2,1
 8005c94:	e0c00017 	ldw	r3,0(fp)
 8005c98:	9d000215 	stw	r20,8(r19)
 8005c9c:	a0800115 	stw	r2,4(r20)
 8005ca0:	a8c7883a 	add	r3,r21,r3
 8005ca4:	e0c00015 	stw	r3,0(fp)
 8005ca8:	84c00e26 	beq	r16,r19,8005ce4 <_malloc_r+0x460>
 8005cac:	018003c4 	movi	r6,15
 8005cb0:	3580a72e 	bgeu	r6,r22,8005f50 <_malloc_r+0x6cc>
 8005cb4:	81400117 	ldw	r5,4(r16)
 8005cb8:	013ffe04 	movi	r4,-8
 8005cbc:	b0bffd04 	addi	r2,r22,-12
 8005cc0:	1104703a 	and	r2,r2,r4
 8005cc4:	2900004c 	andi	r4,r5,1
 8005cc8:	2088b03a 	or	r4,r4,r2
 8005ccc:	81000115 	stw	r4,4(r16)
 8005cd0:	01400144 	movi	r5,5
 8005cd4:	8089883a 	add	r4,r16,r2
 8005cd8:	21400115 	stw	r5,4(r4)
 8005cdc:	21400215 	stw	r5,8(r4)
 8005ce0:	3080cd36 	bltu	r6,r2,8006018 <_malloc_r+0x794>
 8005ce4:	008200b4 	movhi	r2,2050
 8005ce8:	10b2bb04 	addi	r2,r2,-13588
 8005cec:	11000017 	ldw	r4,0(r2)
 8005cf0:	20c0012e 	bgeu	r4,r3,8005cf8 <_malloc_r+0x474>
 8005cf4:	10c00015 	stw	r3,0(r2)
 8005cf8:	008200b4 	movhi	r2,2050
 8005cfc:	10b2ba04 	addi	r2,r2,-13592
 8005d00:	11000017 	ldw	r4,0(r2)
 8005d04:	9c000217 	ldw	r16,8(r19)
 8005d08:	20c0012e 	bgeu	r4,r3,8005d10 <_malloc_r+0x48c>
 8005d0c:	10c00015 	stw	r3,0(r2)
 8005d10:	80c00117 	ldw	r3,4(r16)
 8005d14:	00bfff04 	movi	r2,-4
 8005d18:	1886703a 	and	r3,r3,r2
 8005d1c:	1c45c83a 	sub	r2,r3,r17
 8005d20:	1c400236 	bltu	r3,r17,8005d2c <_malloc_r+0x4a8>
 8005d24:	00c003c4 	movi	r3,15
 8005d28:	18800416 	blt	r3,r2,8005d3c <_malloc_r+0x4b8>
 8005d2c:	9009883a 	mov	r4,r18
 8005d30:	800dde80 	call	800dde8 <__malloc_unlock>
 8005d34:	0005883a 	mov	r2,zero
 8005d38:	003f7b06 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005d3c:	88c00054 	ori	r3,r17,1
 8005d40:	80c00115 	stw	r3,4(r16)
 8005d44:	8463883a 	add	r17,r16,r17
 8005d48:	10800054 	ori	r2,r2,1
 8005d4c:	9c400215 	stw	r17,8(r19)
 8005d50:	88800115 	stw	r2,4(r17)
 8005d54:	9009883a 	mov	r4,r18
 8005d58:	800dde80 	call	800dde8 <__malloc_unlock>
 8005d5c:	80800204 	addi	r2,r16,8
 8005d60:	003f7106 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005d64:	00c00504 	movi	r3,20
 8005d68:	18804a2e 	bgeu	r3,r2,8005e94 <_malloc_r+0x610>
 8005d6c:	00c01504 	movi	r3,84
 8005d70:	18806e36 	bltu	r3,r2,8005f2c <_malloc_r+0x6a8>
 8005d74:	8804d33a 	srli	r2,r17,12
 8005d78:	12001bc4 	addi	r8,r2,111
 8005d7c:	11c01b84 	addi	r7,r2,110
 8005d80:	4209883a 	add	r4,r8,r8
 8005d84:	003edd06 	br	80058fc <__alt_data_end+0xf80058fc>
 8005d88:	3804d27a 	srli	r2,r7,9
 8005d8c:	00c00104 	movi	r3,4
 8005d90:	1880442e 	bgeu	r3,r2,8005ea4 <_malloc_r+0x620>
 8005d94:	00c00504 	movi	r3,20
 8005d98:	18808136 	bltu	r3,r2,8005fa0 <_malloc_r+0x71c>
 8005d9c:	11401704 	addi	r5,r2,92
 8005da0:	10c016c4 	addi	r3,r2,91
 8005da4:	294b883a 	add	r5,r5,r5
 8005da8:	294b883a 	add	r5,r5,r5
 8005dac:	294b883a 	add	r5,r5,r5
 8005db0:	994b883a 	add	r5,r19,r5
 8005db4:	28800017 	ldw	r2,0(r5)
 8005db8:	018200b4 	movhi	r6,2050
 8005dbc:	297ffe04 	addi	r5,r5,-8
 8005dc0:	31a60c04 	addi	r6,r6,-26576
 8005dc4:	28806526 	beq	r5,r2,8005f5c <_malloc_r+0x6d8>
 8005dc8:	01bfff04 	movi	r6,-4
 8005dcc:	10c00117 	ldw	r3,4(r2)
 8005dd0:	1986703a 	and	r3,r3,r6
 8005dd4:	38c0022e 	bgeu	r7,r3,8005de0 <_malloc_r+0x55c>
 8005dd8:	10800217 	ldw	r2,8(r2)
 8005ddc:	28bffb1e 	bne	r5,r2,8005dcc <__alt_data_end+0xf8005dcc>
 8005de0:	11400317 	ldw	r5,12(r2)
 8005de4:	98c00117 	ldw	r3,4(r19)
 8005de8:	81400315 	stw	r5,12(r16)
 8005dec:	80800215 	stw	r2,8(r16)
 8005df0:	2c000215 	stw	r16,8(r5)
 8005df4:	14000315 	stw	r16,12(r2)
 8005df8:	003ef806 	br	80059dc <__alt_data_end+0xf80059dc>
 8005dfc:	88c00054 	ori	r3,r17,1
 8005e00:	80c00115 	stw	r3,4(r16)
 8005e04:	8463883a 	add	r17,r16,r17
 8005e08:	34400515 	stw	r17,20(r6)
 8005e0c:	34400415 	stw	r17,16(r6)
 8005e10:	10c00054 	ori	r3,r2,1
 8005e14:	8a000315 	stw	r8,12(r17)
 8005e18:	8a000215 	stw	r8,8(r17)
 8005e1c:	88c00115 	stw	r3,4(r17)
 8005e20:	88a3883a 	add	r17,r17,r2
 8005e24:	88800015 	stw	r2,0(r17)
 8005e28:	9009883a 	mov	r4,r18
 8005e2c:	800dde80 	call	800dde8 <__malloc_unlock>
 8005e30:	80800204 	addi	r2,r16,8
 8005e34:	003f3c06 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005e38:	30c00117 	ldw	r3,4(r6)
 8005e3c:	003ee706 	br	80059dc <__alt_data_end+0xf80059dc>
 8005e40:	5ac00044 	addi	r11,r11,1
 8005e44:	588000cc 	andi	r2,r11,3
 8005e48:	31800204 	addi	r6,r6,8
 8005e4c:	103efd1e 	bne	r2,zero,8005a44 <__alt_data_end+0xf8005a44>
 8005e50:	00002406 	br	8005ee4 <_malloc_r+0x660>
 8005e54:	14000317 	ldw	r16,12(r2)
 8005e58:	143f251e 	bne	r2,r16,8005af0 <__alt_data_end+0xf8005af0>
 8005e5c:	21000084 	addi	r4,r4,2
 8005e60:	003ebc06 	br	8005954 <__alt_data_end+0xf8005954>
 8005e64:	8085883a 	add	r2,r16,r2
 8005e68:	10c00117 	ldw	r3,4(r2)
 8005e6c:	81000317 	ldw	r4,12(r16)
 8005e70:	81400217 	ldw	r5,8(r16)
 8005e74:	18c00054 	ori	r3,r3,1
 8005e78:	10c00115 	stw	r3,4(r2)
 8005e7c:	29000315 	stw	r4,12(r5)
 8005e80:	21400215 	stw	r5,8(r4)
 8005e84:	9009883a 	mov	r4,r18
 8005e88:	800dde80 	call	800dde8 <__malloc_unlock>
 8005e8c:	80800204 	addi	r2,r16,8
 8005e90:	003f2506 	br	8005b28 <__alt_data_end+0xf8005b28>
 8005e94:	12001704 	addi	r8,r2,92
 8005e98:	11c016c4 	addi	r7,r2,91
 8005e9c:	4209883a 	add	r4,r8,r8
 8005ea0:	003e9606 	br	80058fc <__alt_data_end+0xf80058fc>
 8005ea4:	3804d1ba 	srli	r2,r7,6
 8005ea8:	11400e44 	addi	r5,r2,57
 8005eac:	10c00e04 	addi	r3,r2,56
 8005eb0:	294b883a 	add	r5,r5,r5
 8005eb4:	003fbc06 	br	8005da8 <__alt_data_end+0xf8005da8>
 8005eb8:	84ff5926 	beq	r16,r19,8005c20 <__alt_data_end+0xf8005c20>
 8005ebc:	008200b4 	movhi	r2,2050
 8005ec0:	10a60c04 	addi	r2,r2,-26576
 8005ec4:	14000217 	ldw	r16,8(r2)
 8005ec8:	00bfff04 	movi	r2,-4
 8005ecc:	80c00117 	ldw	r3,4(r16)
 8005ed0:	1886703a 	and	r3,r3,r2
 8005ed4:	003f9106 	br	8005d1c <__alt_data_end+0xf8005d1c>
 8005ed8:	60800217 	ldw	r2,8(r12)
 8005edc:	213fffc4 	addi	r4,r4,-1
 8005ee0:	1300651e 	bne	r2,r12,8006078 <_malloc_r+0x7f4>
 8005ee4:	208000cc 	andi	r2,r4,3
 8005ee8:	633ffe04 	addi	r12,r12,-8
 8005eec:	103ffa1e 	bne	r2,zero,8005ed8 <__alt_data_end+0xf8005ed8>
 8005ef0:	98800117 	ldw	r2,4(r19)
 8005ef4:	0146303a 	nor	r3,zero,r5
 8005ef8:	1884703a 	and	r2,r3,r2
 8005efc:	98800115 	stw	r2,4(r19)
 8005f00:	294b883a 	add	r5,r5,r5
 8005f04:	117f2836 	bltu	r2,r5,8005ba8 <__alt_data_end+0xf8005ba8>
 8005f08:	283f2726 	beq	r5,zero,8005ba8 <__alt_data_end+0xf8005ba8>
 8005f0c:	2886703a 	and	r3,r5,r2
 8005f10:	5809883a 	mov	r4,r11
 8005f14:	183ec31e 	bne	r3,zero,8005a24 <__alt_data_end+0xf8005a24>
 8005f18:	294b883a 	add	r5,r5,r5
 8005f1c:	2886703a 	and	r3,r5,r2
 8005f20:	21000104 	addi	r4,r4,4
 8005f24:	183ffc26 	beq	r3,zero,8005f18 <__alt_data_end+0xf8005f18>
 8005f28:	003ebe06 	br	8005a24 <__alt_data_end+0xf8005a24>
 8005f2c:	00c05504 	movi	r3,340
 8005f30:	18801236 	bltu	r3,r2,8005f7c <_malloc_r+0x6f8>
 8005f34:	8804d3fa 	srli	r2,r17,15
 8005f38:	12001e04 	addi	r8,r2,120
 8005f3c:	11c01dc4 	addi	r7,r2,119
 8005f40:	4209883a 	add	r4,r8,r8
 8005f44:	003e6d06 	br	80058fc <__alt_data_end+0xf80058fc>
 8005f48:	00c40004 	movi	r3,4096
 8005f4c:	003f4606 	br	8005c68 <__alt_data_end+0xf8005c68>
 8005f50:	00800044 	movi	r2,1
 8005f54:	a0800115 	stw	r2,4(r20)
 8005f58:	003f7406 	br	8005d2c <__alt_data_end+0xf8005d2c>
 8005f5c:	1805d0ba 	srai	r2,r3,2
 8005f60:	01c00044 	movi	r7,1
 8005f64:	30c00117 	ldw	r3,4(r6)
 8005f68:	388e983a 	sll	r7,r7,r2
 8005f6c:	2805883a 	mov	r2,r5
 8005f70:	38c6b03a 	or	r3,r7,r3
 8005f74:	30c00115 	stw	r3,4(r6)
 8005f78:	003f9b06 	br	8005de8 <__alt_data_end+0xf8005de8>
 8005f7c:	00c15504 	movi	r3,1364
 8005f80:	18801a36 	bltu	r3,r2,8005fec <_malloc_r+0x768>
 8005f84:	8804d4ba 	srli	r2,r17,18
 8005f88:	12001f44 	addi	r8,r2,125
 8005f8c:	11c01f04 	addi	r7,r2,124
 8005f90:	4209883a 	add	r4,r8,r8
 8005f94:	003e5906 	br	80058fc <__alt_data_end+0xf80058fc>
 8005f98:	ad400404 	addi	r21,r21,16
 8005f9c:	003f1706 	br	8005bfc <__alt_data_end+0xf8005bfc>
 8005fa0:	00c01504 	movi	r3,84
 8005fa4:	18802336 	bltu	r3,r2,8006034 <_malloc_r+0x7b0>
 8005fa8:	3804d33a 	srli	r2,r7,12
 8005fac:	11401bc4 	addi	r5,r2,111
 8005fb0:	10c01b84 	addi	r3,r2,110
 8005fb4:	294b883a 	add	r5,r5,r5
 8005fb8:	003f7b06 	br	8005da8 <__alt_data_end+0xf8005da8>
 8005fbc:	9c000217 	ldw	r16,8(r19)
 8005fc0:	00bfff04 	movi	r2,-4
 8005fc4:	80c00117 	ldw	r3,4(r16)
 8005fc8:	1886703a 	and	r3,r3,r2
 8005fcc:	003f5306 	br	8005d1c <__alt_data_end+0xf8005d1c>
 8005fd0:	3083ffcc 	andi	r2,r6,4095
 8005fd4:	103f181e 	bne	r2,zero,8005c38 <__alt_data_end+0xf8005c38>
 8005fd8:	99000217 	ldw	r4,8(r19)
 8005fdc:	b545883a 	add	r2,r22,r21
 8005fe0:	10800054 	ori	r2,r2,1
 8005fe4:	20800115 	stw	r2,4(r4)
 8005fe8:	003f3e06 	br	8005ce4 <__alt_data_end+0xf8005ce4>
 8005fec:	01003f84 	movi	r4,254
 8005ff0:	02001fc4 	movi	r8,127
 8005ff4:	01c01f84 	movi	r7,126
 8005ff8:	003e4006 	br	80058fc <__alt_data_end+0xf80058fc>
 8005ffc:	008200b4 	movhi	r2,2050
 8006000:	10aba104 	addi	r2,r2,-20860
 8006004:	15000015 	stw	r20,0(r2)
 8006008:	003f1106 	br	8005c50 <__alt_data_end+0xf8005c50>
 800600c:	00800044 	movi	r2,1
 8006010:	002b883a 	mov	r21,zero
 8006014:	003f1f06 	br	8005c94 <__alt_data_end+0xf8005c94>
 8006018:	81400204 	addi	r5,r16,8
 800601c:	9009883a 	mov	r4,r18
 8006020:	8004c980 	call	8004c98 <_free_r>
 8006024:	008200b4 	movhi	r2,2050
 8006028:	10b2de04 	addi	r2,r2,-13448
 800602c:	10c00017 	ldw	r3,0(r2)
 8006030:	003f2c06 	br	8005ce4 <__alt_data_end+0xf8005ce4>
 8006034:	00c05504 	movi	r3,340
 8006038:	18800536 	bltu	r3,r2,8006050 <_malloc_r+0x7cc>
 800603c:	3804d3fa 	srli	r2,r7,15
 8006040:	11401e04 	addi	r5,r2,120
 8006044:	10c01dc4 	addi	r3,r2,119
 8006048:	294b883a 	add	r5,r5,r5
 800604c:	003f5606 	br	8005da8 <__alt_data_end+0xf8005da8>
 8006050:	00c15504 	movi	r3,1364
 8006054:	18800536 	bltu	r3,r2,800606c <_malloc_r+0x7e8>
 8006058:	3804d4ba 	srli	r2,r7,18
 800605c:	11401f44 	addi	r5,r2,125
 8006060:	10c01f04 	addi	r3,r2,124
 8006064:	294b883a 	add	r5,r5,r5
 8006068:	003f4f06 	br	8005da8 <__alt_data_end+0xf8005da8>
 800606c:	01403f84 	movi	r5,254
 8006070:	00c01f84 	movi	r3,126
 8006074:	003f4c06 	br	8005da8 <__alt_data_end+0xf8005da8>
 8006078:	98800117 	ldw	r2,4(r19)
 800607c:	003fa006 	br	8005f00 <__alt_data_end+0xf8005f00>
 8006080:	8808d0fa 	srli	r4,r17,3
 8006084:	20800044 	addi	r2,r4,1
 8006088:	1085883a 	add	r2,r2,r2
 800608c:	003e9006 	br	8005ad0 <__alt_data_end+0xf8005ad0>

08006090 <memchr>:
 8006090:	208000cc 	andi	r2,r4,3
 8006094:	280f883a 	mov	r7,r5
 8006098:	10003426 	beq	r2,zero,800616c <memchr+0xdc>
 800609c:	30bfffc4 	addi	r2,r6,-1
 80060a0:	30001a26 	beq	r6,zero,800610c <memchr+0x7c>
 80060a4:	20c00003 	ldbu	r3,0(r4)
 80060a8:	29803fcc 	andi	r6,r5,255
 80060ac:	30c0051e 	bne	r6,r3,80060c4 <memchr+0x34>
 80060b0:	00001806 	br	8006114 <memchr+0x84>
 80060b4:	10001526 	beq	r2,zero,800610c <memchr+0x7c>
 80060b8:	20c00003 	ldbu	r3,0(r4)
 80060bc:	10bfffc4 	addi	r2,r2,-1
 80060c0:	30c01426 	beq	r6,r3,8006114 <memchr+0x84>
 80060c4:	21000044 	addi	r4,r4,1
 80060c8:	20c000cc 	andi	r3,r4,3
 80060cc:	183ff91e 	bne	r3,zero,80060b4 <__alt_data_end+0xf80060b4>
 80060d0:	020000c4 	movi	r8,3
 80060d4:	40801136 	bltu	r8,r2,800611c <memchr+0x8c>
 80060d8:	10000c26 	beq	r2,zero,800610c <memchr+0x7c>
 80060dc:	20c00003 	ldbu	r3,0(r4)
 80060e0:	29403fcc 	andi	r5,r5,255
 80060e4:	28c00b26 	beq	r5,r3,8006114 <memchr+0x84>
 80060e8:	20c00044 	addi	r3,r4,1
 80060ec:	39803fcc 	andi	r6,r7,255
 80060f0:	2089883a 	add	r4,r4,r2
 80060f4:	00000306 	br	8006104 <memchr+0x74>
 80060f8:	18c00044 	addi	r3,r3,1
 80060fc:	197fffc3 	ldbu	r5,-1(r3)
 8006100:	31400526 	beq	r6,r5,8006118 <memchr+0x88>
 8006104:	1805883a 	mov	r2,r3
 8006108:	20fffb1e 	bne	r4,r3,80060f8 <__alt_data_end+0xf80060f8>
 800610c:	0005883a 	mov	r2,zero
 8006110:	f800283a 	ret
 8006114:	2005883a 	mov	r2,r4
 8006118:	f800283a 	ret
 800611c:	28c03fcc 	andi	r3,r5,255
 8006120:	1812923a 	slli	r9,r3,8
 8006124:	02ffbff4 	movhi	r11,65279
 8006128:	02a02074 	movhi	r10,32897
 800612c:	48d2b03a 	or	r9,r9,r3
 8006130:	4806943a 	slli	r3,r9,16
 8006134:	5affbfc4 	addi	r11,r11,-257
 8006138:	52a02004 	addi	r10,r10,-32640
 800613c:	48d2b03a 	or	r9,r9,r3
 8006140:	20c00017 	ldw	r3,0(r4)
 8006144:	48c6f03a 	xor	r3,r9,r3
 8006148:	1acd883a 	add	r6,r3,r11
 800614c:	00c6303a 	nor	r3,zero,r3
 8006150:	30c6703a 	and	r3,r6,r3
 8006154:	1a86703a 	and	r3,r3,r10
 8006158:	183fe01e 	bne	r3,zero,80060dc <__alt_data_end+0xf80060dc>
 800615c:	10bfff04 	addi	r2,r2,-4
 8006160:	21000104 	addi	r4,r4,4
 8006164:	40bff636 	bltu	r8,r2,8006140 <__alt_data_end+0xf8006140>
 8006168:	003fdb06 	br	80060d8 <__alt_data_end+0xf80060d8>
 800616c:	3005883a 	mov	r2,r6
 8006170:	003fd706 	br	80060d0 <__alt_data_end+0xf80060d0>

08006174 <memcpy>:
 8006174:	defffd04 	addi	sp,sp,-12
 8006178:	dfc00215 	stw	ra,8(sp)
 800617c:	dc400115 	stw	r17,4(sp)
 8006180:	dc000015 	stw	r16,0(sp)
 8006184:	00c003c4 	movi	r3,15
 8006188:	2005883a 	mov	r2,r4
 800618c:	1980452e 	bgeu	r3,r6,80062a4 <memcpy+0x130>
 8006190:	2906b03a 	or	r3,r5,r4
 8006194:	18c000cc 	andi	r3,r3,3
 8006198:	1800441e 	bne	r3,zero,80062ac <memcpy+0x138>
 800619c:	347ffc04 	addi	r17,r6,-16
 80061a0:	8822d13a 	srli	r17,r17,4
 80061a4:	28c00104 	addi	r3,r5,4
 80061a8:	23400104 	addi	r13,r4,4
 80061ac:	8820913a 	slli	r16,r17,4
 80061b0:	2b000204 	addi	r12,r5,8
 80061b4:	22c00204 	addi	r11,r4,8
 80061b8:	84000504 	addi	r16,r16,20
 80061bc:	2a800304 	addi	r10,r5,12
 80061c0:	22400304 	addi	r9,r4,12
 80061c4:	2c21883a 	add	r16,r5,r16
 80061c8:	2811883a 	mov	r8,r5
 80061cc:	200f883a 	mov	r7,r4
 80061d0:	41000017 	ldw	r4,0(r8)
 80061d4:	1fc00017 	ldw	ra,0(r3)
 80061d8:	63c00017 	ldw	r15,0(r12)
 80061dc:	39000015 	stw	r4,0(r7)
 80061e0:	53800017 	ldw	r14,0(r10)
 80061e4:	6fc00015 	stw	ra,0(r13)
 80061e8:	5bc00015 	stw	r15,0(r11)
 80061ec:	4b800015 	stw	r14,0(r9)
 80061f0:	18c00404 	addi	r3,r3,16
 80061f4:	39c00404 	addi	r7,r7,16
 80061f8:	42000404 	addi	r8,r8,16
 80061fc:	6b400404 	addi	r13,r13,16
 8006200:	63000404 	addi	r12,r12,16
 8006204:	5ac00404 	addi	r11,r11,16
 8006208:	52800404 	addi	r10,r10,16
 800620c:	4a400404 	addi	r9,r9,16
 8006210:	1c3fef1e 	bne	r3,r16,80061d0 <__alt_data_end+0xf80061d0>
 8006214:	89c00044 	addi	r7,r17,1
 8006218:	380e913a 	slli	r7,r7,4
 800621c:	310003cc 	andi	r4,r6,15
 8006220:	02c000c4 	movi	r11,3
 8006224:	11c7883a 	add	r3,r2,r7
 8006228:	29cb883a 	add	r5,r5,r7
 800622c:	5900212e 	bgeu	r11,r4,80062b4 <memcpy+0x140>
 8006230:	1813883a 	mov	r9,r3
 8006234:	2811883a 	mov	r8,r5
 8006238:	200f883a 	mov	r7,r4
 800623c:	42800017 	ldw	r10,0(r8)
 8006240:	4a400104 	addi	r9,r9,4
 8006244:	39ffff04 	addi	r7,r7,-4
 8006248:	4abfff15 	stw	r10,-4(r9)
 800624c:	42000104 	addi	r8,r8,4
 8006250:	59fffa36 	bltu	r11,r7,800623c <__alt_data_end+0xf800623c>
 8006254:	213fff04 	addi	r4,r4,-4
 8006258:	2008d0ba 	srli	r4,r4,2
 800625c:	318000cc 	andi	r6,r6,3
 8006260:	21000044 	addi	r4,r4,1
 8006264:	2109883a 	add	r4,r4,r4
 8006268:	2109883a 	add	r4,r4,r4
 800626c:	1907883a 	add	r3,r3,r4
 8006270:	290b883a 	add	r5,r5,r4
 8006274:	30000626 	beq	r6,zero,8006290 <memcpy+0x11c>
 8006278:	198d883a 	add	r6,r3,r6
 800627c:	29c00003 	ldbu	r7,0(r5)
 8006280:	18c00044 	addi	r3,r3,1
 8006284:	29400044 	addi	r5,r5,1
 8006288:	19ffffc5 	stb	r7,-1(r3)
 800628c:	19bffb1e 	bne	r3,r6,800627c <__alt_data_end+0xf800627c>
 8006290:	dfc00217 	ldw	ra,8(sp)
 8006294:	dc400117 	ldw	r17,4(sp)
 8006298:	dc000017 	ldw	r16,0(sp)
 800629c:	dec00304 	addi	sp,sp,12
 80062a0:	f800283a 	ret
 80062a4:	2007883a 	mov	r3,r4
 80062a8:	003ff206 	br	8006274 <__alt_data_end+0xf8006274>
 80062ac:	2007883a 	mov	r3,r4
 80062b0:	003ff106 	br	8006278 <__alt_data_end+0xf8006278>
 80062b4:	200d883a 	mov	r6,r4
 80062b8:	003fee06 	br	8006274 <__alt_data_end+0xf8006274>

080062bc <memmove>:
 80062bc:	2005883a 	mov	r2,r4
 80062c0:	29000b2e 	bgeu	r5,r4,80062f0 <memmove+0x34>
 80062c4:	298f883a 	add	r7,r5,r6
 80062c8:	21c0092e 	bgeu	r4,r7,80062f0 <memmove+0x34>
 80062cc:	2187883a 	add	r3,r4,r6
 80062d0:	198bc83a 	sub	r5,r3,r6
 80062d4:	30004826 	beq	r6,zero,80063f8 <memmove+0x13c>
 80062d8:	39ffffc4 	addi	r7,r7,-1
 80062dc:	39000003 	ldbu	r4,0(r7)
 80062e0:	18ffffc4 	addi	r3,r3,-1
 80062e4:	19000005 	stb	r4,0(r3)
 80062e8:	28fffb1e 	bne	r5,r3,80062d8 <__alt_data_end+0xf80062d8>
 80062ec:	f800283a 	ret
 80062f0:	00c003c4 	movi	r3,15
 80062f4:	1980412e 	bgeu	r3,r6,80063fc <memmove+0x140>
 80062f8:	2886b03a 	or	r3,r5,r2
 80062fc:	18c000cc 	andi	r3,r3,3
 8006300:	1800401e 	bne	r3,zero,8006404 <memmove+0x148>
 8006304:	33fffc04 	addi	r15,r6,-16
 8006308:	781ed13a 	srli	r15,r15,4
 800630c:	28c00104 	addi	r3,r5,4
 8006310:	13400104 	addi	r13,r2,4
 8006314:	781c913a 	slli	r14,r15,4
 8006318:	2b000204 	addi	r12,r5,8
 800631c:	12c00204 	addi	r11,r2,8
 8006320:	73800504 	addi	r14,r14,20
 8006324:	2a800304 	addi	r10,r5,12
 8006328:	12400304 	addi	r9,r2,12
 800632c:	2b9d883a 	add	r14,r5,r14
 8006330:	2811883a 	mov	r8,r5
 8006334:	100f883a 	mov	r7,r2
 8006338:	41000017 	ldw	r4,0(r8)
 800633c:	39c00404 	addi	r7,r7,16
 8006340:	18c00404 	addi	r3,r3,16
 8006344:	393ffc15 	stw	r4,-16(r7)
 8006348:	193ffc17 	ldw	r4,-16(r3)
 800634c:	6b400404 	addi	r13,r13,16
 8006350:	5ac00404 	addi	r11,r11,16
 8006354:	693ffc15 	stw	r4,-16(r13)
 8006358:	61000017 	ldw	r4,0(r12)
 800635c:	4a400404 	addi	r9,r9,16
 8006360:	42000404 	addi	r8,r8,16
 8006364:	593ffc15 	stw	r4,-16(r11)
 8006368:	51000017 	ldw	r4,0(r10)
 800636c:	63000404 	addi	r12,r12,16
 8006370:	52800404 	addi	r10,r10,16
 8006374:	493ffc15 	stw	r4,-16(r9)
 8006378:	1bbfef1e 	bne	r3,r14,8006338 <__alt_data_end+0xf8006338>
 800637c:	79000044 	addi	r4,r15,1
 8006380:	2008913a 	slli	r4,r4,4
 8006384:	328003cc 	andi	r10,r6,15
 8006388:	02c000c4 	movi	r11,3
 800638c:	1107883a 	add	r3,r2,r4
 8006390:	290b883a 	add	r5,r5,r4
 8006394:	5a801e2e 	bgeu	r11,r10,8006410 <memmove+0x154>
 8006398:	1813883a 	mov	r9,r3
 800639c:	2811883a 	mov	r8,r5
 80063a0:	500f883a 	mov	r7,r10
 80063a4:	41000017 	ldw	r4,0(r8)
 80063a8:	4a400104 	addi	r9,r9,4
 80063ac:	39ffff04 	addi	r7,r7,-4
 80063b0:	493fff15 	stw	r4,-4(r9)
 80063b4:	42000104 	addi	r8,r8,4
 80063b8:	59fffa36 	bltu	r11,r7,80063a4 <__alt_data_end+0xf80063a4>
 80063bc:	513fff04 	addi	r4,r10,-4
 80063c0:	2008d0ba 	srli	r4,r4,2
 80063c4:	318000cc 	andi	r6,r6,3
 80063c8:	21000044 	addi	r4,r4,1
 80063cc:	2109883a 	add	r4,r4,r4
 80063d0:	2109883a 	add	r4,r4,r4
 80063d4:	1907883a 	add	r3,r3,r4
 80063d8:	290b883a 	add	r5,r5,r4
 80063dc:	30000b26 	beq	r6,zero,800640c <memmove+0x150>
 80063e0:	198d883a 	add	r6,r3,r6
 80063e4:	29c00003 	ldbu	r7,0(r5)
 80063e8:	18c00044 	addi	r3,r3,1
 80063ec:	29400044 	addi	r5,r5,1
 80063f0:	19ffffc5 	stb	r7,-1(r3)
 80063f4:	19bffb1e 	bne	r3,r6,80063e4 <__alt_data_end+0xf80063e4>
 80063f8:	f800283a 	ret
 80063fc:	1007883a 	mov	r3,r2
 8006400:	003ff606 	br	80063dc <__alt_data_end+0xf80063dc>
 8006404:	1007883a 	mov	r3,r2
 8006408:	003ff506 	br	80063e0 <__alt_data_end+0xf80063e0>
 800640c:	f800283a 	ret
 8006410:	500d883a 	mov	r6,r10
 8006414:	003ff106 	br	80063dc <__alt_data_end+0xf80063dc>

08006418 <memset>:
 8006418:	20c000cc 	andi	r3,r4,3
 800641c:	2005883a 	mov	r2,r4
 8006420:	18004426 	beq	r3,zero,8006534 <memset+0x11c>
 8006424:	31ffffc4 	addi	r7,r6,-1
 8006428:	30004026 	beq	r6,zero,800652c <memset+0x114>
 800642c:	2813883a 	mov	r9,r5
 8006430:	200d883a 	mov	r6,r4
 8006434:	2007883a 	mov	r3,r4
 8006438:	00000406 	br	800644c <memset+0x34>
 800643c:	3a3fffc4 	addi	r8,r7,-1
 8006440:	31800044 	addi	r6,r6,1
 8006444:	38003926 	beq	r7,zero,800652c <memset+0x114>
 8006448:	400f883a 	mov	r7,r8
 800644c:	18c00044 	addi	r3,r3,1
 8006450:	32400005 	stb	r9,0(r6)
 8006454:	1a0000cc 	andi	r8,r3,3
 8006458:	403ff81e 	bne	r8,zero,800643c <__alt_data_end+0xf800643c>
 800645c:	010000c4 	movi	r4,3
 8006460:	21c02d2e 	bgeu	r4,r7,8006518 <memset+0x100>
 8006464:	29003fcc 	andi	r4,r5,255
 8006468:	200c923a 	slli	r6,r4,8
 800646c:	3108b03a 	or	r4,r6,r4
 8006470:	200c943a 	slli	r6,r4,16
 8006474:	218cb03a 	or	r6,r4,r6
 8006478:	010003c4 	movi	r4,15
 800647c:	21c0182e 	bgeu	r4,r7,80064e0 <memset+0xc8>
 8006480:	3b3ffc04 	addi	r12,r7,-16
 8006484:	6018d13a 	srli	r12,r12,4
 8006488:	1a000104 	addi	r8,r3,4
 800648c:	1ac00204 	addi	r11,r3,8
 8006490:	6008913a 	slli	r4,r12,4
 8006494:	1a800304 	addi	r10,r3,12
 8006498:	1813883a 	mov	r9,r3
 800649c:	21000504 	addi	r4,r4,20
 80064a0:	1909883a 	add	r4,r3,r4
 80064a4:	49800015 	stw	r6,0(r9)
 80064a8:	41800015 	stw	r6,0(r8)
 80064ac:	59800015 	stw	r6,0(r11)
 80064b0:	51800015 	stw	r6,0(r10)
 80064b4:	42000404 	addi	r8,r8,16
 80064b8:	4a400404 	addi	r9,r9,16
 80064bc:	5ac00404 	addi	r11,r11,16
 80064c0:	52800404 	addi	r10,r10,16
 80064c4:	413ff71e 	bne	r8,r4,80064a4 <__alt_data_end+0xf80064a4>
 80064c8:	63000044 	addi	r12,r12,1
 80064cc:	6018913a 	slli	r12,r12,4
 80064d0:	39c003cc 	andi	r7,r7,15
 80064d4:	010000c4 	movi	r4,3
 80064d8:	1b07883a 	add	r3,r3,r12
 80064dc:	21c00e2e 	bgeu	r4,r7,8006518 <memset+0x100>
 80064e0:	1813883a 	mov	r9,r3
 80064e4:	3811883a 	mov	r8,r7
 80064e8:	010000c4 	movi	r4,3
 80064ec:	49800015 	stw	r6,0(r9)
 80064f0:	423fff04 	addi	r8,r8,-4
 80064f4:	4a400104 	addi	r9,r9,4
 80064f8:	223ffc36 	bltu	r4,r8,80064ec <__alt_data_end+0xf80064ec>
 80064fc:	393fff04 	addi	r4,r7,-4
 8006500:	2008d0ba 	srli	r4,r4,2
 8006504:	39c000cc 	andi	r7,r7,3
 8006508:	21000044 	addi	r4,r4,1
 800650c:	2109883a 	add	r4,r4,r4
 8006510:	2109883a 	add	r4,r4,r4
 8006514:	1907883a 	add	r3,r3,r4
 8006518:	38000526 	beq	r7,zero,8006530 <memset+0x118>
 800651c:	19cf883a 	add	r7,r3,r7
 8006520:	19400005 	stb	r5,0(r3)
 8006524:	18c00044 	addi	r3,r3,1
 8006528:	38fffd1e 	bne	r7,r3,8006520 <__alt_data_end+0xf8006520>
 800652c:	f800283a 	ret
 8006530:	f800283a 	ret
 8006534:	2007883a 	mov	r3,r4
 8006538:	300f883a 	mov	r7,r6
 800653c:	003fc706 	br	800645c <__alt_data_end+0xf800645c>

08006540 <_Balloc>:
 8006540:	20801317 	ldw	r2,76(r4)
 8006544:	defffc04 	addi	sp,sp,-16
 8006548:	dc400115 	stw	r17,4(sp)
 800654c:	dc000015 	stw	r16,0(sp)
 8006550:	dfc00315 	stw	ra,12(sp)
 8006554:	dc800215 	stw	r18,8(sp)
 8006558:	2023883a 	mov	r17,r4
 800655c:	2821883a 	mov	r16,r5
 8006560:	10000f26 	beq	r2,zero,80065a0 <_Balloc+0x60>
 8006564:	8407883a 	add	r3,r16,r16
 8006568:	18c7883a 	add	r3,r3,r3
 800656c:	10c7883a 	add	r3,r2,r3
 8006570:	18800017 	ldw	r2,0(r3)
 8006574:	10001126 	beq	r2,zero,80065bc <_Balloc+0x7c>
 8006578:	11000017 	ldw	r4,0(r2)
 800657c:	19000015 	stw	r4,0(r3)
 8006580:	10000415 	stw	zero,16(r2)
 8006584:	10000315 	stw	zero,12(r2)
 8006588:	dfc00317 	ldw	ra,12(sp)
 800658c:	dc800217 	ldw	r18,8(sp)
 8006590:	dc400117 	ldw	r17,4(sp)
 8006594:	dc000017 	ldw	r16,0(sp)
 8006598:	dec00404 	addi	sp,sp,16
 800659c:	f800283a 	ret
 80065a0:	01800844 	movi	r6,33
 80065a4:	01400104 	movi	r5,4
 80065a8:	800947c0 	call	800947c <_calloc_r>
 80065ac:	88801315 	stw	r2,76(r17)
 80065b0:	103fec1e 	bne	r2,zero,8006564 <__alt_data_end+0xf8006564>
 80065b4:	0005883a 	mov	r2,zero
 80065b8:	003ff306 	br	8006588 <__alt_data_end+0xf8006588>
 80065bc:	01400044 	movi	r5,1
 80065c0:	2c24983a 	sll	r18,r5,r16
 80065c4:	8809883a 	mov	r4,r17
 80065c8:	91800144 	addi	r6,r18,5
 80065cc:	318d883a 	add	r6,r6,r6
 80065d0:	318d883a 	add	r6,r6,r6
 80065d4:	800947c0 	call	800947c <_calloc_r>
 80065d8:	103ff626 	beq	r2,zero,80065b4 <__alt_data_end+0xf80065b4>
 80065dc:	14000115 	stw	r16,4(r2)
 80065e0:	14800215 	stw	r18,8(r2)
 80065e4:	003fe606 	br	8006580 <__alt_data_end+0xf8006580>

080065e8 <_Bfree>:
 80065e8:	28000826 	beq	r5,zero,800660c <_Bfree+0x24>
 80065ec:	28c00117 	ldw	r3,4(r5)
 80065f0:	20801317 	ldw	r2,76(r4)
 80065f4:	18c7883a 	add	r3,r3,r3
 80065f8:	18c7883a 	add	r3,r3,r3
 80065fc:	10c5883a 	add	r2,r2,r3
 8006600:	10c00017 	ldw	r3,0(r2)
 8006604:	28c00015 	stw	r3,0(r5)
 8006608:	11400015 	stw	r5,0(r2)
 800660c:	f800283a 	ret

08006610 <__multadd>:
 8006610:	defffa04 	addi	sp,sp,-24
 8006614:	dc800315 	stw	r18,12(sp)
 8006618:	dc400215 	stw	r17,8(sp)
 800661c:	dc000115 	stw	r16,4(sp)
 8006620:	2823883a 	mov	r17,r5
 8006624:	2c000417 	ldw	r16,16(r5)
 8006628:	dfc00515 	stw	ra,20(sp)
 800662c:	dcc00415 	stw	r19,16(sp)
 8006630:	2025883a 	mov	r18,r4
 8006634:	29400504 	addi	r5,r5,20
 8006638:	0011883a 	mov	r8,zero
 800663c:	28c00017 	ldw	r3,0(r5)
 8006640:	29400104 	addi	r5,r5,4
 8006644:	42000044 	addi	r8,r8,1
 8006648:	18bfffcc 	andi	r2,r3,65535
 800664c:	1185383a 	mul	r2,r2,r6
 8006650:	1806d43a 	srli	r3,r3,16
 8006654:	11cf883a 	add	r7,r2,r7
 8006658:	3808d43a 	srli	r4,r7,16
 800665c:	1987383a 	mul	r3,r3,r6
 8006660:	38bfffcc 	andi	r2,r7,65535
 8006664:	1907883a 	add	r3,r3,r4
 8006668:	1808943a 	slli	r4,r3,16
 800666c:	180ed43a 	srli	r7,r3,16
 8006670:	2085883a 	add	r2,r4,r2
 8006674:	28bfff15 	stw	r2,-4(r5)
 8006678:	443ff016 	blt	r8,r16,800663c <__alt_data_end+0xf800663c>
 800667c:	38000926 	beq	r7,zero,80066a4 <__multadd+0x94>
 8006680:	88800217 	ldw	r2,8(r17)
 8006684:	80800f0e 	bge	r16,r2,80066c4 <__multadd+0xb4>
 8006688:	80800144 	addi	r2,r16,5
 800668c:	1085883a 	add	r2,r2,r2
 8006690:	1085883a 	add	r2,r2,r2
 8006694:	8885883a 	add	r2,r17,r2
 8006698:	11c00015 	stw	r7,0(r2)
 800669c:	84000044 	addi	r16,r16,1
 80066a0:	8c000415 	stw	r16,16(r17)
 80066a4:	8805883a 	mov	r2,r17
 80066a8:	dfc00517 	ldw	ra,20(sp)
 80066ac:	dcc00417 	ldw	r19,16(sp)
 80066b0:	dc800317 	ldw	r18,12(sp)
 80066b4:	dc400217 	ldw	r17,8(sp)
 80066b8:	dc000117 	ldw	r16,4(sp)
 80066bc:	dec00604 	addi	sp,sp,24
 80066c0:	f800283a 	ret
 80066c4:	89400117 	ldw	r5,4(r17)
 80066c8:	9009883a 	mov	r4,r18
 80066cc:	d9c00015 	stw	r7,0(sp)
 80066d0:	29400044 	addi	r5,r5,1
 80066d4:	80065400 	call	8006540 <_Balloc>
 80066d8:	89800417 	ldw	r6,16(r17)
 80066dc:	89400304 	addi	r5,r17,12
 80066e0:	11000304 	addi	r4,r2,12
 80066e4:	31800084 	addi	r6,r6,2
 80066e8:	318d883a 	add	r6,r6,r6
 80066ec:	318d883a 	add	r6,r6,r6
 80066f0:	1027883a 	mov	r19,r2
 80066f4:	80061740 	call	8006174 <memcpy>
 80066f8:	d9c00017 	ldw	r7,0(sp)
 80066fc:	88000a26 	beq	r17,zero,8006728 <__multadd+0x118>
 8006700:	88c00117 	ldw	r3,4(r17)
 8006704:	90801317 	ldw	r2,76(r18)
 8006708:	18c7883a 	add	r3,r3,r3
 800670c:	18c7883a 	add	r3,r3,r3
 8006710:	10c5883a 	add	r2,r2,r3
 8006714:	10c00017 	ldw	r3,0(r2)
 8006718:	88c00015 	stw	r3,0(r17)
 800671c:	14400015 	stw	r17,0(r2)
 8006720:	9823883a 	mov	r17,r19
 8006724:	003fd806 	br	8006688 <__alt_data_end+0xf8006688>
 8006728:	9823883a 	mov	r17,r19
 800672c:	003fd606 	br	8006688 <__alt_data_end+0xf8006688>

08006730 <__s2b>:
 8006730:	defff904 	addi	sp,sp,-28
 8006734:	dc400115 	stw	r17,4(sp)
 8006738:	dc000015 	stw	r16,0(sp)
 800673c:	2023883a 	mov	r17,r4
 8006740:	2821883a 	mov	r16,r5
 8006744:	39000204 	addi	r4,r7,8
 8006748:	01400244 	movi	r5,9
 800674c:	dcc00315 	stw	r19,12(sp)
 8006750:	dc800215 	stw	r18,8(sp)
 8006754:	dfc00615 	stw	ra,24(sp)
 8006758:	dd400515 	stw	r21,20(sp)
 800675c:	dd000415 	stw	r20,16(sp)
 8006760:	3825883a 	mov	r18,r7
 8006764:	3027883a 	mov	r19,r6
 8006768:	800a7ac0 	call	800a7ac <__divsi3>
 800676c:	00c00044 	movi	r3,1
 8006770:	000b883a 	mov	r5,zero
 8006774:	1880030e 	bge	r3,r2,8006784 <__s2b+0x54>
 8006778:	18c7883a 	add	r3,r3,r3
 800677c:	29400044 	addi	r5,r5,1
 8006780:	18bffd16 	blt	r3,r2,8006778 <__alt_data_end+0xf8006778>
 8006784:	8809883a 	mov	r4,r17
 8006788:	80065400 	call	8006540 <_Balloc>
 800678c:	d8c00717 	ldw	r3,28(sp)
 8006790:	10c00515 	stw	r3,20(r2)
 8006794:	00c00044 	movi	r3,1
 8006798:	10c00415 	stw	r3,16(r2)
 800679c:	00c00244 	movi	r3,9
 80067a0:	1cc0210e 	bge	r3,r19,8006828 <__s2b+0xf8>
 80067a4:	80eb883a 	add	r21,r16,r3
 80067a8:	a829883a 	mov	r20,r21
 80067ac:	84e1883a 	add	r16,r16,r19
 80067b0:	a1c00007 	ldb	r7,0(r20)
 80067b4:	01800284 	movi	r6,10
 80067b8:	a5000044 	addi	r20,r20,1
 80067bc:	100b883a 	mov	r5,r2
 80067c0:	39fff404 	addi	r7,r7,-48
 80067c4:	8809883a 	mov	r4,r17
 80067c8:	80066100 	call	8006610 <__multadd>
 80067cc:	a43ff81e 	bne	r20,r16,80067b0 <__alt_data_end+0xf80067b0>
 80067d0:	ace1883a 	add	r16,r21,r19
 80067d4:	843ffe04 	addi	r16,r16,-8
 80067d8:	9c800a0e 	bge	r19,r18,8006804 <__s2b+0xd4>
 80067dc:	94e5c83a 	sub	r18,r18,r19
 80067e0:	84a5883a 	add	r18,r16,r18
 80067e4:	81c00007 	ldb	r7,0(r16)
 80067e8:	01800284 	movi	r6,10
 80067ec:	84000044 	addi	r16,r16,1
 80067f0:	100b883a 	mov	r5,r2
 80067f4:	39fff404 	addi	r7,r7,-48
 80067f8:	8809883a 	mov	r4,r17
 80067fc:	80066100 	call	8006610 <__multadd>
 8006800:	84bff81e 	bne	r16,r18,80067e4 <__alt_data_end+0xf80067e4>
 8006804:	dfc00617 	ldw	ra,24(sp)
 8006808:	dd400517 	ldw	r21,20(sp)
 800680c:	dd000417 	ldw	r20,16(sp)
 8006810:	dcc00317 	ldw	r19,12(sp)
 8006814:	dc800217 	ldw	r18,8(sp)
 8006818:	dc400117 	ldw	r17,4(sp)
 800681c:	dc000017 	ldw	r16,0(sp)
 8006820:	dec00704 	addi	sp,sp,28
 8006824:	f800283a 	ret
 8006828:	84000284 	addi	r16,r16,10
 800682c:	1827883a 	mov	r19,r3
 8006830:	003fe906 	br	80067d8 <__alt_data_end+0xf80067d8>

08006834 <__hi0bits>:
 8006834:	20bfffec 	andhi	r2,r4,65535
 8006838:	1000141e 	bne	r2,zero,800688c <__hi0bits+0x58>
 800683c:	2008943a 	slli	r4,r4,16
 8006840:	00800404 	movi	r2,16
 8006844:	20ffc02c 	andhi	r3,r4,65280
 8006848:	1800021e 	bne	r3,zero,8006854 <__hi0bits+0x20>
 800684c:	2008923a 	slli	r4,r4,8
 8006850:	10800204 	addi	r2,r2,8
 8006854:	20fc002c 	andhi	r3,r4,61440
 8006858:	1800021e 	bne	r3,zero,8006864 <__hi0bits+0x30>
 800685c:	2008913a 	slli	r4,r4,4
 8006860:	10800104 	addi	r2,r2,4
 8006864:	20f0002c 	andhi	r3,r4,49152
 8006868:	1800031e 	bne	r3,zero,8006878 <__hi0bits+0x44>
 800686c:	2109883a 	add	r4,r4,r4
 8006870:	10800084 	addi	r2,r2,2
 8006874:	2109883a 	add	r4,r4,r4
 8006878:	20000316 	blt	r4,zero,8006888 <__hi0bits+0x54>
 800687c:	2110002c 	andhi	r4,r4,16384
 8006880:	2000041e 	bne	r4,zero,8006894 <__hi0bits+0x60>
 8006884:	00800804 	movi	r2,32
 8006888:	f800283a 	ret
 800688c:	0005883a 	mov	r2,zero
 8006890:	003fec06 	br	8006844 <__alt_data_end+0xf8006844>
 8006894:	10800044 	addi	r2,r2,1
 8006898:	f800283a 	ret

0800689c <__lo0bits>:
 800689c:	20c00017 	ldw	r3,0(r4)
 80068a0:	188001cc 	andi	r2,r3,7
 80068a4:	10000826 	beq	r2,zero,80068c8 <__lo0bits+0x2c>
 80068a8:	1880004c 	andi	r2,r3,1
 80068ac:	1000211e 	bne	r2,zero,8006934 <__lo0bits+0x98>
 80068b0:	1880008c 	andi	r2,r3,2
 80068b4:	1000211e 	bne	r2,zero,800693c <__lo0bits+0xa0>
 80068b8:	1806d0ba 	srli	r3,r3,2
 80068bc:	00800084 	movi	r2,2
 80068c0:	20c00015 	stw	r3,0(r4)
 80068c4:	f800283a 	ret
 80068c8:	18bfffcc 	andi	r2,r3,65535
 80068cc:	10001326 	beq	r2,zero,800691c <__lo0bits+0x80>
 80068d0:	0005883a 	mov	r2,zero
 80068d4:	19403fcc 	andi	r5,r3,255
 80068d8:	2800021e 	bne	r5,zero,80068e4 <__lo0bits+0x48>
 80068dc:	1806d23a 	srli	r3,r3,8
 80068e0:	10800204 	addi	r2,r2,8
 80068e4:	194003cc 	andi	r5,r3,15
 80068e8:	2800021e 	bne	r5,zero,80068f4 <__lo0bits+0x58>
 80068ec:	1806d13a 	srli	r3,r3,4
 80068f0:	10800104 	addi	r2,r2,4
 80068f4:	194000cc 	andi	r5,r3,3
 80068f8:	2800021e 	bne	r5,zero,8006904 <__lo0bits+0x68>
 80068fc:	1806d0ba 	srli	r3,r3,2
 8006900:	10800084 	addi	r2,r2,2
 8006904:	1940004c 	andi	r5,r3,1
 8006908:	2800081e 	bne	r5,zero,800692c <__lo0bits+0x90>
 800690c:	1806d07a 	srli	r3,r3,1
 8006910:	1800051e 	bne	r3,zero,8006928 <__lo0bits+0x8c>
 8006914:	00800804 	movi	r2,32
 8006918:	f800283a 	ret
 800691c:	1806d43a 	srli	r3,r3,16
 8006920:	00800404 	movi	r2,16
 8006924:	003feb06 	br	80068d4 <__alt_data_end+0xf80068d4>
 8006928:	10800044 	addi	r2,r2,1
 800692c:	20c00015 	stw	r3,0(r4)
 8006930:	f800283a 	ret
 8006934:	0005883a 	mov	r2,zero
 8006938:	f800283a 	ret
 800693c:	1806d07a 	srli	r3,r3,1
 8006940:	00800044 	movi	r2,1
 8006944:	20c00015 	stw	r3,0(r4)
 8006948:	f800283a 	ret

0800694c <__i2b>:
 800694c:	defffd04 	addi	sp,sp,-12
 8006950:	dc000015 	stw	r16,0(sp)
 8006954:	04000044 	movi	r16,1
 8006958:	dc400115 	stw	r17,4(sp)
 800695c:	2823883a 	mov	r17,r5
 8006960:	800b883a 	mov	r5,r16
 8006964:	dfc00215 	stw	ra,8(sp)
 8006968:	80065400 	call	8006540 <_Balloc>
 800696c:	14400515 	stw	r17,20(r2)
 8006970:	14000415 	stw	r16,16(r2)
 8006974:	dfc00217 	ldw	ra,8(sp)
 8006978:	dc400117 	ldw	r17,4(sp)
 800697c:	dc000017 	ldw	r16,0(sp)
 8006980:	dec00304 	addi	sp,sp,12
 8006984:	f800283a 	ret

08006988 <__multiply>:
 8006988:	defffa04 	addi	sp,sp,-24
 800698c:	dcc00315 	stw	r19,12(sp)
 8006990:	dc800215 	stw	r18,8(sp)
 8006994:	34c00417 	ldw	r19,16(r6)
 8006998:	2c800417 	ldw	r18,16(r5)
 800699c:	dd000415 	stw	r20,16(sp)
 80069a0:	dc400115 	stw	r17,4(sp)
 80069a4:	dfc00515 	stw	ra,20(sp)
 80069a8:	dc000015 	stw	r16,0(sp)
 80069ac:	2829883a 	mov	r20,r5
 80069b0:	3023883a 	mov	r17,r6
 80069b4:	94c0050e 	bge	r18,r19,80069cc <__multiply+0x44>
 80069b8:	9007883a 	mov	r3,r18
 80069bc:	3029883a 	mov	r20,r6
 80069c0:	9825883a 	mov	r18,r19
 80069c4:	2823883a 	mov	r17,r5
 80069c8:	1827883a 	mov	r19,r3
 80069cc:	a0800217 	ldw	r2,8(r20)
 80069d0:	94e1883a 	add	r16,r18,r19
 80069d4:	a1400117 	ldw	r5,4(r20)
 80069d8:	1400010e 	bge	r2,r16,80069e0 <__multiply+0x58>
 80069dc:	29400044 	addi	r5,r5,1
 80069e0:	80065400 	call	8006540 <_Balloc>
 80069e4:	8415883a 	add	r10,r16,r16
 80069e8:	12c00504 	addi	r11,r2,20
 80069ec:	5295883a 	add	r10,r10,r10
 80069f0:	5a95883a 	add	r10,r11,r10
 80069f4:	5807883a 	mov	r3,r11
 80069f8:	5a80032e 	bgeu	r11,r10,8006a08 <__multiply+0x80>
 80069fc:	18000015 	stw	zero,0(r3)
 8006a00:	18c00104 	addi	r3,r3,4
 8006a04:	1abffd36 	bltu	r3,r10,80069fc <__alt_data_end+0xf80069fc>
 8006a08:	9ce7883a 	add	r19,r19,r19
 8006a0c:	94a5883a 	add	r18,r18,r18
 8006a10:	89800504 	addi	r6,r17,20
 8006a14:	9ce7883a 	add	r19,r19,r19
 8006a18:	a3400504 	addi	r13,r20,20
 8006a1c:	94a5883a 	add	r18,r18,r18
 8006a20:	34d9883a 	add	r12,r6,r19
 8006a24:	6c93883a 	add	r9,r13,r18
 8006a28:	3300422e 	bgeu	r6,r12,8006b34 <__multiply+0x1ac>
 8006a2c:	37c00017 	ldw	ra,0(r6)
 8006a30:	fbffffcc 	andi	r15,ra,65535
 8006a34:	78001b26 	beq	r15,zero,8006aa4 <__multiply+0x11c>
 8006a38:	5811883a 	mov	r8,r11
 8006a3c:	681d883a 	mov	r14,r13
 8006a40:	000f883a 	mov	r7,zero
 8006a44:	71000017 	ldw	r4,0(r14)
 8006a48:	40c00017 	ldw	r3,0(r8)
 8006a4c:	73800104 	addi	r14,r14,4
 8006a50:	217fffcc 	andi	r5,r4,65535
 8006a54:	2bcb383a 	mul	r5,r5,r15
 8006a58:	2008d43a 	srli	r4,r4,16
 8006a5c:	1c7fffcc 	andi	r17,r3,65535
 8006a60:	2c4b883a 	add	r5,r5,r17
 8006a64:	29cb883a 	add	r5,r5,r7
 8006a68:	23c9383a 	mul	r4,r4,r15
 8006a6c:	1806d43a 	srli	r3,r3,16
 8006a70:	280ed43a 	srli	r7,r5,16
 8006a74:	297fffcc 	andi	r5,r5,65535
 8006a78:	20c7883a 	add	r3,r4,r3
 8006a7c:	19c7883a 	add	r3,r3,r7
 8006a80:	1808943a 	slli	r4,r3,16
 8006a84:	4023883a 	mov	r17,r8
 8006a88:	180ed43a 	srli	r7,r3,16
 8006a8c:	214ab03a 	or	r5,r4,r5
 8006a90:	41400015 	stw	r5,0(r8)
 8006a94:	42000104 	addi	r8,r8,4
 8006a98:	727fea36 	bltu	r14,r9,8006a44 <__alt_data_end+0xf8006a44>
 8006a9c:	89c00115 	stw	r7,4(r17)
 8006aa0:	37c00017 	ldw	ra,0(r6)
 8006aa4:	f83ed43a 	srli	ra,ra,16
 8006aa8:	f8001f26 	beq	ra,zero,8006b28 <__multiply+0x1a0>
 8006aac:	58c00017 	ldw	r3,0(r11)
 8006ab0:	681d883a 	mov	r14,r13
 8006ab4:	581f883a 	mov	r15,r11
 8006ab8:	1811883a 	mov	r8,r3
 8006abc:	5825883a 	mov	r18,r11
 8006ac0:	000f883a 	mov	r7,zero
 8006ac4:	00000106 	br	8006acc <__multiply+0x144>
 8006ac8:	8825883a 	mov	r18,r17
 8006acc:	7140000b 	ldhu	r5,0(r14)
 8006ad0:	4010d43a 	srli	r8,r8,16
 8006ad4:	193fffcc 	andi	r4,r3,65535
 8006ad8:	2fcb383a 	mul	r5,r5,ra
 8006adc:	7bc00104 	addi	r15,r15,4
 8006ae0:	73800104 	addi	r14,r14,4
 8006ae4:	2a0b883a 	add	r5,r5,r8
 8006ae8:	29cb883a 	add	r5,r5,r7
 8006aec:	2806943a 	slli	r3,r5,16
 8006af0:	94400104 	addi	r17,r18,4
 8006af4:	280ad43a 	srli	r5,r5,16
 8006af8:	1908b03a 	or	r4,r3,r4
 8006afc:	793fff15 	stw	r4,-4(r15)
 8006b00:	70ffff17 	ldw	r3,-4(r14)
 8006b04:	8a000017 	ldw	r8,0(r17)
 8006b08:	1806d43a 	srli	r3,r3,16
 8006b0c:	413fffcc 	andi	r4,r8,65535
 8006b10:	1fc7383a 	mul	r3,r3,ra
 8006b14:	1907883a 	add	r3,r3,r4
 8006b18:	1947883a 	add	r3,r3,r5
 8006b1c:	180ed43a 	srli	r7,r3,16
 8006b20:	727fe936 	bltu	r14,r9,8006ac8 <__alt_data_end+0xf8006ac8>
 8006b24:	90c00115 	stw	r3,4(r18)
 8006b28:	31800104 	addi	r6,r6,4
 8006b2c:	5ac00104 	addi	r11,r11,4
 8006b30:	333fbe36 	bltu	r6,r12,8006a2c <__alt_data_end+0xf8006a2c>
 8006b34:	0400090e 	bge	zero,r16,8006b5c <__multiply+0x1d4>
 8006b38:	50ffff17 	ldw	r3,-4(r10)
 8006b3c:	52bfff04 	addi	r10,r10,-4
 8006b40:	18000326 	beq	r3,zero,8006b50 <__multiply+0x1c8>
 8006b44:	00000506 	br	8006b5c <__multiply+0x1d4>
 8006b48:	50c00017 	ldw	r3,0(r10)
 8006b4c:	1800031e 	bne	r3,zero,8006b5c <__multiply+0x1d4>
 8006b50:	843fffc4 	addi	r16,r16,-1
 8006b54:	52bfff04 	addi	r10,r10,-4
 8006b58:	803ffb1e 	bne	r16,zero,8006b48 <__alt_data_end+0xf8006b48>
 8006b5c:	14000415 	stw	r16,16(r2)
 8006b60:	dfc00517 	ldw	ra,20(sp)
 8006b64:	dd000417 	ldw	r20,16(sp)
 8006b68:	dcc00317 	ldw	r19,12(sp)
 8006b6c:	dc800217 	ldw	r18,8(sp)
 8006b70:	dc400117 	ldw	r17,4(sp)
 8006b74:	dc000017 	ldw	r16,0(sp)
 8006b78:	dec00604 	addi	sp,sp,24
 8006b7c:	f800283a 	ret

08006b80 <__pow5mult>:
 8006b80:	defffa04 	addi	sp,sp,-24
 8006b84:	dcc00315 	stw	r19,12(sp)
 8006b88:	dc000015 	stw	r16,0(sp)
 8006b8c:	dfc00515 	stw	ra,20(sp)
 8006b90:	dd000415 	stw	r20,16(sp)
 8006b94:	dc800215 	stw	r18,8(sp)
 8006b98:	dc400115 	stw	r17,4(sp)
 8006b9c:	308000cc 	andi	r2,r6,3
 8006ba0:	3021883a 	mov	r16,r6
 8006ba4:	2027883a 	mov	r19,r4
 8006ba8:	10002f1e 	bne	r2,zero,8006c68 <__pow5mult+0xe8>
 8006bac:	2825883a 	mov	r18,r5
 8006bb0:	8021d0ba 	srai	r16,r16,2
 8006bb4:	80001a26 	beq	r16,zero,8006c20 <__pow5mult+0xa0>
 8006bb8:	9c401217 	ldw	r17,72(r19)
 8006bbc:	8800061e 	bne	r17,zero,8006bd8 <__pow5mult+0x58>
 8006bc0:	00003406 	br	8006c94 <__pow5mult+0x114>
 8006bc4:	8021d07a 	srai	r16,r16,1
 8006bc8:	80001526 	beq	r16,zero,8006c20 <__pow5mult+0xa0>
 8006bcc:	88800017 	ldw	r2,0(r17)
 8006bd0:	10001c26 	beq	r2,zero,8006c44 <__pow5mult+0xc4>
 8006bd4:	1023883a 	mov	r17,r2
 8006bd8:	8080004c 	andi	r2,r16,1
 8006bdc:	103ff926 	beq	r2,zero,8006bc4 <__alt_data_end+0xf8006bc4>
 8006be0:	880d883a 	mov	r6,r17
 8006be4:	900b883a 	mov	r5,r18
 8006be8:	9809883a 	mov	r4,r19
 8006bec:	80069880 	call	8006988 <__multiply>
 8006bf0:	90001b26 	beq	r18,zero,8006c60 <__pow5mult+0xe0>
 8006bf4:	91000117 	ldw	r4,4(r18)
 8006bf8:	98c01317 	ldw	r3,76(r19)
 8006bfc:	8021d07a 	srai	r16,r16,1
 8006c00:	2109883a 	add	r4,r4,r4
 8006c04:	2109883a 	add	r4,r4,r4
 8006c08:	1907883a 	add	r3,r3,r4
 8006c0c:	19000017 	ldw	r4,0(r3)
 8006c10:	91000015 	stw	r4,0(r18)
 8006c14:	1c800015 	stw	r18,0(r3)
 8006c18:	1025883a 	mov	r18,r2
 8006c1c:	803feb1e 	bne	r16,zero,8006bcc <__alt_data_end+0xf8006bcc>
 8006c20:	9005883a 	mov	r2,r18
 8006c24:	dfc00517 	ldw	ra,20(sp)
 8006c28:	dd000417 	ldw	r20,16(sp)
 8006c2c:	dcc00317 	ldw	r19,12(sp)
 8006c30:	dc800217 	ldw	r18,8(sp)
 8006c34:	dc400117 	ldw	r17,4(sp)
 8006c38:	dc000017 	ldw	r16,0(sp)
 8006c3c:	dec00604 	addi	sp,sp,24
 8006c40:	f800283a 	ret
 8006c44:	880d883a 	mov	r6,r17
 8006c48:	880b883a 	mov	r5,r17
 8006c4c:	9809883a 	mov	r4,r19
 8006c50:	80069880 	call	8006988 <__multiply>
 8006c54:	88800015 	stw	r2,0(r17)
 8006c58:	10000015 	stw	zero,0(r2)
 8006c5c:	003fdd06 	br	8006bd4 <__alt_data_end+0xf8006bd4>
 8006c60:	1025883a 	mov	r18,r2
 8006c64:	003fd706 	br	8006bc4 <__alt_data_end+0xf8006bc4>
 8006c68:	10bfffc4 	addi	r2,r2,-1
 8006c6c:	1085883a 	add	r2,r2,r2
 8006c70:	00c200b4 	movhi	r3,2050
 8006c74:	18e3fb04 	addi	r3,r3,-28692
 8006c78:	1085883a 	add	r2,r2,r2
 8006c7c:	1885883a 	add	r2,r3,r2
 8006c80:	11800017 	ldw	r6,0(r2)
 8006c84:	000f883a 	mov	r7,zero
 8006c88:	80066100 	call	8006610 <__multadd>
 8006c8c:	1025883a 	mov	r18,r2
 8006c90:	003fc706 	br	8006bb0 <__alt_data_end+0xf8006bb0>
 8006c94:	05000044 	movi	r20,1
 8006c98:	a00b883a 	mov	r5,r20
 8006c9c:	9809883a 	mov	r4,r19
 8006ca0:	80065400 	call	8006540 <_Balloc>
 8006ca4:	1023883a 	mov	r17,r2
 8006ca8:	00809c44 	movi	r2,625
 8006cac:	88800515 	stw	r2,20(r17)
 8006cb0:	8d000415 	stw	r20,16(r17)
 8006cb4:	9c401215 	stw	r17,72(r19)
 8006cb8:	88000015 	stw	zero,0(r17)
 8006cbc:	003fc606 	br	8006bd8 <__alt_data_end+0xf8006bd8>

08006cc0 <__lshift>:
 8006cc0:	defff904 	addi	sp,sp,-28
 8006cc4:	dd400515 	stw	r21,20(sp)
 8006cc8:	dcc00315 	stw	r19,12(sp)
 8006ccc:	302bd17a 	srai	r21,r6,5
 8006cd0:	2cc00417 	ldw	r19,16(r5)
 8006cd4:	28800217 	ldw	r2,8(r5)
 8006cd8:	dd000415 	stw	r20,16(sp)
 8006cdc:	ace7883a 	add	r19,r21,r19
 8006ce0:	dc800215 	stw	r18,8(sp)
 8006ce4:	dc400115 	stw	r17,4(sp)
 8006ce8:	dc000015 	stw	r16,0(sp)
 8006cec:	dfc00615 	stw	ra,24(sp)
 8006cf0:	9c000044 	addi	r16,r19,1
 8006cf4:	2823883a 	mov	r17,r5
 8006cf8:	3029883a 	mov	r20,r6
 8006cfc:	2025883a 	mov	r18,r4
 8006d00:	29400117 	ldw	r5,4(r5)
 8006d04:	1400030e 	bge	r2,r16,8006d14 <__lshift+0x54>
 8006d08:	1085883a 	add	r2,r2,r2
 8006d0c:	29400044 	addi	r5,r5,1
 8006d10:	143ffd16 	blt	r2,r16,8006d08 <__alt_data_end+0xf8006d08>
 8006d14:	9009883a 	mov	r4,r18
 8006d18:	80065400 	call	8006540 <_Balloc>
 8006d1c:	10c00504 	addi	r3,r2,20
 8006d20:	0540070e 	bge	zero,r21,8006d40 <__lshift+0x80>
 8006d24:	ad6b883a 	add	r21,r21,r21
 8006d28:	ad6b883a 	add	r21,r21,r21
 8006d2c:	1809883a 	mov	r4,r3
 8006d30:	1d47883a 	add	r3,r3,r21
 8006d34:	20000015 	stw	zero,0(r4)
 8006d38:	21000104 	addi	r4,r4,4
 8006d3c:	193ffd1e 	bne	r3,r4,8006d34 <__alt_data_end+0xf8006d34>
 8006d40:	8a000417 	ldw	r8,16(r17)
 8006d44:	89000504 	addi	r4,r17,20
 8006d48:	a18007cc 	andi	r6,r20,31
 8006d4c:	4211883a 	add	r8,r8,r8
 8006d50:	4211883a 	add	r8,r8,r8
 8006d54:	2211883a 	add	r8,r4,r8
 8006d58:	30002326 	beq	r6,zero,8006de8 <__lshift+0x128>
 8006d5c:	02400804 	movi	r9,32
 8006d60:	4993c83a 	sub	r9,r9,r6
 8006d64:	000b883a 	mov	r5,zero
 8006d68:	21c00017 	ldw	r7,0(r4)
 8006d6c:	1815883a 	mov	r10,r3
 8006d70:	18c00104 	addi	r3,r3,4
 8006d74:	398e983a 	sll	r7,r7,r6
 8006d78:	21000104 	addi	r4,r4,4
 8006d7c:	394ab03a 	or	r5,r7,r5
 8006d80:	197fff15 	stw	r5,-4(r3)
 8006d84:	217fff17 	ldw	r5,-4(r4)
 8006d88:	2a4ad83a 	srl	r5,r5,r9
 8006d8c:	223ff636 	bltu	r4,r8,8006d68 <__alt_data_end+0xf8006d68>
 8006d90:	51400115 	stw	r5,4(r10)
 8006d94:	28001a1e 	bne	r5,zero,8006e00 <__lshift+0x140>
 8006d98:	843fffc4 	addi	r16,r16,-1
 8006d9c:	14000415 	stw	r16,16(r2)
 8006da0:	88000826 	beq	r17,zero,8006dc4 <__lshift+0x104>
 8006da4:	89000117 	ldw	r4,4(r17)
 8006da8:	90c01317 	ldw	r3,76(r18)
 8006dac:	2109883a 	add	r4,r4,r4
 8006db0:	2109883a 	add	r4,r4,r4
 8006db4:	1907883a 	add	r3,r3,r4
 8006db8:	19000017 	ldw	r4,0(r3)
 8006dbc:	89000015 	stw	r4,0(r17)
 8006dc0:	1c400015 	stw	r17,0(r3)
 8006dc4:	dfc00617 	ldw	ra,24(sp)
 8006dc8:	dd400517 	ldw	r21,20(sp)
 8006dcc:	dd000417 	ldw	r20,16(sp)
 8006dd0:	dcc00317 	ldw	r19,12(sp)
 8006dd4:	dc800217 	ldw	r18,8(sp)
 8006dd8:	dc400117 	ldw	r17,4(sp)
 8006ddc:	dc000017 	ldw	r16,0(sp)
 8006de0:	dec00704 	addi	sp,sp,28
 8006de4:	f800283a 	ret
 8006de8:	21400017 	ldw	r5,0(r4)
 8006dec:	18c00104 	addi	r3,r3,4
 8006df0:	21000104 	addi	r4,r4,4
 8006df4:	197fff15 	stw	r5,-4(r3)
 8006df8:	223ffb36 	bltu	r4,r8,8006de8 <__alt_data_end+0xf8006de8>
 8006dfc:	003fe606 	br	8006d98 <__alt_data_end+0xf8006d98>
 8006e00:	9c000084 	addi	r16,r19,2
 8006e04:	003fe406 	br	8006d98 <__alt_data_end+0xf8006d98>

08006e08 <__mcmp>:
 8006e08:	20800417 	ldw	r2,16(r4)
 8006e0c:	28c00417 	ldw	r3,16(r5)
 8006e10:	10c5c83a 	sub	r2,r2,r3
 8006e14:	1000111e 	bne	r2,zero,8006e5c <__mcmp+0x54>
 8006e18:	18c7883a 	add	r3,r3,r3
 8006e1c:	18c7883a 	add	r3,r3,r3
 8006e20:	21000504 	addi	r4,r4,20
 8006e24:	29400504 	addi	r5,r5,20
 8006e28:	20c5883a 	add	r2,r4,r3
 8006e2c:	28cb883a 	add	r5,r5,r3
 8006e30:	00000106 	br	8006e38 <__mcmp+0x30>
 8006e34:	20800a2e 	bgeu	r4,r2,8006e60 <__mcmp+0x58>
 8006e38:	10bfff04 	addi	r2,r2,-4
 8006e3c:	297fff04 	addi	r5,r5,-4
 8006e40:	11800017 	ldw	r6,0(r2)
 8006e44:	28c00017 	ldw	r3,0(r5)
 8006e48:	30fffa26 	beq	r6,r3,8006e34 <__alt_data_end+0xf8006e34>
 8006e4c:	30c00236 	bltu	r6,r3,8006e58 <__mcmp+0x50>
 8006e50:	00800044 	movi	r2,1
 8006e54:	f800283a 	ret
 8006e58:	00bfffc4 	movi	r2,-1
 8006e5c:	f800283a 	ret
 8006e60:	0005883a 	mov	r2,zero
 8006e64:	f800283a 	ret

08006e68 <__mdiff>:
 8006e68:	28c00417 	ldw	r3,16(r5)
 8006e6c:	30800417 	ldw	r2,16(r6)
 8006e70:	defffa04 	addi	sp,sp,-24
 8006e74:	dcc00315 	stw	r19,12(sp)
 8006e78:	dc800215 	stw	r18,8(sp)
 8006e7c:	dfc00515 	stw	ra,20(sp)
 8006e80:	dd000415 	stw	r20,16(sp)
 8006e84:	dc400115 	stw	r17,4(sp)
 8006e88:	dc000015 	stw	r16,0(sp)
 8006e8c:	1887c83a 	sub	r3,r3,r2
 8006e90:	2825883a 	mov	r18,r5
 8006e94:	3027883a 	mov	r19,r6
 8006e98:	1800141e 	bne	r3,zero,8006eec <__mdiff+0x84>
 8006e9c:	1085883a 	add	r2,r2,r2
 8006ea0:	1085883a 	add	r2,r2,r2
 8006ea4:	2a000504 	addi	r8,r5,20
 8006ea8:	34000504 	addi	r16,r6,20
 8006eac:	4087883a 	add	r3,r8,r2
 8006eb0:	8085883a 	add	r2,r16,r2
 8006eb4:	00000106 	br	8006ebc <__mdiff+0x54>
 8006eb8:	40c0592e 	bgeu	r8,r3,8007020 <__mdiff+0x1b8>
 8006ebc:	18ffff04 	addi	r3,r3,-4
 8006ec0:	10bfff04 	addi	r2,r2,-4
 8006ec4:	19c00017 	ldw	r7,0(r3)
 8006ec8:	11400017 	ldw	r5,0(r2)
 8006ecc:	397ffa26 	beq	r7,r5,8006eb8 <__alt_data_end+0xf8006eb8>
 8006ed0:	3940592e 	bgeu	r7,r5,8007038 <__mdiff+0x1d0>
 8006ed4:	9005883a 	mov	r2,r18
 8006ed8:	4023883a 	mov	r17,r8
 8006edc:	9825883a 	mov	r18,r19
 8006ee0:	05000044 	movi	r20,1
 8006ee4:	1027883a 	mov	r19,r2
 8006ee8:	00000406 	br	8006efc <__mdiff+0x94>
 8006eec:	18005616 	blt	r3,zero,8007048 <__mdiff+0x1e0>
 8006ef0:	34400504 	addi	r17,r6,20
 8006ef4:	2c000504 	addi	r16,r5,20
 8006ef8:	0029883a 	mov	r20,zero
 8006efc:	91400117 	ldw	r5,4(r18)
 8006f00:	80065400 	call	8006540 <_Balloc>
 8006f04:	92400417 	ldw	r9,16(r18)
 8006f08:	9b000417 	ldw	r12,16(r19)
 8006f0c:	12c00504 	addi	r11,r2,20
 8006f10:	4a51883a 	add	r8,r9,r9
 8006f14:	6319883a 	add	r12,r12,r12
 8006f18:	4211883a 	add	r8,r8,r8
 8006f1c:	6319883a 	add	r12,r12,r12
 8006f20:	15000315 	stw	r20,12(r2)
 8006f24:	8211883a 	add	r8,r16,r8
 8006f28:	8b19883a 	add	r12,r17,r12
 8006f2c:	0007883a 	mov	r3,zero
 8006f30:	81400017 	ldw	r5,0(r16)
 8006f34:	89c00017 	ldw	r7,0(r17)
 8006f38:	59800104 	addi	r6,r11,4
 8006f3c:	293fffcc 	andi	r4,r5,65535
 8006f40:	20c7883a 	add	r3,r4,r3
 8006f44:	393fffcc 	andi	r4,r7,65535
 8006f48:	1909c83a 	sub	r4,r3,r4
 8006f4c:	280ad43a 	srli	r5,r5,16
 8006f50:	380ed43a 	srli	r7,r7,16
 8006f54:	2007d43a 	srai	r3,r4,16
 8006f58:	213fffcc 	andi	r4,r4,65535
 8006f5c:	29cbc83a 	sub	r5,r5,r7
 8006f60:	28c7883a 	add	r3,r5,r3
 8006f64:	180a943a 	slli	r5,r3,16
 8006f68:	8c400104 	addi	r17,r17,4
 8006f6c:	84000104 	addi	r16,r16,4
 8006f70:	2908b03a 	or	r4,r5,r4
 8006f74:	59000015 	stw	r4,0(r11)
 8006f78:	1807d43a 	srai	r3,r3,16
 8006f7c:	3015883a 	mov	r10,r6
 8006f80:	3017883a 	mov	r11,r6
 8006f84:	8b3fea36 	bltu	r17,r12,8006f30 <__alt_data_end+0xf8006f30>
 8006f88:	8200162e 	bgeu	r16,r8,8006fe4 <__mdiff+0x17c>
 8006f8c:	8017883a 	mov	r11,r16
 8006f90:	59400017 	ldw	r5,0(r11)
 8006f94:	31800104 	addi	r6,r6,4
 8006f98:	5ac00104 	addi	r11,r11,4
 8006f9c:	293fffcc 	andi	r4,r5,65535
 8006fa0:	20c7883a 	add	r3,r4,r3
 8006fa4:	280ed43a 	srli	r7,r5,16
 8006fa8:	180bd43a 	srai	r5,r3,16
 8006fac:	193fffcc 	andi	r4,r3,65535
 8006fb0:	3947883a 	add	r3,r7,r5
 8006fb4:	180a943a 	slli	r5,r3,16
 8006fb8:	1807d43a 	srai	r3,r3,16
 8006fbc:	2908b03a 	or	r4,r5,r4
 8006fc0:	313fff15 	stw	r4,-4(r6)
 8006fc4:	5a3ff236 	bltu	r11,r8,8006f90 <__alt_data_end+0xf8006f90>
 8006fc8:	0406303a 	nor	r3,zero,r16
 8006fcc:	1a07883a 	add	r3,r3,r8
 8006fd0:	1806d0ba 	srli	r3,r3,2
 8006fd4:	18c00044 	addi	r3,r3,1
 8006fd8:	18c7883a 	add	r3,r3,r3
 8006fdc:	18c7883a 	add	r3,r3,r3
 8006fe0:	50d5883a 	add	r10,r10,r3
 8006fe4:	50ffff04 	addi	r3,r10,-4
 8006fe8:	2000041e 	bne	r4,zero,8006ffc <__mdiff+0x194>
 8006fec:	18ffff04 	addi	r3,r3,-4
 8006ff0:	19000017 	ldw	r4,0(r3)
 8006ff4:	4a7fffc4 	addi	r9,r9,-1
 8006ff8:	203ffc26 	beq	r4,zero,8006fec <__alt_data_end+0xf8006fec>
 8006ffc:	12400415 	stw	r9,16(r2)
 8007000:	dfc00517 	ldw	ra,20(sp)
 8007004:	dd000417 	ldw	r20,16(sp)
 8007008:	dcc00317 	ldw	r19,12(sp)
 800700c:	dc800217 	ldw	r18,8(sp)
 8007010:	dc400117 	ldw	r17,4(sp)
 8007014:	dc000017 	ldw	r16,0(sp)
 8007018:	dec00604 	addi	sp,sp,24
 800701c:	f800283a 	ret
 8007020:	000b883a 	mov	r5,zero
 8007024:	80065400 	call	8006540 <_Balloc>
 8007028:	00c00044 	movi	r3,1
 800702c:	10c00415 	stw	r3,16(r2)
 8007030:	10000515 	stw	zero,20(r2)
 8007034:	003ff206 	br	8007000 <__alt_data_end+0xf8007000>
 8007038:	8023883a 	mov	r17,r16
 800703c:	0029883a 	mov	r20,zero
 8007040:	4021883a 	mov	r16,r8
 8007044:	003fad06 	br	8006efc <__alt_data_end+0xf8006efc>
 8007048:	9005883a 	mov	r2,r18
 800704c:	94400504 	addi	r17,r18,20
 8007050:	9c000504 	addi	r16,r19,20
 8007054:	9825883a 	mov	r18,r19
 8007058:	05000044 	movi	r20,1
 800705c:	1027883a 	mov	r19,r2
 8007060:	003fa606 	br	8006efc <__alt_data_end+0xf8006efc>

08007064 <__ulp>:
 8007064:	295ffc2c 	andhi	r5,r5,32752
 8007068:	00bf3034 	movhi	r2,64704
 800706c:	2887883a 	add	r3,r5,r2
 8007070:	00c0020e 	bge	zero,r3,800707c <__ulp+0x18>
 8007074:	0005883a 	mov	r2,zero
 8007078:	f800283a 	ret
 800707c:	00c7c83a 	sub	r3,zero,r3
 8007080:	1807d53a 	srai	r3,r3,20
 8007084:	008004c4 	movi	r2,19
 8007088:	10c00b0e 	bge	r2,r3,80070b8 <__ulp+0x54>
 800708c:	18bffb04 	addi	r2,r3,-20
 8007090:	01000784 	movi	r4,30
 8007094:	0007883a 	mov	r3,zero
 8007098:	20800516 	blt	r4,r2,80070b0 <__ulp+0x4c>
 800709c:	010007c4 	movi	r4,31
 80070a0:	2089c83a 	sub	r4,r4,r2
 80070a4:	00800044 	movi	r2,1
 80070a8:	1104983a 	sll	r2,r2,r4
 80070ac:	f800283a 	ret
 80070b0:	00800044 	movi	r2,1
 80070b4:	f800283a 	ret
 80070b8:	01400234 	movhi	r5,8
 80070bc:	28c7d83a 	sra	r3,r5,r3
 80070c0:	0005883a 	mov	r2,zero
 80070c4:	f800283a 	ret

080070c8 <__b2d>:
 80070c8:	defffa04 	addi	sp,sp,-24
 80070cc:	dc000015 	stw	r16,0(sp)
 80070d0:	24000417 	ldw	r16,16(r4)
 80070d4:	dc400115 	stw	r17,4(sp)
 80070d8:	24400504 	addi	r17,r4,20
 80070dc:	8421883a 	add	r16,r16,r16
 80070e0:	8421883a 	add	r16,r16,r16
 80070e4:	8c21883a 	add	r16,r17,r16
 80070e8:	dc800215 	stw	r18,8(sp)
 80070ec:	84bfff17 	ldw	r18,-4(r16)
 80070f0:	dd000415 	stw	r20,16(sp)
 80070f4:	dcc00315 	stw	r19,12(sp)
 80070f8:	9009883a 	mov	r4,r18
 80070fc:	2829883a 	mov	r20,r5
 8007100:	dfc00515 	stw	ra,20(sp)
 8007104:	80068340 	call	8006834 <__hi0bits>
 8007108:	00c00804 	movi	r3,32
 800710c:	1889c83a 	sub	r4,r3,r2
 8007110:	a1000015 	stw	r4,0(r20)
 8007114:	01000284 	movi	r4,10
 8007118:	84ffff04 	addi	r19,r16,-4
 800711c:	20801216 	blt	r4,r2,8007168 <__b2d+0xa0>
 8007120:	018002c4 	movi	r6,11
 8007124:	308dc83a 	sub	r6,r6,r2
 8007128:	9186d83a 	srl	r3,r18,r6
 800712c:	18cffc34 	orhi	r3,r3,16368
 8007130:	8cc0212e 	bgeu	r17,r19,80071b8 <__b2d+0xf0>
 8007134:	813ffe17 	ldw	r4,-8(r16)
 8007138:	218cd83a 	srl	r6,r4,r6
 800713c:	10800544 	addi	r2,r2,21
 8007140:	9084983a 	sll	r2,r18,r2
 8007144:	1184b03a 	or	r2,r2,r6
 8007148:	dfc00517 	ldw	ra,20(sp)
 800714c:	dd000417 	ldw	r20,16(sp)
 8007150:	dcc00317 	ldw	r19,12(sp)
 8007154:	dc800217 	ldw	r18,8(sp)
 8007158:	dc400117 	ldw	r17,4(sp)
 800715c:	dc000017 	ldw	r16,0(sp)
 8007160:	dec00604 	addi	sp,sp,24
 8007164:	f800283a 	ret
 8007168:	8cc00f2e 	bgeu	r17,r19,80071a8 <__b2d+0xe0>
 800716c:	117ffd44 	addi	r5,r2,-11
 8007170:	80bffe17 	ldw	r2,-8(r16)
 8007174:	28000e26 	beq	r5,zero,80071b0 <__b2d+0xe8>
 8007178:	1949c83a 	sub	r4,r3,r5
 800717c:	9164983a 	sll	r18,r18,r5
 8007180:	1106d83a 	srl	r3,r2,r4
 8007184:	81bffe04 	addi	r6,r16,-8
 8007188:	948ffc34 	orhi	r18,r18,16368
 800718c:	90c6b03a 	or	r3,r18,r3
 8007190:	89800e2e 	bgeu	r17,r6,80071cc <__b2d+0x104>
 8007194:	81bffd17 	ldw	r6,-12(r16)
 8007198:	1144983a 	sll	r2,r2,r5
 800719c:	310ad83a 	srl	r5,r6,r4
 80071a0:	2884b03a 	or	r2,r5,r2
 80071a4:	003fe806 	br	8007148 <__alt_data_end+0xf8007148>
 80071a8:	10bffd44 	addi	r2,r2,-11
 80071ac:	1000041e 	bne	r2,zero,80071c0 <__b2d+0xf8>
 80071b0:	90cffc34 	orhi	r3,r18,16368
 80071b4:	003fe406 	br	8007148 <__alt_data_end+0xf8007148>
 80071b8:	000d883a 	mov	r6,zero
 80071bc:	003fdf06 	br	800713c <__alt_data_end+0xf800713c>
 80071c0:	90a4983a 	sll	r18,r18,r2
 80071c4:	0005883a 	mov	r2,zero
 80071c8:	003ff906 	br	80071b0 <__alt_data_end+0xf80071b0>
 80071cc:	1144983a 	sll	r2,r2,r5
 80071d0:	003fdd06 	br	8007148 <__alt_data_end+0xf8007148>

080071d4 <__d2b>:
 80071d4:	defff804 	addi	sp,sp,-32
 80071d8:	dc000215 	stw	r16,8(sp)
 80071dc:	3021883a 	mov	r16,r6
 80071e0:	dc400315 	stw	r17,12(sp)
 80071e4:	8022907a 	slli	r17,r16,1
 80071e8:	dd000615 	stw	r20,24(sp)
 80071ec:	2829883a 	mov	r20,r5
 80071f0:	01400044 	movi	r5,1
 80071f4:	dcc00515 	stw	r19,20(sp)
 80071f8:	dc800415 	stw	r18,16(sp)
 80071fc:	dfc00715 	stw	ra,28(sp)
 8007200:	3825883a 	mov	r18,r7
 8007204:	8822d57a 	srli	r17,r17,21
 8007208:	80065400 	call	8006540 <_Balloc>
 800720c:	1027883a 	mov	r19,r2
 8007210:	00800434 	movhi	r2,16
 8007214:	10bfffc4 	addi	r2,r2,-1
 8007218:	808c703a 	and	r6,r16,r2
 800721c:	88000126 	beq	r17,zero,8007224 <__d2b+0x50>
 8007220:	31800434 	orhi	r6,r6,16
 8007224:	d9800015 	stw	r6,0(sp)
 8007228:	a0002426 	beq	r20,zero,80072bc <__d2b+0xe8>
 800722c:	d9000104 	addi	r4,sp,4
 8007230:	dd000115 	stw	r20,4(sp)
 8007234:	800689c0 	call	800689c <__lo0bits>
 8007238:	d8c00017 	ldw	r3,0(sp)
 800723c:	10002f1e 	bne	r2,zero,80072fc <__d2b+0x128>
 8007240:	d9000117 	ldw	r4,4(sp)
 8007244:	99000515 	stw	r4,20(r19)
 8007248:	1821003a 	cmpeq	r16,r3,zero
 800724c:	01000084 	movi	r4,2
 8007250:	2421c83a 	sub	r16,r4,r16
 8007254:	98c00615 	stw	r3,24(r19)
 8007258:	9c000415 	stw	r16,16(r19)
 800725c:	88001f1e 	bne	r17,zero,80072dc <__d2b+0x108>
 8007260:	10bef384 	addi	r2,r2,-1074
 8007264:	90800015 	stw	r2,0(r18)
 8007268:	00900034 	movhi	r2,16384
 800726c:	10bfffc4 	addi	r2,r2,-1
 8007270:	8085883a 	add	r2,r16,r2
 8007274:	1085883a 	add	r2,r2,r2
 8007278:	1085883a 	add	r2,r2,r2
 800727c:	9885883a 	add	r2,r19,r2
 8007280:	11000517 	ldw	r4,20(r2)
 8007284:	8020917a 	slli	r16,r16,5
 8007288:	80068340 	call	8006834 <__hi0bits>
 800728c:	d8c00817 	ldw	r3,32(sp)
 8007290:	8085c83a 	sub	r2,r16,r2
 8007294:	18800015 	stw	r2,0(r3)
 8007298:	9805883a 	mov	r2,r19
 800729c:	dfc00717 	ldw	ra,28(sp)
 80072a0:	dd000617 	ldw	r20,24(sp)
 80072a4:	dcc00517 	ldw	r19,20(sp)
 80072a8:	dc800417 	ldw	r18,16(sp)
 80072ac:	dc400317 	ldw	r17,12(sp)
 80072b0:	dc000217 	ldw	r16,8(sp)
 80072b4:	dec00804 	addi	sp,sp,32
 80072b8:	f800283a 	ret
 80072bc:	d809883a 	mov	r4,sp
 80072c0:	800689c0 	call	800689c <__lo0bits>
 80072c4:	d8c00017 	ldw	r3,0(sp)
 80072c8:	04000044 	movi	r16,1
 80072cc:	9c000415 	stw	r16,16(r19)
 80072d0:	98c00515 	stw	r3,20(r19)
 80072d4:	10800804 	addi	r2,r2,32
 80072d8:	883fe126 	beq	r17,zero,8007260 <__alt_data_end+0xf8007260>
 80072dc:	00c00d44 	movi	r3,53
 80072e0:	8c7ef344 	addi	r17,r17,-1075
 80072e4:	88a3883a 	add	r17,r17,r2
 80072e8:	1885c83a 	sub	r2,r3,r2
 80072ec:	d8c00817 	ldw	r3,32(sp)
 80072f0:	94400015 	stw	r17,0(r18)
 80072f4:	18800015 	stw	r2,0(r3)
 80072f8:	003fe706 	br	8007298 <__alt_data_end+0xf8007298>
 80072fc:	01000804 	movi	r4,32
 8007300:	2089c83a 	sub	r4,r4,r2
 8007304:	1908983a 	sll	r4,r3,r4
 8007308:	d9400117 	ldw	r5,4(sp)
 800730c:	1886d83a 	srl	r3,r3,r2
 8007310:	2148b03a 	or	r4,r4,r5
 8007314:	99000515 	stw	r4,20(r19)
 8007318:	d8c00015 	stw	r3,0(sp)
 800731c:	003fca06 	br	8007248 <__alt_data_end+0xf8007248>

08007320 <__ratio>:
 8007320:	defff904 	addi	sp,sp,-28
 8007324:	dc400315 	stw	r17,12(sp)
 8007328:	2823883a 	mov	r17,r5
 800732c:	d9400104 	addi	r5,sp,4
 8007330:	dfc00615 	stw	ra,24(sp)
 8007334:	dcc00515 	stw	r19,20(sp)
 8007338:	dc800415 	stw	r18,16(sp)
 800733c:	2027883a 	mov	r19,r4
 8007340:	dc000215 	stw	r16,8(sp)
 8007344:	80070c80 	call	80070c8 <__b2d>
 8007348:	d80b883a 	mov	r5,sp
 800734c:	8809883a 	mov	r4,r17
 8007350:	1025883a 	mov	r18,r2
 8007354:	1821883a 	mov	r16,r3
 8007358:	80070c80 	call	80070c8 <__b2d>
 800735c:	8a000417 	ldw	r8,16(r17)
 8007360:	99000417 	ldw	r4,16(r19)
 8007364:	d9400117 	ldw	r5,4(sp)
 8007368:	2209c83a 	sub	r4,r4,r8
 800736c:	2010917a 	slli	r8,r4,5
 8007370:	d9000017 	ldw	r4,0(sp)
 8007374:	2909c83a 	sub	r4,r5,r4
 8007378:	4109883a 	add	r4,r8,r4
 800737c:	01000e0e 	bge	zero,r4,80073b8 <__ratio+0x98>
 8007380:	2008953a 	slli	r4,r4,20
 8007384:	2421883a 	add	r16,r4,r16
 8007388:	100d883a 	mov	r6,r2
 800738c:	180f883a 	mov	r7,r3
 8007390:	9009883a 	mov	r4,r18
 8007394:	800b883a 	mov	r5,r16
 8007398:	800b20c0 	call	800b20c <__divdf3>
 800739c:	dfc00617 	ldw	ra,24(sp)
 80073a0:	dcc00517 	ldw	r19,20(sp)
 80073a4:	dc800417 	ldw	r18,16(sp)
 80073a8:	dc400317 	ldw	r17,12(sp)
 80073ac:	dc000217 	ldw	r16,8(sp)
 80073b0:	dec00704 	addi	sp,sp,28
 80073b4:	f800283a 	ret
 80073b8:	2008953a 	slli	r4,r4,20
 80073bc:	1907c83a 	sub	r3,r3,r4
 80073c0:	003ff106 	br	8007388 <__alt_data_end+0xf8007388>

080073c4 <_mprec_log10>:
 80073c4:	defffe04 	addi	sp,sp,-8
 80073c8:	dc000015 	stw	r16,0(sp)
 80073cc:	dfc00115 	stw	ra,4(sp)
 80073d0:	008005c4 	movi	r2,23
 80073d4:	2021883a 	mov	r16,r4
 80073d8:	11000d0e 	bge	r2,r4,8007410 <_mprec_log10+0x4c>
 80073dc:	0005883a 	mov	r2,zero
 80073e0:	00cffc34 	movhi	r3,16368
 80073e4:	843fffc4 	addi	r16,r16,-1
 80073e8:	000d883a 	mov	r6,zero
 80073ec:	01d00934 	movhi	r7,16420
 80073f0:	1009883a 	mov	r4,r2
 80073f4:	180b883a 	mov	r5,r3
 80073f8:	800bd4c0 	call	800bd4c <__muldf3>
 80073fc:	803ff91e 	bne	r16,zero,80073e4 <__alt_data_end+0xf80073e4>
 8007400:	dfc00117 	ldw	ra,4(sp)
 8007404:	dc000017 	ldw	r16,0(sp)
 8007408:	dec00204 	addi	sp,sp,8
 800740c:	f800283a 	ret
 8007410:	202090fa 	slli	r16,r4,3
 8007414:	008200b4 	movhi	r2,2050
 8007418:	10a41204 	addi	r2,r2,-28600
 800741c:	1421883a 	add	r16,r2,r16
 8007420:	80800017 	ldw	r2,0(r16)
 8007424:	80c00117 	ldw	r3,4(r16)
 8007428:	dfc00117 	ldw	ra,4(sp)
 800742c:	dc000017 	ldw	r16,0(sp)
 8007430:	dec00204 	addi	sp,sp,8
 8007434:	f800283a 	ret

08007438 <__copybits>:
 8007438:	297fffc4 	addi	r5,r5,-1
 800743c:	280fd17a 	srai	r7,r5,5
 8007440:	30c00417 	ldw	r3,16(r6)
 8007444:	30800504 	addi	r2,r6,20
 8007448:	39c00044 	addi	r7,r7,1
 800744c:	18c7883a 	add	r3,r3,r3
 8007450:	39cf883a 	add	r7,r7,r7
 8007454:	18c7883a 	add	r3,r3,r3
 8007458:	39cf883a 	add	r7,r7,r7
 800745c:	10c7883a 	add	r3,r2,r3
 8007460:	21cf883a 	add	r7,r4,r7
 8007464:	10c00d2e 	bgeu	r2,r3,800749c <__copybits+0x64>
 8007468:	200b883a 	mov	r5,r4
 800746c:	12000017 	ldw	r8,0(r2)
 8007470:	29400104 	addi	r5,r5,4
 8007474:	10800104 	addi	r2,r2,4
 8007478:	2a3fff15 	stw	r8,-4(r5)
 800747c:	10fffb36 	bltu	r2,r3,800746c <__alt_data_end+0xf800746c>
 8007480:	1985c83a 	sub	r2,r3,r6
 8007484:	10bffac4 	addi	r2,r2,-21
 8007488:	1004d0ba 	srli	r2,r2,2
 800748c:	10800044 	addi	r2,r2,1
 8007490:	1085883a 	add	r2,r2,r2
 8007494:	1085883a 	add	r2,r2,r2
 8007498:	2089883a 	add	r4,r4,r2
 800749c:	21c0032e 	bgeu	r4,r7,80074ac <__copybits+0x74>
 80074a0:	20000015 	stw	zero,0(r4)
 80074a4:	21000104 	addi	r4,r4,4
 80074a8:	21fffd36 	bltu	r4,r7,80074a0 <__alt_data_end+0xf80074a0>
 80074ac:	f800283a 	ret

080074b0 <__any_on>:
 80074b0:	20c00417 	ldw	r3,16(r4)
 80074b4:	2805d17a 	srai	r2,r5,5
 80074b8:	21000504 	addi	r4,r4,20
 80074bc:	18800d0e 	bge	r3,r2,80074f4 <__any_on+0x44>
 80074c0:	18c7883a 	add	r3,r3,r3
 80074c4:	18c7883a 	add	r3,r3,r3
 80074c8:	20c7883a 	add	r3,r4,r3
 80074cc:	20c0192e 	bgeu	r4,r3,8007534 <__any_on+0x84>
 80074d0:	18bfff17 	ldw	r2,-4(r3)
 80074d4:	18ffff04 	addi	r3,r3,-4
 80074d8:	1000041e 	bne	r2,zero,80074ec <__any_on+0x3c>
 80074dc:	20c0142e 	bgeu	r4,r3,8007530 <__any_on+0x80>
 80074e0:	18ffff04 	addi	r3,r3,-4
 80074e4:	19400017 	ldw	r5,0(r3)
 80074e8:	283ffc26 	beq	r5,zero,80074dc <__alt_data_end+0xf80074dc>
 80074ec:	00800044 	movi	r2,1
 80074f0:	f800283a 	ret
 80074f4:	10c00a0e 	bge	r2,r3,8007520 <__any_on+0x70>
 80074f8:	1085883a 	add	r2,r2,r2
 80074fc:	1085883a 	add	r2,r2,r2
 8007500:	294007cc 	andi	r5,r5,31
 8007504:	2087883a 	add	r3,r4,r2
 8007508:	283ff026 	beq	r5,zero,80074cc <__alt_data_end+0xf80074cc>
 800750c:	19800017 	ldw	r6,0(r3)
 8007510:	3144d83a 	srl	r2,r6,r5
 8007514:	114a983a 	sll	r5,r2,r5
 8007518:	317ff41e 	bne	r6,r5,80074ec <__alt_data_end+0xf80074ec>
 800751c:	003feb06 	br	80074cc <__alt_data_end+0xf80074cc>
 8007520:	1085883a 	add	r2,r2,r2
 8007524:	1085883a 	add	r2,r2,r2
 8007528:	2087883a 	add	r3,r4,r2
 800752c:	003fe706 	br	80074cc <__alt_data_end+0xf80074cc>
 8007530:	f800283a 	ret
 8007534:	0005883a 	mov	r2,zero
 8007538:	f800283a 	ret

0800753c <_realloc_r>:
 800753c:	defff604 	addi	sp,sp,-40
 8007540:	dc800215 	stw	r18,8(sp)
 8007544:	dfc00915 	stw	ra,36(sp)
 8007548:	df000815 	stw	fp,32(sp)
 800754c:	ddc00715 	stw	r23,28(sp)
 8007550:	dd800615 	stw	r22,24(sp)
 8007554:	dd400515 	stw	r21,20(sp)
 8007558:	dd000415 	stw	r20,16(sp)
 800755c:	dcc00315 	stw	r19,12(sp)
 8007560:	dc400115 	stw	r17,4(sp)
 8007564:	dc000015 	stw	r16,0(sp)
 8007568:	3025883a 	mov	r18,r6
 800756c:	2800b726 	beq	r5,zero,800784c <_realloc_r+0x310>
 8007570:	282b883a 	mov	r21,r5
 8007574:	2029883a 	mov	r20,r4
 8007578:	800dcc80 	call	800dcc8 <__malloc_lock>
 800757c:	a8bfff17 	ldw	r2,-4(r21)
 8007580:	043fff04 	movi	r16,-4
 8007584:	90c002c4 	addi	r3,r18,11
 8007588:	01000584 	movi	r4,22
 800758c:	acfffe04 	addi	r19,r21,-8
 8007590:	1420703a 	and	r16,r2,r16
 8007594:	20c0332e 	bgeu	r4,r3,8007664 <_realloc_r+0x128>
 8007598:	047ffe04 	movi	r17,-8
 800759c:	1c62703a 	and	r17,r3,r17
 80075a0:	8807883a 	mov	r3,r17
 80075a4:	88005816 	blt	r17,zero,8007708 <_realloc_r+0x1cc>
 80075a8:	8c805736 	bltu	r17,r18,8007708 <_realloc_r+0x1cc>
 80075ac:	80c0300e 	bge	r16,r3,8007670 <_realloc_r+0x134>
 80075b0:	070200b4 	movhi	fp,2050
 80075b4:	e7260c04 	addi	fp,fp,-26576
 80075b8:	e1c00217 	ldw	r7,8(fp)
 80075bc:	9c09883a 	add	r4,r19,r16
 80075c0:	22000117 	ldw	r8,4(r4)
 80075c4:	21c06326 	beq	r4,r7,8007754 <_realloc_r+0x218>
 80075c8:	017fff84 	movi	r5,-2
 80075cc:	414a703a 	and	r5,r8,r5
 80075d0:	214b883a 	add	r5,r4,r5
 80075d4:	29800117 	ldw	r6,4(r5)
 80075d8:	3180004c 	andi	r6,r6,1
 80075dc:	30003f26 	beq	r6,zero,80076dc <_realloc_r+0x1a0>
 80075e0:	1080004c 	andi	r2,r2,1
 80075e4:	10008326 	beq	r2,zero,80077f4 <_realloc_r+0x2b8>
 80075e8:	900b883a 	mov	r5,r18
 80075ec:	a009883a 	mov	r4,r20
 80075f0:	80058840 	call	8005884 <_malloc_r>
 80075f4:	1025883a 	mov	r18,r2
 80075f8:	10011e26 	beq	r2,zero,8007a74 <_realloc_r+0x538>
 80075fc:	a93fff17 	ldw	r4,-4(r21)
 8007600:	10fffe04 	addi	r3,r2,-8
 8007604:	00bfff84 	movi	r2,-2
 8007608:	2084703a 	and	r2,r4,r2
 800760c:	9885883a 	add	r2,r19,r2
 8007610:	1880ee26 	beq	r3,r2,80079cc <_realloc_r+0x490>
 8007614:	81bfff04 	addi	r6,r16,-4
 8007618:	00800904 	movi	r2,36
 800761c:	1180b836 	bltu	r2,r6,8007900 <_realloc_r+0x3c4>
 8007620:	00c004c4 	movi	r3,19
 8007624:	19809636 	bltu	r3,r6,8007880 <_realloc_r+0x344>
 8007628:	9005883a 	mov	r2,r18
 800762c:	a807883a 	mov	r3,r21
 8007630:	19000017 	ldw	r4,0(r3)
 8007634:	11000015 	stw	r4,0(r2)
 8007638:	19000117 	ldw	r4,4(r3)
 800763c:	11000115 	stw	r4,4(r2)
 8007640:	18c00217 	ldw	r3,8(r3)
 8007644:	10c00215 	stw	r3,8(r2)
 8007648:	a80b883a 	mov	r5,r21
 800764c:	a009883a 	mov	r4,r20
 8007650:	8004c980 	call	8004c98 <_free_r>
 8007654:	a009883a 	mov	r4,r20
 8007658:	800dde80 	call	800dde8 <__malloc_unlock>
 800765c:	9005883a 	mov	r2,r18
 8007660:	00001206 	br	80076ac <_realloc_r+0x170>
 8007664:	00c00404 	movi	r3,16
 8007668:	1823883a 	mov	r17,r3
 800766c:	003fce06 	br	80075a8 <__alt_data_end+0xf80075a8>
 8007670:	a825883a 	mov	r18,r21
 8007674:	8445c83a 	sub	r2,r16,r17
 8007678:	00c003c4 	movi	r3,15
 800767c:	18802636 	bltu	r3,r2,8007718 <_realloc_r+0x1dc>
 8007680:	99800117 	ldw	r6,4(r19)
 8007684:	9c07883a 	add	r3,r19,r16
 8007688:	3180004c 	andi	r6,r6,1
 800768c:	3420b03a 	or	r16,r6,r16
 8007690:	9c000115 	stw	r16,4(r19)
 8007694:	18800117 	ldw	r2,4(r3)
 8007698:	10800054 	ori	r2,r2,1
 800769c:	18800115 	stw	r2,4(r3)
 80076a0:	a009883a 	mov	r4,r20
 80076a4:	800dde80 	call	800dde8 <__malloc_unlock>
 80076a8:	9005883a 	mov	r2,r18
 80076ac:	dfc00917 	ldw	ra,36(sp)
 80076b0:	df000817 	ldw	fp,32(sp)
 80076b4:	ddc00717 	ldw	r23,28(sp)
 80076b8:	dd800617 	ldw	r22,24(sp)
 80076bc:	dd400517 	ldw	r21,20(sp)
 80076c0:	dd000417 	ldw	r20,16(sp)
 80076c4:	dcc00317 	ldw	r19,12(sp)
 80076c8:	dc800217 	ldw	r18,8(sp)
 80076cc:	dc400117 	ldw	r17,4(sp)
 80076d0:	dc000017 	ldw	r16,0(sp)
 80076d4:	dec00a04 	addi	sp,sp,40
 80076d8:	f800283a 	ret
 80076dc:	017fff04 	movi	r5,-4
 80076e0:	414a703a 	and	r5,r8,r5
 80076e4:	814d883a 	add	r6,r16,r5
 80076e8:	30c01f16 	blt	r6,r3,8007768 <_realloc_r+0x22c>
 80076ec:	20800317 	ldw	r2,12(r4)
 80076f0:	20c00217 	ldw	r3,8(r4)
 80076f4:	a825883a 	mov	r18,r21
 80076f8:	3021883a 	mov	r16,r6
 80076fc:	18800315 	stw	r2,12(r3)
 8007700:	10c00215 	stw	r3,8(r2)
 8007704:	003fdb06 	br	8007674 <__alt_data_end+0xf8007674>
 8007708:	00800304 	movi	r2,12
 800770c:	a0800015 	stw	r2,0(r20)
 8007710:	0005883a 	mov	r2,zero
 8007714:	003fe506 	br	80076ac <__alt_data_end+0xf80076ac>
 8007718:	98c00117 	ldw	r3,4(r19)
 800771c:	9c4b883a 	add	r5,r19,r17
 8007720:	11000054 	ori	r4,r2,1
 8007724:	18c0004c 	andi	r3,r3,1
 8007728:	1c62b03a 	or	r17,r3,r17
 800772c:	9c400115 	stw	r17,4(r19)
 8007730:	29000115 	stw	r4,4(r5)
 8007734:	2885883a 	add	r2,r5,r2
 8007738:	10c00117 	ldw	r3,4(r2)
 800773c:	29400204 	addi	r5,r5,8
 8007740:	a009883a 	mov	r4,r20
 8007744:	18c00054 	ori	r3,r3,1
 8007748:	10c00115 	stw	r3,4(r2)
 800774c:	8004c980 	call	8004c98 <_free_r>
 8007750:	003fd306 	br	80076a0 <__alt_data_end+0xf80076a0>
 8007754:	017fff04 	movi	r5,-4
 8007758:	414a703a 	and	r5,r8,r5
 800775c:	89800404 	addi	r6,r17,16
 8007760:	8151883a 	add	r8,r16,r5
 8007764:	4180590e 	bge	r8,r6,80078cc <_realloc_r+0x390>
 8007768:	1080004c 	andi	r2,r2,1
 800776c:	103f9e1e 	bne	r2,zero,80075e8 <__alt_data_end+0xf80075e8>
 8007770:	adbffe17 	ldw	r22,-8(r21)
 8007774:	00bfff04 	movi	r2,-4
 8007778:	9dadc83a 	sub	r22,r19,r22
 800777c:	b1800117 	ldw	r6,4(r22)
 8007780:	3084703a 	and	r2,r6,r2
 8007784:	20002026 	beq	r4,zero,8007808 <_realloc_r+0x2cc>
 8007788:	80af883a 	add	r23,r16,r2
 800778c:	b96f883a 	add	r23,r23,r5
 8007790:	21c05f26 	beq	r4,r7,8007910 <_realloc_r+0x3d4>
 8007794:	b8c01c16 	blt	r23,r3,8007808 <_realloc_r+0x2cc>
 8007798:	20800317 	ldw	r2,12(r4)
 800779c:	20c00217 	ldw	r3,8(r4)
 80077a0:	81bfff04 	addi	r6,r16,-4
 80077a4:	01000904 	movi	r4,36
 80077a8:	18800315 	stw	r2,12(r3)
 80077ac:	10c00215 	stw	r3,8(r2)
 80077b0:	b0c00217 	ldw	r3,8(r22)
 80077b4:	b0800317 	ldw	r2,12(r22)
 80077b8:	b4800204 	addi	r18,r22,8
 80077bc:	18800315 	stw	r2,12(r3)
 80077c0:	10c00215 	stw	r3,8(r2)
 80077c4:	21801b36 	bltu	r4,r6,8007834 <_realloc_r+0x2f8>
 80077c8:	008004c4 	movi	r2,19
 80077cc:	1180352e 	bgeu	r2,r6,80078a4 <_realloc_r+0x368>
 80077d0:	a8800017 	ldw	r2,0(r21)
 80077d4:	b0800215 	stw	r2,8(r22)
 80077d8:	a8800117 	ldw	r2,4(r21)
 80077dc:	b0800315 	stw	r2,12(r22)
 80077e0:	008006c4 	movi	r2,27
 80077e4:	11807f36 	bltu	r2,r6,80079e4 <_realloc_r+0x4a8>
 80077e8:	b0800404 	addi	r2,r22,16
 80077ec:	ad400204 	addi	r21,r21,8
 80077f0:	00002d06 	br	80078a8 <_realloc_r+0x36c>
 80077f4:	adbffe17 	ldw	r22,-8(r21)
 80077f8:	00bfff04 	movi	r2,-4
 80077fc:	9dadc83a 	sub	r22,r19,r22
 8007800:	b1000117 	ldw	r4,4(r22)
 8007804:	2084703a 	and	r2,r4,r2
 8007808:	b03f7726 	beq	r22,zero,80075e8 <__alt_data_end+0xf80075e8>
 800780c:	80af883a 	add	r23,r16,r2
 8007810:	b8ff7516 	blt	r23,r3,80075e8 <__alt_data_end+0xf80075e8>
 8007814:	b0800317 	ldw	r2,12(r22)
 8007818:	b0c00217 	ldw	r3,8(r22)
 800781c:	81bfff04 	addi	r6,r16,-4
 8007820:	01000904 	movi	r4,36
 8007824:	18800315 	stw	r2,12(r3)
 8007828:	10c00215 	stw	r3,8(r2)
 800782c:	b4800204 	addi	r18,r22,8
 8007830:	21bfe52e 	bgeu	r4,r6,80077c8 <__alt_data_end+0xf80077c8>
 8007834:	a80b883a 	mov	r5,r21
 8007838:	9009883a 	mov	r4,r18
 800783c:	80062bc0 	call	80062bc <memmove>
 8007840:	b821883a 	mov	r16,r23
 8007844:	b027883a 	mov	r19,r22
 8007848:	003f8a06 	br	8007674 <__alt_data_end+0xf8007674>
 800784c:	300b883a 	mov	r5,r6
 8007850:	dfc00917 	ldw	ra,36(sp)
 8007854:	df000817 	ldw	fp,32(sp)
 8007858:	ddc00717 	ldw	r23,28(sp)
 800785c:	dd800617 	ldw	r22,24(sp)
 8007860:	dd400517 	ldw	r21,20(sp)
 8007864:	dd000417 	ldw	r20,16(sp)
 8007868:	dcc00317 	ldw	r19,12(sp)
 800786c:	dc800217 	ldw	r18,8(sp)
 8007870:	dc400117 	ldw	r17,4(sp)
 8007874:	dc000017 	ldw	r16,0(sp)
 8007878:	dec00a04 	addi	sp,sp,40
 800787c:	80058841 	jmpi	8005884 <_malloc_r>
 8007880:	a8c00017 	ldw	r3,0(r21)
 8007884:	90c00015 	stw	r3,0(r18)
 8007888:	a8c00117 	ldw	r3,4(r21)
 800788c:	90c00115 	stw	r3,4(r18)
 8007890:	00c006c4 	movi	r3,27
 8007894:	19804536 	bltu	r3,r6,80079ac <_realloc_r+0x470>
 8007898:	90800204 	addi	r2,r18,8
 800789c:	a8c00204 	addi	r3,r21,8
 80078a0:	003f6306 	br	8007630 <__alt_data_end+0xf8007630>
 80078a4:	9005883a 	mov	r2,r18
 80078a8:	a8c00017 	ldw	r3,0(r21)
 80078ac:	b821883a 	mov	r16,r23
 80078b0:	b027883a 	mov	r19,r22
 80078b4:	10c00015 	stw	r3,0(r2)
 80078b8:	a8c00117 	ldw	r3,4(r21)
 80078bc:	10c00115 	stw	r3,4(r2)
 80078c0:	a8c00217 	ldw	r3,8(r21)
 80078c4:	10c00215 	stw	r3,8(r2)
 80078c8:	003f6a06 	br	8007674 <__alt_data_end+0xf8007674>
 80078cc:	9c67883a 	add	r19,r19,r17
 80078d0:	4445c83a 	sub	r2,r8,r17
 80078d4:	e4c00215 	stw	r19,8(fp)
 80078d8:	10800054 	ori	r2,r2,1
 80078dc:	98800115 	stw	r2,4(r19)
 80078e0:	a8bfff17 	ldw	r2,-4(r21)
 80078e4:	a009883a 	mov	r4,r20
 80078e8:	1080004c 	andi	r2,r2,1
 80078ec:	1462b03a 	or	r17,r2,r17
 80078f0:	ac7fff15 	stw	r17,-4(r21)
 80078f4:	800dde80 	call	800dde8 <__malloc_unlock>
 80078f8:	a805883a 	mov	r2,r21
 80078fc:	003f6b06 	br	80076ac <__alt_data_end+0xf80076ac>
 8007900:	a80b883a 	mov	r5,r21
 8007904:	9009883a 	mov	r4,r18
 8007908:	80062bc0 	call	80062bc <memmove>
 800790c:	003f4e06 	br	8007648 <__alt_data_end+0xf8007648>
 8007910:	89000404 	addi	r4,r17,16
 8007914:	b93fbc16 	blt	r23,r4,8007808 <__alt_data_end+0xf8007808>
 8007918:	b0800317 	ldw	r2,12(r22)
 800791c:	b0c00217 	ldw	r3,8(r22)
 8007920:	81bfff04 	addi	r6,r16,-4
 8007924:	01000904 	movi	r4,36
 8007928:	18800315 	stw	r2,12(r3)
 800792c:	10c00215 	stw	r3,8(r2)
 8007930:	b4800204 	addi	r18,r22,8
 8007934:	21804336 	bltu	r4,r6,8007a44 <_realloc_r+0x508>
 8007938:	008004c4 	movi	r2,19
 800793c:	11803f2e 	bgeu	r2,r6,8007a3c <_realloc_r+0x500>
 8007940:	a8800017 	ldw	r2,0(r21)
 8007944:	b0800215 	stw	r2,8(r22)
 8007948:	a8800117 	ldw	r2,4(r21)
 800794c:	b0800315 	stw	r2,12(r22)
 8007950:	008006c4 	movi	r2,27
 8007954:	11803f36 	bltu	r2,r6,8007a54 <_realloc_r+0x518>
 8007958:	b0800404 	addi	r2,r22,16
 800795c:	ad400204 	addi	r21,r21,8
 8007960:	a8c00017 	ldw	r3,0(r21)
 8007964:	10c00015 	stw	r3,0(r2)
 8007968:	a8c00117 	ldw	r3,4(r21)
 800796c:	10c00115 	stw	r3,4(r2)
 8007970:	a8c00217 	ldw	r3,8(r21)
 8007974:	10c00215 	stw	r3,8(r2)
 8007978:	b447883a 	add	r3,r22,r17
 800797c:	bc45c83a 	sub	r2,r23,r17
 8007980:	e0c00215 	stw	r3,8(fp)
 8007984:	10800054 	ori	r2,r2,1
 8007988:	18800115 	stw	r2,4(r3)
 800798c:	b0800117 	ldw	r2,4(r22)
 8007990:	a009883a 	mov	r4,r20
 8007994:	1080004c 	andi	r2,r2,1
 8007998:	1462b03a 	or	r17,r2,r17
 800799c:	b4400115 	stw	r17,4(r22)
 80079a0:	800dde80 	call	800dde8 <__malloc_unlock>
 80079a4:	9005883a 	mov	r2,r18
 80079a8:	003f4006 	br	80076ac <__alt_data_end+0xf80076ac>
 80079ac:	a8c00217 	ldw	r3,8(r21)
 80079b0:	90c00215 	stw	r3,8(r18)
 80079b4:	a8c00317 	ldw	r3,12(r21)
 80079b8:	90c00315 	stw	r3,12(r18)
 80079bc:	30801126 	beq	r6,r2,8007a04 <_realloc_r+0x4c8>
 80079c0:	90800404 	addi	r2,r18,16
 80079c4:	a8c00404 	addi	r3,r21,16
 80079c8:	003f1906 	br	8007630 <__alt_data_end+0xf8007630>
 80079cc:	90ffff17 	ldw	r3,-4(r18)
 80079d0:	00bfff04 	movi	r2,-4
 80079d4:	a825883a 	mov	r18,r21
 80079d8:	1884703a 	and	r2,r3,r2
 80079dc:	80a1883a 	add	r16,r16,r2
 80079e0:	003f2406 	br	8007674 <__alt_data_end+0xf8007674>
 80079e4:	a8800217 	ldw	r2,8(r21)
 80079e8:	b0800415 	stw	r2,16(r22)
 80079ec:	a8800317 	ldw	r2,12(r21)
 80079f0:	b0800515 	stw	r2,20(r22)
 80079f4:	31000a26 	beq	r6,r4,8007a20 <_realloc_r+0x4e4>
 80079f8:	b0800604 	addi	r2,r22,24
 80079fc:	ad400404 	addi	r21,r21,16
 8007a00:	003fa906 	br	80078a8 <__alt_data_end+0xf80078a8>
 8007a04:	a9000417 	ldw	r4,16(r21)
 8007a08:	90800604 	addi	r2,r18,24
 8007a0c:	a8c00604 	addi	r3,r21,24
 8007a10:	91000415 	stw	r4,16(r18)
 8007a14:	a9000517 	ldw	r4,20(r21)
 8007a18:	91000515 	stw	r4,20(r18)
 8007a1c:	003f0406 	br	8007630 <__alt_data_end+0xf8007630>
 8007a20:	a8c00417 	ldw	r3,16(r21)
 8007a24:	ad400604 	addi	r21,r21,24
 8007a28:	b0800804 	addi	r2,r22,32
 8007a2c:	b0c00615 	stw	r3,24(r22)
 8007a30:	a8ffff17 	ldw	r3,-4(r21)
 8007a34:	b0c00715 	stw	r3,28(r22)
 8007a38:	003f9b06 	br	80078a8 <__alt_data_end+0xf80078a8>
 8007a3c:	9005883a 	mov	r2,r18
 8007a40:	003fc706 	br	8007960 <__alt_data_end+0xf8007960>
 8007a44:	a80b883a 	mov	r5,r21
 8007a48:	9009883a 	mov	r4,r18
 8007a4c:	80062bc0 	call	80062bc <memmove>
 8007a50:	003fc906 	br	8007978 <__alt_data_end+0xf8007978>
 8007a54:	a8800217 	ldw	r2,8(r21)
 8007a58:	b0800415 	stw	r2,16(r22)
 8007a5c:	a8800317 	ldw	r2,12(r21)
 8007a60:	b0800515 	stw	r2,20(r22)
 8007a64:	31000726 	beq	r6,r4,8007a84 <_realloc_r+0x548>
 8007a68:	b0800604 	addi	r2,r22,24
 8007a6c:	ad400404 	addi	r21,r21,16
 8007a70:	003fbb06 	br	8007960 <__alt_data_end+0xf8007960>
 8007a74:	a009883a 	mov	r4,r20
 8007a78:	800dde80 	call	800dde8 <__malloc_unlock>
 8007a7c:	0005883a 	mov	r2,zero
 8007a80:	003f0a06 	br	80076ac <__alt_data_end+0xf80076ac>
 8007a84:	a8c00417 	ldw	r3,16(r21)
 8007a88:	ad400604 	addi	r21,r21,24
 8007a8c:	b0800804 	addi	r2,r22,32
 8007a90:	b0c00615 	stw	r3,24(r22)
 8007a94:	a8ffff17 	ldw	r3,-4(r21)
 8007a98:	b0c00715 	stw	r3,28(r22)
 8007a9c:	003fb006 	br	8007960 <__alt_data_end+0xf8007960>

08007aa0 <__fpclassifyd>:
 8007aa0:	00a00034 	movhi	r2,32768
 8007aa4:	10bfffc4 	addi	r2,r2,-1
 8007aa8:	2884703a 	and	r2,r5,r2
 8007aac:	10000726 	beq	r2,zero,8007acc <__fpclassifyd+0x2c>
 8007ab0:	00fffc34 	movhi	r3,65520
 8007ab4:	019ff834 	movhi	r6,32736
 8007ab8:	28c7883a 	add	r3,r5,r3
 8007abc:	31bfffc4 	addi	r6,r6,-1
 8007ac0:	30c00536 	bltu	r6,r3,8007ad8 <__fpclassifyd+0x38>
 8007ac4:	00800104 	movi	r2,4
 8007ac8:	f800283a 	ret
 8007acc:	2000021e 	bne	r4,zero,8007ad8 <__fpclassifyd+0x38>
 8007ad0:	00800084 	movi	r2,2
 8007ad4:	f800283a 	ret
 8007ad8:	00dffc34 	movhi	r3,32752
 8007adc:	019ff834 	movhi	r6,32736
 8007ae0:	28cb883a 	add	r5,r5,r3
 8007ae4:	31bfffc4 	addi	r6,r6,-1
 8007ae8:	317ff62e 	bgeu	r6,r5,8007ac4 <__alt_data_end+0xf8007ac4>
 8007aec:	01400434 	movhi	r5,16
 8007af0:	297fffc4 	addi	r5,r5,-1
 8007af4:	28800236 	bltu	r5,r2,8007b00 <__fpclassifyd+0x60>
 8007af8:	008000c4 	movi	r2,3
 8007afc:	f800283a 	ret
 8007b00:	10c00226 	beq	r2,r3,8007b0c <__fpclassifyd+0x6c>
 8007b04:	0005883a 	mov	r2,zero
 8007b08:	f800283a 	ret
 8007b0c:	2005003a 	cmpeq	r2,r4,zero
 8007b10:	f800283a 	ret

08007b14 <_sbrk_r>:
 8007b14:	defffd04 	addi	sp,sp,-12
 8007b18:	dc000015 	stw	r16,0(sp)
 8007b1c:	040200b4 	movhi	r16,2050
 8007b20:	dc400115 	stw	r17,4(sp)
 8007b24:	8432bd04 	addi	r16,r16,-13580
 8007b28:	2023883a 	mov	r17,r4
 8007b2c:	2809883a 	mov	r4,r5
 8007b30:	dfc00215 	stw	ra,8(sp)
 8007b34:	80000015 	stw	zero,0(r16)
 8007b38:	800d9c00 	call	800d9c0 <sbrk>
 8007b3c:	00ffffc4 	movi	r3,-1
 8007b40:	10c00526 	beq	r2,r3,8007b58 <_sbrk_r+0x44>
 8007b44:	dfc00217 	ldw	ra,8(sp)
 8007b48:	dc400117 	ldw	r17,4(sp)
 8007b4c:	dc000017 	ldw	r16,0(sp)
 8007b50:	dec00304 	addi	sp,sp,12
 8007b54:	f800283a 	ret
 8007b58:	80c00017 	ldw	r3,0(r16)
 8007b5c:	183ff926 	beq	r3,zero,8007b44 <__alt_data_end+0xf8007b44>
 8007b60:	88c00015 	stw	r3,0(r17)
 8007b64:	003ff706 	br	8007b44 <__alt_data_end+0xf8007b44>

08007b68 <__sread>:
 8007b68:	defffe04 	addi	sp,sp,-8
 8007b6c:	dc000015 	stw	r16,0(sp)
 8007b70:	2821883a 	mov	r16,r5
 8007b74:	2940038f 	ldh	r5,14(r5)
 8007b78:	dfc00115 	stw	ra,4(sp)
 8007b7c:	800995c0 	call	800995c <_read_r>
 8007b80:	10000716 	blt	r2,zero,8007ba0 <__sread+0x38>
 8007b84:	80c01417 	ldw	r3,80(r16)
 8007b88:	1887883a 	add	r3,r3,r2
 8007b8c:	80c01415 	stw	r3,80(r16)
 8007b90:	dfc00117 	ldw	ra,4(sp)
 8007b94:	dc000017 	ldw	r16,0(sp)
 8007b98:	dec00204 	addi	sp,sp,8
 8007b9c:	f800283a 	ret
 8007ba0:	80c0030b 	ldhu	r3,12(r16)
 8007ba4:	18fbffcc 	andi	r3,r3,61439
 8007ba8:	80c0030d 	sth	r3,12(r16)
 8007bac:	dfc00117 	ldw	ra,4(sp)
 8007bb0:	dc000017 	ldw	r16,0(sp)
 8007bb4:	dec00204 	addi	sp,sp,8
 8007bb8:	f800283a 	ret

08007bbc <__seofread>:
 8007bbc:	0005883a 	mov	r2,zero
 8007bc0:	f800283a 	ret

08007bc4 <__swrite>:
 8007bc4:	2880030b 	ldhu	r2,12(r5)
 8007bc8:	defffb04 	addi	sp,sp,-20
 8007bcc:	dcc00315 	stw	r19,12(sp)
 8007bd0:	dc800215 	stw	r18,8(sp)
 8007bd4:	dc400115 	stw	r17,4(sp)
 8007bd8:	dc000015 	stw	r16,0(sp)
 8007bdc:	dfc00415 	stw	ra,16(sp)
 8007be0:	10c0400c 	andi	r3,r2,256
 8007be4:	2821883a 	mov	r16,r5
 8007be8:	2023883a 	mov	r17,r4
 8007bec:	3025883a 	mov	r18,r6
 8007bf0:	3827883a 	mov	r19,r7
 8007bf4:	18000526 	beq	r3,zero,8007c0c <__swrite+0x48>
 8007bf8:	2940038f 	ldh	r5,14(r5)
 8007bfc:	01c00084 	movi	r7,2
 8007c00:	000d883a 	mov	r6,zero
 8007c04:	80098fc0 	call	80098fc <_lseek_r>
 8007c08:	8080030b 	ldhu	r2,12(r16)
 8007c0c:	8140038f 	ldh	r5,14(r16)
 8007c10:	10bbffcc 	andi	r2,r2,61439
 8007c14:	980f883a 	mov	r7,r19
 8007c18:	900d883a 	mov	r6,r18
 8007c1c:	8809883a 	mov	r4,r17
 8007c20:	8080030d 	sth	r2,12(r16)
 8007c24:	dfc00417 	ldw	ra,16(sp)
 8007c28:	dcc00317 	ldw	r19,12(sp)
 8007c2c:	dc800217 	ldw	r18,8(sp)
 8007c30:	dc400117 	ldw	r17,4(sp)
 8007c34:	dc000017 	ldw	r16,0(sp)
 8007c38:	dec00504 	addi	sp,sp,20
 8007c3c:	80093c81 	jmpi	80093c8 <_write_r>

08007c40 <__sseek>:
 8007c40:	defffe04 	addi	sp,sp,-8
 8007c44:	dc000015 	stw	r16,0(sp)
 8007c48:	2821883a 	mov	r16,r5
 8007c4c:	2940038f 	ldh	r5,14(r5)
 8007c50:	dfc00115 	stw	ra,4(sp)
 8007c54:	80098fc0 	call	80098fc <_lseek_r>
 8007c58:	00ffffc4 	movi	r3,-1
 8007c5c:	10c00826 	beq	r2,r3,8007c80 <__sseek+0x40>
 8007c60:	80c0030b 	ldhu	r3,12(r16)
 8007c64:	80801415 	stw	r2,80(r16)
 8007c68:	18c40014 	ori	r3,r3,4096
 8007c6c:	80c0030d 	sth	r3,12(r16)
 8007c70:	dfc00117 	ldw	ra,4(sp)
 8007c74:	dc000017 	ldw	r16,0(sp)
 8007c78:	dec00204 	addi	sp,sp,8
 8007c7c:	f800283a 	ret
 8007c80:	80c0030b 	ldhu	r3,12(r16)
 8007c84:	18fbffcc 	andi	r3,r3,61439
 8007c88:	80c0030d 	sth	r3,12(r16)
 8007c8c:	dfc00117 	ldw	ra,4(sp)
 8007c90:	dc000017 	ldw	r16,0(sp)
 8007c94:	dec00204 	addi	sp,sp,8
 8007c98:	f800283a 	ret

08007c9c <__sclose>:
 8007c9c:	2940038f 	ldh	r5,14(r5)
 8007ca0:	80094281 	jmpi	8009428 <_close_r>

08007ca4 <strcmp>:
 8007ca4:	2144b03a 	or	r2,r4,r5
 8007ca8:	108000cc 	andi	r2,r2,3
 8007cac:	1000171e 	bne	r2,zero,8007d0c <strcmp+0x68>
 8007cb0:	20800017 	ldw	r2,0(r4)
 8007cb4:	28c00017 	ldw	r3,0(r5)
 8007cb8:	10c0141e 	bne	r2,r3,8007d0c <strcmp+0x68>
 8007cbc:	027fbff4 	movhi	r9,65279
 8007cc0:	4a7fbfc4 	addi	r9,r9,-257
 8007cc4:	0086303a 	nor	r3,zero,r2
 8007cc8:	02202074 	movhi	r8,32897
 8007ccc:	1245883a 	add	r2,r2,r9
 8007cd0:	42202004 	addi	r8,r8,-32640
 8007cd4:	10c4703a 	and	r2,r2,r3
 8007cd8:	1204703a 	and	r2,r2,r8
 8007cdc:	10000226 	beq	r2,zero,8007ce8 <strcmp+0x44>
 8007ce0:	00002306 	br	8007d70 <strcmp+0xcc>
 8007ce4:	1000221e 	bne	r2,zero,8007d70 <strcmp+0xcc>
 8007ce8:	21000104 	addi	r4,r4,4
 8007cec:	20c00017 	ldw	r3,0(r4)
 8007cf0:	29400104 	addi	r5,r5,4
 8007cf4:	29800017 	ldw	r6,0(r5)
 8007cf8:	1a4f883a 	add	r7,r3,r9
 8007cfc:	00c4303a 	nor	r2,zero,r3
 8007d00:	3884703a 	and	r2,r7,r2
 8007d04:	1204703a 	and	r2,r2,r8
 8007d08:	19bff626 	beq	r3,r6,8007ce4 <__alt_data_end+0xf8007ce4>
 8007d0c:	20800003 	ldbu	r2,0(r4)
 8007d10:	10c03fcc 	andi	r3,r2,255
 8007d14:	18c0201c 	xori	r3,r3,128
 8007d18:	18ffe004 	addi	r3,r3,-128
 8007d1c:	18000c26 	beq	r3,zero,8007d50 <strcmp+0xac>
 8007d20:	29800007 	ldb	r6,0(r5)
 8007d24:	19800326 	beq	r3,r6,8007d34 <strcmp+0x90>
 8007d28:	00001306 	br	8007d78 <strcmp+0xd4>
 8007d2c:	29800007 	ldb	r6,0(r5)
 8007d30:	11800b1e 	bne	r2,r6,8007d60 <strcmp+0xbc>
 8007d34:	21000044 	addi	r4,r4,1
 8007d38:	20c00003 	ldbu	r3,0(r4)
 8007d3c:	29400044 	addi	r5,r5,1
 8007d40:	18803fcc 	andi	r2,r3,255
 8007d44:	1080201c 	xori	r2,r2,128
 8007d48:	10bfe004 	addi	r2,r2,-128
 8007d4c:	103ff71e 	bne	r2,zero,8007d2c <__alt_data_end+0xf8007d2c>
 8007d50:	0007883a 	mov	r3,zero
 8007d54:	28800003 	ldbu	r2,0(r5)
 8007d58:	1885c83a 	sub	r2,r3,r2
 8007d5c:	f800283a 	ret
 8007d60:	28800003 	ldbu	r2,0(r5)
 8007d64:	18c03fcc 	andi	r3,r3,255
 8007d68:	1885c83a 	sub	r2,r3,r2
 8007d6c:	f800283a 	ret
 8007d70:	0005883a 	mov	r2,zero
 8007d74:	f800283a 	ret
 8007d78:	10c03fcc 	andi	r3,r2,255
 8007d7c:	003ff506 	br	8007d54 <__alt_data_end+0xf8007d54>

08007d80 <__sprint_r.part.0>:
 8007d80:	28801917 	ldw	r2,100(r5)
 8007d84:	defff604 	addi	sp,sp,-40
 8007d88:	dd400515 	stw	r21,20(sp)
 8007d8c:	dfc00915 	stw	ra,36(sp)
 8007d90:	df000815 	stw	fp,32(sp)
 8007d94:	ddc00715 	stw	r23,28(sp)
 8007d98:	dd800615 	stw	r22,24(sp)
 8007d9c:	dd000415 	stw	r20,16(sp)
 8007da0:	dcc00315 	stw	r19,12(sp)
 8007da4:	dc800215 	stw	r18,8(sp)
 8007da8:	dc400115 	stw	r17,4(sp)
 8007dac:	dc000015 	stw	r16,0(sp)
 8007db0:	1088000c 	andi	r2,r2,8192
 8007db4:	302b883a 	mov	r21,r6
 8007db8:	10002e26 	beq	r2,zero,8007e74 <__sprint_r.part.0+0xf4>
 8007dbc:	30800217 	ldw	r2,8(r6)
 8007dc0:	35800017 	ldw	r22,0(r6)
 8007dc4:	10002926 	beq	r2,zero,8007e6c <__sprint_r.part.0+0xec>
 8007dc8:	2827883a 	mov	r19,r5
 8007dcc:	2029883a 	mov	r20,r4
 8007dd0:	b5c00104 	addi	r23,r22,4
 8007dd4:	04bfffc4 	movi	r18,-1
 8007dd8:	bc400017 	ldw	r17,0(r23)
 8007ddc:	b4000017 	ldw	r16,0(r22)
 8007de0:	0039883a 	mov	fp,zero
 8007de4:	8822d0ba 	srli	r17,r17,2
 8007de8:	8800031e 	bne	r17,zero,8007df8 <__sprint_r.part.0+0x78>
 8007dec:	00001806 	br	8007e50 <__sprint_r.part.0+0xd0>
 8007df0:	84000104 	addi	r16,r16,4
 8007df4:	8f001526 	beq	r17,fp,8007e4c <__sprint_r.part.0+0xcc>
 8007df8:	81400017 	ldw	r5,0(r16)
 8007dfc:	980d883a 	mov	r6,r19
 8007e00:	a009883a 	mov	r4,r20
 8007e04:	80097a80 	call	80097a8 <_fputwc_r>
 8007e08:	e7000044 	addi	fp,fp,1
 8007e0c:	14bff81e 	bne	r2,r18,8007df0 <__alt_data_end+0xf8007df0>
 8007e10:	9005883a 	mov	r2,r18
 8007e14:	a8000215 	stw	zero,8(r21)
 8007e18:	a8000115 	stw	zero,4(r21)
 8007e1c:	dfc00917 	ldw	ra,36(sp)
 8007e20:	df000817 	ldw	fp,32(sp)
 8007e24:	ddc00717 	ldw	r23,28(sp)
 8007e28:	dd800617 	ldw	r22,24(sp)
 8007e2c:	dd400517 	ldw	r21,20(sp)
 8007e30:	dd000417 	ldw	r20,16(sp)
 8007e34:	dcc00317 	ldw	r19,12(sp)
 8007e38:	dc800217 	ldw	r18,8(sp)
 8007e3c:	dc400117 	ldw	r17,4(sp)
 8007e40:	dc000017 	ldw	r16,0(sp)
 8007e44:	dec00a04 	addi	sp,sp,40
 8007e48:	f800283a 	ret
 8007e4c:	a8800217 	ldw	r2,8(r21)
 8007e50:	8c63883a 	add	r17,r17,r17
 8007e54:	8c63883a 	add	r17,r17,r17
 8007e58:	1445c83a 	sub	r2,r2,r17
 8007e5c:	a8800215 	stw	r2,8(r21)
 8007e60:	b5800204 	addi	r22,r22,8
 8007e64:	bdc00204 	addi	r23,r23,8
 8007e68:	103fdb1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xf8007dd8>
 8007e6c:	0005883a 	mov	r2,zero
 8007e70:	003fe806 	br	8007e14 <__alt_data_end+0xf8007e14>
 8007e74:	8004fa80 	call	8004fa8 <__sfvwrite_r>
 8007e78:	003fe606 	br	8007e14 <__alt_data_end+0xf8007e14>

08007e7c <__sprint_r>:
 8007e7c:	30c00217 	ldw	r3,8(r6)
 8007e80:	18000126 	beq	r3,zero,8007e88 <__sprint_r+0xc>
 8007e84:	8007d801 	jmpi	8007d80 <__sprint_r.part.0>
 8007e88:	30000115 	stw	zero,4(r6)
 8007e8c:	0005883a 	mov	r2,zero
 8007e90:	f800283a 	ret

08007e94 <___vfiprintf_internal_r>:
 8007e94:	deffc904 	addi	sp,sp,-220
 8007e98:	df003515 	stw	fp,212(sp)
 8007e9c:	dd003115 	stw	r20,196(sp)
 8007ea0:	dfc03615 	stw	ra,216(sp)
 8007ea4:	ddc03415 	stw	r23,208(sp)
 8007ea8:	dd803315 	stw	r22,204(sp)
 8007eac:	dd403215 	stw	r21,200(sp)
 8007eb0:	dcc03015 	stw	r19,192(sp)
 8007eb4:	dc802f15 	stw	r18,188(sp)
 8007eb8:	dc402e15 	stw	r17,184(sp)
 8007ebc:	dc002d15 	stw	r16,180(sp)
 8007ec0:	d9002015 	stw	r4,128(sp)
 8007ec4:	d9c02215 	stw	r7,136(sp)
 8007ec8:	2829883a 	mov	r20,r5
 8007ecc:	3039883a 	mov	fp,r6
 8007ed0:	20000226 	beq	r4,zero,8007edc <___vfiprintf_internal_r+0x48>
 8007ed4:	20800e17 	ldw	r2,56(r4)
 8007ed8:	1000cf26 	beq	r2,zero,8008218 <___vfiprintf_internal_r+0x384>
 8007edc:	a080030b 	ldhu	r2,12(r20)
 8007ee0:	10c8000c 	andi	r3,r2,8192
 8007ee4:	1800061e 	bne	r3,zero,8007f00 <___vfiprintf_internal_r+0x6c>
 8007ee8:	a1001917 	ldw	r4,100(r20)
 8007eec:	00f7ffc4 	movi	r3,-8193
 8007ef0:	10880014 	ori	r2,r2,8192
 8007ef4:	20c6703a 	and	r3,r4,r3
 8007ef8:	a080030d 	sth	r2,12(r20)
 8007efc:	a0c01915 	stw	r3,100(r20)
 8007f00:	10c0020c 	andi	r3,r2,8
 8007f04:	1800a926 	beq	r3,zero,80081ac <___vfiprintf_internal_r+0x318>
 8007f08:	a0c00417 	ldw	r3,16(r20)
 8007f0c:	1800a726 	beq	r3,zero,80081ac <___vfiprintf_internal_r+0x318>
 8007f10:	1080068c 	andi	r2,r2,26
 8007f14:	00c00284 	movi	r3,10
 8007f18:	10c0ac26 	beq	r2,r3,80081cc <___vfiprintf_internal_r+0x338>
 8007f1c:	da801a04 	addi	r10,sp,104
 8007f20:	da801e15 	stw	r10,120(sp)
 8007f24:	d8801e17 	ldw	r2,120(sp)
 8007f28:	da8019c4 	addi	r10,sp,103
 8007f2c:	058200b4 	movhi	r22,2050
 8007f30:	05c200b4 	movhi	r23,2050
 8007f34:	da801f15 	stw	r10,124(sp)
 8007f38:	1295c83a 	sub	r10,r2,r10
 8007f3c:	b5a44804 	addi	r22,r22,-28384
 8007f40:	bde44404 	addi	r23,r23,-28400
 8007f44:	dec01a15 	stw	sp,104(sp)
 8007f48:	d8001c15 	stw	zero,112(sp)
 8007f4c:	d8001b15 	stw	zero,108(sp)
 8007f50:	d8002615 	stw	zero,152(sp)
 8007f54:	d8002315 	stw	zero,140(sp)
 8007f58:	da802715 	stw	r10,156(sp)
 8007f5c:	d811883a 	mov	r8,sp
 8007f60:	dd002115 	stw	r20,132(sp)
 8007f64:	e021883a 	mov	r16,fp
 8007f68:	80800007 	ldb	r2,0(r16)
 8007f6c:	1003ea26 	beq	r2,zero,8008f18 <___vfiprintf_internal_r+0x1084>
 8007f70:	00c00944 	movi	r3,37
 8007f74:	8025883a 	mov	r18,r16
 8007f78:	10c0021e 	bne	r2,r3,8007f84 <___vfiprintf_internal_r+0xf0>
 8007f7c:	00001606 	br	8007fd8 <___vfiprintf_internal_r+0x144>
 8007f80:	10c00326 	beq	r2,r3,8007f90 <___vfiprintf_internal_r+0xfc>
 8007f84:	94800044 	addi	r18,r18,1
 8007f88:	90800007 	ldb	r2,0(r18)
 8007f8c:	103ffc1e 	bne	r2,zero,8007f80 <__alt_data_end+0xf8007f80>
 8007f90:	9423c83a 	sub	r17,r18,r16
 8007f94:	88001026 	beq	r17,zero,8007fd8 <___vfiprintf_internal_r+0x144>
 8007f98:	d8c01c17 	ldw	r3,112(sp)
 8007f9c:	d8801b17 	ldw	r2,108(sp)
 8007fa0:	44000015 	stw	r16,0(r8)
 8007fa4:	88c7883a 	add	r3,r17,r3
 8007fa8:	10800044 	addi	r2,r2,1
 8007fac:	44400115 	stw	r17,4(r8)
 8007fb0:	d8c01c15 	stw	r3,112(sp)
 8007fb4:	d8801b15 	stw	r2,108(sp)
 8007fb8:	010001c4 	movi	r4,7
 8007fbc:	2080760e 	bge	r4,r2,8008198 <___vfiprintf_internal_r+0x304>
 8007fc0:	1803821e 	bne	r3,zero,8008dcc <___vfiprintf_internal_r+0xf38>
 8007fc4:	da802317 	ldw	r10,140(sp)
 8007fc8:	d8001b15 	stw	zero,108(sp)
 8007fcc:	d811883a 	mov	r8,sp
 8007fd0:	5455883a 	add	r10,r10,r17
 8007fd4:	da802315 	stw	r10,140(sp)
 8007fd8:	90800007 	ldb	r2,0(r18)
 8007fdc:	10044626 	beq	r2,zero,80090f8 <___vfiprintf_internal_r+0x1264>
 8007fe0:	90c00047 	ldb	r3,1(r18)
 8007fe4:	94000044 	addi	r16,r18,1
 8007fe8:	d8001d85 	stb	zero,118(sp)
 8007fec:	0009883a 	mov	r4,zero
 8007ff0:	000f883a 	mov	r7,zero
 8007ff4:	027fffc4 	movi	r9,-1
 8007ff8:	0023883a 	mov	r17,zero
 8007ffc:	0029883a 	mov	r20,zero
 8008000:	01401604 	movi	r5,88
 8008004:	01800244 	movi	r6,9
 8008008:	03400a84 	movi	r13,42
 800800c:	03001b04 	movi	r12,108
 8008010:	84000044 	addi	r16,r16,1
 8008014:	18bff804 	addi	r2,r3,-32
 8008018:	28827336 	bltu	r5,r2,80089e8 <___vfiprintf_internal_r+0xb54>
 800801c:	100490ba 	slli	r2,r2,2
 8008020:	02820074 	movhi	r10,2049
 8008024:	52a00d04 	addi	r10,r10,-32716
 8008028:	1285883a 	add	r2,r2,r10
 800802c:	10800017 	ldw	r2,0(r2)
 8008030:	1000683a 	jmp	r2
 8008034:	0800871c 	xori	zero,at,540
 8008038:	080089e8 	cmpgeui	zero,at,551
 800803c:	080089e8 	cmpgeui	zero,at,551
 8008040:	0800873c 	xorhi	zero,at,540
 8008044:	080089e8 	cmpgeui	zero,at,551
 8008048:	080089e8 	cmpgeui	zero,at,551
 800804c:	080089e8 	cmpgeui	zero,at,551
 8008050:	080089e8 	cmpgeui	zero,at,551
 8008054:	080089e8 	cmpgeui	zero,at,551
 8008058:	080089e8 	cmpgeui	zero,at,551
 800805c:	08008924 	muli	zero,at,548
 8008060:	08008940 	call	800894 <__alt_mem_onchip_memory2_0+0x600894>
 8008064:	080089e8 	cmpgeui	zero,at,551
 8008068:	08008228 	cmpgeui	zero,at,520
 800806c:	08008950 	cmplti	zero,at,549
 8008070:	080089e8 	cmpgeui	zero,at,551
 8008074:	08008748 	cmpgei	zero,at,541
 8008078:	08008754 	ori	zero,at,541
 800807c:	08008754 	ori	zero,at,541
 8008080:	08008754 	ori	zero,at,541
 8008084:	08008754 	ori	zero,at,541
 8008088:	08008754 	ori	zero,at,541
 800808c:	08008754 	ori	zero,at,541
 8008090:	08008754 	ori	zero,at,541
 8008094:	08008754 	ori	zero,at,541
 8008098:	08008754 	ori	zero,at,541
 800809c:	080089e8 	cmpgeui	zero,at,551
 80080a0:	080089e8 	cmpgeui	zero,at,551
 80080a4:	080089e8 	cmpgeui	zero,at,551
 80080a8:	080089e8 	cmpgeui	zero,at,551
 80080ac:	080089e8 	cmpgeui	zero,at,551
 80080b0:	080089e8 	cmpgeui	zero,at,551
 80080b4:	080089e8 	cmpgeui	zero,at,551
 80080b8:	080089e8 	cmpgeui	zero,at,551
 80080bc:	080089e8 	cmpgeui	zero,at,551
 80080c0:	080089e8 	cmpgeui	zero,at,551
 80080c4:	08008780 	call	800878 <__alt_mem_onchip_memory2_0+0x600878>
 80080c8:	080089e8 	cmpgeui	zero,at,551
 80080cc:	080089e8 	cmpgeui	zero,at,551
 80080d0:	080089e8 	cmpgeui	zero,at,551
 80080d4:	080089e8 	cmpgeui	zero,at,551
 80080d8:	080089e8 	cmpgeui	zero,at,551
 80080dc:	080089e8 	cmpgeui	zero,at,551
 80080e0:	080089e8 	cmpgeui	zero,at,551
 80080e4:	080089e8 	cmpgeui	zero,at,551
 80080e8:	080089e8 	cmpgeui	zero,at,551
 80080ec:	080089e8 	cmpgeui	zero,at,551
 80080f0:	080087b8 	rdprs	zero,at,542
 80080f4:	080089e8 	cmpgeui	zero,at,551
 80080f8:	080089e8 	cmpgeui	zero,at,551
 80080fc:	080089e8 	cmpgeui	zero,at,551
 8008100:	080089e8 	cmpgeui	zero,at,551
 8008104:	080089e8 	cmpgeui	zero,at,551
 8008108:	08008810 	cmplti	zero,at,544
 800810c:	080089e8 	cmpgeui	zero,at,551
 8008110:	080089e8 	cmpgeui	zero,at,551
 8008114:	08008880 	call	800888 <__alt_mem_onchip_memory2_0+0x600888>
 8008118:	080089e8 	cmpgeui	zero,at,551
 800811c:	080089e8 	cmpgeui	zero,at,551
 8008120:	080089e8 	cmpgeui	zero,at,551
 8008124:	080089e8 	cmpgeui	zero,at,551
 8008128:	080089e8 	cmpgeui	zero,at,551
 800812c:	080089e8 	cmpgeui	zero,at,551
 8008130:	080089e8 	cmpgeui	zero,at,551
 8008134:	080089e8 	cmpgeui	zero,at,551
 8008138:	080089e8 	cmpgeui	zero,at,551
 800813c:	080089e8 	cmpgeui	zero,at,551
 8008140:	0800862c 	andhi	zero,at,536
 8008144:	08008658 	cmpnei	zero,at,537
 8008148:	080089e8 	cmpgeui	zero,at,551
 800814c:	080089e8 	cmpgeui	zero,at,551
 8008150:	080089e8 	cmpgeui	zero,at,551
 8008154:	08008990 	cmplti	zero,at,550
 8008158:	08008658 	cmpnei	zero,at,537
 800815c:	080089e8 	cmpgeui	zero,at,551
 8008160:	080089e8 	cmpgeui	zero,at,551
 8008164:	080084ec 	andhi	zero,at,531
 8008168:	080089e8 	cmpgeui	zero,at,551
 800816c:	080084fc 	xorhi	zero,at,531
 8008170:	08008538 	rdprs	zero,at,532
 8008174:	08008234 	orhi	zero,at,520
 8008178:	080084e0 	cmpeqi	zero,at,531
 800817c:	080089e8 	cmpgeui	zero,at,551
 8008180:	080088bc 	xorhi	zero,at,546
 8008184:	080089e8 	cmpgeui	zero,at,551
 8008188:	08008914 	ori	zero,at,548
 800818c:	080089e8 	cmpgeui	zero,at,551
 8008190:	080089e8 	cmpgeui	zero,at,551
 8008194:	080085d8 	cmpnei	zero,at,535
 8008198:	42000204 	addi	r8,r8,8
 800819c:	da802317 	ldw	r10,140(sp)
 80081a0:	5455883a 	add	r10,r10,r17
 80081a4:	da802315 	stw	r10,140(sp)
 80081a8:	003f8b06 	br	8007fd8 <__alt_data_end+0xf8007fd8>
 80081ac:	d9002017 	ldw	r4,128(sp)
 80081b0:	a00b883a 	mov	r5,r20
 80081b4:	8002b500 	call	8002b50 <__swsetup_r>
 80081b8:	1003b11e 	bne	r2,zero,8009080 <___vfiprintf_internal_r+0x11ec>
 80081bc:	a080030b 	ldhu	r2,12(r20)
 80081c0:	00c00284 	movi	r3,10
 80081c4:	1080068c 	andi	r2,r2,26
 80081c8:	10ff541e 	bne	r2,r3,8007f1c <__alt_data_end+0xf8007f1c>
 80081cc:	a080038f 	ldh	r2,14(r20)
 80081d0:	103f5216 	blt	r2,zero,8007f1c <__alt_data_end+0xf8007f1c>
 80081d4:	d9c02217 	ldw	r7,136(sp)
 80081d8:	d9002017 	ldw	r4,128(sp)
 80081dc:	e00d883a 	mov	r6,fp
 80081e0:	a00b883a 	mov	r5,r20
 80081e4:	800930c0 	call	800930c <__sbprintf>
 80081e8:	dfc03617 	ldw	ra,216(sp)
 80081ec:	df003517 	ldw	fp,212(sp)
 80081f0:	ddc03417 	ldw	r23,208(sp)
 80081f4:	dd803317 	ldw	r22,204(sp)
 80081f8:	dd403217 	ldw	r21,200(sp)
 80081fc:	dd003117 	ldw	r20,196(sp)
 8008200:	dcc03017 	ldw	r19,192(sp)
 8008204:	dc802f17 	ldw	r18,188(sp)
 8008208:	dc402e17 	ldw	r17,184(sp)
 800820c:	dc002d17 	ldw	r16,180(sp)
 8008210:	dec03704 	addi	sp,sp,220
 8008214:	f800283a 	ret
 8008218:	8004b240 	call	8004b24 <__sinit>
 800821c:	003f2f06 	br	8007edc <__alt_data_end+0xf8007edc>
 8008220:	0463c83a 	sub	r17,zero,r17
 8008224:	d8802215 	stw	r2,136(sp)
 8008228:	a5000114 	ori	r20,r20,4
 800822c:	80c00007 	ldb	r3,0(r16)
 8008230:	003f7706 	br	8008010 <__alt_data_end+0xf8008010>
 8008234:	00800c04 	movi	r2,48
 8008238:	da802217 	ldw	r10,136(sp)
 800823c:	d8801d05 	stb	r2,116(sp)
 8008240:	00801e04 	movi	r2,120
 8008244:	d8801d45 	stb	r2,117(sp)
 8008248:	d8001d85 	stb	zero,118(sp)
 800824c:	50c00104 	addi	r3,r10,4
 8008250:	54800017 	ldw	r18,0(r10)
 8008254:	0027883a 	mov	r19,zero
 8008258:	a0800094 	ori	r2,r20,2
 800825c:	48030b16 	blt	r9,zero,8008e8c <___vfiprintf_internal_r+0xff8>
 8008260:	00bfdfc4 	movi	r2,-129
 8008264:	a096703a 	and	r11,r20,r2
 8008268:	d8c02215 	stw	r3,136(sp)
 800826c:	5d000094 	ori	r20,r11,2
 8008270:	90032b1e 	bne	r18,zero,8008f20 <___vfiprintf_internal_r+0x108c>
 8008274:	008200b4 	movhi	r2,2050
 8008278:	10a3e304 	addi	r2,r2,-28788
 800827c:	d8802615 	stw	r2,152(sp)
 8008280:	0039883a 	mov	fp,zero
 8008284:	48017b1e 	bne	r9,zero,8008874 <___vfiprintf_internal_r+0x9e0>
 8008288:	0013883a 	mov	r9,zero
 800828c:	0027883a 	mov	r19,zero
 8008290:	dd401a04 	addi	r21,sp,104
 8008294:	4825883a 	mov	r18,r9
 8008298:	4cc0010e 	bge	r9,r19,80082a0 <___vfiprintf_internal_r+0x40c>
 800829c:	9825883a 	mov	r18,r19
 80082a0:	e7003fcc 	andi	fp,fp,255
 80082a4:	e700201c 	xori	fp,fp,128
 80082a8:	e73fe004 	addi	fp,fp,-128
 80082ac:	e0000126 	beq	fp,zero,80082b4 <___vfiprintf_internal_r+0x420>
 80082b0:	94800044 	addi	r18,r18,1
 80082b4:	a380008c 	andi	r14,r20,2
 80082b8:	70000126 	beq	r14,zero,80082c0 <___vfiprintf_internal_r+0x42c>
 80082bc:	94800084 	addi	r18,r18,2
 80082c0:	a700210c 	andi	fp,r20,132
 80082c4:	e001df1e 	bne	fp,zero,8008a44 <___vfiprintf_internal_r+0xbb0>
 80082c8:	8c87c83a 	sub	r3,r17,r18
 80082cc:	00c1dd0e 	bge	zero,r3,8008a44 <___vfiprintf_internal_r+0xbb0>
 80082d0:	01c00404 	movi	r7,16
 80082d4:	d8801c17 	ldw	r2,112(sp)
 80082d8:	38c3ad0e 	bge	r7,r3,8009190 <___vfiprintf_internal_r+0x12fc>
 80082dc:	028200b4 	movhi	r10,2050
 80082e0:	52a44804 	addi	r10,r10,-28384
 80082e4:	dc002915 	stw	r16,164(sp)
 80082e8:	d9801b17 	ldw	r6,108(sp)
 80082ec:	da802415 	stw	r10,144(sp)
 80082f0:	03c001c4 	movi	r15,7
 80082f4:	da402515 	stw	r9,148(sp)
 80082f8:	db802815 	stw	r14,160(sp)
 80082fc:	1821883a 	mov	r16,r3
 8008300:	00000506 	br	8008318 <___vfiprintf_internal_r+0x484>
 8008304:	31400084 	addi	r5,r6,2
 8008308:	42000204 	addi	r8,r8,8
 800830c:	200d883a 	mov	r6,r4
 8008310:	843ffc04 	addi	r16,r16,-16
 8008314:	3c000d0e 	bge	r7,r16,800834c <___vfiprintf_internal_r+0x4b8>
 8008318:	10800404 	addi	r2,r2,16
 800831c:	31000044 	addi	r4,r6,1
 8008320:	45800015 	stw	r22,0(r8)
 8008324:	41c00115 	stw	r7,4(r8)
 8008328:	d8801c15 	stw	r2,112(sp)
 800832c:	d9001b15 	stw	r4,108(sp)
 8008330:	793ff40e 	bge	r15,r4,8008304 <__alt_data_end+0xf8008304>
 8008334:	1001b51e 	bne	r2,zero,8008a0c <___vfiprintf_internal_r+0xb78>
 8008338:	843ffc04 	addi	r16,r16,-16
 800833c:	000d883a 	mov	r6,zero
 8008340:	01400044 	movi	r5,1
 8008344:	d811883a 	mov	r8,sp
 8008348:	3c3ff316 	blt	r7,r16,8008318 <__alt_data_end+0xf8008318>
 800834c:	8007883a 	mov	r3,r16
 8008350:	da402517 	ldw	r9,148(sp)
 8008354:	db802817 	ldw	r14,160(sp)
 8008358:	dc002917 	ldw	r16,164(sp)
 800835c:	da802417 	ldw	r10,144(sp)
 8008360:	1885883a 	add	r2,r3,r2
 8008364:	40c00115 	stw	r3,4(r8)
 8008368:	42800015 	stw	r10,0(r8)
 800836c:	d8801c15 	stw	r2,112(sp)
 8008370:	d9401b15 	stw	r5,108(sp)
 8008374:	00c001c4 	movi	r3,7
 8008378:	19426016 	blt	r3,r5,8008cfc <___vfiprintf_internal_r+0xe68>
 800837c:	d8c01d87 	ldb	r3,118(sp)
 8008380:	42000204 	addi	r8,r8,8
 8008384:	29000044 	addi	r4,r5,1
 8008388:	1801b31e 	bne	r3,zero,8008a58 <___vfiprintf_internal_r+0xbc4>
 800838c:	7001c026 	beq	r14,zero,8008a90 <___vfiprintf_internal_r+0xbfc>
 8008390:	d8c01d04 	addi	r3,sp,116
 8008394:	10800084 	addi	r2,r2,2
 8008398:	40c00015 	stw	r3,0(r8)
 800839c:	00c00084 	movi	r3,2
 80083a0:	40c00115 	stw	r3,4(r8)
 80083a4:	d8801c15 	stw	r2,112(sp)
 80083a8:	d9001b15 	stw	r4,108(sp)
 80083ac:	00c001c4 	movi	r3,7
 80083b0:	1902650e 	bge	r3,r4,8008d48 <___vfiprintf_internal_r+0xeb4>
 80083b4:	10029a1e 	bne	r2,zero,8008e20 <___vfiprintf_internal_r+0xf8c>
 80083b8:	00c02004 	movi	r3,128
 80083bc:	01000044 	movi	r4,1
 80083c0:	000b883a 	mov	r5,zero
 80083c4:	d811883a 	mov	r8,sp
 80083c8:	e0c1b31e 	bne	fp,r3,8008a98 <___vfiprintf_internal_r+0xc04>
 80083cc:	8cb9c83a 	sub	fp,r17,r18
 80083d0:	0701b10e 	bge	zero,fp,8008a98 <___vfiprintf_internal_r+0xc04>
 80083d4:	01c00404 	movi	r7,16
 80083d8:	3f03890e 	bge	r7,fp,8009200 <___vfiprintf_internal_r+0x136c>
 80083dc:	00c200b4 	movhi	r3,2050
 80083e0:	18e44404 	addi	r3,r3,-28400
 80083e4:	d8c02415 	stw	r3,144(sp)
 80083e8:	8007883a 	mov	r3,r16
 80083ec:	034001c4 	movi	r13,7
 80083f0:	e021883a 	mov	r16,fp
 80083f4:	da402515 	stw	r9,148(sp)
 80083f8:	1839883a 	mov	fp,r3
 80083fc:	00000506 	br	8008414 <___vfiprintf_internal_r+0x580>
 8008400:	29800084 	addi	r6,r5,2
 8008404:	42000204 	addi	r8,r8,8
 8008408:	180b883a 	mov	r5,r3
 800840c:	843ffc04 	addi	r16,r16,-16
 8008410:	3c000d0e 	bge	r7,r16,8008448 <___vfiprintf_internal_r+0x5b4>
 8008414:	10800404 	addi	r2,r2,16
 8008418:	28c00044 	addi	r3,r5,1
 800841c:	45c00015 	stw	r23,0(r8)
 8008420:	41c00115 	stw	r7,4(r8)
 8008424:	d8801c15 	stw	r2,112(sp)
 8008428:	d8c01b15 	stw	r3,108(sp)
 800842c:	68fff40e 	bge	r13,r3,8008400 <__alt_data_end+0xf8008400>
 8008430:	1002241e 	bne	r2,zero,8008cc4 <___vfiprintf_internal_r+0xe30>
 8008434:	843ffc04 	addi	r16,r16,-16
 8008438:	01800044 	movi	r6,1
 800843c:	000b883a 	mov	r5,zero
 8008440:	d811883a 	mov	r8,sp
 8008444:	3c3ff316 	blt	r7,r16,8008414 <__alt_data_end+0xf8008414>
 8008448:	da402517 	ldw	r9,148(sp)
 800844c:	e007883a 	mov	r3,fp
 8008450:	8039883a 	mov	fp,r16
 8008454:	1821883a 	mov	r16,r3
 8008458:	d8c02417 	ldw	r3,144(sp)
 800845c:	1705883a 	add	r2,r2,fp
 8008460:	47000115 	stw	fp,4(r8)
 8008464:	40c00015 	stw	r3,0(r8)
 8008468:	d8801c15 	stw	r2,112(sp)
 800846c:	d9801b15 	stw	r6,108(sp)
 8008470:	00c001c4 	movi	r3,7
 8008474:	19827616 	blt	r3,r6,8008e50 <___vfiprintf_internal_r+0xfbc>
 8008478:	4cf9c83a 	sub	fp,r9,r19
 800847c:	42000204 	addi	r8,r8,8
 8008480:	31000044 	addi	r4,r6,1
 8008484:	300b883a 	mov	r5,r6
 8008488:	07018516 	blt	zero,fp,8008aa0 <___vfiprintf_internal_r+0xc0c>
 800848c:	9885883a 	add	r2,r19,r2
 8008490:	45400015 	stw	r21,0(r8)
 8008494:	44c00115 	stw	r19,4(r8)
 8008498:	d8801c15 	stw	r2,112(sp)
 800849c:	d9001b15 	stw	r4,108(sp)
 80084a0:	00c001c4 	movi	r3,7
 80084a4:	1901dd0e 	bge	r3,r4,8008c1c <___vfiprintf_internal_r+0xd88>
 80084a8:	1002401e 	bne	r2,zero,8008dac <___vfiprintf_internal_r+0xf18>
 80084ac:	d8001b15 	stw	zero,108(sp)
 80084b0:	a2c0010c 	andi	r11,r20,4
 80084b4:	58000226 	beq	r11,zero,80084c0 <___vfiprintf_internal_r+0x62c>
 80084b8:	8ca7c83a 	sub	r19,r17,r18
 80084bc:	04c2f216 	blt	zero,r19,8009088 <___vfiprintf_internal_r+0x11f4>
 80084c0:	8c80010e 	bge	r17,r18,80084c8 <___vfiprintf_internal_r+0x634>
 80084c4:	9023883a 	mov	r17,r18
 80084c8:	da802317 	ldw	r10,140(sp)
 80084cc:	5455883a 	add	r10,r10,r17
 80084d0:	da802315 	stw	r10,140(sp)
 80084d4:	d8001b15 	stw	zero,108(sp)
 80084d8:	d811883a 	mov	r8,sp
 80084dc:	003ea206 	br	8007f68 <__alt_data_end+0xf8007f68>
 80084e0:	a5000814 	ori	r20,r20,32
 80084e4:	80c00007 	ldb	r3,0(r16)
 80084e8:	003ec906 	br	8008010 <__alt_data_end+0xf8008010>
 80084ec:	80c00007 	ldb	r3,0(r16)
 80084f0:	1b030926 	beq	r3,r12,8009118 <___vfiprintf_internal_r+0x1284>
 80084f4:	a5000414 	ori	r20,r20,16
 80084f8:	003ec506 	br	8008010 <__alt_data_end+0xf8008010>
 80084fc:	21003fcc 	andi	r4,r4,255
 8008500:	20035e1e 	bne	r4,zero,800927c <___vfiprintf_internal_r+0x13e8>
 8008504:	a080080c 	andi	r2,r20,32
 8008508:	1002a526 	beq	r2,zero,8008fa0 <___vfiprintf_internal_r+0x110c>
 800850c:	da802217 	ldw	r10,136(sp)
 8008510:	50800017 	ldw	r2,0(r10)
 8008514:	da802317 	ldw	r10,140(sp)
 8008518:	5007d7fa 	srai	r3,r10,31
 800851c:	da802217 	ldw	r10,136(sp)
 8008520:	10c00115 	stw	r3,4(r2)
 8008524:	52800104 	addi	r10,r10,4
 8008528:	da802215 	stw	r10,136(sp)
 800852c:	da802317 	ldw	r10,140(sp)
 8008530:	12800015 	stw	r10,0(r2)
 8008534:	003e8c06 	br	8007f68 <__alt_data_end+0xf8007f68>
 8008538:	21003fcc 	andi	r4,r4,255
 800853c:	2003511e 	bne	r4,zero,8009284 <___vfiprintf_internal_r+0x13f0>
 8008540:	a080080c 	andi	r2,r20,32
 8008544:	1000a126 	beq	r2,zero,80087cc <___vfiprintf_internal_r+0x938>
 8008548:	da802217 	ldw	r10,136(sp)
 800854c:	d8001d85 	stb	zero,118(sp)
 8008550:	50800204 	addi	r2,r10,8
 8008554:	54800017 	ldw	r18,0(r10)
 8008558:	54c00117 	ldw	r19,4(r10)
 800855c:	4802b416 	blt	r9,zero,8009030 <___vfiprintf_internal_r+0x119c>
 8008560:	013fdfc4 	movi	r4,-129
 8008564:	94c6b03a 	or	r3,r18,r19
 8008568:	d8802215 	stw	r2,136(sp)
 800856c:	a128703a 	and	r20,r20,r4
 8008570:	1800a226 	beq	r3,zero,80087fc <___vfiprintf_internal_r+0x968>
 8008574:	0039883a 	mov	fp,zero
 8008578:	dd401a04 	addi	r21,sp,104
 800857c:	9006d0fa 	srli	r3,r18,3
 8008580:	9808977a 	slli	r4,r19,29
 8008584:	9826d0fa 	srli	r19,r19,3
 8008588:	948001cc 	andi	r18,r18,7
 800858c:	90800c04 	addi	r2,r18,48
 8008590:	ad7fffc4 	addi	r21,r21,-1
 8008594:	20e4b03a 	or	r18,r4,r3
 8008598:	a8800005 	stb	r2,0(r21)
 800859c:	94c6b03a 	or	r3,r18,r19
 80085a0:	183ff61e 	bne	r3,zero,800857c <__alt_data_end+0xf800857c>
 80085a4:	a0c0004c 	andi	r3,r20,1
 80085a8:	18005926 	beq	r3,zero,8008710 <___vfiprintf_internal_r+0x87c>
 80085ac:	10803fcc 	andi	r2,r2,255
 80085b0:	1080201c 	xori	r2,r2,128
 80085b4:	10bfe004 	addi	r2,r2,-128
 80085b8:	00c00c04 	movi	r3,48
 80085bc:	10c05426 	beq	r2,r3,8008710 <___vfiprintf_internal_r+0x87c>
 80085c0:	da801e17 	ldw	r10,120(sp)
 80085c4:	a8bfffc4 	addi	r2,r21,-1
 80085c8:	a8ffffc5 	stb	r3,-1(r21)
 80085cc:	50a7c83a 	sub	r19,r10,r2
 80085d0:	102b883a 	mov	r21,r2
 80085d4:	003f2f06 	br	8008294 <__alt_data_end+0xf8008294>
 80085d8:	21003fcc 	andi	r4,r4,255
 80085dc:	2003421e 	bne	r4,zero,80092e8 <___vfiprintf_internal_r+0x1454>
 80085e0:	008200b4 	movhi	r2,2050
 80085e4:	10a3e304 	addi	r2,r2,-28788
 80085e8:	d8802615 	stw	r2,152(sp)
 80085ec:	a080080c 	andi	r2,r20,32
 80085f0:	1000aa26 	beq	r2,zero,800889c <___vfiprintf_internal_r+0xa08>
 80085f4:	da802217 	ldw	r10,136(sp)
 80085f8:	54800017 	ldw	r18,0(r10)
 80085fc:	54c00117 	ldw	r19,4(r10)
 8008600:	52800204 	addi	r10,r10,8
 8008604:	da802215 	stw	r10,136(sp)
 8008608:	a080004c 	andi	r2,r20,1
 800860c:	1001d226 	beq	r2,zero,8008d58 <___vfiprintf_internal_r+0xec4>
 8008610:	94c4b03a 	or	r2,r18,r19
 8008614:	1002351e 	bne	r2,zero,8008eec <___vfiprintf_internal_r+0x1058>
 8008618:	d8001d85 	stb	zero,118(sp)
 800861c:	48022216 	blt	r9,zero,8008ea8 <___vfiprintf_internal_r+0x1014>
 8008620:	00bfdfc4 	movi	r2,-129
 8008624:	a0a8703a 	and	r20,r20,r2
 8008628:	003f1506 	br	8008280 <__alt_data_end+0xf8008280>
 800862c:	da802217 	ldw	r10,136(sp)
 8008630:	04800044 	movi	r18,1
 8008634:	d8001d85 	stb	zero,118(sp)
 8008638:	50800017 	ldw	r2,0(r10)
 800863c:	52800104 	addi	r10,r10,4
 8008640:	da802215 	stw	r10,136(sp)
 8008644:	d8801005 	stb	r2,64(sp)
 8008648:	9027883a 	mov	r19,r18
 800864c:	dd401004 	addi	r21,sp,64
 8008650:	0013883a 	mov	r9,zero
 8008654:	003f1706 	br	80082b4 <__alt_data_end+0xf80082b4>
 8008658:	21003fcc 	andi	r4,r4,255
 800865c:	2003201e 	bne	r4,zero,80092e0 <___vfiprintf_internal_r+0x144c>
 8008660:	a080080c 	andi	r2,r20,32
 8008664:	10004b26 	beq	r2,zero,8008794 <___vfiprintf_internal_r+0x900>
 8008668:	da802217 	ldw	r10,136(sp)
 800866c:	50800117 	ldw	r2,4(r10)
 8008670:	54800017 	ldw	r18,0(r10)
 8008674:	52800204 	addi	r10,r10,8
 8008678:	da802215 	stw	r10,136(sp)
 800867c:	1027883a 	mov	r19,r2
 8008680:	10022c16 	blt	r2,zero,8008f34 <___vfiprintf_internal_r+0x10a0>
 8008684:	df001d83 	ldbu	fp,118(sp)
 8008688:	48007216 	blt	r9,zero,8008854 <___vfiprintf_internal_r+0x9c0>
 800868c:	00ffdfc4 	movi	r3,-129
 8008690:	94c4b03a 	or	r2,r18,r19
 8008694:	a0e8703a 	and	r20,r20,r3
 8008698:	1000cc26 	beq	r2,zero,80089cc <___vfiprintf_internal_r+0xb38>
 800869c:	98021026 	beq	r19,zero,8008ee0 <___vfiprintf_internal_r+0x104c>
 80086a0:	dc402415 	stw	r17,144(sp)
 80086a4:	dc002515 	stw	r16,148(sp)
 80086a8:	9823883a 	mov	r17,r19
 80086ac:	9021883a 	mov	r16,r18
 80086b0:	dd401a04 	addi	r21,sp,104
 80086b4:	4825883a 	mov	r18,r9
 80086b8:	4027883a 	mov	r19,r8
 80086bc:	8009883a 	mov	r4,r16
 80086c0:	880b883a 	mov	r5,r17
 80086c4:	01800284 	movi	r6,10
 80086c8:	000f883a 	mov	r7,zero
 80086cc:	800a2740 	call	800a274 <__umoddi3>
 80086d0:	10800c04 	addi	r2,r2,48
 80086d4:	ad7fffc4 	addi	r21,r21,-1
 80086d8:	8009883a 	mov	r4,r16
 80086dc:	880b883a 	mov	r5,r17
 80086e0:	a8800005 	stb	r2,0(r21)
 80086e4:	01800284 	movi	r6,10
 80086e8:	000f883a 	mov	r7,zero
 80086ec:	8009cfc0 	call	8009cfc <__udivdi3>
 80086f0:	1021883a 	mov	r16,r2
 80086f4:	10c4b03a 	or	r2,r2,r3
 80086f8:	1823883a 	mov	r17,r3
 80086fc:	103fef1e 	bne	r2,zero,80086bc <__alt_data_end+0xf80086bc>
 8008700:	dc402417 	ldw	r17,144(sp)
 8008704:	dc002517 	ldw	r16,148(sp)
 8008708:	9013883a 	mov	r9,r18
 800870c:	9811883a 	mov	r8,r19
 8008710:	da801e17 	ldw	r10,120(sp)
 8008714:	5567c83a 	sub	r19,r10,r21
 8008718:	003ede06 	br	8008294 <__alt_data_end+0xf8008294>
 800871c:	38803fcc 	andi	r2,r7,255
 8008720:	1080201c 	xori	r2,r2,128
 8008724:	10bfe004 	addi	r2,r2,-128
 8008728:	1002371e 	bne	r2,zero,8009008 <___vfiprintf_internal_r+0x1174>
 800872c:	01000044 	movi	r4,1
 8008730:	01c00804 	movi	r7,32
 8008734:	80c00007 	ldb	r3,0(r16)
 8008738:	003e3506 	br	8008010 <__alt_data_end+0xf8008010>
 800873c:	a5000054 	ori	r20,r20,1
 8008740:	80c00007 	ldb	r3,0(r16)
 8008744:	003e3206 	br	8008010 <__alt_data_end+0xf8008010>
 8008748:	a5002014 	ori	r20,r20,128
 800874c:	80c00007 	ldb	r3,0(r16)
 8008750:	003e2f06 	br	8008010 <__alt_data_end+0xf8008010>
 8008754:	8015883a 	mov	r10,r16
 8008758:	0023883a 	mov	r17,zero
 800875c:	18bff404 	addi	r2,r3,-48
 8008760:	50c00007 	ldb	r3,0(r10)
 8008764:	8c4002a4 	muli	r17,r17,10
 8008768:	84000044 	addi	r16,r16,1
 800876c:	8015883a 	mov	r10,r16
 8008770:	1463883a 	add	r17,r2,r17
 8008774:	18bff404 	addi	r2,r3,-48
 8008778:	30bff92e 	bgeu	r6,r2,8008760 <__alt_data_end+0xf8008760>
 800877c:	003e2506 	br	8008014 <__alt_data_end+0xf8008014>
 8008780:	21003fcc 	andi	r4,r4,255
 8008784:	2002d41e 	bne	r4,zero,80092d8 <___vfiprintf_internal_r+0x1444>
 8008788:	a5000414 	ori	r20,r20,16
 800878c:	a080080c 	andi	r2,r20,32
 8008790:	103fb51e 	bne	r2,zero,8008668 <__alt_data_end+0xf8008668>
 8008794:	a080040c 	andi	r2,r20,16
 8008798:	1001f826 	beq	r2,zero,8008f7c <___vfiprintf_internal_r+0x10e8>
 800879c:	da802217 	ldw	r10,136(sp)
 80087a0:	54800017 	ldw	r18,0(r10)
 80087a4:	52800104 	addi	r10,r10,4
 80087a8:	da802215 	stw	r10,136(sp)
 80087ac:	9027d7fa 	srai	r19,r18,31
 80087b0:	9805883a 	mov	r2,r19
 80087b4:	003fb206 	br	8008680 <__alt_data_end+0xf8008680>
 80087b8:	21003fcc 	andi	r4,r4,255
 80087bc:	2002c41e 	bne	r4,zero,80092d0 <___vfiprintf_internal_r+0x143c>
 80087c0:	a5000414 	ori	r20,r20,16
 80087c4:	a080080c 	andi	r2,r20,32
 80087c8:	103f5f1e 	bne	r2,zero,8008548 <__alt_data_end+0xf8008548>
 80087cc:	a080040c 	andi	r2,r20,16
 80087d0:	10020f26 	beq	r2,zero,8009010 <___vfiprintf_internal_r+0x117c>
 80087d4:	da802217 	ldw	r10,136(sp)
 80087d8:	d8001d85 	stb	zero,118(sp)
 80087dc:	0027883a 	mov	r19,zero
 80087e0:	50800104 	addi	r2,r10,4
 80087e4:	54800017 	ldw	r18,0(r10)
 80087e8:	48021116 	blt	r9,zero,8009030 <___vfiprintf_internal_r+0x119c>
 80087ec:	00ffdfc4 	movi	r3,-129
 80087f0:	d8802215 	stw	r2,136(sp)
 80087f4:	a0e8703a 	and	r20,r20,r3
 80087f8:	903f5e1e 	bne	r18,zero,8008574 <__alt_data_end+0xf8008574>
 80087fc:	0039883a 	mov	fp,zero
 8008800:	4802a626 	beq	r9,zero,800929c <___vfiprintf_internal_r+0x1408>
 8008804:	0025883a 	mov	r18,zero
 8008808:	0027883a 	mov	r19,zero
 800880c:	003f5a06 	br	8008578 <__alt_data_end+0xf8008578>
 8008810:	21003fcc 	andi	r4,r4,255
 8008814:	20029f1e 	bne	r4,zero,8009294 <___vfiprintf_internal_r+0x1400>
 8008818:	a5000414 	ori	r20,r20,16
 800881c:	a080080c 	andi	r2,r20,32
 8008820:	10005e1e 	bne	r2,zero,800899c <___vfiprintf_internal_r+0xb08>
 8008824:	a080040c 	andi	r2,r20,16
 8008828:	1001a21e 	bne	r2,zero,8008eb4 <___vfiprintf_internal_r+0x1020>
 800882c:	a080100c 	andi	r2,r20,64
 8008830:	d8001d85 	stb	zero,118(sp)
 8008834:	da802217 	ldw	r10,136(sp)
 8008838:	1002231e 	bne	r2,zero,80090c8 <___vfiprintf_internal_r+0x1234>
 800883c:	50800104 	addi	r2,r10,4
 8008840:	54800017 	ldw	r18,0(r10)
 8008844:	0027883a 	mov	r19,zero
 8008848:	4801a00e 	bge	r9,zero,8008ecc <___vfiprintf_internal_r+0x1038>
 800884c:	d8802215 	stw	r2,136(sp)
 8008850:	0039883a 	mov	fp,zero
 8008854:	94c4b03a 	or	r2,r18,r19
 8008858:	103f901e 	bne	r2,zero,800869c <__alt_data_end+0xf800869c>
 800885c:	00800044 	movi	r2,1
 8008860:	10803fcc 	andi	r2,r2,255
 8008864:	00c00044 	movi	r3,1
 8008868:	10c05926 	beq	r2,r3,80089d0 <___vfiprintf_internal_r+0xb3c>
 800886c:	00c00084 	movi	r3,2
 8008870:	10ffe41e 	bne	r2,r3,8008804 <__alt_data_end+0xf8008804>
 8008874:	0025883a 	mov	r18,zero
 8008878:	0027883a 	mov	r19,zero
 800887c:	00013d06 	br	8008d74 <___vfiprintf_internal_r+0xee0>
 8008880:	21003fcc 	andi	r4,r4,255
 8008884:	2002811e 	bne	r4,zero,800928c <___vfiprintf_internal_r+0x13f8>
 8008888:	008200b4 	movhi	r2,2050
 800888c:	10a3de04 	addi	r2,r2,-28808
 8008890:	d8802615 	stw	r2,152(sp)
 8008894:	a080080c 	andi	r2,r20,32
 8008898:	103f561e 	bne	r2,zero,80085f4 <__alt_data_end+0xf80085f4>
 800889c:	a080040c 	andi	r2,r20,16
 80088a0:	1001d126 	beq	r2,zero,8008fe8 <___vfiprintf_internal_r+0x1154>
 80088a4:	da802217 	ldw	r10,136(sp)
 80088a8:	0027883a 	mov	r19,zero
 80088ac:	54800017 	ldw	r18,0(r10)
 80088b0:	52800104 	addi	r10,r10,4
 80088b4:	da802215 	stw	r10,136(sp)
 80088b8:	003f5306 	br	8008608 <__alt_data_end+0xf8008608>
 80088bc:	da802217 	ldw	r10,136(sp)
 80088c0:	d8001d85 	stb	zero,118(sp)
 80088c4:	55400017 	ldw	r21,0(r10)
 80088c8:	50c00104 	addi	r3,r10,4
 80088cc:	a8024226 	beq	r21,zero,80091d8 <___vfiprintf_internal_r+0x1344>
 80088d0:	48021816 	blt	r9,zero,8009134 <___vfiprintf_internal_r+0x12a0>
 80088d4:	480d883a 	mov	r6,r9
 80088d8:	000b883a 	mov	r5,zero
 80088dc:	a809883a 	mov	r4,r21
 80088e0:	d8c02a15 	stw	r3,168(sp)
 80088e4:	da002b15 	stw	r8,172(sp)
 80088e8:	da402c15 	stw	r9,176(sp)
 80088ec:	80060900 	call	8006090 <memchr>
 80088f0:	d8c02a17 	ldw	r3,168(sp)
 80088f4:	da002b17 	ldw	r8,172(sp)
 80088f8:	da402c17 	ldw	r9,176(sp)
 80088fc:	10024826 	beq	r2,zero,8009220 <___vfiprintf_internal_r+0x138c>
 8008900:	1567c83a 	sub	r19,r2,r21
 8008904:	df001d83 	ldbu	fp,118(sp)
 8008908:	d8c02215 	stw	r3,136(sp)
 800890c:	0013883a 	mov	r9,zero
 8008910:	003e6006 	br	8008294 <__alt_data_end+0xf8008294>
 8008914:	21003fcc 	andi	r4,r4,255
 8008918:	203fc026 	beq	r4,zero,800881c <__alt_data_end+0xf800881c>
 800891c:	d9c01d85 	stb	r7,118(sp)
 8008920:	003fbe06 	br	800881c <__alt_data_end+0xf800881c>
 8008924:	da802217 	ldw	r10,136(sp)
 8008928:	54400017 	ldw	r17,0(r10)
 800892c:	50800104 	addi	r2,r10,4
 8008930:	883e3b16 	blt	r17,zero,8008220 <__alt_data_end+0xf8008220>
 8008934:	d8802215 	stw	r2,136(sp)
 8008938:	80c00007 	ldb	r3,0(r16)
 800893c:	003db406 	br	8008010 <__alt_data_end+0xf8008010>
 8008940:	01000044 	movi	r4,1
 8008944:	01c00ac4 	movi	r7,43
 8008948:	80c00007 	ldb	r3,0(r16)
 800894c:	003db006 	br	8008010 <__alt_data_end+0xf8008010>
 8008950:	80c00007 	ldb	r3,0(r16)
 8008954:	82800044 	addi	r10,r16,1
 8008958:	1b423c26 	beq	r3,r13,800924c <___vfiprintf_internal_r+0x13b8>
 800895c:	18bff404 	addi	r2,r3,-48
 8008960:	0013883a 	mov	r9,zero
 8008964:	30822b36 	bltu	r6,r2,8009214 <___vfiprintf_internal_r+0x1380>
 8008968:	50c00007 	ldb	r3,0(r10)
 800896c:	4a4002a4 	muli	r9,r9,10
 8008970:	54000044 	addi	r16,r10,1
 8008974:	8015883a 	mov	r10,r16
 8008978:	4893883a 	add	r9,r9,r2
 800897c:	18bff404 	addi	r2,r3,-48
 8008980:	30bff92e 	bgeu	r6,r2,8008968 <__alt_data_end+0xf8008968>
 8008984:	483da30e 	bge	r9,zero,8008014 <__alt_data_end+0xf8008014>
 8008988:	027fffc4 	movi	r9,-1
 800898c:	003da106 	br	8008014 <__alt_data_end+0xf8008014>
 8008990:	a5001014 	ori	r20,r20,64
 8008994:	80c00007 	ldb	r3,0(r16)
 8008998:	003d9d06 	br	8008010 <__alt_data_end+0xf8008010>
 800899c:	da802217 	ldw	r10,136(sp)
 80089a0:	d8001d85 	stb	zero,118(sp)
 80089a4:	50c00204 	addi	r3,r10,8
 80089a8:	54800017 	ldw	r18,0(r10)
 80089ac:	54c00117 	ldw	r19,4(r10)
 80089b0:	4801ca16 	blt	r9,zero,80090dc <___vfiprintf_internal_r+0x1248>
 80089b4:	013fdfc4 	movi	r4,-129
 80089b8:	94c4b03a 	or	r2,r18,r19
 80089bc:	d8c02215 	stw	r3,136(sp)
 80089c0:	a128703a 	and	r20,r20,r4
 80089c4:	0039883a 	mov	fp,zero
 80089c8:	103f341e 	bne	r2,zero,800869c <__alt_data_end+0xf800869c>
 80089cc:	483e2e26 	beq	r9,zero,8008288 <__alt_data_end+0xf8008288>
 80089d0:	0025883a 	mov	r18,zero
 80089d4:	94800c04 	addi	r18,r18,48
 80089d8:	dc8019c5 	stb	r18,103(sp)
 80089dc:	dcc02717 	ldw	r19,156(sp)
 80089e0:	dd4019c4 	addi	r21,sp,103
 80089e4:	003e2b06 	br	8008294 <__alt_data_end+0xf8008294>
 80089e8:	21003fcc 	andi	r4,r4,255
 80089ec:	2002361e 	bne	r4,zero,80092c8 <___vfiprintf_internal_r+0x1434>
 80089f0:	1801c126 	beq	r3,zero,80090f8 <___vfiprintf_internal_r+0x1264>
 80089f4:	04800044 	movi	r18,1
 80089f8:	d8c01005 	stb	r3,64(sp)
 80089fc:	d8001d85 	stb	zero,118(sp)
 8008a00:	9027883a 	mov	r19,r18
 8008a04:	dd401004 	addi	r21,sp,64
 8008a08:	003f1106 	br	8008650 <__alt_data_end+0xf8008650>
 8008a0c:	d9402117 	ldw	r5,132(sp)
 8008a10:	d9002017 	ldw	r4,128(sp)
 8008a14:	d9801a04 	addi	r6,sp,104
 8008a18:	d9c02b15 	stw	r7,172(sp)
 8008a1c:	dbc02a15 	stw	r15,168(sp)
 8008a20:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008a24:	d9c02b17 	ldw	r7,172(sp)
 8008a28:	dbc02a17 	ldw	r15,168(sp)
 8008a2c:	10006d1e 	bne	r2,zero,8008be4 <___vfiprintf_internal_r+0xd50>
 8008a30:	d9801b17 	ldw	r6,108(sp)
 8008a34:	d8801c17 	ldw	r2,112(sp)
 8008a38:	d811883a 	mov	r8,sp
 8008a3c:	31400044 	addi	r5,r6,1
 8008a40:	003e3306 	br	8008310 <__alt_data_end+0xf8008310>
 8008a44:	d9401b17 	ldw	r5,108(sp)
 8008a48:	d8801c17 	ldw	r2,112(sp)
 8008a4c:	29000044 	addi	r4,r5,1
 8008a50:	d8c01d87 	ldb	r3,118(sp)
 8008a54:	183e4d26 	beq	r3,zero,800838c <__alt_data_end+0xf800838c>
 8008a58:	00c00044 	movi	r3,1
 8008a5c:	d9401d84 	addi	r5,sp,118
 8008a60:	10c5883a 	add	r2,r2,r3
 8008a64:	41400015 	stw	r5,0(r8)
 8008a68:	40c00115 	stw	r3,4(r8)
 8008a6c:	d8801c15 	stw	r2,112(sp)
 8008a70:	d9001b15 	stw	r4,108(sp)
 8008a74:	014001c4 	movi	r5,7
 8008a78:	2900a90e 	bge	r5,r4,8008d20 <___vfiprintf_internal_r+0xe8c>
 8008a7c:	1000da1e 	bne	r2,zero,8008de8 <___vfiprintf_internal_r+0xf54>
 8008a80:	7000ab1e 	bne	r14,zero,8008d30 <___vfiprintf_internal_r+0xe9c>
 8008a84:	000b883a 	mov	r5,zero
 8008a88:	1809883a 	mov	r4,r3
 8008a8c:	d811883a 	mov	r8,sp
 8008a90:	00c02004 	movi	r3,128
 8008a94:	e0fe4d26 	beq	fp,r3,80083cc <__alt_data_end+0xf80083cc>
 8008a98:	4cf9c83a 	sub	fp,r9,r19
 8008a9c:	073e7b0e 	bge	zero,fp,800848c <__alt_data_end+0xf800848c>
 8008aa0:	01c00404 	movi	r7,16
 8008aa4:	3f01900e 	bge	r7,fp,80090e8 <___vfiprintf_internal_r+0x1254>
 8008aa8:	00c200b4 	movhi	r3,2050
 8008aac:	18e44404 	addi	r3,r3,-28400
 8008ab0:	d8c02415 	stw	r3,144(sp)
 8008ab4:	034001c4 	movi	r13,7
 8008ab8:	00000506 	br	8008ad0 <___vfiprintf_internal_r+0xc3c>
 8008abc:	29000084 	addi	r4,r5,2
 8008ac0:	42000204 	addi	r8,r8,8
 8008ac4:	180b883a 	mov	r5,r3
 8008ac8:	e73ffc04 	addi	fp,fp,-16
 8008acc:	3f000d0e 	bge	r7,fp,8008b04 <___vfiprintf_internal_r+0xc70>
 8008ad0:	10800404 	addi	r2,r2,16
 8008ad4:	28c00044 	addi	r3,r5,1
 8008ad8:	45c00015 	stw	r23,0(r8)
 8008adc:	41c00115 	stw	r7,4(r8)
 8008ae0:	d8801c15 	stw	r2,112(sp)
 8008ae4:	d8c01b15 	stw	r3,108(sp)
 8008ae8:	68fff40e 	bge	r13,r3,8008abc <__alt_data_end+0xf8008abc>
 8008aec:	1000101e 	bne	r2,zero,8008b30 <___vfiprintf_internal_r+0xc9c>
 8008af0:	e73ffc04 	addi	fp,fp,-16
 8008af4:	01000044 	movi	r4,1
 8008af8:	000b883a 	mov	r5,zero
 8008afc:	d811883a 	mov	r8,sp
 8008b00:	3f3ff316 	blt	r7,fp,8008ad0 <__alt_data_end+0xf8008ad0>
 8008b04:	da802417 	ldw	r10,144(sp)
 8008b08:	1705883a 	add	r2,r2,fp
 8008b0c:	47000115 	stw	fp,4(r8)
 8008b10:	42800015 	stw	r10,0(r8)
 8008b14:	d8801c15 	stw	r2,112(sp)
 8008b18:	d9001b15 	stw	r4,108(sp)
 8008b1c:	00c001c4 	movi	r3,7
 8008b20:	19003616 	blt	r3,r4,8008bfc <___vfiprintf_internal_r+0xd68>
 8008b24:	42000204 	addi	r8,r8,8
 8008b28:	21000044 	addi	r4,r4,1
 8008b2c:	003e5706 	br	800848c <__alt_data_end+0xf800848c>
 8008b30:	d9402117 	ldw	r5,132(sp)
 8008b34:	d9002017 	ldw	r4,128(sp)
 8008b38:	d9801a04 	addi	r6,sp,104
 8008b3c:	d9c02b15 	stw	r7,172(sp)
 8008b40:	db402a15 	stw	r13,168(sp)
 8008b44:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008b48:	d9c02b17 	ldw	r7,172(sp)
 8008b4c:	db402a17 	ldw	r13,168(sp)
 8008b50:	1000241e 	bne	r2,zero,8008be4 <___vfiprintf_internal_r+0xd50>
 8008b54:	d9401b17 	ldw	r5,108(sp)
 8008b58:	d8801c17 	ldw	r2,112(sp)
 8008b5c:	d811883a 	mov	r8,sp
 8008b60:	29000044 	addi	r4,r5,1
 8008b64:	003fd806 	br	8008ac8 <__alt_data_end+0xf8008ac8>
 8008b68:	d9401b17 	ldw	r5,108(sp)
 8008b6c:	00c200b4 	movhi	r3,2050
 8008b70:	18e44804 	addi	r3,r3,-28384
 8008b74:	d8c02415 	stw	r3,144(sp)
 8008b78:	29400044 	addi	r5,r5,1
 8008b7c:	d8c02417 	ldw	r3,144(sp)
 8008b80:	14c5883a 	add	r2,r2,r19
 8008b84:	44c00115 	stw	r19,4(r8)
 8008b88:	40c00015 	stw	r3,0(r8)
 8008b8c:	d8801c15 	stw	r2,112(sp)
 8008b90:	d9401b15 	stw	r5,108(sp)
 8008b94:	00c001c4 	movi	r3,7
 8008b98:	1940070e 	bge	r3,r5,8008bb8 <___vfiprintf_internal_r+0xd24>
 8008b9c:	103e4826 	beq	r2,zero,80084c0 <__alt_data_end+0xf80084c0>
 8008ba0:	d9402117 	ldw	r5,132(sp)
 8008ba4:	d9002017 	ldw	r4,128(sp)
 8008ba8:	d9801a04 	addi	r6,sp,104
 8008bac:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008bb0:	10000c1e 	bne	r2,zero,8008be4 <___vfiprintf_internal_r+0xd50>
 8008bb4:	d8801c17 	ldw	r2,112(sp)
 8008bb8:	8c80010e 	bge	r17,r18,8008bc0 <___vfiprintf_internal_r+0xd2c>
 8008bbc:	9023883a 	mov	r17,r18
 8008bc0:	da802317 	ldw	r10,140(sp)
 8008bc4:	5455883a 	add	r10,r10,r17
 8008bc8:	da802315 	stw	r10,140(sp)
 8008bcc:	103e4126 	beq	r2,zero,80084d4 <__alt_data_end+0xf80084d4>
 8008bd0:	d9402117 	ldw	r5,132(sp)
 8008bd4:	d9002017 	ldw	r4,128(sp)
 8008bd8:	d9801a04 	addi	r6,sp,104
 8008bdc:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008be0:	103e3c26 	beq	r2,zero,80084d4 <__alt_data_end+0xf80084d4>
 8008be4:	dd002117 	ldw	r20,132(sp)
 8008be8:	a080030b 	ldhu	r2,12(r20)
 8008bec:	1080100c 	andi	r2,r2,64
 8008bf0:	1001231e 	bne	r2,zero,8009080 <___vfiprintf_internal_r+0x11ec>
 8008bf4:	d8802317 	ldw	r2,140(sp)
 8008bf8:	003d7b06 	br	80081e8 <__alt_data_end+0xf80081e8>
 8008bfc:	1000991e 	bne	r2,zero,8008e64 <___vfiprintf_internal_r+0xfd0>
 8008c00:	00c00044 	movi	r3,1
 8008c04:	9805883a 	mov	r2,r19
 8008c08:	dd400015 	stw	r21,0(sp)
 8008c0c:	dcc00115 	stw	r19,4(sp)
 8008c10:	dcc01c15 	stw	r19,112(sp)
 8008c14:	d8c01b15 	stw	r3,108(sp)
 8008c18:	d811883a 	mov	r8,sp
 8008c1c:	42000204 	addi	r8,r8,8
 8008c20:	a2c0010c 	andi	r11,r20,4
 8008c24:	583fe426 	beq	r11,zero,8008bb8 <__alt_data_end+0xf8008bb8>
 8008c28:	8ca7c83a 	sub	r19,r17,r18
 8008c2c:	04ffe20e 	bge	zero,r19,8008bb8 <__alt_data_end+0xf8008bb8>
 8008c30:	01c00404 	movi	r7,16
 8008c34:	3cffcc0e 	bge	r7,r19,8008b68 <__alt_data_end+0xf8008b68>
 8008c38:	028200b4 	movhi	r10,2050
 8008c3c:	52a44804 	addi	r10,r10,-28384
 8008c40:	d9001b17 	ldw	r4,108(sp)
 8008c44:	da802415 	stw	r10,144(sp)
 8008c48:	382b883a 	mov	r21,r7
 8008c4c:	050001c4 	movi	r20,7
 8008c50:	df002017 	ldw	fp,128(sp)
 8008c54:	00000506 	br	8008c6c <___vfiprintf_internal_r+0xdd8>
 8008c58:	21400084 	addi	r5,r4,2
 8008c5c:	42000204 	addi	r8,r8,8
 8008c60:	1809883a 	mov	r4,r3
 8008c64:	9cfffc04 	addi	r19,r19,-16
 8008c68:	acffc40e 	bge	r21,r19,8008b7c <__alt_data_end+0xf8008b7c>
 8008c6c:	10800404 	addi	r2,r2,16
 8008c70:	20c00044 	addi	r3,r4,1
 8008c74:	45800015 	stw	r22,0(r8)
 8008c78:	45400115 	stw	r21,4(r8)
 8008c7c:	d8801c15 	stw	r2,112(sp)
 8008c80:	d8c01b15 	stw	r3,108(sp)
 8008c84:	a0fff40e 	bge	r20,r3,8008c58 <__alt_data_end+0xf8008c58>
 8008c88:	1000041e 	bne	r2,zero,8008c9c <___vfiprintf_internal_r+0xe08>
 8008c8c:	01400044 	movi	r5,1
 8008c90:	0009883a 	mov	r4,zero
 8008c94:	d811883a 	mov	r8,sp
 8008c98:	003ff206 	br	8008c64 <__alt_data_end+0xf8008c64>
 8008c9c:	d9402117 	ldw	r5,132(sp)
 8008ca0:	d9801a04 	addi	r6,sp,104
 8008ca4:	e009883a 	mov	r4,fp
 8008ca8:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008cac:	103fcd1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008cb0:	d9001b17 	ldw	r4,108(sp)
 8008cb4:	d8801c17 	ldw	r2,112(sp)
 8008cb8:	d811883a 	mov	r8,sp
 8008cbc:	21400044 	addi	r5,r4,1
 8008cc0:	003fe806 	br	8008c64 <__alt_data_end+0xf8008c64>
 8008cc4:	d9402117 	ldw	r5,132(sp)
 8008cc8:	d9002017 	ldw	r4,128(sp)
 8008ccc:	d9801a04 	addi	r6,sp,104
 8008cd0:	d9c02b15 	stw	r7,172(sp)
 8008cd4:	db402a15 	stw	r13,168(sp)
 8008cd8:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008cdc:	d9c02b17 	ldw	r7,172(sp)
 8008ce0:	db402a17 	ldw	r13,168(sp)
 8008ce4:	103fbf1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008ce8:	d9401b17 	ldw	r5,108(sp)
 8008cec:	d8801c17 	ldw	r2,112(sp)
 8008cf0:	d811883a 	mov	r8,sp
 8008cf4:	29800044 	addi	r6,r5,1
 8008cf8:	003dc406 	br	800840c <__alt_data_end+0xf800840c>
 8008cfc:	1000d21e 	bne	r2,zero,8009048 <___vfiprintf_internal_r+0x11b4>
 8008d00:	d8c01d87 	ldb	r3,118(sp)
 8008d04:	18009526 	beq	r3,zero,8008f5c <___vfiprintf_internal_r+0x10c8>
 8008d08:	00800044 	movi	r2,1
 8008d0c:	d8c01d84 	addi	r3,sp,118
 8008d10:	1009883a 	mov	r4,r2
 8008d14:	d8c00015 	stw	r3,0(sp)
 8008d18:	d8800115 	stw	r2,4(sp)
 8008d1c:	d811883a 	mov	r8,sp
 8008d20:	200b883a 	mov	r5,r4
 8008d24:	42000204 	addi	r8,r8,8
 8008d28:	21000044 	addi	r4,r4,1
 8008d2c:	003d9706 	br	800838c <__alt_data_end+0xf800838c>
 8008d30:	d9001d04 	addi	r4,sp,116
 8008d34:	00800084 	movi	r2,2
 8008d38:	d9000015 	stw	r4,0(sp)
 8008d3c:	d8800115 	stw	r2,4(sp)
 8008d40:	1809883a 	mov	r4,r3
 8008d44:	d811883a 	mov	r8,sp
 8008d48:	200b883a 	mov	r5,r4
 8008d4c:	42000204 	addi	r8,r8,8
 8008d50:	21000044 	addi	r4,r4,1
 8008d54:	003f4e06 	br	8008a90 <__alt_data_end+0xf8008a90>
 8008d58:	d8001d85 	stb	zero,118(sp)
 8008d5c:	48005016 	blt	r9,zero,8008ea0 <___vfiprintf_internal_r+0x100c>
 8008d60:	00ffdfc4 	movi	r3,-129
 8008d64:	94c4b03a 	or	r2,r18,r19
 8008d68:	a0e8703a 	and	r20,r20,r3
 8008d6c:	103d4426 	beq	r2,zero,8008280 <__alt_data_end+0xf8008280>
 8008d70:	0039883a 	mov	fp,zero
 8008d74:	d9002617 	ldw	r4,152(sp)
 8008d78:	dd401a04 	addi	r21,sp,104
 8008d7c:	908003cc 	andi	r2,r18,15
 8008d80:	9806973a 	slli	r3,r19,28
 8008d84:	2085883a 	add	r2,r4,r2
 8008d88:	9024d13a 	srli	r18,r18,4
 8008d8c:	10800003 	ldbu	r2,0(r2)
 8008d90:	9826d13a 	srli	r19,r19,4
 8008d94:	ad7fffc4 	addi	r21,r21,-1
 8008d98:	1ca4b03a 	or	r18,r3,r18
 8008d9c:	a8800005 	stb	r2,0(r21)
 8008da0:	94c4b03a 	or	r2,r18,r19
 8008da4:	103ff51e 	bne	r2,zero,8008d7c <__alt_data_end+0xf8008d7c>
 8008da8:	003e5906 	br	8008710 <__alt_data_end+0xf8008710>
 8008dac:	d9402117 	ldw	r5,132(sp)
 8008db0:	d9002017 	ldw	r4,128(sp)
 8008db4:	d9801a04 	addi	r6,sp,104
 8008db8:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008dbc:	103f891e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008dc0:	d8801c17 	ldw	r2,112(sp)
 8008dc4:	d811883a 	mov	r8,sp
 8008dc8:	003f9506 	br	8008c20 <__alt_data_end+0xf8008c20>
 8008dcc:	d9402117 	ldw	r5,132(sp)
 8008dd0:	d9002017 	ldw	r4,128(sp)
 8008dd4:	d9801a04 	addi	r6,sp,104
 8008dd8:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008ddc:	103f811e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008de0:	d811883a 	mov	r8,sp
 8008de4:	003ced06 	br	800819c <__alt_data_end+0xf800819c>
 8008de8:	d9402117 	ldw	r5,132(sp)
 8008dec:	d9002017 	ldw	r4,128(sp)
 8008df0:	d9801a04 	addi	r6,sp,104
 8008df4:	da402c15 	stw	r9,176(sp)
 8008df8:	db802a15 	stw	r14,168(sp)
 8008dfc:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008e00:	da402c17 	ldw	r9,176(sp)
 8008e04:	db802a17 	ldw	r14,168(sp)
 8008e08:	103f761e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008e0c:	d9401b17 	ldw	r5,108(sp)
 8008e10:	d8801c17 	ldw	r2,112(sp)
 8008e14:	d811883a 	mov	r8,sp
 8008e18:	29000044 	addi	r4,r5,1
 8008e1c:	003d5b06 	br	800838c <__alt_data_end+0xf800838c>
 8008e20:	d9402117 	ldw	r5,132(sp)
 8008e24:	d9002017 	ldw	r4,128(sp)
 8008e28:	d9801a04 	addi	r6,sp,104
 8008e2c:	da402c15 	stw	r9,176(sp)
 8008e30:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008e34:	da402c17 	ldw	r9,176(sp)
 8008e38:	103f6a1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008e3c:	d9401b17 	ldw	r5,108(sp)
 8008e40:	d8801c17 	ldw	r2,112(sp)
 8008e44:	d811883a 	mov	r8,sp
 8008e48:	29000044 	addi	r4,r5,1
 8008e4c:	003f1006 	br	8008a90 <__alt_data_end+0xf8008a90>
 8008e50:	1000c31e 	bne	r2,zero,8009160 <___vfiprintf_internal_r+0x12cc>
 8008e54:	01000044 	movi	r4,1
 8008e58:	000b883a 	mov	r5,zero
 8008e5c:	d811883a 	mov	r8,sp
 8008e60:	003f0d06 	br	8008a98 <__alt_data_end+0xf8008a98>
 8008e64:	d9402117 	ldw	r5,132(sp)
 8008e68:	d9002017 	ldw	r4,128(sp)
 8008e6c:	d9801a04 	addi	r6,sp,104
 8008e70:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8008e74:	103f5b1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 8008e78:	d9001b17 	ldw	r4,108(sp)
 8008e7c:	d8801c17 	ldw	r2,112(sp)
 8008e80:	d811883a 	mov	r8,sp
 8008e84:	21000044 	addi	r4,r4,1
 8008e88:	003d8006 	br	800848c <__alt_data_end+0xf800848c>
 8008e8c:	010200b4 	movhi	r4,2050
 8008e90:	2123e304 	addi	r4,r4,-28788
 8008e94:	d9002615 	stw	r4,152(sp)
 8008e98:	d8c02215 	stw	r3,136(sp)
 8008e9c:	1029883a 	mov	r20,r2
 8008ea0:	94c4b03a 	or	r2,r18,r19
 8008ea4:	103fb21e 	bne	r2,zero,8008d70 <__alt_data_end+0xf8008d70>
 8008ea8:	0039883a 	mov	fp,zero
 8008eac:	00800084 	movi	r2,2
 8008eb0:	003e6b06 	br	8008860 <__alt_data_end+0xf8008860>
 8008eb4:	da802217 	ldw	r10,136(sp)
 8008eb8:	d8001d85 	stb	zero,118(sp)
 8008ebc:	0027883a 	mov	r19,zero
 8008ec0:	50800104 	addi	r2,r10,4
 8008ec4:	54800017 	ldw	r18,0(r10)
 8008ec8:	483e6016 	blt	r9,zero,800884c <__alt_data_end+0xf800884c>
 8008ecc:	00ffdfc4 	movi	r3,-129
 8008ed0:	d8802215 	stw	r2,136(sp)
 8008ed4:	a0e8703a 	and	r20,r20,r3
 8008ed8:	0039883a 	mov	fp,zero
 8008edc:	903ebb26 	beq	r18,zero,80089cc <__alt_data_end+0xf80089cc>
 8008ee0:	00800244 	movi	r2,9
 8008ee4:	14bdee36 	bltu	r2,r18,80086a0 <__alt_data_end+0xf80086a0>
 8008ee8:	003eba06 	br	80089d4 <__alt_data_end+0xf80089d4>
 8008eec:	00800c04 	movi	r2,48
 8008ef0:	d8c01d45 	stb	r3,117(sp)
 8008ef4:	d8801d05 	stb	r2,116(sp)
 8008ef8:	d8001d85 	stb	zero,118(sp)
 8008efc:	a0c00094 	ori	r3,r20,2
 8008f00:	4800a916 	blt	r9,zero,80091a8 <___vfiprintf_internal_r+0x1314>
 8008f04:	00bfdfc4 	movi	r2,-129
 8008f08:	a096703a 	and	r11,r20,r2
 8008f0c:	5d000094 	ori	r20,r11,2
 8008f10:	0039883a 	mov	fp,zero
 8008f14:	003f9706 	br	8008d74 <__alt_data_end+0xf8008d74>
 8008f18:	8025883a 	mov	r18,r16
 8008f1c:	003c2e06 	br	8007fd8 <__alt_data_end+0xf8007fd8>
 8008f20:	008200b4 	movhi	r2,2050
 8008f24:	10a3e304 	addi	r2,r2,-28788
 8008f28:	0039883a 	mov	fp,zero
 8008f2c:	d8802615 	stw	r2,152(sp)
 8008f30:	003f9006 	br	8008d74 <__alt_data_end+0xf8008d74>
 8008f34:	04a5c83a 	sub	r18,zero,r18
 8008f38:	07000b44 	movi	fp,45
 8008f3c:	9004c03a 	cmpne	r2,r18,zero
 8008f40:	04e7c83a 	sub	r19,zero,r19
 8008f44:	df001d85 	stb	fp,118(sp)
 8008f48:	98a7c83a 	sub	r19,r19,r2
 8008f4c:	48009f16 	blt	r9,zero,80091cc <___vfiprintf_internal_r+0x1338>
 8008f50:	00bfdfc4 	movi	r2,-129
 8008f54:	a0a8703a 	and	r20,r20,r2
 8008f58:	003dd006 	br	800869c <__alt_data_end+0xf800869c>
 8008f5c:	70004c26 	beq	r14,zero,8009090 <___vfiprintf_internal_r+0x11fc>
 8008f60:	00800084 	movi	r2,2
 8008f64:	d8c01d04 	addi	r3,sp,116
 8008f68:	d8c00015 	stw	r3,0(sp)
 8008f6c:	d8800115 	stw	r2,4(sp)
 8008f70:	01000044 	movi	r4,1
 8008f74:	d811883a 	mov	r8,sp
 8008f78:	003f7306 	br	8008d48 <__alt_data_end+0xf8008d48>
 8008f7c:	a080100c 	andi	r2,r20,64
 8008f80:	da802217 	ldw	r10,136(sp)
 8008f84:	103e0626 	beq	r2,zero,80087a0 <__alt_data_end+0xf80087a0>
 8008f88:	5480000f 	ldh	r18,0(r10)
 8008f8c:	52800104 	addi	r10,r10,4
 8008f90:	da802215 	stw	r10,136(sp)
 8008f94:	9027d7fa 	srai	r19,r18,31
 8008f98:	9805883a 	mov	r2,r19
 8008f9c:	003db806 	br	8008680 <__alt_data_end+0xf8008680>
 8008fa0:	a080040c 	andi	r2,r20,16
 8008fa4:	1000091e 	bne	r2,zero,8008fcc <___vfiprintf_internal_r+0x1138>
 8008fa8:	a2c0100c 	andi	r11,r20,64
 8008fac:	58000726 	beq	r11,zero,8008fcc <___vfiprintf_internal_r+0x1138>
 8008fb0:	da802217 	ldw	r10,136(sp)
 8008fb4:	50800017 	ldw	r2,0(r10)
 8008fb8:	52800104 	addi	r10,r10,4
 8008fbc:	da802215 	stw	r10,136(sp)
 8008fc0:	da802317 	ldw	r10,140(sp)
 8008fc4:	1280000d 	sth	r10,0(r2)
 8008fc8:	003be706 	br	8007f68 <__alt_data_end+0xf8007f68>
 8008fcc:	da802217 	ldw	r10,136(sp)
 8008fd0:	50800017 	ldw	r2,0(r10)
 8008fd4:	52800104 	addi	r10,r10,4
 8008fd8:	da802215 	stw	r10,136(sp)
 8008fdc:	da802317 	ldw	r10,140(sp)
 8008fe0:	12800015 	stw	r10,0(r2)
 8008fe4:	003be006 	br	8007f68 <__alt_data_end+0xf8007f68>
 8008fe8:	a080100c 	andi	r2,r20,64
 8008fec:	da802217 	ldw	r10,136(sp)
 8008ff0:	10003026 	beq	r2,zero,80090b4 <___vfiprintf_internal_r+0x1220>
 8008ff4:	5480000b 	ldhu	r18,0(r10)
 8008ff8:	52800104 	addi	r10,r10,4
 8008ffc:	0027883a 	mov	r19,zero
 8009000:	da802215 	stw	r10,136(sp)
 8009004:	003d8006 	br	8008608 <__alt_data_end+0xf8008608>
 8009008:	80c00007 	ldb	r3,0(r16)
 800900c:	003c0006 	br	8008010 <__alt_data_end+0xf8008010>
 8009010:	a080100c 	andi	r2,r20,64
 8009014:	d8001d85 	stb	zero,118(sp)
 8009018:	da802217 	ldw	r10,136(sp)
 800901c:	1000201e 	bne	r2,zero,80090a0 <___vfiprintf_internal_r+0x120c>
 8009020:	50800104 	addi	r2,r10,4
 8009024:	54800017 	ldw	r18,0(r10)
 8009028:	0027883a 	mov	r19,zero
 800902c:	483def0e 	bge	r9,zero,80087ec <__alt_data_end+0xf80087ec>
 8009030:	94c6b03a 	or	r3,r18,r19
 8009034:	d8802215 	stw	r2,136(sp)
 8009038:	183d4e1e 	bne	r3,zero,8008574 <__alt_data_end+0xf8008574>
 800903c:	0039883a 	mov	fp,zero
 8009040:	0005883a 	mov	r2,zero
 8009044:	003e0606 	br	8008860 <__alt_data_end+0xf8008860>
 8009048:	d9402117 	ldw	r5,132(sp)
 800904c:	d9002017 	ldw	r4,128(sp)
 8009050:	d9801a04 	addi	r6,sp,104
 8009054:	da402c15 	stw	r9,176(sp)
 8009058:	db802a15 	stw	r14,168(sp)
 800905c:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8009060:	da402c17 	ldw	r9,176(sp)
 8009064:	db802a17 	ldw	r14,168(sp)
 8009068:	103ede1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 800906c:	d9401b17 	ldw	r5,108(sp)
 8009070:	d8801c17 	ldw	r2,112(sp)
 8009074:	d811883a 	mov	r8,sp
 8009078:	29000044 	addi	r4,r5,1
 800907c:	003e7406 	br	8008a50 <__alt_data_end+0xf8008a50>
 8009080:	00bfffc4 	movi	r2,-1
 8009084:	003c5806 	br	80081e8 <__alt_data_end+0xf80081e8>
 8009088:	d811883a 	mov	r8,sp
 800908c:	003ee806 	br	8008c30 <__alt_data_end+0xf8008c30>
 8009090:	000b883a 	mov	r5,zero
 8009094:	01000044 	movi	r4,1
 8009098:	d811883a 	mov	r8,sp
 800909c:	003e7c06 	br	8008a90 <__alt_data_end+0xf8008a90>
 80090a0:	50800104 	addi	r2,r10,4
 80090a4:	5480000b 	ldhu	r18,0(r10)
 80090a8:	0027883a 	mov	r19,zero
 80090ac:	483dcf0e 	bge	r9,zero,80087ec <__alt_data_end+0xf80087ec>
 80090b0:	003fdf06 	br	8009030 <__alt_data_end+0xf8009030>
 80090b4:	54800017 	ldw	r18,0(r10)
 80090b8:	52800104 	addi	r10,r10,4
 80090bc:	0027883a 	mov	r19,zero
 80090c0:	da802215 	stw	r10,136(sp)
 80090c4:	003d5006 	br	8008608 <__alt_data_end+0xf8008608>
 80090c8:	50800104 	addi	r2,r10,4
 80090cc:	5480000b 	ldhu	r18,0(r10)
 80090d0:	0027883a 	mov	r19,zero
 80090d4:	483f7d0e 	bge	r9,zero,8008ecc <__alt_data_end+0xf8008ecc>
 80090d8:	003ddc06 	br	800884c <__alt_data_end+0xf800884c>
 80090dc:	d8c02215 	stw	r3,136(sp)
 80090e0:	0039883a 	mov	fp,zero
 80090e4:	003ddb06 	br	8008854 <__alt_data_end+0xf8008854>
 80090e8:	028200b4 	movhi	r10,2050
 80090ec:	52a44404 	addi	r10,r10,-28400
 80090f0:	da802415 	stw	r10,144(sp)
 80090f4:	003e8306 	br	8008b04 <__alt_data_end+0xf8008b04>
 80090f8:	d8801c17 	ldw	r2,112(sp)
 80090fc:	dd002117 	ldw	r20,132(sp)
 8009100:	103eb926 	beq	r2,zero,8008be8 <__alt_data_end+0xf8008be8>
 8009104:	d9002017 	ldw	r4,128(sp)
 8009108:	d9801a04 	addi	r6,sp,104
 800910c:	a00b883a 	mov	r5,r20
 8009110:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8009114:	003eb406 	br	8008be8 <__alt_data_end+0xf8008be8>
 8009118:	80c00043 	ldbu	r3,1(r16)
 800911c:	a5000814 	ori	r20,r20,32
 8009120:	84000044 	addi	r16,r16,1
 8009124:	18c03fcc 	andi	r3,r3,255
 8009128:	18c0201c 	xori	r3,r3,128
 800912c:	18ffe004 	addi	r3,r3,-128
 8009130:	003bb706 	br	8008010 <__alt_data_end+0xf8008010>
 8009134:	a809883a 	mov	r4,r21
 8009138:	d8c02a15 	stw	r3,168(sp)
 800913c:	da002b15 	stw	r8,172(sp)
 8009140:	80007e80 	call	80007e8 <strlen>
 8009144:	d8c02a17 	ldw	r3,168(sp)
 8009148:	1027883a 	mov	r19,r2
 800914c:	df001d83 	ldbu	fp,118(sp)
 8009150:	d8c02215 	stw	r3,136(sp)
 8009154:	0013883a 	mov	r9,zero
 8009158:	da002b17 	ldw	r8,172(sp)
 800915c:	003c4d06 	br	8008294 <__alt_data_end+0xf8008294>
 8009160:	d9402117 	ldw	r5,132(sp)
 8009164:	d9002017 	ldw	r4,128(sp)
 8009168:	d9801a04 	addi	r6,sp,104
 800916c:	da402c15 	stw	r9,176(sp)
 8009170:	8007d800 	call	8007d80 <__sprint_r.part.0>
 8009174:	da402c17 	ldw	r9,176(sp)
 8009178:	103e9a1e 	bne	r2,zero,8008be4 <__alt_data_end+0xf8008be4>
 800917c:	d9401b17 	ldw	r5,108(sp)
 8009180:	d8801c17 	ldw	r2,112(sp)
 8009184:	d811883a 	mov	r8,sp
 8009188:	29000044 	addi	r4,r5,1
 800918c:	003e4206 	br	8008a98 <__alt_data_end+0xf8008a98>
 8009190:	d9401b17 	ldw	r5,108(sp)
 8009194:	010200b4 	movhi	r4,2050
 8009198:	21244804 	addi	r4,r4,-28384
 800919c:	d9002415 	stw	r4,144(sp)
 80091a0:	29400044 	addi	r5,r5,1
 80091a4:	003c6d06 	br	800835c <__alt_data_end+0xf800835c>
 80091a8:	0039883a 	mov	fp,zero
 80091ac:	00800084 	movi	r2,2
 80091b0:	10803fcc 	andi	r2,r2,255
 80091b4:	01000044 	movi	r4,1
 80091b8:	11001e26 	beq	r2,r4,8009234 <___vfiprintf_internal_r+0x13a0>
 80091bc:	01000084 	movi	r4,2
 80091c0:	11001e1e 	bne	r2,r4,800923c <___vfiprintf_internal_r+0x13a8>
 80091c4:	1829883a 	mov	r20,r3
 80091c8:	003eea06 	br	8008d74 <__alt_data_end+0xf8008d74>
 80091cc:	a007883a 	mov	r3,r20
 80091d0:	00800044 	movi	r2,1
 80091d4:	003ff606 	br	80091b0 <__alt_data_end+0xf80091b0>
 80091d8:	00800184 	movi	r2,6
 80091dc:	1240012e 	bgeu	r2,r9,80091e4 <___vfiprintf_internal_r+0x1350>
 80091e0:	1013883a 	mov	r9,r2
 80091e4:	4827883a 	mov	r19,r9
 80091e8:	4825883a 	mov	r18,r9
 80091ec:	48001516 	blt	r9,zero,8009244 <___vfiprintf_internal_r+0x13b0>
 80091f0:	054200b4 	movhi	r21,2050
 80091f4:	d8c02215 	stw	r3,136(sp)
 80091f8:	ad63e804 	addi	r21,r21,-28768
 80091fc:	003d1406 	br	8008650 <__alt_data_end+0xf8008650>
 8009200:	028200b4 	movhi	r10,2050
 8009204:	52a44404 	addi	r10,r10,-28400
 8009208:	da802415 	stw	r10,144(sp)
 800920c:	200d883a 	mov	r6,r4
 8009210:	003c9106 	br	8008458 <__alt_data_end+0xf8008458>
 8009214:	5021883a 	mov	r16,r10
 8009218:	0013883a 	mov	r9,zero
 800921c:	003b7d06 	br	8008014 <__alt_data_end+0xf8008014>
 8009220:	4827883a 	mov	r19,r9
 8009224:	df001d83 	ldbu	fp,118(sp)
 8009228:	d8c02215 	stw	r3,136(sp)
 800922c:	0013883a 	mov	r9,zero
 8009230:	003c1806 	br	8008294 <__alt_data_end+0xf8008294>
 8009234:	1829883a 	mov	r20,r3
 8009238:	003d1806 	br	800869c <__alt_data_end+0xf800869c>
 800923c:	1829883a 	mov	r20,r3
 8009240:	003ccd06 	br	8008578 <__alt_data_end+0xf8008578>
 8009244:	0025883a 	mov	r18,zero
 8009248:	003fe906 	br	80091f0 <__alt_data_end+0xf80091f0>
 800924c:	d8802217 	ldw	r2,136(sp)
 8009250:	80c00043 	ldbu	r3,1(r16)
 8009254:	5021883a 	mov	r16,r10
 8009258:	12400017 	ldw	r9,0(r2)
 800925c:	10800104 	addi	r2,r2,4
 8009260:	d8802215 	stw	r2,136(sp)
 8009264:	483faf0e 	bge	r9,zero,8009124 <__alt_data_end+0xf8009124>
 8009268:	18c03fcc 	andi	r3,r3,255
 800926c:	18c0201c 	xori	r3,r3,128
 8009270:	027fffc4 	movi	r9,-1
 8009274:	18ffe004 	addi	r3,r3,-128
 8009278:	003b6506 	br	8008010 <__alt_data_end+0xf8008010>
 800927c:	d9c01d85 	stb	r7,118(sp)
 8009280:	003ca006 	br	8008504 <__alt_data_end+0xf8008504>
 8009284:	d9c01d85 	stb	r7,118(sp)
 8009288:	003cad06 	br	8008540 <__alt_data_end+0xf8008540>
 800928c:	d9c01d85 	stb	r7,118(sp)
 8009290:	003d7d06 	br	8008888 <__alt_data_end+0xf8008888>
 8009294:	d9c01d85 	stb	r7,118(sp)
 8009298:	003d5f06 	br	8008818 <__alt_data_end+0xf8008818>
 800929c:	a080004c 	andi	r2,r20,1
 80092a0:	0039883a 	mov	fp,zero
 80092a4:	10000526 	beq	r2,zero,80092bc <___vfiprintf_internal_r+0x1428>
 80092a8:	00800c04 	movi	r2,48
 80092ac:	d88019c5 	stb	r2,103(sp)
 80092b0:	dcc02717 	ldw	r19,156(sp)
 80092b4:	dd4019c4 	addi	r21,sp,103
 80092b8:	003bf606 	br	8008294 <__alt_data_end+0xf8008294>
 80092bc:	0027883a 	mov	r19,zero
 80092c0:	dd401a04 	addi	r21,sp,104
 80092c4:	003bf306 	br	8008294 <__alt_data_end+0xf8008294>
 80092c8:	d9c01d85 	stb	r7,118(sp)
 80092cc:	003dc806 	br	80089f0 <__alt_data_end+0xf80089f0>
 80092d0:	d9c01d85 	stb	r7,118(sp)
 80092d4:	003d3a06 	br	80087c0 <__alt_data_end+0xf80087c0>
 80092d8:	d9c01d85 	stb	r7,118(sp)
 80092dc:	003d2a06 	br	8008788 <__alt_data_end+0xf8008788>
 80092e0:	d9c01d85 	stb	r7,118(sp)
 80092e4:	003cde06 	br	8008660 <__alt_data_end+0xf8008660>
 80092e8:	d9c01d85 	stb	r7,118(sp)
 80092ec:	003cbc06 	br	80085e0 <__alt_data_end+0xf80085e0>

080092f0 <__vfiprintf_internal>:
 80092f0:	008200b4 	movhi	r2,2050
 80092f4:	10ab9f04 	addi	r2,r2,-20868
 80092f8:	300f883a 	mov	r7,r6
 80092fc:	280d883a 	mov	r6,r5
 8009300:	200b883a 	mov	r5,r4
 8009304:	11000017 	ldw	r4,0(r2)
 8009308:	8007e941 	jmpi	8007e94 <___vfiprintf_internal_r>

0800930c <__sbprintf>:
 800930c:	2880030b 	ldhu	r2,12(r5)
 8009310:	2ac01917 	ldw	r11,100(r5)
 8009314:	2a80038b 	ldhu	r10,14(r5)
 8009318:	2a400717 	ldw	r9,28(r5)
 800931c:	2a000917 	ldw	r8,36(r5)
 8009320:	defee204 	addi	sp,sp,-1144
 8009324:	00c10004 	movi	r3,1024
 8009328:	dc011a15 	stw	r16,1128(sp)
 800932c:	10bfff4c 	andi	r2,r2,65533
 8009330:	2821883a 	mov	r16,r5
 8009334:	d8cb883a 	add	r5,sp,r3
 8009338:	dc811c15 	stw	r18,1136(sp)
 800933c:	dc411b15 	stw	r17,1132(sp)
 8009340:	dfc11d15 	stw	ra,1140(sp)
 8009344:	2025883a 	mov	r18,r4
 8009348:	d881030d 	sth	r2,1036(sp)
 800934c:	dac11915 	stw	r11,1124(sp)
 8009350:	da81038d 	sth	r10,1038(sp)
 8009354:	da410715 	stw	r9,1052(sp)
 8009358:	da010915 	stw	r8,1060(sp)
 800935c:	dec10015 	stw	sp,1024(sp)
 8009360:	dec10415 	stw	sp,1040(sp)
 8009364:	d8c10215 	stw	r3,1032(sp)
 8009368:	d8c10515 	stw	r3,1044(sp)
 800936c:	d8010615 	stw	zero,1048(sp)
 8009370:	8007e940 	call	8007e94 <___vfiprintf_internal_r>
 8009374:	1023883a 	mov	r17,r2
 8009378:	10000416 	blt	r2,zero,800938c <__sbprintf+0x80>
 800937c:	d9410004 	addi	r5,sp,1024
 8009380:	9009883a 	mov	r4,r18
 8009384:	80047480 	call	8004748 <_fflush_r>
 8009388:	10000d1e 	bne	r2,zero,80093c0 <__sbprintf+0xb4>
 800938c:	d881030b 	ldhu	r2,1036(sp)
 8009390:	1080100c 	andi	r2,r2,64
 8009394:	10000326 	beq	r2,zero,80093a4 <__sbprintf+0x98>
 8009398:	8080030b 	ldhu	r2,12(r16)
 800939c:	10801014 	ori	r2,r2,64
 80093a0:	8080030d 	sth	r2,12(r16)
 80093a4:	8805883a 	mov	r2,r17
 80093a8:	dfc11d17 	ldw	ra,1140(sp)
 80093ac:	dc811c17 	ldw	r18,1136(sp)
 80093b0:	dc411b17 	ldw	r17,1132(sp)
 80093b4:	dc011a17 	ldw	r16,1128(sp)
 80093b8:	dec11e04 	addi	sp,sp,1144
 80093bc:	f800283a 	ret
 80093c0:	047fffc4 	movi	r17,-1
 80093c4:	003ff106 	br	800938c <__alt_data_end+0xf800938c>

080093c8 <_write_r>:
 80093c8:	defffd04 	addi	sp,sp,-12
 80093cc:	2805883a 	mov	r2,r5
 80093d0:	dc000015 	stw	r16,0(sp)
 80093d4:	040200b4 	movhi	r16,2050
 80093d8:	dc400115 	stw	r17,4(sp)
 80093dc:	300b883a 	mov	r5,r6
 80093e0:	8432bd04 	addi	r16,r16,-13580
 80093e4:	2023883a 	mov	r17,r4
 80093e8:	380d883a 	mov	r6,r7
 80093ec:	1009883a 	mov	r4,r2
 80093f0:	dfc00215 	stw	ra,8(sp)
 80093f4:	80000015 	stw	zero,0(r16)
 80093f8:	800daac0 	call	800daac <write>
 80093fc:	00ffffc4 	movi	r3,-1
 8009400:	10c00526 	beq	r2,r3,8009418 <_write_r+0x50>
 8009404:	dfc00217 	ldw	ra,8(sp)
 8009408:	dc400117 	ldw	r17,4(sp)
 800940c:	dc000017 	ldw	r16,0(sp)
 8009410:	dec00304 	addi	sp,sp,12
 8009414:	f800283a 	ret
 8009418:	80c00017 	ldw	r3,0(r16)
 800941c:	183ff926 	beq	r3,zero,8009404 <__alt_data_end+0xf8009404>
 8009420:	88c00015 	stw	r3,0(r17)
 8009424:	003ff706 	br	8009404 <__alt_data_end+0xf8009404>

08009428 <_close_r>:
 8009428:	defffd04 	addi	sp,sp,-12
 800942c:	dc000015 	stw	r16,0(sp)
 8009430:	040200b4 	movhi	r16,2050
 8009434:	dc400115 	stw	r17,4(sp)
 8009438:	8432bd04 	addi	r16,r16,-13580
 800943c:	2023883a 	mov	r17,r4
 8009440:	2809883a 	mov	r4,r5
 8009444:	dfc00215 	stw	ra,8(sp)
 8009448:	80000015 	stw	zero,0(r16)
 800944c:	800d0040 	call	800d004 <close>
 8009450:	00ffffc4 	movi	r3,-1
 8009454:	10c00526 	beq	r2,r3,800946c <_close_r+0x44>
 8009458:	dfc00217 	ldw	ra,8(sp)
 800945c:	dc400117 	ldw	r17,4(sp)
 8009460:	dc000017 	ldw	r16,0(sp)
 8009464:	dec00304 	addi	sp,sp,12
 8009468:	f800283a 	ret
 800946c:	80c00017 	ldw	r3,0(r16)
 8009470:	183ff926 	beq	r3,zero,8009458 <__alt_data_end+0xf8009458>
 8009474:	88c00015 	stw	r3,0(r17)
 8009478:	003ff706 	br	8009458 <__alt_data_end+0xf8009458>

0800947c <_calloc_r>:
 800947c:	298b383a 	mul	r5,r5,r6
 8009480:	defffe04 	addi	sp,sp,-8
 8009484:	dfc00115 	stw	ra,4(sp)
 8009488:	dc000015 	stw	r16,0(sp)
 800948c:	80058840 	call	8005884 <_malloc_r>
 8009490:	10002926 	beq	r2,zero,8009538 <_calloc_r+0xbc>
 8009494:	11bfff17 	ldw	r6,-4(r2)
 8009498:	1021883a 	mov	r16,r2
 800949c:	00bfff04 	movi	r2,-4
 80094a0:	308c703a 	and	r6,r6,r2
 80094a4:	00c00904 	movi	r3,36
 80094a8:	308d883a 	add	r6,r6,r2
 80094ac:	19801636 	bltu	r3,r6,8009508 <_calloc_r+0x8c>
 80094b0:	008004c4 	movi	r2,19
 80094b4:	11800b2e 	bgeu	r2,r6,80094e4 <_calloc_r+0x68>
 80094b8:	80000015 	stw	zero,0(r16)
 80094bc:	80000115 	stw	zero,4(r16)
 80094c0:	008006c4 	movi	r2,27
 80094c4:	11801a2e 	bgeu	r2,r6,8009530 <_calloc_r+0xb4>
 80094c8:	80000215 	stw	zero,8(r16)
 80094cc:	80000315 	stw	zero,12(r16)
 80094d0:	30c0151e 	bne	r6,r3,8009528 <_calloc_r+0xac>
 80094d4:	80000415 	stw	zero,16(r16)
 80094d8:	80800604 	addi	r2,r16,24
 80094dc:	80000515 	stw	zero,20(r16)
 80094e0:	00000106 	br	80094e8 <_calloc_r+0x6c>
 80094e4:	8005883a 	mov	r2,r16
 80094e8:	10000015 	stw	zero,0(r2)
 80094ec:	10000115 	stw	zero,4(r2)
 80094f0:	10000215 	stw	zero,8(r2)
 80094f4:	8005883a 	mov	r2,r16
 80094f8:	dfc00117 	ldw	ra,4(sp)
 80094fc:	dc000017 	ldw	r16,0(sp)
 8009500:	dec00204 	addi	sp,sp,8
 8009504:	f800283a 	ret
 8009508:	000b883a 	mov	r5,zero
 800950c:	8009883a 	mov	r4,r16
 8009510:	80064180 	call	8006418 <memset>
 8009514:	8005883a 	mov	r2,r16
 8009518:	dfc00117 	ldw	ra,4(sp)
 800951c:	dc000017 	ldw	r16,0(sp)
 8009520:	dec00204 	addi	sp,sp,8
 8009524:	f800283a 	ret
 8009528:	80800404 	addi	r2,r16,16
 800952c:	003fee06 	br	80094e8 <__alt_data_end+0xf80094e8>
 8009530:	80800204 	addi	r2,r16,8
 8009534:	003fec06 	br	80094e8 <__alt_data_end+0xf80094e8>
 8009538:	0005883a 	mov	r2,zero
 800953c:	003fee06 	br	80094f8 <__alt_data_end+0xf80094f8>

08009540 <_fclose_r>:
 8009540:	28003926 	beq	r5,zero,8009628 <_fclose_r+0xe8>
 8009544:	defffc04 	addi	sp,sp,-16
 8009548:	dc400115 	stw	r17,4(sp)
 800954c:	dc000015 	stw	r16,0(sp)
 8009550:	dfc00315 	stw	ra,12(sp)
 8009554:	dc800215 	stw	r18,8(sp)
 8009558:	2023883a 	mov	r17,r4
 800955c:	2821883a 	mov	r16,r5
 8009560:	20000226 	beq	r4,zero,800956c <_fclose_r+0x2c>
 8009564:	20800e17 	ldw	r2,56(r4)
 8009568:	10002726 	beq	r2,zero,8009608 <_fclose_r+0xc8>
 800956c:	8080030f 	ldh	r2,12(r16)
 8009570:	1000071e 	bne	r2,zero,8009590 <_fclose_r+0x50>
 8009574:	0005883a 	mov	r2,zero
 8009578:	dfc00317 	ldw	ra,12(sp)
 800957c:	dc800217 	ldw	r18,8(sp)
 8009580:	dc400117 	ldw	r17,4(sp)
 8009584:	dc000017 	ldw	r16,0(sp)
 8009588:	dec00404 	addi	sp,sp,16
 800958c:	f800283a 	ret
 8009590:	800b883a 	mov	r5,r16
 8009594:	8809883a 	mov	r4,r17
 8009598:	800452c0 	call	800452c <__sflush_r>
 800959c:	1025883a 	mov	r18,r2
 80095a0:	80800b17 	ldw	r2,44(r16)
 80095a4:	10000426 	beq	r2,zero,80095b8 <_fclose_r+0x78>
 80095a8:	81400717 	ldw	r5,28(r16)
 80095ac:	8809883a 	mov	r4,r17
 80095b0:	103ee83a 	callr	r2
 80095b4:	10001616 	blt	r2,zero,8009610 <_fclose_r+0xd0>
 80095b8:	8080030b 	ldhu	r2,12(r16)
 80095bc:	1080200c 	andi	r2,r2,128
 80095c0:	1000151e 	bne	r2,zero,8009618 <_fclose_r+0xd8>
 80095c4:	81400c17 	ldw	r5,48(r16)
 80095c8:	28000526 	beq	r5,zero,80095e0 <_fclose_r+0xa0>
 80095cc:	80801004 	addi	r2,r16,64
 80095d0:	28800226 	beq	r5,r2,80095dc <_fclose_r+0x9c>
 80095d4:	8809883a 	mov	r4,r17
 80095d8:	8004c980 	call	8004c98 <_free_r>
 80095dc:	80000c15 	stw	zero,48(r16)
 80095e0:	81401117 	ldw	r5,68(r16)
 80095e4:	28000326 	beq	r5,zero,80095f4 <_fclose_r+0xb4>
 80095e8:	8809883a 	mov	r4,r17
 80095ec:	8004c980 	call	8004c98 <_free_r>
 80095f0:	80001115 	stw	zero,68(r16)
 80095f4:	8004b340 	call	8004b34 <__sfp_lock_acquire>
 80095f8:	8000030d 	sth	zero,12(r16)
 80095fc:	8004b380 	call	8004b38 <__sfp_lock_release>
 8009600:	9005883a 	mov	r2,r18
 8009604:	003fdc06 	br	8009578 <__alt_data_end+0xf8009578>
 8009608:	8004b240 	call	8004b24 <__sinit>
 800960c:	003fd706 	br	800956c <__alt_data_end+0xf800956c>
 8009610:	04bfffc4 	movi	r18,-1
 8009614:	003fe806 	br	80095b8 <__alt_data_end+0xf80095b8>
 8009618:	81400417 	ldw	r5,16(r16)
 800961c:	8809883a 	mov	r4,r17
 8009620:	8004c980 	call	8004c98 <_free_r>
 8009624:	003fe706 	br	80095c4 <__alt_data_end+0xf80095c4>
 8009628:	0005883a 	mov	r2,zero
 800962c:	f800283a 	ret

08009630 <fclose>:
 8009630:	008200b4 	movhi	r2,2050
 8009634:	10ab9f04 	addi	r2,r2,-20868
 8009638:	200b883a 	mov	r5,r4
 800963c:	11000017 	ldw	r4,0(r2)
 8009640:	80095401 	jmpi	8009540 <_fclose_r>

08009644 <__fputwc>:
 8009644:	defff804 	addi	sp,sp,-32
 8009648:	dcc00415 	stw	r19,16(sp)
 800964c:	dc800315 	stw	r18,12(sp)
 8009650:	dc000115 	stw	r16,4(sp)
 8009654:	dfc00715 	stw	ra,28(sp)
 8009658:	dd400615 	stw	r21,24(sp)
 800965c:	dd000515 	stw	r20,20(sp)
 8009660:	dc400215 	stw	r17,8(sp)
 8009664:	2027883a 	mov	r19,r4
 8009668:	2825883a 	mov	r18,r5
 800966c:	3021883a 	mov	r16,r6
 8009670:	80056740 	call	8005674 <__locale_mb_cur_max>
 8009674:	00c00044 	movi	r3,1
 8009678:	10c03e26 	beq	r2,r3,8009774 <__fputwc+0x130>
 800967c:	81c01704 	addi	r7,r16,92
 8009680:	900d883a 	mov	r6,r18
 8009684:	d80b883a 	mov	r5,sp
 8009688:	9809883a 	mov	r4,r19
 800968c:	8009b140 	call	8009b14 <_wcrtomb_r>
 8009690:	1029883a 	mov	r20,r2
 8009694:	00bfffc4 	movi	r2,-1
 8009698:	a0802026 	beq	r20,r2,800971c <__fputwc+0xd8>
 800969c:	d9400003 	ldbu	r5,0(sp)
 80096a0:	a0001c26 	beq	r20,zero,8009714 <__fputwc+0xd0>
 80096a4:	0023883a 	mov	r17,zero
 80096a8:	05400284 	movi	r21,10
 80096ac:	00000906 	br	80096d4 <__fputwc+0x90>
 80096b0:	80800017 	ldw	r2,0(r16)
 80096b4:	11400005 	stb	r5,0(r2)
 80096b8:	80c00017 	ldw	r3,0(r16)
 80096bc:	18c00044 	addi	r3,r3,1
 80096c0:	80c00015 	stw	r3,0(r16)
 80096c4:	8c400044 	addi	r17,r17,1
 80096c8:	dc45883a 	add	r2,sp,r17
 80096cc:	8d00112e 	bgeu	r17,r20,8009714 <__fputwc+0xd0>
 80096d0:	11400003 	ldbu	r5,0(r2)
 80096d4:	80c00217 	ldw	r3,8(r16)
 80096d8:	18ffffc4 	addi	r3,r3,-1
 80096dc:	80c00215 	stw	r3,8(r16)
 80096e0:	183ff30e 	bge	r3,zero,80096b0 <__alt_data_end+0xf80096b0>
 80096e4:	80800617 	ldw	r2,24(r16)
 80096e8:	18801916 	blt	r3,r2,8009750 <__fputwc+0x10c>
 80096ec:	80800017 	ldw	r2,0(r16)
 80096f0:	11400005 	stb	r5,0(r2)
 80096f4:	80800017 	ldw	r2,0(r16)
 80096f8:	10c00003 	ldbu	r3,0(r2)
 80096fc:	10800044 	addi	r2,r2,1
 8009700:	1d402326 	beq	r3,r21,8009790 <__fputwc+0x14c>
 8009704:	80800015 	stw	r2,0(r16)
 8009708:	8c400044 	addi	r17,r17,1
 800970c:	dc45883a 	add	r2,sp,r17
 8009710:	8d3fef36 	bltu	r17,r20,80096d0 <__alt_data_end+0xf80096d0>
 8009714:	9005883a 	mov	r2,r18
 8009718:	00000406 	br	800972c <__fputwc+0xe8>
 800971c:	80c0030b 	ldhu	r3,12(r16)
 8009720:	a005883a 	mov	r2,r20
 8009724:	18c01014 	ori	r3,r3,64
 8009728:	80c0030d 	sth	r3,12(r16)
 800972c:	dfc00717 	ldw	ra,28(sp)
 8009730:	dd400617 	ldw	r21,24(sp)
 8009734:	dd000517 	ldw	r20,20(sp)
 8009738:	dcc00417 	ldw	r19,16(sp)
 800973c:	dc800317 	ldw	r18,12(sp)
 8009740:	dc400217 	ldw	r17,8(sp)
 8009744:	dc000117 	ldw	r16,4(sp)
 8009748:	dec00804 	addi	sp,sp,32
 800974c:	f800283a 	ret
 8009750:	800d883a 	mov	r6,r16
 8009754:	29403fcc 	andi	r5,r5,255
 8009758:	9809883a 	mov	r4,r19
 800975c:	80099bc0 	call	80099bc <__swbuf_r>
 8009760:	10bfffe0 	cmpeqi	r2,r2,-1
 8009764:	10803fcc 	andi	r2,r2,255
 8009768:	103fd626 	beq	r2,zero,80096c4 <__alt_data_end+0xf80096c4>
 800976c:	00bfffc4 	movi	r2,-1
 8009770:	003fee06 	br	800972c <__alt_data_end+0xf800972c>
 8009774:	90ffffc4 	addi	r3,r18,-1
 8009778:	01003f84 	movi	r4,254
 800977c:	20ffbf36 	bltu	r4,r3,800967c <__alt_data_end+0xf800967c>
 8009780:	900b883a 	mov	r5,r18
 8009784:	dc800005 	stb	r18,0(sp)
 8009788:	1029883a 	mov	r20,r2
 800978c:	003fc506 	br	80096a4 <__alt_data_end+0xf80096a4>
 8009790:	800d883a 	mov	r6,r16
 8009794:	a80b883a 	mov	r5,r21
 8009798:	9809883a 	mov	r4,r19
 800979c:	80099bc0 	call	80099bc <__swbuf_r>
 80097a0:	10bfffe0 	cmpeqi	r2,r2,-1
 80097a4:	003fef06 	br	8009764 <__alt_data_end+0xf8009764>

080097a8 <_fputwc_r>:
 80097a8:	3080030b 	ldhu	r2,12(r6)
 80097ac:	10c8000c 	andi	r3,r2,8192
 80097b0:	1800051e 	bne	r3,zero,80097c8 <_fputwc_r+0x20>
 80097b4:	30c01917 	ldw	r3,100(r6)
 80097b8:	10880014 	ori	r2,r2,8192
 80097bc:	3080030d 	sth	r2,12(r6)
 80097c0:	18880014 	ori	r2,r3,8192
 80097c4:	30801915 	stw	r2,100(r6)
 80097c8:	80096441 	jmpi	8009644 <__fputwc>

080097cc <fputwc>:
 80097cc:	008200b4 	movhi	r2,2050
 80097d0:	defffc04 	addi	sp,sp,-16
 80097d4:	10ab9f04 	addi	r2,r2,-20868
 80097d8:	dc000115 	stw	r16,4(sp)
 80097dc:	14000017 	ldw	r16,0(r2)
 80097e0:	dc400215 	stw	r17,8(sp)
 80097e4:	dfc00315 	stw	ra,12(sp)
 80097e8:	2023883a 	mov	r17,r4
 80097ec:	80000226 	beq	r16,zero,80097f8 <fputwc+0x2c>
 80097f0:	80800e17 	ldw	r2,56(r16)
 80097f4:	10001026 	beq	r2,zero,8009838 <fputwc+0x6c>
 80097f8:	2880030b 	ldhu	r2,12(r5)
 80097fc:	10c8000c 	andi	r3,r2,8192
 8009800:	1800051e 	bne	r3,zero,8009818 <fputwc+0x4c>
 8009804:	28c01917 	ldw	r3,100(r5)
 8009808:	10880014 	ori	r2,r2,8192
 800980c:	2880030d 	sth	r2,12(r5)
 8009810:	18880014 	ori	r2,r3,8192
 8009814:	28801915 	stw	r2,100(r5)
 8009818:	280d883a 	mov	r6,r5
 800981c:	8009883a 	mov	r4,r16
 8009820:	880b883a 	mov	r5,r17
 8009824:	dfc00317 	ldw	ra,12(sp)
 8009828:	dc400217 	ldw	r17,8(sp)
 800982c:	dc000117 	ldw	r16,4(sp)
 8009830:	dec00404 	addi	sp,sp,16
 8009834:	80096441 	jmpi	8009644 <__fputwc>
 8009838:	8009883a 	mov	r4,r16
 800983c:	d9400015 	stw	r5,0(sp)
 8009840:	8004b240 	call	8004b24 <__sinit>
 8009844:	d9400017 	ldw	r5,0(sp)
 8009848:	003feb06 	br	80097f8 <__alt_data_end+0xf80097f8>

0800984c <_fstat_r>:
 800984c:	defffd04 	addi	sp,sp,-12
 8009850:	2805883a 	mov	r2,r5
 8009854:	dc000015 	stw	r16,0(sp)
 8009858:	040200b4 	movhi	r16,2050
 800985c:	dc400115 	stw	r17,4(sp)
 8009860:	8432bd04 	addi	r16,r16,-13580
 8009864:	2023883a 	mov	r17,r4
 8009868:	300b883a 	mov	r5,r6
 800986c:	1009883a 	mov	r4,r2
 8009870:	dfc00215 	stw	ra,8(sp)
 8009874:	80000015 	stw	zero,0(r16)
 8009878:	800d13c0 	call	800d13c <fstat>
 800987c:	00ffffc4 	movi	r3,-1
 8009880:	10c00526 	beq	r2,r3,8009898 <_fstat_r+0x4c>
 8009884:	dfc00217 	ldw	ra,8(sp)
 8009888:	dc400117 	ldw	r17,4(sp)
 800988c:	dc000017 	ldw	r16,0(sp)
 8009890:	dec00304 	addi	sp,sp,12
 8009894:	f800283a 	ret
 8009898:	80c00017 	ldw	r3,0(r16)
 800989c:	183ff926 	beq	r3,zero,8009884 <__alt_data_end+0xf8009884>
 80098a0:	88c00015 	stw	r3,0(r17)
 80098a4:	003ff706 	br	8009884 <__alt_data_end+0xf8009884>

080098a8 <_isatty_r>:
 80098a8:	defffd04 	addi	sp,sp,-12
 80098ac:	dc000015 	stw	r16,0(sp)
 80098b0:	040200b4 	movhi	r16,2050
 80098b4:	dc400115 	stw	r17,4(sp)
 80098b8:	8432bd04 	addi	r16,r16,-13580
 80098bc:	2023883a 	mov	r17,r4
 80098c0:	2809883a 	mov	r4,r5
 80098c4:	dfc00215 	stw	ra,8(sp)
 80098c8:	80000015 	stw	zero,0(r16)
 80098cc:	800d4c80 	call	800d4c8 <isatty>
 80098d0:	00ffffc4 	movi	r3,-1
 80098d4:	10c00526 	beq	r2,r3,80098ec <_isatty_r+0x44>
 80098d8:	dfc00217 	ldw	ra,8(sp)
 80098dc:	dc400117 	ldw	r17,4(sp)
 80098e0:	dc000017 	ldw	r16,0(sp)
 80098e4:	dec00304 	addi	sp,sp,12
 80098e8:	f800283a 	ret
 80098ec:	80c00017 	ldw	r3,0(r16)
 80098f0:	183ff926 	beq	r3,zero,80098d8 <__alt_data_end+0xf80098d8>
 80098f4:	88c00015 	stw	r3,0(r17)
 80098f8:	003ff706 	br	80098d8 <__alt_data_end+0xf80098d8>

080098fc <_lseek_r>:
 80098fc:	defffd04 	addi	sp,sp,-12
 8009900:	2805883a 	mov	r2,r5
 8009904:	dc000015 	stw	r16,0(sp)
 8009908:	040200b4 	movhi	r16,2050
 800990c:	dc400115 	stw	r17,4(sp)
 8009910:	300b883a 	mov	r5,r6
 8009914:	8432bd04 	addi	r16,r16,-13580
 8009918:	2023883a 	mov	r17,r4
 800991c:	380d883a 	mov	r6,r7
 8009920:	1009883a 	mov	r4,r2
 8009924:	dfc00215 	stw	ra,8(sp)
 8009928:	80000015 	stw	zero,0(r16)
 800992c:	800d6940 	call	800d694 <lseek>
 8009930:	00ffffc4 	movi	r3,-1
 8009934:	10c00526 	beq	r2,r3,800994c <_lseek_r+0x50>
 8009938:	dfc00217 	ldw	ra,8(sp)
 800993c:	dc400117 	ldw	r17,4(sp)
 8009940:	dc000017 	ldw	r16,0(sp)
 8009944:	dec00304 	addi	sp,sp,12
 8009948:	f800283a 	ret
 800994c:	80c00017 	ldw	r3,0(r16)
 8009950:	183ff926 	beq	r3,zero,8009938 <__alt_data_end+0xf8009938>
 8009954:	88c00015 	stw	r3,0(r17)
 8009958:	003ff706 	br	8009938 <__alt_data_end+0xf8009938>

0800995c <_read_r>:
 800995c:	defffd04 	addi	sp,sp,-12
 8009960:	2805883a 	mov	r2,r5
 8009964:	dc000015 	stw	r16,0(sp)
 8009968:	040200b4 	movhi	r16,2050
 800996c:	dc400115 	stw	r17,4(sp)
 8009970:	300b883a 	mov	r5,r6
 8009974:	8432bd04 	addi	r16,r16,-13580
 8009978:	2023883a 	mov	r17,r4
 800997c:	380d883a 	mov	r6,r7
 8009980:	1009883a 	mov	r4,r2
 8009984:	dfc00215 	stw	ra,8(sp)
 8009988:	80000015 	stw	zero,0(r16)
 800998c:	800d8600 	call	800d860 <read>
 8009990:	00ffffc4 	movi	r3,-1
 8009994:	10c00526 	beq	r2,r3,80099ac <_read_r+0x50>
 8009998:	dfc00217 	ldw	ra,8(sp)
 800999c:	dc400117 	ldw	r17,4(sp)
 80099a0:	dc000017 	ldw	r16,0(sp)
 80099a4:	dec00304 	addi	sp,sp,12
 80099a8:	f800283a 	ret
 80099ac:	80c00017 	ldw	r3,0(r16)
 80099b0:	183ff926 	beq	r3,zero,8009998 <__alt_data_end+0xf8009998>
 80099b4:	88c00015 	stw	r3,0(r17)
 80099b8:	003ff706 	br	8009998 <__alt_data_end+0xf8009998>

080099bc <__swbuf_r>:
 80099bc:	defffb04 	addi	sp,sp,-20
 80099c0:	dcc00315 	stw	r19,12(sp)
 80099c4:	dc800215 	stw	r18,8(sp)
 80099c8:	dc000015 	stw	r16,0(sp)
 80099cc:	dfc00415 	stw	ra,16(sp)
 80099d0:	dc400115 	stw	r17,4(sp)
 80099d4:	2025883a 	mov	r18,r4
 80099d8:	2827883a 	mov	r19,r5
 80099dc:	3021883a 	mov	r16,r6
 80099e0:	20000226 	beq	r4,zero,80099ec <__swbuf_r+0x30>
 80099e4:	20800e17 	ldw	r2,56(r4)
 80099e8:	10004226 	beq	r2,zero,8009af4 <__swbuf_r+0x138>
 80099ec:	80800617 	ldw	r2,24(r16)
 80099f0:	8100030b 	ldhu	r4,12(r16)
 80099f4:	80800215 	stw	r2,8(r16)
 80099f8:	2080020c 	andi	r2,r4,8
 80099fc:	10003626 	beq	r2,zero,8009ad8 <__swbuf_r+0x11c>
 8009a00:	80c00417 	ldw	r3,16(r16)
 8009a04:	18003426 	beq	r3,zero,8009ad8 <__swbuf_r+0x11c>
 8009a08:	2088000c 	andi	r2,r4,8192
 8009a0c:	9c403fcc 	andi	r17,r19,255
 8009a10:	10001a26 	beq	r2,zero,8009a7c <__swbuf_r+0xc0>
 8009a14:	80800017 	ldw	r2,0(r16)
 8009a18:	81000517 	ldw	r4,20(r16)
 8009a1c:	10c7c83a 	sub	r3,r2,r3
 8009a20:	1900200e 	bge	r3,r4,8009aa4 <__swbuf_r+0xe8>
 8009a24:	18c00044 	addi	r3,r3,1
 8009a28:	81000217 	ldw	r4,8(r16)
 8009a2c:	11400044 	addi	r5,r2,1
 8009a30:	81400015 	stw	r5,0(r16)
 8009a34:	213fffc4 	addi	r4,r4,-1
 8009a38:	81000215 	stw	r4,8(r16)
 8009a3c:	14c00005 	stb	r19,0(r2)
 8009a40:	80800517 	ldw	r2,20(r16)
 8009a44:	10c01e26 	beq	r2,r3,8009ac0 <__swbuf_r+0x104>
 8009a48:	8080030b 	ldhu	r2,12(r16)
 8009a4c:	1080004c 	andi	r2,r2,1
 8009a50:	10000226 	beq	r2,zero,8009a5c <__swbuf_r+0xa0>
 8009a54:	00800284 	movi	r2,10
 8009a58:	88801926 	beq	r17,r2,8009ac0 <__swbuf_r+0x104>
 8009a5c:	8805883a 	mov	r2,r17
 8009a60:	dfc00417 	ldw	ra,16(sp)
 8009a64:	dcc00317 	ldw	r19,12(sp)
 8009a68:	dc800217 	ldw	r18,8(sp)
 8009a6c:	dc400117 	ldw	r17,4(sp)
 8009a70:	dc000017 	ldw	r16,0(sp)
 8009a74:	dec00504 	addi	sp,sp,20
 8009a78:	f800283a 	ret
 8009a7c:	81401917 	ldw	r5,100(r16)
 8009a80:	00b7ffc4 	movi	r2,-8193
 8009a84:	21080014 	ori	r4,r4,8192
 8009a88:	2884703a 	and	r2,r5,r2
 8009a8c:	80801915 	stw	r2,100(r16)
 8009a90:	80800017 	ldw	r2,0(r16)
 8009a94:	8100030d 	sth	r4,12(r16)
 8009a98:	81000517 	ldw	r4,20(r16)
 8009a9c:	10c7c83a 	sub	r3,r2,r3
 8009aa0:	193fe016 	blt	r3,r4,8009a24 <__alt_data_end+0xf8009a24>
 8009aa4:	800b883a 	mov	r5,r16
 8009aa8:	9009883a 	mov	r4,r18
 8009aac:	80047480 	call	8004748 <_fflush_r>
 8009ab0:	1000071e 	bne	r2,zero,8009ad0 <__swbuf_r+0x114>
 8009ab4:	80800017 	ldw	r2,0(r16)
 8009ab8:	00c00044 	movi	r3,1
 8009abc:	003fda06 	br	8009a28 <__alt_data_end+0xf8009a28>
 8009ac0:	800b883a 	mov	r5,r16
 8009ac4:	9009883a 	mov	r4,r18
 8009ac8:	80047480 	call	8004748 <_fflush_r>
 8009acc:	103fe326 	beq	r2,zero,8009a5c <__alt_data_end+0xf8009a5c>
 8009ad0:	00bfffc4 	movi	r2,-1
 8009ad4:	003fe206 	br	8009a60 <__alt_data_end+0xf8009a60>
 8009ad8:	800b883a 	mov	r5,r16
 8009adc:	9009883a 	mov	r4,r18
 8009ae0:	8002b500 	call	8002b50 <__swsetup_r>
 8009ae4:	103ffa1e 	bne	r2,zero,8009ad0 <__alt_data_end+0xf8009ad0>
 8009ae8:	8100030b 	ldhu	r4,12(r16)
 8009aec:	80c00417 	ldw	r3,16(r16)
 8009af0:	003fc506 	br	8009a08 <__alt_data_end+0xf8009a08>
 8009af4:	8004b240 	call	8004b24 <__sinit>
 8009af8:	003fbc06 	br	80099ec <__alt_data_end+0xf80099ec>

08009afc <__swbuf>:
 8009afc:	008200b4 	movhi	r2,2050
 8009b00:	10ab9f04 	addi	r2,r2,-20868
 8009b04:	280d883a 	mov	r6,r5
 8009b08:	200b883a 	mov	r5,r4
 8009b0c:	11000017 	ldw	r4,0(r2)
 8009b10:	80099bc1 	jmpi	80099bc <__swbuf_r>

08009b14 <_wcrtomb_r>:
 8009b14:	defff604 	addi	sp,sp,-40
 8009b18:	008200b4 	movhi	r2,2050
 8009b1c:	dc800815 	stw	r18,32(sp)
 8009b20:	dc400715 	stw	r17,28(sp)
 8009b24:	dc000615 	stw	r16,24(sp)
 8009b28:	10aba304 	addi	r2,r2,-20852
 8009b2c:	dfc00915 	stw	ra,36(sp)
 8009b30:	2021883a 	mov	r16,r4
 8009b34:	3823883a 	mov	r17,r7
 8009b38:	14800017 	ldw	r18,0(r2)
 8009b3c:	28001426 	beq	r5,zero,8009b90 <_wcrtomb_r+0x7c>
 8009b40:	d9400415 	stw	r5,16(sp)
 8009b44:	d9800515 	stw	r6,20(sp)
 8009b48:	80056680 	call	8005668 <__locale_charset>
 8009b4c:	d9800517 	ldw	r6,20(sp)
 8009b50:	d9400417 	ldw	r5,16(sp)
 8009b54:	100f883a 	mov	r7,r2
 8009b58:	dc400015 	stw	r17,0(sp)
 8009b5c:	8009883a 	mov	r4,r16
 8009b60:	903ee83a 	callr	r18
 8009b64:	00ffffc4 	movi	r3,-1
 8009b68:	10c0031e 	bne	r2,r3,8009b78 <_wcrtomb_r+0x64>
 8009b6c:	88000015 	stw	zero,0(r17)
 8009b70:	00c02284 	movi	r3,138
 8009b74:	80c00015 	stw	r3,0(r16)
 8009b78:	dfc00917 	ldw	ra,36(sp)
 8009b7c:	dc800817 	ldw	r18,32(sp)
 8009b80:	dc400717 	ldw	r17,28(sp)
 8009b84:	dc000617 	ldw	r16,24(sp)
 8009b88:	dec00a04 	addi	sp,sp,40
 8009b8c:	f800283a 	ret
 8009b90:	80056680 	call	8005668 <__locale_charset>
 8009b94:	100f883a 	mov	r7,r2
 8009b98:	dc400015 	stw	r17,0(sp)
 8009b9c:	000d883a 	mov	r6,zero
 8009ba0:	d9400104 	addi	r5,sp,4
 8009ba4:	8009883a 	mov	r4,r16
 8009ba8:	903ee83a 	callr	r18
 8009bac:	003fed06 	br	8009b64 <__alt_data_end+0xf8009b64>

08009bb0 <wcrtomb>:
 8009bb0:	defff604 	addi	sp,sp,-40
 8009bb4:	008200b4 	movhi	r2,2050
 8009bb8:	dc800615 	stw	r18,24(sp)
 8009bbc:	dc400515 	stw	r17,20(sp)
 8009bc0:	10ab9f04 	addi	r2,r2,-20868
 8009bc4:	dfc00915 	stw	ra,36(sp)
 8009bc8:	dd000815 	stw	r20,32(sp)
 8009bcc:	dcc00715 	stw	r19,28(sp)
 8009bd0:	dc000415 	stw	r16,16(sp)
 8009bd4:	3025883a 	mov	r18,r6
 8009bd8:	14400017 	ldw	r17,0(r2)
 8009bdc:	20001926 	beq	r4,zero,8009c44 <wcrtomb+0x94>
 8009be0:	008200b4 	movhi	r2,2050
 8009be4:	10aba304 	addi	r2,r2,-20852
 8009be8:	15000017 	ldw	r20,0(r2)
 8009bec:	2021883a 	mov	r16,r4
 8009bf0:	2827883a 	mov	r19,r5
 8009bf4:	80056680 	call	8005668 <__locale_charset>
 8009bf8:	100f883a 	mov	r7,r2
 8009bfc:	dc800015 	stw	r18,0(sp)
 8009c00:	980d883a 	mov	r6,r19
 8009c04:	800b883a 	mov	r5,r16
 8009c08:	8809883a 	mov	r4,r17
 8009c0c:	a03ee83a 	callr	r20
 8009c10:	00ffffc4 	movi	r3,-1
 8009c14:	10c0031e 	bne	r2,r3,8009c24 <wcrtomb+0x74>
 8009c18:	90000015 	stw	zero,0(r18)
 8009c1c:	00c02284 	movi	r3,138
 8009c20:	88c00015 	stw	r3,0(r17)
 8009c24:	dfc00917 	ldw	ra,36(sp)
 8009c28:	dd000817 	ldw	r20,32(sp)
 8009c2c:	dcc00717 	ldw	r19,28(sp)
 8009c30:	dc800617 	ldw	r18,24(sp)
 8009c34:	dc400517 	ldw	r17,20(sp)
 8009c38:	dc000417 	ldw	r16,16(sp)
 8009c3c:	dec00a04 	addi	sp,sp,40
 8009c40:	f800283a 	ret
 8009c44:	008200b4 	movhi	r2,2050
 8009c48:	10aba304 	addi	r2,r2,-20852
 8009c4c:	14000017 	ldw	r16,0(r2)
 8009c50:	80056680 	call	8005668 <__locale_charset>
 8009c54:	100f883a 	mov	r7,r2
 8009c58:	dc800015 	stw	r18,0(sp)
 8009c5c:	000d883a 	mov	r6,zero
 8009c60:	d9400104 	addi	r5,sp,4
 8009c64:	8809883a 	mov	r4,r17
 8009c68:	803ee83a 	callr	r16
 8009c6c:	003fe806 	br	8009c10 <__alt_data_end+0xf8009c10>

08009c70 <__ascii_wctomb>:
 8009c70:	28000526 	beq	r5,zero,8009c88 <__ascii_wctomb+0x18>
 8009c74:	00803fc4 	movi	r2,255
 8009c78:	11800536 	bltu	r2,r6,8009c90 <__ascii_wctomb+0x20>
 8009c7c:	29800005 	stb	r6,0(r5)
 8009c80:	00800044 	movi	r2,1
 8009c84:	f800283a 	ret
 8009c88:	0005883a 	mov	r2,zero
 8009c8c:	f800283a 	ret
 8009c90:	00802284 	movi	r2,138
 8009c94:	20800015 	stw	r2,0(r4)
 8009c98:	00bfffc4 	movi	r2,-1
 8009c9c:	f800283a 	ret

08009ca0 <_wctomb_r>:
 8009ca0:	008200b4 	movhi	r2,2050
 8009ca4:	defff904 	addi	sp,sp,-28
 8009ca8:	10aba304 	addi	r2,r2,-20852
 8009cac:	dfc00615 	stw	ra,24(sp)
 8009cb0:	dc400515 	stw	r17,20(sp)
 8009cb4:	dc000415 	stw	r16,16(sp)
 8009cb8:	3823883a 	mov	r17,r7
 8009cbc:	14000017 	ldw	r16,0(r2)
 8009cc0:	d9000115 	stw	r4,4(sp)
 8009cc4:	d9400215 	stw	r5,8(sp)
 8009cc8:	d9800315 	stw	r6,12(sp)
 8009ccc:	80056680 	call	8005668 <__locale_charset>
 8009cd0:	d9800317 	ldw	r6,12(sp)
 8009cd4:	d9400217 	ldw	r5,8(sp)
 8009cd8:	d9000117 	ldw	r4,4(sp)
 8009cdc:	100f883a 	mov	r7,r2
 8009ce0:	dc400015 	stw	r17,0(sp)
 8009ce4:	803ee83a 	callr	r16
 8009ce8:	dfc00617 	ldw	ra,24(sp)
 8009cec:	dc400517 	ldw	r17,20(sp)
 8009cf0:	dc000417 	ldw	r16,16(sp)
 8009cf4:	dec00704 	addi	sp,sp,28
 8009cf8:	f800283a 	ret

08009cfc <__udivdi3>:
 8009cfc:	defff504 	addi	sp,sp,-44
 8009d00:	dcc00415 	stw	r19,16(sp)
 8009d04:	dc000115 	stw	r16,4(sp)
 8009d08:	dfc00a15 	stw	ra,40(sp)
 8009d0c:	df000915 	stw	fp,36(sp)
 8009d10:	ddc00815 	stw	r23,32(sp)
 8009d14:	dd800715 	stw	r22,28(sp)
 8009d18:	dd400615 	stw	r21,24(sp)
 8009d1c:	dd000515 	stw	r20,20(sp)
 8009d20:	dc800315 	stw	r18,12(sp)
 8009d24:	dc400215 	stw	r17,8(sp)
 8009d28:	2027883a 	mov	r19,r4
 8009d2c:	2821883a 	mov	r16,r5
 8009d30:	3800411e 	bne	r7,zero,8009e38 <__udivdi3+0x13c>
 8009d34:	3023883a 	mov	r17,r6
 8009d38:	2025883a 	mov	r18,r4
 8009d3c:	2980522e 	bgeu	r5,r6,8009e88 <__udivdi3+0x18c>
 8009d40:	00bfffd4 	movui	r2,65535
 8009d44:	282d883a 	mov	r22,r5
 8009d48:	1180a836 	bltu	r2,r6,8009fec <__udivdi3+0x2f0>
 8009d4c:	00803fc4 	movi	r2,255
 8009d50:	1185803a 	cmpltu	r2,r2,r6
 8009d54:	100490fa 	slli	r2,r2,3
 8009d58:	3086d83a 	srl	r3,r6,r2
 8009d5c:	010200b4 	movhi	r4,2050
 8009d60:	21244c04 	addi	r4,r4,-28368
 8009d64:	20c7883a 	add	r3,r4,r3
 8009d68:	18c00003 	ldbu	r3,0(r3)
 8009d6c:	1885883a 	add	r2,r3,r2
 8009d70:	00c00804 	movi	r3,32
 8009d74:	1887c83a 	sub	r3,r3,r2
 8009d78:	18000526 	beq	r3,zero,8009d90 <__udivdi3+0x94>
 8009d7c:	80e0983a 	sll	r16,r16,r3
 8009d80:	9884d83a 	srl	r2,r19,r2
 8009d84:	30e2983a 	sll	r17,r6,r3
 8009d88:	98e4983a 	sll	r18,r19,r3
 8009d8c:	142cb03a 	or	r22,r2,r16
 8009d90:	882ad43a 	srli	r21,r17,16
 8009d94:	b009883a 	mov	r4,r22
 8009d98:	8d3fffcc 	andi	r20,r17,65535
 8009d9c:	a80b883a 	mov	r5,r21
 8009da0:	800a9080 	call	800a908 <__umodsi3>
 8009da4:	b009883a 	mov	r4,r22
 8009da8:	a80b883a 	mov	r5,r21
 8009dac:	1027883a 	mov	r19,r2
 8009db0:	800a8a40 	call	800a8a4 <__udivsi3>
 8009db4:	102d883a 	mov	r22,r2
 8009db8:	9826943a 	slli	r19,r19,16
 8009dbc:	9004d43a 	srli	r2,r18,16
 8009dc0:	a5a1383a 	mul	r16,r20,r22
 8009dc4:	14c4b03a 	or	r2,r2,r19
 8009dc8:	1400052e 	bgeu	r2,r16,8009de0 <__udivdi3+0xe4>
 8009dcc:	1445883a 	add	r2,r2,r17
 8009dd0:	b0ffffc4 	addi	r3,r22,-1
 8009dd4:	14400136 	bltu	r2,r17,8009ddc <__udivdi3+0xe0>
 8009dd8:	14012336 	bltu	r2,r16,800a268 <__udivdi3+0x56c>
 8009ddc:	182d883a 	mov	r22,r3
 8009de0:	1421c83a 	sub	r16,r2,r16
 8009de4:	a80b883a 	mov	r5,r21
 8009de8:	8009883a 	mov	r4,r16
 8009dec:	800a9080 	call	800a908 <__umodsi3>
 8009df0:	1027883a 	mov	r19,r2
 8009df4:	a80b883a 	mov	r5,r21
 8009df8:	8009883a 	mov	r4,r16
 8009dfc:	800a8a40 	call	800a8a4 <__udivsi3>
 8009e00:	9826943a 	slli	r19,r19,16
 8009e04:	a0a9383a 	mul	r20,r20,r2
 8009e08:	94bfffcc 	andi	r18,r18,65535
 8009e0c:	94e4b03a 	or	r18,r18,r19
 8009e10:	9500052e 	bgeu	r18,r20,8009e28 <__udivdi3+0x12c>
 8009e14:	8ca5883a 	add	r18,r17,r18
 8009e18:	10ffffc4 	addi	r3,r2,-1
 8009e1c:	9440f136 	bltu	r18,r17,800a1e4 <__udivdi3+0x4e8>
 8009e20:	9500f02e 	bgeu	r18,r20,800a1e4 <__udivdi3+0x4e8>
 8009e24:	10bfff84 	addi	r2,r2,-2
 8009e28:	b00c943a 	slli	r6,r22,16
 8009e2c:	0007883a 	mov	r3,zero
 8009e30:	3084b03a 	or	r2,r6,r2
 8009e34:	00005906 	br	8009f9c <__udivdi3+0x2a0>
 8009e38:	29c05636 	bltu	r5,r7,8009f94 <__udivdi3+0x298>
 8009e3c:	00bfffd4 	movui	r2,65535
 8009e40:	11c0622e 	bgeu	r2,r7,8009fcc <__udivdi3+0x2d0>
 8009e44:	00804034 	movhi	r2,256
 8009e48:	10bfffc4 	addi	r2,r2,-1
 8009e4c:	11c0ee36 	bltu	r2,r7,800a208 <__udivdi3+0x50c>
 8009e50:	00800404 	movi	r2,16
 8009e54:	3886d83a 	srl	r3,r7,r2
 8009e58:	010200b4 	movhi	r4,2050
 8009e5c:	21244c04 	addi	r4,r4,-28368
 8009e60:	20c7883a 	add	r3,r4,r3
 8009e64:	18c00003 	ldbu	r3,0(r3)
 8009e68:	05400804 	movi	r21,32
 8009e6c:	1885883a 	add	r2,r3,r2
 8009e70:	a8abc83a 	sub	r21,r21,r2
 8009e74:	a800621e 	bne	r21,zero,800a000 <__udivdi3+0x304>
 8009e78:	3c00e936 	bltu	r7,r16,800a220 <__udivdi3+0x524>
 8009e7c:	9985403a 	cmpgeu	r2,r19,r6
 8009e80:	0007883a 	mov	r3,zero
 8009e84:	00004506 	br	8009f9c <__udivdi3+0x2a0>
 8009e88:	3000041e 	bne	r6,zero,8009e9c <__udivdi3+0x1a0>
 8009e8c:	000b883a 	mov	r5,zero
 8009e90:	01000044 	movi	r4,1
 8009e94:	800a8a40 	call	800a8a4 <__udivsi3>
 8009e98:	1023883a 	mov	r17,r2
 8009e9c:	00bfffd4 	movui	r2,65535
 8009ea0:	14404e2e 	bgeu	r2,r17,8009fdc <__udivdi3+0x2e0>
 8009ea4:	00804034 	movhi	r2,256
 8009ea8:	10bfffc4 	addi	r2,r2,-1
 8009eac:	1440d836 	bltu	r2,r17,800a210 <__udivdi3+0x514>
 8009eb0:	00800404 	movi	r2,16
 8009eb4:	8886d83a 	srl	r3,r17,r2
 8009eb8:	010200b4 	movhi	r4,2050
 8009ebc:	21244c04 	addi	r4,r4,-28368
 8009ec0:	20c7883a 	add	r3,r4,r3
 8009ec4:	18c00003 	ldbu	r3,0(r3)
 8009ec8:	1885883a 	add	r2,r3,r2
 8009ecc:	00c00804 	movi	r3,32
 8009ed0:	1887c83a 	sub	r3,r3,r2
 8009ed4:	18008f1e 	bne	r3,zero,800a114 <__udivdi3+0x418>
 8009ed8:	882ad43a 	srli	r21,r17,16
 8009edc:	8461c83a 	sub	r16,r16,r17
 8009ee0:	8d3fffcc 	andi	r20,r17,65535
 8009ee4:	00c00044 	movi	r3,1
 8009ee8:	8009883a 	mov	r4,r16
 8009eec:	a80b883a 	mov	r5,r21
 8009ef0:	d8c00015 	stw	r3,0(sp)
 8009ef4:	800a9080 	call	800a908 <__umodsi3>
 8009ef8:	8009883a 	mov	r4,r16
 8009efc:	a80b883a 	mov	r5,r21
 8009f00:	1027883a 	mov	r19,r2
 8009f04:	800a8a40 	call	800a8a4 <__udivsi3>
 8009f08:	9826943a 	slli	r19,r19,16
 8009f0c:	9008d43a 	srli	r4,r18,16
 8009f10:	1521383a 	mul	r16,r2,r20
 8009f14:	102d883a 	mov	r22,r2
 8009f18:	24c8b03a 	or	r4,r4,r19
 8009f1c:	d8c00017 	ldw	r3,0(sp)
 8009f20:	2400052e 	bgeu	r4,r16,8009f38 <__udivdi3+0x23c>
 8009f24:	2449883a 	add	r4,r4,r17
 8009f28:	b0bfffc4 	addi	r2,r22,-1
 8009f2c:	24400136 	bltu	r4,r17,8009f34 <__udivdi3+0x238>
 8009f30:	2400ca36 	bltu	r4,r16,800a25c <__udivdi3+0x560>
 8009f34:	102d883a 	mov	r22,r2
 8009f38:	2421c83a 	sub	r16,r4,r16
 8009f3c:	a80b883a 	mov	r5,r21
 8009f40:	8009883a 	mov	r4,r16
 8009f44:	d8c00015 	stw	r3,0(sp)
 8009f48:	800a9080 	call	800a908 <__umodsi3>
 8009f4c:	1027883a 	mov	r19,r2
 8009f50:	a80b883a 	mov	r5,r21
 8009f54:	8009883a 	mov	r4,r16
 8009f58:	800a8a40 	call	800a8a4 <__udivsi3>
 8009f5c:	9826943a 	slli	r19,r19,16
 8009f60:	1529383a 	mul	r20,r2,r20
 8009f64:	94bfffcc 	andi	r18,r18,65535
 8009f68:	94e4b03a 	or	r18,r18,r19
 8009f6c:	d8c00017 	ldw	r3,0(sp)
 8009f70:	9500052e 	bgeu	r18,r20,8009f88 <__udivdi3+0x28c>
 8009f74:	8ca5883a 	add	r18,r17,r18
 8009f78:	113fffc4 	addi	r4,r2,-1
 8009f7c:	94409736 	bltu	r18,r17,800a1dc <__udivdi3+0x4e0>
 8009f80:	9500962e 	bgeu	r18,r20,800a1dc <__udivdi3+0x4e0>
 8009f84:	10bfff84 	addi	r2,r2,-2
 8009f88:	b00c943a 	slli	r6,r22,16
 8009f8c:	3084b03a 	or	r2,r6,r2
 8009f90:	00000206 	br	8009f9c <__udivdi3+0x2a0>
 8009f94:	0007883a 	mov	r3,zero
 8009f98:	0005883a 	mov	r2,zero
 8009f9c:	dfc00a17 	ldw	ra,40(sp)
 8009fa0:	df000917 	ldw	fp,36(sp)
 8009fa4:	ddc00817 	ldw	r23,32(sp)
 8009fa8:	dd800717 	ldw	r22,28(sp)
 8009fac:	dd400617 	ldw	r21,24(sp)
 8009fb0:	dd000517 	ldw	r20,20(sp)
 8009fb4:	dcc00417 	ldw	r19,16(sp)
 8009fb8:	dc800317 	ldw	r18,12(sp)
 8009fbc:	dc400217 	ldw	r17,8(sp)
 8009fc0:	dc000117 	ldw	r16,4(sp)
 8009fc4:	dec00b04 	addi	sp,sp,44
 8009fc8:	f800283a 	ret
 8009fcc:	00803fc4 	movi	r2,255
 8009fd0:	11c5803a 	cmpltu	r2,r2,r7
 8009fd4:	100490fa 	slli	r2,r2,3
 8009fd8:	003f9e06 	br	8009e54 <__alt_data_end+0xf8009e54>
 8009fdc:	00803fc4 	movi	r2,255
 8009fe0:	1445803a 	cmpltu	r2,r2,r17
 8009fe4:	100490fa 	slli	r2,r2,3
 8009fe8:	003fb206 	br	8009eb4 <__alt_data_end+0xf8009eb4>
 8009fec:	00804034 	movhi	r2,256
 8009ff0:	10bfffc4 	addi	r2,r2,-1
 8009ff4:	11808836 	bltu	r2,r6,800a218 <__udivdi3+0x51c>
 8009ff8:	00800404 	movi	r2,16
 8009ffc:	003f5606 	br	8009d58 <__alt_data_end+0xf8009d58>
 800a000:	30aed83a 	srl	r23,r6,r2
 800a004:	3d4e983a 	sll	r7,r7,r21
 800a008:	80acd83a 	srl	r22,r16,r2
 800a00c:	9884d83a 	srl	r2,r19,r2
 800a010:	3deeb03a 	or	r23,r7,r23
 800a014:	b824d43a 	srli	r18,r23,16
 800a018:	8560983a 	sll	r16,r16,r21
 800a01c:	b009883a 	mov	r4,r22
 800a020:	900b883a 	mov	r5,r18
 800a024:	3568983a 	sll	r20,r6,r21
 800a028:	1420b03a 	or	r16,r2,r16
 800a02c:	800a9080 	call	800a908 <__umodsi3>
 800a030:	b009883a 	mov	r4,r22
 800a034:	900b883a 	mov	r5,r18
 800a038:	1023883a 	mov	r17,r2
 800a03c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a040:	8808943a 	slli	r4,r17,16
 800a044:	bf3fffcc 	andi	fp,r23,65535
 800a048:	8006d43a 	srli	r3,r16,16
 800a04c:	e0a3383a 	mul	r17,fp,r2
 800a050:	100d883a 	mov	r6,r2
 800a054:	1906b03a 	or	r3,r3,r4
 800a058:	1c40042e 	bgeu	r3,r17,800a06c <__udivdi3+0x370>
 800a05c:	1dc7883a 	add	r3,r3,r23
 800a060:	10bfffc4 	addi	r2,r2,-1
 800a064:	1dc0752e 	bgeu	r3,r23,800a23c <__udivdi3+0x540>
 800a068:	100d883a 	mov	r6,r2
 800a06c:	1c63c83a 	sub	r17,r3,r17
 800a070:	900b883a 	mov	r5,r18
 800a074:	8809883a 	mov	r4,r17
 800a078:	d9800015 	stw	r6,0(sp)
 800a07c:	800a9080 	call	800a908 <__umodsi3>
 800a080:	102d883a 	mov	r22,r2
 800a084:	8809883a 	mov	r4,r17
 800a088:	900b883a 	mov	r5,r18
 800a08c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a090:	b02c943a 	slli	r22,r22,16
 800a094:	e089383a 	mul	r4,fp,r2
 800a098:	843fffcc 	andi	r16,r16,65535
 800a09c:	85a0b03a 	or	r16,r16,r22
 800a0a0:	d9800017 	ldw	r6,0(sp)
 800a0a4:	8100042e 	bgeu	r16,r4,800a0b8 <__udivdi3+0x3bc>
 800a0a8:	85e1883a 	add	r16,r16,r23
 800a0ac:	10ffffc4 	addi	r3,r2,-1
 800a0b0:	85c05e2e 	bgeu	r16,r23,800a22c <__udivdi3+0x530>
 800a0b4:	1805883a 	mov	r2,r3
 800a0b8:	300c943a 	slli	r6,r6,16
 800a0bc:	a17fffcc 	andi	r5,r20,65535
 800a0c0:	a028d43a 	srli	r20,r20,16
 800a0c4:	3084b03a 	or	r2,r6,r2
 800a0c8:	10ffffcc 	andi	r3,r2,65535
 800a0cc:	100cd43a 	srli	r6,r2,16
 800a0d0:	194f383a 	mul	r7,r3,r5
 800a0d4:	1d07383a 	mul	r3,r3,r20
 800a0d8:	314b383a 	mul	r5,r6,r5
 800a0dc:	3810d43a 	srli	r8,r7,16
 800a0e0:	8121c83a 	sub	r16,r16,r4
 800a0e4:	1947883a 	add	r3,r3,r5
 800a0e8:	40c7883a 	add	r3,r8,r3
 800a0ec:	350d383a 	mul	r6,r6,r20
 800a0f0:	1940022e 	bgeu	r3,r5,800a0fc <__udivdi3+0x400>
 800a0f4:	01000074 	movhi	r4,1
 800a0f8:	310d883a 	add	r6,r6,r4
 800a0fc:	1828d43a 	srli	r20,r3,16
 800a100:	a18d883a 	add	r6,r20,r6
 800a104:	81803e36 	bltu	r16,r6,800a200 <__udivdi3+0x504>
 800a108:	81803826 	beq	r16,r6,800a1ec <__udivdi3+0x4f0>
 800a10c:	0007883a 	mov	r3,zero
 800a110:	003fa206 	br	8009f9c <__alt_data_end+0xf8009f9c>
 800a114:	88e2983a 	sll	r17,r17,r3
 800a118:	80a8d83a 	srl	r20,r16,r2
 800a11c:	80e0983a 	sll	r16,r16,r3
 800a120:	882ad43a 	srli	r21,r17,16
 800a124:	9884d83a 	srl	r2,r19,r2
 800a128:	a009883a 	mov	r4,r20
 800a12c:	a80b883a 	mov	r5,r21
 800a130:	142eb03a 	or	r23,r2,r16
 800a134:	98e4983a 	sll	r18,r19,r3
 800a138:	800a9080 	call	800a908 <__umodsi3>
 800a13c:	a009883a 	mov	r4,r20
 800a140:	a80b883a 	mov	r5,r21
 800a144:	1021883a 	mov	r16,r2
 800a148:	800a8a40 	call	800a8a4 <__udivsi3>
 800a14c:	1039883a 	mov	fp,r2
 800a150:	8d3fffcc 	andi	r20,r17,65535
 800a154:	8020943a 	slli	r16,r16,16
 800a158:	b804d43a 	srli	r2,r23,16
 800a15c:	a72d383a 	mul	r22,r20,fp
 800a160:	1404b03a 	or	r2,r2,r16
 800a164:	1580062e 	bgeu	r2,r22,800a180 <__udivdi3+0x484>
 800a168:	1445883a 	add	r2,r2,r17
 800a16c:	e0ffffc4 	addi	r3,fp,-1
 800a170:	14403836 	bltu	r2,r17,800a254 <__udivdi3+0x558>
 800a174:	1580372e 	bgeu	r2,r22,800a254 <__udivdi3+0x558>
 800a178:	e73fff84 	addi	fp,fp,-2
 800a17c:	1445883a 	add	r2,r2,r17
 800a180:	15adc83a 	sub	r22,r2,r22
 800a184:	a80b883a 	mov	r5,r21
 800a188:	b009883a 	mov	r4,r22
 800a18c:	800a9080 	call	800a908 <__umodsi3>
 800a190:	1027883a 	mov	r19,r2
 800a194:	b009883a 	mov	r4,r22
 800a198:	a80b883a 	mov	r5,r21
 800a19c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a1a0:	9826943a 	slli	r19,r19,16
 800a1a4:	a0a1383a 	mul	r16,r20,r2
 800a1a8:	b93fffcc 	andi	r4,r23,65535
 800a1ac:	24c8b03a 	or	r4,r4,r19
 800a1b0:	2400062e 	bgeu	r4,r16,800a1cc <__udivdi3+0x4d0>
 800a1b4:	2449883a 	add	r4,r4,r17
 800a1b8:	10ffffc4 	addi	r3,r2,-1
 800a1bc:	24402336 	bltu	r4,r17,800a24c <__udivdi3+0x550>
 800a1c0:	2400222e 	bgeu	r4,r16,800a24c <__udivdi3+0x550>
 800a1c4:	10bfff84 	addi	r2,r2,-2
 800a1c8:	2449883a 	add	r4,r4,r17
 800a1cc:	e038943a 	slli	fp,fp,16
 800a1d0:	2421c83a 	sub	r16,r4,r16
 800a1d4:	e086b03a 	or	r3,fp,r2
 800a1d8:	003f4306 	br	8009ee8 <__alt_data_end+0xf8009ee8>
 800a1dc:	2005883a 	mov	r2,r4
 800a1e0:	003f6906 	br	8009f88 <__alt_data_end+0xf8009f88>
 800a1e4:	1805883a 	mov	r2,r3
 800a1e8:	003f0f06 	br	8009e28 <__alt_data_end+0xf8009e28>
 800a1ec:	1806943a 	slli	r3,r3,16
 800a1f0:	9d66983a 	sll	r19,r19,r21
 800a1f4:	39ffffcc 	andi	r7,r7,65535
 800a1f8:	19c7883a 	add	r3,r3,r7
 800a1fc:	98ffc32e 	bgeu	r19,r3,800a10c <__alt_data_end+0xf800a10c>
 800a200:	10bfffc4 	addi	r2,r2,-1
 800a204:	003fc106 	br	800a10c <__alt_data_end+0xf800a10c>
 800a208:	00800604 	movi	r2,24
 800a20c:	003f1106 	br	8009e54 <__alt_data_end+0xf8009e54>
 800a210:	00800604 	movi	r2,24
 800a214:	003f2706 	br	8009eb4 <__alt_data_end+0xf8009eb4>
 800a218:	00800604 	movi	r2,24
 800a21c:	003ece06 	br	8009d58 <__alt_data_end+0xf8009d58>
 800a220:	0007883a 	mov	r3,zero
 800a224:	00800044 	movi	r2,1
 800a228:	003f5c06 	br	8009f9c <__alt_data_end+0xf8009f9c>
 800a22c:	813fa12e 	bgeu	r16,r4,800a0b4 <__alt_data_end+0xf800a0b4>
 800a230:	10bfff84 	addi	r2,r2,-2
 800a234:	85e1883a 	add	r16,r16,r23
 800a238:	003f9f06 	br	800a0b8 <__alt_data_end+0xf800a0b8>
 800a23c:	1c7f8a2e 	bgeu	r3,r17,800a068 <__alt_data_end+0xf800a068>
 800a240:	31bfff84 	addi	r6,r6,-2
 800a244:	1dc7883a 	add	r3,r3,r23
 800a248:	003f8806 	br	800a06c <__alt_data_end+0xf800a06c>
 800a24c:	1805883a 	mov	r2,r3
 800a250:	003fde06 	br	800a1cc <__alt_data_end+0xf800a1cc>
 800a254:	1839883a 	mov	fp,r3
 800a258:	003fc906 	br	800a180 <__alt_data_end+0xf800a180>
 800a25c:	b5bfff84 	addi	r22,r22,-2
 800a260:	2449883a 	add	r4,r4,r17
 800a264:	003f3406 	br	8009f38 <__alt_data_end+0xf8009f38>
 800a268:	b5bfff84 	addi	r22,r22,-2
 800a26c:	1445883a 	add	r2,r2,r17
 800a270:	003edb06 	br	8009de0 <__alt_data_end+0xf8009de0>

0800a274 <__umoddi3>:
 800a274:	defff404 	addi	sp,sp,-48
 800a278:	df000a15 	stw	fp,40(sp)
 800a27c:	dc400315 	stw	r17,12(sp)
 800a280:	dc000215 	stw	r16,8(sp)
 800a284:	dfc00b15 	stw	ra,44(sp)
 800a288:	ddc00915 	stw	r23,36(sp)
 800a28c:	dd800815 	stw	r22,32(sp)
 800a290:	dd400715 	stw	r21,28(sp)
 800a294:	dd000615 	stw	r20,24(sp)
 800a298:	dcc00515 	stw	r19,20(sp)
 800a29c:	dc800415 	stw	r18,16(sp)
 800a2a0:	2021883a 	mov	r16,r4
 800a2a4:	2823883a 	mov	r17,r5
 800a2a8:	2839883a 	mov	fp,r5
 800a2ac:	38003c1e 	bne	r7,zero,800a3a0 <__umoddi3+0x12c>
 800a2b0:	3027883a 	mov	r19,r6
 800a2b4:	2029883a 	mov	r20,r4
 800a2b8:	2980512e 	bgeu	r5,r6,800a400 <__umoddi3+0x18c>
 800a2bc:	00bfffd4 	movui	r2,65535
 800a2c0:	11809a36 	bltu	r2,r6,800a52c <__umoddi3+0x2b8>
 800a2c4:	01003fc4 	movi	r4,255
 800a2c8:	2189803a 	cmpltu	r4,r4,r6
 800a2cc:	200890fa 	slli	r4,r4,3
 800a2d0:	3104d83a 	srl	r2,r6,r4
 800a2d4:	00c200b4 	movhi	r3,2050
 800a2d8:	18e44c04 	addi	r3,r3,-28368
 800a2dc:	1885883a 	add	r2,r3,r2
 800a2e0:	10c00003 	ldbu	r3,0(r2)
 800a2e4:	00800804 	movi	r2,32
 800a2e8:	1909883a 	add	r4,r3,r4
 800a2ec:	1125c83a 	sub	r18,r2,r4
 800a2f0:	90000526 	beq	r18,zero,800a308 <__umoddi3+0x94>
 800a2f4:	8ca2983a 	sll	r17,r17,r18
 800a2f8:	8108d83a 	srl	r4,r16,r4
 800a2fc:	34a6983a 	sll	r19,r6,r18
 800a300:	84a8983a 	sll	r20,r16,r18
 800a304:	2478b03a 	or	fp,r4,r17
 800a308:	982ed43a 	srli	r23,r19,16
 800a30c:	e009883a 	mov	r4,fp
 800a310:	9dbfffcc 	andi	r22,r19,65535
 800a314:	b80b883a 	mov	r5,r23
 800a318:	800a9080 	call	800a908 <__umodsi3>
 800a31c:	e009883a 	mov	r4,fp
 800a320:	b80b883a 	mov	r5,r23
 800a324:	102b883a 	mov	r21,r2
 800a328:	800a8a40 	call	800a8a4 <__udivsi3>
 800a32c:	a806943a 	slli	r3,r21,16
 800a330:	a008d43a 	srli	r4,r20,16
 800a334:	b085383a 	mul	r2,r22,r2
 800a338:	20c8b03a 	or	r4,r4,r3
 800a33c:	2080032e 	bgeu	r4,r2,800a34c <__umoddi3+0xd8>
 800a340:	24c9883a 	add	r4,r4,r19
 800a344:	24c00136 	bltu	r4,r19,800a34c <__umoddi3+0xd8>
 800a348:	20811036 	bltu	r4,r2,800a78c <__umoddi3+0x518>
 800a34c:	20abc83a 	sub	r21,r4,r2
 800a350:	b80b883a 	mov	r5,r23
 800a354:	a809883a 	mov	r4,r21
 800a358:	800a9080 	call	800a908 <__umodsi3>
 800a35c:	1023883a 	mov	r17,r2
 800a360:	b80b883a 	mov	r5,r23
 800a364:	a809883a 	mov	r4,r21
 800a368:	800a8a40 	call	800a8a4 <__udivsi3>
 800a36c:	8822943a 	slli	r17,r17,16
 800a370:	b085383a 	mul	r2,r22,r2
 800a374:	a0ffffcc 	andi	r3,r20,65535
 800a378:	1c46b03a 	or	r3,r3,r17
 800a37c:	1880042e 	bgeu	r3,r2,800a390 <__umoddi3+0x11c>
 800a380:	1cc7883a 	add	r3,r3,r19
 800a384:	1cc00236 	bltu	r3,r19,800a390 <__umoddi3+0x11c>
 800a388:	1880012e 	bgeu	r3,r2,800a390 <__umoddi3+0x11c>
 800a38c:	1cc7883a 	add	r3,r3,r19
 800a390:	1885c83a 	sub	r2,r3,r2
 800a394:	1484d83a 	srl	r2,r2,r18
 800a398:	0007883a 	mov	r3,zero
 800a39c:	00004f06 	br	800a4dc <__umoddi3+0x268>
 800a3a0:	29c04c36 	bltu	r5,r7,800a4d4 <__umoddi3+0x260>
 800a3a4:	00bfffd4 	movui	r2,65535
 800a3a8:	11c0582e 	bgeu	r2,r7,800a50c <__umoddi3+0x298>
 800a3ac:	00804034 	movhi	r2,256
 800a3b0:	10bfffc4 	addi	r2,r2,-1
 800a3b4:	11c0e736 	bltu	r2,r7,800a754 <__umoddi3+0x4e0>
 800a3b8:	01000404 	movi	r4,16
 800a3bc:	3904d83a 	srl	r2,r7,r4
 800a3c0:	00c200b4 	movhi	r3,2050
 800a3c4:	18e44c04 	addi	r3,r3,-28368
 800a3c8:	1885883a 	add	r2,r3,r2
 800a3cc:	14c00003 	ldbu	r19,0(r2)
 800a3d0:	00c00804 	movi	r3,32
 800a3d4:	9927883a 	add	r19,r19,r4
 800a3d8:	1ce9c83a 	sub	r20,r3,r19
 800a3dc:	a000581e 	bne	r20,zero,800a540 <__umoddi3+0x2cc>
 800a3e0:	3c400136 	bltu	r7,r17,800a3e8 <__umoddi3+0x174>
 800a3e4:	8180eb36 	bltu	r16,r6,800a794 <__umoddi3+0x520>
 800a3e8:	8185c83a 	sub	r2,r16,r6
 800a3ec:	89e3c83a 	sub	r17,r17,r7
 800a3f0:	8089803a 	cmpltu	r4,r16,r2
 800a3f4:	8939c83a 	sub	fp,r17,r4
 800a3f8:	e007883a 	mov	r3,fp
 800a3fc:	00003706 	br	800a4dc <__umoddi3+0x268>
 800a400:	3000041e 	bne	r6,zero,800a414 <__umoddi3+0x1a0>
 800a404:	000b883a 	mov	r5,zero
 800a408:	01000044 	movi	r4,1
 800a40c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a410:	1027883a 	mov	r19,r2
 800a414:	00bfffd4 	movui	r2,65535
 800a418:	14c0402e 	bgeu	r2,r19,800a51c <__umoddi3+0x2a8>
 800a41c:	00804034 	movhi	r2,256
 800a420:	10bfffc4 	addi	r2,r2,-1
 800a424:	14c0cd36 	bltu	r2,r19,800a75c <__umoddi3+0x4e8>
 800a428:	00800404 	movi	r2,16
 800a42c:	9886d83a 	srl	r3,r19,r2
 800a430:	010200b4 	movhi	r4,2050
 800a434:	21244c04 	addi	r4,r4,-28368
 800a438:	20c7883a 	add	r3,r4,r3
 800a43c:	18c00003 	ldbu	r3,0(r3)
 800a440:	1887883a 	add	r3,r3,r2
 800a444:	00800804 	movi	r2,32
 800a448:	10e5c83a 	sub	r18,r2,r3
 800a44c:	9000901e 	bne	r18,zero,800a690 <__umoddi3+0x41c>
 800a450:	982cd43a 	srli	r22,r19,16
 800a454:	8ce3c83a 	sub	r17,r17,r19
 800a458:	9d7fffcc 	andi	r21,r19,65535
 800a45c:	b00b883a 	mov	r5,r22
 800a460:	8809883a 	mov	r4,r17
 800a464:	800a9080 	call	800a908 <__umodsi3>
 800a468:	8809883a 	mov	r4,r17
 800a46c:	b00b883a 	mov	r5,r22
 800a470:	1021883a 	mov	r16,r2
 800a474:	800a8a40 	call	800a8a4 <__udivsi3>
 800a478:	8006943a 	slli	r3,r16,16
 800a47c:	a008d43a 	srli	r4,r20,16
 800a480:	1545383a 	mul	r2,r2,r21
 800a484:	20c8b03a 	or	r4,r4,r3
 800a488:	2080042e 	bgeu	r4,r2,800a49c <__umoddi3+0x228>
 800a48c:	24c9883a 	add	r4,r4,r19
 800a490:	24c00236 	bltu	r4,r19,800a49c <__umoddi3+0x228>
 800a494:	2080012e 	bgeu	r4,r2,800a49c <__umoddi3+0x228>
 800a498:	24c9883a 	add	r4,r4,r19
 800a49c:	20a1c83a 	sub	r16,r4,r2
 800a4a0:	b00b883a 	mov	r5,r22
 800a4a4:	8009883a 	mov	r4,r16
 800a4a8:	800a9080 	call	800a908 <__umodsi3>
 800a4ac:	1023883a 	mov	r17,r2
 800a4b0:	b00b883a 	mov	r5,r22
 800a4b4:	8009883a 	mov	r4,r16
 800a4b8:	800a8a40 	call	800a8a4 <__udivsi3>
 800a4bc:	8822943a 	slli	r17,r17,16
 800a4c0:	1545383a 	mul	r2,r2,r21
 800a4c4:	a53fffcc 	andi	r20,r20,65535
 800a4c8:	a446b03a 	or	r3,r20,r17
 800a4cc:	18bfb02e 	bgeu	r3,r2,800a390 <__alt_data_end+0xf800a390>
 800a4d0:	003fab06 	br	800a380 <__alt_data_end+0xf800a380>
 800a4d4:	2005883a 	mov	r2,r4
 800a4d8:	2807883a 	mov	r3,r5
 800a4dc:	dfc00b17 	ldw	ra,44(sp)
 800a4e0:	df000a17 	ldw	fp,40(sp)
 800a4e4:	ddc00917 	ldw	r23,36(sp)
 800a4e8:	dd800817 	ldw	r22,32(sp)
 800a4ec:	dd400717 	ldw	r21,28(sp)
 800a4f0:	dd000617 	ldw	r20,24(sp)
 800a4f4:	dcc00517 	ldw	r19,20(sp)
 800a4f8:	dc800417 	ldw	r18,16(sp)
 800a4fc:	dc400317 	ldw	r17,12(sp)
 800a500:	dc000217 	ldw	r16,8(sp)
 800a504:	dec00c04 	addi	sp,sp,48
 800a508:	f800283a 	ret
 800a50c:	04c03fc4 	movi	r19,255
 800a510:	99c9803a 	cmpltu	r4,r19,r7
 800a514:	200890fa 	slli	r4,r4,3
 800a518:	003fa806 	br	800a3bc <__alt_data_end+0xf800a3bc>
 800a51c:	00803fc4 	movi	r2,255
 800a520:	14c5803a 	cmpltu	r2,r2,r19
 800a524:	100490fa 	slli	r2,r2,3
 800a528:	003fc006 	br	800a42c <__alt_data_end+0xf800a42c>
 800a52c:	00804034 	movhi	r2,256
 800a530:	10bfffc4 	addi	r2,r2,-1
 800a534:	11808b36 	bltu	r2,r6,800a764 <__umoddi3+0x4f0>
 800a538:	01000404 	movi	r4,16
 800a53c:	003f6406 	br	800a2d0 <__alt_data_end+0xf800a2d0>
 800a540:	34c4d83a 	srl	r2,r6,r19
 800a544:	3d0e983a 	sll	r7,r7,r20
 800a548:	8cf8d83a 	srl	fp,r17,r19
 800a54c:	8d10983a 	sll	r8,r17,r20
 800a550:	38aab03a 	or	r21,r7,r2
 800a554:	a82cd43a 	srli	r22,r21,16
 800a558:	84e2d83a 	srl	r17,r16,r19
 800a55c:	e009883a 	mov	r4,fp
 800a560:	b00b883a 	mov	r5,r22
 800a564:	8a22b03a 	or	r17,r17,r8
 800a568:	3524983a 	sll	r18,r6,r20
 800a56c:	800a9080 	call	800a908 <__umodsi3>
 800a570:	e009883a 	mov	r4,fp
 800a574:	b00b883a 	mov	r5,r22
 800a578:	102f883a 	mov	r23,r2
 800a57c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a580:	100d883a 	mov	r6,r2
 800a584:	b808943a 	slli	r4,r23,16
 800a588:	aa3fffcc 	andi	r8,r21,65535
 800a58c:	8804d43a 	srli	r2,r17,16
 800a590:	41af383a 	mul	r23,r8,r6
 800a594:	8520983a 	sll	r16,r16,r20
 800a598:	1104b03a 	or	r2,r2,r4
 800a59c:	15c0042e 	bgeu	r2,r23,800a5b0 <__umoddi3+0x33c>
 800a5a0:	1545883a 	add	r2,r2,r21
 800a5a4:	30ffffc4 	addi	r3,r6,-1
 800a5a8:	1540742e 	bgeu	r2,r21,800a77c <__umoddi3+0x508>
 800a5ac:	180d883a 	mov	r6,r3
 800a5b0:	15efc83a 	sub	r23,r2,r23
 800a5b4:	b00b883a 	mov	r5,r22
 800a5b8:	b809883a 	mov	r4,r23
 800a5bc:	d9800115 	stw	r6,4(sp)
 800a5c0:	da000015 	stw	r8,0(sp)
 800a5c4:	800a9080 	call	800a908 <__umodsi3>
 800a5c8:	b00b883a 	mov	r5,r22
 800a5cc:	b809883a 	mov	r4,r23
 800a5d0:	1039883a 	mov	fp,r2
 800a5d4:	800a8a40 	call	800a8a4 <__udivsi3>
 800a5d8:	da000017 	ldw	r8,0(sp)
 800a5dc:	e038943a 	slli	fp,fp,16
 800a5e0:	100b883a 	mov	r5,r2
 800a5e4:	4089383a 	mul	r4,r8,r2
 800a5e8:	8a3fffcc 	andi	r8,r17,65535
 800a5ec:	4710b03a 	or	r8,r8,fp
 800a5f0:	d9800117 	ldw	r6,4(sp)
 800a5f4:	4100042e 	bgeu	r8,r4,800a608 <__umoddi3+0x394>
 800a5f8:	4551883a 	add	r8,r8,r21
 800a5fc:	10bfffc4 	addi	r2,r2,-1
 800a600:	45405a2e 	bgeu	r8,r21,800a76c <__umoddi3+0x4f8>
 800a604:	100b883a 	mov	r5,r2
 800a608:	300c943a 	slli	r6,r6,16
 800a60c:	91ffffcc 	andi	r7,r18,65535
 800a610:	9004d43a 	srli	r2,r18,16
 800a614:	314cb03a 	or	r6,r6,r5
 800a618:	317fffcc 	andi	r5,r6,65535
 800a61c:	300cd43a 	srli	r6,r6,16
 800a620:	29d3383a 	mul	r9,r5,r7
 800a624:	288b383a 	mul	r5,r5,r2
 800a628:	31cf383a 	mul	r7,r6,r7
 800a62c:	4806d43a 	srli	r3,r9,16
 800a630:	4111c83a 	sub	r8,r8,r4
 800a634:	29cb883a 	add	r5,r5,r7
 800a638:	194b883a 	add	r5,r3,r5
 800a63c:	3085383a 	mul	r2,r6,r2
 800a640:	29c0022e 	bgeu	r5,r7,800a64c <__umoddi3+0x3d8>
 800a644:	00c00074 	movhi	r3,1
 800a648:	10c5883a 	add	r2,r2,r3
 800a64c:	2808d43a 	srli	r4,r5,16
 800a650:	280a943a 	slli	r5,r5,16
 800a654:	4a7fffcc 	andi	r9,r9,65535
 800a658:	2085883a 	add	r2,r4,r2
 800a65c:	2a4b883a 	add	r5,r5,r9
 800a660:	40803636 	bltu	r8,r2,800a73c <__umoddi3+0x4c8>
 800a664:	40804d26 	beq	r8,r2,800a79c <__umoddi3+0x528>
 800a668:	4089c83a 	sub	r4,r8,r2
 800a66c:	280f883a 	mov	r7,r5
 800a670:	81cfc83a 	sub	r7,r16,r7
 800a674:	81c7803a 	cmpltu	r3,r16,r7
 800a678:	20c7c83a 	sub	r3,r4,r3
 800a67c:	1cc4983a 	sll	r2,r3,r19
 800a680:	3d0ed83a 	srl	r7,r7,r20
 800a684:	1d06d83a 	srl	r3,r3,r20
 800a688:	11c4b03a 	or	r2,r2,r7
 800a68c:	003f9306 	br	800a4dc <__alt_data_end+0xf800a4dc>
 800a690:	9ca6983a 	sll	r19,r19,r18
 800a694:	88e8d83a 	srl	r20,r17,r3
 800a698:	80c4d83a 	srl	r2,r16,r3
 800a69c:	982cd43a 	srli	r22,r19,16
 800a6a0:	8ca2983a 	sll	r17,r17,r18
 800a6a4:	a009883a 	mov	r4,r20
 800a6a8:	b00b883a 	mov	r5,r22
 800a6ac:	1478b03a 	or	fp,r2,r17
 800a6b0:	800a9080 	call	800a908 <__umodsi3>
 800a6b4:	a009883a 	mov	r4,r20
 800a6b8:	b00b883a 	mov	r5,r22
 800a6bc:	1023883a 	mov	r17,r2
 800a6c0:	800a8a40 	call	800a8a4 <__udivsi3>
 800a6c4:	9d7fffcc 	andi	r21,r19,65535
 800a6c8:	880a943a 	slli	r5,r17,16
 800a6cc:	e008d43a 	srli	r4,fp,16
 800a6d0:	a885383a 	mul	r2,r21,r2
 800a6d4:	84a8983a 	sll	r20,r16,r18
 800a6d8:	2148b03a 	or	r4,r4,r5
 800a6dc:	2080042e 	bgeu	r4,r2,800a6f0 <__umoddi3+0x47c>
 800a6e0:	24c9883a 	add	r4,r4,r19
 800a6e4:	24c00236 	bltu	r4,r19,800a6f0 <__umoddi3+0x47c>
 800a6e8:	2080012e 	bgeu	r4,r2,800a6f0 <__umoddi3+0x47c>
 800a6ec:	24c9883a 	add	r4,r4,r19
 800a6f0:	20a3c83a 	sub	r17,r4,r2
 800a6f4:	b00b883a 	mov	r5,r22
 800a6f8:	8809883a 	mov	r4,r17
 800a6fc:	800a9080 	call	800a908 <__umodsi3>
 800a700:	102f883a 	mov	r23,r2
 800a704:	8809883a 	mov	r4,r17
 800a708:	b00b883a 	mov	r5,r22
 800a70c:	800a8a40 	call	800a8a4 <__udivsi3>
 800a710:	b82e943a 	slli	r23,r23,16
 800a714:	a885383a 	mul	r2,r21,r2
 800a718:	e13fffcc 	andi	r4,fp,65535
 800a71c:	25c8b03a 	or	r4,r4,r23
 800a720:	2080042e 	bgeu	r4,r2,800a734 <__umoddi3+0x4c0>
 800a724:	24c9883a 	add	r4,r4,r19
 800a728:	24c00236 	bltu	r4,r19,800a734 <__umoddi3+0x4c0>
 800a72c:	2080012e 	bgeu	r4,r2,800a734 <__umoddi3+0x4c0>
 800a730:	24c9883a 	add	r4,r4,r19
 800a734:	20a3c83a 	sub	r17,r4,r2
 800a738:	003f4806 	br	800a45c <__alt_data_end+0xf800a45c>
 800a73c:	2c8fc83a 	sub	r7,r5,r18
 800a740:	1545c83a 	sub	r2,r2,r21
 800a744:	29cb803a 	cmpltu	r5,r5,r7
 800a748:	1145c83a 	sub	r2,r2,r5
 800a74c:	4089c83a 	sub	r4,r8,r2
 800a750:	003fc706 	br	800a670 <__alt_data_end+0xf800a670>
 800a754:	01000604 	movi	r4,24
 800a758:	003f1806 	br	800a3bc <__alt_data_end+0xf800a3bc>
 800a75c:	00800604 	movi	r2,24
 800a760:	003f3206 	br	800a42c <__alt_data_end+0xf800a42c>
 800a764:	01000604 	movi	r4,24
 800a768:	003ed906 	br	800a2d0 <__alt_data_end+0xf800a2d0>
 800a76c:	413fa52e 	bgeu	r8,r4,800a604 <__alt_data_end+0xf800a604>
 800a770:	297fff84 	addi	r5,r5,-2
 800a774:	4551883a 	add	r8,r8,r21
 800a778:	003fa306 	br	800a608 <__alt_data_end+0xf800a608>
 800a77c:	15ff8b2e 	bgeu	r2,r23,800a5ac <__alt_data_end+0xf800a5ac>
 800a780:	31bfff84 	addi	r6,r6,-2
 800a784:	1545883a 	add	r2,r2,r21
 800a788:	003f8906 	br	800a5b0 <__alt_data_end+0xf800a5b0>
 800a78c:	24c9883a 	add	r4,r4,r19
 800a790:	003eee06 	br	800a34c <__alt_data_end+0xf800a34c>
 800a794:	8005883a 	mov	r2,r16
 800a798:	003f1706 	br	800a3f8 <__alt_data_end+0xf800a3f8>
 800a79c:	817fe736 	bltu	r16,r5,800a73c <__alt_data_end+0xf800a73c>
 800a7a0:	280f883a 	mov	r7,r5
 800a7a4:	0009883a 	mov	r4,zero
 800a7a8:	003fb106 	br	800a670 <__alt_data_end+0xf800a670>

0800a7ac <__divsi3>:
 800a7ac:	20001b16 	blt	r4,zero,800a81c <__divsi3+0x70>
 800a7b0:	000f883a 	mov	r7,zero
 800a7b4:	28001616 	blt	r5,zero,800a810 <__divsi3+0x64>
 800a7b8:	200d883a 	mov	r6,r4
 800a7bc:	29001a2e 	bgeu	r5,r4,800a828 <__divsi3+0x7c>
 800a7c0:	00800804 	movi	r2,32
 800a7c4:	00c00044 	movi	r3,1
 800a7c8:	00000106 	br	800a7d0 <__divsi3+0x24>
 800a7cc:	10000d26 	beq	r2,zero,800a804 <__divsi3+0x58>
 800a7d0:	294b883a 	add	r5,r5,r5
 800a7d4:	10bfffc4 	addi	r2,r2,-1
 800a7d8:	18c7883a 	add	r3,r3,r3
 800a7dc:	293ffb36 	bltu	r5,r4,800a7cc <__alt_data_end+0xf800a7cc>
 800a7e0:	0005883a 	mov	r2,zero
 800a7e4:	18000726 	beq	r3,zero,800a804 <__divsi3+0x58>
 800a7e8:	0005883a 	mov	r2,zero
 800a7ec:	31400236 	bltu	r6,r5,800a7f8 <__divsi3+0x4c>
 800a7f0:	314dc83a 	sub	r6,r6,r5
 800a7f4:	10c4b03a 	or	r2,r2,r3
 800a7f8:	1806d07a 	srli	r3,r3,1
 800a7fc:	280ad07a 	srli	r5,r5,1
 800a800:	183ffa1e 	bne	r3,zero,800a7ec <__alt_data_end+0xf800a7ec>
 800a804:	38000126 	beq	r7,zero,800a80c <__divsi3+0x60>
 800a808:	0085c83a 	sub	r2,zero,r2
 800a80c:	f800283a 	ret
 800a810:	014bc83a 	sub	r5,zero,r5
 800a814:	39c0005c 	xori	r7,r7,1
 800a818:	003fe706 	br	800a7b8 <__alt_data_end+0xf800a7b8>
 800a81c:	0109c83a 	sub	r4,zero,r4
 800a820:	01c00044 	movi	r7,1
 800a824:	003fe306 	br	800a7b4 <__alt_data_end+0xf800a7b4>
 800a828:	00c00044 	movi	r3,1
 800a82c:	003fee06 	br	800a7e8 <__alt_data_end+0xf800a7e8>

0800a830 <__modsi3>:
 800a830:	20001716 	blt	r4,zero,800a890 <__modsi3+0x60>
 800a834:	000f883a 	mov	r7,zero
 800a838:	2005883a 	mov	r2,r4
 800a83c:	28001216 	blt	r5,zero,800a888 <__modsi3+0x58>
 800a840:	2900162e 	bgeu	r5,r4,800a89c <__modsi3+0x6c>
 800a844:	01800804 	movi	r6,32
 800a848:	00c00044 	movi	r3,1
 800a84c:	00000106 	br	800a854 <__modsi3+0x24>
 800a850:	30000a26 	beq	r6,zero,800a87c <__modsi3+0x4c>
 800a854:	294b883a 	add	r5,r5,r5
 800a858:	31bfffc4 	addi	r6,r6,-1
 800a85c:	18c7883a 	add	r3,r3,r3
 800a860:	293ffb36 	bltu	r5,r4,800a850 <__alt_data_end+0xf800a850>
 800a864:	18000526 	beq	r3,zero,800a87c <__modsi3+0x4c>
 800a868:	1806d07a 	srli	r3,r3,1
 800a86c:	11400136 	bltu	r2,r5,800a874 <__modsi3+0x44>
 800a870:	1145c83a 	sub	r2,r2,r5
 800a874:	280ad07a 	srli	r5,r5,1
 800a878:	183ffb1e 	bne	r3,zero,800a868 <__alt_data_end+0xf800a868>
 800a87c:	38000126 	beq	r7,zero,800a884 <__modsi3+0x54>
 800a880:	0085c83a 	sub	r2,zero,r2
 800a884:	f800283a 	ret
 800a888:	014bc83a 	sub	r5,zero,r5
 800a88c:	003fec06 	br	800a840 <__alt_data_end+0xf800a840>
 800a890:	0109c83a 	sub	r4,zero,r4
 800a894:	01c00044 	movi	r7,1
 800a898:	003fe706 	br	800a838 <__alt_data_end+0xf800a838>
 800a89c:	00c00044 	movi	r3,1
 800a8a0:	003ff106 	br	800a868 <__alt_data_end+0xf800a868>

0800a8a4 <__udivsi3>:
 800a8a4:	200d883a 	mov	r6,r4
 800a8a8:	2900152e 	bgeu	r5,r4,800a900 <__udivsi3+0x5c>
 800a8ac:	28001416 	blt	r5,zero,800a900 <__udivsi3+0x5c>
 800a8b0:	00800804 	movi	r2,32
 800a8b4:	00c00044 	movi	r3,1
 800a8b8:	00000206 	br	800a8c4 <__udivsi3+0x20>
 800a8bc:	10000e26 	beq	r2,zero,800a8f8 <__udivsi3+0x54>
 800a8c0:	28000516 	blt	r5,zero,800a8d8 <__udivsi3+0x34>
 800a8c4:	294b883a 	add	r5,r5,r5
 800a8c8:	10bfffc4 	addi	r2,r2,-1
 800a8cc:	18c7883a 	add	r3,r3,r3
 800a8d0:	293ffa36 	bltu	r5,r4,800a8bc <__alt_data_end+0xf800a8bc>
 800a8d4:	18000826 	beq	r3,zero,800a8f8 <__udivsi3+0x54>
 800a8d8:	0005883a 	mov	r2,zero
 800a8dc:	31400236 	bltu	r6,r5,800a8e8 <__udivsi3+0x44>
 800a8e0:	314dc83a 	sub	r6,r6,r5
 800a8e4:	10c4b03a 	or	r2,r2,r3
 800a8e8:	1806d07a 	srli	r3,r3,1
 800a8ec:	280ad07a 	srli	r5,r5,1
 800a8f0:	183ffa1e 	bne	r3,zero,800a8dc <__alt_data_end+0xf800a8dc>
 800a8f4:	f800283a 	ret
 800a8f8:	0005883a 	mov	r2,zero
 800a8fc:	f800283a 	ret
 800a900:	00c00044 	movi	r3,1
 800a904:	003ff406 	br	800a8d8 <__alt_data_end+0xf800a8d8>

0800a908 <__umodsi3>:
 800a908:	2005883a 	mov	r2,r4
 800a90c:	2900122e 	bgeu	r5,r4,800a958 <__umodsi3+0x50>
 800a910:	28001116 	blt	r5,zero,800a958 <__umodsi3+0x50>
 800a914:	01800804 	movi	r6,32
 800a918:	00c00044 	movi	r3,1
 800a91c:	00000206 	br	800a928 <__umodsi3+0x20>
 800a920:	30000c26 	beq	r6,zero,800a954 <__umodsi3+0x4c>
 800a924:	28000516 	blt	r5,zero,800a93c <__umodsi3+0x34>
 800a928:	294b883a 	add	r5,r5,r5
 800a92c:	31bfffc4 	addi	r6,r6,-1
 800a930:	18c7883a 	add	r3,r3,r3
 800a934:	293ffa36 	bltu	r5,r4,800a920 <__alt_data_end+0xf800a920>
 800a938:	18000626 	beq	r3,zero,800a954 <__umodsi3+0x4c>
 800a93c:	1806d07a 	srli	r3,r3,1
 800a940:	11400136 	bltu	r2,r5,800a948 <__umodsi3+0x40>
 800a944:	1145c83a 	sub	r2,r2,r5
 800a948:	280ad07a 	srli	r5,r5,1
 800a94c:	183ffb1e 	bne	r3,zero,800a93c <__alt_data_end+0xf800a93c>
 800a950:	f800283a 	ret
 800a954:	f800283a 	ret
 800a958:	00c00044 	movi	r3,1
 800a95c:	003ff706 	br	800a93c <__alt_data_end+0xf800a93c>

0800a960 <__adddf3>:
 800a960:	02c00434 	movhi	r11,16
 800a964:	5affffc4 	addi	r11,r11,-1
 800a968:	2806d7fa 	srli	r3,r5,31
 800a96c:	2ad4703a 	and	r10,r5,r11
 800a970:	3ad2703a 	and	r9,r7,r11
 800a974:	3804d53a 	srli	r2,r7,20
 800a978:	3018d77a 	srli	r12,r6,29
 800a97c:	280ad53a 	srli	r5,r5,20
 800a980:	501490fa 	slli	r10,r10,3
 800a984:	2010d77a 	srli	r8,r4,29
 800a988:	481290fa 	slli	r9,r9,3
 800a98c:	380ed7fa 	srli	r7,r7,31
 800a990:	defffb04 	addi	sp,sp,-20
 800a994:	dc800215 	stw	r18,8(sp)
 800a998:	dc400115 	stw	r17,4(sp)
 800a99c:	dc000015 	stw	r16,0(sp)
 800a9a0:	dfc00415 	stw	ra,16(sp)
 800a9a4:	dcc00315 	stw	r19,12(sp)
 800a9a8:	1c803fcc 	andi	r18,r3,255
 800a9ac:	2c01ffcc 	andi	r16,r5,2047
 800a9b0:	5210b03a 	or	r8,r10,r8
 800a9b4:	202290fa 	slli	r17,r4,3
 800a9b8:	1081ffcc 	andi	r2,r2,2047
 800a9bc:	4b12b03a 	or	r9,r9,r12
 800a9c0:	300c90fa 	slli	r6,r6,3
 800a9c4:	91c07526 	beq	r18,r7,800ab9c <__adddf3+0x23c>
 800a9c8:	8087c83a 	sub	r3,r16,r2
 800a9cc:	00c0ab0e 	bge	zero,r3,800ac7c <__adddf3+0x31c>
 800a9d0:	10002a1e 	bne	r2,zero,800aa7c <__adddf3+0x11c>
 800a9d4:	4984b03a 	or	r2,r9,r6
 800a9d8:	1000961e 	bne	r2,zero,800ac34 <__adddf3+0x2d4>
 800a9dc:	888001cc 	andi	r2,r17,7
 800a9e0:	10000726 	beq	r2,zero,800aa00 <__adddf3+0xa0>
 800a9e4:	888003cc 	andi	r2,r17,15
 800a9e8:	00c00104 	movi	r3,4
 800a9ec:	10c00426 	beq	r2,r3,800aa00 <__adddf3+0xa0>
 800a9f0:	88c7883a 	add	r3,r17,r3
 800a9f4:	1c63803a 	cmpltu	r17,r3,r17
 800a9f8:	4451883a 	add	r8,r8,r17
 800a9fc:	1823883a 	mov	r17,r3
 800aa00:	4080202c 	andhi	r2,r8,128
 800aa04:	10005926 	beq	r2,zero,800ab6c <__adddf3+0x20c>
 800aa08:	84000044 	addi	r16,r16,1
 800aa0c:	0081ffc4 	movi	r2,2047
 800aa10:	8080ba26 	beq	r16,r2,800acfc <__adddf3+0x39c>
 800aa14:	00bfe034 	movhi	r2,65408
 800aa18:	10bfffc4 	addi	r2,r2,-1
 800aa1c:	4090703a 	and	r8,r8,r2
 800aa20:	4004977a 	slli	r2,r8,29
 800aa24:	4010927a 	slli	r8,r8,9
 800aa28:	8822d0fa 	srli	r17,r17,3
 800aa2c:	8401ffcc 	andi	r16,r16,2047
 800aa30:	4010d33a 	srli	r8,r8,12
 800aa34:	9007883a 	mov	r3,r18
 800aa38:	1444b03a 	or	r2,r2,r17
 800aa3c:	8401ffcc 	andi	r16,r16,2047
 800aa40:	8020953a 	slli	r16,r16,20
 800aa44:	18c03fcc 	andi	r3,r3,255
 800aa48:	01000434 	movhi	r4,16
 800aa4c:	213fffc4 	addi	r4,r4,-1
 800aa50:	180697fa 	slli	r3,r3,31
 800aa54:	4110703a 	and	r8,r8,r4
 800aa58:	4410b03a 	or	r8,r8,r16
 800aa5c:	40c6b03a 	or	r3,r8,r3
 800aa60:	dfc00417 	ldw	ra,16(sp)
 800aa64:	dcc00317 	ldw	r19,12(sp)
 800aa68:	dc800217 	ldw	r18,8(sp)
 800aa6c:	dc400117 	ldw	r17,4(sp)
 800aa70:	dc000017 	ldw	r16,0(sp)
 800aa74:	dec00504 	addi	sp,sp,20
 800aa78:	f800283a 	ret
 800aa7c:	0081ffc4 	movi	r2,2047
 800aa80:	80bfd626 	beq	r16,r2,800a9dc <__alt_data_end+0xf800a9dc>
 800aa84:	4a402034 	orhi	r9,r9,128
 800aa88:	00800e04 	movi	r2,56
 800aa8c:	10c09f16 	blt	r2,r3,800ad0c <__adddf3+0x3ac>
 800aa90:	008007c4 	movi	r2,31
 800aa94:	10c0c216 	blt	r2,r3,800ada0 <__adddf3+0x440>
 800aa98:	00800804 	movi	r2,32
 800aa9c:	10c5c83a 	sub	r2,r2,r3
 800aaa0:	488a983a 	sll	r5,r9,r2
 800aaa4:	30c8d83a 	srl	r4,r6,r3
 800aaa8:	3084983a 	sll	r2,r6,r2
 800aaac:	48c6d83a 	srl	r3,r9,r3
 800aab0:	290cb03a 	or	r6,r5,r4
 800aab4:	1004c03a 	cmpne	r2,r2,zero
 800aab8:	308cb03a 	or	r6,r6,r2
 800aabc:	898dc83a 	sub	r6,r17,r6
 800aac0:	89a3803a 	cmpltu	r17,r17,r6
 800aac4:	40d1c83a 	sub	r8,r8,r3
 800aac8:	4451c83a 	sub	r8,r8,r17
 800aacc:	3023883a 	mov	r17,r6
 800aad0:	4080202c 	andhi	r2,r8,128
 800aad4:	10002326 	beq	r2,zero,800ab64 <__adddf3+0x204>
 800aad8:	04c02034 	movhi	r19,128
 800aadc:	9cffffc4 	addi	r19,r19,-1
 800aae0:	44e6703a 	and	r19,r8,r19
 800aae4:	98007626 	beq	r19,zero,800acc0 <__adddf3+0x360>
 800aae8:	9809883a 	mov	r4,r19
 800aaec:	800cf640 	call	800cf64 <__clzsi2>
 800aaf0:	10fffe04 	addi	r3,r2,-8
 800aaf4:	010007c4 	movi	r4,31
 800aaf8:	20c07716 	blt	r4,r3,800acd8 <__adddf3+0x378>
 800aafc:	00800804 	movi	r2,32
 800ab00:	10c5c83a 	sub	r2,r2,r3
 800ab04:	8884d83a 	srl	r2,r17,r2
 800ab08:	98d0983a 	sll	r8,r19,r3
 800ab0c:	88e2983a 	sll	r17,r17,r3
 800ab10:	1204b03a 	or	r2,r2,r8
 800ab14:	1c007416 	blt	r3,r16,800ace8 <__adddf3+0x388>
 800ab18:	1c21c83a 	sub	r16,r3,r16
 800ab1c:	82000044 	addi	r8,r16,1
 800ab20:	00c007c4 	movi	r3,31
 800ab24:	1a009116 	blt	r3,r8,800ad6c <__adddf3+0x40c>
 800ab28:	00c00804 	movi	r3,32
 800ab2c:	1a07c83a 	sub	r3,r3,r8
 800ab30:	8a08d83a 	srl	r4,r17,r8
 800ab34:	88e2983a 	sll	r17,r17,r3
 800ab38:	10c6983a 	sll	r3,r2,r3
 800ab3c:	1210d83a 	srl	r8,r2,r8
 800ab40:	8804c03a 	cmpne	r2,r17,zero
 800ab44:	1906b03a 	or	r3,r3,r4
 800ab48:	18a2b03a 	or	r17,r3,r2
 800ab4c:	0021883a 	mov	r16,zero
 800ab50:	003fa206 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800ab54:	1890b03a 	or	r8,r3,r2
 800ab58:	40017d26 	beq	r8,zero,800b150 <__adddf3+0x7f0>
 800ab5c:	1011883a 	mov	r8,r2
 800ab60:	1823883a 	mov	r17,r3
 800ab64:	888001cc 	andi	r2,r17,7
 800ab68:	103f9e1e 	bne	r2,zero,800a9e4 <__alt_data_end+0xf800a9e4>
 800ab6c:	4004977a 	slli	r2,r8,29
 800ab70:	8822d0fa 	srli	r17,r17,3
 800ab74:	4010d0fa 	srli	r8,r8,3
 800ab78:	9007883a 	mov	r3,r18
 800ab7c:	1444b03a 	or	r2,r2,r17
 800ab80:	0101ffc4 	movi	r4,2047
 800ab84:	81002426 	beq	r16,r4,800ac18 <__adddf3+0x2b8>
 800ab88:	8120703a 	and	r16,r16,r4
 800ab8c:	01000434 	movhi	r4,16
 800ab90:	213fffc4 	addi	r4,r4,-1
 800ab94:	4110703a 	and	r8,r8,r4
 800ab98:	003fa806 	br	800aa3c <__alt_data_end+0xf800aa3c>
 800ab9c:	8089c83a 	sub	r4,r16,r2
 800aba0:	01005e0e 	bge	zero,r4,800ad1c <__adddf3+0x3bc>
 800aba4:	10002b26 	beq	r2,zero,800ac54 <__adddf3+0x2f4>
 800aba8:	0081ffc4 	movi	r2,2047
 800abac:	80bf8b26 	beq	r16,r2,800a9dc <__alt_data_end+0xf800a9dc>
 800abb0:	4a402034 	orhi	r9,r9,128
 800abb4:	00800e04 	movi	r2,56
 800abb8:	1100a40e 	bge	r2,r4,800ae4c <__adddf3+0x4ec>
 800abbc:	498cb03a 	or	r6,r9,r6
 800abc0:	300ac03a 	cmpne	r5,r6,zero
 800abc4:	0013883a 	mov	r9,zero
 800abc8:	2c4b883a 	add	r5,r5,r17
 800abcc:	2c63803a 	cmpltu	r17,r5,r17
 800abd0:	4a11883a 	add	r8,r9,r8
 800abd4:	8a11883a 	add	r8,r17,r8
 800abd8:	2823883a 	mov	r17,r5
 800abdc:	4080202c 	andhi	r2,r8,128
 800abe0:	103fe026 	beq	r2,zero,800ab64 <__alt_data_end+0xf800ab64>
 800abe4:	84000044 	addi	r16,r16,1
 800abe8:	0081ffc4 	movi	r2,2047
 800abec:	8080d226 	beq	r16,r2,800af38 <__adddf3+0x5d8>
 800abf0:	00bfe034 	movhi	r2,65408
 800abf4:	10bfffc4 	addi	r2,r2,-1
 800abf8:	4090703a 	and	r8,r8,r2
 800abfc:	880ad07a 	srli	r5,r17,1
 800ac00:	400897fa 	slli	r4,r8,31
 800ac04:	88c0004c 	andi	r3,r17,1
 800ac08:	28e2b03a 	or	r17,r5,r3
 800ac0c:	4010d07a 	srli	r8,r8,1
 800ac10:	2462b03a 	or	r17,r4,r17
 800ac14:	003f7106 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800ac18:	4088b03a 	or	r4,r8,r2
 800ac1c:	20014526 	beq	r4,zero,800b134 <__adddf3+0x7d4>
 800ac20:	01000434 	movhi	r4,16
 800ac24:	42000234 	orhi	r8,r8,8
 800ac28:	213fffc4 	addi	r4,r4,-1
 800ac2c:	4110703a 	and	r8,r8,r4
 800ac30:	003f8206 	br	800aa3c <__alt_data_end+0xf800aa3c>
 800ac34:	18ffffc4 	addi	r3,r3,-1
 800ac38:	1800491e 	bne	r3,zero,800ad60 <__adddf3+0x400>
 800ac3c:	898bc83a 	sub	r5,r17,r6
 800ac40:	8963803a 	cmpltu	r17,r17,r5
 800ac44:	4251c83a 	sub	r8,r8,r9
 800ac48:	4451c83a 	sub	r8,r8,r17
 800ac4c:	2823883a 	mov	r17,r5
 800ac50:	003f9f06 	br	800aad0 <__alt_data_end+0xf800aad0>
 800ac54:	4984b03a 	or	r2,r9,r6
 800ac58:	103f6026 	beq	r2,zero,800a9dc <__alt_data_end+0xf800a9dc>
 800ac5c:	213fffc4 	addi	r4,r4,-1
 800ac60:	2000931e 	bne	r4,zero,800aeb0 <__adddf3+0x550>
 800ac64:	898d883a 	add	r6,r17,r6
 800ac68:	3463803a 	cmpltu	r17,r6,r17
 800ac6c:	4251883a 	add	r8,r8,r9
 800ac70:	8a11883a 	add	r8,r17,r8
 800ac74:	3023883a 	mov	r17,r6
 800ac78:	003fd806 	br	800abdc <__alt_data_end+0xf800abdc>
 800ac7c:	1800541e 	bne	r3,zero,800add0 <__adddf3+0x470>
 800ac80:	80800044 	addi	r2,r16,1
 800ac84:	1081ffcc 	andi	r2,r2,2047
 800ac88:	00c00044 	movi	r3,1
 800ac8c:	1880a00e 	bge	r3,r2,800af10 <__adddf3+0x5b0>
 800ac90:	8989c83a 	sub	r4,r17,r6
 800ac94:	8905803a 	cmpltu	r2,r17,r4
 800ac98:	4267c83a 	sub	r19,r8,r9
 800ac9c:	98a7c83a 	sub	r19,r19,r2
 800aca0:	9880202c 	andhi	r2,r19,128
 800aca4:	10006326 	beq	r2,zero,800ae34 <__adddf3+0x4d4>
 800aca8:	3463c83a 	sub	r17,r6,r17
 800acac:	4a07c83a 	sub	r3,r9,r8
 800acb0:	344d803a 	cmpltu	r6,r6,r17
 800acb4:	19a7c83a 	sub	r19,r3,r6
 800acb8:	3825883a 	mov	r18,r7
 800acbc:	983f8a1e 	bne	r19,zero,800aae8 <__alt_data_end+0xf800aae8>
 800acc0:	8809883a 	mov	r4,r17
 800acc4:	800cf640 	call	800cf64 <__clzsi2>
 800acc8:	10800804 	addi	r2,r2,32
 800accc:	10fffe04 	addi	r3,r2,-8
 800acd0:	010007c4 	movi	r4,31
 800acd4:	20ff890e 	bge	r4,r3,800aafc <__alt_data_end+0xf800aafc>
 800acd8:	10bff604 	addi	r2,r2,-40
 800acdc:	8884983a 	sll	r2,r17,r2
 800ace0:	0023883a 	mov	r17,zero
 800ace4:	1c3f8c0e 	bge	r3,r16,800ab18 <__alt_data_end+0xf800ab18>
 800ace8:	023fe034 	movhi	r8,65408
 800acec:	423fffc4 	addi	r8,r8,-1
 800acf0:	80e1c83a 	sub	r16,r16,r3
 800acf4:	1210703a 	and	r8,r2,r8
 800acf8:	003f3806 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800acfc:	9007883a 	mov	r3,r18
 800ad00:	0011883a 	mov	r8,zero
 800ad04:	0005883a 	mov	r2,zero
 800ad08:	003f4c06 	br	800aa3c <__alt_data_end+0xf800aa3c>
 800ad0c:	498cb03a 	or	r6,r9,r6
 800ad10:	300cc03a 	cmpne	r6,r6,zero
 800ad14:	0007883a 	mov	r3,zero
 800ad18:	003f6806 	br	800aabc <__alt_data_end+0xf800aabc>
 800ad1c:	20009c1e 	bne	r4,zero,800af90 <__adddf3+0x630>
 800ad20:	80800044 	addi	r2,r16,1
 800ad24:	1141ffcc 	andi	r5,r2,2047
 800ad28:	01000044 	movi	r4,1
 800ad2c:	2140670e 	bge	r4,r5,800aecc <__adddf3+0x56c>
 800ad30:	0101ffc4 	movi	r4,2047
 800ad34:	11007f26 	beq	r2,r4,800af34 <__adddf3+0x5d4>
 800ad38:	898d883a 	add	r6,r17,r6
 800ad3c:	4247883a 	add	r3,r8,r9
 800ad40:	3451803a 	cmpltu	r8,r6,r17
 800ad44:	40d1883a 	add	r8,r8,r3
 800ad48:	402297fa 	slli	r17,r8,31
 800ad4c:	300cd07a 	srli	r6,r6,1
 800ad50:	4010d07a 	srli	r8,r8,1
 800ad54:	1021883a 	mov	r16,r2
 800ad58:	89a2b03a 	or	r17,r17,r6
 800ad5c:	003f1f06 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800ad60:	0081ffc4 	movi	r2,2047
 800ad64:	80bf481e 	bne	r16,r2,800aa88 <__alt_data_end+0xf800aa88>
 800ad68:	003f1c06 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800ad6c:	843ff844 	addi	r16,r16,-31
 800ad70:	01000804 	movi	r4,32
 800ad74:	1406d83a 	srl	r3,r2,r16
 800ad78:	41005026 	beq	r8,r4,800aebc <__adddf3+0x55c>
 800ad7c:	01001004 	movi	r4,64
 800ad80:	2211c83a 	sub	r8,r4,r8
 800ad84:	1204983a 	sll	r2,r2,r8
 800ad88:	88a2b03a 	or	r17,r17,r2
 800ad8c:	8822c03a 	cmpne	r17,r17,zero
 800ad90:	1c62b03a 	or	r17,r3,r17
 800ad94:	0011883a 	mov	r8,zero
 800ad98:	0021883a 	mov	r16,zero
 800ad9c:	003f7106 	br	800ab64 <__alt_data_end+0xf800ab64>
 800ada0:	193ff804 	addi	r4,r3,-32
 800ada4:	00800804 	movi	r2,32
 800ada8:	4908d83a 	srl	r4,r9,r4
 800adac:	18804526 	beq	r3,r2,800aec4 <__adddf3+0x564>
 800adb0:	00801004 	movi	r2,64
 800adb4:	10c5c83a 	sub	r2,r2,r3
 800adb8:	4886983a 	sll	r3,r9,r2
 800adbc:	198cb03a 	or	r6,r3,r6
 800adc0:	300cc03a 	cmpne	r6,r6,zero
 800adc4:	218cb03a 	or	r6,r4,r6
 800adc8:	0007883a 	mov	r3,zero
 800adcc:	003f3b06 	br	800aabc <__alt_data_end+0xf800aabc>
 800add0:	80002a26 	beq	r16,zero,800ae7c <__adddf3+0x51c>
 800add4:	0101ffc4 	movi	r4,2047
 800add8:	11006826 	beq	r2,r4,800af7c <__adddf3+0x61c>
 800addc:	00c7c83a 	sub	r3,zero,r3
 800ade0:	42002034 	orhi	r8,r8,128
 800ade4:	01000e04 	movi	r4,56
 800ade8:	20c07c16 	blt	r4,r3,800afdc <__adddf3+0x67c>
 800adec:	010007c4 	movi	r4,31
 800adf0:	20c0da16 	blt	r4,r3,800b15c <__adddf3+0x7fc>
 800adf4:	01000804 	movi	r4,32
 800adf8:	20c9c83a 	sub	r4,r4,r3
 800adfc:	4114983a 	sll	r10,r8,r4
 800ae00:	88cad83a 	srl	r5,r17,r3
 800ae04:	8908983a 	sll	r4,r17,r4
 800ae08:	40c6d83a 	srl	r3,r8,r3
 800ae0c:	5162b03a 	or	r17,r10,r5
 800ae10:	2008c03a 	cmpne	r4,r4,zero
 800ae14:	8922b03a 	or	r17,r17,r4
 800ae18:	3463c83a 	sub	r17,r6,r17
 800ae1c:	48c7c83a 	sub	r3,r9,r3
 800ae20:	344d803a 	cmpltu	r6,r6,r17
 800ae24:	1991c83a 	sub	r8,r3,r6
 800ae28:	1021883a 	mov	r16,r2
 800ae2c:	3825883a 	mov	r18,r7
 800ae30:	003f2706 	br	800aad0 <__alt_data_end+0xf800aad0>
 800ae34:	24d0b03a 	or	r8,r4,r19
 800ae38:	40001b1e 	bne	r8,zero,800aea8 <__adddf3+0x548>
 800ae3c:	0005883a 	mov	r2,zero
 800ae40:	0007883a 	mov	r3,zero
 800ae44:	0021883a 	mov	r16,zero
 800ae48:	003f4d06 	br	800ab80 <__alt_data_end+0xf800ab80>
 800ae4c:	008007c4 	movi	r2,31
 800ae50:	11003c16 	blt	r2,r4,800af44 <__adddf3+0x5e4>
 800ae54:	00800804 	movi	r2,32
 800ae58:	1105c83a 	sub	r2,r2,r4
 800ae5c:	488e983a 	sll	r7,r9,r2
 800ae60:	310ad83a 	srl	r5,r6,r4
 800ae64:	3084983a 	sll	r2,r6,r2
 800ae68:	4912d83a 	srl	r9,r9,r4
 800ae6c:	394ab03a 	or	r5,r7,r5
 800ae70:	1004c03a 	cmpne	r2,r2,zero
 800ae74:	288ab03a 	or	r5,r5,r2
 800ae78:	003f5306 	br	800abc8 <__alt_data_end+0xf800abc8>
 800ae7c:	4448b03a 	or	r4,r8,r17
 800ae80:	20003e26 	beq	r4,zero,800af7c <__adddf3+0x61c>
 800ae84:	00c6303a 	nor	r3,zero,r3
 800ae88:	18003a1e 	bne	r3,zero,800af74 <__adddf3+0x614>
 800ae8c:	3463c83a 	sub	r17,r6,r17
 800ae90:	4a07c83a 	sub	r3,r9,r8
 800ae94:	344d803a 	cmpltu	r6,r6,r17
 800ae98:	1991c83a 	sub	r8,r3,r6
 800ae9c:	1021883a 	mov	r16,r2
 800aea0:	3825883a 	mov	r18,r7
 800aea4:	003f0a06 	br	800aad0 <__alt_data_end+0xf800aad0>
 800aea8:	2023883a 	mov	r17,r4
 800aeac:	003f0d06 	br	800aae4 <__alt_data_end+0xf800aae4>
 800aeb0:	0081ffc4 	movi	r2,2047
 800aeb4:	80bf3f1e 	bne	r16,r2,800abb4 <__alt_data_end+0xf800abb4>
 800aeb8:	003ec806 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800aebc:	0005883a 	mov	r2,zero
 800aec0:	003fb106 	br	800ad88 <__alt_data_end+0xf800ad88>
 800aec4:	0007883a 	mov	r3,zero
 800aec8:	003fbc06 	br	800adbc <__alt_data_end+0xf800adbc>
 800aecc:	4444b03a 	or	r2,r8,r17
 800aed0:	8000871e 	bne	r16,zero,800b0f0 <__adddf3+0x790>
 800aed4:	1000ba26 	beq	r2,zero,800b1c0 <__adddf3+0x860>
 800aed8:	4984b03a 	or	r2,r9,r6
 800aedc:	103ebf26 	beq	r2,zero,800a9dc <__alt_data_end+0xf800a9dc>
 800aee0:	8985883a 	add	r2,r17,r6
 800aee4:	4247883a 	add	r3,r8,r9
 800aee8:	1451803a 	cmpltu	r8,r2,r17
 800aeec:	40d1883a 	add	r8,r8,r3
 800aef0:	40c0202c 	andhi	r3,r8,128
 800aef4:	1023883a 	mov	r17,r2
 800aef8:	183f1a26 	beq	r3,zero,800ab64 <__alt_data_end+0xf800ab64>
 800aefc:	00bfe034 	movhi	r2,65408
 800af00:	10bfffc4 	addi	r2,r2,-1
 800af04:	2021883a 	mov	r16,r4
 800af08:	4090703a 	and	r8,r8,r2
 800af0c:	003eb306 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800af10:	4444b03a 	or	r2,r8,r17
 800af14:	8000291e 	bne	r16,zero,800afbc <__adddf3+0x65c>
 800af18:	10004b1e 	bne	r2,zero,800b048 <__adddf3+0x6e8>
 800af1c:	4990b03a 	or	r8,r9,r6
 800af20:	40008b26 	beq	r8,zero,800b150 <__adddf3+0x7f0>
 800af24:	4811883a 	mov	r8,r9
 800af28:	3023883a 	mov	r17,r6
 800af2c:	3825883a 	mov	r18,r7
 800af30:	003eaa06 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800af34:	1021883a 	mov	r16,r2
 800af38:	0011883a 	mov	r8,zero
 800af3c:	0005883a 	mov	r2,zero
 800af40:	003f0f06 	br	800ab80 <__alt_data_end+0xf800ab80>
 800af44:	217ff804 	addi	r5,r4,-32
 800af48:	00800804 	movi	r2,32
 800af4c:	494ad83a 	srl	r5,r9,r5
 800af50:	20807d26 	beq	r4,r2,800b148 <__adddf3+0x7e8>
 800af54:	00801004 	movi	r2,64
 800af58:	1109c83a 	sub	r4,r2,r4
 800af5c:	4912983a 	sll	r9,r9,r4
 800af60:	498cb03a 	or	r6,r9,r6
 800af64:	300cc03a 	cmpne	r6,r6,zero
 800af68:	298ab03a 	or	r5,r5,r6
 800af6c:	0013883a 	mov	r9,zero
 800af70:	003f1506 	br	800abc8 <__alt_data_end+0xf800abc8>
 800af74:	0101ffc4 	movi	r4,2047
 800af78:	113f9a1e 	bne	r2,r4,800ade4 <__alt_data_end+0xf800ade4>
 800af7c:	4811883a 	mov	r8,r9
 800af80:	3023883a 	mov	r17,r6
 800af84:	1021883a 	mov	r16,r2
 800af88:	3825883a 	mov	r18,r7
 800af8c:	003e9306 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800af90:	8000161e 	bne	r16,zero,800afec <__adddf3+0x68c>
 800af94:	444ab03a 	or	r5,r8,r17
 800af98:	28005126 	beq	r5,zero,800b0e0 <__adddf3+0x780>
 800af9c:	0108303a 	nor	r4,zero,r4
 800afa0:	20004d1e 	bne	r4,zero,800b0d8 <__adddf3+0x778>
 800afa4:	89a3883a 	add	r17,r17,r6
 800afa8:	4253883a 	add	r9,r8,r9
 800afac:	898d803a 	cmpltu	r6,r17,r6
 800afb0:	3251883a 	add	r8,r6,r9
 800afb4:	1021883a 	mov	r16,r2
 800afb8:	003f0806 	br	800abdc <__alt_data_end+0xf800abdc>
 800afbc:	1000301e 	bne	r2,zero,800b080 <__adddf3+0x720>
 800afc0:	4984b03a 	or	r2,r9,r6
 800afc4:	10007126 	beq	r2,zero,800b18c <__adddf3+0x82c>
 800afc8:	4811883a 	mov	r8,r9
 800afcc:	3023883a 	mov	r17,r6
 800afd0:	3825883a 	mov	r18,r7
 800afd4:	0401ffc4 	movi	r16,2047
 800afd8:	003e8006 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800afdc:	4462b03a 	or	r17,r8,r17
 800afe0:	8822c03a 	cmpne	r17,r17,zero
 800afe4:	0007883a 	mov	r3,zero
 800afe8:	003f8b06 	br	800ae18 <__alt_data_end+0xf800ae18>
 800afec:	0141ffc4 	movi	r5,2047
 800aff0:	11403b26 	beq	r2,r5,800b0e0 <__adddf3+0x780>
 800aff4:	0109c83a 	sub	r4,zero,r4
 800aff8:	42002034 	orhi	r8,r8,128
 800affc:	01400e04 	movi	r5,56
 800b000:	29006716 	blt	r5,r4,800b1a0 <__adddf3+0x840>
 800b004:	014007c4 	movi	r5,31
 800b008:	29007016 	blt	r5,r4,800b1cc <__adddf3+0x86c>
 800b00c:	01400804 	movi	r5,32
 800b010:	290bc83a 	sub	r5,r5,r4
 800b014:	4154983a 	sll	r10,r8,r5
 800b018:	890ed83a 	srl	r7,r17,r4
 800b01c:	894a983a 	sll	r5,r17,r5
 800b020:	4108d83a 	srl	r4,r8,r4
 800b024:	51e2b03a 	or	r17,r10,r7
 800b028:	280ac03a 	cmpne	r5,r5,zero
 800b02c:	8962b03a 	or	r17,r17,r5
 800b030:	89a3883a 	add	r17,r17,r6
 800b034:	2253883a 	add	r9,r4,r9
 800b038:	898d803a 	cmpltu	r6,r17,r6
 800b03c:	3251883a 	add	r8,r6,r9
 800b040:	1021883a 	mov	r16,r2
 800b044:	003ee506 	br	800abdc <__alt_data_end+0xf800abdc>
 800b048:	4984b03a 	or	r2,r9,r6
 800b04c:	103e6326 	beq	r2,zero,800a9dc <__alt_data_end+0xf800a9dc>
 800b050:	8987c83a 	sub	r3,r17,r6
 800b054:	88c9803a 	cmpltu	r4,r17,r3
 800b058:	4245c83a 	sub	r2,r8,r9
 800b05c:	1105c83a 	sub	r2,r2,r4
 800b060:	1100202c 	andhi	r4,r2,128
 800b064:	203ebb26 	beq	r4,zero,800ab54 <__alt_data_end+0xf800ab54>
 800b068:	3463c83a 	sub	r17,r6,r17
 800b06c:	4a07c83a 	sub	r3,r9,r8
 800b070:	344d803a 	cmpltu	r6,r6,r17
 800b074:	1991c83a 	sub	r8,r3,r6
 800b078:	3825883a 	mov	r18,r7
 800b07c:	003e5706 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b080:	4984b03a 	or	r2,r9,r6
 800b084:	10002e26 	beq	r2,zero,800b140 <__adddf3+0x7e0>
 800b088:	4004d0fa 	srli	r2,r8,3
 800b08c:	8822d0fa 	srli	r17,r17,3
 800b090:	4010977a 	slli	r8,r8,29
 800b094:	10c0022c 	andhi	r3,r2,8
 800b098:	4462b03a 	or	r17,r8,r17
 800b09c:	18000826 	beq	r3,zero,800b0c0 <__adddf3+0x760>
 800b0a0:	4808d0fa 	srli	r4,r9,3
 800b0a4:	20c0022c 	andhi	r3,r4,8
 800b0a8:	1800051e 	bne	r3,zero,800b0c0 <__adddf3+0x760>
 800b0ac:	300cd0fa 	srli	r6,r6,3
 800b0b0:	4806977a 	slli	r3,r9,29
 800b0b4:	2005883a 	mov	r2,r4
 800b0b8:	3825883a 	mov	r18,r7
 800b0bc:	19a2b03a 	or	r17,r3,r6
 800b0c0:	8810d77a 	srli	r8,r17,29
 800b0c4:	100490fa 	slli	r2,r2,3
 800b0c8:	882290fa 	slli	r17,r17,3
 800b0cc:	0401ffc4 	movi	r16,2047
 800b0d0:	4090b03a 	or	r8,r8,r2
 800b0d4:	003e4106 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b0d8:	0141ffc4 	movi	r5,2047
 800b0dc:	117fc71e 	bne	r2,r5,800affc <__alt_data_end+0xf800affc>
 800b0e0:	4811883a 	mov	r8,r9
 800b0e4:	3023883a 	mov	r17,r6
 800b0e8:	1021883a 	mov	r16,r2
 800b0ec:	003e3b06 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b0f0:	10002f26 	beq	r2,zero,800b1b0 <__adddf3+0x850>
 800b0f4:	4984b03a 	or	r2,r9,r6
 800b0f8:	10001126 	beq	r2,zero,800b140 <__adddf3+0x7e0>
 800b0fc:	4004d0fa 	srli	r2,r8,3
 800b100:	8822d0fa 	srli	r17,r17,3
 800b104:	4010977a 	slli	r8,r8,29
 800b108:	10c0022c 	andhi	r3,r2,8
 800b10c:	4462b03a 	or	r17,r8,r17
 800b110:	183feb26 	beq	r3,zero,800b0c0 <__alt_data_end+0xf800b0c0>
 800b114:	4808d0fa 	srli	r4,r9,3
 800b118:	20c0022c 	andhi	r3,r4,8
 800b11c:	183fe81e 	bne	r3,zero,800b0c0 <__alt_data_end+0xf800b0c0>
 800b120:	300cd0fa 	srli	r6,r6,3
 800b124:	4806977a 	slli	r3,r9,29
 800b128:	2005883a 	mov	r2,r4
 800b12c:	19a2b03a 	or	r17,r3,r6
 800b130:	003fe306 	br	800b0c0 <__alt_data_end+0xf800b0c0>
 800b134:	0011883a 	mov	r8,zero
 800b138:	0005883a 	mov	r2,zero
 800b13c:	003e3f06 	br	800aa3c <__alt_data_end+0xf800aa3c>
 800b140:	0401ffc4 	movi	r16,2047
 800b144:	003e2506 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b148:	0013883a 	mov	r9,zero
 800b14c:	003f8406 	br	800af60 <__alt_data_end+0xf800af60>
 800b150:	0005883a 	mov	r2,zero
 800b154:	0007883a 	mov	r3,zero
 800b158:	003e8906 	br	800ab80 <__alt_data_end+0xf800ab80>
 800b15c:	197ff804 	addi	r5,r3,-32
 800b160:	01000804 	movi	r4,32
 800b164:	414ad83a 	srl	r5,r8,r5
 800b168:	19002426 	beq	r3,r4,800b1fc <__adddf3+0x89c>
 800b16c:	01001004 	movi	r4,64
 800b170:	20c7c83a 	sub	r3,r4,r3
 800b174:	40c6983a 	sll	r3,r8,r3
 800b178:	1c46b03a 	or	r3,r3,r17
 800b17c:	1806c03a 	cmpne	r3,r3,zero
 800b180:	28e2b03a 	or	r17,r5,r3
 800b184:	0007883a 	mov	r3,zero
 800b188:	003f2306 	br	800ae18 <__alt_data_end+0xf800ae18>
 800b18c:	0007883a 	mov	r3,zero
 800b190:	5811883a 	mov	r8,r11
 800b194:	00bfffc4 	movi	r2,-1
 800b198:	0401ffc4 	movi	r16,2047
 800b19c:	003e7806 	br	800ab80 <__alt_data_end+0xf800ab80>
 800b1a0:	4462b03a 	or	r17,r8,r17
 800b1a4:	8822c03a 	cmpne	r17,r17,zero
 800b1a8:	0009883a 	mov	r4,zero
 800b1ac:	003fa006 	br	800b030 <__alt_data_end+0xf800b030>
 800b1b0:	4811883a 	mov	r8,r9
 800b1b4:	3023883a 	mov	r17,r6
 800b1b8:	0401ffc4 	movi	r16,2047
 800b1bc:	003e0706 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b1c0:	4811883a 	mov	r8,r9
 800b1c4:	3023883a 	mov	r17,r6
 800b1c8:	003e0406 	br	800a9dc <__alt_data_end+0xf800a9dc>
 800b1cc:	21fff804 	addi	r7,r4,-32
 800b1d0:	01400804 	movi	r5,32
 800b1d4:	41ced83a 	srl	r7,r8,r7
 800b1d8:	21400a26 	beq	r4,r5,800b204 <__adddf3+0x8a4>
 800b1dc:	01401004 	movi	r5,64
 800b1e0:	2909c83a 	sub	r4,r5,r4
 800b1e4:	4108983a 	sll	r4,r8,r4
 800b1e8:	2448b03a 	or	r4,r4,r17
 800b1ec:	2008c03a 	cmpne	r4,r4,zero
 800b1f0:	3922b03a 	or	r17,r7,r4
 800b1f4:	0009883a 	mov	r4,zero
 800b1f8:	003f8d06 	br	800b030 <__alt_data_end+0xf800b030>
 800b1fc:	0007883a 	mov	r3,zero
 800b200:	003fdd06 	br	800b178 <__alt_data_end+0xf800b178>
 800b204:	0009883a 	mov	r4,zero
 800b208:	003ff706 	br	800b1e8 <__alt_data_end+0xf800b1e8>

0800b20c <__divdf3>:
 800b20c:	defff204 	addi	sp,sp,-56
 800b210:	dd400915 	stw	r21,36(sp)
 800b214:	282ad53a 	srli	r21,r5,20
 800b218:	dd000815 	stw	r20,32(sp)
 800b21c:	2828d7fa 	srli	r20,r5,31
 800b220:	dc000415 	stw	r16,16(sp)
 800b224:	04000434 	movhi	r16,16
 800b228:	df000c15 	stw	fp,48(sp)
 800b22c:	843fffc4 	addi	r16,r16,-1
 800b230:	dfc00d15 	stw	ra,52(sp)
 800b234:	ddc00b15 	stw	r23,44(sp)
 800b238:	dd800a15 	stw	r22,40(sp)
 800b23c:	dcc00715 	stw	r19,28(sp)
 800b240:	dc800615 	stw	r18,24(sp)
 800b244:	dc400515 	stw	r17,20(sp)
 800b248:	ad41ffcc 	andi	r21,r21,2047
 800b24c:	2c20703a 	and	r16,r5,r16
 800b250:	a7003fcc 	andi	fp,r20,255
 800b254:	a8006126 	beq	r21,zero,800b3dc <__divdf3+0x1d0>
 800b258:	0081ffc4 	movi	r2,2047
 800b25c:	2025883a 	mov	r18,r4
 800b260:	a8803726 	beq	r21,r2,800b340 <__divdf3+0x134>
 800b264:	80800434 	orhi	r2,r16,16
 800b268:	100490fa 	slli	r2,r2,3
 800b26c:	2020d77a 	srli	r16,r4,29
 800b270:	202490fa 	slli	r18,r4,3
 800b274:	ad7f0044 	addi	r21,r21,-1023
 800b278:	80a0b03a 	or	r16,r16,r2
 800b27c:	0027883a 	mov	r19,zero
 800b280:	0013883a 	mov	r9,zero
 800b284:	3804d53a 	srli	r2,r7,20
 800b288:	382cd7fa 	srli	r22,r7,31
 800b28c:	04400434 	movhi	r17,16
 800b290:	8c7fffc4 	addi	r17,r17,-1
 800b294:	1081ffcc 	andi	r2,r2,2047
 800b298:	3011883a 	mov	r8,r6
 800b29c:	3c62703a 	and	r17,r7,r17
 800b2a0:	b5c03fcc 	andi	r23,r22,255
 800b2a4:	10006c26 	beq	r2,zero,800b458 <__divdf3+0x24c>
 800b2a8:	00c1ffc4 	movi	r3,2047
 800b2ac:	10c06426 	beq	r2,r3,800b440 <__divdf3+0x234>
 800b2b0:	88c00434 	orhi	r3,r17,16
 800b2b4:	180690fa 	slli	r3,r3,3
 800b2b8:	3022d77a 	srli	r17,r6,29
 800b2bc:	301090fa 	slli	r8,r6,3
 800b2c0:	10bf0044 	addi	r2,r2,-1023
 800b2c4:	88e2b03a 	or	r17,r17,r3
 800b2c8:	000f883a 	mov	r7,zero
 800b2cc:	a58cf03a 	xor	r6,r20,r22
 800b2d0:	3cc8b03a 	or	r4,r7,r19
 800b2d4:	a8abc83a 	sub	r21,r21,r2
 800b2d8:	008003c4 	movi	r2,15
 800b2dc:	3007883a 	mov	r3,r6
 800b2e0:	34c03fcc 	andi	r19,r6,255
 800b2e4:	11009036 	bltu	r2,r4,800b528 <__divdf3+0x31c>
 800b2e8:	200890ba 	slli	r4,r4,2
 800b2ec:	00820074 	movhi	r2,2049
 800b2f0:	10acc004 	addi	r2,r2,-19712
 800b2f4:	2089883a 	add	r4,r4,r2
 800b2f8:	20800017 	ldw	r2,0(r4)
 800b2fc:	1000683a 	jmp	r2
 800b300:	0800b528 	cmpgeui	zero,at,724
 800b304:	0800b378 	rdprs	zero,at,717
 800b308:	0800b518 	cmpnei	zero,at,724
 800b30c:	0800b36c 	andhi	zero,at,717
 800b310:	0800b518 	cmpnei	zero,at,724
 800b314:	0800b4ec 	andhi	zero,at,723
 800b318:	0800b518 	cmpnei	zero,at,724
 800b31c:	0800b36c 	andhi	zero,at,717
 800b320:	0800b378 	rdprs	zero,at,717
 800b324:	0800b378 	rdprs	zero,at,717
 800b328:	0800b4ec 	andhi	zero,at,723
 800b32c:	0800b36c 	andhi	zero,at,717
 800b330:	0800b35c 	xori	zero,at,717
 800b334:	0800b35c 	xori	zero,at,717
 800b338:	0800b35c 	xori	zero,at,717
 800b33c:	0800b80c 	andi	zero,at,736
 800b340:	2404b03a 	or	r2,r4,r16
 800b344:	1000661e 	bne	r2,zero,800b4e0 <__divdf3+0x2d4>
 800b348:	04c00204 	movi	r19,8
 800b34c:	0021883a 	mov	r16,zero
 800b350:	0025883a 	mov	r18,zero
 800b354:	02400084 	movi	r9,2
 800b358:	003fca06 	br	800b284 <__alt_data_end+0xf800b284>
 800b35c:	8023883a 	mov	r17,r16
 800b360:	9011883a 	mov	r8,r18
 800b364:	e02f883a 	mov	r23,fp
 800b368:	480f883a 	mov	r7,r9
 800b36c:	00800084 	movi	r2,2
 800b370:	3881311e 	bne	r7,r2,800b838 <__divdf3+0x62c>
 800b374:	b827883a 	mov	r19,r23
 800b378:	98c0004c 	andi	r3,r19,1
 800b37c:	0081ffc4 	movi	r2,2047
 800b380:	000b883a 	mov	r5,zero
 800b384:	0025883a 	mov	r18,zero
 800b388:	1004953a 	slli	r2,r2,20
 800b38c:	18c03fcc 	andi	r3,r3,255
 800b390:	04400434 	movhi	r17,16
 800b394:	8c7fffc4 	addi	r17,r17,-1
 800b398:	180697fa 	slli	r3,r3,31
 800b39c:	2c4a703a 	and	r5,r5,r17
 800b3a0:	288ab03a 	or	r5,r5,r2
 800b3a4:	28c6b03a 	or	r3,r5,r3
 800b3a8:	9005883a 	mov	r2,r18
 800b3ac:	dfc00d17 	ldw	ra,52(sp)
 800b3b0:	df000c17 	ldw	fp,48(sp)
 800b3b4:	ddc00b17 	ldw	r23,44(sp)
 800b3b8:	dd800a17 	ldw	r22,40(sp)
 800b3bc:	dd400917 	ldw	r21,36(sp)
 800b3c0:	dd000817 	ldw	r20,32(sp)
 800b3c4:	dcc00717 	ldw	r19,28(sp)
 800b3c8:	dc800617 	ldw	r18,24(sp)
 800b3cc:	dc400517 	ldw	r17,20(sp)
 800b3d0:	dc000417 	ldw	r16,16(sp)
 800b3d4:	dec00e04 	addi	sp,sp,56
 800b3d8:	f800283a 	ret
 800b3dc:	2404b03a 	or	r2,r4,r16
 800b3e0:	2027883a 	mov	r19,r4
 800b3e4:	10003926 	beq	r2,zero,800b4cc <__divdf3+0x2c0>
 800b3e8:	80012e26 	beq	r16,zero,800b8a4 <__divdf3+0x698>
 800b3ec:	8009883a 	mov	r4,r16
 800b3f0:	d9800315 	stw	r6,12(sp)
 800b3f4:	d9c00215 	stw	r7,8(sp)
 800b3f8:	800cf640 	call	800cf64 <__clzsi2>
 800b3fc:	d9800317 	ldw	r6,12(sp)
 800b400:	d9c00217 	ldw	r7,8(sp)
 800b404:	113ffd44 	addi	r4,r2,-11
 800b408:	00c00704 	movi	r3,28
 800b40c:	19012116 	blt	r3,r4,800b894 <__divdf3+0x688>
 800b410:	00c00744 	movi	r3,29
 800b414:	147ffe04 	addi	r17,r2,-8
 800b418:	1907c83a 	sub	r3,r3,r4
 800b41c:	8460983a 	sll	r16,r16,r17
 800b420:	98c6d83a 	srl	r3,r19,r3
 800b424:	9c64983a 	sll	r18,r19,r17
 800b428:	1c20b03a 	or	r16,r3,r16
 800b42c:	1080fcc4 	addi	r2,r2,1011
 800b430:	00abc83a 	sub	r21,zero,r2
 800b434:	0027883a 	mov	r19,zero
 800b438:	0013883a 	mov	r9,zero
 800b43c:	003f9106 	br	800b284 <__alt_data_end+0xf800b284>
 800b440:	3446b03a 	or	r3,r6,r17
 800b444:	18001f1e 	bne	r3,zero,800b4c4 <__divdf3+0x2b8>
 800b448:	0023883a 	mov	r17,zero
 800b44c:	0011883a 	mov	r8,zero
 800b450:	01c00084 	movi	r7,2
 800b454:	003f9d06 	br	800b2cc <__alt_data_end+0xf800b2cc>
 800b458:	3446b03a 	or	r3,r6,r17
 800b45c:	18001526 	beq	r3,zero,800b4b4 <__divdf3+0x2a8>
 800b460:	88011b26 	beq	r17,zero,800b8d0 <__divdf3+0x6c4>
 800b464:	8809883a 	mov	r4,r17
 800b468:	d9800315 	stw	r6,12(sp)
 800b46c:	da400115 	stw	r9,4(sp)
 800b470:	800cf640 	call	800cf64 <__clzsi2>
 800b474:	d9800317 	ldw	r6,12(sp)
 800b478:	da400117 	ldw	r9,4(sp)
 800b47c:	113ffd44 	addi	r4,r2,-11
 800b480:	00c00704 	movi	r3,28
 800b484:	19010e16 	blt	r3,r4,800b8c0 <__divdf3+0x6b4>
 800b488:	00c00744 	movi	r3,29
 800b48c:	123ffe04 	addi	r8,r2,-8
 800b490:	1907c83a 	sub	r3,r3,r4
 800b494:	8a22983a 	sll	r17,r17,r8
 800b498:	30c6d83a 	srl	r3,r6,r3
 800b49c:	3210983a 	sll	r8,r6,r8
 800b4a0:	1c62b03a 	or	r17,r3,r17
 800b4a4:	1080fcc4 	addi	r2,r2,1011
 800b4a8:	0085c83a 	sub	r2,zero,r2
 800b4ac:	000f883a 	mov	r7,zero
 800b4b0:	003f8606 	br	800b2cc <__alt_data_end+0xf800b2cc>
 800b4b4:	0023883a 	mov	r17,zero
 800b4b8:	0011883a 	mov	r8,zero
 800b4bc:	01c00044 	movi	r7,1
 800b4c0:	003f8206 	br	800b2cc <__alt_data_end+0xf800b2cc>
 800b4c4:	01c000c4 	movi	r7,3
 800b4c8:	003f8006 	br	800b2cc <__alt_data_end+0xf800b2cc>
 800b4cc:	04c00104 	movi	r19,4
 800b4d0:	0021883a 	mov	r16,zero
 800b4d4:	0025883a 	mov	r18,zero
 800b4d8:	02400044 	movi	r9,1
 800b4dc:	003f6906 	br	800b284 <__alt_data_end+0xf800b284>
 800b4e0:	04c00304 	movi	r19,12
 800b4e4:	024000c4 	movi	r9,3
 800b4e8:	003f6606 	br	800b284 <__alt_data_end+0xf800b284>
 800b4ec:	01400434 	movhi	r5,16
 800b4f0:	0007883a 	mov	r3,zero
 800b4f4:	297fffc4 	addi	r5,r5,-1
 800b4f8:	04bfffc4 	movi	r18,-1
 800b4fc:	0081ffc4 	movi	r2,2047
 800b500:	003fa106 	br	800b388 <__alt_data_end+0xf800b388>
 800b504:	00c00044 	movi	r3,1
 800b508:	1887c83a 	sub	r3,r3,r2
 800b50c:	01000e04 	movi	r4,56
 800b510:	20c1210e 	bge	r4,r3,800b998 <__divdf3+0x78c>
 800b514:	98c0004c 	andi	r3,r19,1
 800b518:	0005883a 	mov	r2,zero
 800b51c:	000b883a 	mov	r5,zero
 800b520:	0025883a 	mov	r18,zero
 800b524:	003f9806 	br	800b388 <__alt_data_end+0xf800b388>
 800b528:	8c00fd36 	bltu	r17,r16,800b920 <__divdf3+0x714>
 800b52c:	8440fb26 	beq	r16,r17,800b91c <__divdf3+0x710>
 800b530:	8007883a 	mov	r3,r16
 800b534:	ad7fffc4 	addi	r21,r21,-1
 800b538:	0021883a 	mov	r16,zero
 800b53c:	4004d63a 	srli	r2,r8,24
 800b540:	8822923a 	slli	r17,r17,8
 800b544:	1809883a 	mov	r4,r3
 800b548:	402c923a 	slli	r22,r8,8
 800b54c:	88b8b03a 	or	fp,r17,r2
 800b550:	e028d43a 	srli	r20,fp,16
 800b554:	d8c00015 	stw	r3,0(sp)
 800b558:	e5ffffcc 	andi	r23,fp,65535
 800b55c:	a00b883a 	mov	r5,r20
 800b560:	800a8a40 	call	800a8a4 <__udivsi3>
 800b564:	d8c00017 	ldw	r3,0(sp)
 800b568:	a00b883a 	mov	r5,r20
 800b56c:	d8800315 	stw	r2,12(sp)
 800b570:	1809883a 	mov	r4,r3
 800b574:	800a9080 	call	800a908 <__umodsi3>
 800b578:	d9800317 	ldw	r6,12(sp)
 800b57c:	1006943a 	slli	r3,r2,16
 800b580:	9004d43a 	srli	r2,r18,16
 800b584:	b9a3383a 	mul	r17,r23,r6
 800b588:	10c4b03a 	or	r2,r2,r3
 800b58c:	1440062e 	bgeu	r2,r17,800b5a8 <__divdf3+0x39c>
 800b590:	1705883a 	add	r2,r2,fp
 800b594:	30ffffc4 	addi	r3,r6,-1
 800b598:	1700ee36 	bltu	r2,fp,800b954 <__divdf3+0x748>
 800b59c:	1440ed2e 	bgeu	r2,r17,800b954 <__divdf3+0x748>
 800b5a0:	31bfff84 	addi	r6,r6,-2
 800b5a4:	1705883a 	add	r2,r2,fp
 800b5a8:	1463c83a 	sub	r17,r2,r17
 800b5ac:	a00b883a 	mov	r5,r20
 800b5b0:	8809883a 	mov	r4,r17
 800b5b4:	d9800315 	stw	r6,12(sp)
 800b5b8:	800a8a40 	call	800a8a4 <__udivsi3>
 800b5bc:	a00b883a 	mov	r5,r20
 800b5c0:	8809883a 	mov	r4,r17
 800b5c4:	d8800215 	stw	r2,8(sp)
 800b5c8:	800a9080 	call	800a908 <__umodsi3>
 800b5cc:	d9c00217 	ldw	r7,8(sp)
 800b5d0:	1004943a 	slli	r2,r2,16
 800b5d4:	94bfffcc 	andi	r18,r18,65535
 800b5d8:	b9d1383a 	mul	r8,r23,r7
 800b5dc:	90a4b03a 	or	r18,r18,r2
 800b5e0:	d9800317 	ldw	r6,12(sp)
 800b5e4:	9200062e 	bgeu	r18,r8,800b600 <__divdf3+0x3f4>
 800b5e8:	9725883a 	add	r18,r18,fp
 800b5ec:	38bfffc4 	addi	r2,r7,-1
 800b5f0:	9700d636 	bltu	r18,fp,800b94c <__divdf3+0x740>
 800b5f4:	9200d52e 	bgeu	r18,r8,800b94c <__divdf3+0x740>
 800b5f8:	39ffff84 	addi	r7,r7,-2
 800b5fc:	9725883a 	add	r18,r18,fp
 800b600:	3004943a 	slli	r2,r6,16
 800b604:	b012d43a 	srli	r9,r22,16
 800b608:	b1bfffcc 	andi	r6,r22,65535
 800b60c:	11e2b03a 	or	r17,r2,r7
 800b610:	8806d43a 	srli	r3,r17,16
 800b614:	893fffcc 	andi	r4,r17,65535
 800b618:	218b383a 	mul	r5,r4,r6
 800b61c:	30c5383a 	mul	r2,r6,r3
 800b620:	2249383a 	mul	r4,r4,r9
 800b624:	280ed43a 	srli	r7,r5,16
 800b628:	9225c83a 	sub	r18,r18,r8
 800b62c:	2089883a 	add	r4,r4,r2
 800b630:	3909883a 	add	r4,r7,r4
 800b634:	1a47383a 	mul	r3,r3,r9
 800b638:	2080022e 	bgeu	r4,r2,800b644 <__divdf3+0x438>
 800b63c:	00800074 	movhi	r2,1
 800b640:	1887883a 	add	r3,r3,r2
 800b644:	2004d43a 	srli	r2,r4,16
 800b648:	2008943a 	slli	r4,r4,16
 800b64c:	297fffcc 	andi	r5,r5,65535
 800b650:	10c7883a 	add	r3,r2,r3
 800b654:	2149883a 	add	r4,r4,r5
 800b658:	90c0a536 	bltu	r18,r3,800b8f0 <__divdf3+0x6e4>
 800b65c:	90c0bf26 	beq	r18,r3,800b95c <__divdf3+0x750>
 800b660:	90c7c83a 	sub	r3,r18,r3
 800b664:	810fc83a 	sub	r7,r16,r4
 800b668:	81e5803a 	cmpltu	r18,r16,r7
 800b66c:	1ca5c83a 	sub	r18,r3,r18
 800b670:	e480c126 	beq	fp,r18,800b978 <__divdf3+0x76c>
 800b674:	a00b883a 	mov	r5,r20
 800b678:	9009883a 	mov	r4,r18
 800b67c:	d9800315 	stw	r6,12(sp)
 800b680:	d9c00215 	stw	r7,8(sp)
 800b684:	da400115 	stw	r9,4(sp)
 800b688:	800a8a40 	call	800a8a4 <__udivsi3>
 800b68c:	a00b883a 	mov	r5,r20
 800b690:	9009883a 	mov	r4,r18
 800b694:	d8800015 	stw	r2,0(sp)
 800b698:	800a9080 	call	800a908 <__umodsi3>
 800b69c:	d9c00217 	ldw	r7,8(sp)
 800b6a0:	da000017 	ldw	r8,0(sp)
 800b6a4:	1006943a 	slli	r3,r2,16
 800b6a8:	3804d43a 	srli	r2,r7,16
 800b6ac:	ba21383a 	mul	r16,r23,r8
 800b6b0:	d9800317 	ldw	r6,12(sp)
 800b6b4:	10c4b03a 	or	r2,r2,r3
 800b6b8:	da400117 	ldw	r9,4(sp)
 800b6bc:	1400062e 	bgeu	r2,r16,800b6d8 <__divdf3+0x4cc>
 800b6c0:	1705883a 	add	r2,r2,fp
 800b6c4:	40ffffc4 	addi	r3,r8,-1
 800b6c8:	1700ad36 	bltu	r2,fp,800b980 <__divdf3+0x774>
 800b6cc:	1400ac2e 	bgeu	r2,r16,800b980 <__divdf3+0x774>
 800b6d0:	423fff84 	addi	r8,r8,-2
 800b6d4:	1705883a 	add	r2,r2,fp
 800b6d8:	1421c83a 	sub	r16,r2,r16
 800b6dc:	a00b883a 	mov	r5,r20
 800b6e0:	8009883a 	mov	r4,r16
 800b6e4:	d9800315 	stw	r6,12(sp)
 800b6e8:	d9c00215 	stw	r7,8(sp)
 800b6ec:	da000015 	stw	r8,0(sp)
 800b6f0:	da400115 	stw	r9,4(sp)
 800b6f4:	800a8a40 	call	800a8a4 <__udivsi3>
 800b6f8:	8009883a 	mov	r4,r16
 800b6fc:	a00b883a 	mov	r5,r20
 800b700:	1025883a 	mov	r18,r2
 800b704:	800a9080 	call	800a908 <__umodsi3>
 800b708:	d9c00217 	ldw	r7,8(sp)
 800b70c:	1004943a 	slli	r2,r2,16
 800b710:	bcaf383a 	mul	r23,r23,r18
 800b714:	393fffcc 	andi	r4,r7,65535
 800b718:	2088b03a 	or	r4,r4,r2
 800b71c:	d9800317 	ldw	r6,12(sp)
 800b720:	da000017 	ldw	r8,0(sp)
 800b724:	da400117 	ldw	r9,4(sp)
 800b728:	25c0062e 	bgeu	r4,r23,800b744 <__divdf3+0x538>
 800b72c:	2709883a 	add	r4,r4,fp
 800b730:	90bfffc4 	addi	r2,r18,-1
 800b734:	27009436 	bltu	r4,fp,800b988 <__divdf3+0x77c>
 800b738:	25c0932e 	bgeu	r4,r23,800b988 <__divdf3+0x77c>
 800b73c:	94bfff84 	addi	r18,r18,-2
 800b740:	2709883a 	add	r4,r4,fp
 800b744:	4004943a 	slli	r2,r8,16
 800b748:	25efc83a 	sub	r23,r4,r23
 800b74c:	1490b03a 	or	r8,r2,r18
 800b750:	4008d43a 	srli	r4,r8,16
 800b754:	40ffffcc 	andi	r3,r8,65535
 800b758:	30c5383a 	mul	r2,r6,r3
 800b75c:	1a47383a 	mul	r3,r3,r9
 800b760:	310d383a 	mul	r6,r6,r4
 800b764:	100ad43a 	srli	r5,r2,16
 800b768:	4913383a 	mul	r9,r9,r4
 800b76c:	1987883a 	add	r3,r3,r6
 800b770:	28c7883a 	add	r3,r5,r3
 800b774:	1980022e 	bgeu	r3,r6,800b780 <__divdf3+0x574>
 800b778:	01000074 	movhi	r4,1
 800b77c:	4913883a 	add	r9,r9,r4
 800b780:	1808d43a 	srli	r4,r3,16
 800b784:	1806943a 	slli	r3,r3,16
 800b788:	10bfffcc 	andi	r2,r2,65535
 800b78c:	2253883a 	add	r9,r4,r9
 800b790:	1887883a 	add	r3,r3,r2
 800b794:	ba403836 	bltu	r23,r9,800b878 <__divdf3+0x66c>
 800b798:	ba403626 	beq	r23,r9,800b874 <__divdf3+0x668>
 800b79c:	42000054 	ori	r8,r8,1
 800b7a0:	a880ffc4 	addi	r2,r21,1023
 800b7a4:	00bf570e 	bge	zero,r2,800b504 <__alt_data_end+0xf800b504>
 800b7a8:	40c001cc 	andi	r3,r8,7
 800b7ac:	18000726 	beq	r3,zero,800b7cc <__divdf3+0x5c0>
 800b7b0:	40c003cc 	andi	r3,r8,15
 800b7b4:	01000104 	movi	r4,4
 800b7b8:	19000426 	beq	r3,r4,800b7cc <__divdf3+0x5c0>
 800b7bc:	4107883a 	add	r3,r8,r4
 800b7c0:	1a11803a 	cmpltu	r8,r3,r8
 800b7c4:	8a23883a 	add	r17,r17,r8
 800b7c8:	1811883a 	mov	r8,r3
 800b7cc:	88c0402c 	andhi	r3,r17,256
 800b7d0:	18000426 	beq	r3,zero,800b7e4 <__divdf3+0x5d8>
 800b7d4:	00ffc034 	movhi	r3,65280
 800b7d8:	18ffffc4 	addi	r3,r3,-1
 800b7dc:	a8810004 	addi	r2,r21,1024
 800b7e0:	88e2703a 	and	r17,r17,r3
 800b7e4:	00c1ff84 	movi	r3,2046
 800b7e8:	18bee316 	blt	r3,r2,800b378 <__alt_data_end+0xf800b378>
 800b7ec:	8824977a 	slli	r18,r17,29
 800b7f0:	4010d0fa 	srli	r8,r8,3
 800b7f4:	8822927a 	slli	r17,r17,9
 800b7f8:	1081ffcc 	andi	r2,r2,2047
 800b7fc:	9224b03a 	or	r18,r18,r8
 800b800:	880ad33a 	srli	r5,r17,12
 800b804:	98c0004c 	andi	r3,r19,1
 800b808:	003edf06 	br	800b388 <__alt_data_end+0xf800b388>
 800b80c:	8080022c 	andhi	r2,r16,8
 800b810:	10001226 	beq	r2,zero,800b85c <__divdf3+0x650>
 800b814:	8880022c 	andhi	r2,r17,8
 800b818:	1000101e 	bne	r2,zero,800b85c <__divdf3+0x650>
 800b81c:	00800434 	movhi	r2,16
 800b820:	89400234 	orhi	r5,r17,8
 800b824:	10bfffc4 	addi	r2,r2,-1
 800b828:	b007883a 	mov	r3,r22
 800b82c:	288a703a 	and	r5,r5,r2
 800b830:	4025883a 	mov	r18,r8
 800b834:	003f3106 	br	800b4fc <__alt_data_end+0xf800b4fc>
 800b838:	008000c4 	movi	r2,3
 800b83c:	3880a626 	beq	r7,r2,800bad8 <__divdf3+0x8cc>
 800b840:	00800044 	movi	r2,1
 800b844:	3880521e 	bne	r7,r2,800b990 <__divdf3+0x784>
 800b848:	b807883a 	mov	r3,r23
 800b84c:	0005883a 	mov	r2,zero
 800b850:	000b883a 	mov	r5,zero
 800b854:	0025883a 	mov	r18,zero
 800b858:	003ecb06 	br	800b388 <__alt_data_end+0xf800b388>
 800b85c:	00800434 	movhi	r2,16
 800b860:	81400234 	orhi	r5,r16,8
 800b864:	10bfffc4 	addi	r2,r2,-1
 800b868:	a007883a 	mov	r3,r20
 800b86c:	288a703a 	and	r5,r5,r2
 800b870:	003f2206 	br	800b4fc <__alt_data_end+0xf800b4fc>
 800b874:	183fca26 	beq	r3,zero,800b7a0 <__alt_data_end+0xf800b7a0>
 800b878:	e5ef883a 	add	r23,fp,r23
 800b87c:	40bfffc4 	addi	r2,r8,-1
 800b880:	bf00392e 	bgeu	r23,fp,800b968 <__divdf3+0x75c>
 800b884:	1011883a 	mov	r8,r2
 800b888:	ba7fc41e 	bne	r23,r9,800b79c <__alt_data_end+0xf800b79c>
 800b88c:	b0ffc31e 	bne	r22,r3,800b79c <__alt_data_end+0xf800b79c>
 800b890:	003fc306 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800b894:	143ff604 	addi	r16,r2,-40
 800b898:	9c20983a 	sll	r16,r19,r16
 800b89c:	0025883a 	mov	r18,zero
 800b8a0:	003ee206 	br	800b42c <__alt_data_end+0xf800b42c>
 800b8a4:	d9800315 	stw	r6,12(sp)
 800b8a8:	d9c00215 	stw	r7,8(sp)
 800b8ac:	800cf640 	call	800cf64 <__clzsi2>
 800b8b0:	10800804 	addi	r2,r2,32
 800b8b4:	d9c00217 	ldw	r7,8(sp)
 800b8b8:	d9800317 	ldw	r6,12(sp)
 800b8bc:	003ed106 	br	800b404 <__alt_data_end+0xf800b404>
 800b8c0:	147ff604 	addi	r17,r2,-40
 800b8c4:	3462983a 	sll	r17,r6,r17
 800b8c8:	0011883a 	mov	r8,zero
 800b8cc:	003ef506 	br	800b4a4 <__alt_data_end+0xf800b4a4>
 800b8d0:	3009883a 	mov	r4,r6
 800b8d4:	d9800315 	stw	r6,12(sp)
 800b8d8:	da400115 	stw	r9,4(sp)
 800b8dc:	800cf640 	call	800cf64 <__clzsi2>
 800b8e0:	10800804 	addi	r2,r2,32
 800b8e4:	da400117 	ldw	r9,4(sp)
 800b8e8:	d9800317 	ldw	r6,12(sp)
 800b8ec:	003ee306 	br	800b47c <__alt_data_end+0xf800b47c>
 800b8f0:	85a1883a 	add	r16,r16,r22
 800b8f4:	8585803a 	cmpltu	r2,r16,r22
 800b8f8:	1705883a 	add	r2,r2,fp
 800b8fc:	14a5883a 	add	r18,r2,r18
 800b900:	88bfffc4 	addi	r2,r17,-1
 800b904:	e4800c2e 	bgeu	fp,r18,800b938 <__divdf3+0x72c>
 800b908:	90c03e36 	bltu	r18,r3,800ba04 <__divdf3+0x7f8>
 800b90c:	1c806926 	beq	r3,r18,800bab4 <__divdf3+0x8a8>
 800b910:	90c7c83a 	sub	r3,r18,r3
 800b914:	1023883a 	mov	r17,r2
 800b918:	003f5206 	br	800b664 <__alt_data_end+0xf800b664>
 800b91c:	923f0436 	bltu	r18,r8,800b530 <__alt_data_end+0xf800b530>
 800b920:	800897fa 	slli	r4,r16,31
 800b924:	9004d07a 	srli	r2,r18,1
 800b928:	8006d07a 	srli	r3,r16,1
 800b92c:	902097fa 	slli	r16,r18,31
 800b930:	20a4b03a 	or	r18,r4,r2
 800b934:	003f0106 	br	800b53c <__alt_data_end+0xf800b53c>
 800b938:	e4bff51e 	bne	fp,r18,800b910 <__alt_data_end+0xf800b910>
 800b93c:	85bff22e 	bgeu	r16,r22,800b908 <__alt_data_end+0xf800b908>
 800b940:	e0c7c83a 	sub	r3,fp,r3
 800b944:	1023883a 	mov	r17,r2
 800b948:	003f4606 	br	800b664 <__alt_data_end+0xf800b664>
 800b94c:	100f883a 	mov	r7,r2
 800b950:	003f2b06 	br	800b600 <__alt_data_end+0xf800b600>
 800b954:	180d883a 	mov	r6,r3
 800b958:	003f1306 	br	800b5a8 <__alt_data_end+0xf800b5a8>
 800b95c:	813fe436 	bltu	r16,r4,800b8f0 <__alt_data_end+0xf800b8f0>
 800b960:	0007883a 	mov	r3,zero
 800b964:	003f3f06 	br	800b664 <__alt_data_end+0xf800b664>
 800b968:	ba402c36 	bltu	r23,r9,800ba1c <__divdf3+0x810>
 800b96c:	4dc05426 	beq	r9,r23,800bac0 <__divdf3+0x8b4>
 800b970:	1011883a 	mov	r8,r2
 800b974:	003f8906 	br	800b79c <__alt_data_end+0xf800b79c>
 800b978:	023fffc4 	movi	r8,-1
 800b97c:	003f8806 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800b980:	1811883a 	mov	r8,r3
 800b984:	003f5406 	br	800b6d8 <__alt_data_end+0xf800b6d8>
 800b988:	1025883a 	mov	r18,r2
 800b98c:	003f6d06 	br	800b744 <__alt_data_end+0xf800b744>
 800b990:	b827883a 	mov	r19,r23
 800b994:	003f8206 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800b998:	010007c4 	movi	r4,31
 800b99c:	20c02616 	blt	r4,r3,800ba38 <__divdf3+0x82c>
 800b9a0:	00800804 	movi	r2,32
 800b9a4:	10c5c83a 	sub	r2,r2,r3
 800b9a8:	888a983a 	sll	r5,r17,r2
 800b9ac:	40c8d83a 	srl	r4,r8,r3
 800b9b0:	4084983a 	sll	r2,r8,r2
 800b9b4:	88e2d83a 	srl	r17,r17,r3
 800b9b8:	2906b03a 	or	r3,r5,r4
 800b9bc:	1004c03a 	cmpne	r2,r2,zero
 800b9c0:	1886b03a 	or	r3,r3,r2
 800b9c4:	188001cc 	andi	r2,r3,7
 800b9c8:	10000726 	beq	r2,zero,800b9e8 <__divdf3+0x7dc>
 800b9cc:	188003cc 	andi	r2,r3,15
 800b9d0:	01000104 	movi	r4,4
 800b9d4:	11000426 	beq	r2,r4,800b9e8 <__divdf3+0x7dc>
 800b9d8:	1805883a 	mov	r2,r3
 800b9dc:	10c00104 	addi	r3,r2,4
 800b9e0:	1885803a 	cmpltu	r2,r3,r2
 800b9e4:	88a3883a 	add	r17,r17,r2
 800b9e8:	8880202c 	andhi	r2,r17,128
 800b9ec:	10002726 	beq	r2,zero,800ba8c <__divdf3+0x880>
 800b9f0:	98c0004c 	andi	r3,r19,1
 800b9f4:	00800044 	movi	r2,1
 800b9f8:	000b883a 	mov	r5,zero
 800b9fc:	0025883a 	mov	r18,zero
 800ba00:	003e6106 	br	800b388 <__alt_data_end+0xf800b388>
 800ba04:	85a1883a 	add	r16,r16,r22
 800ba08:	8585803a 	cmpltu	r2,r16,r22
 800ba0c:	1705883a 	add	r2,r2,fp
 800ba10:	14a5883a 	add	r18,r2,r18
 800ba14:	8c7fff84 	addi	r17,r17,-2
 800ba18:	003f1106 	br	800b660 <__alt_data_end+0xf800b660>
 800ba1c:	b589883a 	add	r4,r22,r22
 800ba20:	25ad803a 	cmpltu	r22,r4,r22
 800ba24:	b739883a 	add	fp,r22,fp
 800ba28:	40bfff84 	addi	r2,r8,-2
 800ba2c:	bf2f883a 	add	r23,r23,fp
 800ba30:	202d883a 	mov	r22,r4
 800ba34:	003f9306 	br	800b884 <__alt_data_end+0xf800b884>
 800ba38:	013ff844 	movi	r4,-31
 800ba3c:	2085c83a 	sub	r2,r4,r2
 800ba40:	8888d83a 	srl	r4,r17,r2
 800ba44:	00800804 	movi	r2,32
 800ba48:	18802126 	beq	r3,r2,800bad0 <__divdf3+0x8c4>
 800ba4c:	00801004 	movi	r2,64
 800ba50:	10c5c83a 	sub	r2,r2,r3
 800ba54:	8884983a 	sll	r2,r17,r2
 800ba58:	1204b03a 	or	r2,r2,r8
 800ba5c:	1004c03a 	cmpne	r2,r2,zero
 800ba60:	2084b03a 	or	r2,r4,r2
 800ba64:	144001cc 	andi	r17,r2,7
 800ba68:	88000d1e 	bne	r17,zero,800baa0 <__divdf3+0x894>
 800ba6c:	000b883a 	mov	r5,zero
 800ba70:	1024d0fa 	srli	r18,r2,3
 800ba74:	98c0004c 	andi	r3,r19,1
 800ba78:	0005883a 	mov	r2,zero
 800ba7c:	9464b03a 	or	r18,r18,r17
 800ba80:	003e4106 	br	800b388 <__alt_data_end+0xf800b388>
 800ba84:	1007883a 	mov	r3,r2
 800ba88:	0023883a 	mov	r17,zero
 800ba8c:	880a927a 	slli	r5,r17,9
 800ba90:	1805883a 	mov	r2,r3
 800ba94:	8822977a 	slli	r17,r17,29
 800ba98:	280ad33a 	srli	r5,r5,12
 800ba9c:	003ff406 	br	800ba70 <__alt_data_end+0xf800ba70>
 800baa0:	10c003cc 	andi	r3,r2,15
 800baa4:	01000104 	movi	r4,4
 800baa8:	193ff626 	beq	r3,r4,800ba84 <__alt_data_end+0xf800ba84>
 800baac:	0023883a 	mov	r17,zero
 800bab0:	003fca06 	br	800b9dc <__alt_data_end+0xf800b9dc>
 800bab4:	813fd336 	bltu	r16,r4,800ba04 <__alt_data_end+0xf800ba04>
 800bab8:	1023883a 	mov	r17,r2
 800babc:	003fa806 	br	800b960 <__alt_data_end+0xf800b960>
 800bac0:	b0ffd636 	bltu	r22,r3,800ba1c <__alt_data_end+0xf800ba1c>
 800bac4:	1011883a 	mov	r8,r2
 800bac8:	b0ff341e 	bne	r22,r3,800b79c <__alt_data_end+0xf800b79c>
 800bacc:	003f3406 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800bad0:	0005883a 	mov	r2,zero
 800bad4:	003fe006 	br	800ba58 <__alt_data_end+0xf800ba58>
 800bad8:	00800434 	movhi	r2,16
 800badc:	89400234 	orhi	r5,r17,8
 800bae0:	10bfffc4 	addi	r2,r2,-1
 800bae4:	b807883a 	mov	r3,r23
 800bae8:	288a703a 	and	r5,r5,r2
 800baec:	4025883a 	mov	r18,r8
 800baf0:	003e8206 	br	800b4fc <__alt_data_end+0xf800b4fc>

0800baf4 <__eqdf2>:
 800baf4:	2804d53a 	srli	r2,r5,20
 800baf8:	3806d53a 	srli	r3,r7,20
 800bafc:	02000434 	movhi	r8,16
 800bb00:	423fffc4 	addi	r8,r8,-1
 800bb04:	1081ffcc 	andi	r2,r2,2047
 800bb08:	0281ffc4 	movi	r10,2047
 800bb0c:	2a12703a 	and	r9,r5,r8
 800bb10:	18c1ffcc 	andi	r3,r3,2047
 800bb14:	3a10703a 	and	r8,r7,r8
 800bb18:	280ad7fa 	srli	r5,r5,31
 800bb1c:	380ed7fa 	srli	r7,r7,31
 800bb20:	12801026 	beq	r2,r10,800bb64 <__eqdf2+0x70>
 800bb24:	0281ffc4 	movi	r10,2047
 800bb28:	1a800a26 	beq	r3,r10,800bb54 <__eqdf2+0x60>
 800bb2c:	10c00226 	beq	r2,r3,800bb38 <__eqdf2+0x44>
 800bb30:	00800044 	movi	r2,1
 800bb34:	f800283a 	ret
 800bb38:	4a3ffd1e 	bne	r9,r8,800bb30 <__alt_data_end+0xf800bb30>
 800bb3c:	21bffc1e 	bne	r4,r6,800bb30 <__alt_data_end+0xf800bb30>
 800bb40:	29c00c26 	beq	r5,r7,800bb74 <__eqdf2+0x80>
 800bb44:	103ffa1e 	bne	r2,zero,800bb30 <__alt_data_end+0xf800bb30>
 800bb48:	2244b03a 	or	r2,r4,r9
 800bb4c:	1004c03a 	cmpne	r2,r2,zero
 800bb50:	f800283a 	ret
 800bb54:	3214b03a 	or	r10,r6,r8
 800bb58:	503ff426 	beq	r10,zero,800bb2c <__alt_data_end+0xf800bb2c>
 800bb5c:	00800044 	movi	r2,1
 800bb60:	f800283a 	ret
 800bb64:	2254b03a 	or	r10,r4,r9
 800bb68:	503fee26 	beq	r10,zero,800bb24 <__alt_data_end+0xf800bb24>
 800bb6c:	00800044 	movi	r2,1
 800bb70:	f800283a 	ret
 800bb74:	0005883a 	mov	r2,zero
 800bb78:	f800283a 	ret

0800bb7c <__gedf2>:
 800bb7c:	2804d53a 	srli	r2,r5,20
 800bb80:	3806d53a 	srli	r3,r7,20
 800bb84:	02000434 	movhi	r8,16
 800bb88:	423fffc4 	addi	r8,r8,-1
 800bb8c:	1081ffcc 	andi	r2,r2,2047
 800bb90:	0241ffc4 	movi	r9,2047
 800bb94:	2a14703a 	and	r10,r5,r8
 800bb98:	18c1ffcc 	andi	r3,r3,2047
 800bb9c:	3a10703a 	and	r8,r7,r8
 800bba0:	280ad7fa 	srli	r5,r5,31
 800bba4:	380ed7fa 	srli	r7,r7,31
 800bba8:	12401d26 	beq	r2,r9,800bc20 <__gedf2+0xa4>
 800bbac:	0241ffc4 	movi	r9,2047
 800bbb0:	1a401226 	beq	r3,r9,800bbfc <__gedf2+0x80>
 800bbb4:	1000081e 	bne	r2,zero,800bbd8 <__gedf2+0x5c>
 800bbb8:	2296b03a 	or	r11,r4,r10
 800bbbc:	5813003a 	cmpeq	r9,r11,zero
 800bbc0:	1800091e 	bne	r3,zero,800bbe8 <__gedf2+0x6c>
 800bbc4:	3218b03a 	or	r12,r6,r8
 800bbc8:	6000071e 	bne	r12,zero,800bbe8 <__gedf2+0x6c>
 800bbcc:	0005883a 	mov	r2,zero
 800bbd0:	5800101e 	bne	r11,zero,800bc14 <__gedf2+0x98>
 800bbd4:	f800283a 	ret
 800bbd8:	18000c1e 	bne	r3,zero,800bc0c <__gedf2+0x90>
 800bbdc:	3212b03a 	or	r9,r6,r8
 800bbe0:	48000c26 	beq	r9,zero,800bc14 <__gedf2+0x98>
 800bbe4:	0013883a 	mov	r9,zero
 800bbe8:	39c03fcc 	andi	r7,r7,255
 800bbec:	48000826 	beq	r9,zero,800bc10 <__gedf2+0x94>
 800bbf0:	38000926 	beq	r7,zero,800bc18 <__gedf2+0x9c>
 800bbf4:	00800044 	movi	r2,1
 800bbf8:	f800283a 	ret
 800bbfc:	3212b03a 	or	r9,r6,r8
 800bc00:	483fec26 	beq	r9,zero,800bbb4 <__alt_data_end+0xf800bbb4>
 800bc04:	00bfff84 	movi	r2,-2
 800bc08:	f800283a 	ret
 800bc0c:	39c03fcc 	andi	r7,r7,255
 800bc10:	29c00626 	beq	r5,r7,800bc2c <__gedf2+0xb0>
 800bc14:	283ff726 	beq	r5,zero,800bbf4 <__alt_data_end+0xf800bbf4>
 800bc18:	00bfffc4 	movi	r2,-1
 800bc1c:	f800283a 	ret
 800bc20:	2292b03a 	or	r9,r4,r10
 800bc24:	483fe126 	beq	r9,zero,800bbac <__alt_data_end+0xf800bbac>
 800bc28:	003ff606 	br	800bc04 <__alt_data_end+0xf800bc04>
 800bc2c:	18bff916 	blt	r3,r2,800bc14 <__alt_data_end+0xf800bc14>
 800bc30:	10c00316 	blt	r2,r3,800bc40 <__gedf2+0xc4>
 800bc34:	42bff736 	bltu	r8,r10,800bc14 <__alt_data_end+0xf800bc14>
 800bc38:	52000326 	beq	r10,r8,800bc48 <__gedf2+0xcc>
 800bc3c:	5200042e 	bgeu	r10,r8,800bc50 <__gedf2+0xd4>
 800bc40:	283fec1e 	bne	r5,zero,800bbf4 <__alt_data_end+0xf800bbf4>
 800bc44:	003ff406 	br	800bc18 <__alt_data_end+0xf800bc18>
 800bc48:	313ff236 	bltu	r6,r4,800bc14 <__alt_data_end+0xf800bc14>
 800bc4c:	21bffc36 	bltu	r4,r6,800bc40 <__alt_data_end+0xf800bc40>
 800bc50:	0005883a 	mov	r2,zero
 800bc54:	f800283a 	ret

0800bc58 <__ledf2>:
 800bc58:	2804d53a 	srli	r2,r5,20
 800bc5c:	3810d53a 	srli	r8,r7,20
 800bc60:	00c00434 	movhi	r3,16
 800bc64:	18ffffc4 	addi	r3,r3,-1
 800bc68:	1081ffcc 	andi	r2,r2,2047
 800bc6c:	0241ffc4 	movi	r9,2047
 800bc70:	28d4703a 	and	r10,r5,r3
 800bc74:	4201ffcc 	andi	r8,r8,2047
 800bc78:	38c6703a 	and	r3,r7,r3
 800bc7c:	280ad7fa 	srli	r5,r5,31
 800bc80:	380ed7fa 	srli	r7,r7,31
 800bc84:	12401f26 	beq	r2,r9,800bd04 <__ledf2+0xac>
 800bc88:	0241ffc4 	movi	r9,2047
 800bc8c:	42401426 	beq	r8,r9,800bce0 <__ledf2+0x88>
 800bc90:	1000091e 	bne	r2,zero,800bcb8 <__ledf2+0x60>
 800bc94:	2296b03a 	or	r11,r4,r10
 800bc98:	5813003a 	cmpeq	r9,r11,zero
 800bc9c:	29403fcc 	andi	r5,r5,255
 800bca0:	40000a1e 	bne	r8,zero,800bccc <__ledf2+0x74>
 800bca4:	30d8b03a 	or	r12,r6,r3
 800bca8:	6000081e 	bne	r12,zero,800bccc <__ledf2+0x74>
 800bcac:	0005883a 	mov	r2,zero
 800bcb0:	5800111e 	bne	r11,zero,800bcf8 <__ledf2+0xa0>
 800bcb4:	f800283a 	ret
 800bcb8:	29403fcc 	andi	r5,r5,255
 800bcbc:	40000c1e 	bne	r8,zero,800bcf0 <__ledf2+0x98>
 800bcc0:	30d2b03a 	or	r9,r6,r3
 800bcc4:	48000c26 	beq	r9,zero,800bcf8 <__ledf2+0xa0>
 800bcc8:	0013883a 	mov	r9,zero
 800bccc:	39c03fcc 	andi	r7,r7,255
 800bcd0:	48000826 	beq	r9,zero,800bcf4 <__ledf2+0x9c>
 800bcd4:	38001126 	beq	r7,zero,800bd1c <__ledf2+0xc4>
 800bcd8:	00800044 	movi	r2,1
 800bcdc:	f800283a 	ret
 800bce0:	30d2b03a 	or	r9,r6,r3
 800bce4:	483fea26 	beq	r9,zero,800bc90 <__alt_data_end+0xf800bc90>
 800bce8:	00800084 	movi	r2,2
 800bcec:	f800283a 	ret
 800bcf0:	39c03fcc 	andi	r7,r7,255
 800bcf4:	39400726 	beq	r7,r5,800bd14 <__ledf2+0xbc>
 800bcf8:	2800081e 	bne	r5,zero,800bd1c <__ledf2+0xc4>
 800bcfc:	00800044 	movi	r2,1
 800bd00:	f800283a 	ret
 800bd04:	2292b03a 	or	r9,r4,r10
 800bd08:	483fdf26 	beq	r9,zero,800bc88 <__alt_data_end+0xf800bc88>
 800bd0c:	00800084 	movi	r2,2
 800bd10:	f800283a 	ret
 800bd14:	4080030e 	bge	r8,r2,800bd24 <__ledf2+0xcc>
 800bd18:	383fef26 	beq	r7,zero,800bcd8 <__alt_data_end+0xf800bcd8>
 800bd1c:	00bfffc4 	movi	r2,-1
 800bd20:	f800283a 	ret
 800bd24:	123feb16 	blt	r2,r8,800bcd4 <__alt_data_end+0xf800bcd4>
 800bd28:	1abff336 	bltu	r3,r10,800bcf8 <__alt_data_end+0xf800bcf8>
 800bd2c:	50c00326 	beq	r10,r3,800bd3c <__ledf2+0xe4>
 800bd30:	50c0042e 	bgeu	r10,r3,800bd44 <__ledf2+0xec>
 800bd34:	283fe81e 	bne	r5,zero,800bcd8 <__alt_data_end+0xf800bcd8>
 800bd38:	003ff806 	br	800bd1c <__alt_data_end+0xf800bd1c>
 800bd3c:	313fee36 	bltu	r6,r4,800bcf8 <__alt_data_end+0xf800bcf8>
 800bd40:	21bffc36 	bltu	r4,r6,800bd34 <__alt_data_end+0xf800bd34>
 800bd44:	0005883a 	mov	r2,zero
 800bd48:	f800283a 	ret

0800bd4c <__muldf3>:
 800bd4c:	defff304 	addi	sp,sp,-52
 800bd50:	2804d53a 	srli	r2,r5,20
 800bd54:	dd800915 	stw	r22,36(sp)
 800bd58:	282cd7fa 	srli	r22,r5,31
 800bd5c:	dc000315 	stw	r16,12(sp)
 800bd60:	04000434 	movhi	r16,16
 800bd64:	dd400815 	stw	r21,32(sp)
 800bd68:	dc800515 	stw	r18,20(sp)
 800bd6c:	843fffc4 	addi	r16,r16,-1
 800bd70:	dfc00c15 	stw	ra,48(sp)
 800bd74:	df000b15 	stw	fp,44(sp)
 800bd78:	ddc00a15 	stw	r23,40(sp)
 800bd7c:	dd000715 	stw	r20,28(sp)
 800bd80:	dcc00615 	stw	r19,24(sp)
 800bd84:	dc400415 	stw	r17,16(sp)
 800bd88:	1481ffcc 	andi	r18,r2,2047
 800bd8c:	2c20703a 	and	r16,r5,r16
 800bd90:	b02b883a 	mov	r21,r22
 800bd94:	b2403fcc 	andi	r9,r22,255
 800bd98:	90006026 	beq	r18,zero,800bf1c <__muldf3+0x1d0>
 800bd9c:	0081ffc4 	movi	r2,2047
 800bda0:	2029883a 	mov	r20,r4
 800bda4:	90803626 	beq	r18,r2,800be80 <__muldf3+0x134>
 800bda8:	80800434 	orhi	r2,r16,16
 800bdac:	100490fa 	slli	r2,r2,3
 800bdb0:	2020d77a 	srli	r16,r4,29
 800bdb4:	202890fa 	slli	r20,r4,3
 800bdb8:	94bf0044 	addi	r18,r18,-1023
 800bdbc:	80a0b03a 	or	r16,r16,r2
 800bdc0:	0027883a 	mov	r19,zero
 800bdc4:	0039883a 	mov	fp,zero
 800bdc8:	3804d53a 	srli	r2,r7,20
 800bdcc:	382ed7fa 	srli	r23,r7,31
 800bdd0:	04400434 	movhi	r17,16
 800bdd4:	8c7fffc4 	addi	r17,r17,-1
 800bdd8:	1081ffcc 	andi	r2,r2,2047
 800bddc:	3011883a 	mov	r8,r6
 800bde0:	3c62703a 	and	r17,r7,r17
 800bde4:	ba803fcc 	andi	r10,r23,255
 800bde8:	10006d26 	beq	r2,zero,800bfa0 <__muldf3+0x254>
 800bdec:	00c1ffc4 	movi	r3,2047
 800bdf0:	10c06526 	beq	r2,r3,800bf88 <__muldf3+0x23c>
 800bdf4:	88c00434 	orhi	r3,r17,16
 800bdf8:	180690fa 	slli	r3,r3,3
 800bdfc:	3022d77a 	srli	r17,r6,29
 800be00:	301090fa 	slli	r8,r6,3
 800be04:	10bf0044 	addi	r2,r2,-1023
 800be08:	88e2b03a 	or	r17,r17,r3
 800be0c:	000b883a 	mov	r5,zero
 800be10:	9085883a 	add	r2,r18,r2
 800be14:	2cc8b03a 	or	r4,r5,r19
 800be18:	00c003c4 	movi	r3,15
 800be1c:	bdacf03a 	xor	r22,r23,r22
 800be20:	12c00044 	addi	r11,r2,1
 800be24:	19009936 	bltu	r3,r4,800c08c <__muldf3+0x340>
 800be28:	200890ba 	slli	r4,r4,2
 800be2c:	00c20074 	movhi	r3,2049
 800be30:	18ef9004 	addi	r3,r3,-16832
 800be34:	20c9883a 	add	r4,r4,r3
 800be38:	20c00017 	ldw	r3,0(r4)
 800be3c:	1800683a 	jmp	r3
 800be40:	0800c08c 	andi	zero,at,770
 800be44:	0800bea0 	cmpeqi	zero,at,762
 800be48:	0800bea0 	cmpeqi	zero,at,762
 800be4c:	0800be9c 	xori	zero,at,762
 800be50:	0800c068 	cmpgeui	zero,at,769
 800be54:	0800c068 	cmpgeui	zero,at,769
 800be58:	0800c050 	cmplti	zero,at,769
 800be5c:	0800be9c 	xori	zero,at,762
 800be60:	0800c068 	cmpgeui	zero,at,769
 800be64:	0800c050 	cmplti	zero,at,769
 800be68:	0800c068 	cmpgeui	zero,at,769
 800be6c:	0800be9c 	xori	zero,at,762
 800be70:	0800c078 	rdprs	zero,at,769
 800be74:	0800c078 	rdprs	zero,at,769
 800be78:	0800c078 	rdprs	zero,at,769
 800be7c:	0800c294 	ori	zero,at,778
 800be80:	2404b03a 	or	r2,r4,r16
 800be84:	10006f1e 	bne	r2,zero,800c044 <__muldf3+0x2f8>
 800be88:	04c00204 	movi	r19,8
 800be8c:	0021883a 	mov	r16,zero
 800be90:	0029883a 	mov	r20,zero
 800be94:	07000084 	movi	fp,2
 800be98:	003fcb06 	br	800bdc8 <__alt_data_end+0xf800bdc8>
 800be9c:	502d883a 	mov	r22,r10
 800bea0:	00800084 	movi	r2,2
 800bea4:	28805726 	beq	r5,r2,800c004 <__muldf3+0x2b8>
 800bea8:	008000c4 	movi	r2,3
 800beac:	28816626 	beq	r5,r2,800c448 <__muldf3+0x6fc>
 800beb0:	00800044 	movi	r2,1
 800beb4:	2881411e 	bne	r5,r2,800c3bc <__muldf3+0x670>
 800beb8:	b02b883a 	mov	r21,r22
 800bebc:	0005883a 	mov	r2,zero
 800bec0:	000b883a 	mov	r5,zero
 800bec4:	0029883a 	mov	r20,zero
 800bec8:	1004953a 	slli	r2,r2,20
 800becc:	a8c03fcc 	andi	r3,r21,255
 800bed0:	04400434 	movhi	r17,16
 800bed4:	8c7fffc4 	addi	r17,r17,-1
 800bed8:	180697fa 	slli	r3,r3,31
 800bedc:	2c4a703a 	and	r5,r5,r17
 800bee0:	288ab03a 	or	r5,r5,r2
 800bee4:	28c6b03a 	or	r3,r5,r3
 800bee8:	a005883a 	mov	r2,r20
 800beec:	dfc00c17 	ldw	ra,48(sp)
 800bef0:	df000b17 	ldw	fp,44(sp)
 800bef4:	ddc00a17 	ldw	r23,40(sp)
 800bef8:	dd800917 	ldw	r22,36(sp)
 800befc:	dd400817 	ldw	r21,32(sp)
 800bf00:	dd000717 	ldw	r20,28(sp)
 800bf04:	dcc00617 	ldw	r19,24(sp)
 800bf08:	dc800517 	ldw	r18,20(sp)
 800bf0c:	dc400417 	ldw	r17,16(sp)
 800bf10:	dc000317 	ldw	r16,12(sp)
 800bf14:	dec00d04 	addi	sp,sp,52
 800bf18:	f800283a 	ret
 800bf1c:	2404b03a 	or	r2,r4,r16
 800bf20:	2027883a 	mov	r19,r4
 800bf24:	10004226 	beq	r2,zero,800c030 <__muldf3+0x2e4>
 800bf28:	8000fc26 	beq	r16,zero,800c31c <__muldf3+0x5d0>
 800bf2c:	8009883a 	mov	r4,r16
 800bf30:	d9800215 	stw	r6,8(sp)
 800bf34:	d9c00015 	stw	r7,0(sp)
 800bf38:	da400115 	stw	r9,4(sp)
 800bf3c:	800cf640 	call	800cf64 <__clzsi2>
 800bf40:	d9800217 	ldw	r6,8(sp)
 800bf44:	d9c00017 	ldw	r7,0(sp)
 800bf48:	da400117 	ldw	r9,4(sp)
 800bf4c:	113ffd44 	addi	r4,r2,-11
 800bf50:	00c00704 	movi	r3,28
 800bf54:	1900ed16 	blt	r3,r4,800c30c <__muldf3+0x5c0>
 800bf58:	00c00744 	movi	r3,29
 800bf5c:	147ffe04 	addi	r17,r2,-8
 800bf60:	1907c83a 	sub	r3,r3,r4
 800bf64:	8460983a 	sll	r16,r16,r17
 800bf68:	98c6d83a 	srl	r3,r19,r3
 800bf6c:	9c68983a 	sll	r20,r19,r17
 800bf70:	1c20b03a 	or	r16,r3,r16
 800bf74:	1080fcc4 	addi	r2,r2,1011
 800bf78:	00a5c83a 	sub	r18,zero,r2
 800bf7c:	0027883a 	mov	r19,zero
 800bf80:	0039883a 	mov	fp,zero
 800bf84:	003f9006 	br	800bdc8 <__alt_data_end+0xf800bdc8>
 800bf88:	3446b03a 	or	r3,r6,r17
 800bf8c:	1800261e 	bne	r3,zero,800c028 <__muldf3+0x2dc>
 800bf90:	0023883a 	mov	r17,zero
 800bf94:	0011883a 	mov	r8,zero
 800bf98:	01400084 	movi	r5,2
 800bf9c:	003f9c06 	br	800be10 <__alt_data_end+0xf800be10>
 800bfa0:	3446b03a 	or	r3,r6,r17
 800bfa4:	18001c26 	beq	r3,zero,800c018 <__muldf3+0x2cc>
 800bfa8:	8800ce26 	beq	r17,zero,800c2e4 <__muldf3+0x598>
 800bfac:	8809883a 	mov	r4,r17
 800bfb0:	d9800215 	stw	r6,8(sp)
 800bfb4:	da400115 	stw	r9,4(sp)
 800bfb8:	da800015 	stw	r10,0(sp)
 800bfbc:	800cf640 	call	800cf64 <__clzsi2>
 800bfc0:	d9800217 	ldw	r6,8(sp)
 800bfc4:	da400117 	ldw	r9,4(sp)
 800bfc8:	da800017 	ldw	r10,0(sp)
 800bfcc:	113ffd44 	addi	r4,r2,-11
 800bfd0:	00c00704 	movi	r3,28
 800bfd4:	1900bf16 	blt	r3,r4,800c2d4 <__muldf3+0x588>
 800bfd8:	00c00744 	movi	r3,29
 800bfdc:	123ffe04 	addi	r8,r2,-8
 800bfe0:	1907c83a 	sub	r3,r3,r4
 800bfe4:	8a22983a 	sll	r17,r17,r8
 800bfe8:	30c6d83a 	srl	r3,r6,r3
 800bfec:	3210983a 	sll	r8,r6,r8
 800bff0:	1c62b03a 	or	r17,r3,r17
 800bff4:	1080fcc4 	addi	r2,r2,1011
 800bff8:	0085c83a 	sub	r2,zero,r2
 800bffc:	000b883a 	mov	r5,zero
 800c000:	003f8306 	br	800be10 <__alt_data_end+0xf800be10>
 800c004:	b02b883a 	mov	r21,r22
 800c008:	0081ffc4 	movi	r2,2047
 800c00c:	000b883a 	mov	r5,zero
 800c010:	0029883a 	mov	r20,zero
 800c014:	003fac06 	br	800bec8 <__alt_data_end+0xf800bec8>
 800c018:	0023883a 	mov	r17,zero
 800c01c:	0011883a 	mov	r8,zero
 800c020:	01400044 	movi	r5,1
 800c024:	003f7a06 	br	800be10 <__alt_data_end+0xf800be10>
 800c028:	014000c4 	movi	r5,3
 800c02c:	003f7806 	br	800be10 <__alt_data_end+0xf800be10>
 800c030:	04c00104 	movi	r19,4
 800c034:	0021883a 	mov	r16,zero
 800c038:	0029883a 	mov	r20,zero
 800c03c:	07000044 	movi	fp,1
 800c040:	003f6106 	br	800bdc8 <__alt_data_end+0xf800bdc8>
 800c044:	04c00304 	movi	r19,12
 800c048:	070000c4 	movi	fp,3
 800c04c:	003f5e06 	br	800bdc8 <__alt_data_end+0xf800bdc8>
 800c050:	01400434 	movhi	r5,16
 800c054:	002b883a 	mov	r21,zero
 800c058:	297fffc4 	addi	r5,r5,-1
 800c05c:	053fffc4 	movi	r20,-1
 800c060:	0081ffc4 	movi	r2,2047
 800c064:	003f9806 	br	800bec8 <__alt_data_end+0xf800bec8>
 800c068:	8023883a 	mov	r17,r16
 800c06c:	a011883a 	mov	r8,r20
 800c070:	e00b883a 	mov	r5,fp
 800c074:	003f8a06 	br	800bea0 <__alt_data_end+0xf800bea0>
 800c078:	8023883a 	mov	r17,r16
 800c07c:	a011883a 	mov	r8,r20
 800c080:	482d883a 	mov	r22,r9
 800c084:	e00b883a 	mov	r5,fp
 800c088:	003f8506 	br	800bea0 <__alt_data_end+0xf800bea0>
 800c08c:	a00ad43a 	srli	r5,r20,16
 800c090:	401ad43a 	srli	r13,r8,16
 800c094:	a53fffcc 	andi	r20,r20,65535
 800c098:	423fffcc 	andi	r8,r8,65535
 800c09c:	4519383a 	mul	r12,r8,r20
 800c0a0:	4147383a 	mul	r3,r8,r5
 800c0a4:	6d09383a 	mul	r4,r13,r20
 800c0a8:	600cd43a 	srli	r6,r12,16
 800c0ac:	2b5d383a 	mul	r14,r5,r13
 800c0b0:	20c9883a 	add	r4,r4,r3
 800c0b4:	310d883a 	add	r6,r6,r4
 800c0b8:	30c0022e 	bgeu	r6,r3,800c0c4 <__muldf3+0x378>
 800c0bc:	00c00074 	movhi	r3,1
 800c0c0:	70dd883a 	add	r14,r14,r3
 800c0c4:	8826d43a 	srli	r19,r17,16
 800c0c8:	8bffffcc 	andi	r15,r17,65535
 800c0cc:	7d23383a 	mul	r17,r15,r20
 800c0d0:	7949383a 	mul	r4,r15,r5
 800c0d4:	9d29383a 	mul	r20,r19,r20
 800c0d8:	8814d43a 	srli	r10,r17,16
 800c0dc:	3012943a 	slli	r9,r6,16
 800c0e0:	a129883a 	add	r20,r20,r4
 800c0e4:	633fffcc 	andi	r12,r12,65535
 800c0e8:	5515883a 	add	r10,r10,r20
 800c0ec:	3006d43a 	srli	r3,r6,16
 800c0f0:	4b13883a 	add	r9,r9,r12
 800c0f4:	2ccb383a 	mul	r5,r5,r19
 800c0f8:	5100022e 	bgeu	r10,r4,800c104 <__muldf3+0x3b8>
 800c0fc:	01000074 	movhi	r4,1
 800c100:	290b883a 	add	r5,r5,r4
 800c104:	802ad43a 	srli	r21,r16,16
 800c108:	843fffcc 	andi	r16,r16,65535
 800c10c:	440d383a 	mul	r6,r8,r16
 800c110:	4565383a 	mul	r18,r8,r21
 800c114:	8349383a 	mul	r4,r16,r13
 800c118:	500e943a 	slli	r7,r10,16
 800c11c:	3010d43a 	srli	r8,r6,16
 800c120:	5028d43a 	srli	r20,r10,16
 800c124:	2489883a 	add	r4,r4,r18
 800c128:	8abfffcc 	andi	r10,r17,65535
 800c12c:	3a95883a 	add	r10,r7,r10
 800c130:	4119883a 	add	r12,r8,r4
 800c134:	a169883a 	add	r20,r20,r5
 800c138:	1a87883a 	add	r3,r3,r10
 800c13c:	6d5b383a 	mul	r13,r13,r21
 800c140:	6480022e 	bgeu	r12,r18,800c14c <__muldf3+0x400>
 800c144:	01000074 	movhi	r4,1
 800c148:	691b883a 	add	r13,r13,r4
 800c14c:	7c25383a 	mul	r18,r15,r16
 800c150:	7d4b383a 	mul	r5,r15,r21
 800c154:	84cf383a 	mul	r7,r16,r19
 800c158:	901ed43a 	srli	r15,r18,16
 800c15c:	6008d43a 	srli	r4,r12,16
 800c160:	6010943a 	slli	r8,r12,16
 800c164:	394f883a 	add	r7,r7,r5
 800c168:	333fffcc 	andi	r12,r6,65535
 800c16c:	79df883a 	add	r15,r15,r7
 800c170:	235b883a 	add	r13,r4,r13
 800c174:	9d63383a 	mul	r17,r19,r21
 800c178:	4309883a 	add	r4,r8,r12
 800c17c:	7940022e 	bgeu	r15,r5,800c188 <__muldf3+0x43c>
 800c180:	01400074 	movhi	r5,1
 800c184:	8963883a 	add	r17,r17,r5
 800c188:	780a943a 	slli	r5,r15,16
 800c18c:	91bfffcc 	andi	r6,r18,65535
 800c190:	70c7883a 	add	r3,r14,r3
 800c194:	298d883a 	add	r6,r5,r6
 800c198:	1a8f803a 	cmpltu	r7,r3,r10
 800c19c:	350b883a 	add	r5,r6,r20
 800c1a0:	20c7883a 	add	r3,r4,r3
 800c1a4:	3955883a 	add	r10,r7,r5
 800c1a8:	1909803a 	cmpltu	r4,r3,r4
 800c1ac:	6a91883a 	add	r8,r13,r10
 800c1b0:	780cd43a 	srli	r6,r15,16
 800c1b4:	2219883a 	add	r12,r4,r8
 800c1b8:	2d0b803a 	cmpltu	r5,r5,r20
 800c1bc:	51cf803a 	cmpltu	r7,r10,r7
 800c1c0:	29ceb03a 	or	r7,r5,r7
 800c1c4:	4351803a 	cmpltu	r8,r8,r13
 800c1c8:	610b803a 	cmpltu	r5,r12,r4
 800c1cc:	4148b03a 	or	r4,r8,r5
 800c1d0:	398f883a 	add	r7,r7,r6
 800c1d4:	3909883a 	add	r4,r7,r4
 800c1d8:	1810927a 	slli	r8,r3,9
 800c1dc:	2449883a 	add	r4,r4,r17
 800c1e0:	2008927a 	slli	r4,r4,9
 800c1e4:	6022d5fa 	srli	r17,r12,23
 800c1e8:	1806d5fa 	srli	r3,r3,23
 800c1ec:	4252b03a 	or	r9,r8,r9
 800c1f0:	600a927a 	slli	r5,r12,9
 800c1f4:	4810c03a 	cmpne	r8,r9,zero
 800c1f8:	2462b03a 	or	r17,r4,r17
 800c1fc:	40c6b03a 	or	r3,r8,r3
 800c200:	8900402c 	andhi	r4,r17,256
 800c204:	1950b03a 	or	r8,r3,r5
 800c208:	20000726 	beq	r4,zero,800c228 <__muldf3+0x4dc>
 800c20c:	4006d07a 	srli	r3,r8,1
 800c210:	880497fa 	slli	r2,r17,31
 800c214:	4200004c 	andi	r8,r8,1
 800c218:	8822d07a 	srli	r17,r17,1
 800c21c:	1a10b03a 	or	r8,r3,r8
 800c220:	1210b03a 	or	r8,r2,r8
 800c224:	5805883a 	mov	r2,r11
 800c228:	1140ffc4 	addi	r5,r2,1023
 800c22c:	0140440e 	bge	zero,r5,800c340 <__muldf3+0x5f4>
 800c230:	40c001cc 	andi	r3,r8,7
 800c234:	18000726 	beq	r3,zero,800c254 <__muldf3+0x508>
 800c238:	40c003cc 	andi	r3,r8,15
 800c23c:	01000104 	movi	r4,4
 800c240:	19000426 	beq	r3,r4,800c254 <__muldf3+0x508>
 800c244:	4107883a 	add	r3,r8,r4
 800c248:	1a11803a 	cmpltu	r8,r3,r8
 800c24c:	8a23883a 	add	r17,r17,r8
 800c250:	1811883a 	mov	r8,r3
 800c254:	88c0402c 	andhi	r3,r17,256
 800c258:	18000426 	beq	r3,zero,800c26c <__muldf3+0x520>
 800c25c:	11410004 	addi	r5,r2,1024
 800c260:	00bfc034 	movhi	r2,65280
 800c264:	10bfffc4 	addi	r2,r2,-1
 800c268:	88a2703a 	and	r17,r17,r2
 800c26c:	0081ff84 	movi	r2,2046
 800c270:	117f6416 	blt	r2,r5,800c004 <__alt_data_end+0xf800c004>
 800c274:	8828977a 	slli	r20,r17,29
 800c278:	4010d0fa 	srli	r8,r8,3
 800c27c:	8822927a 	slli	r17,r17,9
 800c280:	2881ffcc 	andi	r2,r5,2047
 800c284:	a228b03a 	or	r20,r20,r8
 800c288:	880ad33a 	srli	r5,r17,12
 800c28c:	b02b883a 	mov	r21,r22
 800c290:	003f0d06 	br	800bec8 <__alt_data_end+0xf800bec8>
 800c294:	8080022c 	andhi	r2,r16,8
 800c298:	10000926 	beq	r2,zero,800c2c0 <__muldf3+0x574>
 800c29c:	8880022c 	andhi	r2,r17,8
 800c2a0:	1000071e 	bne	r2,zero,800c2c0 <__muldf3+0x574>
 800c2a4:	00800434 	movhi	r2,16
 800c2a8:	89400234 	orhi	r5,r17,8
 800c2ac:	10bfffc4 	addi	r2,r2,-1
 800c2b0:	b82b883a 	mov	r21,r23
 800c2b4:	288a703a 	and	r5,r5,r2
 800c2b8:	4029883a 	mov	r20,r8
 800c2bc:	003f6806 	br	800c060 <__alt_data_end+0xf800c060>
 800c2c0:	00800434 	movhi	r2,16
 800c2c4:	81400234 	orhi	r5,r16,8
 800c2c8:	10bfffc4 	addi	r2,r2,-1
 800c2cc:	288a703a 	and	r5,r5,r2
 800c2d0:	003f6306 	br	800c060 <__alt_data_end+0xf800c060>
 800c2d4:	147ff604 	addi	r17,r2,-40
 800c2d8:	3462983a 	sll	r17,r6,r17
 800c2dc:	0011883a 	mov	r8,zero
 800c2e0:	003f4406 	br	800bff4 <__alt_data_end+0xf800bff4>
 800c2e4:	3009883a 	mov	r4,r6
 800c2e8:	d9800215 	stw	r6,8(sp)
 800c2ec:	da400115 	stw	r9,4(sp)
 800c2f0:	da800015 	stw	r10,0(sp)
 800c2f4:	800cf640 	call	800cf64 <__clzsi2>
 800c2f8:	10800804 	addi	r2,r2,32
 800c2fc:	da800017 	ldw	r10,0(sp)
 800c300:	da400117 	ldw	r9,4(sp)
 800c304:	d9800217 	ldw	r6,8(sp)
 800c308:	003f3006 	br	800bfcc <__alt_data_end+0xf800bfcc>
 800c30c:	143ff604 	addi	r16,r2,-40
 800c310:	9c20983a 	sll	r16,r19,r16
 800c314:	0029883a 	mov	r20,zero
 800c318:	003f1606 	br	800bf74 <__alt_data_end+0xf800bf74>
 800c31c:	d9800215 	stw	r6,8(sp)
 800c320:	d9c00015 	stw	r7,0(sp)
 800c324:	da400115 	stw	r9,4(sp)
 800c328:	800cf640 	call	800cf64 <__clzsi2>
 800c32c:	10800804 	addi	r2,r2,32
 800c330:	da400117 	ldw	r9,4(sp)
 800c334:	d9c00017 	ldw	r7,0(sp)
 800c338:	d9800217 	ldw	r6,8(sp)
 800c33c:	003f0306 	br	800bf4c <__alt_data_end+0xf800bf4c>
 800c340:	00c00044 	movi	r3,1
 800c344:	1947c83a 	sub	r3,r3,r5
 800c348:	00800e04 	movi	r2,56
 800c34c:	10feda16 	blt	r2,r3,800beb8 <__alt_data_end+0xf800beb8>
 800c350:	008007c4 	movi	r2,31
 800c354:	10c01b16 	blt	r2,r3,800c3c4 <__muldf3+0x678>
 800c358:	00800804 	movi	r2,32
 800c35c:	10c5c83a 	sub	r2,r2,r3
 800c360:	888a983a 	sll	r5,r17,r2
 800c364:	40c8d83a 	srl	r4,r8,r3
 800c368:	4084983a 	sll	r2,r8,r2
 800c36c:	88e2d83a 	srl	r17,r17,r3
 800c370:	2906b03a 	or	r3,r5,r4
 800c374:	1004c03a 	cmpne	r2,r2,zero
 800c378:	1886b03a 	or	r3,r3,r2
 800c37c:	188001cc 	andi	r2,r3,7
 800c380:	10000726 	beq	r2,zero,800c3a0 <__muldf3+0x654>
 800c384:	188003cc 	andi	r2,r3,15
 800c388:	01000104 	movi	r4,4
 800c38c:	11000426 	beq	r2,r4,800c3a0 <__muldf3+0x654>
 800c390:	1805883a 	mov	r2,r3
 800c394:	10c00104 	addi	r3,r2,4
 800c398:	1885803a 	cmpltu	r2,r3,r2
 800c39c:	88a3883a 	add	r17,r17,r2
 800c3a0:	8880202c 	andhi	r2,r17,128
 800c3a4:	10001c26 	beq	r2,zero,800c418 <__muldf3+0x6cc>
 800c3a8:	b02b883a 	mov	r21,r22
 800c3ac:	00800044 	movi	r2,1
 800c3b0:	000b883a 	mov	r5,zero
 800c3b4:	0029883a 	mov	r20,zero
 800c3b8:	003ec306 	br	800bec8 <__alt_data_end+0xf800bec8>
 800c3bc:	5805883a 	mov	r2,r11
 800c3c0:	003f9906 	br	800c228 <__alt_data_end+0xf800c228>
 800c3c4:	00bff844 	movi	r2,-31
 800c3c8:	1145c83a 	sub	r2,r2,r5
 800c3cc:	8888d83a 	srl	r4,r17,r2
 800c3d0:	00800804 	movi	r2,32
 800c3d4:	18801a26 	beq	r3,r2,800c440 <__muldf3+0x6f4>
 800c3d8:	00801004 	movi	r2,64
 800c3dc:	10c5c83a 	sub	r2,r2,r3
 800c3e0:	8884983a 	sll	r2,r17,r2
 800c3e4:	1204b03a 	or	r2,r2,r8
 800c3e8:	1004c03a 	cmpne	r2,r2,zero
 800c3ec:	2084b03a 	or	r2,r4,r2
 800c3f0:	144001cc 	andi	r17,r2,7
 800c3f4:	88000d1e 	bne	r17,zero,800c42c <__muldf3+0x6e0>
 800c3f8:	000b883a 	mov	r5,zero
 800c3fc:	1028d0fa 	srli	r20,r2,3
 800c400:	b02b883a 	mov	r21,r22
 800c404:	0005883a 	mov	r2,zero
 800c408:	a468b03a 	or	r20,r20,r17
 800c40c:	003eae06 	br	800bec8 <__alt_data_end+0xf800bec8>
 800c410:	1007883a 	mov	r3,r2
 800c414:	0023883a 	mov	r17,zero
 800c418:	880a927a 	slli	r5,r17,9
 800c41c:	1805883a 	mov	r2,r3
 800c420:	8822977a 	slli	r17,r17,29
 800c424:	280ad33a 	srli	r5,r5,12
 800c428:	003ff406 	br	800c3fc <__alt_data_end+0xf800c3fc>
 800c42c:	10c003cc 	andi	r3,r2,15
 800c430:	01000104 	movi	r4,4
 800c434:	193ff626 	beq	r3,r4,800c410 <__alt_data_end+0xf800c410>
 800c438:	0023883a 	mov	r17,zero
 800c43c:	003fd506 	br	800c394 <__alt_data_end+0xf800c394>
 800c440:	0005883a 	mov	r2,zero
 800c444:	003fe706 	br	800c3e4 <__alt_data_end+0xf800c3e4>
 800c448:	00800434 	movhi	r2,16
 800c44c:	89400234 	orhi	r5,r17,8
 800c450:	10bfffc4 	addi	r2,r2,-1
 800c454:	b02b883a 	mov	r21,r22
 800c458:	288a703a 	and	r5,r5,r2
 800c45c:	4029883a 	mov	r20,r8
 800c460:	003eff06 	br	800c060 <__alt_data_end+0xf800c060>

0800c464 <__subdf3>:
 800c464:	02000434 	movhi	r8,16
 800c468:	423fffc4 	addi	r8,r8,-1
 800c46c:	defffb04 	addi	sp,sp,-20
 800c470:	2a14703a 	and	r10,r5,r8
 800c474:	3812d53a 	srli	r9,r7,20
 800c478:	3a10703a 	and	r8,r7,r8
 800c47c:	2006d77a 	srli	r3,r4,29
 800c480:	3004d77a 	srli	r2,r6,29
 800c484:	dc000015 	stw	r16,0(sp)
 800c488:	501490fa 	slli	r10,r10,3
 800c48c:	2820d53a 	srli	r16,r5,20
 800c490:	401090fa 	slli	r8,r8,3
 800c494:	dc800215 	stw	r18,8(sp)
 800c498:	dc400115 	stw	r17,4(sp)
 800c49c:	dfc00415 	stw	ra,16(sp)
 800c4a0:	202290fa 	slli	r17,r4,3
 800c4a4:	dcc00315 	stw	r19,12(sp)
 800c4a8:	4a41ffcc 	andi	r9,r9,2047
 800c4ac:	0101ffc4 	movi	r4,2047
 800c4b0:	2824d7fa 	srli	r18,r5,31
 800c4b4:	8401ffcc 	andi	r16,r16,2047
 800c4b8:	50c6b03a 	or	r3,r10,r3
 800c4bc:	380ed7fa 	srli	r7,r7,31
 800c4c0:	408ab03a 	or	r5,r8,r2
 800c4c4:	300c90fa 	slli	r6,r6,3
 800c4c8:	49009626 	beq	r9,r4,800c724 <__subdf3+0x2c0>
 800c4cc:	39c0005c 	xori	r7,r7,1
 800c4d0:	8245c83a 	sub	r2,r16,r9
 800c4d4:	3c807426 	beq	r7,r18,800c6a8 <__subdf3+0x244>
 800c4d8:	0080af0e 	bge	zero,r2,800c798 <__subdf3+0x334>
 800c4dc:	48002a1e 	bne	r9,zero,800c588 <__subdf3+0x124>
 800c4e0:	2988b03a 	or	r4,r5,r6
 800c4e4:	20009a1e 	bne	r4,zero,800c750 <__subdf3+0x2ec>
 800c4e8:	888001cc 	andi	r2,r17,7
 800c4ec:	10000726 	beq	r2,zero,800c50c <__subdf3+0xa8>
 800c4f0:	888003cc 	andi	r2,r17,15
 800c4f4:	01000104 	movi	r4,4
 800c4f8:	11000426 	beq	r2,r4,800c50c <__subdf3+0xa8>
 800c4fc:	890b883a 	add	r5,r17,r4
 800c500:	2c63803a 	cmpltu	r17,r5,r17
 800c504:	1c47883a 	add	r3,r3,r17
 800c508:	2823883a 	mov	r17,r5
 800c50c:	1880202c 	andhi	r2,r3,128
 800c510:	10005926 	beq	r2,zero,800c678 <__subdf3+0x214>
 800c514:	84000044 	addi	r16,r16,1
 800c518:	0081ffc4 	movi	r2,2047
 800c51c:	8080be26 	beq	r16,r2,800c818 <__subdf3+0x3b4>
 800c520:	017fe034 	movhi	r5,65408
 800c524:	297fffc4 	addi	r5,r5,-1
 800c528:	1946703a 	and	r3,r3,r5
 800c52c:	1804977a 	slli	r2,r3,29
 800c530:	1806927a 	slli	r3,r3,9
 800c534:	8822d0fa 	srli	r17,r17,3
 800c538:	8401ffcc 	andi	r16,r16,2047
 800c53c:	180ad33a 	srli	r5,r3,12
 800c540:	9100004c 	andi	r4,r18,1
 800c544:	1444b03a 	or	r2,r2,r17
 800c548:	80c1ffcc 	andi	r3,r16,2047
 800c54c:	1820953a 	slli	r16,r3,20
 800c550:	20c03fcc 	andi	r3,r4,255
 800c554:	180897fa 	slli	r4,r3,31
 800c558:	00c00434 	movhi	r3,16
 800c55c:	18ffffc4 	addi	r3,r3,-1
 800c560:	28c6703a 	and	r3,r5,r3
 800c564:	1c06b03a 	or	r3,r3,r16
 800c568:	1906b03a 	or	r3,r3,r4
 800c56c:	dfc00417 	ldw	ra,16(sp)
 800c570:	dcc00317 	ldw	r19,12(sp)
 800c574:	dc800217 	ldw	r18,8(sp)
 800c578:	dc400117 	ldw	r17,4(sp)
 800c57c:	dc000017 	ldw	r16,0(sp)
 800c580:	dec00504 	addi	sp,sp,20
 800c584:	f800283a 	ret
 800c588:	0101ffc4 	movi	r4,2047
 800c58c:	813fd626 	beq	r16,r4,800c4e8 <__alt_data_end+0xf800c4e8>
 800c590:	29402034 	orhi	r5,r5,128
 800c594:	01000e04 	movi	r4,56
 800c598:	2080a316 	blt	r4,r2,800c828 <__subdf3+0x3c4>
 800c59c:	010007c4 	movi	r4,31
 800c5a0:	2080c616 	blt	r4,r2,800c8bc <__subdf3+0x458>
 800c5a4:	01000804 	movi	r4,32
 800c5a8:	2089c83a 	sub	r4,r4,r2
 800c5ac:	2910983a 	sll	r8,r5,r4
 800c5b0:	308ed83a 	srl	r7,r6,r2
 800c5b4:	3108983a 	sll	r4,r6,r4
 800c5b8:	2884d83a 	srl	r2,r5,r2
 800c5bc:	41ccb03a 	or	r6,r8,r7
 800c5c0:	2008c03a 	cmpne	r4,r4,zero
 800c5c4:	310cb03a 	or	r6,r6,r4
 800c5c8:	898dc83a 	sub	r6,r17,r6
 800c5cc:	89a3803a 	cmpltu	r17,r17,r6
 800c5d0:	1887c83a 	sub	r3,r3,r2
 800c5d4:	1c47c83a 	sub	r3,r3,r17
 800c5d8:	3023883a 	mov	r17,r6
 800c5dc:	1880202c 	andhi	r2,r3,128
 800c5e0:	10002326 	beq	r2,zero,800c670 <__subdf3+0x20c>
 800c5e4:	04c02034 	movhi	r19,128
 800c5e8:	9cffffc4 	addi	r19,r19,-1
 800c5ec:	1ce6703a 	and	r19,r3,r19
 800c5f0:	98007a26 	beq	r19,zero,800c7dc <__subdf3+0x378>
 800c5f4:	9809883a 	mov	r4,r19
 800c5f8:	800cf640 	call	800cf64 <__clzsi2>
 800c5fc:	113ffe04 	addi	r4,r2,-8
 800c600:	00c007c4 	movi	r3,31
 800c604:	19007b16 	blt	r3,r4,800c7f4 <__subdf3+0x390>
 800c608:	00800804 	movi	r2,32
 800c60c:	1105c83a 	sub	r2,r2,r4
 800c610:	8884d83a 	srl	r2,r17,r2
 800c614:	9906983a 	sll	r3,r19,r4
 800c618:	8922983a 	sll	r17,r17,r4
 800c61c:	10c4b03a 	or	r2,r2,r3
 800c620:	24007816 	blt	r4,r16,800c804 <__subdf3+0x3a0>
 800c624:	2421c83a 	sub	r16,r4,r16
 800c628:	80c00044 	addi	r3,r16,1
 800c62c:	010007c4 	movi	r4,31
 800c630:	20c09516 	blt	r4,r3,800c888 <__subdf3+0x424>
 800c634:	01400804 	movi	r5,32
 800c638:	28cbc83a 	sub	r5,r5,r3
 800c63c:	88c8d83a 	srl	r4,r17,r3
 800c640:	8962983a 	sll	r17,r17,r5
 800c644:	114a983a 	sll	r5,r2,r5
 800c648:	10c6d83a 	srl	r3,r2,r3
 800c64c:	8804c03a 	cmpne	r2,r17,zero
 800c650:	290ab03a 	or	r5,r5,r4
 800c654:	28a2b03a 	or	r17,r5,r2
 800c658:	0021883a 	mov	r16,zero
 800c65c:	003fa206 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c660:	2090b03a 	or	r8,r4,r2
 800c664:	40018e26 	beq	r8,zero,800cca0 <__subdf3+0x83c>
 800c668:	1007883a 	mov	r3,r2
 800c66c:	2023883a 	mov	r17,r4
 800c670:	888001cc 	andi	r2,r17,7
 800c674:	103f9e1e 	bne	r2,zero,800c4f0 <__alt_data_end+0xf800c4f0>
 800c678:	1804977a 	slli	r2,r3,29
 800c67c:	8822d0fa 	srli	r17,r17,3
 800c680:	1810d0fa 	srli	r8,r3,3
 800c684:	9100004c 	andi	r4,r18,1
 800c688:	1444b03a 	or	r2,r2,r17
 800c68c:	00c1ffc4 	movi	r3,2047
 800c690:	80c02826 	beq	r16,r3,800c734 <__subdf3+0x2d0>
 800c694:	01400434 	movhi	r5,16
 800c698:	297fffc4 	addi	r5,r5,-1
 800c69c:	80e0703a 	and	r16,r16,r3
 800c6a0:	414a703a 	and	r5,r8,r5
 800c6a4:	003fa806 	br	800c548 <__alt_data_end+0xf800c548>
 800c6a8:	0080630e 	bge	zero,r2,800c838 <__subdf3+0x3d4>
 800c6ac:	48003026 	beq	r9,zero,800c770 <__subdf3+0x30c>
 800c6b0:	0101ffc4 	movi	r4,2047
 800c6b4:	813f8c26 	beq	r16,r4,800c4e8 <__alt_data_end+0xf800c4e8>
 800c6b8:	29402034 	orhi	r5,r5,128
 800c6bc:	01000e04 	movi	r4,56
 800c6c0:	2080a90e 	bge	r4,r2,800c968 <__subdf3+0x504>
 800c6c4:	298cb03a 	or	r6,r5,r6
 800c6c8:	3012c03a 	cmpne	r9,r6,zero
 800c6cc:	0005883a 	mov	r2,zero
 800c6d0:	4c53883a 	add	r9,r9,r17
 800c6d4:	4c63803a 	cmpltu	r17,r9,r17
 800c6d8:	10c7883a 	add	r3,r2,r3
 800c6dc:	88c7883a 	add	r3,r17,r3
 800c6e0:	4823883a 	mov	r17,r9
 800c6e4:	1880202c 	andhi	r2,r3,128
 800c6e8:	1000d026 	beq	r2,zero,800ca2c <__subdf3+0x5c8>
 800c6ec:	84000044 	addi	r16,r16,1
 800c6f0:	0081ffc4 	movi	r2,2047
 800c6f4:	8080fe26 	beq	r16,r2,800caf0 <__subdf3+0x68c>
 800c6f8:	00bfe034 	movhi	r2,65408
 800c6fc:	10bfffc4 	addi	r2,r2,-1
 800c700:	1886703a 	and	r3,r3,r2
 800c704:	880ad07a 	srli	r5,r17,1
 800c708:	180497fa 	slli	r2,r3,31
 800c70c:	8900004c 	andi	r4,r17,1
 800c710:	2922b03a 	or	r17,r5,r4
 800c714:	1806d07a 	srli	r3,r3,1
 800c718:	1462b03a 	or	r17,r2,r17
 800c71c:	3825883a 	mov	r18,r7
 800c720:	003f7106 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c724:	2984b03a 	or	r2,r5,r6
 800c728:	103f6826 	beq	r2,zero,800c4cc <__alt_data_end+0xf800c4cc>
 800c72c:	39c03fcc 	andi	r7,r7,255
 800c730:	003f6706 	br	800c4d0 <__alt_data_end+0xf800c4d0>
 800c734:	4086b03a 	or	r3,r8,r2
 800c738:	18015226 	beq	r3,zero,800cc84 <__subdf3+0x820>
 800c73c:	00c00434 	movhi	r3,16
 800c740:	41400234 	orhi	r5,r8,8
 800c744:	18ffffc4 	addi	r3,r3,-1
 800c748:	28ca703a 	and	r5,r5,r3
 800c74c:	003f7e06 	br	800c548 <__alt_data_end+0xf800c548>
 800c750:	10bfffc4 	addi	r2,r2,-1
 800c754:	1000491e 	bne	r2,zero,800c87c <__subdf3+0x418>
 800c758:	898fc83a 	sub	r7,r17,r6
 800c75c:	89e3803a 	cmpltu	r17,r17,r7
 800c760:	1947c83a 	sub	r3,r3,r5
 800c764:	1c47c83a 	sub	r3,r3,r17
 800c768:	3823883a 	mov	r17,r7
 800c76c:	003f9b06 	br	800c5dc <__alt_data_end+0xf800c5dc>
 800c770:	2988b03a 	or	r4,r5,r6
 800c774:	203f5c26 	beq	r4,zero,800c4e8 <__alt_data_end+0xf800c4e8>
 800c778:	10bfffc4 	addi	r2,r2,-1
 800c77c:	1000931e 	bne	r2,zero,800c9cc <__subdf3+0x568>
 800c780:	898d883a 	add	r6,r17,r6
 800c784:	3463803a 	cmpltu	r17,r6,r17
 800c788:	1947883a 	add	r3,r3,r5
 800c78c:	88c7883a 	add	r3,r17,r3
 800c790:	3023883a 	mov	r17,r6
 800c794:	003fd306 	br	800c6e4 <__alt_data_end+0xf800c6e4>
 800c798:	1000541e 	bne	r2,zero,800c8ec <__subdf3+0x488>
 800c79c:	80800044 	addi	r2,r16,1
 800c7a0:	1081ffcc 	andi	r2,r2,2047
 800c7a4:	01000044 	movi	r4,1
 800c7a8:	2080a20e 	bge	r4,r2,800ca34 <__subdf3+0x5d0>
 800c7ac:	8989c83a 	sub	r4,r17,r6
 800c7b0:	8905803a 	cmpltu	r2,r17,r4
 800c7b4:	1967c83a 	sub	r19,r3,r5
 800c7b8:	98a7c83a 	sub	r19,r19,r2
 800c7bc:	9880202c 	andhi	r2,r19,128
 800c7c0:	10006326 	beq	r2,zero,800c950 <__subdf3+0x4ec>
 800c7c4:	3463c83a 	sub	r17,r6,r17
 800c7c8:	28c7c83a 	sub	r3,r5,r3
 800c7cc:	344d803a 	cmpltu	r6,r6,r17
 800c7d0:	19a7c83a 	sub	r19,r3,r6
 800c7d4:	3825883a 	mov	r18,r7
 800c7d8:	983f861e 	bne	r19,zero,800c5f4 <__alt_data_end+0xf800c5f4>
 800c7dc:	8809883a 	mov	r4,r17
 800c7e0:	800cf640 	call	800cf64 <__clzsi2>
 800c7e4:	10800804 	addi	r2,r2,32
 800c7e8:	113ffe04 	addi	r4,r2,-8
 800c7ec:	00c007c4 	movi	r3,31
 800c7f0:	193f850e 	bge	r3,r4,800c608 <__alt_data_end+0xf800c608>
 800c7f4:	10bff604 	addi	r2,r2,-40
 800c7f8:	8884983a 	sll	r2,r17,r2
 800c7fc:	0023883a 	mov	r17,zero
 800c800:	243f880e 	bge	r4,r16,800c624 <__alt_data_end+0xf800c624>
 800c804:	00ffe034 	movhi	r3,65408
 800c808:	18ffffc4 	addi	r3,r3,-1
 800c80c:	8121c83a 	sub	r16,r16,r4
 800c810:	10c6703a 	and	r3,r2,r3
 800c814:	003f3406 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c818:	9100004c 	andi	r4,r18,1
 800c81c:	000b883a 	mov	r5,zero
 800c820:	0005883a 	mov	r2,zero
 800c824:	003f4806 	br	800c548 <__alt_data_end+0xf800c548>
 800c828:	298cb03a 	or	r6,r5,r6
 800c82c:	300cc03a 	cmpne	r6,r6,zero
 800c830:	0005883a 	mov	r2,zero
 800c834:	003f6406 	br	800c5c8 <__alt_data_end+0xf800c5c8>
 800c838:	10009a1e 	bne	r2,zero,800caa4 <__subdf3+0x640>
 800c83c:	82400044 	addi	r9,r16,1
 800c840:	4881ffcc 	andi	r2,r9,2047
 800c844:	02800044 	movi	r10,1
 800c848:	5080670e 	bge	r10,r2,800c9e8 <__subdf3+0x584>
 800c84c:	0081ffc4 	movi	r2,2047
 800c850:	4880af26 	beq	r9,r2,800cb10 <__subdf3+0x6ac>
 800c854:	898d883a 	add	r6,r17,r6
 800c858:	1945883a 	add	r2,r3,r5
 800c85c:	3447803a 	cmpltu	r3,r6,r17
 800c860:	1887883a 	add	r3,r3,r2
 800c864:	182297fa 	slli	r17,r3,31
 800c868:	300cd07a 	srli	r6,r6,1
 800c86c:	1806d07a 	srli	r3,r3,1
 800c870:	4821883a 	mov	r16,r9
 800c874:	89a2b03a 	or	r17,r17,r6
 800c878:	003f1b06 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c87c:	0101ffc4 	movi	r4,2047
 800c880:	813f441e 	bne	r16,r4,800c594 <__alt_data_end+0xf800c594>
 800c884:	003f1806 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c888:	843ff844 	addi	r16,r16,-31
 800c88c:	01400804 	movi	r5,32
 800c890:	1408d83a 	srl	r4,r2,r16
 800c894:	19405026 	beq	r3,r5,800c9d8 <__subdf3+0x574>
 800c898:	01401004 	movi	r5,64
 800c89c:	28c7c83a 	sub	r3,r5,r3
 800c8a0:	10c4983a 	sll	r2,r2,r3
 800c8a4:	88a2b03a 	or	r17,r17,r2
 800c8a8:	8822c03a 	cmpne	r17,r17,zero
 800c8ac:	2462b03a 	or	r17,r4,r17
 800c8b0:	0007883a 	mov	r3,zero
 800c8b4:	0021883a 	mov	r16,zero
 800c8b8:	003f6d06 	br	800c670 <__alt_data_end+0xf800c670>
 800c8bc:	11fff804 	addi	r7,r2,-32
 800c8c0:	01000804 	movi	r4,32
 800c8c4:	29ced83a 	srl	r7,r5,r7
 800c8c8:	11004526 	beq	r2,r4,800c9e0 <__subdf3+0x57c>
 800c8cc:	01001004 	movi	r4,64
 800c8d0:	2089c83a 	sub	r4,r4,r2
 800c8d4:	2904983a 	sll	r2,r5,r4
 800c8d8:	118cb03a 	or	r6,r2,r6
 800c8dc:	300cc03a 	cmpne	r6,r6,zero
 800c8e0:	398cb03a 	or	r6,r7,r6
 800c8e4:	0005883a 	mov	r2,zero
 800c8e8:	003f3706 	br	800c5c8 <__alt_data_end+0xf800c5c8>
 800c8ec:	80002a26 	beq	r16,zero,800c998 <__subdf3+0x534>
 800c8f0:	0101ffc4 	movi	r4,2047
 800c8f4:	49006626 	beq	r9,r4,800ca90 <__subdf3+0x62c>
 800c8f8:	0085c83a 	sub	r2,zero,r2
 800c8fc:	18c02034 	orhi	r3,r3,128
 800c900:	01000e04 	movi	r4,56
 800c904:	20807e16 	blt	r4,r2,800cb00 <__subdf3+0x69c>
 800c908:	010007c4 	movi	r4,31
 800c90c:	2080e716 	blt	r4,r2,800ccac <__subdf3+0x848>
 800c910:	01000804 	movi	r4,32
 800c914:	2089c83a 	sub	r4,r4,r2
 800c918:	1914983a 	sll	r10,r3,r4
 800c91c:	8890d83a 	srl	r8,r17,r2
 800c920:	8908983a 	sll	r4,r17,r4
 800c924:	1884d83a 	srl	r2,r3,r2
 800c928:	5222b03a 	or	r17,r10,r8
 800c92c:	2006c03a 	cmpne	r3,r4,zero
 800c930:	88e2b03a 	or	r17,r17,r3
 800c934:	3463c83a 	sub	r17,r6,r17
 800c938:	2885c83a 	sub	r2,r5,r2
 800c93c:	344d803a 	cmpltu	r6,r6,r17
 800c940:	1187c83a 	sub	r3,r2,r6
 800c944:	4821883a 	mov	r16,r9
 800c948:	3825883a 	mov	r18,r7
 800c94c:	003f2306 	br	800c5dc <__alt_data_end+0xf800c5dc>
 800c950:	24d0b03a 	or	r8,r4,r19
 800c954:	40001b1e 	bne	r8,zero,800c9c4 <__subdf3+0x560>
 800c958:	0005883a 	mov	r2,zero
 800c95c:	0009883a 	mov	r4,zero
 800c960:	0021883a 	mov	r16,zero
 800c964:	003f4906 	br	800c68c <__alt_data_end+0xf800c68c>
 800c968:	010007c4 	movi	r4,31
 800c96c:	20803a16 	blt	r4,r2,800ca58 <__subdf3+0x5f4>
 800c970:	01000804 	movi	r4,32
 800c974:	2089c83a 	sub	r4,r4,r2
 800c978:	2912983a 	sll	r9,r5,r4
 800c97c:	3090d83a 	srl	r8,r6,r2
 800c980:	3108983a 	sll	r4,r6,r4
 800c984:	2884d83a 	srl	r2,r5,r2
 800c988:	4a12b03a 	or	r9,r9,r8
 800c98c:	2008c03a 	cmpne	r4,r4,zero
 800c990:	4912b03a 	or	r9,r9,r4
 800c994:	003f4e06 	br	800c6d0 <__alt_data_end+0xf800c6d0>
 800c998:	1c48b03a 	or	r4,r3,r17
 800c99c:	20003c26 	beq	r4,zero,800ca90 <__subdf3+0x62c>
 800c9a0:	0084303a 	nor	r2,zero,r2
 800c9a4:	1000381e 	bne	r2,zero,800ca88 <__subdf3+0x624>
 800c9a8:	3463c83a 	sub	r17,r6,r17
 800c9ac:	28c5c83a 	sub	r2,r5,r3
 800c9b0:	344d803a 	cmpltu	r6,r6,r17
 800c9b4:	1187c83a 	sub	r3,r2,r6
 800c9b8:	4821883a 	mov	r16,r9
 800c9bc:	3825883a 	mov	r18,r7
 800c9c0:	003f0606 	br	800c5dc <__alt_data_end+0xf800c5dc>
 800c9c4:	2023883a 	mov	r17,r4
 800c9c8:	003f0906 	br	800c5f0 <__alt_data_end+0xf800c5f0>
 800c9cc:	0101ffc4 	movi	r4,2047
 800c9d0:	813f3a1e 	bne	r16,r4,800c6bc <__alt_data_end+0xf800c6bc>
 800c9d4:	003ec406 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800c9d8:	0005883a 	mov	r2,zero
 800c9dc:	003fb106 	br	800c8a4 <__alt_data_end+0xf800c8a4>
 800c9e0:	0005883a 	mov	r2,zero
 800c9e4:	003fbc06 	br	800c8d8 <__alt_data_end+0xf800c8d8>
 800c9e8:	1c44b03a 	or	r2,r3,r17
 800c9ec:	80008e1e 	bne	r16,zero,800cc28 <__subdf3+0x7c4>
 800c9f0:	1000c826 	beq	r2,zero,800cd14 <__subdf3+0x8b0>
 800c9f4:	2984b03a 	or	r2,r5,r6
 800c9f8:	103ebb26 	beq	r2,zero,800c4e8 <__alt_data_end+0xf800c4e8>
 800c9fc:	8989883a 	add	r4,r17,r6
 800ca00:	1945883a 	add	r2,r3,r5
 800ca04:	2447803a 	cmpltu	r3,r4,r17
 800ca08:	1887883a 	add	r3,r3,r2
 800ca0c:	1880202c 	andhi	r2,r3,128
 800ca10:	2023883a 	mov	r17,r4
 800ca14:	103f1626 	beq	r2,zero,800c670 <__alt_data_end+0xf800c670>
 800ca18:	00bfe034 	movhi	r2,65408
 800ca1c:	10bfffc4 	addi	r2,r2,-1
 800ca20:	5021883a 	mov	r16,r10
 800ca24:	1886703a 	and	r3,r3,r2
 800ca28:	003eaf06 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800ca2c:	3825883a 	mov	r18,r7
 800ca30:	003f0f06 	br	800c670 <__alt_data_end+0xf800c670>
 800ca34:	1c44b03a 	or	r2,r3,r17
 800ca38:	8000251e 	bne	r16,zero,800cad0 <__subdf3+0x66c>
 800ca3c:	1000661e 	bne	r2,zero,800cbd8 <__subdf3+0x774>
 800ca40:	2990b03a 	or	r8,r5,r6
 800ca44:	40009626 	beq	r8,zero,800cca0 <__subdf3+0x83c>
 800ca48:	2807883a 	mov	r3,r5
 800ca4c:	3023883a 	mov	r17,r6
 800ca50:	3825883a 	mov	r18,r7
 800ca54:	003ea406 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800ca58:	127ff804 	addi	r9,r2,-32
 800ca5c:	01000804 	movi	r4,32
 800ca60:	2a52d83a 	srl	r9,r5,r9
 800ca64:	11008c26 	beq	r2,r4,800cc98 <__subdf3+0x834>
 800ca68:	01001004 	movi	r4,64
 800ca6c:	2085c83a 	sub	r2,r4,r2
 800ca70:	2884983a 	sll	r2,r5,r2
 800ca74:	118cb03a 	or	r6,r2,r6
 800ca78:	300cc03a 	cmpne	r6,r6,zero
 800ca7c:	4992b03a 	or	r9,r9,r6
 800ca80:	0005883a 	mov	r2,zero
 800ca84:	003f1206 	br	800c6d0 <__alt_data_end+0xf800c6d0>
 800ca88:	0101ffc4 	movi	r4,2047
 800ca8c:	493f9c1e 	bne	r9,r4,800c900 <__alt_data_end+0xf800c900>
 800ca90:	2807883a 	mov	r3,r5
 800ca94:	3023883a 	mov	r17,r6
 800ca98:	4821883a 	mov	r16,r9
 800ca9c:	3825883a 	mov	r18,r7
 800caa0:	003e9106 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800caa4:	80001f1e 	bne	r16,zero,800cb24 <__subdf3+0x6c0>
 800caa8:	1c48b03a 	or	r4,r3,r17
 800caac:	20005a26 	beq	r4,zero,800cc18 <__subdf3+0x7b4>
 800cab0:	0084303a 	nor	r2,zero,r2
 800cab4:	1000561e 	bne	r2,zero,800cc10 <__subdf3+0x7ac>
 800cab8:	89a3883a 	add	r17,r17,r6
 800cabc:	1945883a 	add	r2,r3,r5
 800cac0:	898d803a 	cmpltu	r6,r17,r6
 800cac4:	3087883a 	add	r3,r6,r2
 800cac8:	4821883a 	mov	r16,r9
 800cacc:	003f0506 	br	800c6e4 <__alt_data_end+0xf800c6e4>
 800cad0:	10002b1e 	bne	r2,zero,800cb80 <__subdf3+0x71c>
 800cad4:	2984b03a 	or	r2,r5,r6
 800cad8:	10008026 	beq	r2,zero,800ccdc <__subdf3+0x878>
 800cadc:	2807883a 	mov	r3,r5
 800cae0:	3023883a 	mov	r17,r6
 800cae4:	3825883a 	mov	r18,r7
 800cae8:	0401ffc4 	movi	r16,2047
 800caec:	003e7e06 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800caf0:	3809883a 	mov	r4,r7
 800caf4:	0011883a 	mov	r8,zero
 800caf8:	0005883a 	mov	r2,zero
 800cafc:	003ee306 	br	800c68c <__alt_data_end+0xf800c68c>
 800cb00:	1c62b03a 	or	r17,r3,r17
 800cb04:	8822c03a 	cmpne	r17,r17,zero
 800cb08:	0005883a 	mov	r2,zero
 800cb0c:	003f8906 	br	800c934 <__alt_data_end+0xf800c934>
 800cb10:	3809883a 	mov	r4,r7
 800cb14:	4821883a 	mov	r16,r9
 800cb18:	0011883a 	mov	r8,zero
 800cb1c:	0005883a 	mov	r2,zero
 800cb20:	003eda06 	br	800c68c <__alt_data_end+0xf800c68c>
 800cb24:	0101ffc4 	movi	r4,2047
 800cb28:	49003b26 	beq	r9,r4,800cc18 <__subdf3+0x7b4>
 800cb2c:	0085c83a 	sub	r2,zero,r2
 800cb30:	18c02034 	orhi	r3,r3,128
 800cb34:	01000e04 	movi	r4,56
 800cb38:	20806e16 	blt	r4,r2,800ccf4 <__subdf3+0x890>
 800cb3c:	010007c4 	movi	r4,31
 800cb40:	20807716 	blt	r4,r2,800cd20 <__subdf3+0x8bc>
 800cb44:	01000804 	movi	r4,32
 800cb48:	2089c83a 	sub	r4,r4,r2
 800cb4c:	1914983a 	sll	r10,r3,r4
 800cb50:	8890d83a 	srl	r8,r17,r2
 800cb54:	8908983a 	sll	r4,r17,r4
 800cb58:	1884d83a 	srl	r2,r3,r2
 800cb5c:	5222b03a 	or	r17,r10,r8
 800cb60:	2006c03a 	cmpne	r3,r4,zero
 800cb64:	88e2b03a 	or	r17,r17,r3
 800cb68:	89a3883a 	add	r17,r17,r6
 800cb6c:	1145883a 	add	r2,r2,r5
 800cb70:	898d803a 	cmpltu	r6,r17,r6
 800cb74:	3087883a 	add	r3,r6,r2
 800cb78:	4821883a 	mov	r16,r9
 800cb7c:	003ed906 	br	800c6e4 <__alt_data_end+0xf800c6e4>
 800cb80:	2984b03a 	or	r2,r5,r6
 800cb84:	10004226 	beq	r2,zero,800cc90 <__subdf3+0x82c>
 800cb88:	1808d0fa 	srli	r4,r3,3
 800cb8c:	8822d0fa 	srli	r17,r17,3
 800cb90:	1806977a 	slli	r3,r3,29
 800cb94:	2080022c 	andhi	r2,r4,8
 800cb98:	1c62b03a 	or	r17,r3,r17
 800cb9c:	10000826 	beq	r2,zero,800cbc0 <__subdf3+0x75c>
 800cba0:	2812d0fa 	srli	r9,r5,3
 800cba4:	4880022c 	andhi	r2,r9,8
 800cba8:	1000051e 	bne	r2,zero,800cbc0 <__subdf3+0x75c>
 800cbac:	300cd0fa 	srli	r6,r6,3
 800cbb0:	2804977a 	slli	r2,r5,29
 800cbb4:	4809883a 	mov	r4,r9
 800cbb8:	3825883a 	mov	r18,r7
 800cbbc:	11a2b03a 	or	r17,r2,r6
 800cbc0:	8806d77a 	srli	r3,r17,29
 800cbc4:	200890fa 	slli	r4,r4,3
 800cbc8:	882290fa 	slli	r17,r17,3
 800cbcc:	0401ffc4 	movi	r16,2047
 800cbd0:	1906b03a 	or	r3,r3,r4
 800cbd4:	003e4406 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cbd8:	2984b03a 	or	r2,r5,r6
 800cbdc:	103e4226 	beq	r2,zero,800c4e8 <__alt_data_end+0xf800c4e8>
 800cbe0:	8989c83a 	sub	r4,r17,r6
 800cbe4:	8911803a 	cmpltu	r8,r17,r4
 800cbe8:	1945c83a 	sub	r2,r3,r5
 800cbec:	1205c83a 	sub	r2,r2,r8
 800cbf0:	1200202c 	andhi	r8,r2,128
 800cbf4:	403e9a26 	beq	r8,zero,800c660 <__alt_data_end+0xf800c660>
 800cbf8:	3463c83a 	sub	r17,r6,r17
 800cbfc:	28c5c83a 	sub	r2,r5,r3
 800cc00:	344d803a 	cmpltu	r6,r6,r17
 800cc04:	1187c83a 	sub	r3,r2,r6
 800cc08:	3825883a 	mov	r18,r7
 800cc0c:	003e3606 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cc10:	0101ffc4 	movi	r4,2047
 800cc14:	493fc71e 	bne	r9,r4,800cb34 <__alt_data_end+0xf800cb34>
 800cc18:	2807883a 	mov	r3,r5
 800cc1c:	3023883a 	mov	r17,r6
 800cc20:	4821883a 	mov	r16,r9
 800cc24:	003e3006 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cc28:	10003626 	beq	r2,zero,800cd04 <__subdf3+0x8a0>
 800cc2c:	2984b03a 	or	r2,r5,r6
 800cc30:	10001726 	beq	r2,zero,800cc90 <__subdf3+0x82c>
 800cc34:	1808d0fa 	srli	r4,r3,3
 800cc38:	8822d0fa 	srli	r17,r17,3
 800cc3c:	1806977a 	slli	r3,r3,29
 800cc40:	2080022c 	andhi	r2,r4,8
 800cc44:	1c62b03a 	or	r17,r3,r17
 800cc48:	10000726 	beq	r2,zero,800cc68 <__subdf3+0x804>
 800cc4c:	2812d0fa 	srli	r9,r5,3
 800cc50:	4880022c 	andhi	r2,r9,8
 800cc54:	1000041e 	bne	r2,zero,800cc68 <__subdf3+0x804>
 800cc58:	300cd0fa 	srli	r6,r6,3
 800cc5c:	2804977a 	slli	r2,r5,29
 800cc60:	4809883a 	mov	r4,r9
 800cc64:	11a2b03a 	or	r17,r2,r6
 800cc68:	8806d77a 	srli	r3,r17,29
 800cc6c:	200890fa 	slli	r4,r4,3
 800cc70:	882290fa 	slli	r17,r17,3
 800cc74:	3825883a 	mov	r18,r7
 800cc78:	1906b03a 	or	r3,r3,r4
 800cc7c:	0401ffc4 	movi	r16,2047
 800cc80:	003e1906 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cc84:	000b883a 	mov	r5,zero
 800cc88:	0005883a 	mov	r2,zero
 800cc8c:	003e2e06 	br	800c548 <__alt_data_end+0xf800c548>
 800cc90:	0401ffc4 	movi	r16,2047
 800cc94:	003e1406 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cc98:	0005883a 	mov	r2,zero
 800cc9c:	003f7506 	br	800ca74 <__alt_data_end+0xf800ca74>
 800cca0:	0005883a 	mov	r2,zero
 800cca4:	0009883a 	mov	r4,zero
 800cca8:	003e7806 	br	800c68c <__alt_data_end+0xf800c68c>
 800ccac:	123ff804 	addi	r8,r2,-32
 800ccb0:	01000804 	movi	r4,32
 800ccb4:	1a10d83a 	srl	r8,r3,r8
 800ccb8:	11002526 	beq	r2,r4,800cd50 <__subdf3+0x8ec>
 800ccbc:	01001004 	movi	r4,64
 800ccc0:	2085c83a 	sub	r2,r4,r2
 800ccc4:	1884983a 	sll	r2,r3,r2
 800ccc8:	1444b03a 	or	r2,r2,r17
 800cccc:	1004c03a 	cmpne	r2,r2,zero
 800ccd0:	40a2b03a 	or	r17,r8,r2
 800ccd4:	0005883a 	mov	r2,zero
 800ccd8:	003f1606 	br	800c934 <__alt_data_end+0xf800c934>
 800ccdc:	02000434 	movhi	r8,16
 800cce0:	0009883a 	mov	r4,zero
 800cce4:	423fffc4 	addi	r8,r8,-1
 800cce8:	00bfffc4 	movi	r2,-1
 800ccec:	0401ffc4 	movi	r16,2047
 800ccf0:	003e6606 	br	800c68c <__alt_data_end+0xf800c68c>
 800ccf4:	1c62b03a 	or	r17,r3,r17
 800ccf8:	8822c03a 	cmpne	r17,r17,zero
 800ccfc:	0005883a 	mov	r2,zero
 800cd00:	003f9906 	br	800cb68 <__alt_data_end+0xf800cb68>
 800cd04:	2807883a 	mov	r3,r5
 800cd08:	3023883a 	mov	r17,r6
 800cd0c:	0401ffc4 	movi	r16,2047
 800cd10:	003df506 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cd14:	2807883a 	mov	r3,r5
 800cd18:	3023883a 	mov	r17,r6
 800cd1c:	003df206 	br	800c4e8 <__alt_data_end+0xf800c4e8>
 800cd20:	123ff804 	addi	r8,r2,-32
 800cd24:	01000804 	movi	r4,32
 800cd28:	1a10d83a 	srl	r8,r3,r8
 800cd2c:	11000a26 	beq	r2,r4,800cd58 <__subdf3+0x8f4>
 800cd30:	01001004 	movi	r4,64
 800cd34:	2085c83a 	sub	r2,r4,r2
 800cd38:	1884983a 	sll	r2,r3,r2
 800cd3c:	1444b03a 	or	r2,r2,r17
 800cd40:	1004c03a 	cmpne	r2,r2,zero
 800cd44:	40a2b03a 	or	r17,r8,r2
 800cd48:	0005883a 	mov	r2,zero
 800cd4c:	003f8606 	br	800cb68 <__alt_data_end+0xf800cb68>
 800cd50:	0005883a 	mov	r2,zero
 800cd54:	003fdc06 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800cd58:	0005883a 	mov	r2,zero
 800cd5c:	003ff706 	br	800cd3c <__alt_data_end+0xf800cd3c>

0800cd60 <__fixdfsi>:
 800cd60:	280cd53a 	srli	r6,r5,20
 800cd64:	00c00434 	movhi	r3,16
 800cd68:	18ffffc4 	addi	r3,r3,-1
 800cd6c:	3181ffcc 	andi	r6,r6,2047
 800cd70:	01c0ff84 	movi	r7,1022
 800cd74:	28c6703a 	and	r3,r5,r3
 800cd78:	280ad7fa 	srli	r5,r5,31
 800cd7c:	3980120e 	bge	r7,r6,800cdc8 <__fixdfsi+0x68>
 800cd80:	00810744 	movi	r2,1053
 800cd84:	11800c16 	blt	r2,r6,800cdb8 <__fixdfsi+0x58>
 800cd88:	00810cc4 	movi	r2,1075
 800cd8c:	1185c83a 	sub	r2,r2,r6
 800cd90:	01c007c4 	movi	r7,31
 800cd94:	18c00434 	orhi	r3,r3,16
 800cd98:	38800d16 	blt	r7,r2,800cdd0 <__fixdfsi+0x70>
 800cd9c:	31befb44 	addi	r6,r6,-1043
 800cda0:	2084d83a 	srl	r2,r4,r2
 800cda4:	1986983a 	sll	r3,r3,r6
 800cda8:	1884b03a 	or	r2,r3,r2
 800cdac:	28000726 	beq	r5,zero,800cdcc <__fixdfsi+0x6c>
 800cdb0:	0085c83a 	sub	r2,zero,r2
 800cdb4:	f800283a 	ret
 800cdb8:	00a00034 	movhi	r2,32768
 800cdbc:	10bfffc4 	addi	r2,r2,-1
 800cdc0:	2885883a 	add	r2,r5,r2
 800cdc4:	f800283a 	ret
 800cdc8:	0005883a 	mov	r2,zero
 800cdcc:	f800283a 	ret
 800cdd0:	008104c4 	movi	r2,1043
 800cdd4:	1185c83a 	sub	r2,r2,r6
 800cdd8:	1884d83a 	srl	r2,r3,r2
 800cddc:	003ff306 	br	800cdac <__alt_data_end+0xf800cdac>

0800cde0 <__floatsidf>:
 800cde0:	defffd04 	addi	sp,sp,-12
 800cde4:	dfc00215 	stw	ra,8(sp)
 800cde8:	dc400115 	stw	r17,4(sp)
 800cdec:	dc000015 	stw	r16,0(sp)
 800cdf0:	20002b26 	beq	r4,zero,800cea0 <__floatsidf+0xc0>
 800cdf4:	2023883a 	mov	r17,r4
 800cdf8:	2020d7fa 	srli	r16,r4,31
 800cdfc:	20002d16 	blt	r4,zero,800ceb4 <__floatsidf+0xd4>
 800ce00:	8809883a 	mov	r4,r17
 800ce04:	800cf640 	call	800cf64 <__clzsi2>
 800ce08:	01410784 	movi	r5,1054
 800ce0c:	288bc83a 	sub	r5,r5,r2
 800ce10:	01010cc4 	movi	r4,1075
 800ce14:	2149c83a 	sub	r4,r4,r5
 800ce18:	00c007c4 	movi	r3,31
 800ce1c:	1900160e 	bge	r3,r4,800ce78 <__floatsidf+0x98>
 800ce20:	00c104c4 	movi	r3,1043
 800ce24:	1947c83a 	sub	r3,r3,r5
 800ce28:	88c6983a 	sll	r3,r17,r3
 800ce2c:	00800434 	movhi	r2,16
 800ce30:	10bfffc4 	addi	r2,r2,-1
 800ce34:	1886703a 	and	r3,r3,r2
 800ce38:	2941ffcc 	andi	r5,r5,2047
 800ce3c:	800d883a 	mov	r6,r16
 800ce40:	0005883a 	mov	r2,zero
 800ce44:	280a953a 	slli	r5,r5,20
 800ce48:	31803fcc 	andi	r6,r6,255
 800ce4c:	01000434 	movhi	r4,16
 800ce50:	300c97fa 	slli	r6,r6,31
 800ce54:	213fffc4 	addi	r4,r4,-1
 800ce58:	1906703a 	and	r3,r3,r4
 800ce5c:	1946b03a 	or	r3,r3,r5
 800ce60:	1986b03a 	or	r3,r3,r6
 800ce64:	dfc00217 	ldw	ra,8(sp)
 800ce68:	dc400117 	ldw	r17,4(sp)
 800ce6c:	dc000017 	ldw	r16,0(sp)
 800ce70:	dec00304 	addi	sp,sp,12
 800ce74:	f800283a 	ret
 800ce78:	00c002c4 	movi	r3,11
 800ce7c:	1887c83a 	sub	r3,r3,r2
 800ce80:	88c6d83a 	srl	r3,r17,r3
 800ce84:	8904983a 	sll	r2,r17,r4
 800ce88:	01000434 	movhi	r4,16
 800ce8c:	213fffc4 	addi	r4,r4,-1
 800ce90:	2941ffcc 	andi	r5,r5,2047
 800ce94:	1906703a 	and	r3,r3,r4
 800ce98:	800d883a 	mov	r6,r16
 800ce9c:	003fe906 	br	800ce44 <__alt_data_end+0xf800ce44>
 800cea0:	000d883a 	mov	r6,zero
 800cea4:	000b883a 	mov	r5,zero
 800cea8:	0007883a 	mov	r3,zero
 800ceac:	0005883a 	mov	r2,zero
 800ceb0:	003fe406 	br	800ce44 <__alt_data_end+0xf800ce44>
 800ceb4:	0123c83a 	sub	r17,zero,r4
 800ceb8:	003fd106 	br	800ce00 <__alt_data_end+0xf800ce00>

0800cebc <__floatunsidf>:
 800cebc:	defffe04 	addi	sp,sp,-8
 800cec0:	dc000015 	stw	r16,0(sp)
 800cec4:	dfc00115 	stw	ra,4(sp)
 800cec8:	2021883a 	mov	r16,r4
 800cecc:	20002226 	beq	r4,zero,800cf58 <__floatunsidf+0x9c>
 800ced0:	800cf640 	call	800cf64 <__clzsi2>
 800ced4:	01010784 	movi	r4,1054
 800ced8:	2089c83a 	sub	r4,r4,r2
 800cedc:	01810cc4 	movi	r6,1075
 800cee0:	310dc83a 	sub	r6,r6,r4
 800cee4:	00c007c4 	movi	r3,31
 800cee8:	1980120e 	bge	r3,r6,800cf34 <__floatunsidf+0x78>
 800ceec:	00c104c4 	movi	r3,1043
 800cef0:	1907c83a 	sub	r3,r3,r4
 800cef4:	80ca983a 	sll	r5,r16,r3
 800cef8:	00800434 	movhi	r2,16
 800cefc:	10bfffc4 	addi	r2,r2,-1
 800cf00:	2101ffcc 	andi	r4,r4,2047
 800cf04:	0021883a 	mov	r16,zero
 800cf08:	288a703a 	and	r5,r5,r2
 800cf0c:	2008953a 	slli	r4,r4,20
 800cf10:	00c00434 	movhi	r3,16
 800cf14:	18ffffc4 	addi	r3,r3,-1
 800cf18:	28c6703a 	and	r3,r5,r3
 800cf1c:	8005883a 	mov	r2,r16
 800cf20:	1906b03a 	or	r3,r3,r4
 800cf24:	dfc00117 	ldw	ra,4(sp)
 800cf28:	dc000017 	ldw	r16,0(sp)
 800cf2c:	dec00204 	addi	sp,sp,8
 800cf30:	f800283a 	ret
 800cf34:	00c002c4 	movi	r3,11
 800cf38:	188bc83a 	sub	r5,r3,r2
 800cf3c:	814ad83a 	srl	r5,r16,r5
 800cf40:	00c00434 	movhi	r3,16
 800cf44:	18ffffc4 	addi	r3,r3,-1
 800cf48:	81a0983a 	sll	r16,r16,r6
 800cf4c:	2101ffcc 	andi	r4,r4,2047
 800cf50:	28ca703a 	and	r5,r5,r3
 800cf54:	003fed06 	br	800cf0c <__alt_data_end+0xf800cf0c>
 800cf58:	0009883a 	mov	r4,zero
 800cf5c:	000b883a 	mov	r5,zero
 800cf60:	003fea06 	br	800cf0c <__alt_data_end+0xf800cf0c>

0800cf64 <__clzsi2>:
 800cf64:	00bfffd4 	movui	r2,65535
 800cf68:	11000536 	bltu	r2,r4,800cf80 <__clzsi2+0x1c>
 800cf6c:	00803fc4 	movi	r2,255
 800cf70:	11000f36 	bltu	r2,r4,800cfb0 <__clzsi2+0x4c>
 800cf74:	00800804 	movi	r2,32
 800cf78:	0007883a 	mov	r3,zero
 800cf7c:	00000506 	br	800cf94 <__clzsi2+0x30>
 800cf80:	00804034 	movhi	r2,256
 800cf84:	10bfffc4 	addi	r2,r2,-1
 800cf88:	11000c2e 	bgeu	r2,r4,800cfbc <__clzsi2+0x58>
 800cf8c:	00800204 	movi	r2,8
 800cf90:	00c00604 	movi	r3,24
 800cf94:	20c8d83a 	srl	r4,r4,r3
 800cf98:	00c200b4 	movhi	r3,2050
 800cf9c:	18e44c04 	addi	r3,r3,-28368
 800cfa0:	1909883a 	add	r4,r3,r4
 800cfa4:	20c00003 	ldbu	r3,0(r4)
 800cfa8:	10c5c83a 	sub	r2,r2,r3
 800cfac:	f800283a 	ret
 800cfb0:	00800604 	movi	r2,24
 800cfb4:	00c00204 	movi	r3,8
 800cfb8:	003ff606 	br	800cf94 <__alt_data_end+0xf800cf94>
 800cfbc:	00800404 	movi	r2,16
 800cfc0:	1007883a 	mov	r3,r2
 800cfc4:	003ff306 	br	800cf94 <__alt_data_end+0xf800cf94>

0800cfc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cfc8:	defffe04 	addi	sp,sp,-8
 800cfcc:	dfc00115 	stw	ra,4(sp)
 800cfd0:	df000015 	stw	fp,0(sp)
 800cfd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cfd8:	d0a00b17 	ldw	r2,-32724(gp)
 800cfdc:	10000326 	beq	r2,zero,800cfec <alt_get_errno+0x24>
 800cfe0:	d0a00b17 	ldw	r2,-32724(gp)
 800cfe4:	103ee83a 	callr	r2
 800cfe8:	00000106 	br	800cff0 <alt_get_errno+0x28>
 800cfec:	d0a71f04 	addi	r2,gp,-25476
}
 800cff0:	e037883a 	mov	sp,fp
 800cff4:	dfc00117 	ldw	ra,4(sp)
 800cff8:	df000017 	ldw	fp,0(sp)
 800cffc:	dec00204 	addi	sp,sp,8
 800d000:	f800283a 	ret

0800d004 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d004:	defffb04 	addi	sp,sp,-20
 800d008:	dfc00415 	stw	ra,16(sp)
 800d00c:	df000315 	stw	fp,12(sp)
 800d010:	df000304 	addi	fp,sp,12
 800d014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d018:	e0bfff17 	ldw	r2,-4(fp)
 800d01c:	10000616 	blt	r2,zero,800d038 <close+0x34>
 800d020:	e0bfff17 	ldw	r2,-4(fp)
 800d024:	10c00324 	muli	r3,r2,12
 800d028:	008200b4 	movhi	r2,2050
 800d02c:	10a71804 	addi	r2,r2,-25504
 800d030:	1885883a 	add	r2,r3,r2
 800d034:	00000106 	br	800d03c <close+0x38>
 800d038:	0005883a 	mov	r2,zero
 800d03c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d040:	e0bffd17 	ldw	r2,-12(fp)
 800d044:	10001926 	beq	r2,zero,800d0ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d048:	e0bffd17 	ldw	r2,-12(fp)
 800d04c:	10800017 	ldw	r2,0(r2)
 800d050:	10800417 	ldw	r2,16(r2)
 800d054:	10000626 	beq	r2,zero,800d070 <close+0x6c>
 800d058:	e0bffd17 	ldw	r2,-12(fp)
 800d05c:	10800017 	ldw	r2,0(r2)
 800d060:	10800417 	ldw	r2,16(r2)
 800d064:	e13ffd17 	ldw	r4,-12(fp)
 800d068:	103ee83a 	callr	r2
 800d06c:	00000106 	br	800d074 <close+0x70>
 800d070:	0005883a 	mov	r2,zero
 800d074:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d078:	e13fff17 	ldw	r4,-4(fp)
 800d07c:	800d95c0 	call	800d95c <alt_release_fd>
    if (rval < 0)
 800d080:	e0bffe17 	ldw	r2,-8(fp)
 800d084:	1000070e 	bge	r2,zero,800d0a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800d088:	800cfc80 	call	800cfc8 <alt_get_errno>
 800d08c:	1007883a 	mov	r3,r2
 800d090:	e0bffe17 	ldw	r2,-8(fp)
 800d094:	0085c83a 	sub	r2,zero,r2
 800d098:	18800015 	stw	r2,0(r3)
      return -1;
 800d09c:	00bfffc4 	movi	r2,-1
 800d0a0:	00000706 	br	800d0c0 <close+0xbc>
    }
    return 0;
 800d0a4:	0005883a 	mov	r2,zero
 800d0a8:	00000506 	br	800d0c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d0ac:	800cfc80 	call	800cfc8 <alt_get_errno>
 800d0b0:	1007883a 	mov	r3,r2
 800d0b4:	00801444 	movi	r2,81
 800d0b8:	18800015 	stw	r2,0(r3)
    return -1;
 800d0bc:	00bfffc4 	movi	r2,-1
  }
}
 800d0c0:	e037883a 	mov	sp,fp
 800d0c4:	dfc00117 	ldw	ra,4(sp)
 800d0c8:	df000017 	ldw	fp,0(sp)
 800d0cc:	dec00204 	addi	sp,sp,8
 800d0d0:	f800283a 	ret

0800d0d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d0d4:	defffc04 	addi	sp,sp,-16
 800d0d8:	df000315 	stw	fp,12(sp)
 800d0dc:	df000304 	addi	fp,sp,12
 800d0e0:	e13ffd15 	stw	r4,-12(fp)
 800d0e4:	e17ffe15 	stw	r5,-8(fp)
 800d0e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d0ec:	e0bfff17 	ldw	r2,-4(fp)
}
 800d0f0:	e037883a 	mov	sp,fp
 800d0f4:	df000017 	ldw	fp,0(sp)
 800d0f8:	dec00104 	addi	sp,sp,4
 800d0fc:	f800283a 	ret

0800d100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d100:	defffe04 	addi	sp,sp,-8
 800d104:	dfc00115 	stw	ra,4(sp)
 800d108:	df000015 	stw	fp,0(sp)
 800d10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d110:	d0a00b17 	ldw	r2,-32724(gp)
 800d114:	10000326 	beq	r2,zero,800d124 <alt_get_errno+0x24>
 800d118:	d0a00b17 	ldw	r2,-32724(gp)
 800d11c:	103ee83a 	callr	r2
 800d120:	00000106 	br	800d128 <alt_get_errno+0x28>
 800d124:	d0a71f04 	addi	r2,gp,-25476
}
 800d128:	e037883a 	mov	sp,fp
 800d12c:	dfc00117 	ldw	ra,4(sp)
 800d130:	df000017 	ldw	fp,0(sp)
 800d134:	dec00204 	addi	sp,sp,8
 800d138:	f800283a 	ret

0800d13c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d13c:	defffb04 	addi	sp,sp,-20
 800d140:	dfc00415 	stw	ra,16(sp)
 800d144:	df000315 	stw	fp,12(sp)
 800d148:	df000304 	addi	fp,sp,12
 800d14c:	e13ffe15 	stw	r4,-8(fp)
 800d150:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d154:	e0bffe17 	ldw	r2,-8(fp)
 800d158:	10000616 	blt	r2,zero,800d174 <fstat+0x38>
 800d15c:	e0bffe17 	ldw	r2,-8(fp)
 800d160:	10c00324 	muli	r3,r2,12
 800d164:	008200b4 	movhi	r2,2050
 800d168:	10a71804 	addi	r2,r2,-25504
 800d16c:	1885883a 	add	r2,r3,r2
 800d170:	00000106 	br	800d178 <fstat+0x3c>
 800d174:	0005883a 	mov	r2,zero
 800d178:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d17c:	e0bffd17 	ldw	r2,-12(fp)
 800d180:	10001026 	beq	r2,zero,800d1c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d184:	e0bffd17 	ldw	r2,-12(fp)
 800d188:	10800017 	ldw	r2,0(r2)
 800d18c:	10800817 	ldw	r2,32(r2)
 800d190:	10000726 	beq	r2,zero,800d1b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800d194:	e0bffd17 	ldw	r2,-12(fp)
 800d198:	10800017 	ldw	r2,0(r2)
 800d19c:	10800817 	ldw	r2,32(r2)
 800d1a0:	e17fff17 	ldw	r5,-4(fp)
 800d1a4:	e13ffd17 	ldw	r4,-12(fp)
 800d1a8:	103ee83a 	callr	r2
 800d1ac:	00000a06 	br	800d1d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d1b0:	e0bfff17 	ldw	r2,-4(fp)
 800d1b4:	00c80004 	movi	r3,8192
 800d1b8:	10c00115 	stw	r3,4(r2)
      return 0;
 800d1bc:	0005883a 	mov	r2,zero
 800d1c0:	00000506 	br	800d1d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d1c4:	800d1000 	call	800d100 <alt_get_errno>
 800d1c8:	1007883a 	mov	r3,r2
 800d1cc:	00801444 	movi	r2,81
 800d1d0:	18800015 	stw	r2,0(r3)
    return -1;
 800d1d4:	00bfffc4 	movi	r2,-1
  }
}
 800d1d8:	e037883a 	mov	sp,fp
 800d1dc:	dfc00117 	ldw	ra,4(sp)
 800d1e0:	df000017 	ldw	fp,0(sp)
 800d1e4:	dec00204 	addi	sp,sp,8
 800d1e8:	f800283a 	ret

0800d1ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d1ec:	defff904 	addi	sp,sp,-28
 800d1f0:	dfc00615 	stw	ra,24(sp)
 800d1f4:	df000515 	stw	fp,20(sp)
 800d1f8:	df000504 	addi	fp,sp,20
 800d1fc:	e13ffc15 	stw	r4,-16(fp)
 800d200:	e17ffd15 	stw	r5,-12(fp)
 800d204:	e1bffe15 	stw	r6,-8(fp)
 800d208:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d20c:	e0800217 	ldw	r2,8(fp)
 800d210:	d8800015 	stw	r2,0(sp)
 800d214:	e1ffff17 	ldw	r7,-4(fp)
 800d218:	e1bffe17 	ldw	r6,-8(fp)
 800d21c:	e17ffd17 	ldw	r5,-12(fp)
 800d220:	e13ffc17 	ldw	r4,-16(fp)
 800d224:	800d39c0 	call	800d39c <alt_iic_isr_register>
}  
 800d228:	e037883a 	mov	sp,fp
 800d22c:	dfc00117 	ldw	ra,4(sp)
 800d230:	df000017 	ldw	fp,0(sp)
 800d234:	dec00204 	addi	sp,sp,8
 800d238:	f800283a 	ret

0800d23c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d23c:	defff904 	addi	sp,sp,-28
 800d240:	df000615 	stw	fp,24(sp)
 800d244:	df000604 	addi	fp,sp,24
 800d248:	e13ffe15 	stw	r4,-8(fp)
 800d24c:	e17fff15 	stw	r5,-4(fp)
 800d250:	e0bfff17 	ldw	r2,-4(fp)
 800d254:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d258:	0005303a 	rdctl	r2,status
 800d25c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d260:	e0fffb17 	ldw	r3,-20(fp)
 800d264:	00bfff84 	movi	r2,-2
 800d268:	1884703a 	and	r2,r3,r2
 800d26c:	1001703a 	wrctl	status,r2
  
  return context;
 800d270:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d274:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d278:	00c00044 	movi	r3,1
 800d27c:	e0bffa17 	ldw	r2,-24(fp)
 800d280:	1884983a 	sll	r2,r3,r2
 800d284:	1007883a 	mov	r3,r2
 800d288:	d0a72117 	ldw	r2,-25468(gp)
 800d28c:	1884b03a 	or	r2,r3,r2
 800d290:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d294:	d0a72117 	ldw	r2,-25468(gp)
 800d298:	100170fa 	wrctl	ienable,r2
 800d29c:	e0bffc17 	ldw	r2,-16(fp)
 800d2a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d2a4:	e0bffd17 	ldw	r2,-12(fp)
 800d2a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d2ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800d2b0:	0001883a 	nop
}
 800d2b4:	e037883a 	mov	sp,fp
 800d2b8:	df000017 	ldw	fp,0(sp)
 800d2bc:	dec00104 	addi	sp,sp,4
 800d2c0:	f800283a 	ret

0800d2c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d2c4:	defff904 	addi	sp,sp,-28
 800d2c8:	df000615 	stw	fp,24(sp)
 800d2cc:	df000604 	addi	fp,sp,24
 800d2d0:	e13ffe15 	stw	r4,-8(fp)
 800d2d4:	e17fff15 	stw	r5,-4(fp)
 800d2d8:	e0bfff17 	ldw	r2,-4(fp)
 800d2dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d2e0:	0005303a 	rdctl	r2,status
 800d2e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d2e8:	e0fffb17 	ldw	r3,-20(fp)
 800d2ec:	00bfff84 	movi	r2,-2
 800d2f0:	1884703a 	and	r2,r3,r2
 800d2f4:	1001703a 	wrctl	status,r2
  
  return context;
 800d2f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d2fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d300:	00c00044 	movi	r3,1
 800d304:	e0bffa17 	ldw	r2,-24(fp)
 800d308:	1884983a 	sll	r2,r3,r2
 800d30c:	0084303a 	nor	r2,zero,r2
 800d310:	1007883a 	mov	r3,r2
 800d314:	d0a72117 	ldw	r2,-25468(gp)
 800d318:	1884703a 	and	r2,r3,r2
 800d31c:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d320:	d0a72117 	ldw	r2,-25468(gp)
 800d324:	100170fa 	wrctl	ienable,r2
 800d328:	e0bffc17 	ldw	r2,-16(fp)
 800d32c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d330:	e0bffd17 	ldw	r2,-12(fp)
 800d334:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d338:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800d33c:	0001883a 	nop
}
 800d340:	e037883a 	mov	sp,fp
 800d344:	df000017 	ldw	fp,0(sp)
 800d348:	dec00104 	addi	sp,sp,4
 800d34c:	f800283a 	ret

0800d350 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d350:	defffc04 	addi	sp,sp,-16
 800d354:	df000315 	stw	fp,12(sp)
 800d358:	df000304 	addi	fp,sp,12
 800d35c:	e13ffe15 	stw	r4,-8(fp)
 800d360:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d364:	000530fa 	rdctl	r2,ienable
 800d368:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d36c:	00c00044 	movi	r3,1
 800d370:	e0bfff17 	ldw	r2,-4(fp)
 800d374:	1884983a 	sll	r2,r3,r2
 800d378:	1007883a 	mov	r3,r2
 800d37c:	e0bffd17 	ldw	r2,-12(fp)
 800d380:	1884703a 	and	r2,r3,r2
 800d384:	1004c03a 	cmpne	r2,r2,zero
 800d388:	10803fcc 	andi	r2,r2,255
}
 800d38c:	e037883a 	mov	sp,fp
 800d390:	df000017 	ldw	fp,0(sp)
 800d394:	dec00104 	addi	sp,sp,4
 800d398:	f800283a 	ret

0800d39c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d39c:	defff504 	addi	sp,sp,-44
 800d3a0:	dfc00a15 	stw	ra,40(sp)
 800d3a4:	df000915 	stw	fp,36(sp)
 800d3a8:	df000904 	addi	fp,sp,36
 800d3ac:	e13ffc15 	stw	r4,-16(fp)
 800d3b0:	e17ffd15 	stw	r5,-12(fp)
 800d3b4:	e1bffe15 	stw	r6,-8(fp)
 800d3b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d3bc:	00bffa84 	movi	r2,-22
 800d3c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d3c4:	e0bffd17 	ldw	r2,-12(fp)
 800d3c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d3cc:	e0bff817 	ldw	r2,-32(fp)
 800d3d0:	10800808 	cmpgei	r2,r2,32
 800d3d4:	1000271e 	bne	r2,zero,800d474 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d3d8:	0005303a 	rdctl	r2,status
 800d3dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d3e0:	e0fffb17 	ldw	r3,-20(fp)
 800d3e4:	00bfff84 	movi	r2,-2
 800d3e8:	1884703a 	and	r2,r3,r2
 800d3ec:	1001703a 	wrctl	status,r2
  
  return context;
 800d3f0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d3f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800d3f8:	008200b4 	movhi	r2,2050
 800d3fc:	1082e804 	addi	r2,r2,2976
 800d400:	e0fff817 	ldw	r3,-32(fp)
 800d404:	180690fa 	slli	r3,r3,3
 800d408:	10c5883a 	add	r2,r2,r3
 800d40c:	e0fffe17 	ldw	r3,-8(fp)
 800d410:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d414:	008200b4 	movhi	r2,2050
 800d418:	1082e804 	addi	r2,r2,2976
 800d41c:	e0fff817 	ldw	r3,-32(fp)
 800d420:	180690fa 	slli	r3,r3,3
 800d424:	10c5883a 	add	r2,r2,r3
 800d428:	10800104 	addi	r2,r2,4
 800d42c:	e0ffff17 	ldw	r3,-4(fp)
 800d430:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d434:	e0bffe17 	ldw	r2,-8(fp)
 800d438:	10000526 	beq	r2,zero,800d450 <alt_iic_isr_register+0xb4>
 800d43c:	e0bff817 	ldw	r2,-32(fp)
 800d440:	100b883a 	mov	r5,r2
 800d444:	e13ffc17 	ldw	r4,-16(fp)
 800d448:	800d23c0 	call	800d23c <alt_ic_irq_enable>
 800d44c:	00000406 	br	800d460 <alt_iic_isr_register+0xc4>
 800d450:	e0bff817 	ldw	r2,-32(fp)
 800d454:	100b883a 	mov	r5,r2
 800d458:	e13ffc17 	ldw	r4,-16(fp)
 800d45c:	800d2c40 	call	800d2c4 <alt_ic_irq_disable>
 800d460:	e0bff715 	stw	r2,-36(fp)
 800d464:	e0bffa17 	ldw	r2,-24(fp)
 800d468:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d46c:	e0bff917 	ldw	r2,-28(fp)
 800d470:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d474:	e0bff717 	ldw	r2,-36(fp)
}
 800d478:	e037883a 	mov	sp,fp
 800d47c:	dfc00117 	ldw	ra,4(sp)
 800d480:	df000017 	ldw	fp,0(sp)
 800d484:	dec00204 	addi	sp,sp,8
 800d488:	f800283a 	ret

0800d48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d48c:	defffe04 	addi	sp,sp,-8
 800d490:	dfc00115 	stw	ra,4(sp)
 800d494:	df000015 	stw	fp,0(sp)
 800d498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d49c:	d0a00b17 	ldw	r2,-32724(gp)
 800d4a0:	10000326 	beq	r2,zero,800d4b0 <alt_get_errno+0x24>
 800d4a4:	d0a00b17 	ldw	r2,-32724(gp)
 800d4a8:	103ee83a 	callr	r2
 800d4ac:	00000106 	br	800d4b4 <alt_get_errno+0x28>
 800d4b0:	d0a71f04 	addi	r2,gp,-25476
}
 800d4b4:	e037883a 	mov	sp,fp
 800d4b8:	dfc00117 	ldw	ra,4(sp)
 800d4bc:	df000017 	ldw	fp,0(sp)
 800d4c0:	dec00204 	addi	sp,sp,8
 800d4c4:	f800283a 	ret

0800d4c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d4c8:	deffed04 	addi	sp,sp,-76
 800d4cc:	dfc01215 	stw	ra,72(sp)
 800d4d0:	df001115 	stw	fp,68(sp)
 800d4d4:	df001104 	addi	fp,sp,68
 800d4d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d4dc:	e0bfff17 	ldw	r2,-4(fp)
 800d4e0:	10000616 	blt	r2,zero,800d4fc <isatty+0x34>
 800d4e4:	e0bfff17 	ldw	r2,-4(fp)
 800d4e8:	10c00324 	muli	r3,r2,12
 800d4ec:	008200b4 	movhi	r2,2050
 800d4f0:	10a71804 	addi	r2,r2,-25504
 800d4f4:	1885883a 	add	r2,r3,r2
 800d4f8:	00000106 	br	800d500 <isatty+0x38>
 800d4fc:	0005883a 	mov	r2,zero
 800d500:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d504:	e0bfef17 	ldw	r2,-68(fp)
 800d508:	10000e26 	beq	r2,zero,800d544 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d50c:	e0bfef17 	ldw	r2,-68(fp)
 800d510:	10800017 	ldw	r2,0(r2)
 800d514:	10800817 	ldw	r2,32(r2)
 800d518:	1000021e 	bne	r2,zero,800d524 <isatty+0x5c>
    {
      return 1;
 800d51c:	00800044 	movi	r2,1
 800d520:	00000d06 	br	800d558 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d524:	e0bff004 	addi	r2,fp,-64
 800d528:	100b883a 	mov	r5,r2
 800d52c:	e13fff17 	ldw	r4,-4(fp)
 800d530:	800d13c0 	call	800d13c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d534:	e0bff117 	ldw	r2,-60(fp)
 800d538:	10880020 	cmpeqi	r2,r2,8192
 800d53c:	10803fcc 	andi	r2,r2,255
 800d540:	00000506 	br	800d558 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d544:	800d48c0 	call	800d48c <alt_get_errno>
 800d548:	1007883a 	mov	r3,r2
 800d54c:	00801444 	movi	r2,81
 800d550:	18800015 	stw	r2,0(r3)
    return 0;
 800d554:	0005883a 	mov	r2,zero
  }
}
 800d558:	e037883a 	mov	sp,fp
 800d55c:	dfc00117 	ldw	ra,4(sp)
 800d560:	df000017 	ldw	fp,0(sp)
 800d564:	dec00204 	addi	sp,sp,8
 800d568:	f800283a 	ret

0800d56c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d56c:	defffc04 	addi	sp,sp,-16
 800d570:	df000315 	stw	fp,12(sp)
 800d574:	df000304 	addi	fp,sp,12
 800d578:	e13ffd15 	stw	r4,-12(fp)
 800d57c:	e17ffe15 	stw	r5,-8(fp)
 800d580:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d584:	e0fffe17 	ldw	r3,-8(fp)
 800d588:	e0bffd17 	ldw	r2,-12(fp)
 800d58c:	18800c26 	beq	r3,r2,800d5c0 <alt_load_section+0x54>
  {
    while( to != end )
 800d590:	00000806 	br	800d5b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d594:	e0bffe17 	ldw	r2,-8(fp)
 800d598:	10c00104 	addi	r3,r2,4
 800d59c:	e0fffe15 	stw	r3,-8(fp)
 800d5a0:	e0fffd17 	ldw	r3,-12(fp)
 800d5a4:	19000104 	addi	r4,r3,4
 800d5a8:	e13ffd15 	stw	r4,-12(fp)
 800d5ac:	18c00017 	ldw	r3,0(r3)
 800d5b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d5b4:	e0fffe17 	ldw	r3,-8(fp)
 800d5b8:	e0bfff17 	ldw	r2,-4(fp)
 800d5bc:	18bff51e 	bne	r3,r2,800d594 <__alt_data_end+0xf800d594>
    {
      *to++ = *from++;
    }
  }
}
 800d5c0:	0001883a 	nop
 800d5c4:	e037883a 	mov	sp,fp
 800d5c8:	df000017 	ldw	fp,0(sp)
 800d5cc:	dec00104 	addi	sp,sp,4
 800d5d0:	f800283a 	ret

0800d5d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d5d4:	defffe04 	addi	sp,sp,-8
 800d5d8:	dfc00115 	stw	ra,4(sp)
 800d5dc:	df000015 	stw	fp,0(sp)
 800d5e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d5e4:	018200b4 	movhi	r6,2050
 800d5e8:	31abcd04 	addi	r6,r6,-20684
 800d5ec:	014200b4 	movhi	r5,2050
 800d5f0:	2964e504 	addi	r5,r5,-27756
 800d5f4:	010200b4 	movhi	r4,2050
 800d5f8:	212bcd04 	addi	r4,r4,-20684
 800d5fc:	800d56c0 	call	800d56c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d600:	01820034 	movhi	r6,2048
 800d604:	31809104 	addi	r6,r6,580
 800d608:	01420034 	movhi	r5,2048
 800d60c:	29400804 	addi	r5,r5,32
 800d610:	01020034 	movhi	r4,2048
 800d614:	21000804 	addi	r4,r4,32
 800d618:	800d56c0 	call	800d56c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d61c:	018200b4 	movhi	r6,2050
 800d620:	31a4e504 	addi	r6,r6,-27756
 800d624:	014200b4 	movhi	r5,2050
 800d628:	2963af04 	addi	r5,r5,-28996
 800d62c:	010200b4 	movhi	r4,2050
 800d630:	2123af04 	addi	r4,r4,-28996
 800d634:	800d56c0 	call	800d56c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d638:	8017cb80 	call	8017cb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d63c:	8017f300 	call	8017f30 <alt_icache_flush_all>
}
 800d640:	0001883a 	nop
 800d644:	e037883a 	mov	sp,fp
 800d648:	dfc00117 	ldw	ra,4(sp)
 800d64c:	df000017 	ldw	fp,0(sp)
 800d650:	dec00204 	addi	sp,sp,8
 800d654:	f800283a 	ret

0800d658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d658:	defffe04 	addi	sp,sp,-8
 800d65c:	dfc00115 	stw	ra,4(sp)
 800d660:	df000015 	stw	fp,0(sp)
 800d664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d668:	d0a00b17 	ldw	r2,-32724(gp)
 800d66c:	10000326 	beq	r2,zero,800d67c <alt_get_errno+0x24>
 800d670:	d0a00b17 	ldw	r2,-32724(gp)
 800d674:	103ee83a 	callr	r2
 800d678:	00000106 	br	800d680 <alt_get_errno+0x28>
 800d67c:	d0a71f04 	addi	r2,gp,-25476
}
 800d680:	e037883a 	mov	sp,fp
 800d684:	dfc00117 	ldw	ra,4(sp)
 800d688:	df000017 	ldw	fp,0(sp)
 800d68c:	dec00204 	addi	sp,sp,8
 800d690:	f800283a 	ret

0800d694 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d694:	defff904 	addi	sp,sp,-28
 800d698:	dfc00615 	stw	ra,24(sp)
 800d69c:	df000515 	stw	fp,20(sp)
 800d6a0:	df000504 	addi	fp,sp,20
 800d6a4:	e13ffd15 	stw	r4,-12(fp)
 800d6a8:	e17ffe15 	stw	r5,-8(fp)
 800d6ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d6b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d6b4:	e0bffd17 	ldw	r2,-12(fp)
 800d6b8:	10000616 	blt	r2,zero,800d6d4 <lseek+0x40>
 800d6bc:	e0bffd17 	ldw	r2,-12(fp)
 800d6c0:	10c00324 	muli	r3,r2,12
 800d6c4:	008200b4 	movhi	r2,2050
 800d6c8:	10a71804 	addi	r2,r2,-25504
 800d6cc:	1885883a 	add	r2,r3,r2
 800d6d0:	00000106 	br	800d6d8 <lseek+0x44>
 800d6d4:	0005883a 	mov	r2,zero
 800d6d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d6dc:	e0bffc17 	ldw	r2,-16(fp)
 800d6e0:	10001026 	beq	r2,zero,800d724 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d6e4:	e0bffc17 	ldw	r2,-16(fp)
 800d6e8:	10800017 	ldw	r2,0(r2)
 800d6ec:	10800717 	ldw	r2,28(r2)
 800d6f0:	10000926 	beq	r2,zero,800d718 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d6f4:	e0bffc17 	ldw	r2,-16(fp)
 800d6f8:	10800017 	ldw	r2,0(r2)
 800d6fc:	10800717 	ldw	r2,28(r2)
 800d700:	e1bfff17 	ldw	r6,-4(fp)
 800d704:	e17ffe17 	ldw	r5,-8(fp)
 800d708:	e13ffc17 	ldw	r4,-16(fp)
 800d70c:	103ee83a 	callr	r2
 800d710:	e0bffb15 	stw	r2,-20(fp)
 800d714:	00000506 	br	800d72c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d718:	00bfde84 	movi	r2,-134
 800d71c:	e0bffb15 	stw	r2,-20(fp)
 800d720:	00000206 	br	800d72c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d724:	00bfebc4 	movi	r2,-81
 800d728:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d72c:	e0bffb17 	ldw	r2,-20(fp)
 800d730:	1000070e 	bge	r2,zero,800d750 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800d734:	800d6580 	call	800d658 <alt_get_errno>
 800d738:	1007883a 	mov	r3,r2
 800d73c:	e0bffb17 	ldw	r2,-20(fp)
 800d740:	0085c83a 	sub	r2,zero,r2
 800d744:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d748:	00bfffc4 	movi	r2,-1
 800d74c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d750:	e0bffb17 	ldw	r2,-20(fp)
}
 800d754:	e037883a 	mov	sp,fp
 800d758:	dfc00117 	ldw	ra,4(sp)
 800d75c:	df000017 	ldw	fp,0(sp)
 800d760:	dec00204 	addi	sp,sp,8
 800d764:	f800283a 	ret

0800d768 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d768:	defff904 	addi	sp,sp,-28
 800d76c:	dfc00615 	stw	ra,24(sp)
 800d770:	df000515 	stw	fp,20(sp)
 800d774:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d778:	0009883a 	mov	r4,zero
 800d77c:	80167c40 	call	80167c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d780:	800e7240 	call	800e724 <OSInit>
 800d784:	01000044 	movi	r4,1
 800d788:	801418c0 	call	801418c <OSSemCreate>
 800d78c:	d0a72615 	stw	r2,-25448(gp)
 800d790:	01000044 	movi	r4,1
 800d794:	801418c0 	call	801418c <OSSemCreate>
 800d798:	d0a72815 	stw	r2,-25440(gp)
 800d79c:	d0a72004 	addi	r2,gp,-25472
 800d7a0:	e0bffc15 	stw	r2,-16(fp)
 800d7a4:	00800044 	movi	r2,1
 800d7a8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 800d7ac:	e0bffd0b 	ldhu	r2,-12(fp)
 800d7b0:	1009883a 	mov	r4,r2
 800d7b4:	801418c0 	call	801418c <OSSemCreate>
 800d7b8:	1007883a 	mov	r3,r2
 800d7bc:	e0bffc17 	ldw	r2,-16(fp)
 800d7c0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d7c4:	80167fc0 	call	80167fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d7c8:	018200b4 	movhi	r6,2050
 800d7cc:	31a48f04 	addi	r6,r6,-28100
 800d7d0:	014200b4 	movhi	r5,2050
 800d7d4:	29648f04 	addi	r5,r5,-28100
 800d7d8:	010200b4 	movhi	r4,2050
 800d7dc:	21248f04 	addi	r4,r4,-28100
 800d7e0:	80180c40 	call	80180c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d7e4:	8017de00 	call	8017de0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d7e8:	01020074 	movhi	r4,2049
 800d7ec:	211f9004 	addi	r4,r4,32320
 800d7f0:	8018b280 	call	8018b28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d7f4:	d0a72217 	ldw	r2,-25464(gp)
 800d7f8:	d0e72317 	ldw	r3,-25460(gp)
 800d7fc:	d1272417 	ldw	r4,-25456(gp)
 800d800:	200d883a 	mov	r6,r4
 800d804:	180b883a 	mov	r5,r3
 800d808:	1009883a 	mov	r4,r2
 800d80c:	80005d00 	call	80005d0 <main>
 800d810:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 800d814:	01000044 	movi	r4,1
 800d818:	800d0040 	call	800d004 <close>
  exit (result);
 800d81c:	e13ffb17 	ldw	r4,-20(fp)
 800d820:	8018b3c0 	call	8018b3c <exit>

0800d824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d824:	defffe04 	addi	sp,sp,-8
 800d828:	dfc00115 	stw	ra,4(sp)
 800d82c:	df000015 	stw	fp,0(sp)
 800d830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d834:	d0a00b17 	ldw	r2,-32724(gp)
 800d838:	10000326 	beq	r2,zero,800d848 <alt_get_errno+0x24>
 800d83c:	d0a00b17 	ldw	r2,-32724(gp)
 800d840:	103ee83a 	callr	r2
 800d844:	00000106 	br	800d84c <alt_get_errno+0x28>
 800d848:	d0a71f04 	addi	r2,gp,-25476
}
 800d84c:	e037883a 	mov	sp,fp
 800d850:	dfc00117 	ldw	ra,4(sp)
 800d854:	df000017 	ldw	fp,0(sp)
 800d858:	dec00204 	addi	sp,sp,8
 800d85c:	f800283a 	ret

0800d860 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d860:	defff904 	addi	sp,sp,-28
 800d864:	dfc00615 	stw	ra,24(sp)
 800d868:	df000515 	stw	fp,20(sp)
 800d86c:	df000504 	addi	fp,sp,20
 800d870:	e13ffd15 	stw	r4,-12(fp)
 800d874:	e17ffe15 	stw	r5,-8(fp)
 800d878:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d87c:	e0bffd17 	ldw	r2,-12(fp)
 800d880:	10000616 	blt	r2,zero,800d89c <read+0x3c>
 800d884:	e0bffd17 	ldw	r2,-12(fp)
 800d888:	10c00324 	muli	r3,r2,12
 800d88c:	008200b4 	movhi	r2,2050
 800d890:	10a71804 	addi	r2,r2,-25504
 800d894:	1885883a 	add	r2,r3,r2
 800d898:	00000106 	br	800d8a0 <read+0x40>
 800d89c:	0005883a 	mov	r2,zero
 800d8a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d8a4:	e0bffb17 	ldw	r2,-20(fp)
 800d8a8:	10002226 	beq	r2,zero,800d934 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d8ac:	e0bffb17 	ldw	r2,-20(fp)
 800d8b0:	10800217 	ldw	r2,8(r2)
 800d8b4:	108000cc 	andi	r2,r2,3
 800d8b8:	10800060 	cmpeqi	r2,r2,1
 800d8bc:	1000181e 	bne	r2,zero,800d920 <read+0xc0>
        (fd->dev->read))
 800d8c0:	e0bffb17 	ldw	r2,-20(fp)
 800d8c4:	10800017 	ldw	r2,0(r2)
 800d8c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d8cc:	10001426 	beq	r2,zero,800d920 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d8d0:	e0bffb17 	ldw	r2,-20(fp)
 800d8d4:	10800017 	ldw	r2,0(r2)
 800d8d8:	10800517 	ldw	r2,20(r2)
 800d8dc:	e0ffff17 	ldw	r3,-4(fp)
 800d8e0:	180d883a 	mov	r6,r3
 800d8e4:	e17ffe17 	ldw	r5,-8(fp)
 800d8e8:	e13ffb17 	ldw	r4,-20(fp)
 800d8ec:	103ee83a 	callr	r2
 800d8f0:	e0bffc15 	stw	r2,-16(fp)
 800d8f4:	e0bffc17 	ldw	r2,-16(fp)
 800d8f8:	1000070e 	bge	r2,zero,800d918 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800d8fc:	800d8240 	call	800d824 <alt_get_errno>
 800d900:	1007883a 	mov	r3,r2
 800d904:	e0bffc17 	ldw	r2,-16(fp)
 800d908:	0085c83a 	sub	r2,zero,r2
 800d90c:	18800015 	stw	r2,0(r3)
          return -1;
 800d910:	00bfffc4 	movi	r2,-1
 800d914:	00000c06 	br	800d948 <read+0xe8>
        }
        return rval;
 800d918:	e0bffc17 	ldw	r2,-16(fp)
 800d91c:	00000a06 	br	800d948 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d920:	800d8240 	call	800d824 <alt_get_errno>
 800d924:	1007883a 	mov	r3,r2
 800d928:	00800344 	movi	r2,13
 800d92c:	18800015 	stw	r2,0(r3)
 800d930:	00000406 	br	800d944 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d934:	800d8240 	call	800d824 <alt_get_errno>
 800d938:	1007883a 	mov	r3,r2
 800d93c:	00801444 	movi	r2,81
 800d940:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d944:	00bfffc4 	movi	r2,-1
}
 800d948:	e037883a 	mov	sp,fp
 800d94c:	dfc00117 	ldw	ra,4(sp)
 800d950:	df000017 	ldw	fp,0(sp)
 800d954:	dec00204 	addi	sp,sp,8
 800d958:	f800283a 	ret

0800d95c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d95c:	defffe04 	addi	sp,sp,-8
 800d960:	df000115 	stw	fp,4(sp)
 800d964:	df000104 	addi	fp,sp,4
 800d968:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d96c:	e0bfff17 	ldw	r2,-4(fp)
 800d970:	108000d0 	cmplti	r2,r2,3
 800d974:	10000d1e 	bne	r2,zero,800d9ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d978:	008200b4 	movhi	r2,2050
 800d97c:	10a71804 	addi	r2,r2,-25504
 800d980:	e0ffff17 	ldw	r3,-4(fp)
 800d984:	18c00324 	muli	r3,r3,12
 800d988:	10c5883a 	add	r2,r2,r3
 800d98c:	10800204 	addi	r2,r2,8
 800d990:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d994:	008200b4 	movhi	r2,2050
 800d998:	10a71804 	addi	r2,r2,-25504
 800d99c:	e0ffff17 	ldw	r3,-4(fp)
 800d9a0:	18c00324 	muli	r3,r3,12
 800d9a4:	10c5883a 	add	r2,r2,r3
 800d9a8:	10000015 	stw	zero,0(r2)
  }
}
 800d9ac:	0001883a 	nop
 800d9b0:	e037883a 	mov	sp,fp
 800d9b4:	df000017 	ldw	fp,0(sp)
 800d9b8:	dec00104 	addi	sp,sp,4
 800d9bc:	f800283a 	ret

0800d9c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d9c0:	defff904 	addi	sp,sp,-28
 800d9c4:	df000615 	stw	fp,24(sp)
 800d9c8:	df000604 	addi	fp,sp,24
 800d9cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d9d0:	0005303a 	rdctl	r2,status
 800d9d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d9d8:	e0fffe17 	ldw	r3,-8(fp)
 800d9dc:	00bfff84 	movi	r2,-2
 800d9e0:	1884703a 	and	r2,r3,r2
 800d9e4:	1001703a 	wrctl	status,r2
  
  return context;
 800d9e8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d9ec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d9f0:	d0a00d17 	ldw	r2,-32716(gp)
 800d9f4:	10c000c4 	addi	r3,r2,3
 800d9f8:	00bfff04 	movi	r2,-4
 800d9fc:	1884703a 	and	r2,r3,r2
 800da00:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800da04:	d0e00d17 	ldw	r3,-32716(gp)
 800da08:	e0bfff17 	ldw	r2,-4(fp)
 800da0c:	1887883a 	add	r3,r3,r2
 800da10:	00840034 	movhi	r2,4096
 800da14:	10800004 	addi	r2,r2,0
 800da18:	10c0062e 	bgeu	r2,r3,800da34 <sbrk+0x74>
 800da1c:	e0bffb17 	ldw	r2,-20(fp)
 800da20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800da24:	e0bffa17 	ldw	r2,-24(fp)
 800da28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800da2c:	00bfffc4 	movi	r2,-1
 800da30:	00000b06 	br	800da60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800da34:	d0a00d17 	ldw	r2,-32716(gp)
 800da38:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800da3c:	d0e00d17 	ldw	r3,-32716(gp)
 800da40:	e0bfff17 	ldw	r2,-4(fp)
 800da44:	1885883a 	add	r2,r3,r2
 800da48:	d0a00d15 	stw	r2,-32716(gp)
 800da4c:	e0bffb17 	ldw	r2,-20(fp)
 800da50:	e0bffc15 	stw	r2,-16(fp)
 800da54:	e0bffc17 	ldw	r2,-16(fp)
 800da58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800da5c:	e0bffd17 	ldw	r2,-12(fp)
} 
 800da60:	e037883a 	mov	sp,fp
 800da64:	df000017 	ldw	fp,0(sp)
 800da68:	dec00104 	addi	sp,sp,4
 800da6c:	f800283a 	ret

0800da70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800da70:	defffe04 	addi	sp,sp,-8
 800da74:	dfc00115 	stw	ra,4(sp)
 800da78:	df000015 	stw	fp,0(sp)
 800da7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da80:	d0a00b17 	ldw	r2,-32724(gp)
 800da84:	10000326 	beq	r2,zero,800da94 <alt_get_errno+0x24>
 800da88:	d0a00b17 	ldw	r2,-32724(gp)
 800da8c:	103ee83a 	callr	r2
 800da90:	00000106 	br	800da98 <alt_get_errno+0x28>
 800da94:	d0a71f04 	addi	r2,gp,-25476
}
 800da98:	e037883a 	mov	sp,fp
 800da9c:	dfc00117 	ldw	ra,4(sp)
 800daa0:	df000017 	ldw	fp,0(sp)
 800daa4:	dec00204 	addi	sp,sp,8
 800daa8:	f800283a 	ret

0800daac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800daac:	defff904 	addi	sp,sp,-28
 800dab0:	dfc00615 	stw	ra,24(sp)
 800dab4:	df000515 	stw	fp,20(sp)
 800dab8:	df000504 	addi	fp,sp,20
 800dabc:	e13ffd15 	stw	r4,-12(fp)
 800dac0:	e17ffe15 	stw	r5,-8(fp)
 800dac4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dac8:	e0bffd17 	ldw	r2,-12(fp)
 800dacc:	10000616 	blt	r2,zero,800dae8 <write+0x3c>
 800dad0:	e0bffd17 	ldw	r2,-12(fp)
 800dad4:	10c00324 	muli	r3,r2,12
 800dad8:	008200b4 	movhi	r2,2050
 800dadc:	10a71804 	addi	r2,r2,-25504
 800dae0:	1885883a 	add	r2,r3,r2
 800dae4:	00000106 	br	800daec <write+0x40>
 800dae8:	0005883a 	mov	r2,zero
 800daec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800daf0:	e0bffb17 	ldw	r2,-20(fp)
 800daf4:	10002126 	beq	r2,zero,800db7c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800daf8:	e0bffb17 	ldw	r2,-20(fp)
 800dafc:	10800217 	ldw	r2,8(r2)
 800db00:	108000cc 	andi	r2,r2,3
 800db04:	10001826 	beq	r2,zero,800db68 <write+0xbc>
 800db08:	e0bffb17 	ldw	r2,-20(fp)
 800db0c:	10800017 	ldw	r2,0(r2)
 800db10:	10800617 	ldw	r2,24(r2)
 800db14:	10001426 	beq	r2,zero,800db68 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800db18:	e0bffb17 	ldw	r2,-20(fp)
 800db1c:	10800017 	ldw	r2,0(r2)
 800db20:	10800617 	ldw	r2,24(r2)
 800db24:	e0ffff17 	ldw	r3,-4(fp)
 800db28:	180d883a 	mov	r6,r3
 800db2c:	e17ffe17 	ldw	r5,-8(fp)
 800db30:	e13ffb17 	ldw	r4,-20(fp)
 800db34:	103ee83a 	callr	r2
 800db38:	e0bffc15 	stw	r2,-16(fp)
 800db3c:	e0bffc17 	ldw	r2,-16(fp)
 800db40:	1000070e 	bge	r2,zero,800db60 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800db44:	800da700 	call	800da70 <alt_get_errno>
 800db48:	1007883a 	mov	r3,r2
 800db4c:	e0bffc17 	ldw	r2,-16(fp)
 800db50:	0085c83a 	sub	r2,zero,r2
 800db54:	18800015 	stw	r2,0(r3)
        return -1;
 800db58:	00bfffc4 	movi	r2,-1
 800db5c:	00000c06 	br	800db90 <write+0xe4>
      }
      return rval;
 800db60:	e0bffc17 	ldw	r2,-16(fp)
 800db64:	00000a06 	br	800db90 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800db68:	800da700 	call	800da70 <alt_get_errno>
 800db6c:	1007883a 	mov	r3,r2
 800db70:	00800344 	movi	r2,13
 800db74:	18800015 	stw	r2,0(r3)
 800db78:	00000406 	br	800db8c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800db7c:	800da700 	call	800da70 <alt_get_errno>
 800db80:	1007883a 	mov	r3,r2
 800db84:	00801444 	movi	r2,81
 800db88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800db8c:	00bfffc4 	movi	r2,-1
}
 800db90:	e037883a 	mov	sp,fp
 800db94:	dfc00117 	ldw	ra,4(sp)
 800db98:	df000017 	ldw	fp,0(sp)
 800db9c:	dec00204 	addi	sp,sp,8
 800dba0:	f800283a 	ret

0800dba4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 800dba4:	deffdf04 	addi	sp,sp,-132
 800dba8:	dfc02015 	stw	ra,128(sp)
 800dbac:	df001f15 	stw	fp,124(sp)
 800dbb0:	df001f04 	addi	fp,sp,124
 800dbb4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 800dbb8:	e0bfe204 	addi	r2,fp,-120
 800dbbc:	100b883a 	mov	r5,r2
 800dbc0:	01003fc4 	movi	r4,255
 800dbc4:	80161140 	call	8016114 <OSTaskQuery>
 800dbc8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 800dbcc:	e0bffe83 	ldbu	r2,-6(fp)
 800dbd0:	10803fcc 	andi	r2,r2,255
 800dbd4:	10001e1e 	bne	r2,zero,800dc50 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 800dbd8:	e0bfee83 	ldbu	r2,-70(fp)
 800dbdc:	10803fcc 	andi	r2,r2,255
 800dbe0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 800dbe4:	d0a72617 	ldw	r2,-25448(gp)
 800dbe8:	e0fffd04 	addi	r3,fp,-12
 800dbec:	180b883a 	mov	r5,r3
 800dbf0:	1009883a 	mov	r4,r2
 800dbf4:	801492c0 	call	801492c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 800dbf8:	e0bffe43 	ldbu	r2,-7(fp)
 800dbfc:	10803fcc 	andi	r2,r2,255
 800dc00:	10000726 	beq	r2,zero,800dc20 <__env_lock+0x7c>
 800dc04:	d0a00e17 	ldw	r2,-32712(gp)
 800dc08:	e0ffe117 	ldw	r3,-124(fp)
 800dc0c:	1880041e 	bne	r3,r2,800dc20 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 800dc10:	d0a72517 	ldw	r2,-25452(gp)
 800dc14:	10800044 	addi	r2,r2,1
 800dc18:	d0a72515 	stw	r2,-25452(gp)
 800dc1c:	00000a06 	br	800dc48 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 800dc20:	d0a72617 	ldw	r2,-25448(gp)
 800dc24:	e0fffe84 	addi	r3,fp,-6
 800dc28:	180d883a 	mov	r6,r3
 800dc2c:	000b883a 	mov	r5,zero
 800dc30:	1009883a 	mov	r4,r2
 800dc34:	80144a40 	call	80144a4 <OSSemPend>
    locks  = 1;
 800dc38:	00800044 	movi	r2,1
 800dc3c:	d0a72515 	stw	r2,-25452(gp)
    lockid = id;
 800dc40:	e0bfe117 	ldw	r2,-124(fp)
 800dc44:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 800dc48:	0001883a 	nop
 800dc4c:	00000106 	br	800dc54 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 800dc50:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 800dc54:	e037883a 	mov	sp,fp
 800dc58:	dfc00117 	ldw	ra,4(sp)
 800dc5c:	df000017 	ldw	fp,0(sp)
 800dc60:	dec00204 	addi	sp,sp,8
 800dc64:	f800283a 	ret

0800dc68 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 800dc68:	defffd04 	addi	sp,sp,-12
 800dc6c:	dfc00215 	stw	ra,8(sp)
 800dc70:	df000115 	stw	fp,4(sp)
 800dc74:	df000104 	addi	fp,sp,4
 800dc78:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 800dc7c:	d0a72517 	ldw	r2,-25452(gp)
 800dc80:	10000b26 	beq	r2,zero,800dcb0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 800dc84:	d0a72517 	ldw	r2,-25452(gp)
 800dc88:	10bfffc4 	addi	r2,r2,-1
 800dc8c:	d0a72515 	stw	r2,-25452(gp)
 800dc90:	d0a72517 	ldw	r2,-25452(gp)
 800dc94:	1000071e 	bne	r2,zero,800dcb4 <__env_unlock+0x4c>
  {
    lockid = -1;
 800dc98:	00bfffc4 	movi	r2,-1
 800dc9c:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 800dca0:	d0a72617 	ldw	r2,-25448(gp)
 800dca4:	1009883a 	mov	r4,r2
 800dca8:	801481c0 	call	801481c <OSSemPost>
 800dcac:	00000106 	br	800dcb4 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 800dcb0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 800dcb4:	e037883a 	mov	sp,fp
 800dcb8:	dfc00117 	ldw	ra,4(sp)
 800dcbc:	df000017 	ldw	fp,0(sp)
 800dcc0:	dec00204 	addi	sp,sp,8
 800dcc4:	f800283a 	ret

0800dcc8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 800dcc8:	deffdb04 	addi	sp,sp,-148
 800dccc:	dfc02415 	stw	ra,144(sp)
 800dcd0:	df002315 	stw	fp,140(sp)
 800dcd4:	df002304 	addi	fp,sp,140
 800dcd8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800dcdc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 800dce0:	d0a72943 	ldbu	r2,-25435(gp)
 800dce4:	10803fcc 	andi	r2,r2,255
 800dce8:	10800060 	cmpeqi	r2,r2,1
 800dcec:	10003626 	beq	r2,zero,800ddc8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 800dcf0:	e0bfe204 	addi	r2,fp,-120
 800dcf4:	100b883a 	mov	r5,r2
 800dcf8:	01003fc4 	movi	r4,255
 800dcfc:	80161140 	call	8016114 <OSTaskQuery>
 800dd00:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 800dd04:	e0bffe83 	ldbu	r2,-6(fp)
 800dd08:	10803fcc 	andi	r2,r2,255
 800dd0c:	1000301e 	bne	r2,zero,800ddd0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 800dd10:	e0bfee83 	ldbu	r2,-70(fp)
 800dd14:	10803fcc 	andi	r2,r2,255
 800dd18:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 800dd1c:	d0a72817 	ldw	r2,-25440(gp)
 800dd20:	e0fffd04 	addi	r3,fp,-12
 800dd24:	180b883a 	mov	r5,r3
 800dd28:	1009883a 	mov	r4,r2
 800dd2c:	801492c0 	call	801492c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dd30:	0005303a 	rdctl	r2,status
 800dd34:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dd38:	e0ffe117 	ldw	r3,-124(fp)
 800dd3c:	00bfff84 	movi	r2,-2
 800dd40:	1884703a 	and	r2,r3,r2
 800dd44:	1001703a 	wrctl	status,r2
  
  return context;
 800dd48:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 800dd4c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 800dd50:	e0bffd0b 	ldhu	r2,-12(fp)
 800dd54:	10bfffcc 	andi	r2,r2,65535
 800dd58:	10000b1e 	bne	r2,zero,800dd88 <__malloc_lock+0xc0>
 800dd5c:	d0a00f17 	ldw	r2,-32708(gp)
 800dd60:	e0ffde17 	ldw	r3,-136(fp)
 800dd64:	1880081e 	bne	r3,r2,800dd88 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 800dd68:	d0a72717 	ldw	r2,-25444(gp)
 800dd6c:	10800044 	addi	r2,r2,1
 800dd70:	d0a72715 	stw	r2,-25444(gp)
 800dd74:	e0bfdd17 	ldw	r2,-140(fp)
 800dd78:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd7c:	e0bfdf17 	ldw	r2,-132(fp)
 800dd80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 800dd84:	00000e06 	br	800ddc0 <__malloc_lock+0xf8>
 800dd88:	e0bfdd17 	ldw	r2,-140(fp)
 800dd8c:	e0bfe015 	stw	r2,-128(fp)
 800dd90:	e0bfe017 	ldw	r2,-128(fp)
 800dd94:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 800dd98:	d0a72817 	ldw	r2,-25440(gp)
 800dd9c:	e0fffe84 	addi	r3,fp,-6
 800dda0:	180d883a 	mov	r6,r3
 800dda4:	000b883a 	mov	r5,zero
 800dda8:	1009883a 	mov	r4,r2
 800ddac:	80144a40 	call	80144a4 <OSSemPend>
    locks  = 1;
 800ddb0:	00800044 	movi	r2,1
 800ddb4:	d0a72715 	stw	r2,-25444(gp)
    lockid = id;
 800ddb8:	e0bfde17 	ldw	r2,-136(fp)
 800ddbc:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 800ddc0:	0001883a 	nop
 800ddc4:	00000306 	br	800ddd4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 800ddc8:	0001883a 	nop
 800ddcc:	00000106 	br	800ddd4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 800ddd0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 800ddd4:	e037883a 	mov	sp,fp
 800ddd8:	dfc00117 	ldw	ra,4(sp)
 800dddc:	df000017 	ldw	fp,0(sp)
 800dde0:	dec00204 	addi	sp,sp,8
 800dde4:	f800283a 	ret

0800dde8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800dde8:	defff804 	addi	sp,sp,-32
 800ddec:	dfc00715 	stw	ra,28(sp)
 800ddf0:	df000615 	stw	fp,24(sp)
 800ddf4:	df000604 	addi	fp,sp,24
 800ddf8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800ddfc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 800de00:	d0a72943 	ldbu	r2,-25435(gp)
 800de04:	10803fcc 	andi	r2,r2,255
 800de08:	10800060 	cmpeqi	r2,r2,1
 800de0c:	10002326 	beq	r2,zero,800de9c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800de10:	0005303a 	rdctl	r2,status
 800de14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800de18:	e0fffe17 	ldw	r3,-8(fp)
 800de1c:	00bfff84 	movi	r2,-2
 800de20:	1884703a 	and	r2,r3,r2
 800de24:	1001703a 	wrctl	status,r2
  
  return context;
 800de28:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 800de2c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 800de30:	d0a72717 	ldw	r2,-25444(gp)
 800de34:	1000051e 	bne	r2,zero,800de4c <__malloc_unlock+0x64>
 800de38:	e0bffa17 	ldw	r2,-24(fp)
 800de3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800de40:	e0bffb17 	ldw	r2,-20(fp)
 800de44:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 800de48:	00001506 	br	800dea0 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 800de4c:	d0a72717 	ldw	r2,-25444(gp)
 800de50:	10bfffc4 	addi	r2,r2,-1
 800de54:	d0a72715 	stw	r2,-25444(gp)
 800de58:	d0a72717 	ldw	r2,-25444(gp)
 800de5c:	10000a1e 	bne	r2,zero,800de88 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 800de60:	00bfffc4 	movi	r2,-1
 800de64:	d0a00f15 	stw	r2,-32708(gp)
 800de68:	e0bffa17 	ldw	r2,-24(fp)
 800de6c:	e0bffc15 	stw	r2,-16(fp)
 800de70:	e0bffc17 	ldw	r2,-16(fp)
 800de74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 800de78:	d0a72817 	ldw	r2,-25440(gp)
 800de7c:	1009883a 	mov	r4,r2
 800de80:	801481c0 	call	801481c <OSSemPost>
 800de84:	00000606 	br	800dea0 <__malloc_unlock+0xb8>
 800de88:	e0bffa17 	ldw	r2,-24(fp)
 800de8c:	e0bffd15 	stw	r2,-12(fp)
 800de90:	e0bffd17 	ldw	r2,-12(fp)
 800de94:	1001703a 	wrctl	status,r2
 800de98:	00000106 	br	800dea0 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 800de9c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 800dea0:	e037883a 	mov	sp,fp
 800dea4:	dfc00117 	ldw	ra,4(sp)
 800dea8:	df000017 	ldw	fp,0(sp)
 800deac:	dec00204 	addi	sp,sp,8
 800deb0:	f800283a 	ret

0800deb4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 800deb4:	defff704 	addi	sp,sp,-36
 800deb8:	dfc00815 	stw	ra,32(sp)
 800debc:	df000715 	stw	fp,28(sp)
 800dec0:	df000704 	addi	fp,sp,28
 800dec4:	e13ffd15 	stw	r4,-12(fp)
 800dec8:	e17ffe15 	stw	r5,-8(fp)
 800decc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800ded0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 800ded4:	e0bfff17 	ldw	r2,-4(fp)
 800ded8:	1000021e 	bne	r2,zero,800dee4 <OSEventNameGet+0x30>
        return (0);
 800dedc:	0005883a 	mov	r2,zero
 800dee0:	00003706 	br	800dfc0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800dee4:	e0bffd17 	ldw	r2,-12(fp)
 800dee8:	1000051e 	bne	r2,zero,800df00 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 800deec:	e0bfff17 	ldw	r2,-4(fp)
 800def0:	00c00104 	movi	r3,4
 800def4:	10c00005 	stb	r3,0(r2)
        return (0);
 800def8:	0005883a 	mov	r2,zero
 800defc:	00003006 	br	800dfc0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800df00:	e0bffe17 	ldw	r2,-8(fp)
 800df04:	1000051e 	bne	r2,zero,800df1c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 800df08:	e0bfff17 	ldw	r2,-4(fp)
 800df0c:	00c00304 	movi	r3,12
 800df10:	10c00005 	stb	r3,0(r2)
        return (0);
 800df14:	0005883a 	mov	r2,zero
 800df18:	00002906 	br	800dfc0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 800df1c:	d0a73703 	ldbu	r2,-25380(gp)
 800df20:	10803fcc 	andi	r2,r2,255
 800df24:	10000526 	beq	r2,zero,800df3c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 800df28:	e0bfff17 	ldw	r2,-4(fp)
 800df2c:	00c00444 	movi	r3,17
 800df30:	10c00005 	stb	r3,0(r2)
        return (0);
 800df34:	0005883a 	mov	r2,zero
 800df38:	00002106 	br	800dfc0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 800df3c:	e0bffd17 	ldw	r2,-12(fp)
 800df40:	10800003 	ldbu	r2,0(r2)
 800df44:	10803fcc 	andi	r2,r2,255
 800df48:	10bfffc4 	addi	r2,r2,-1
 800df4c:	10800128 	cmpgeui	r2,r2,4
 800df50:	10000526 	beq	r2,zero,800df68 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800df54:	e0bfff17 	ldw	r2,-4(fp)
 800df58:	00c00044 	movi	r3,1
 800df5c:	10c00005 	stb	r3,0(r2)
             return (0);
 800df60:	0005883a 	mov	r2,zero
 800df64:	00001606 	br	800dfc0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 800df68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800df6c:	0005303a 	rdctl	r2,status
 800df70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800df74:	e0fffb17 	ldw	r3,-20(fp)
 800df78:	00bfff84 	movi	r2,-2
 800df7c:	1884703a 	and	r2,r3,r2
 800df80:	1001703a 	wrctl	status,r2
  
  return context;
 800df84:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 800df88:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 800df8c:	e0bffd17 	ldw	r2,-12(fp)
 800df90:	10800384 	addi	r2,r2,14
 800df94:	100b883a 	mov	r5,r2
 800df98:	e13ffe17 	ldw	r4,-8(fp)
 800df9c:	800f9380 	call	800f938 <OS_StrCopy>
 800dfa0:	e0bffa05 	stb	r2,-24(fp)
 800dfa4:	e0bff917 	ldw	r2,-28(fp)
 800dfa8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dfac:	e0bffc17 	ldw	r2,-16(fp)
 800dfb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 800dfb4:	e0bfff17 	ldw	r2,-4(fp)
 800dfb8:	10000005 	stb	zero,0(r2)
    return (len);
 800dfbc:	e0bffa03 	ldbu	r2,-24(fp)
}
 800dfc0:	e037883a 	mov	sp,fp
 800dfc4:	dfc00117 	ldw	ra,4(sp)
 800dfc8:	df000017 	ldw	fp,0(sp)
 800dfcc:	dec00204 	addi	sp,sp,8
 800dfd0:	f800283a 	ret

0800dfd4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 800dfd4:	defff604 	addi	sp,sp,-40
 800dfd8:	dfc00915 	stw	ra,36(sp)
 800dfdc:	df000815 	stw	fp,32(sp)
 800dfe0:	df000804 	addi	fp,sp,32
 800dfe4:	e13ffd15 	stw	r4,-12(fp)
 800dfe8:	e17ffe15 	stw	r5,-8(fp)
 800dfec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800dff0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 800dff4:	e0bfff17 	ldw	r2,-4(fp)
 800dff8:	10004026 	beq	r2,zero,800e0fc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800dffc:	e0bffd17 	ldw	r2,-12(fp)
 800e000:	1000041e 	bne	r2,zero,800e014 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 800e004:	e0bfff17 	ldw	r2,-4(fp)
 800e008:	00c00104 	movi	r3,4
 800e00c:	10c00005 	stb	r3,0(r2)
        return;
 800e010:	00003b06 	br	800e100 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800e014:	e0bffe17 	ldw	r2,-8(fp)
 800e018:	1000041e 	bne	r2,zero,800e02c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 800e01c:	e0bfff17 	ldw	r2,-4(fp)
 800e020:	00c00304 	movi	r3,12
 800e024:	10c00005 	stb	r3,0(r2)
        return;
 800e028:	00003506 	br	800e100 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 800e02c:	d0a73703 	ldbu	r2,-25380(gp)
 800e030:	10803fcc 	andi	r2,r2,255
 800e034:	10000426 	beq	r2,zero,800e048 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 800e038:	e0bfff17 	ldw	r2,-4(fp)
 800e03c:	00c00484 	movi	r3,18
 800e040:	10c00005 	stb	r3,0(r2)
        return;
 800e044:	00002e06 	br	800e100 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 800e048:	e0bffd17 	ldw	r2,-12(fp)
 800e04c:	10800003 	ldbu	r2,0(r2)
 800e050:	10803fcc 	andi	r2,r2,255
 800e054:	10bfffc4 	addi	r2,r2,-1
 800e058:	10800128 	cmpgeui	r2,r2,4
 800e05c:	10000426 	beq	r2,zero,800e070 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800e060:	e0bfff17 	ldw	r2,-4(fp)
 800e064:	00c00044 	movi	r3,1
 800e068:	10c00005 	stb	r3,0(r2)
             return;
 800e06c:	00002406 	br	800e100 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 800e070:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e074:	0005303a 	rdctl	r2,status
 800e078:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e07c:	e0fffc17 	ldw	r3,-16(fp)
 800e080:	00bfff84 	movi	r2,-2
 800e084:	1884703a 	and	r2,r3,r2
 800e088:	1001703a 	wrctl	status,r2
  
  return context;
 800e08c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 800e090:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 800e094:	e13ffe17 	ldw	r4,-8(fp)
 800e098:	800f9ac0 	call	800f9ac <OS_StrLen>
 800e09c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 800e0a0:	e0bffa03 	ldbu	r2,-24(fp)
 800e0a4:	10800830 	cmpltui	r2,r2,32
 800e0a8:	1000081e 	bne	r2,zero,800e0cc <OSEventNameSet+0xf8>
 800e0ac:	e0bff817 	ldw	r2,-32(fp)
 800e0b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e0b4:	e0bff917 	ldw	r2,-28(fp)
 800e0b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 800e0bc:	e0bfff17 	ldw	r2,-4(fp)
 800e0c0:	00c002c4 	movi	r3,11
 800e0c4:	10c00005 	stb	r3,0(r2)
        return;
 800e0c8:	00000d06 	br	800e100 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 800e0cc:	e0bffd17 	ldw	r2,-12(fp)
 800e0d0:	10800384 	addi	r2,r2,14
 800e0d4:	e17ffe17 	ldw	r5,-8(fp)
 800e0d8:	1009883a 	mov	r4,r2
 800e0dc:	800f9380 	call	800f938 <OS_StrCopy>
 800e0e0:	e0bff817 	ldw	r2,-32(fp)
 800e0e4:	e0bffb15 	stw	r2,-20(fp)
 800e0e8:	e0bffb17 	ldw	r2,-20(fp)
 800e0ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 800e0f0:	e0bfff17 	ldw	r2,-4(fp)
 800e0f4:	10000005 	stb	zero,0(r2)
 800e0f8:	00000106 	br	800e100 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 800e0fc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 800e100:	e037883a 	mov	sp,fp
 800e104:	dfc00117 	ldw	ra,4(sp)
 800e108:	df000017 	ldw	fp,0(sp)
 800e10c:	dec00204 	addi	sp,sp,8
 800e110:	f800283a 	ret

0800e114 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 800e114:	deffed04 	addi	sp,sp,-76
 800e118:	dfc01215 	stw	ra,72(sp)
 800e11c:	df001115 	stw	fp,68(sp)
 800e120:	df001104 	addi	fp,sp,68
 800e124:	e13ffc15 	stw	r4,-16(fp)
 800e128:	e17ffd15 	stw	r5,-12(fp)
 800e12c:	e1bffe15 	stw	r6,-8(fp)
 800e130:	3805883a 	mov	r2,r7
 800e134:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 800e138:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 800e13c:	e0800217 	ldw	r2,8(fp)
 800e140:	1000021e 	bne	r2,zero,800e14c <OSEventPendMulti+0x38>
        return (0);
 800e144:	0005883a 	mov	r2,zero
 800e148:	00017106 	br	800e710 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 800e14c:	e0bffc17 	ldw	r2,-16(fp)
 800e150:	1000051e 	bne	r2,zero,800e168 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 800e154:	e0800217 	ldw	r2,8(fp)
 800e158:	00c00104 	movi	r3,4
 800e15c:	10c00005 	stb	r3,0(r2)
        return (0);
 800e160:	0005883a 	mov	r2,zero
 800e164:	00016a06 	br	800e710 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 800e168:	e0bffd17 	ldw	r2,-12(fp)
 800e16c:	1000051e 	bne	r2,zero,800e184 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 800e170:	e0800217 	ldw	r2,8(fp)
 800e174:	00c00104 	movi	r3,4
 800e178:	10c00005 	stb	r3,0(r2)
        return (0);
 800e17c:	0005883a 	mov	r2,zero
 800e180:	00016306 	br	800e710 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 800e184:	e0bffe17 	ldw	r2,-8(fp)
 800e188:	1000051e 	bne	r2,zero,800e1a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 800e18c:	e0800217 	ldw	r2,8(fp)
 800e190:	00c00104 	movi	r3,4
 800e194:	10c00005 	stb	r3,0(r2)
        return (0);
 800e198:	0005883a 	mov	r2,zero
 800e19c:	00015c06 	br	800e710 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 800e1a0:	e0bffd17 	ldw	r2,-12(fp)
 800e1a4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 800e1a8:	e0bffc17 	ldw	r2,-16(fp)
 800e1ac:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 800e1b0:	e0bfef17 	ldw	r2,-68(fp)
 800e1b4:	10800017 	ldw	r2,0(r2)
 800e1b8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 800e1bc:	00001906 	br	800e224 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 800e1c0:	e0bff017 	ldw	r2,-64(fp)
 800e1c4:	10800003 	ldbu	r2,0(r2)
 800e1c8:	10803fcc 	andi	r2,r2,255
 800e1cc:	10c000a0 	cmpeqi	r3,r2,2
 800e1d0:	1800091e 	bne	r3,zero,800e1f8 <OSEventPendMulti+0xe4>
 800e1d4:	10c000e0 	cmpeqi	r3,r2,3
 800e1d8:	1800091e 	bne	r3,zero,800e200 <OSEventPendMulti+0xec>
 800e1dc:	10800060 	cmpeqi	r2,r2,1
 800e1e0:	1000091e 	bne	r2,zero,800e208 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 800e1e4:	e0800217 	ldw	r2,8(fp)
 800e1e8:	00c00044 	movi	r3,1
 800e1ec:	10c00005 	stb	r3,0(r2)
                 return (0);
 800e1f0:	0005883a 	mov	r2,zero
 800e1f4:	00014606 	br	800e710 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 800e1f8:	0001883a 	nop
 800e1fc:	00000306 	br	800e20c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 800e200:	0001883a 	nop
 800e204:	00000106 	br	800e20c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 800e208:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 800e20c:	e0bfef17 	ldw	r2,-68(fp)
 800e210:	10800104 	addi	r2,r2,4
 800e214:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 800e218:	e0bfef17 	ldw	r2,-68(fp)
 800e21c:	10800017 	ldw	r2,0(r2)
 800e220:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 800e224:	e0bff017 	ldw	r2,-64(fp)
 800e228:	103fe51e 	bne	r2,zero,800e1c0 <__alt_data_end+0xf800e1c0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 800e22c:	d0a73703 	ldbu	r2,-25380(gp)
 800e230:	10803fcc 	andi	r2,r2,255
 800e234:	10000526 	beq	r2,zero,800e24c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 800e238:	e0800217 	ldw	r2,8(fp)
 800e23c:	00c00084 	movi	r3,2
 800e240:	10c00005 	stb	r3,0(r2)
        return (0);
 800e244:	0005883a 	mov	r2,zero
 800e248:	00013106 	br	800e710 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 800e24c:	d0a72903 	ldbu	r2,-25436(gp)
 800e250:	10803fcc 	andi	r2,r2,255
 800e254:	10000526 	beq	r2,zero,800e26c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 800e258:	e0800217 	ldw	r2,8(fp)
 800e25c:	00c00344 	movi	r3,13
 800e260:	10c00005 	stb	r3,0(r2)
        return (0);
 800e264:	0005883a 	mov	r2,zero
 800e268:	00012906 	br	800e710 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e26c:	0005303a 	rdctl	r2,status
 800e270:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e274:	e0fffb17 	ldw	r3,-20(fp)
 800e278:	00bfff84 	movi	r2,-2
 800e27c:	1884703a 	and	r2,r3,r2
 800e280:	1001703a 	wrctl	status,r2
  
  return context;
 800e284:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 800e288:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 800e28c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 800e290:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 800e294:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 800e298:	e0bffc17 	ldw	r2,-16(fp)
 800e29c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 800e2a0:	e0bfef17 	ldw	r2,-68(fp)
 800e2a4:	10800017 	ldw	r2,0(r2)
 800e2a8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 800e2ac:	00008106 	br	800e4b4 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 800e2b0:	e0bff017 	ldw	r2,-64(fp)
 800e2b4:	10800003 	ldbu	r2,0(r2)
 800e2b8:	10803fcc 	andi	r2,r2,255
 800e2bc:	10c000a0 	cmpeqi	r3,r2,2
 800e2c0:	18003c1e 	bne	r3,zero,800e3b4 <OSEventPendMulti+0x2a0>
 800e2c4:	10c000e0 	cmpeqi	r3,r2,3
 800e2c8:	1800031e 	bne	r3,zero,800e2d8 <OSEventPendMulti+0x1c4>
 800e2cc:	10800060 	cmpeqi	r2,r2,1
 800e2d0:	10001e1e 	bne	r2,zero,800e34c <OSEventPendMulti+0x238>
 800e2d4:	00006606 	br	800e470 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 800e2d8:	e0bff017 	ldw	r2,-64(fp)
 800e2dc:	1080020b 	ldhu	r2,8(r2)
 800e2e0:	10bfffcc 	andi	r2,r2,65535
 800e2e4:	10001526 	beq	r2,zero,800e33c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 800e2e8:	e0bff017 	ldw	r2,-64(fp)
 800e2ec:	1080020b 	ldhu	r2,8(r2)
 800e2f0:	10bfffc4 	addi	r2,r2,-1
 800e2f4:	1007883a 	mov	r3,r2
 800e2f8:	e0bff017 	ldw	r2,-64(fp)
 800e2fc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 800e300:	e0bffd17 	ldw	r2,-12(fp)
 800e304:	10c00104 	addi	r3,r2,4
 800e308:	e0fffd15 	stw	r3,-12(fp)
 800e30c:	e0fff017 	ldw	r3,-64(fp)
 800e310:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 800e314:	00800044 	movi	r2,1
 800e318:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 800e31c:	e0bffe17 	ldw	r2,-8(fp)
 800e320:	10c00104 	addi	r3,r2,4
 800e324:	e0fffe15 	stw	r3,-8(fp)
 800e328:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 800e32c:	e0bff18b 	ldhu	r2,-58(fp)
 800e330:	10800044 	addi	r2,r2,1
 800e334:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 800e338:	00005806 	br	800e49c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 800e33c:	e0bff203 	ldbu	r2,-56(fp)
 800e340:	10800054 	ori	r2,r2,1
 800e344:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e348:	00005406 	br	800e49c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 800e34c:	e0bff017 	ldw	r2,-64(fp)
 800e350:	10800117 	ldw	r2,4(r2)
 800e354:	10001326 	beq	r2,zero,800e3a4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 800e358:	e0bffe17 	ldw	r2,-8(fp)
 800e35c:	10c00104 	addi	r3,r2,4
 800e360:	e0fffe15 	stw	r3,-8(fp)
 800e364:	e0fff017 	ldw	r3,-64(fp)
 800e368:	18c00117 	ldw	r3,4(r3)
 800e36c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 800e370:	e0bff017 	ldw	r2,-64(fp)
 800e374:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 800e378:	e0bffd17 	ldw	r2,-12(fp)
 800e37c:	10c00104 	addi	r3,r2,4
 800e380:	e0fffd15 	stw	r3,-12(fp)
 800e384:	e0fff017 	ldw	r3,-64(fp)
 800e388:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 800e38c:	00800044 	movi	r2,1
 800e390:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 800e394:	e0bff18b 	ldhu	r2,-58(fp)
 800e398:	10800044 	addi	r2,r2,1
 800e39c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 800e3a0:	00003e06 	br	800e49c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 800e3a4:	e0bff203 	ldbu	r2,-56(fp)
 800e3a8:	10800094 	ori	r2,r2,2
 800e3ac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e3b0:	00003a06 	br	800e49c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 800e3b4:	e0bff017 	ldw	r2,-64(fp)
 800e3b8:	10800117 	ldw	r2,4(r2)
 800e3bc:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 800e3c0:	e0bff517 	ldw	r2,-44(fp)
 800e3c4:	1080058b 	ldhu	r2,22(r2)
 800e3c8:	10bfffcc 	andi	r2,r2,65535
 800e3cc:	10002426 	beq	r2,zero,800e460 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 800e3d0:	e0bffe17 	ldw	r2,-8(fp)
 800e3d4:	10c00104 	addi	r3,r2,4
 800e3d8:	e0fffe15 	stw	r3,-8(fp)
 800e3dc:	e0fff517 	ldw	r3,-44(fp)
 800e3e0:	18c00417 	ldw	r3,16(r3)
 800e3e4:	19400104 	addi	r5,r3,4
 800e3e8:	e13ff517 	ldw	r4,-44(fp)
 800e3ec:	21400415 	stw	r5,16(r4)
 800e3f0:	18c00017 	ldw	r3,0(r3)
 800e3f4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 800e3f8:	e0bff517 	ldw	r2,-44(fp)
 800e3fc:	10c00417 	ldw	r3,16(r2)
 800e400:	e0bff517 	ldw	r2,-44(fp)
 800e404:	10800217 	ldw	r2,8(r2)
 800e408:	1880041e 	bne	r3,r2,800e41c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 800e40c:	e0bff517 	ldw	r2,-44(fp)
 800e410:	10c00117 	ldw	r3,4(r2)
 800e414:	e0bff517 	ldw	r2,-44(fp)
 800e418:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 800e41c:	e0bff517 	ldw	r2,-44(fp)
 800e420:	1080058b 	ldhu	r2,22(r2)
 800e424:	10bfffc4 	addi	r2,r2,-1
 800e428:	1007883a 	mov	r3,r2
 800e42c:	e0bff517 	ldw	r2,-44(fp)
 800e430:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 800e434:	e0bffd17 	ldw	r2,-12(fp)
 800e438:	10c00104 	addi	r3,r2,4
 800e43c:	e0fffd15 	stw	r3,-12(fp)
 800e440:	e0fff017 	ldw	r3,-64(fp)
 800e444:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 800e448:	00800044 	movi	r2,1
 800e44c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 800e450:	e0bff18b 	ldhu	r2,-58(fp)
 800e454:	10800044 	addi	r2,r2,1
 800e458:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 800e45c:	00000f06 	br	800e49c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 800e460:	e0bff203 	ldbu	r2,-56(fp)
 800e464:	10800114 	ori	r2,r2,4
 800e468:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e46c:	00000b06 	br	800e49c <OSEventPendMulti+0x388>
 800e470:	e0bff317 	ldw	r2,-52(fp)
 800e474:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e478:	e0bff417 	ldw	r2,-48(fp)
 800e47c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 800e480:	e0bffd17 	ldw	r2,-12(fp)
 800e484:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 800e488:	e0800217 	ldw	r2,8(fp)
 800e48c:	00c00044 	movi	r3,1
 800e490:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 800e494:	e0bff18b 	ldhu	r2,-58(fp)
 800e498:	00009d06 	br	800e710 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 800e49c:	e0bfef17 	ldw	r2,-68(fp)
 800e4a0:	10800104 	addi	r2,r2,4
 800e4a4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 800e4a8:	e0bfef17 	ldw	r2,-68(fp)
 800e4ac:	10800017 	ldw	r2,0(r2)
 800e4b0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 800e4b4:	e0bff017 	ldw	r2,-64(fp)
 800e4b8:	103f7d1e 	bne	r2,zero,800e2b0 <__alt_data_end+0xf800e2b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 800e4bc:	e0bff103 	ldbu	r2,-60(fp)
 800e4c0:	10800058 	cmpnei	r2,r2,1
 800e4c4:	10000a1e 	bne	r2,zero,800e4f0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 800e4c8:	e0bffd17 	ldw	r2,-12(fp)
 800e4cc:	10000015 	stw	zero,0(r2)
 800e4d0:	e0bff317 	ldw	r2,-52(fp)
 800e4d4:	e0bff615 	stw	r2,-40(fp)
 800e4d8:	e0bff617 	ldw	r2,-40(fp)
 800e4dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 800e4e0:	e0800217 	ldw	r2,8(fp)
 800e4e4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 800e4e8:	e0bff18b 	ldhu	r2,-58(fp)
 800e4ec:	00008806 	br	800e710 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 800e4f0:	d0a73817 	ldw	r2,-25376(gp)
 800e4f4:	d0e73817 	ldw	r3,-25376(gp)
 800e4f8:	19000c03 	ldbu	r4,48(r3)
 800e4fc:	e0fff203 	ldbu	r3,-56(fp)
 800e500:	20c6b03a 	or	r3,r4,r3
 800e504:	1809883a 	mov	r4,r3
 800e508:	00ffe004 	movi	r3,-128
 800e50c:	20c6b03a 	or	r3,r4,r3
 800e510:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800e514:	d0a73817 	ldw	r2,-25376(gp)
 800e518:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 800e51c:	d0a73817 	ldw	r2,-25376(gp)
 800e520:	e0ffff0b 	ldhu	r3,-4(fp)
 800e524:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 800e528:	e13ffc17 	ldw	r4,-16(fp)
 800e52c:	800f0500 	call	800f050 <OS_EventTaskWaitMulti>
 800e530:	e0bff317 	ldw	r2,-52(fp)
 800e534:	e0bff915 	stw	r2,-28(fp)
 800e538:	e0bff917 	ldw	r2,-28(fp)
 800e53c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 800e540:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e544:	0005303a 	rdctl	r2,status
 800e548:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e54c:	e0fff717 	ldw	r3,-36(fp)
 800e550:	00bfff84 	movi	r2,-2
 800e554:	1884703a 	and	r2,r3,r2
 800e558:	1001703a 	wrctl	status,r2
  
  return context;
 800e55c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 800e560:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 800e564:	d0a73817 	ldw	r2,-25376(gp)
 800e568:	10800c43 	ldbu	r2,49(r2)
 800e56c:	10803fcc 	andi	r2,r2,255
 800e570:	10000226 	beq	r2,zero,800e57c <OSEventPendMulti+0x468>
 800e574:	108000a0 	cmpeqi	r2,r2,2
 800e578:	10001826 	beq	r2,zero,800e5dc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 800e57c:	d0a73817 	ldw	r2,-25376(gp)
 800e580:	10800717 	ldw	r2,28(r2)
 800e584:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 800e588:	e0bff017 	ldw	r2,-64(fp)
 800e58c:	10000b26 	beq	r2,zero,800e5bc <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 800e590:	e0bffd17 	ldw	r2,-12(fp)
 800e594:	10c00104 	addi	r3,r2,4
 800e598:	e0fffd15 	stw	r3,-12(fp)
 800e59c:	e0fff017 	ldw	r3,-64(fp)
 800e5a0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 800e5a4:	e0bffd17 	ldw	r2,-12(fp)
 800e5a8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 800e5ac:	e0bff18b 	ldhu	r2,-58(fp)
 800e5b0:	10800044 	addi	r2,r2,1
 800e5b4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 800e5b8:	00000d06 	br	800e5f0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 800e5bc:	d0a73817 	ldw	r2,-25376(gp)
 800e5c0:	00c00044 	movi	r3,1
 800e5c4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 800e5c8:	d0a73817 	ldw	r2,-25376(gp)
 800e5cc:	e17ffc17 	ldw	r5,-16(fp)
 800e5d0:	1009883a 	mov	r4,r2
 800e5d4:	800f2580 	call	800f258 <OS_EventTaskRemoveMulti>
             }
			 break;
 800e5d8:	00000506 	br	800e5f0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 800e5dc:	d0a73817 	ldw	r2,-25376(gp)
 800e5e0:	e17ffc17 	ldw	r5,-16(fp)
 800e5e4:	1009883a 	mov	r4,r2
 800e5e8:	800f2580 	call	800f258 <OS_EventTaskRemoveMulti>
             break;
 800e5ec:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 800e5f0:	d0a73817 	ldw	r2,-25376(gp)
 800e5f4:	10800c43 	ldbu	r2,49(r2)
 800e5f8:	10803fcc 	andi	r2,r2,255
 800e5fc:	10000326 	beq	r2,zero,800e60c <OSEventPendMulti+0x4f8>
 800e600:	108000a0 	cmpeqi	r2,r2,2
 800e604:	1000231e 	bne	r2,zero,800e694 <OSEventPendMulti+0x580>
 800e608:	00002a06 	br	800e6b4 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 800e60c:	e0bff017 	ldw	r2,-64(fp)
 800e610:	10800003 	ldbu	r2,0(r2)
 800e614:	10803fcc 	andi	r2,r2,255
 800e618:	0080100e 	bge	zero,r2,800e65c <OSEventPendMulti+0x548>
 800e61c:	10c000d0 	cmplti	r3,r2,3
 800e620:	1800071e 	bne	r3,zero,800e640 <OSEventPendMulti+0x52c>
 800e624:	108000e0 	cmpeqi	r2,r2,3
 800e628:	10000c26 	beq	r2,zero,800e65c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 800e62c:	e0bffe17 	ldw	r2,-8(fp)
 800e630:	10c00104 	addi	r3,r2,4
 800e634:	e0fffe15 	stw	r3,-8(fp)
 800e638:	10000015 	stw	zero,0(r2)
                      break;
 800e63c:	00001206 	br	800e688 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 800e640:	e0bffe17 	ldw	r2,-8(fp)
 800e644:	10c00104 	addi	r3,r2,4
 800e648:	e0fffe15 	stw	r3,-8(fp)
 800e64c:	d0e73817 	ldw	r3,-25376(gp)
 800e650:	18c00917 	ldw	r3,36(r3)
 800e654:	10c00015 	stw	r3,0(r2)
                      break;
 800e658:	00000b06 	br	800e688 <OSEventPendMulti+0x574>
 800e65c:	e0bff317 	ldw	r2,-52(fp)
 800e660:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e664:	e0bff817 	ldw	r2,-32(fp)
 800e668:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 800e66c:	e0bffd17 	ldw	r2,-12(fp)
 800e670:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 800e674:	e0800217 	ldw	r2,8(fp)
 800e678:	00c00044 	movi	r3,1
 800e67c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 800e680:	e0bff18b 	ldhu	r2,-58(fp)
 800e684:	00002206 	br	800e710 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 800e688:	e0800217 	ldw	r2,8(fp)
 800e68c:	10000005 	stb	zero,0(r2)
             break;
 800e690:	00001006 	br	800e6d4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 800e694:	e0bffe17 	ldw	r2,-8(fp)
 800e698:	10c00104 	addi	r3,r2,4
 800e69c:	e0fffe15 	stw	r3,-8(fp)
 800e6a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 800e6a4:	e0800217 	ldw	r2,8(fp)
 800e6a8:	00c00384 	movi	r3,14
 800e6ac:	10c00005 	stb	r3,0(r2)
             break;
 800e6b0:	00000806 	br	800e6d4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 800e6b4:	e0bffe17 	ldw	r2,-8(fp)
 800e6b8:	10c00104 	addi	r3,r2,4
 800e6bc:	e0fffe15 	stw	r3,-8(fp)
 800e6c0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 800e6c4:	e0800217 	ldw	r2,8(fp)
 800e6c8:	00c00284 	movi	r3,10
 800e6cc:	10c00005 	stb	r3,0(r2)
             break;
 800e6d0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 800e6d4:	d0a73817 	ldw	r2,-25376(gp)
 800e6d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 800e6dc:	d0a73817 	ldw	r2,-25376(gp)
 800e6e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 800e6e4:	d0a73817 	ldw	r2,-25376(gp)
 800e6e8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 800e6ec:	d0a73817 	ldw	r2,-25376(gp)
 800e6f0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 800e6f4:	d0a73817 	ldw	r2,-25376(gp)
 800e6f8:	10000915 	stw	zero,36(r2)
 800e6fc:	e0bff317 	ldw	r2,-52(fp)
 800e700:	e0bffa15 	stw	r2,-24(fp)
 800e704:	e0bffa17 	ldw	r2,-24(fp)
 800e708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 800e70c:	e0bff18b 	ldhu	r2,-58(fp)
}
 800e710:	e037883a 	mov	sp,fp
 800e714:	dfc00117 	ldw	ra,4(sp)
 800e718:	df000017 	ldw	fp,0(sp)
 800e71c:	dec00204 	addi	sp,sp,8
 800e720:	f800283a 	ret

0800e724 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 800e724:	defffe04 	addi	sp,sp,-8
 800e728:	dfc00115 	stw	ra,4(sp)
 800e72c:	df000015 	stw	fp,0(sp)
 800e730:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 800e734:	80188300 	call	8018830 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 800e738:	800f4a00 	call	800f4a0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 800e73c:	800f4e80 	call	800f4e8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 800e740:	800f6540 	call	800f654 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 800e744:	800f3c00 	call	800f3c0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 800e748:	80114f40 	call	80114f4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 800e74c:	8011df40 	call	8011df4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 800e750:	80140340 	call	8014034 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 800e754:	800f5540 	call	800f554 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 800e758:	800f5d40 	call	800f5d4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 800e75c:	80188500 	call	8018850 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 800e760:	800fec80 	call	800fec8 <OSDebugInit>
#endif
}
 800e764:	0001883a 	nop
 800e768:	e037883a 	mov	sp,fp
 800e76c:	dfc00117 	ldw	ra,4(sp)
 800e770:	df000017 	ldw	fp,0(sp)
 800e774:	dec00204 	addi	sp,sp,8
 800e778:	f800283a 	ret

0800e77c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 800e77c:	deffff04 	addi	sp,sp,-4
 800e780:	df000015 	stw	fp,0(sp)
 800e784:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 800e788:	d0a72943 	ldbu	r2,-25435(gp)
 800e78c:	10803fcc 	andi	r2,r2,255
 800e790:	10800058 	cmpnei	r2,r2,1
 800e794:	1000071e 	bne	r2,zero,800e7b4 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 800e798:	d0a73703 	ldbu	r2,-25380(gp)
 800e79c:	10803fcc 	andi	r2,r2,255
 800e7a0:	10803fe0 	cmpeqi	r2,r2,255
 800e7a4:	1000031e 	bne	r2,zero,800e7b4 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 800e7a8:	d0a73703 	ldbu	r2,-25380(gp)
 800e7ac:	10800044 	addi	r2,r2,1
 800e7b0:	d0a73705 	stb	r2,-25380(gp)
        }
    }
}
 800e7b4:	0001883a 	nop
 800e7b8:	e037883a 	mov	sp,fp
 800e7bc:	df000017 	ldw	fp,0(sp)
 800e7c0:	dec00104 	addi	sp,sp,4
 800e7c4:	f800283a 	ret

0800e7c8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800e7c8:	defffb04 	addi	sp,sp,-20
 800e7cc:	dfc00415 	stw	ra,16(sp)
 800e7d0:	df000315 	stw	fp,12(sp)
 800e7d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800e7d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 800e7dc:	d0a72943 	ldbu	r2,-25435(gp)
 800e7e0:	10803fcc 	andi	r2,r2,255
 800e7e4:	10800058 	cmpnei	r2,r2,1
 800e7e8:	10002f1e 	bne	r2,zero,800e8a8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e7ec:	0005303a 	rdctl	r2,status
 800e7f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e7f4:	e0ffff17 	ldw	r3,-4(fp)
 800e7f8:	00bfff84 	movi	r2,-2
 800e7fc:	1884703a 	and	r2,r3,r2
 800e800:	1001703a 	wrctl	status,r2
  
  return context;
 800e804:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 800e808:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 800e80c:	d0a73703 	ldbu	r2,-25380(gp)
 800e810:	10803fcc 	andi	r2,r2,255
 800e814:	10000326 	beq	r2,zero,800e824 <OSIntExit+0x5c>
            OSIntNesting--;
 800e818:	d0a73703 	ldbu	r2,-25380(gp)
 800e81c:	10bfffc4 	addi	r2,r2,-1
 800e820:	d0a73705 	stb	r2,-25380(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 800e824:	d0a73703 	ldbu	r2,-25380(gp)
 800e828:	10803fcc 	andi	r2,r2,255
 800e82c:	10001a1e 	bne	r2,zero,800e898 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 800e830:	d0a72903 	ldbu	r2,-25436(gp)
 800e834:	10803fcc 	andi	r2,r2,255
 800e838:	1000171e 	bne	r2,zero,800e898 <OSIntExit+0xd0>
                OS_SchedNew();
 800e83c:	800f8c40 	call	800f8c4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 800e840:	d0e72b03 	ldbu	r3,-25428(gp)
 800e844:	d0a72b43 	ldbu	r2,-25427(gp)
 800e848:	18c03fcc 	andi	r3,r3,255
 800e84c:	10803fcc 	andi	r2,r2,255
 800e850:	18801126 	beq	r3,r2,800e898 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 800e854:	d0a72b03 	ldbu	r2,-25428(gp)
 800e858:	10c03fcc 	andi	r3,r2,255
 800e85c:	008200b4 	movhi	r2,2050
 800e860:	108f9c04 	addi	r2,r2,15984
 800e864:	18c7883a 	add	r3,r3,r3
 800e868:	18c7883a 	add	r3,r3,r3
 800e86c:	10c5883a 	add	r2,r2,r3
 800e870:	10800017 	ldw	r2,0(r2)
 800e874:	d0a73315 	stw	r2,-25396(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 800e878:	d0a73317 	ldw	r2,-25396(gp)
 800e87c:	10c00e17 	ldw	r3,56(r2)
 800e880:	18c00044 	addi	r3,r3,1
 800e884:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 800e888:	d0a72e17 	ldw	r2,-25416(gp)
 800e88c:	10800044 	addi	r2,r2,1
 800e890:	d0a72e15 	stw	r2,-25416(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 800e894:	801855c0 	call	801855c <OSCtxSw>
 800e898:	e0bffd17 	ldw	r2,-12(fp)
 800e89c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e8a0:	e0bffe17 	ldw	r2,-8(fp)
 800e8a4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 800e8a8:	0001883a 	nop
 800e8ac:	e037883a 	mov	sp,fp
 800e8b0:	dfc00117 	ldw	ra,4(sp)
 800e8b4:	df000017 	ldw	fp,0(sp)
 800e8b8:	dec00204 	addi	sp,sp,8
 800e8bc:	f800283a 	ret

0800e8c0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 800e8c0:	defffc04 	addi	sp,sp,-16
 800e8c4:	df000315 	stw	fp,12(sp)
 800e8c8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800e8cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 800e8d0:	d0a72943 	ldbu	r2,-25435(gp)
 800e8d4:	10803fcc 	andi	r2,r2,255
 800e8d8:	10800058 	cmpnei	r2,r2,1
 800e8dc:	1000161e 	bne	r2,zero,800e938 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e8e0:	0005303a 	rdctl	r2,status
 800e8e4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e8e8:	e0ffff17 	ldw	r3,-4(fp)
 800e8ec:	00bfff84 	movi	r2,-2
 800e8f0:	1884703a 	and	r2,r3,r2
 800e8f4:	1001703a 	wrctl	status,r2
  
  return context;
 800e8f8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 800e8fc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 800e900:	d0a73703 	ldbu	r2,-25380(gp)
 800e904:	10803fcc 	andi	r2,r2,255
 800e908:	1000071e 	bne	r2,zero,800e928 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800e90c:	d0a72903 	ldbu	r2,-25436(gp)
 800e910:	10803fcc 	andi	r2,r2,255
 800e914:	10803fe0 	cmpeqi	r2,r2,255
 800e918:	1000031e 	bne	r2,zero,800e928 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 800e91c:	d0a72903 	ldbu	r2,-25436(gp)
 800e920:	10800044 	addi	r2,r2,1
 800e924:	d0a72905 	stb	r2,-25436(gp)
 800e928:	e0bffd17 	ldw	r2,-12(fp)
 800e92c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e930:	e0bffe17 	ldw	r2,-8(fp)
 800e934:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 800e938:	0001883a 	nop
 800e93c:	e037883a 	mov	sp,fp
 800e940:	df000017 	ldw	fp,0(sp)
 800e944:	dec00104 	addi	sp,sp,4
 800e948:	f800283a 	ret

0800e94c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 800e94c:	defff804 	addi	sp,sp,-32
 800e950:	dfc00715 	stw	ra,28(sp)
 800e954:	df000615 	stw	fp,24(sp)
 800e958:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800e95c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 800e960:	d0a72943 	ldbu	r2,-25435(gp)
 800e964:	10803fcc 	andi	r2,r2,255
 800e968:	10800058 	cmpnei	r2,r2,1
 800e96c:	1000281e 	bne	r2,zero,800ea10 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e970:	0005303a 	rdctl	r2,status
 800e974:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e978:	e0ffff17 	ldw	r3,-4(fp)
 800e97c:	00bfff84 	movi	r2,-2
 800e980:	1884703a 	and	r2,r3,r2
 800e984:	1001703a 	wrctl	status,r2
  
  return context;
 800e988:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 800e98c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 800e990:	d0a72903 	ldbu	r2,-25436(gp)
 800e994:	10803fcc 	andi	r2,r2,255
 800e998:	10001926 	beq	r2,zero,800ea00 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 800e99c:	d0a72903 	ldbu	r2,-25436(gp)
 800e9a0:	10bfffc4 	addi	r2,r2,-1
 800e9a4:	d0a72905 	stb	r2,-25436(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 800e9a8:	d0a72903 	ldbu	r2,-25436(gp)
 800e9ac:	10803fcc 	andi	r2,r2,255
 800e9b0:	10000e1e 	bne	r2,zero,800e9ec <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 800e9b4:	d0a73703 	ldbu	r2,-25380(gp)
 800e9b8:	10803fcc 	andi	r2,r2,255
 800e9bc:	1000061e 	bne	r2,zero,800e9d8 <OSSchedUnlock+0x8c>
 800e9c0:	e0bffa17 	ldw	r2,-24(fp)
 800e9c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e9c8:	e0bffb17 	ldw	r2,-20(fp)
 800e9cc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 800e9d0:	800f7f40 	call	800f7f4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 800e9d4:	00000e06 	br	800ea10 <OSSchedUnlock+0xc4>
 800e9d8:	e0bffa17 	ldw	r2,-24(fp)
 800e9dc:	e0bffc15 	stw	r2,-16(fp)
 800e9e0:	e0bffc17 	ldw	r2,-16(fp)
 800e9e4:	1001703a 	wrctl	status,r2
 800e9e8:	00000906 	br	800ea10 <OSSchedUnlock+0xc4>
 800e9ec:	e0bffa17 	ldw	r2,-24(fp)
 800e9f0:	e0bffd15 	stw	r2,-12(fp)
 800e9f4:	e0bffd17 	ldw	r2,-12(fp)
 800e9f8:	1001703a 	wrctl	status,r2
 800e9fc:	00000406 	br	800ea10 <OSSchedUnlock+0xc4>
 800ea00:	e0bffa17 	ldw	r2,-24(fp)
 800ea04:	e0bffe15 	stw	r2,-8(fp)
 800ea08:	e0bffe17 	ldw	r2,-8(fp)
 800ea0c:	1001703a 	wrctl	status,r2
 800ea10:	0001883a 	nop
 800ea14:	e037883a 	mov	sp,fp
 800ea18:	dfc00117 	ldw	ra,4(sp)
 800ea1c:	df000017 	ldw	fp,0(sp)
 800ea20:	dec00204 	addi	sp,sp,8
 800ea24:	f800283a 	ret

0800ea28 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 800ea28:	defffe04 	addi	sp,sp,-8
 800ea2c:	dfc00115 	stw	ra,4(sp)
 800ea30:	df000015 	stw	fp,0(sp)
 800ea34:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 800ea38:	d0a72943 	ldbu	r2,-25435(gp)
 800ea3c:	10803fcc 	andi	r2,r2,255
 800ea40:	10000f1e 	bne	r2,zero,800ea80 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 800ea44:	800f8c40 	call	800f8c4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 800ea48:	d0a72b03 	ldbu	r2,-25428(gp)
 800ea4c:	d0a72b45 	stb	r2,-25427(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 800ea50:	d0a72b03 	ldbu	r2,-25428(gp)
 800ea54:	10c03fcc 	andi	r3,r2,255
 800ea58:	008200b4 	movhi	r2,2050
 800ea5c:	108f9c04 	addi	r2,r2,15984
 800ea60:	18c7883a 	add	r3,r3,r3
 800ea64:	18c7883a 	add	r3,r3,r3
 800ea68:	10c5883a 	add	r2,r2,r3
 800ea6c:	10800017 	ldw	r2,0(r2)
 800ea70:	d0a73315 	stw	r2,-25396(gp)
        OSTCBCur      = OSTCBHighRdy;
 800ea74:	d0a73317 	ldw	r2,-25396(gp)
 800ea78:	d0a73815 	stw	r2,-25376(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 800ea7c:	80185e80 	call	80185e8 <OSStartHighRdy>
    }
}
 800ea80:	0001883a 	nop
 800ea84:	e037883a 	mov	sp,fp
 800ea88:	dfc00117 	ldw	ra,4(sp)
 800ea8c:	df000017 	ldw	fp,0(sp)
 800ea90:	dec00204 	addi	sp,sp,8
 800ea94:	f800283a 	ret

0800ea98 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 800ea98:	defff904 	addi	sp,sp,-28
 800ea9c:	dfc00615 	stw	ra,24(sp)
 800eaa0:	df000515 	stw	fp,20(sp)
 800eaa4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800eaa8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 800eaac:	01000084 	movi	r4,2
 800eab0:	80162a80 	call	80162a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eab4:	0005303a 	rdctl	r2,status
 800eab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eabc:	e0fffc17 	ldw	r3,-16(fp)
 800eac0:	00bfff84 	movi	r2,-2
 800eac4:	1884703a 	and	r2,r3,r2
 800eac8:	1001703a 	wrctl	status,r2
  
  return context;
 800eacc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 800ead0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 800ead4:	d0272a15 	stw	zero,-25432(gp)
 800ead8:	e0bffb17 	ldw	r2,-20(fp)
 800eadc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eae0:	e0bffd17 	ldw	r2,-12(fp)
 800eae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 800eae8:	01001904 	movi	r4,100
 800eaec:	80162a80 	call	80162a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eaf0:	0005303a 	rdctl	r2,status
 800eaf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eaf8:	e0fffe17 	ldw	r3,-8(fp)
 800eafc:	00bfff84 	movi	r2,-2
 800eb00:	1884703a 	and	r2,r3,r2
 800eb04:	1001703a 	wrctl	status,r2
  
  return context;
 800eb08:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 800eb0c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 800eb10:	d0a72a17 	ldw	r2,-25432(gp)
 800eb14:	d0a72f15 	stw	r2,-25412(gp)
    OSStatRdy    = OS_TRUE;
 800eb18:	00800044 	movi	r2,1
 800eb1c:	d0a73b05 	stb	r2,-25364(gp)
 800eb20:	e0bffb17 	ldw	r2,-20(fp)
 800eb24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb28:	e0bfff17 	ldw	r2,-4(fp)
 800eb2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 800eb30:	0001883a 	nop
 800eb34:	e037883a 	mov	sp,fp
 800eb38:	dfc00117 	ldw	ra,4(sp)
 800eb3c:	df000017 	ldw	fp,0(sp)
 800eb40:	dec00204 	addi	sp,sp,8
 800eb44:	f800283a 	ret

0800eb48 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 800eb48:	defff704 	addi	sp,sp,-36
 800eb4c:	dfc00815 	stw	ra,32(sp)
 800eb50:	df000715 	stw	fp,28(sp)
 800eb54:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 800eb58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 800eb5c:	80188100 	call	8018810 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eb60:	0005303a 	rdctl	r2,status
 800eb64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eb68:	e0fffd17 	ldw	r3,-12(fp)
 800eb6c:	00bfff84 	movi	r2,-2
 800eb70:	1884703a 	and	r2,r3,r2
 800eb74:	1001703a 	wrctl	status,r2
  
  return context;
 800eb78:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 800eb7c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 800eb80:	d0a73917 	ldw	r2,-25372(gp)
 800eb84:	10800044 	addi	r2,r2,1
 800eb88:	d0a73915 	stw	r2,-25372(gp)
 800eb8c:	e0bffb17 	ldw	r2,-20(fp)
 800eb90:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb94:	e0bfff17 	ldw	r2,-4(fp)
 800eb98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 800eb9c:	d0a72943 	ldbu	r2,-25435(gp)
 800eba0:	10803fcc 	andi	r2,r2,255
 800eba4:	10800058 	cmpnei	r2,r2,1
 800eba8:	10006a1e 	bne	r2,zero,800ed54 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 800ebac:	d0a72d03 	ldbu	r2,-25420(gp)
 800ebb0:	10803fcc 	andi	r2,r2,255
 800ebb4:	10c00060 	cmpeqi	r3,r2,1
 800ebb8:	1800061e 	bne	r3,zero,800ebd4 <OSTimeTick+0x8c>
 800ebbc:	10c000a0 	cmpeqi	r3,r2,2
 800ebc0:	1800061e 	bne	r3,zero,800ebdc <OSTimeTick+0x94>
 800ebc4:	10000a1e 	bne	r2,zero,800ebf0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 800ebc8:	00800044 	movi	r2,1
 800ebcc:	e0bffa05 	stb	r2,-24(fp)
                 break;
 800ebd0:	00000b06 	br	800ec00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 800ebd4:	e03ffa05 	stb	zero,-24(fp)
                 break;
 800ebd8:	00000906 	br	800ec00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 800ebdc:	00800044 	movi	r2,1
 800ebe0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 800ebe4:	00800044 	movi	r2,1
 800ebe8:	d0a72d05 	stb	r2,-25420(gp)
                 break;
 800ebec:	00000406 	br	800ec00 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 800ebf0:	00800044 	movi	r2,1
 800ebf4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 800ebf8:	d0272d05 	stb	zero,-25420(gp)
                 break;
 800ebfc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 800ec00:	e0bffa03 	ldbu	r2,-24(fp)
 800ec04:	10005226 	beq	r2,zero,800ed50 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 800ec08:	d0a72c17 	ldw	r2,-25424(gp)
 800ec0c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800ec10:	00004906 	br	800ed38 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ec14:	0005303a 	rdctl	r2,status
 800ec18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ec1c:	e0fffc17 	ldw	r3,-16(fp)
 800ec20:	00bfff84 	movi	r2,-2
 800ec24:	1884703a 	and	r2,r3,r2
 800ec28:	1001703a 	wrctl	status,r2
  
  return context;
 800ec2c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 800ec30:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 800ec34:	e0bff917 	ldw	r2,-28(fp)
 800ec38:	10800b8b 	ldhu	r2,46(r2)
 800ec3c:	10bfffcc 	andi	r2,r2,65535
 800ec40:	10003626 	beq	r2,zero,800ed1c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 800ec44:	e0bff917 	ldw	r2,-28(fp)
 800ec48:	10800b8b 	ldhu	r2,46(r2)
 800ec4c:	10bfffc4 	addi	r2,r2,-1
 800ec50:	1007883a 	mov	r3,r2
 800ec54:	e0bff917 	ldw	r2,-28(fp)
 800ec58:	10c00b8d 	sth	r3,46(r2)
 800ec5c:	e0bff917 	ldw	r2,-28(fp)
 800ec60:	10800b8b 	ldhu	r2,46(r2)
 800ec64:	10bfffcc 	andi	r2,r2,65535
 800ec68:	10002c1e 	bne	r2,zero,800ed1c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 800ec6c:	e0bff917 	ldw	r2,-28(fp)
 800ec70:	10800c03 	ldbu	r2,48(r2)
 800ec74:	10803fcc 	andi	r2,r2,255
 800ec78:	10800dcc 	andi	r2,r2,55
 800ec7c:	10000b26 	beq	r2,zero,800ecac <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 800ec80:	e0bff917 	ldw	r2,-28(fp)
 800ec84:	10c00c03 	ldbu	r3,48(r2)
 800ec88:	00bff204 	movi	r2,-56
 800ec8c:	1884703a 	and	r2,r3,r2
 800ec90:	1007883a 	mov	r3,r2
 800ec94:	e0bff917 	ldw	r2,-28(fp)
 800ec98:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 800ec9c:	e0bff917 	ldw	r2,-28(fp)
 800eca0:	00c00044 	movi	r3,1
 800eca4:	10c00c45 	stb	r3,49(r2)
 800eca8:	00000206 	br	800ecb4 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800ecac:	e0bff917 	ldw	r2,-28(fp)
 800ecb0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 800ecb4:	e0bff917 	ldw	r2,-28(fp)
 800ecb8:	10800c03 	ldbu	r2,48(r2)
 800ecbc:	10803fcc 	andi	r2,r2,255
 800ecc0:	1080020c 	andi	r2,r2,8
 800ecc4:	1000151e 	bne	r2,zero,800ed1c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 800ecc8:	e0bff917 	ldw	r2,-28(fp)
 800eccc:	10c00d83 	ldbu	r3,54(r2)
 800ecd0:	d0a73503 	ldbu	r2,-25388(gp)
 800ecd4:	1884b03a 	or	r2,r3,r2
 800ecd8:	d0a73505 	stb	r2,-25388(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800ecdc:	e0bff917 	ldw	r2,-28(fp)
 800ece0:	10800d03 	ldbu	r2,52(r2)
 800ece4:	10c03fcc 	andi	r3,r2,255
 800ece8:	e0bff917 	ldw	r2,-28(fp)
 800ecec:	10800d03 	ldbu	r2,52(r2)
 800ecf0:	11003fcc 	andi	r4,r2,255
 800ecf4:	d0a73544 	addi	r2,gp,-25387
 800ecf8:	2085883a 	add	r2,r4,r2
 800ecfc:	11000003 	ldbu	r4,0(r2)
 800ed00:	e0bff917 	ldw	r2,-28(fp)
 800ed04:	10800d43 	ldbu	r2,53(r2)
 800ed08:	2084b03a 	or	r2,r4,r2
 800ed0c:	1009883a 	mov	r4,r2
 800ed10:	d0a73544 	addi	r2,gp,-25387
 800ed14:	1885883a 	add	r2,r3,r2
 800ed18:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 800ed1c:	e0bff917 	ldw	r2,-28(fp)
 800ed20:	10800517 	ldw	r2,20(r2)
 800ed24:	e0bff915 	stw	r2,-28(fp)
 800ed28:	e0bffb17 	ldw	r2,-20(fp)
 800ed2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ed30:	e0bffe17 	ldw	r2,-8(fp)
 800ed34:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800ed38:	e0bff917 	ldw	r2,-28(fp)
 800ed3c:	10800c83 	ldbu	r2,50(r2)
 800ed40:	10803fcc 	andi	r2,r2,255
 800ed44:	10800518 	cmpnei	r2,r2,20
 800ed48:	103fb21e 	bne	r2,zero,800ec14 <__alt_data_end+0xf800ec14>
 800ed4c:	00000106 	br	800ed54 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 800ed50:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 800ed54:	e037883a 	mov	sp,fp
 800ed58:	dfc00117 	ldw	ra,4(sp)
 800ed5c:	df000017 	ldw	fp,0(sp)
 800ed60:	dec00204 	addi	sp,sp,8
 800ed64:	f800283a 	ret

0800ed68 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 800ed68:	deffff04 	addi	sp,sp,-4
 800ed6c:	df000015 	stw	fp,0(sp)
 800ed70:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 800ed74:	00804784 	movi	r2,286
}
 800ed78:	e037883a 	mov	sp,fp
 800ed7c:	df000017 	ldw	fp,0(sp)
 800ed80:	dec00104 	addi	sp,sp,4
 800ed84:	f800283a 	ret

0800ed88 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 800ed88:	deffff04 	addi	sp,sp,-4
 800ed8c:	df000015 	stw	fp,0(sp)
 800ed90:	d839883a 	mov	fp,sp
}
 800ed94:	0001883a 	nop
 800ed98:	e037883a 	mov	sp,fp
 800ed9c:	df000017 	ldw	fp,0(sp)
 800eda0:	dec00104 	addi	sp,sp,4
 800eda4:	f800283a 	ret

0800eda8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 800eda8:	defff804 	addi	sp,sp,-32
 800edac:	dfc00715 	stw	ra,28(sp)
 800edb0:	df000615 	stw	fp,24(sp)
 800edb4:	df000604 	addi	fp,sp,24
 800edb8:	e13ffc15 	stw	r4,-16(fp)
 800edbc:	e17ffd15 	stw	r5,-12(fp)
 800edc0:	3007883a 	mov	r3,r6
 800edc4:	3805883a 	mov	r2,r7
 800edc8:	e0fffe05 	stb	r3,-8(fp)
 800edcc:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 800edd0:	e0bffc17 	ldw	r2,-16(fp)
 800edd4:	10800283 	ldbu	r2,10(r2)
 800edd8:	10c03fcc 	andi	r3,r2,255
 800eddc:	008200b4 	movhi	r2,2050
 800ede0:	10a49404 	addi	r2,r2,-28080
 800ede4:	10c5883a 	add	r2,r2,r3
 800ede8:	10800003 	ldbu	r2,0(r2)
 800edec:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 800edf0:	e0bffa03 	ldbu	r2,-24(fp)
 800edf4:	e0fffc17 	ldw	r3,-16(fp)
 800edf8:	1885883a 	add	r2,r3,r2
 800edfc:	108002c4 	addi	r2,r2,11
 800ee00:	10800003 	ldbu	r2,0(r2)
 800ee04:	10c03fcc 	andi	r3,r2,255
 800ee08:	008200b4 	movhi	r2,2050
 800ee0c:	10a49404 	addi	r2,r2,-28080
 800ee10:	10c5883a 	add	r2,r2,r3
 800ee14:	10800003 	ldbu	r2,0(r2)
 800ee18:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 800ee1c:	e0bffa03 	ldbu	r2,-24(fp)
 800ee20:	100490fa 	slli	r2,r2,3
 800ee24:	1007883a 	mov	r3,r2
 800ee28:	e0bffa43 	ldbu	r2,-23(fp)
 800ee2c:	1885883a 	add	r2,r3,r2
 800ee30:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800ee34:	e0fffa83 	ldbu	r3,-22(fp)
 800ee38:	008200b4 	movhi	r2,2050
 800ee3c:	108f9c04 	addi	r2,r2,15984
 800ee40:	18c7883a 	add	r3,r3,r3
 800ee44:	18c7883a 	add	r3,r3,r3
 800ee48:	10c5883a 	add	r2,r2,r3
 800ee4c:	10800017 	ldw	r2,0(r2)
 800ee50:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 800ee54:	e0bffb17 	ldw	r2,-20(fp)
 800ee58:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800ee5c:	e0bffb17 	ldw	r2,-20(fp)
 800ee60:	e0fffd17 	ldw	r3,-12(fp)
 800ee64:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 800ee68:	e0bffb17 	ldw	r2,-20(fp)
 800ee6c:	10800c03 	ldbu	r2,48(r2)
 800ee70:	1007883a 	mov	r3,r2
 800ee74:	e0bffe03 	ldbu	r2,-8(fp)
 800ee78:	0084303a 	nor	r2,zero,r2
 800ee7c:	1884703a 	and	r2,r3,r2
 800ee80:	1007883a 	mov	r3,r2
 800ee84:	e0bffb17 	ldw	r2,-20(fp)
 800ee88:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800ee8c:	e0bffb17 	ldw	r2,-20(fp)
 800ee90:	e0ffff03 	ldbu	r3,-4(fp)
 800ee94:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800ee98:	e0bffb17 	ldw	r2,-20(fp)
 800ee9c:	10800c03 	ldbu	r2,48(r2)
 800eea0:	10803fcc 	andi	r2,r2,255
 800eea4:	1080020c 	andi	r2,r2,8
 800eea8:	1000111e 	bne	r2,zero,800eef0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 800eeac:	e0bffb17 	ldw	r2,-20(fp)
 800eeb0:	10c00d83 	ldbu	r3,54(r2)
 800eeb4:	d0a73503 	ldbu	r2,-25388(gp)
 800eeb8:	1884b03a 	or	r2,r3,r2
 800eebc:	d0a73505 	stb	r2,-25388(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 800eec0:	e0fffa03 	ldbu	r3,-24(fp)
 800eec4:	e13ffa03 	ldbu	r4,-24(fp)
 800eec8:	d0a73544 	addi	r2,gp,-25387
 800eecc:	2085883a 	add	r2,r4,r2
 800eed0:	11000003 	ldbu	r4,0(r2)
 800eed4:	e0bffb17 	ldw	r2,-20(fp)
 800eed8:	10800d43 	ldbu	r2,53(r2)
 800eedc:	2084b03a 	or	r2,r4,r2
 800eee0:	1009883a 	mov	r4,r2
 800eee4:	d0a73544 	addi	r2,gp,-25387
 800eee8:	1885883a 	add	r2,r3,r2
 800eeec:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 800eef0:	e17ffc17 	ldw	r5,-16(fp)
 800eef4:	e13ffb17 	ldw	r4,-20(fp)
 800eef8:	800f1a00 	call	800f1a0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 800eefc:	e0bffb17 	ldw	r2,-20(fp)
 800ef00:	10800817 	ldw	r2,32(r2)
 800ef04:	10000826 	beq	r2,zero,800ef28 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 800ef08:	e0bffb17 	ldw	r2,-20(fp)
 800ef0c:	10800817 	ldw	r2,32(r2)
 800ef10:	100b883a 	mov	r5,r2
 800ef14:	e13ffb17 	ldw	r4,-20(fp)
 800ef18:	800f2580 	call	800f258 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 800ef1c:	e0bffb17 	ldw	r2,-20(fp)
 800ef20:	e0fffc17 	ldw	r3,-16(fp)
 800ef24:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 800ef28:	e0bffa83 	ldbu	r2,-22(fp)
}
 800ef2c:	e037883a 	mov	sp,fp
 800ef30:	dfc00117 	ldw	ra,4(sp)
 800ef34:	df000017 	ldw	fp,0(sp)
 800ef38:	dec00204 	addi	sp,sp,8
 800ef3c:	f800283a 	ret

0800ef40 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 800ef40:	defffd04 	addi	sp,sp,-12
 800ef44:	df000215 	stw	fp,8(sp)
 800ef48:	df000204 	addi	fp,sp,8
 800ef4c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 800ef50:	d0a73817 	ldw	r2,-25376(gp)
 800ef54:	e0ffff17 	ldw	r3,-4(fp)
 800ef58:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 800ef5c:	d0a73817 	ldw	r2,-25376(gp)
 800ef60:	10800d03 	ldbu	r2,52(r2)
 800ef64:	10803fcc 	andi	r2,r2,255
 800ef68:	d0e73817 	ldw	r3,-25376(gp)
 800ef6c:	18c00d03 	ldbu	r3,52(r3)
 800ef70:	18c03fcc 	andi	r3,r3,255
 800ef74:	e13fff17 	ldw	r4,-4(fp)
 800ef78:	20c7883a 	add	r3,r4,r3
 800ef7c:	18c002c4 	addi	r3,r3,11
 800ef80:	19000003 	ldbu	r4,0(r3)
 800ef84:	d0e73817 	ldw	r3,-25376(gp)
 800ef88:	18c00d43 	ldbu	r3,53(r3)
 800ef8c:	20c6b03a 	or	r3,r4,r3
 800ef90:	1809883a 	mov	r4,r3
 800ef94:	e0ffff17 	ldw	r3,-4(fp)
 800ef98:	1885883a 	add	r2,r3,r2
 800ef9c:	108002c4 	addi	r2,r2,11
 800efa0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800efa4:	e0bfff17 	ldw	r2,-4(fp)
 800efa8:	10c00283 	ldbu	r3,10(r2)
 800efac:	d0a73817 	ldw	r2,-25376(gp)
 800efb0:	10800d83 	ldbu	r2,54(r2)
 800efb4:	1884b03a 	or	r2,r3,r2
 800efb8:	1007883a 	mov	r3,r2
 800efbc:	e0bfff17 	ldw	r2,-4(fp)
 800efc0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800efc4:	d0a73817 	ldw	r2,-25376(gp)
 800efc8:	10800d03 	ldbu	r2,52(r2)
 800efcc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 800efd0:	e0fffe03 	ldbu	r3,-8(fp)
 800efd4:	e13ffe03 	ldbu	r4,-8(fp)
 800efd8:	d0a73544 	addi	r2,gp,-25387
 800efdc:	2085883a 	add	r2,r4,r2
 800efe0:	10800003 	ldbu	r2,0(r2)
 800efe4:	1009883a 	mov	r4,r2
 800efe8:	d0a73817 	ldw	r2,-25376(gp)
 800efec:	10800d43 	ldbu	r2,53(r2)
 800eff0:	0084303a 	nor	r2,zero,r2
 800eff4:	2084703a 	and	r2,r4,r2
 800eff8:	1009883a 	mov	r4,r2
 800effc:	d0a73544 	addi	r2,gp,-25387
 800f000:	1885883a 	add	r2,r3,r2
 800f004:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 800f008:	e0fffe03 	ldbu	r3,-8(fp)
 800f00c:	d0a73544 	addi	r2,gp,-25387
 800f010:	1885883a 	add	r2,r3,r2
 800f014:	10800003 	ldbu	r2,0(r2)
 800f018:	10803fcc 	andi	r2,r2,255
 800f01c:	1000071e 	bne	r2,zero,800f03c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 800f020:	d0a73817 	ldw	r2,-25376(gp)
 800f024:	10800d83 	ldbu	r2,54(r2)
 800f028:	0084303a 	nor	r2,zero,r2
 800f02c:	1007883a 	mov	r3,r2
 800f030:	d0a73503 	ldbu	r2,-25388(gp)
 800f034:	1884703a 	and	r2,r3,r2
 800f038:	d0a73505 	stb	r2,-25388(gp)
    }
}
 800f03c:	0001883a 	nop
 800f040:	e037883a 	mov	sp,fp
 800f044:	df000017 	ldw	fp,0(sp)
 800f048:	dec00104 	addi	sp,sp,4
 800f04c:	f800283a 	ret

0800f050 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 800f050:	defffb04 	addi	sp,sp,-20
 800f054:	df000415 	stw	fp,16(sp)
 800f058:	df000404 	addi	fp,sp,16
 800f05c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 800f060:	d0a73817 	ldw	r2,-25376(gp)
 800f064:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 800f068:	d0a73817 	ldw	r2,-25376(gp)
 800f06c:	e0ffff17 	ldw	r3,-4(fp)
 800f070:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 800f074:	e0bfff17 	ldw	r2,-4(fp)
 800f078:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 800f07c:	e0bffc17 	ldw	r2,-16(fp)
 800f080:	10800017 	ldw	r2,0(r2)
 800f084:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 800f088:	00002006 	br	800f10c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 800f08c:	d0a73817 	ldw	r2,-25376(gp)
 800f090:	10800d03 	ldbu	r2,52(r2)
 800f094:	10803fcc 	andi	r2,r2,255
 800f098:	d0e73817 	ldw	r3,-25376(gp)
 800f09c:	18c00d03 	ldbu	r3,52(r3)
 800f0a0:	18c03fcc 	andi	r3,r3,255
 800f0a4:	e13ffd17 	ldw	r4,-12(fp)
 800f0a8:	20c7883a 	add	r3,r4,r3
 800f0ac:	18c002c4 	addi	r3,r3,11
 800f0b0:	19000003 	ldbu	r4,0(r3)
 800f0b4:	d0e73817 	ldw	r3,-25376(gp)
 800f0b8:	18c00d43 	ldbu	r3,53(r3)
 800f0bc:	20c6b03a 	or	r3,r4,r3
 800f0c0:	1809883a 	mov	r4,r3
 800f0c4:	e0fffd17 	ldw	r3,-12(fp)
 800f0c8:	1885883a 	add	r2,r3,r2
 800f0cc:	108002c4 	addi	r2,r2,11
 800f0d0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800f0d4:	e0bffd17 	ldw	r2,-12(fp)
 800f0d8:	10c00283 	ldbu	r3,10(r2)
 800f0dc:	d0a73817 	ldw	r2,-25376(gp)
 800f0e0:	10800d83 	ldbu	r2,54(r2)
 800f0e4:	1884b03a 	or	r2,r3,r2
 800f0e8:	1007883a 	mov	r3,r2
 800f0ec:	e0bffd17 	ldw	r2,-12(fp)
 800f0f0:	10c00285 	stb	r3,10(r2)
        pevents++;
 800f0f4:	e0bffc17 	ldw	r2,-16(fp)
 800f0f8:	10800104 	addi	r2,r2,4
 800f0fc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 800f100:	e0bffc17 	ldw	r2,-16(fp)
 800f104:	10800017 	ldw	r2,0(r2)
 800f108:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 800f10c:	e0bffd17 	ldw	r2,-12(fp)
 800f110:	103fde1e 	bne	r2,zero,800f08c <__alt_data_end+0xf800f08c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800f114:	d0a73817 	ldw	r2,-25376(gp)
 800f118:	10800d03 	ldbu	r2,52(r2)
 800f11c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 800f120:	e0fffe03 	ldbu	r3,-8(fp)
 800f124:	e13ffe03 	ldbu	r4,-8(fp)
 800f128:	d0a73544 	addi	r2,gp,-25387
 800f12c:	2085883a 	add	r2,r4,r2
 800f130:	10800003 	ldbu	r2,0(r2)
 800f134:	1009883a 	mov	r4,r2
 800f138:	d0a73817 	ldw	r2,-25376(gp)
 800f13c:	10800d43 	ldbu	r2,53(r2)
 800f140:	0084303a 	nor	r2,zero,r2
 800f144:	2084703a 	and	r2,r4,r2
 800f148:	1009883a 	mov	r4,r2
 800f14c:	d0a73544 	addi	r2,gp,-25387
 800f150:	1885883a 	add	r2,r3,r2
 800f154:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 800f158:	e0fffe03 	ldbu	r3,-8(fp)
 800f15c:	d0a73544 	addi	r2,gp,-25387
 800f160:	1885883a 	add	r2,r3,r2
 800f164:	10800003 	ldbu	r2,0(r2)
 800f168:	10803fcc 	andi	r2,r2,255
 800f16c:	1000071e 	bne	r2,zero,800f18c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 800f170:	d0a73817 	ldw	r2,-25376(gp)
 800f174:	10800d83 	ldbu	r2,54(r2)
 800f178:	0084303a 	nor	r2,zero,r2
 800f17c:	1007883a 	mov	r3,r2
 800f180:	d0a73503 	ldbu	r2,-25388(gp)
 800f184:	1884703a 	and	r2,r3,r2
 800f188:	d0a73505 	stb	r2,-25388(gp)
    }
}
 800f18c:	0001883a 	nop
 800f190:	e037883a 	mov	sp,fp
 800f194:	df000017 	ldw	fp,0(sp)
 800f198:	dec00104 	addi	sp,sp,4
 800f19c:	f800283a 	ret

0800f1a0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 800f1a0:	defffc04 	addi	sp,sp,-16
 800f1a4:	df000315 	stw	fp,12(sp)
 800f1a8:	df000304 	addi	fp,sp,12
 800f1ac:	e13ffe15 	stw	r4,-8(fp)
 800f1b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 800f1b4:	e0bffe17 	ldw	r2,-8(fp)
 800f1b8:	10800d03 	ldbu	r2,52(r2)
 800f1bc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 800f1c0:	e0bffd03 	ldbu	r2,-12(fp)
 800f1c4:	e0fffd03 	ldbu	r3,-12(fp)
 800f1c8:	e13fff17 	ldw	r4,-4(fp)
 800f1cc:	20c7883a 	add	r3,r4,r3
 800f1d0:	18c002c4 	addi	r3,r3,11
 800f1d4:	18c00003 	ldbu	r3,0(r3)
 800f1d8:	1809883a 	mov	r4,r3
 800f1dc:	e0fffe17 	ldw	r3,-8(fp)
 800f1e0:	18c00d43 	ldbu	r3,53(r3)
 800f1e4:	00c6303a 	nor	r3,zero,r3
 800f1e8:	20c6703a 	and	r3,r4,r3
 800f1ec:	1809883a 	mov	r4,r3
 800f1f0:	e0ffff17 	ldw	r3,-4(fp)
 800f1f4:	1885883a 	add	r2,r3,r2
 800f1f8:	108002c4 	addi	r2,r2,11
 800f1fc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 800f200:	e0bffd03 	ldbu	r2,-12(fp)
 800f204:	e0ffff17 	ldw	r3,-4(fp)
 800f208:	1885883a 	add	r2,r3,r2
 800f20c:	108002c4 	addi	r2,r2,11
 800f210:	10800003 	ldbu	r2,0(r2)
 800f214:	10803fcc 	andi	r2,r2,255
 800f218:	10000a1e 	bne	r2,zero,800f244 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 800f21c:	e0bfff17 	ldw	r2,-4(fp)
 800f220:	10800283 	ldbu	r2,10(r2)
 800f224:	1007883a 	mov	r3,r2
 800f228:	e0bffe17 	ldw	r2,-8(fp)
 800f22c:	10800d83 	ldbu	r2,54(r2)
 800f230:	0084303a 	nor	r2,zero,r2
 800f234:	1884703a 	and	r2,r3,r2
 800f238:	1007883a 	mov	r3,r2
 800f23c:	e0bfff17 	ldw	r2,-4(fp)
 800f240:	10c00285 	stb	r3,10(r2)
    }
}
 800f244:	0001883a 	nop
 800f248:	e037883a 	mov	sp,fp
 800f24c:	df000017 	ldw	fp,0(sp)
 800f250:	dec00104 	addi	sp,sp,4
 800f254:	f800283a 	ret

0800f258 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 800f258:	defffa04 	addi	sp,sp,-24
 800f25c:	df000515 	stw	fp,20(sp)
 800f260:	df000504 	addi	fp,sp,20
 800f264:	e13ffe15 	stw	r4,-8(fp)
 800f268:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 800f26c:	e0bffe17 	ldw	r2,-8(fp)
 800f270:	10800d03 	ldbu	r2,52(r2)
 800f274:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 800f278:	e0bffe17 	ldw	r2,-8(fp)
 800f27c:	10800d83 	ldbu	r2,54(r2)
 800f280:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 800f284:	e0bffe17 	ldw	r2,-8(fp)
 800f288:	10800d43 	ldbu	r2,53(r2)
 800f28c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 800f290:	e0bfff17 	ldw	r2,-4(fp)
 800f294:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 800f298:	e0bffb17 	ldw	r2,-20(fp)
 800f29c:	10800017 	ldw	r2,0(r2)
 800f2a0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800f2a4:	00002506 	br	800f33c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 800f2a8:	e0bffd03 	ldbu	r2,-12(fp)
 800f2ac:	e0fffd03 	ldbu	r3,-12(fp)
 800f2b0:	e13ffc17 	ldw	r4,-16(fp)
 800f2b4:	20c7883a 	add	r3,r4,r3
 800f2b8:	18c002c4 	addi	r3,r3,11
 800f2bc:	18c00003 	ldbu	r3,0(r3)
 800f2c0:	1809883a 	mov	r4,r3
 800f2c4:	e0fffd83 	ldbu	r3,-10(fp)
 800f2c8:	00c6303a 	nor	r3,zero,r3
 800f2cc:	20c6703a 	and	r3,r4,r3
 800f2d0:	1809883a 	mov	r4,r3
 800f2d4:	e0fffc17 	ldw	r3,-16(fp)
 800f2d8:	1885883a 	add	r2,r3,r2
 800f2dc:	108002c4 	addi	r2,r2,11
 800f2e0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 800f2e4:	e0bffd03 	ldbu	r2,-12(fp)
 800f2e8:	e0fffc17 	ldw	r3,-16(fp)
 800f2ec:	1885883a 	add	r2,r3,r2
 800f2f0:	108002c4 	addi	r2,r2,11
 800f2f4:	10800003 	ldbu	r2,0(r2)
 800f2f8:	10803fcc 	andi	r2,r2,255
 800f2fc:	1000091e 	bne	r2,zero,800f324 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 800f300:	e0bffc17 	ldw	r2,-16(fp)
 800f304:	10800283 	ldbu	r2,10(r2)
 800f308:	1007883a 	mov	r3,r2
 800f30c:	e0bffd43 	ldbu	r2,-11(fp)
 800f310:	0084303a 	nor	r2,zero,r2
 800f314:	1884703a 	and	r2,r3,r2
 800f318:	1007883a 	mov	r3,r2
 800f31c:	e0bffc17 	ldw	r2,-16(fp)
 800f320:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 800f324:	e0bffb17 	ldw	r2,-20(fp)
 800f328:	10800104 	addi	r2,r2,4
 800f32c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 800f330:	e0bffb17 	ldw	r2,-20(fp)
 800f334:	10800017 	ldw	r2,0(r2)
 800f338:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800f33c:	e0bffc17 	ldw	r2,-16(fp)
 800f340:	103fd91e 	bne	r2,zero,800f2a8 <__alt_data_end+0xf800f2a8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 800f344:	0001883a 	nop
 800f348:	e037883a 	mov	sp,fp
 800f34c:	df000017 	ldw	fp,0(sp)
 800f350:	dec00104 	addi	sp,sp,4
 800f354:	f800283a 	ret

0800f358 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800f358:	defffc04 	addi	sp,sp,-16
 800f35c:	df000315 	stw	fp,12(sp)
 800f360:	df000304 	addi	fp,sp,12
 800f364:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 800f368:	e0bfff17 	ldw	r2,-4(fp)
 800f36c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 800f370:	e0bfff17 	ldw	r2,-4(fp)
 800f374:	108002c4 	addi	r2,r2,11
 800f378:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 800f37c:	e03ffe05 	stb	zero,-8(fp)
 800f380:	00000706 	br	800f3a0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 800f384:	e0bffd17 	ldw	r2,-12(fp)
 800f388:	10c00044 	addi	r3,r2,1
 800f38c:	e0fffd15 	stw	r3,-12(fp)
 800f390:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 800f394:	e0bffe03 	ldbu	r2,-8(fp)
 800f398:	10800044 	addi	r2,r2,1
 800f39c:	e0bffe05 	stb	r2,-8(fp)
 800f3a0:	e0bffe03 	ldbu	r2,-8(fp)
 800f3a4:	108000f0 	cmpltui	r2,r2,3
 800f3a8:	103ff61e 	bne	r2,zero,800f384 <__alt_data_end+0xf800f384>
        *ptbl++ = 0;
    }
}
 800f3ac:	0001883a 	nop
 800f3b0:	e037883a 	mov	sp,fp
 800f3b4:	df000017 	ldw	fp,0(sp)
 800f3b8:	dec00104 	addi	sp,sp,4
 800f3bc:	f800283a 	ret

0800f3c0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 800f3c0:	defffb04 	addi	sp,sp,-20
 800f3c4:	dfc00415 	stw	ra,16(sp)
 800f3c8:	df000315 	stw	fp,12(sp)
 800f3cc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800f3d0:	0142d004 	movi	r5,2880
 800f3d4:	010200b4 	movhi	r4,2050
 800f3d8:	210b8804 	addi	r4,r4,11808
 800f3dc:	800f7380 	call	800f738 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 800f3e0:	008200b4 	movhi	r2,2050
 800f3e4:	108b8804 	addi	r2,r2,11808
 800f3e8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 800f3ec:	008200b4 	movhi	r2,2050
 800f3f0:	108b9404 	addi	r2,r2,11856
 800f3f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 800f3f8:	e03ffd0d 	sth	zero,-12(fp)
 800f3fc:	00001306 	br	800f44c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800f400:	e0bffe17 	ldw	r2,-8(fp)
 800f404:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 800f408:	e0bffe17 	ldw	r2,-8(fp)
 800f40c:	e0ffff17 	ldw	r3,-4(fp)
 800f410:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 800f414:	e0bffe17 	ldw	r2,-8(fp)
 800f418:	00c00fc4 	movi	r3,63
 800f41c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 800f420:	e0bffe17 	ldw	r2,-8(fp)
 800f424:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 800f428:	e0bffe17 	ldw	r2,-8(fp)
 800f42c:	10800c04 	addi	r2,r2,48
 800f430:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 800f434:	e0bfff17 	ldw	r2,-4(fp)
 800f438:	10800c04 	addi	r2,r2,48
 800f43c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 800f440:	e0bffd0b 	ldhu	r2,-12(fp)
 800f444:	10800044 	addi	r2,r2,1
 800f448:	e0bffd0d 	sth	r2,-12(fp)
 800f44c:	e0bffd0b 	ldhu	r2,-12(fp)
 800f450:	10800ef0 	cmpltui	r2,r2,59
 800f454:	103fea1e 	bne	r2,zero,800f400 <__alt_data_end+0xf800f400>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800f458:	e0bffe17 	ldw	r2,-8(fp)
 800f45c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800f460:	e0bffe17 	ldw	r2,-8(fp)
 800f464:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 800f468:	e0bffe17 	ldw	r2,-8(fp)
 800f46c:	00c00fc4 	movi	r3,63
 800f470:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 800f474:	e0bffe17 	ldw	r2,-8(fp)
 800f478:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800f47c:	008200b4 	movhi	r2,2050
 800f480:	108b8804 	addi	r2,r2,11808
 800f484:	d0a73615 	stw	r2,-25384(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 800f488:	0001883a 	nop
 800f48c:	e037883a 	mov	sp,fp
 800f490:	dfc00117 	ldw	ra,4(sp)
 800f494:	df000017 	ldw	fp,0(sp)
 800f498:	dec00204 	addi	sp,sp,8
 800f49c:	f800283a 	ret

0800f4a0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 800f4a0:	deffff04 	addi	sp,sp,-4
 800f4a4:	df000015 	stw	fp,0(sp)
 800f4a8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 800f4ac:	d0273915 	stw	zero,-25372(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 800f4b0:	d0273705 	stb	zero,-25380(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 800f4b4:	d0272905 	stb	zero,-25436(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 800f4b8:	d0273145 	stb	zero,-25403(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 800f4bc:	d0272945 	stb	zero,-25435(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 800f4c0:	d0272e15 	stw	zero,-25416(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 800f4c4:	d0272a15 	stw	zero,-25432(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 800f4c8:	d0273c15 	stw	zero,-25360(gp)
    OSIdleCtrMax  = 0L;
 800f4cc:	d0272f15 	stw	zero,-25412(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 800f4d0:	d0273b05 	stb	zero,-25364(gp)
#endif
}
 800f4d4:	0001883a 	nop
 800f4d8:	e037883a 	mov	sp,fp
 800f4dc:	df000017 	ldw	fp,0(sp)
 800f4e0:	dec00104 	addi	sp,sp,4
 800f4e4:	f800283a 	ret

0800f4e8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 800f4e8:	defffd04 	addi	sp,sp,-12
 800f4ec:	df000215 	stw	fp,8(sp)
 800f4f0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 800f4f4:	d0273505 	stb	zero,-25388(gp)
    prdytbl       = &OSRdyTbl[0];
 800f4f8:	d0a73544 	addi	r2,gp,-25387
 800f4fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 800f500:	e03ffe05 	stb	zero,-8(fp)
 800f504:	00000706 	br	800f524 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 800f508:	e0bfff17 	ldw	r2,-4(fp)
 800f50c:	10c00044 	addi	r3,r2,1
 800f510:	e0ffff15 	stw	r3,-4(fp)
 800f514:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 800f518:	e0bffe03 	ldbu	r2,-8(fp)
 800f51c:	10800044 	addi	r2,r2,1
 800f520:	e0bffe05 	stb	r2,-8(fp)
 800f524:	e0bffe03 	ldbu	r2,-8(fp)
 800f528:	108000f0 	cmpltui	r2,r2,3
 800f52c:	103ff61e 	bne	r2,zero,800f508 <__alt_data_end+0xf800f508>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 800f530:	d0272b45 	stb	zero,-25427(gp)
    OSPrioHighRdy = 0;
 800f534:	d0272b05 	stb	zero,-25428(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 800f538:	d0273315 	stw	zero,-25396(gp)
    OSTCBCur      = (OS_TCB *)0;
 800f53c:	d0273815 	stw	zero,-25376(gp)
}
 800f540:	0001883a 	nop
 800f544:	e037883a 	mov	sp,fp
 800f548:	df000017 	ldw	fp,0(sp)
 800f54c:	dec00104 	addi	sp,sp,4
 800f550:	f800283a 	ret

0800f554 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 800f554:	defff804 	addi	sp,sp,-32
 800f558:	dfc00715 	stw	ra,28(sp)
 800f55c:	df000615 	stw	fp,24(sp)
 800f560:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 800f564:	008000c4 	movi	r2,3
 800f568:	d8800415 	stw	r2,16(sp)
 800f56c:	d8000315 	stw	zero,12(sp)
 800f570:	00808004 	movi	r2,512
 800f574:	d8800215 	stw	r2,8(sp)
 800f578:	008200b4 	movhi	r2,2050
 800f57c:	10898804 	addi	r2,r2,9760
 800f580:	d8800115 	stw	r2,4(sp)
 800f584:	00bfffd4 	movui	r2,65535
 800f588:	d8800015 	stw	r2,0(sp)
 800f58c:	01c00504 	movi	r7,20
 800f590:	018200b4 	movhi	r6,2050
 800f594:	318b8704 	addi	r6,r6,11804
 800f598:	000b883a 	mov	r5,zero
 800f59c:	01020074 	movhi	r4,2049
 800f5a0:	213e8004 	addi	r4,r4,-1536
 800f5a4:	80151d80 	call	80151d8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 800f5a8:	e1bfff04 	addi	r6,fp,-4
 800f5ac:	014200b4 	movhi	r5,2050
 800f5b0:	2964d404 	addi	r5,r5,-27824
 800f5b4:	01000504 	movi	r4,20
 800f5b8:	80159e80 	call	80159e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 800f5bc:	0001883a 	nop
 800f5c0:	e037883a 	mov	sp,fp
 800f5c4:	dfc00117 	ldw	ra,4(sp)
 800f5c8:	df000017 	ldw	fp,0(sp)
 800f5cc:	dec00204 	addi	sp,sp,8
 800f5d0:	f800283a 	ret

0800f5d4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 800f5d4:	defff804 	addi	sp,sp,-32
 800f5d8:	dfc00715 	stw	ra,28(sp)
 800f5dc:	df000615 	stw	fp,24(sp)
 800f5e0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 800f5e4:	008000c4 	movi	r2,3
 800f5e8:	d8800415 	stw	r2,16(sp)
 800f5ec:	d8000315 	stw	zero,12(sp)
 800f5f0:	00808004 	movi	r2,512
 800f5f4:	d8800215 	stw	r2,8(sp)
 800f5f8:	008200b4 	movhi	r2,2050
 800f5fc:	10871004 	addi	r2,r2,7232
 800f600:	d8800115 	stw	r2,4(sp)
 800f604:	00bfff94 	movui	r2,65534
 800f608:	d8800015 	stw	r2,0(sp)
 800f60c:	01c004c4 	movi	r7,19
 800f610:	018200b4 	movhi	r6,2050
 800f614:	31890f04 	addi	r6,r6,9276
 800f618:	000b883a 	mov	r5,zero
 800f61c:	01020074 	movhi	r4,2049
 800f620:	213e9704 	addi	r4,r4,-1444
 800f624:	80151d80 	call	80151d8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 800f628:	e1bfff04 	addi	r6,fp,-4
 800f62c:	014200b4 	movhi	r5,2050
 800f630:	2964d804 	addi	r5,r5,-27808
 800f634:	010004c4 	movi	r4,19
 800f638:	80159e80 	call	80159e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 800f63c:	0001883a 	nop
 800f640:	e037883a 	mov	sp,fp
 800f644:	dfc00117 	ldw	ra,4(sp)
 800f648:	df000017 	ldw	fp,0(sp)
 800f64c:	dec00204 	addi	sp,sp,8
 800f650:	f800283a 	ret

0800f654 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800f654:	defffb04 	addi	sp,sp,-20
 800f658:	dfc00415 	stw	ra,16(sp)
 800f65c:	df000315 	stw	fp,12(sp)
 800f660:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 800f664:	01414404 	movi	r5,1296
 800f668:	010200b4 	movhi	r4,2050
 800f66c:	210e5804 	addi	r4,r4,14688
 800f670:	800f7380 	call	800f738 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800f674:	01401504 	movi	r5,84
 800f678:	010200b4 	movhi	r4,2050
 800f67c:	210f9c04 	addi	r4,r4,15984
 800f680:	800f7380 	call	800f738 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 800f684:	008200b4 	movhi	r2,2050
 800f688:	108e5804 	addi	r2,r2,14688
 800f68c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 800f690:	008200b4 	movhi	r2,2050
 800f694:	108e7304 	addi	r2,r2,14796
 800f698:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 800f69c:	e03ffd05 	stb	zero,-12(fp)
 800f6a0:	00001106 	br	800f6e8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 800f6a4:	e0bffe17 	ldw	r2,-8(fp)
 800f6a8:	e0ffff17 	ldw	r3,-4(fp)
 800f6ac:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 800f6b0:	e0bffe17 	ldw	r2,-8(fp)
 800f6b4:	00c00fc4 	movi	r3,63
 800f6b8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 800f6bc:	e0bffe17 	ldw	r2,-8(fp)
 800f6c0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 800f6c4:	e0bffe17 	ldw	r2,-8(fp)
 800f6c8:	10801b04 	addi	r2,r2,108
 800f6cc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 800f6d0:	e0bfff17 	ldw	r2,-4(fp)
 800f6d4:	10801b04 	addi	r2,r2,108
 800f6d8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 800f6dc:	e0bffd03 	ldbu	r2,-12(fp)
 800f6e0:	10800044 	addi	r2,r2,1
 800f6e4:	e0bffd05 	stb	r2,-12(fp)
 800f6e8:	e0bffd03 	ldbu	r2,-12(fp)
 800f6ec:	108002f0 	cmpltui	r2,r2,11
 800f6f0:	103fec1e 	bne	r2,zero,800f6a4 <__alt_data_end+0xf800f6a4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 800f6f4:	e0bffe17 	ldw	r2,-8(fp)
 800f6f8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 800f6fc:	e0bffe17 	ldw	r2,-8(fp)
 800f700:	00c00fc4 	movi	r3,63
 800f704:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 800f708:	e0bffe17 	ldw	r2,-8(fp)
 800f70c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 800f710:	d0272c15 	stw	zero,-25424(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 800f714:	008200b4 	movhi	r2,2050
 800f718:	108e5804 	addi	r2,r2,14688
 800f71c:	d0a73015 	stw	r2,-25408(gp)
}
 800f720:	0001883a 	nop
 800f724:	e037883a 	mov	sp,fp
 800f728:	dfc00117 	ldw	ra,4(sp)
 800f72c:	df000017 	ldw	fp,0(sp)
 800f730:	dec00204 	addi	sp,sp,8
 800f734:	f800283a 	ret

0800f738 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 800f738:	defffd04 	addi	sp,sp,-12
 800f73c:	df000215 	stw	fp,8(sp)
 800f740:	df000204 	addi	fp,sp,8
 800f744:	e13ffe15 	stw	r4,-8(fp)
 800f748:	2805883a 	mov	r2,r5
 800f74c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 800f750:	00000706 	br	800f770 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 800f754:	e0bffe17 	ldw	r2,-8(fp)
 800f758:	10c00044 	addi	r3,r2,1
 800f75c:	e0fffe15 	stw	r3,-8(fp)
 800f760:	10000005 	stb	zero,0(r2)
        size--;
 800f764:	e0bfff0b 	ldhu	r2,-4(fp)
 800f768:	10bfffc4 	addi	r2,r2,-1
 800f76c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 800f770:	e0bfff0b 	ldhu	r2,-4(fp)
 800f774:	103ff71e 	bne	r2,zero,800f754 <__alt_data_end+0xf800f754>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 800f778:	0001883a 	nop
 800f77c:	e037883a 	mov	sp,fp
 800f780:	df000017 	ldw	fp,0(sp)
 800f784:	dec00104 	addi	sp,sp,4
 800f788:	f800283a 	ret

0800f78c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 800f78c:	defffc04 	addi	sp,sp,-16
 800f790:	df000315 	stw	fp,12(sp)
 800f794:	df000304 	addi	fp,sp,12
 800f798:	e13ffd15 	stw	r4,-12(fp)
 800f79c:	e17ffe15 	stw	r5,-8(fp)
 800f7a0:	3005883a 	mov	r2,r6
 800f7a4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 800f7a8:	00000b06 	br	800f7d8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 800f7ac:	e0bffd17 	ldw	r2,-12(fp)
 800f7b0:	10c00044 	addi	r3,r2,1
 800f7b4:	e0fffd15 	stw	r3,-12(fp)
 800f7b8:	e0fffe17 	ldw	r3,-8(fp)
 800f7bc:	19000044 	addi	r4,r3,1
 800f7c0:	e13ffe15 	stw	r4,-8(fp)
 800f7c4:	18c00003 	ldbu	r3,0(r3)
 800f7c8:	10c00005 	stb	r3,0(r2)
        size--;
 800f7cc:	e0bfff0b 	ldhu	r2,-4(fp)
 800f7d0:	10bfffc4 	addi	r2,r2,-1
 800f7d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 800f7d8:	e0bfff0b 	ldhu	r2,-4(fp)
 800f7dc:	103ff31e 	bne	r2,zero,800f7ac <__alt_data_end+0xf800f7ac>
        *pdest++ = *psrc++;
        size--;
    }
}
 800f7e0:	0001883a 	nop
 800f7e4:	e037883a 	mov	sp,fp
 800f7e8:	df000017 	ldw	fp,0(sp)
 800f7ec:	dec00104 	addi	sp,sp,4
 800f7f0:	f800283a 	ret

0800f7f4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 800f7f4:	defffb04 	addi	sp,sp,-20
 800f7f8:	dfc00415 	stw	ra,16(sp)
 800f7fc:	df000315 	stw	fp,12(sp)
 800f800:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 800f804:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f808:	0005303a 	rdctl	r2,status
 800f80c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f810:	e0ffff17 	ldw	r3,-4(fp)
 800f814:	00bfff84 	movi	r2,-2
 800f818:	1884703a 	and	r2,r3,r2
 800f81c:	1001703a 	wrctl	status,r2
  
  return context;
 800f820:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 800f824:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 800f828:	d0a73703 	ldbu	r2,-25380(gp)
 800f82c:	10803fcc 	andi	r2,r2,255
 800f830:	10001a1e 	bne	r2,zero,800f89c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 800f834:	d0a72903 	ldbu	r2,-25436(gp)
 800f838:	10803fcc 	andi	r2,r2,255
 800f83c:	1000171e 	bne	r2,zero,800f89c <OS_Sched+0xa8>
            OS_SchedNew();
 800f840:	800f8c40 	call	800f8c4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800f844:	d0e72b03 	ldbu	r3,-25428(gp)
 800f848:	d0a72b43 	ldbu	r2,-25427(gp)
 800f84c:	18c03fcc 	andi	r3,r3,255
 800f850:	10803fcc 	andi	r2,r2,255
 800f854:	18801126 	beq	r3,r2,800f89c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800f858:	d0a72b03 	ldbu	r2,-25428(gp)
 800f85c:	10c03fcc 	andi	r3,r2,255
 800f860:	008200b4 	movhi	r2,2050
 800f864:	108f9c04 	addi	r2,r2,15984
 800f868:	18c7883a 	add	r3,r3,r3
 800f86c:	18c7883a 	add	r3,r3,r3
 800f870:	10c5883a 	add	r2,r2,r3
 800f874:	10800017 	ldw	r2,0(r2)
 800f878:	d0a73315 	stw	r2,-25396(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800f87c:	d0a73317 	ldw	r2,-25396(gp)
 800f880:	10c00e17 	ldw	r3,56(r2)
 800f884:	18c00044 	addi	r3,r3,1
 800f888:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 800f88c:	d0a72e17 	ldw	r2,-25416(gp)
 800f890:	10800044 	addi	r2,r2,1
 800f894:	d0a72e15 	stw	r2,-25416(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 800f898:	801855c0 	call	801855c <OSCtxSw>
 800f89c:	e0bffd17 	ldw	r2,-12(fp)
 800f8a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f8a4:	e0bffe17 	ldw	r2,-8(fp)
 800f8a8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 800f8ac:	0001883a 	nop
 800f8b0:	e037883a 	mov	sp,fp
 800f8b4:	dfc00117 	ldw	ra,4(sp)
 800f8b8:	df000017 	ldw	fp,0(sp)
 800f8bc:	dec00204 	addi	sp,sp,8
 800f8c0:	f800283a 	ret

0800f8c4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800f8c4:	defffe04 	addi	sp,sp,-8
 800f8c8:	df000115 	stw	fp,4(sp)
 800f8cc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 800f8d0:	d0a73503 	ldbu	r2,-25388(gp)
 800f8d4:	10c03fcc 	andi	r3,r2,255
 800f8d8:	008200b4 	movhi	r2,2050
 800f8dc:	10a49404 	addi	r2,r2,-28080
 800f8e0:	10c5883a 	add	r2,r2,r3
 800f8e4:	10800003 	ldbu	r2,0(r2)
 800f8e8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 800f8ec:	e0bfff03 	ldbu	r2,-4(fp)
 800f8f0:	100490fa 	slli	r2,r2,3
 800f8f4:	1009883a 	mov	r4,r2
 800f8f8:	e0ffff03 	ldbu	r3,-4(fp)
 800f8fc:	d0a73544 	addi	r2,gp,-25387
 800f900:	1885883a 	add	r2,r3,r2
 800f904:	10800003 	ldbu	r2,0(r2)
 800f908:	10c03fcc 	andi	r3,r2,255
 800f90c:	008200b4 	movhi	r2,2050
 800f910:	10a49404 	addi	r2,r2,-28080
 800f914:	10c5883a 	add	r2,r2,r3
 800f918:	10800003 	ldbu	r2,0(r2)
 800f91c:	2085883a 	add	r2,r4,r2
 800f920:	d0a72b05 	stb	r2,-25428(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 800f924:	0001883a 	nop
 800f928:	e037883a 	mov	sp,fp
 800f92c:	df000017 	ldw	fp,0(sp)
 800f930:	dec00104 	addi	sp,sp,4
 800f934:	f800283a 	ret

0800f938 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 800f938:	defffc04 	addi	sp,sp,-16
 800f93c:	df000315 	stw	fp,12(sp)
 800f940:	df000304 	addi	fp,sp,12
 800f944:	e13ffe15 	stw	r4,-8(fp)
 800f948:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 800f94c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 800f950:	00000b06 	br	800f980 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 800f954:	e0bffe17 	ldw	r2,-8(fp)
 800f958:	10c00044 	addi	r3,r2,1
 800f95c:	e0fffe15 	stw	r3,-8(fp)
 800f960:	e0ffff17 	ldw	r3,-4(fp)
 800f964:	19000044 	addi	r4,r3,1
 800f968:	e13fff15 	stw	r4,-4(fp)
 800f96c:	18c00003 	ldbu	r3,0(r3)
 800f970:	10c00005 	stb	r3,0(r2)
        len++;
 800f974:	e0bffd03 	ldbu	r2,-12(fp)
 800f978:	10800044 	addi	r2,r2,1
 800f97c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 800f980:	e0bfff17 	ldw	r2,-4(fp)
 800f984:	10800003 	ldbu	r2,0(r2)
 800f988:	10803fcc 	andi	r2,r2,255
 800f98c:	103ff11e 	bne	r2,zero,800f954 <__alt_data_end+0xf800f954>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 800f990:	e0bffe17 	ldw	r2,-8(fp)
 800f994:	10000005 	stb	zero,0(r2)
    return (len);
 800f998:	e0bffd03 	ldbu	r2,-12(fp)
}
 800f99c:	e037883a 	mov	sp,fp
 800f9a0:	df000017 	ldw	fp,0(sp)
 800f9a4:	dec00104 	addi	sp,sp,4
 800f9a8:	f800283a 	ret

0800f9ac <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 800f9ac:	defffd04 	addi	sp,sp,-12
 800f9b0:	df000215 	stw	fp,8(sp)
 800f9b4:	df000204 	addi	fp,sp,8
 800f9b8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 800f9bc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 800f9c0:	00000606 	br	800f9dc <OS_StrLen+0x30>
        psrc++;
 800f9c4:	e0bfff17 	ldw	r2,-4(fp)
 800f9c8:	10800044 	addi	r2,r2,1
 800f9cc:	e0bfff15 	stw	r2,-4(fp)
        len++;
 800f9d0:	e0bffe03 	ldbu	r2,-8(fp)
 800f9d4:	10800044 	addi	r2,r2,1
 800f9d8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 800f9dc:	e0bfff17 	ldw	r2,-4(fp)
 800f9e0:	10800003 	ldbu	r2,0(r2)
 800f9e4:	10803fcc 	andi	r2,r2,255
 800f9e8:	103ff61e 	bne	r2,zero,800f9c4 <__alt_data_end+0xf800f9c4>
        psrc++;
        len++;
    }
    return (len);
 800f9ec:	e0bffe03 	ldbu	r2,-8(fp)
}
 800f9f0:	e037883a 	mov	sp,fp
 800f9f4:	df000017 	ldw	fp,0(sp)
 800f9f8:	dec00104 	addi	sp,sp,4
 800f9fc:	f800283a 	ret

0800fa00 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 800fa00:	defffa04 	addi	sp,sp,-24
 800fa04:	dfc00515 	stw	ra,20(sp)
 800fa08:	df000415 	stw	fp,16(sp)
 800fa0c:	df000404 	addi	fp,sp,16
 800fa10:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800fa14:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fa18:	0005303a 	rdctl	r2,status
 800fa1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fa20:	e0fffd17 	ldw	r3,-12(fp)
 800fa24:	00bfff84 	movi	r2,-2
 800fa28:	1884703a 	and	r2,r3,r2
 800fa2c:	1001703a 	wrctl	status,r2
  
  return context;
 800fa30:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 800fa34:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 800fa38:	d0a72a17 	ldw	r2,-25432(gp)
 800fa3c:	10800044 	addi	r2,r2,1
 800fa40:	d0a72a15 	stw	r2,-25432(gp)
 800fa44:	e0bffc17 	ldw	r2,-16(fp)
 800fa48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fa4c:	e0bffe17 	ldw	r2,-8(fp)
 800fa50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800fa54:	80188700 	call	8018870 <OSTaskIdleHook>
    }
 800fa58:	003fef06 	br	800fa18 <__alt_data_end+0xf800fa18>

0800fa5c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 800fa5c:	defffa04 	addi	sp,sp,-24
 800fa60:	dfc00515 	stw	ra,20(sp)
 800fa64:	df000415 	stw	fp,16(sp)
 800fa68:	df000404 	addi	fp,sp,16
 800fa6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800fa70:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800fa74:	00000206 	br	800fa80 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 800fa78:	01003204 	movi	r4,200
 800fa7c:	80162a80 	call	80162a8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800fa80:	d0a73b03 	ldbu	r2,-25364(gp)
 800fa84:	10803fcc 	andi	r2,r2,255
 800fa88:	103ffb26 	beq	r2,zero,800fa78 <__alt_data_end+0xf800fa78>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 800fa8c:	d0a72f17 	ldw	r2,-25412(gp)
 800fa90:	01401904 	movi	r5,100
 800fa94:	1009883a 	mov	r4,r2
 800fa98:	800a8a40 	call	800a8a4 <__udivsi3>
 800fa9c:	d0a72f15 	stw	r2,-25412(gp)
    if (OSIdleCtrMax == 0L) {
 800faa0:	d0a72f17 	ldw	r2,-25412(gp)
 800faa4:	1000031e 	bne	r2,zero,800fab4 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 800faa8:	d0273105 	stb	zero,-25404(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 800faac:	01003fc4 	movi	r4,255
 800fab0:	8015f300 	call	8015f30 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fab4:	0005303a 	rdctl	r2,status
 800fab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fabc:	e0fffd17 	ldw	r3,-12(fp)
 800fac0:	00bfff84 	movi	r2,-2
 800fac4:	1884703a 	and	r2,r3,r2
 800fac8:	1001703a 	wrctl	status,r2
  
  return context;
 800facc:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 800fad0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 800fad4:	d0a72a17 	ldw	r2,-25432(gp)
 800fad8:	d0a73c15 	stw	r2,-25360(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 800fadc:	d0272a15 	stw	zero,-25432(gp)
 800fae0:	e0bffc17 	ldw	r2,-16(fp)
 800fae4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fae8:	e0bffe17 	ldw	r2,-8(fp)
 800faec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 800faf0:	d0a73c17 	ldw	r2,-25360(gp)
 800faf4:	d0e72f17 	ldw	r3,-25412(gp)
 800faf8:	180b883a 	mov	r5,r3
 800fafc:	1009883a 	mov	r4,r2
 800fb00:	800a8a40 	call	800a8a4 <__udivsi3>
 800fb04:	1007883a 	mov	r3,r2
 800fb08:	00801904 	movi	r2,100
 800fb0c:	10c5c83a 	sub	r2,r2,r3
 800fb10:	d0a73105 	stb	r2,-25404(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 800fb14:	80187f00 	call	80187f0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800fb18:	800fb280 	call	800fb28 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 800fb1c:	01001904 	movi	r4,100
 800fb20:	80162a80 	call	80162a8 <OSTimeDly>
    }
 800fb24:	003fe306 	br	800fab4 <__alt_data_end+0xf800fab4>

0800fb28 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 800fb28:	defffa04 	addi	sp,sp,-24
 800fb2c:	dfc00515 	stw	ra,20(sp)
 800fb30:	df000415 	stw	fp,16(sp)
 800fb34:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800fb38:	e03ffc05 	stb	zero,-16(fp)
 800fb3c:	00002406 	br	800fbd0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 800fb40:	e0bffc03 	ldbu	r2,-16(fp)
 800fb44:	e0fffe04 	addi	r3,fp,-8
 800fb48:	180b883a 	mov	r5,r3
 800fb4c:	1009883a 	mov	r4,r2
 800fb50:	8015d700 	call	8015d70 <OSTaskStkChk>
 800fb54:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 800fb58:	e0bffc43 	ldbu	r2,-15(fp)
 800fb5c:	1000191e 	bne	r2,zero,800fbc4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 800fb60:	e0fffc03 	ldbu	r3,-16(fp)
 800fb64:	008200b4 	movhi	r2,2050
 800fb68:	108f9c04 	addi	r2,r2,15984
 800fb6c:	18c7883a 	add	r3,r3,r3
 800fb70:	18c7883a 	add	r3,r3,r3
 800fb74:	10c5883a 	add	r2,r2,r3
 800fb78:	10800017 	ldw	r2,0(r2)
 800fb7c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 800fb80:	e0bffd17 	ldw	r2,-12(fp)
 800fb84:	10000f26 	beq	r2,zero,800fbc4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800fb88:	e0bffd17 	ldw	r2,-12(fp)
 800fb8c:	10800060 	cmpeqi	r2,r2,1
 800fb90:	10000c1e 	bne	r2,zero,800fbc4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 800fb94:	e0bffd17 	ldw	r2,-12(fp)
 800fb98:	10c00217 	ldw	r3,8(r2)
 800fb9c:	e0bffd17 	ldw	r2,-12(fp)
 800fba0:	10800317 	ldw	r2,12(r2)
 800fba4:	1085883a 	add	r2,r2,r2
 800fba8:	1085883a 	add	r2,r2,r2
 800fbac:	1887883a 	add	r3,r3,r2
 800fbb0:	e0bffd17 	ldw	r2,-12(fp)
 800fbb4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 800fbb8:	e0ffff17 	ldw	r3,-4(fp)
 800fbbc:	e0bffd17 	ldw	r2,-12(fp)
 800fbc0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800fbc4:	e0bffc03 	ldbu	r2,-16(fp)
 800fbc8:	10800044 	addi	r2,r2,1
 800fbcc:	e0bffc05 	stb	r2,-16(fp)
 800fbd0:	e0bffc03 	ldbu	r2,-16(fp)
 800fbd4:	10800570 	cmpltui	r2,r2,21
 800fbd8:	103fd91e 	bne	r2,zero,800fb40 <__alt_data_end+0xf800fb40>
#endif
                }
            }
        }
    }
}
 800fbdc:	0001883a 	nop
 800fbe0:	e037883a 	mov	sp,fp
 800fbe4:	dfc00117 	ldw	ra,4(sp)
 800fbe8:	df000017 	ldw	fp,0(sp)
 800fbec:	dec00204 	addi	sp,sp,8
 800fbf0:	f800283a 	ret

0800fbf4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 800fbf4:	defff204 	addi	sp,sp,-56
 800fbf8:	dfc00d15 	stw	ra,52(sp)
 800fbfc:	df000c15 	stw	fp,48(sp)
 800fc00:	df000c04 	addi	fp,sp,48
 800fc04:	e17ffc15 	stw	r5,-16(fp)
 800fc08:	e1bffd15 	stw	r6,-12(fp)
 800fc0c:	3807883a 	mov	r3,r7
 800fc10:	e0800417 	ldw	r2,16(fp)
 800fc14:	e13ffb05 	stb	r4,-20(fp)
 800fc18:	e0fffe0d 	sth	r3,-8(fp)
 800fc1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800fc20:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fc24:	0005303a 	rdctl	r2,status
 800fc28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fc2c:	e0fffa17 	ldw	r3,-24(fp)
 800fc30:	00bfff84 	movi	r2,-2
 800fc34:	1884703a 	and	r2,r3,r2
 800fc38:	1001703a 	wrctl	status,r2
  
  return context;
 800fc3c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 800fc40:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800fc44:	d0a73017 	ldw	r2,-25408(gp)
 800fc48:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 800fc4c:	e0bff617 	ldw	r2,-40(fp)
 800fc50:	10009326 	beq	r2,zero,800fea0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800fc54:	e0bff617 	ldw	r2,-40(fp)
 800fc58:	10800517 	ldw	r2,20(r2)
 800fc5c:	d0a73015 	stw	r2,-25408(gp)
 800fc60:	e0bff417 	ldw	r2,-48(fp)
 800fc64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fc68:	e0bff817 	ldw	r2,-32(fp)
 800fc6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800fc70:	e0bff617 	ldw	r2,-40(fp)
 800fc74:	e0fffc17 	ldw	r3,-16(fp)
 800fc78:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800fc7c:	e0bff617 	ldw	r2,-40(fp)
 800fc80:	e0fffb03 	ldbu	r3,-20(fp)
 800fc84:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800fc88:	e0bff617 	ldw	r2,-40(fp)
 800fc8c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800fc90:	e0bff617 	ldw	r2,-40(fp)
 800fc94:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 800fc98:	e0bff617 	ldw	r2,-40(fp)
 800fc9c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800fca0:	e0bff617 	ldw	r2,-40(fp)
 800fca4:	e0c00317 	ldw	r3,12(fp)
 800fca8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 800fcac:	e0bff617 	ldw	r2,-40(fp)
 800fcb0:	e0c00217 	ldw	r3,8(fp)
 800fcb4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800fcb8:	e0bff617 	ldw	r2,-40(fp)
 800fcbc:	e0fffd17 	ldw	r3,-12(fp)
 800fcc0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800fcc4:	e0bff617 	ldw	r2,-40(fp)
 800fcc8:	e0ffff0b 	ldhu	r3,-4(fp)
 800fccc:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 800fcd0:	e0bff617 	ldw	r2,-40(fp)
 800fcd4:	e0fffe0b 	ldhu	r3,-8(fp)
 800fcd8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800fcdc:	e0bff617 	ldw	r2,-40(fp)
 800fce0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 800fce4:	e0bffb03 	ldbu	r2,-20(fp)
 800fce8:	1004d0fa 	srli	r2,r2,3
 800fcec:	1007883a 	mov	r3,r2
 800fcf0:	e0bff617 	ldw	r2,-40(fp)
 800fcf4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 800fcf8:	e0bffb03 	ldbu	r2,-20(fp)
 800fcfc:	108001cc 	andi	r2,r2,7
 800fd00:	1007883a 	mov	r3,r2
 800fd04:	e0bff617 	ldw	r2,-40(fp)
 800fd08:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 800fd0c:	e0bff617 	ldw	r2,-40(fp)
 800fd10:	10800d03 	ldbu	r2,52(r2)
 800fd14:	10803fcc 	andi	r2,r2,255
 800fd18:	00c00044 	movi	r3,1
 800fd1c:	1884983a 	sll	r2,r3,r2
 800fd20:	1007883a 	mov	r3,r2
 800fd24:	e0bff617 	ldw	r2,-40(fp)
 800fd28:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 800fd2c:	e0bff617 	ldw	r2,-40(fp)
 800fd30:	10800cc3 	ldbu	r2,51(r2)
 800fd34:	10803fcc 	andi	r2,r2,255
 800fd38:	00c00044 	movi	r3,1
 800fd3c:	1884983a 	sll	r2,r3,r2
 800fd40:	1007883a 	mov	r3,r2
 800fd44:	e0bff617 	ldw	r2,-40(fp)
 800fd48:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 800fd4c:	e0bff617 	ldw	r2,-40(fp)
 800fd50:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800fd54:	e0bff617 	ldw	r2,-40(fp)
 800fd58:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 800fd5c:	e0bff617 	ldw	r2,-40(fp)
 800fd60:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 800fd64:	e0bff617 	ldw	r2,-40(fp)
 800fd68:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 800fd6c:	e0bff617 	ldw	r2,-40(fp)
 800fd70:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 800fd74:	e0bff617 	ldw	r2,-40(fp)
 800fd78:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 800fd7c:	e0bff617 	ldw	r2,-40(fp)
 800fd80:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 800fd84:	e0bff617 	ldw	r2,-40(fp)
 800fd88:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 800fd8c:	e0bff617 	ldw	r2,-40(fp)
 800fd90:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 800fd94:	e0bff617 	ldw	r2,-40(fp)
 800fd98:	00c00fc4 	movi	r3,63
 800fd9c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 800fda0:	e0bff617 	ldw	r2,-40(fp)
 800fda4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 800fda8:	e13ff617 	ldw	r4,-40(fp)
 800fdac:	80188900 	call	8018890 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800fdb0:	e13ff617 	ldw	r4,-40(fp)
 800fdb4:	80187880 	call	8018788 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fdb8:	0005303a 	rdctl	r2,status
 800fdbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fdc0:	e0fff517 	ldw	r3,-44(fp)
 800fdc4:	00bfff84 	movi	r2,-2
 800fdc8:	1884703a 	and	r2,r3,r2
 800fdcc:	1001703a 	wrctl	status,r2
  
  return context;
 800fdd0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 800fdd4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 800fdd8:	e0fffb03 	ldbu	r3,-20(fp)
 800fddc:	008200b4 	movhi	r2,2050
 800fde0:	108f9c04 	addi	r2,r2,15984
 800fde4:	18c7883a 	add	r3,r3,r3
 800fde8:	18c7883a 	add	r3,r3,r3
 800fdec:	10c5883a 	add	r2,r2,r3
 800fdf0:	e0fff617 	ldw	r3,-40(fp)
 800fdf4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 800fdf8:	d0e72c17 	ldw	r3,-25424(gp)
 800fdfc:	e0bff617 	ldw	r2,-40(fp)
 800fe00:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 800fe04:	e0bff617 	ldw	r2,-40(fp)
 800fe08:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 800fe0c:	d0a72c17 	ldw	r2,-25424(gp)
 800fe10:	10000326 	beq	r2,zero,800fe20 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 800fe14:	d0a72c17 	ldw	r2,-25424(gp)
 800fe18:	e0fff617 	ldw	r3,-40(fp)
 800fe1c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 800fe20:	e0bff617 	ldw	r2,-40(fp)
 800fe24:	d0a72c15 	stw	r2,-25424(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800fe28:	e0bff617 	ldw	r2,-40(fp)
 800fe2c:	10c00d83 	ldbu	r3,54(r2)
 800fe30:	d0a73503 	ldbu	r2,-25388(gp)
 800fe34:	1884b03a 	or	r2,r3,r2
 800fe38:	d0a73505 	stb	r2,-25388(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800fe3c:	e0bff617 	ldw	r2,-40(fp)
 800fe40:	10800d03 	ldbu	r2,52(r2)
 800fe44:	10c03fcc 	andi	r3,r2,255
 800fe48:	e0bff617 	ldw	r2,-40(fp)
 800fe4c:	10800d03 	ldbu	r2,52(r2)
 800fe50:	11003fcc 	andi	r4,r2,255
 800fe54:	d0a73544 	addi	r2,gp,-25387
 800fe58:	2085883a 	add	r2,r4,r2
 800fe5c:	11000003 	ldbu	r4,0(r2)
 800fe60:	e0bff617 	ldw	r2,-40(fp)
 800fe64:	10800d43 	ldbu	r2,53(r2)
 800fe68:	2084b03a 	or	r2,r4,r2
 800fe6c:	1009883a 	mov	r4,r2
 800fe70:	d0a73544 	addi	r2,gp,-25387
 800fe74:	1885883a 	add	r2,r3,r2
 800fe78:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800fe7c:	d0a73143 	ldbu	r2,-25403(gp)
 800fe80:	10800044 	addi	r2,r2,1
 800fe84:	d0a73145 	stb	r2,-25403(gp)
 800fe88:	e0bff417 	ldw	r2,-48(fp)
 800fe8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fe90:	e0bff717 	ldw	r2,-36(fp)
 800fe94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 800fe98:	0005883a 	mov	r2,zero
 800fe9c:	00000506 	br	800feb4 <OS_TCBInit+0x2c0>
 800fea0:	e0bff417 	ldw	r2,-48(fp)
 800fea4:	e0bff915 	stw	r2,-28(fp)
 800fea8:	e0bff917 	ldw	r2,-28(fp)
 800feac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 800feb0:	00801084 	movi	r2,66
}
 800feb4:	e037883a 	mov	sp,fp
 800feb8:	dfc00117 	ldw	ra,4(sp)
 800febc:	df000017 	ldw	fp,0(sp)
 800fec0:	dec00204 	addi	sp,sp,8
 800fec4:	f800283a 	ret

0800fec8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 800fec8:	defffe04 	addi	sp,sp,-8
 800fecc:	df000115 	stw	fp,4(sp)
 800fed0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 800fed4:	d0a01004 	addi	r2,gp,-32704
 800fed8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 800fedc:	d0a01104 	addi	r2,gp,-32700
 800fee0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 800fee4:	d0a01284 	addi	r2,gp,-32694
 800fee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 800feec:	d0a01304 	addi	r2,gp,-32692
 800fef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 800fef4:	d0a01204 	addi	r2,gp,-32696
 800fef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 800fefc:	d0a01384 	addi	r2,gp,-32690
 800ff00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 800ff04:	d0a01404 	addi	r2,gp,-32688
 800ff08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 800ff0c:	d0a01484 	addi	r2,gp,-32686
 800ff10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 800ff14:	d0a01504 	addi	r2,gp,-32684
 800ff18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 800ff1c:	d0a01584 	addi	r2,gp,-32682
 800ff20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 800ff24:	d0a01604 	addi	r2,gp,-32680
 800ff28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 800ff2c:	d0a01684 	addi	r2,gp,-32678
 800ff30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 800ff34:	d0a01704 	addi	r2,gp,-32676
 800ff38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 800ff3c:	d0a01784 	addi	r2,gp,-32674
 800ff40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 800ff44:	d0a01804 	addi	r2,gp,-32672
 800ff48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 800ff4c:	d0a01884 	addi	r2,gp,-32670
 800ff50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 800ff54:	d0a01904 	addi	r2,gp,-32668
 800ff58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 800ff5c:	d0a01984 	addi	r2,gp,-32666
 800ff60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 800ff64:	d0a01a04 	addi	r2,gp,-32664
 800ff68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 800ff6c:	d0a01a84 	addi	r2,gp,-32662
 800ff70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 800ff74:	d0a01b04 	addi	r2,gp,-32660
 800ff78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 800ff7c:	d0a01b84 	addi	r2,gp,-32658
 800ff80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 800ff84:	d0a01c04 	addi	r2,gp,-32656
 800ff88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 800ff8c:	d0a01c84 	addi	r2,gp,-32654
 800ff90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 800ff94:	d0a01d04 	addi	r2,gp,-32652
 800ff98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 800ff9c:	d0a01d84 	addi	r2,gp,-32650
 800ffa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 800ffa4:	d0a01e04 	addi	r2,gp,-32648
 800ffa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 800ffac:	d0a01e84 	addi	r2,gp,-32646
 800ffb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 800ffb4:	d0a01f04 	addi	r2,gp,-32644
 800ffb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 800ffbc:	d0a01f84 	addi	r2,gp,-32642
 800ffc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 800ffc4:	d0a02004 	addi	r2,gp,-32640
 800ffc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 800ffcc:	d0a02084 	addi	r2,gp,-32638
 800ffd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 800ffd4:	d0a02104 	addi	r2,gp,-32636
 800ffd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 800ffdc:	d0a02184 	addi	r2,gp,-32634
 800ffe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 800ffe4:	d0a02204 	addi	r2,gp,-32632
 800ffe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 800ffec:	d0a02284 	addi	r2,gp,-32630
 800fff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 800fff4:	d0a02304 	addi	r2,gp,-32628
 800fff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 800fffc:	d0a02384 	addi	r2,gp,-32626
 8010000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 8010004:	d0a02404 	addi	r2,gp,-32624
 8010008:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 801000c:	d0a02484 	addi	r2,gp,-32622
 8010010:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 8010014:	d0a02504 	addi	r2,gp,-32620
 8010018:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 801001c:	d0a02584 	addi	r2,gp,-32618
 8010020:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 8010024:	d0a02604 	addi	r2,gp,-32616
 8010028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 801002c:	d0a02684 	addi	r2,gp,-32614
 8010030:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 8010034:	d0a02704 	addi	r2,gp,-32612
 8010038:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 801003c:	d0a02c04 	addi	r2,gp,-32592
 8010040:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8010044:	0001883a 	nop
 8010048:	e037883a 	mov	sp,fp
 801004c:	df000017 	ldw	fp,0(sp)
 8010050:	dec00104 	addi	sp,sp,4
 8010054:	f800283a 	ret

08010058 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 8010058:	defff204 	addi	sp,sp,-56
 801005c:	df000d15 	stw	fp,52(sp)
 8010060:	df000d04 	addi	fp,sp,52
 8010064:	e13ffc15 	stw	r4,-16(fp)
 8010068:	2807883a 	mov	r3,r5
 801006c:	3005883a 	mov	r2,r6
 8010070:	e1ffff15 	stw	r7,-4(fp)
 8010074:	e0fffd0d 	sth	r3,-12(fp)
 8010078:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 801007c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8010080:	e0bfff17 	ldw	r2,-4(fp)
 8010084:	1000021e 	bne	r2,zero,8010090 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 8010088:	0005883a 	mov	r2,zero
 801008c:	0000b006 	br	8010350 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8010090:	e0bffc17 	ldw	r2,-16(fp)
 8010094:	1000051e 	bne	r2,zero,80100ac <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010098:	e0bfff17 	ldw	r2,-4(fp)
 801009c:	00c01b84 	movi	r3,110
 80100a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80100a4:	0005883a 	mov	r2,zero
 80100a8:	0000a906 	br	8010350 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 80100ac:	e0bffc17 	ldw	r2,-16(fp)
 80100b0:	10800003 	ldbu	r2,0(r2)
 80100b4:	10803fcc 	andi	r2,r2,255
 80100b8:	10800160 	cmpeqi	r2,r2,5
 80100bc:	1000051e 	bne	r2,zero,80100d4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 80100c0:	e0bfff17 	ldw	r2,-4(fp)
 80100c4:	00c00044 	movi	r3,1
 80100c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80100cc:	0005883a 	mov	r2,zero
 80100d0:	00009f06 	br	8010350 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 80100d4:	e0fffe03 	ldbu	r3,-8(fp)
 80100d8:	00bfe004 	movi	r2,-128
 80100dc:	1884703a 	and	r2,r3,r2
 80100e0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 80100e4:	e0bff503 	ldbu	r2,-44(fp)
 80100e8:	10000626 	beq	r2,zero,8010104 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 80100ec:	e0bffe03 	ldbu	r2,-8(fp)
 80100f0:	10801fcc 	andi	r2,r2,127
 80100f4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 80100f8:	00800044 	movi	r2,1
 80100fc:	e0bff385 	stb	r2,-50(fp)
 8010100:	00000106 	br	8010108 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 8010104:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 8010108:	e0bfff17 	ldw	r2,-4(fp)
 801010c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010110:	0005303a 	rdctl	r2,status
 8010114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010118:	e0fffb17 	ldw	r3,-20(fp)
 801011c:	00bfff84 	movi	r2,-2
 8010120:	1884703a 	and	r2,r3,r2
 8010124:	1001703a 	wrctl	status,r2
  
  return context;
 8010128:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 801012c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 8010130:	e0bffe03 	ldbu	r2,-8(fp)
 8010134:	10c00060 	cmpeqi	r3,r2,1
 8010138:	18005f1e 	bne	r3,zero,80102b8 <OSFlagAccept+0x260>
 801013c:	10c00088 	cmpgei	r3,r2,2
 8010140:	1800021e 	bne	r3,zero,801014c <OSFlagAccept+0xf4>
 8010144:	10003f26 	beq	r2,zero,8010244 <OSFlagAccept+0x1ec>
 8010148:	00007706 	br	8010328 <OSFlagAccept+0x2d0>
 801014c:	10c000a0 	cmpeqi	r3,r2,2
 8010150:	1800031e 	bne	r3,zero,8010160 <OSFlagAccept+0x108>
 8010154:	108000e0 	cmpeqi	r2,r2,3
 8010158:	10001e1e 	bne	r2,zero,80101d4 <OSFlagAccept+0x17c>
 801015c:	00007206 	br	8010328 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 8010160:	e0bffc17 	ldw	r2,-16(fp)
 8010164:	10c0020b 	ldhu	r3,8(r2)
 8010168:	e0bffd0b 	ldhu	r2,-12(fp)
 801016c:	1884703a 	and	r2,r3,r2
 8010170:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010174:	e0fff30b 	ldhu	r3,-52(fp)
 8010178:	e0bffd0b 	ldhu	r2,-12(fp)
 801017c:	18800d1e 	bne	r3,r2,80101b4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010180:	e0bff383 	ldbu	r2,-50(fp)
 8010184:	10800058 	cmpnei	r2,r2,1
 8010188:	10000d1e 	bne	r2,zero,80101c0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 801018c:	e0bffc17 	ldw	r2,-16(fp)
 8010190:	1080020b 	ldhu	r2,8(r2)
 8010194:	1007883a 	mov	r3,r2
 8010198:	e0bff30b 	ldhu	r2,-52(fp)
 801019c:	0084303a 	nor	r2,zero,r2
 80101a0:	1884703a 	and	r2,r3,r2
 80101a4:	1007883a 	mov	r3,r2
 80101a8:	e0bffc17 	ldw	r2,-16(fp)
 80101ac:	10c0020d 	sth	r3,8(r2)
 80101b0:	00000306 	br	80101c0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80101b4:	e0bfff17 	ldw	r2,-4(fp)
 80101b8:	00c01c04 	movi	r3,112
 80101bc:	10c00005 	stb	r3,0(r2)
 80101c0:	e0bff417 	ldw	r2,-48(fp)
 80101c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80101c8:	e0bff617 	ldw	r2,-40(fp)
 80101cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 80101d0:	00005e06 	br	801034c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 80101d4:	e0bffc17 	ldw	r2,-16(fp)
 80101d8:	10c0020b 	ldhu	r3,8(r2)
 80101dc:	e0bffd0b 	ldhu	r2,-12(fp)
 80101e0:	1884703a 	and	r2,r3,r2
 80101e4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 80101e8:	e0bff30b 	ldhu	r2,-52(fp)
 80101ec:	10000d26 	beq	r2,zero,8010224 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80101f0:	e0bff383 	ldbu	r2,-50(fp)
 80101f4:	10800058 	cmpnei	r2,r2,1
 80101f8:	10000d1e 	bne	r2,zero,8010230 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 80101fc:	e0bffc17 	ldw	r2,-16(fp)
 8010200:	1080020b 	ldhu	r2,8(r2)
 8010204:	1007883a 	mov	r3,r2
 8010208:	e0bff30b 	ldhu	r2,-52(fp)
 801020c:	0084303a 	nor	r2,zero,r2
 8010210:	1884703a 	and	r2,r3,r2
 8010214:	1007883a 	mov	r3,r2
 8010218:	e0bffc17 	ldw	r2,-16(fp)
 801021c:	10c0020d 	sth	r3,8(r2)
 8010220:	00000306 	br	8010230 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8010224:	e0bfff17 	ldw	r2,-4(fp)
 8010228:	00c01c04 	movi	r3,112
 801022c:	10c00005 	stb	r3,0(r2)
 8010230:	e0bff417 	ldw	r2,-48(fp)
 8010234:	e0bff715 	stw	r2,-36(fp)
 8010238:	e0bff717 	ldw	r2,-36(fp)
 801023c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 8010240:	00004206 	br	801034c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8010244:	e0bffc17 	ldw	r2,-16(fp)
 8010248:	1080020b 	ldhu	r2,8(r2)
 801024c:	0084303a 	nor	r2,zero,r2
 8010250:	1007883a 	mov	r3,r2
 8010254:	e0bffd0b 	ldhu	r2,-12(fp)
 8010258:	1884703a 	and	r2,r3,r2
 801025c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010260:	e0fff30b 	ldhu	r3,-52(fp)
 8010264:	e0bffd0b 	ldhu	r2,-12(fp)
 8010268:	18800b1e 	bne	r3,r2,8010298 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 801026c:	e0bff383 	ldbu	r2,-50(fp)
 8010270:	10800058 	cmpnei	r2,r2,1
 8010274:	10000b1e 	bne	r2,zero,80102a4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8010278:	e0bffc17 	ldw	r2,-16(fp)
 801027c:	10c0020b 	ldhu	r3,8(r2)
 8010280:	e0bff30b 	ldhu	r2,-52(fp)
 8010284:	1884b03a 	or	r2,r3,r2
 8010288:	1007883a 	mov	r3,r2
 801028c:	e0bffc17 	ldw	r2,-16(fp)
 8010290:	10c0020d 	sth	r3,8(r2)
 8010294:	00000306 	br	80102a4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8010298:	e0bfff17 	ldw	r2,-4(fp)
 801029c:	00c01c04 	movi	r3,112
 80102a0:	10c00005 	stb	r3,0(r2)
 80102a4:	e0bff417 	ldw	r2,-48(fp)
 80102a8:	e0bff815 	stw	r2,-32(fp)
 80102ac:	e0bff817 	ldw	r2,-32(fp)
 80102b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 80102b4:	00002506 	br	801034c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 80102b8:	e0bffc17 	ldw	r2,-16(fp)
 80102bc:	1080020b 	ldhu	r2,8(r2)
 80102c0:	0084303a 	nor	r2,zero,r2
 80102c4:	1007883a 	mov	r3,r2
 80102c8:	e0bffd0b 	ldhu	r2,-12(fp)
 80102cc:	1884703a 	and	r2,r3,r2
 80102d0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 80102d4:	e0bff30b 	ldhu	r2,-52(fp)
 80102d8:	10000b26 	beq	r2,zero,8010308 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80102dc:	e0bff383 	ldbu	r2,-50(fp)
 80102e0:	10800058 	cmpnei	r2,r2,1
 80102e4:	10000b1e 	bne	r2,zero,8010314 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 80102e8:	e0bffc17 	ldw	r2,-16(fp)
 80102ec:	10c0020b 	ldhu	r3,8(r2)
 80102f0:	e0bff30b 	ldhu	r2,-52(fp)
 80102f4:	1884b03a 	or	r2,r3,r2
 80102f8:	1007883a 	mov	r3,r2
 80102fc:	e0bffc17 	ldw	r2,-16(fp)
 8010300:	10c0020d 	sth	r3,8(r2)
 8010304:	00000306 	br	8010314 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8010308:	e0bfff17 	ldw	r2,-4(fp)
 801030c:	00c01c04 	movi	r3,112
 8010310:	10c00005 	stb	r3,0(r2)
 8010314:	e0bff417 	ldw	r2,-48(fp)
 8010318:	e0bff915 	stw	r2,-28(fp)
 801031c:	e0bff917 	ldw	r2,-28(fp)
 8010320:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 8010324:	00000906 	br	801034c <OSFlagAccept+0x2f4>
 8010328:	e0bff417 	ldw	r2,-48(fp)
 801032c:	e0bffa15 	stw	r2,-24(fp)
 8010330:	e0bffa17 	ldw	r2,-24(fp)
 8010334:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8010338:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 801033c:	e0bfff17 	ldw	r2,-4(fp)
 8010340:	00c01bc4 	movi	r3,111
 8010344:	10c00005 	stb	r3,0(r2)
             break;
 8010348:	0001883a 	nop
    }
    return (flags_rdy);
 801034c:	e0bff30b 	ldhu	r2,-52(fp)
}
 8010350:	e037883a 	mov	sp,fp
 8010354:	df000017 	ldw	fp,0(sp)
 8010358:	dec00104 	addi	sp,sp,4
 801035c:	f800283a 	ret

08010360 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 8010360:	defff804 	addi	sp,sp,-32
 8010364:	df000715 	stw	fp,28(sp)
 8010368:	df000704 	addi	fp,sp,28
 801036c:	2005883a 	mov	r2,r4
 8010370:	e17fff15 	stw	r5,-4(fp)
 8010374:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 8010378:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 801037c:	e0bfff17 	ldw	r2,-4(fp)
 8010380:	1000021e 	bne	r2,zero,801038c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 8010384:	0005883a 	mov	r2,zero
 8010388:	00003306 	br	8010458 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 801038c:	d0a73703 	ldbu	r2,-25380(gp)
 8010390:	10803fcc 	andi	r2,r2,255
 8010394:	10000526 	beq	r2,zero,80103ac <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 8010398:	e0bfff17 	ldw	r2,-4(fp)
 801039c:	00c00404 	movi	r3,16
 80103a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 80103a4:	0005883a 	mov	r2,zero
 80103a8:	00002b06 	br	8010458 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80103ac:	0005303a 	rdctl	r2,status
 80103b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80103b4:	e0fffd17 	ldw	r3,-12(fp)
 80103b8:	00bfff84 	movi	r2,-2
 80103bc:	1884703a 	and	r2,r3,r2
 80103c0:	1001703a 	wrctl	status,r2
  
  return context;
 80103c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80103c8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 80103cc:	d0a73a17 	ldw	r2,-25368(gp)
 80103d0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 80103d4:	e0bffb17 	ldw	r2,-20(fp)
 80103d8:	10001726 	beq	r2,zero,8010438 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 80103dc:	d0a73a17 	ldw	r2,-25368(gp)
 80103e0:	10800117 	ldw	r2,4(r2)
 80103e4:	d0a73a15 	stw	r2,-25368(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 80103e8:	e0bffb17 	ldw	r2,-20(fp)
 80103ec:	00c00144 	movi	r3,5
 80103f0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 80103f4:	e0bffb17 	ldw	r2,-20(fp)
 80103f8:	e0fffe0b 	ldhu	r3,-8(fp)
 80103fc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 8010400:	e0bffb17 	ldw	r2,-20(fp)
 8010404:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 8010408:	e0bffb17 	ldw	r2,-20(fp)
 801040c:	00c00fc4 	movi	r3,63
 8010410:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8010414:	e0bffb17 	ldw	r2,-20(fp)
 8010418:	100002c5 	stb	zero,11(r2)
 801041c:	e0bff917 	ldw	r2,-28(fp)
 8010420:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010424:	e0bffa17 	ldw	r2,-24(fp)
 8010428:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 801042c:	e0bfff17 	ldw	r2,-4(fp)
 8010430:	10000005 	stb	zero,0(r2)
 8010434:	00000706 	br	8010454 <OSFlagCreate+0xf4>
 8010438:	e0bff917 	ldw	r2,-28(fp)
 801043c:	e0bffc15 	stw	r2,-16(fp)
 8010440:	e0bffc17 	ldw	r2,-16(fp)
 8010444:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 8010448:	e0bfff17 	ldw	r2,-4(fp)
 801044c:	00c01c84 	movi	r3,114
 8010450:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 8010454:	e0bffb17 	ldw	r2,-20(fp)
}
 8010458:	e037883a 	mov	sp,fp
 801045c:	df000017 	ldw	fp,0(sp)
 8010460:	dec00104 	addi	sp,sp,4
 8010464:	f800283a 	ret

08010468 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 8010468:	defff204 	addi	sp,sp,-56
 801046c:	dfc00d15 	stw	ra,52(sp)
 8010470:	df000c15 	stw	fp,48(sp)
 8010474:	df000c04 	addi	fp,sp,48
 8010478:	e13ffd15 	stw	r4,-12(fp)
 801047c:	2805883a 	mov	r2,r5
 8010480:	e1bfff15 	stw	r6,-4(fp)
 8010484:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8010488:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 801048c:	e0bfff17 	ldw	r2,-4(fp)
 8010490:	1000021e 	bne	r2,zero,801049c <OSFlagDel+0x34>
        return (pgrp);
 8010494:	e0bffd17 	ldw	r2,-12(fp)
 8010498:	00008006 	br	801069c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 801049c:	e0bffd17 	ldw	r2,-12(fp)
 80104a0:	1000051e 	bne	r2,zero,80104b8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80104a4:	e0bfff17 	ldw	r2,-4(fp)
 80104a8:	00c01b84 	movi	r3,110
 80104ac:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80104b0:	e0bffd17 	ldw	r2,-12(fp)
 80104b4:	00007906 	br	801069c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80104b8:	d0a73703 	ldbu	r2,-25380(gp)
 80104bc:	10803fcc 	andi	r2,r2,255
 80104c0:	10000526 	beq	r2,zero,80104d8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 80104c4:	e0bfff17 	ldw	r2,-4(fp)
 80104c8:	00c003c4 	movi	r3,15
 80104cc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80104d0:	e0bffd17 	ldw	r2,-12(fp)
 80104d4:	00007106 	br	801069c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 80104d8:	e0bffd17 	ldw	r2,-12(fp)
 80104dc:	10800003 	ldbu	r2,0(r2)
 80104e0:	10803fcc 	andi	r2,r2,255
 80104e4:	10800160 	cmpeqi	r2,r2,5
 80104e8:	1000051e 	bne	r2,zero,8010500 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 80104ec:	e0bfff17 	ldw	r2,-4(fp)
 80104f0:	00c00044 	movi	r3,1
 80104f4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80104f8:	e0bffd17 	ldw	r2,-12(fp)
 80104fc:	00006706 	br	801069c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010500:	0005303a 	rdctl	r2,status
 8010504:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010508:	e0fffc17 	ldw	r3,-16(fp)
 801050c:	00bfff84 	movi	r2,-2
 8010510:	1884703a 	and	r2,r3,r2
 8010514:	1001703a 	wrctl	status,r2
  
  return context;
 8010518:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801051c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 8010520:	e0bffd17 	ldw	r2,-12(fp)
 8010524:	10800117 	ldw	r2,4(r2)
 8010528:	10000326 	beq	r2,zero,8010538 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 801052c:	00800044 	movi	r2,1
 8010530:	e0bff405 	stb	r2,-48(fp)
 8010534:	00000106 	br	801053c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8010538:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 801053c:	e0bffe03 	ldbu	r2,-8(fp)
 8010540:	10000326 	beq	r2,zero,8010550 <OSFlagDel+0xe8>
 8010544:	10800060 	cmpeqi	r2,r2,1
 8010548:	1000231e 	bne	r2,zero,80105d8 <OSFlagDel+0x170>
 801054c:	00004806 	br	8010670 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 8010550:	e0bff403 	ldbu	r2,-48(fp)
 8010554:	1000161e 	bne	r2,zero,80105b0 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 8010558:	e0bffd17 	ldw	r2,-12(fp)
 801055c:	00c00fc4 	movi	r3,63
 8010560:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8010564:	e0bffd17 	ldw	r2,-12(fp)
 8010568:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 801056c:	e0bffd17 	ldw	r2,-12(fp)
 8010570:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 8010574:	d0e73a17 	ldw	r3,-25368(gp)
 8010578:	e0bffd17 	ldw	r2,-12(fp)
 801057c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 8010580:	e0bffd17 	ldw	r2,-12(fp)
 8010584:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 8010588:	e0bffd17 	ldw	r2,-12(fp)
 801058c:	d0a73a15 	stw	r2,-25368(gp)
 8010590:	e0bff717 	ldw	r2,-36(fp)
 8010594:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010598:	e0bff817 	ldw	r2,-32(fp)
 801059c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 80105a0:	e0bfff17 	ldw	r2,-4(fp)
 80105a4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 80105a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 80105ac:	00003a06 	br	8010698 <OSFlagDel+0x230>
 80105b0:	e0bff717 	ldw	r2,-36(fp)
 80105b4:	e0bff915 	stw	r2,-28(fp)
 80105b8:	e0bff917 	ldw	r2,-28(fp)
 80105bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 80105c0:	e0bfff17 	ldw	r2,-4(fp)
 80105c4:	00c01244 	movi	r3,73
 80105c8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 80105cc:	e0bffd17 	ldw	r2,-12(fp)
 80105d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 80105d4:	00003006 	br	8010698 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 80105d8:	e0bffd17 	ldw	r2,-12(fp)
 80105dc:	10800117 	ldw	r2,4(r2)
 80105e0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 80105e4:	00000606 	br	8010600 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 80105e8:	000b883a 	mov	r5,zero
 80105ec:	e13ff517 	ldw	r4,-44(fp)
 80105f0:	80115d40 	call	80115d4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80105f4:	e0bff517 	ldw	r2,-44(fp)
 80105f8:	10800017 	ldw	r2,0(r2)
 80105fc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 8010600:	e0bff517 	ldw	r2,-44(fp)
 8010604:	103ff81e 	bne	r2,zero,80105e8 <__alt_data_end+0xf80105e8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 8010608:	e0bffd17 	ldw	r2,-12(fp)
 801060c:	00c00fc4 	movi	r3,63
 8010610:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8010614:	e0bffd17 	ldw	r2,-12(fp)
 8010618:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 801061c:	e0bffd17 	ldw	r2,-12(fp)
 8010620:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 8010624:	d0e73a17 	ldw	r3,-25368(gp)
 8010628:	e0bffd17 	ldw	r2,-12(fp)
 801062c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 8010630:	e0bffd17 	ldw	r2,-12(fp)
 8010634:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 8010638:	e0bffd17 	ldw	r2,-12(fp)
 801063c:	d0a73a15 	stw	r2,-25368(gp)
 8010640:	e0bff717 	ldw	r2,-36(fp)
 8010644:	e0bffa15 	stw	r2,-24(fp)
 8010648:	e0bffa17 	ldw	r2,-24(fp)
 801064c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8010650:	e0bff403 	ldbu	r2,-48(fp)
 8010654:	10800058 	cmpnei	r2,r2,1
 8010658:	1000011e 	bne	r2,zero,8010660 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 801065c:	800f7f40 	call	800f7f4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 8010660:	e0bfff17 	ldw	r2,-4(fp)
 8010664:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 8010668:	e03ff615 	stw	zero,-40(fp)
             break;
 801066c:	00000a06 	br	8010698 <OSFlagDel+0x230>
 8010670:	e0bff717 	ldw	r2,-36(fp)
 8010674:	e0bffb15 	stw	r2,-20(fp)
 8010678:	e0bffb17 	ldw	r2,-20(fp)
 801067c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 8010680:	e0bfff17 	ldw	r2,-4(fp)
 8010684:	00c001c4 	movi	r3,7
 8010688:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 801068c:	e0bffd17 	ldw	r2,-12(fp)
 8010690:	e0bff615 	stw	r2,-40(fp)
             break;
 8010694:	0001883a 	nop
    }
    return (pgrp_return);
 8010698:	e0bff617 	ldw	r2,-40(fp)
}
 801069c:	e037883a 	mov	sp,fp
 80106a0:	dfc00117 	ldw	ra,4(sp)
 80106a4:	df000017 	ldw	fp,0(sp)
 80106a8:	dec00204 	addi	sp,sp,8
 80106ac:	f800283a 	ret

080106b0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 80106b0:	defff604 	addi	sp,sp,-40
 80106b4:	dfc00915 	stw	ra,36(sp)
 80106b8:	df000815 	stw	fp,32(sp)
 80106bc:	df000804 	addi	fp,sp,32
 80106c0:	e13ffd15 	stw	r4,-12(fp)
 80106c4:	e17ffe15 	stw	r5,-8(fp)
 80106c8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80106cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80106d0:	e0bfff17 	ldw	r2,-4(fp)
 80106d4:	1000021e 	bne	r2,zero,80106e0 <OSFlagNameGet+0x30>
        return (0);
 80106d8:	0005883a 	mov	r2,zero
 80106dc:	00003906 	br	80107c4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 80106e0:	e0bffd17 	ldw	r2,-12(fp)
 80106e4:	1000051e 	bne	r2,zero,80106fc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80106e8:	e0bfff17 	ldw	r2,-4(fp)
 80106ec:	00c01b84 	movi	r3,110
 80106f0:	10c00005 	stb	r3,0(r2)
        return (0);
 80106f4:	0005883a 	mov	r2,zero
 80106f8:	00003206 	br	80107c4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80106fc:	e0bffe17 	ldw	r2,-8(fp)
 8010700:	1000051e 	bne	r2,zero,8010718 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8010704:	e0bfff17 	ldw	r2,-4(fp)
 8010708:	00c00304 	movi	r3,12
 801070c:	10c00005 	stb	r3,0(r2)
        return (0);
 8010710:	0005883a 	mov	r2,zero
 8010714:	00002b06 	br	80107c4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8010718:	d0a73703 	ldbu	r2,-25380(gp)
 801071c:	10803fcc 	andi	r2,r2,255
 8010720:	10000526 	beq	r2,zero,8010738 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 8010724:	e0bfff17 	ldw	r2,-4(fp)
 8010728:	00c00444 	movi	r3,17
 801072c:	10c00005 	stb	r3,0(r2)
        return (0);
 8010730:	0005883a 	mov	r2,zero
 8010734:	00002306 	br	80107c4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010738:	0005303a 	rdctl	r2,status
 801073c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010740:	e0fffc17 	ldw	r3,-16(fp)
 8010744:	00bfff84 	movi	r2,-2
 8010748:	1884703a 	and	r2,r3,r2
 801074c:	1001703a 	wrctl	status,r2
  
  return context;
 8010750:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8010754:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 8010758:	e0bffd17 	ldw	r2,-12(fp)
 801075c:	10800003 	ldbu	r2,0(r2)
 8010760:	10803fcc 	andi	r2,r2,255
 8010764:	10800160 	cmpeqi	r2,r2,5
 8010768:	1000091e 	bne	r2,zero,8010790 <OSFlagNameGet+0xe0>
 801076c:	e0bff817 	ldw	r2,-32(fp)
 8010770:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010774:	e0bff917 	ldw	r2,-28(fp)
 8010778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 801077c:	e0bfff17 	ldw	r2,-4(fp)
 8010780:	00c00044 	movi	r3,1
 8010784:	10c00005 	stb	r3,0(r2)
        return (0);
 8010788:	0005883a 	mov	r2,zero
 801078c:	00000d06 	br	80107c4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 8010790:	e0bffd17 	ldw	r2,-12(fp)
 8010794:	10800284 	addi	r2,r2,10
 8010798:	100b883a 	mov	r5,r2
 801079c:	e13ffe17 	ldw	r4,-8(fp)
 80107a0:	800f9380 	call	800f938 <OS_StrCopy>
 80107a4:	e0bffb05 	stb	r2,-20(fp)
 80107a8:	e0bff817 	ldw	r2,-32(fp)
 80107ac:	e0bffa15 	stw	r2,-24(fp)
 80107b0:	e0bffa17 	ldw	r2,-24(fp)
 80107b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80107b8:	e0bfff17 	ldw	r2,-4(fp)
 80107bc:	10000005 	stb	zero,0(r2)
    return (len);
 80107c0:	e0bffb03 	ldbu	r2,-20(fp)
}
 80107c4:	e037883a 	mov	sp,fp
 80107c8:	dfc00117 	ldw	ra,4(sp)
 80107cc:	df000017 	ldw	fp,0(sp)
 80107d0:	dec00204 	addi	sp,sp,8
 80107d4:	f800283a 	ret

080107d8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 80107d8:	defff504 	addi	sp,sp,-44
 80107dc:	dfc00a15 	stw	ra,40(sp)
 80107e0:	df000915 	stw	fp,36(sp)
 80107e4:	df000904 	addi	fp,sp,36
 80107e8:	e13ffd15 	stw	r4,-12(fp)
 80107ec:	e17ffe15 	stw	r5,-8(fp)
 80107f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80107f4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80107f8:	e0bfff17 	ldw	r2,-4(fp)
 80107fc:	10004326 	beq	r2,zero,801090c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 8010800:	e0bffd17 	ldw	r2,-12(fp)
 8010804:	1000041e 	bne	r2,zero,8010818 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010808:	e0bfff17 	ldw	r2,-4(fp)
 801080c:	00c01b84 	movi	r3,110
 8010810:	10c00005 	stb	r3,0(r2)
        return;
 8010814:	00003e06 	br	8010910 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8010818:	e0bffe17 	ldw	r2,-8(fp)
 801081c:	1000041e 	bne	r2,zero,8010830 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 8010820:	e0bfff17 	ldw	r2,-4(fp)
 8010824:	00c00304 	movi	r3,12
 8010828:	10c00005 	stb	r3,0(r2)
        return;
 801082c:	00003806 	br	8010910 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8010830:	d0a73703 	ldbu	r2,-25380(gp)
 8010834:	10803fcc 	andi	r2,r2,255
 8010838:	10000426 	beq	r2,zero,801084c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 801083c:	e0bfff17 	ldw	r2,-4(fp)
 8010840:	00c00484 	movi	r3,18
 8010844:	10c00005 	stb	r3,0(r2)
        return;
 8010848:	00003106 	br	8010910 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801084c:	0005303a 	rdctl	r2,status
 8010850:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010854:	e0fffc17 	ldw	r3,-16(fp)
 8010858:	00bfff84 	movi	r2,-2
 801085c:	1884703a 	and	r2,r3,r2
 8010860:	1001703a 	wrctl	status,r2
  
  return context;
 8010864:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8010868:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 801086c:	e0bffd17 	ldw	r2,-12(fp)
 8010870:	10800003 	ldbu	r2,0(r2)
 8010874:	10803fcc 	andi	r2,r2,255
 8010878:	10800160 	cmpeqi	r2,r2,5
 801087c:	1000081e 	bne	r2,zero,80108a0 <OSFlagNameSet+0xc8>
 8010880:	e0bff717 	ldw	r2,-36(fp)
 8010884:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010888:	e0bff817 	ldw	r2,-32(fp)
 801088c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8010890:	e0bfff17 	ldw	r2,-4(fp)
 8010894:	00c00044 	movi	r3,1
 8010898:	10c00005 	stb	r3,0(r2)
        return;
 801089c:	00001c06 	br	8010910 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 80108a0:	e13ffe17 	ldw	r4,-8(fp)
 80108a4:	800f9ac0 	call	800f9ac <OS_StrLen>
 80108a8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 80108ac:	e0bffa03 	ldbu	r2,-24(fp)
 80108b0:	10800830 	cmpltui	r2,r2,32
 80108b4:	1000081e 	bne	r2,zero,80108d8 <OSFlagNameSet+0x100>
 80108b8:	e0bff717 	ldw	r2,-36(fp)
 80108bc:	e0bff915 	stw	r2,-28(fp)
 80108c0:	e0bff917 	ldw	r2,-28(fp)
 80108c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 80108c8:	e0bfff17 	ldw	r2,-4(fp)
 80108cc:	00c01cc4 	movi	r3,115
 80108d0:	10c00005 	stb	r3,0(r2)
        return;
 80108d4:	00000e06 	br	8010910 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 80108d8:	e0bffd17 	ldw	r2,-12(fp)
 80108dc:	10800284 	addi	r2,r2,10
 80108e0:	e17ffe17 	ldw	r5,-8(fp)
 80108e4:	1009883a 	mov	r4,r2
 80108e8:	800f9380 	call	800f938 <OS_StrCopy>
 80108ec:	e0bff717 	ldw	r2,-36(fp)
 80108f0:	e0bffb15 	stw	r2,-20(fp)
 80108f4:	e0bffb17 	ldw	r2,-20(fp)
 80108f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80108fc:	e0bfff17 	ldw	r2,-4(fp)
 8010900:	10000005 	stb	zero,0(r2)
    return;
 8010904:	0001883a 	nop
 8010908:	00000106 	br	8010910 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 801090c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 8010910:	e037883a 	mov	sp,fp
 8010914:	dfc00117 	ldw	ra,4(sp)
 8010918:	df000017 	ldw	fp,0(sp)
 801091c:	dec00204 	addi	sp,sp,8
 8010920:	f800283a 	ret

08010924 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 8010924:	deffe104 	addi	sp,sp,-124
 8010928:	dfc01e15 	stw	ra,120(sp)
 801092c:	df001d15 	stw	fp,116(sp)
 8010930:	df001d04 	addi	fp,sp,116
 8010934:	e13ffc15 	stw	r4,-16(fp)
 8010938:	2809883a 	mov	r4,r5
 801093c:	3007883a 	mov	r3,r6
 8010940:	3805883a 	mov	r2,r7
 8010944:	e13ffd0d 	sth	r4,-12(fp)
 8010948:	e0fffe05 	stb	r3,-8(fp)
 801094c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8010950:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8010954:	e0800217 	ldw	r2,8(fp)
 8010958:	1000021e 	bne	r2,zero,8010964 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 801095c:	0005883a 	mov	r2,zero
 8010960:	00015906 	br	8010ec8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8010964:	e0bffc17 	ldw	r2,-16(fp)
 8010968:	1000051e 	bne	r2,zero,8010980 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 801096c:	e0800217 	ldw	r2,8(fp)
 8010970:	00c01b84 	movi	r3,110
 8010974:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010978:	0005883a 	mov	r2,zero
 801097c:	00015206 	br	8010ec8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8010980:	d0a73703 	ldbu	r2,-25380(gp)
 8010984:	10803fcc 	andi	r2,r2,255
 8010988:	10000526 	beq	r2,zero,80109a0 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 801098c:	e0800217 	ldw	r2,8(fp)
 8010990:	00c00084 	movi	r3,2
 8010994:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010998:	0005883a 	mov	r2,zero
 801099c:	00014a06 	br	8010ec8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 80109a0:	d0a72903 	ldbu	r2,-25436(gp)
 80109a4:	10803fcc 	andi	r2,r2,255
 80109a8:	10000526 	beq	r2,zero,80109c0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 80109ac:	e0800217 	ldw	r2,8(fp)
 80109b0:	00c00344 	movi	r3,13
 80109b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80109b8:	0005883a 	mov	r2,zero
 80109bc:	00014206 	br	8010ec8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 80109c0:	e0bffc17 	ldw	r2,-16(fp)
 80109c4:	10800003 	ldbu	r2,0(r2)
 80109c8:	10803fcc 	andi	r2,r2,255
 80109cc:	10800160 	cmpeqi	r2,r2,5
 80109d0:	1000051e 	bne	r2,zero,80109e8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 80109d4:	e0800217 	ldw	r2,8(fp)
 80109d8:	00c00044 	movi	r3,1
 80109dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80109e0:	0005883a 	mov	r2,zero
 80109e4:	00013806 	br	8010ec8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 80109e8:	e0fffe03 	ldbu	r3,-8(fp)
 80109ec:	00bfe004 	movi	r2,-128
 80109f0:	1884703a 	and	r2,r3,r2
 80109f4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 80109f8:	e0bfe603 	ldbu	r2,-104(fp)
 80109fc:	10000626 	beq	r2,zero,8010a18 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 8010a00:	e0bffe03 	ldbu	r2,-8(fp)
 8010a04:	10801fcc 	andi	r2,r2,127
 8010a08:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 8010a0c:	00800044 	movi	r2,1
 8010a10:	e0bfe405 	stb	r2,-112(fp)
 8010a14:	00000106 	br	8010a1c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 8010a18:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010a1c:	0005303a 	rdctl	r2,status
 8010a20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010a24:	e0fff617 	ldw	r3,-40(fp)
 8010a28:	00bfff84 	movi	r2,-2
 8010a2c:	1884703a 	and	r2,r3,r2
 8010a30:	1001703a 	wrctl	status,r2
  
  return context;
 8010a34:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8010a38:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 8010a3c:	e0bffe03 	ldbu	r2,-8(fp)
 8010a40:	10c00060 	cmpeqi	r3,r2,1
 8010a44:	1800921e 	bne	r3,zero,8010c90 <OSFlagPend+0x36c>
 8010a48:	10c00088 	cmpgei	r3,r2,2
 8010a4c:	1800021e 	bne	r3,zero,8010a58 <OSFlagPend+0x134>
 8010a50:	10006126 	beq	r2,zero,8010bd8 <OSFlagPend+0x2b4>
 8010a54:	0000bb06 	br	8010d44 <OSFlagPend+0x420>
 8010a58:	10c000a0 	cmpeqi	r3,r2,2
 8010a5c:	1800031e 	bne	r3,zero,8010a6c <OSFlagPend+0x148>
 8010a60:	108000e0 	cmpeqi	r2,r2,3
 8010a64:	10002f1e 	bne	r2,zero,8010b24 <OSFlagPend+0x200>
 8010a68:	0000b606 	br	8010d44 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8010a6c:	e0bffc17 	ldw	r2,-16(fp)
 8010a70:	10c0020b 	ldhu	r3,8(r2)
 8010a74:	e0bffd0b 	ldhu	r2,-12(fp)
 8010a78:	1884703a 	and	r2,r3,r2
 8010a7c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010a80:	e0ffe80b 	ldhu	r3,-96(fp)
 8010a84:	e0bffd0b 	ldhu	r2,-12(fp)
 8010a88:	1880171e 	bne	r3,r2,8010ae8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010a8c:	e0bfe403 	ldbu	r2,-112(fp)
 8010a90:	10800058 	cmpnei	r2,r2,1
 8010a94:	1000091e 	bne	r2,zero,8010abc <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8010a98:	e0bffc17 	ldw	r2,-16(fp)
 8010a9c:	1080020b 	ldhu	r2,8(r2)
 8010aa0:	1007883a 	mov	r3,r2
 8010aa4:	e0bfe80b 	ldhu	r2,-96(fp)
 8010aa8:	0084303a 	nor	r2,zero,r2
 8010aac:	1884703a 	and	r2,r3,r2
 8010ab0:	1007883a 	mov	r3,r2
 8010ab4:	e0bffc17 	ldw	r2,-16(fp)
 8010ab8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010abc:	d0a73817 	ldw	r2,-25376(gp)
 8010ac0:	e0ffe80b 	ldhu	r3,-96(fp)
 8010ac4:	10c00b0d 	sth	r3,44(r2)
 8010ac8:	e0bfe517 	ldw	r2,-108(fp)
 8010acc:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ad0:	e0bfe717 	ldw	r2,-100(fp)
 8010ad4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010ad8:	e0800217 	ldw	r2,8(fp)
 8010adc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010ae0:	e0bfe80b 	ldhu	r2,-96(fp)
 8010ae4:	0000f806 	br	8010ec8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010ae8:	e13ffd0b 	ldhu	r4,-12(fp)
 8010aec:	e17ffe03 	ldbu	r5,-8(fp)
 8010af0:	e0bfff0b 	ldhu	r2,-4(fp)
 8010af4:	e0fff704 	addi	r3,fp,-36
 8010af8:	d8800015 	stw	r2,0(sp)
 8010afc:	280f883a 	mov	r7,r5
 8010b00:	200d883a 	mov	r6,r4
 8010b04:	180b883a 	mov	r5,r3
 8010b08:	e13ffc17 	ldw	r4,-16(fp)
 8010b0c:	80113940 	call	8011394 <OS_FlagBlock>
 8010b10:	e0bfe517 	ldw	r2,-108(fp)
 8010b14:	e0bfe915 	stw	r2,-92(fp)
 8010b18:	e0bfe917 	ldw	r2,-92(fp)
 8010b1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010b20:	00009206 	br	8010d6c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8010b24:	e0bffc17 	ldw	r2,-16(fp)
 8010b28:	10c0020b 	ldhu	r3,8(r2)
 8010b2c:	e0bffd0b 	ldhu	r2,-12(fp)
 8010b30:	1884703a 	and	r2,r3,r2
 8010b34:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8010b38:	e0bfe80b 	ldhu	r2,-96(fp)
 8010b3c:	10001726 	beq	r2,zero,8010b9c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010b40:	e0bfe403 	ldbu	r2,-112(fp)
 8010b44:	10800058 	cmpnei	r2,r2,1
 8010b48:	1000091e 	bne	r2,zero,8010b70 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 8010b4c:	e0bffc17 	ldw	r2,-16(fp)
 8010b50:	1080020b 	ldhu	r2,8(r2)
 8010b54:	1007883a 	mov	r3,r2
 8010b58:	e0bfe80b 	ldhu	r2,-96(fp)
 8010b5c:	0084303a 	nor	r2,zero,r2
 8010b60:	1884703a 	and	r2,r3,r2
 8010b64:	1007883a 	mov	r3,r2
 8010b68:	e0bffc17 	ldw	r2,-16(fp)
 8010b6c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010b70:	d0a73817 	ldw	r2,-25376(gp)
 8010b74:	e0ffe80b 	ldhu	r3,-96(fp)
 8010b78:	10c00b0d 	sth	r3,44(r2)
 8010b7c:	e0bfe517 	ldw	r2,-108(fp)
 8010b80:	e0bfea15 	stw	r2,-88(fp)
 8010b84:	e0bfea17 	ldw	r2,-88(fp)
 8010b88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010b8c:	e0800217 	ldw	r2,8(fp)
 8010b90:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010b94:	e0bfe80b 	ldhu	r2,-96(fp)
 8010b98:	0000cb06 	br	8010ec8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010b9c:	e13ffd0b 	ldhu	r4,-12(fp)
 8010ba0:	e17ffe03 	ldbu	r5,-8(fp)
 8010ba4:	e0bfff0b 	ldhu	r2,-4(fp)
 8010ba8:	e0fff704 	addi	r3,fp,-36
 8010bac:	d8800015 	stw	r2,0(sp)
 8010bb0:	280f883a 	mov	r7,r5
 8010bb4:	200d883a 	mov	r6,r4
 8010bb8:	180b883a 	mov	r5,r3
 8010bbc:	e13ffc17 	ldw	r4,-16(fp)
 8010bc0:	80113940 	call	8011394 <OS_FlagBlock>
 8010bc4:	e0bfe517 	ldw	r2,-108(fp)
 8010bc8:	e0bfeb15 	stw	r2,-84(fp)
 8010bcc:	e0bfeb17 	ldw	r2,-84(fp)
 8010bd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010bd4:	00006506 	br	8010d6c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8010bd8:	e0bffc17 	ldw	r2,-16(fp)
 8010bdc:	1080020b 	ldhu	r2,8(r2)
 8010be0:	0084303a 	nor	r2,zero,r2
 8010be4:	1007883a 	mov	r3,r2
 8010be8:	e0bffd0b 	ldhu	r2,-12(fp)
 8010bec:	1884703a 	and	r2,r3,r2
 8010bf0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010bf4:	e0ffe80b 	ldhu	r3,-96(fp)
 8010bf8:	e0bffd0b 	ldhu	r2,-12(fp)
 8010bfc:	1880151e 	bne	r3,r2,8010c54 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010c00:	e0bfe403 	ldbu	r2,-112(fp)
 8010c04:	10800058 	cmpnei	r2,r2,1
 8010c08:	1000071e 	bne	r2,zero,8010c28 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8010c0c:	e0bffc17 	ldw	r2,-16(fp)
 8010c10:	10c0020b 	ldhu	r3,8(r2)
 8010c14:	e0bfe80b 	ldhu	r2,-96(fp)
 8010c18:	1884b03a 	or	r2,r3,r2
 8010c1c:	1007883a 	mov	r3,r2
 8010c20:	e0bffc17 	ldw	r2,-16(fp)
 8010c24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010c28:	d0a73817 	ldw	r2,-25376(gp)
 8010c2c:	e0ffe80b 	ldhu	r3,-96(fp)
 8010c30:	10c00b0d 	sth	r3,44(r2)
 8010c34:	e0bfe517 	ldw	r2,-108(fp)
 8010c38:	e0bfec15 	stw	r2,-80(fp)
 8010c3c:	e0bfec17 	ldw	r2,-80(fp)
 8010c40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010c44:	e0800217 	ldw	r2,8(fp)
 8010c48:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010c4c:	e0bfe80b 	ldhu	r2,-96(fp)
 8010c50:	00009d06 	br	8010ec8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010c54:	e13ffd0b 	ldhu	r4,-12(fp)
 8010c58:	e17ffe03 	ldbu	r5,-8(fp)
 8010c5c:	e0bfff0b 	ldhu	r2,-4(fp)
 8010c60:	e0fff704 	addi	r3,fp,-36
 8010c64:	d8800015 	stw	r2,0(sp)
 8010c68:	280f883a 	mov	r7,r5
 8010c6c:	200d883a 	mov	r6,r4
 8010c70:	180b883a 	mov	r5,r3
 8010c74:	e13ffc17 	ldw	r4,-16(fp)
 8010c78:	80113940 	call	8011394 <OS_FlagBlock>
 8010c7c:	e0bfe517 	ldw	r2,-108(fp)
 8010c80:	e0bfed15 	stw	r2,-76(fp)
 8010c84:	e0bfed17 	ldw	r2,-76(fp)
 8010c88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010c8c:	00003706 	br	8010d6c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 8010c90:	e0bffc17 	ldw	r2,-16(fp)
 8010c94:	1080020b 	ldhu	r2,8(r2)
 8010c98:	0084303a 	nor	r2,zero,r2
 8010c9c:	1007883a 	mov	r3,r2
 8010ca0:	e0bffd0b 	ldhu	r2,-12(fp)
 8010ca4:	1884703a 	and	r2,r3,r2
 8010ca8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8010cac:	e0bfe80b 	ldhu	r2,-96(fp)
 8010cb0:	10001526 	beq	r2,zero,8010d08 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010cb4:	e0bfe403 	ldbu	r2,-112(fp)
 8010cb8:	10800058 	cmpnei	r2,r2,1
 8010cbc:	1000071e 	bne	r2,zero,8010cdc <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8010cc0:	e0bffc17 	ldw	r2,-16(fp)
 8010cc4:	10c0020b 	ldhu	r3,8(r2)
 8010cc8:	e0bfe80b 	ldhu	r2,-96(fp)
 8010ccc:	1884b03a 	or	r2,r3,r2
 8010cd0:	1007883a 	mov	r3,r2
 8010cd4:	e0bffc17 	ldw	r2,-16(fp)
 8010cd8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010cdc:	d0a73817 	ldw	r2,-25376(gp)
 8010ce0:	e0ffe80b 	ldhu	r3,-96(fp)
 8010ce4:	10c00b0d 	sth	r3,44(r2)
 8010ce8:	e0bfe517 	ldw	r2,-108(fp)
 8010cec:	e0bfee15 	stw	r2,-72(fp)
 8010cf0:	e0bfee17 	ldw	r2,-72(fp)
 8010cf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010cf8:	e0800217 	ldw	r2,8(fp)
 8010cfc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010d00:	e0bfe80b 	ldhu	r2,-96(fp)
 8010d04:	00007006 	br	8010ec8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010d08:	e13ffd0b 	ldhu	r4,-12(fp)
 8010d0c:	e17ffe03 	ldbu	r5,-8(fp)
 8010d10:	e0bfff0b 	ldhu	r2,-4(fp)
 8010d14:	e0fff704 	addi	r3,fp,-36
 8010d18:	d8800015 	stw	r2,0(sp)
 8010d1c:	280f883a 	mov	r7,r5
 8010d20:	200d883a 	mov	r6,r4
 8010d24:	180b883a 	mov	r5,r3
 8010d28:	e13ffc17 	ldw	r4,-16(fp)
 8010d2c:	80113940 	call	8011394 <OS_FlagBlock>
 8010d30:	e0bfe517 	ldw	r2,-108(fp)
 8010d34:	e0bfef15 	stw	r2,-68(fp)
 8010d38:	e0bfef17 	ldw	r2,-68(fp)
 8010d3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010d40:	00000a06 	br	8010d6c <OSFlagPend+0x448>
 8010d44:	e0bfe517 	ldw	r2,-108(fp)
 8010d48:	e0bff015 	stw	r2,-64(fp)
 8010d4c:	e0bff017 	ldw	r2,-64(fp)
 8010d50:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8010d54:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 8010d58:	e0800217 	ldw	r2,8(fp)
 8010d5c:	00c01bc4 	movi	r3,111
 8010d60:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 8010d64:	e0bfe80b 	ldhu	r2,-96(fp)
 8010d68:	00005706 	br	8010ec8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 8010d6c:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d70:	0005303a 	rdctl	r2,status
 8010d74:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d78:	e0fff117 	ldw	r3,-60(fp)
 8010d7c:	00bfff84 	movi	r2,-2
 8010d80:	1884703a 	and	r2,r3,r2
 8010d84:	1001703a 	wrctl	status,r2
  
  return context;
 8010d88:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 8010d8c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 8010d90:	d0a73817 	ldw	r2,-25376(gp)
 8010d94:	10800c43 	ldbu	r2,49(r2)
 8010d98:	10803fcc 	andi	r2,r2,255
 8010d9c:	10001c26 	beq	r2,zero,8010e10 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8010da0:	d0a73817 	ldw	r2,-25376(gp)
 8010da4:	10800c43 	ldbu	r2,49(r2)
 8010da8:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8010dac:	d0a73817 	ldw	r2,-25376(gp)
 8010db0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 8010db4:	e0bff704 	addi	r2,fp,-36
 8010db8:	1009883a 	mov	r4,r2
 8010dbc:	80116c80 	call	80116c8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8010dc0:	d0a73817 	ldw	r2,-25376(gp)
 8010dc4:	10000c05 	stb	zero,48(r2)
 8010dc8:	e0bfe517 	ldw	r2,-108(fp)
 8010dcc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010dd0:	e0bff217 	ldw	r2,-56(fp)
 8010dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 8010dd8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 8010ddc:	e0bff303 	ldbu	r2,-52(fp)
 8010de0:	108000a0 	cmpeqi	r2,r2,2
 8010de4:	10000426 	beq	r2,zero,8010df8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 8010de8:	e0800217 	ldw	r2,8(fp)
 8010dec:	00c00384 	movi	r3,14
 8010df0:	10c00005 	stb	r3,0(r2)
                 break;
 8010df4:	00000406 	br	8010e08 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 8010df8:	e0800217 	ldw	r2,8(fp)
 8010dfc:	00c00284 	movi	r3,10
 8010e00:	10c00005 	stb	r3,0(r2)
                 break;
 8010e04:	0001883a 	nop
        }
        return (flags_rdy);
 8010e08:	e0bfe80b 	ldhu	r2,-96(fp)
 8010e0c:	00002e06 	br	8010ec8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8010e10:	d0a73817 	ldw	r2,-25376(gp)
 8010e14:	10800b0b 	ldhu	r2,44(r2)
 8010e18:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8010e1c:	e0bfe403 	ldbu	r2,-112(fp)
 8010e20:	10800058 	cmpnei	r2,r2,1
 8010e24:	1000211e 	bne	r2,zero,8010eac <OSFlagPend+0x588>
        switch (wait_type) {
 8010e28:	e0bffe03 	ldbu	r2,-8(fp)
 8010e2c:	10001616 	blt	r2,zero,8010e88 <OSFlagPend+0x564>
 8010e30:	10c00090 	cmplti	r3,r2,2
 8010e34:	18000c1e 	bne	r3,zero,8010e68 <OSFlagPend+0x544>
 8010e38:	10800108 	cmpgei	r2,r2,4
 8010e3c:	1000121e 	bne	r2,zero,8010e88 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 8010e40:	e0bffc17 	ldw	r2,-16(fp)
 8010e44:	1080020b 	ldhu	r2,8(r2)
 8010e48:	1007883a 	mov	r3,r2
 8010e4c:	e0bfe80b 	ldhu	r2,-96(fp)
 8010e50:	0084303a 	nor	r2,zero,r2
 8010e54:	1884703a 	and	r2,r3,r2
 8010e58:	1007883a 	mov	r3,r2
 8010e5c:	e0bffc17 	ldw	r2,-16(fp)
 8010e60:	10c0020d 	sth	r3,8(r2)
                 break;
 8010e64:	00001106 	br	8010eac <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8010e68:	e0bffc17 	ldw	r2,-16(fp)
 8010e6c:	10c0020b 	ldhu	r3,8(r2)
 8010e70:	e0bfe80b 	ldhu	r2,-96(fp)
 8010e74:	1884b03a 	or	r2,r3,r2
 8010e78:	1007883a 	mov	r3,r2
 8010e7c:	e0bffc17 	ldw	r2,-16(fp)
 8010e80:	10c0020d 	sth	r3,8(r2)
                 break;
 8010e84:	00000906 	br	8010eac <OSFlagPend+0x588>
 8010e88:	e0bfe517 	ldw	r2,-108(fp)
 8010e8c:	e0bff415 	stw	r2,-48(fp)
 8010e90:	e0bff417 	ldw	r2,-48(fp)
 8010e94:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8010e98:	e0800217 	ldw	r2,8(fp)
 8010e9c:	00c01bc4 	movi	r3,111
 8010ea0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 8010ea4:	0005883a 	mov	r2,zero
 8010ea8:	00000706 	br	8010ec8 <OSFlagPend+0x5a4>
 8010eac:	e0bfe517 	ldw	r2,-108(fp)
 8010eb0:	e0bff515 	stw	r2,-44(fp)
 8010eb4:	e0bff517 	ldw	r2,-44(fp)
 8010eb8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 8010ebc:	e0800217 	ldw	r2,8(fp)
 8010ec0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 8010ec4:	e0bfe80b 	ldhu	r2,-96(fp)
}
 8010ec8:	e037883a 	mov	sp,fp
 8010ecc:	dfc00117 	ldw	ra,4(sp)
 8010ed0:	df000017 	ldw	fp,0(sp)
 8010ed4:	dec00204 	addi	sp,sp,8
 8010ed8:	f800283a 	ret

08010edc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 8010edc:	defffb04 	addi	sp,sp,-20
 8010ee0:	df000415 	stw	fp,16(sp)
 8010ee4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8010ee8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010eec:	0005303a 	rdctl	r2,status
 8010ef0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010ef4:	e0fffe17 	ldw	r3,-8(fp)
 8010ef8:	00bfff84 	movi	r2,-2
 8010efc:	1884703a 	and	r2,r3,r2
 8010f00:	1001703a 	wrctl	status,r2
  
  return context;
 8010f04:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 8010f08:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 8010f0c:	d0a73817 	ldw	r2,-25376(gp)
 8010f10:	10800b0b 	ldhu	r2,44(r2)
 8010f14:	e0bffd0d 	sth	r2,-12(fp)
 8010f18:	e0bffc17 	ldw	r2,-16(fp)
 8010f1c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010f20:	e0bfff17 	ldw	r2,-4(fp)
 8010f24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 8010f28:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8010f2c:	e037883a 	mov	sp,fp
 8010f30:	df000017 	ldw	fp,0(sp)
 8010f34:	dec00104 	addi	sp,sp,4
 8010f38:	f800283a 	ret

08010f3c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 8010f3c:	deffef04 	addi	sp,sp,-68
 8010f40:	dfc01015 	stw	ra,64(sp)
 8010f44:	df000f15 	stw	fp,60(sp)
 8010f48:	df000f04 	addi	fp,sp,60
 8010f4c:	e13ffc15 	stw	r4,-16(fp)
 8010f50:	2807883a 	mov	r3,r5
 8010f54:	3005883a 	mov	r2,r6
 8010f58:	e1ffff15 	stw	r7,-4(fp)
 8010f5c:	e0fffd0d 	sth	r3,-12(fp)
 8010f60:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 8010f64:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 8010f68:	e0bfff17 	ldw	r2,-4(fp)
 8010f6c:	1000021e 	bne	r2,zero,8010f78 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 8010f70:	0005883a 	mov	r2,zero
 8010f74:	0000d106 	br	80112bc <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8010f78:	e0bffc17 	ldw	r2,-16(fp)
 8010f7c:	1000051e 	bne	r2,zero,8010f94 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010f80:	e0bfff17 	ldw	r2,-4(fp)
 8010f84:	00c01b84 	movi	r3,110
 8010f88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010f8c:	0005883a 	mov	r2,zero
 8010f90:	0000ca06 	br	80112bc <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 8010f94:	e0bffc17 	ldw	r2,-16(fp)
 8010f98:	10800003 	ldbu	r2,0(r2)
 8010f9c:	10803fcc 	andi	r2,r2,255
 8010fa0:	10800160 	cmpeqi	r2,r2,5
 8010fa4:	1000051e 	bne	r2,zero,8010fbc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 8010fa8:	e0bfff17 	ldw	r2,-4(fp)
 8010fac:	00c00044 	movi	r3,1
 8010fb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010fb4:	0005883a 	mov	r2,zero
 8010fb8:	0000c006 	br	80112bc <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010fbc:	0005303a 	rdctl	r2,status
 8010fc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010fc4:	e0fffb17 	ldw	r3,-20(fp)
 8010fc8:	00bfff84 	movi	r2,-2
 8010fcc:	1884703a 	and	r2,r3,r2
 8010fd0:	1001703a 	wrctl	status,r2
  
  return context;
 8010fd4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8010fd8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 8010fdc:	e0bffe03 	ldbu	r2,-8(fp)
 8010fe0:	10000326 	beq	r2,zero,8010ff0 <OSFlagPost+0xb4>
 8010fe4:	10800060 	cmpeqi	r2,r2,1
 8010fe8:	10000b1e 	bne	r2,zero,8011018 <OSFlagPost+0xdc>
 8010fec:	00001206 	br	8011038 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 8010ff0:	e0bffc17 	ldw	r2,-16(fp)
 8010ff4:	1080020b 	ldhu	r2,8(r2)
 8010ff8:	1007883a 	mov	r3,r2
 8010ffc:	e0bffd0b 	ldhu	r2,-12(fp)
 8011000:	0084303a 	nor	r2,zero,r2
 8011004:	1884703a 	and	r2,r3,r2
 8011008:	1007883a 	mov	r3,r2
 801100c:	e0bffc17 	ldw	r2,-16(fp)
 8011010:	10c0020d 	sth	r3,8(r2)
             break;
 8011014:	00001106 	br	801105c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 8011018:	e0bffc17 	ldw	r2,-16(fp)
 801101c:	10c0020b 	ldhu	r3,8(r2)
 8011020:	e0bffd0b 	ldhu	r2,-12(fp)
 8011024:	1884b03a 	or	r2,r3,r2
 8011028:	1007883a 	mov	r3,r2
 801102c:	e0bffc17 	ldw	r2,-16(fp)
 8011030:	10c0020d 	sth	r3,8(r2)
             break;
 8011034:	00000906 	br	801105c <OSFlagPost+0x120>
 8011038:	e0bff317 	ldw	r2,-52(fp)
 801103c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011040:	e0bff417 	ldw	r2,-48(fp)
 8011044:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8011048:	e0bfff17 	ldw	r2,-4(fp)
 801104c:	00c01c44 	movi	r3,113
 8011050:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 8011054:	0005883a 	mov	r2,zero
 8011058:	00009806 	br	80112bc <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 801105c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8011060:	e0bffc17 	ldw	r2,-16(fp)
 8011064:	10800117 	ldw	r2,4(r2)
 8011068:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 801106c:	00007706 	br	801124c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 8011070:	e0bff117 	ldw	r2,-60(fp)
 8011074:	10800483 	ldbu	r2,18(r2)
 8011078:	10803fcc 	andi	r2,r2,255
 801107c:	10c00060 	cmpeqi	r3,r2,1
 8011080:	18004a1e 	bne	r3,zero,80111ac <OSFlagPost+0x270>
 8011084:	10c00088 	cmpgei	r3,r2,2
 8011088:	1800021e 	bne	r3,zero,8011094 <OSFlagPost+0x158>
 801108c:	10002f26 	beq	r2,zero,801114c <OSFlagPost+0x210>
 8011090:	00005b06 	br	8011200 <OSFlagPost+0x2c4>
 8011094:	10c000a0 	cmpeqi	r3,r2,2
 8011098:	1800031e 	bne	r3,zero,80110a8 <OSFlagPost+0x16c>
 801109c:	108000e0 	cmpeqi	r2,r2,3
 80110a0:	1000171e 	bne	r2,zero,8011100 <OSFlagPost+0x1c4>
 80110a4:	00005606 	br	8011200 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80110a8:	e0bffc17 	ldw	r2,-16(fp)
 80110ac:	10c0020b 	ldhu	r3,8(r2)
 80110b0:	e0bff117 	ldw	r2,-60(fp)
 80110b4:	1080040b 	ldhu	r2,16(r2)
 80110b8:	1884703a 	and	r2,r3,r2
 80110bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 80110c0:	e0bff117 	ldw	r2,-60(fp)
 80110c4:	1080040b 	ldhu	r2,16(r2)
 80110c8:	10ffffcc 	andi	r3,r2,65535
 80110cc:	e0bff60b 	ldhu	r2,-40(fp)
 80110d0:	1880541e 	bne	r3,r2,8011224 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80110d4:	e0bff60b 	ldhu	r2,-40(fp)
 80110d8:	100b883a 	mov	r5,r2
 80110dc:	e13ff117 	ldw	r4,-60(fp)
 80110e0:	80115d40 	call	80115d4 <OS_FlagTaskRdy>
 80110e4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 80110e8:	e0bff683 	ldbu	r2,-38(fp)
 80110ec:	10800058 	cmpnei	r2,r2,1
 80110f0:	10004c1e 	bne	r2,zero,8011224 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80110f4:	00800044 	movi	r2,1
 80110f8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 80110fc:	00004906 	br	8011224 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8011100:	e0bffc17 	ldw	r2,-16(fp)
 8011104:	10c0020b 	ldhu	r3,8(r2)
 8011108:	e0bff117 	ldw	r2,-60(fp)
 801110c:	1080040b 	ldhu	r2,16(r2)
 8011110:	1884703a 	and	r2,r3,r2
 8011114:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 8011118:	e0bff60b 	ldhu	r2,-40(fp)
 801111c:	10004326 	beq	r2,zero,801122c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8011120:	e0bff60b 	ldhu	r2,-40(fp)
 8011124:	100b883a 	mov	r5,r2
 8011128:	e13ff117 	ldw	r4,-60(fp)
 801112c:	80115d40 	call	80115d4 <OS_FlagTaskRdy>
 8011130:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 8011134:	e0bff683 	ldbu	r2,-38(fp)
 8011138:	10800058 	cmpnei	r2,r2,1
 801113c:	10003b1e 	bne	r2,zero,801122c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8011140:	00800044 	movi	r2,1
 8011144:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 8011148:	00003806 	br	801122c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 801114c:	e0bffc17 	ldw	r2,-16(fp)
 8011150:	1080020b 	ldhu	r2,8(r2)
 8011154:	0084303a 	nor	r2,zero,r2
 8011158:	1007883a 	mov	r3,r2
 801115c:	e0bff117 	ldw	r2,-60(fp)
 8011160:	1080040b 	ldhu	r2,16(r2)
 8011164:	1884703a 	and	r2,r3,r2
 8011168:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 801116c:	e0bff117 	ldw	r2,-60(fp)
 8011170:	1080040b 	ldhu	r2,16(r2)
 8011174:	10ffffcc 	andi	r3,r2,65535
 8011178:	e0bff60b 	ldhu	r2,-40(fp)
 801117c:	18802d1e 	bne	r3,r2,8011234 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8011180:	e0bff60b 	ldhu	r2,-40(fp)
 8011184:	100b883a 	mov	r5,r2
 8011188:	e13ff117 	ldw	r4,-60(fp)
 801118c:	80115d40 	call	80115d4 <OS_FlagTaskRdy>
 8011190:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 8011194:	e0bff683 	ldbu	r2,-38(fp)
 8011198:	10800058 	cmpnei	r2,r2,1
 801119c:	1000251e 	bne	r2,zero,8011234 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80111a0:	00800044 	movi	r2,1
 80111a4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 80111a8:	00002206 	br	8011234 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80111ac:	e0bffc17 	ldw	r2,-16(fp)
 80111b0:	1080020b 	ldhu	r2,8(r2)
 80111b4:	0084303a 	nor	r2,zero,r2
 80111b8:	1007883a 	mov	r3,r2
 80111bc:	e0bff117 	ldw	r2,-60(fp)
 80111c0:	1080040b 	ldhu	r2,16(r2)
 80111c4:	1884703a 	and	r2,r3,r2
 80111c8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 80111cc:	e0bff60b 	ldhu	r2,-40(fp)
 80111d0:	10001a26 	beq	r2,zero,801123c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80111d4:	e0bff60b 	ldhu	r2,-40(fp)
 80111d8:	100b883a 	mov	r5,r2
 80111dc:	e13ff117 	ldw	r4,-60(fp)
 80111e0:	80115d40 	call	80115d4 <OS_FlagTaskRdy>
 80111e4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 80111e8:	e0bff683 	ldbu	r2,-38(fp)
 80111ec:	10800058 	cmpnei	r2,r2,1
 80111f0:	1000121e 	bne	r2,zero,801123c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80111f4:	00800044 	movi	r2,1
 80111f8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 80111fc:	00000f06 	br	801123c <OSFlagPost+0x300>
 8011200:	e0bff317 	ldw	r2,-52(fp)
 8011204:	e0bff515 	stw	r2,-44(fp)
 8011208:	e0bff517 	ldw	r2,-44(fp)
 801120c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8011210:	e0bfff17 	ldw	r2,-4(fp)
 8011214:	00c01bc4 	movi	r3,111
 8011218:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 801121c:	0005883a 	mov	r2,zero
 8011220:	00002606 	br	80112bc <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 8011224:	0001883a 	nop
 8011228:	00000506 	br	8011240 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 801122c:	0001883a 	nop
 8011230:	00000306 	br	8011240 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 8011234:	0001883a 	nop
 8011238:	00000106 	br	8011240 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 801123c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8011240:	e0bff117 	ldw	r2,-60(fp)
 8011244:	10800017 	ldw	r2,0(r2)
 8011248:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 801124c:	e0bff117 	ldw	r2,-60(fp)
 8011250:	103f871e 	bne	r2,zero,8011070 <__alt_data_end+0xf8011070>
 8011254:	e0bff317 	ldw	r2,-52(fp)
 8011258:	e0bff715 	stw	r2,-36(fp)
 801125c:	e0bff717 	ldw	r2,-36(fp)
 8011260:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 8011264:	e0bff203 	ldbu	r2,-56(fp)
 8011268:	10800058 	cmpnei	r2,r2,1
 801126c:	1000011e 	bne	r2,zero,8011274 <OSFlagPost+0x338>
        OS_Sched();
 8011270:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011274:	0005303a 	rdctl	r2,status
 8011278:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801127c:	e0fffa17 	ldw	r3,-24(fp)
 8011280:	00bfff84 	movi	r2,-2
 8011284:	1884703a 	and	r2,r3,r2
 8011288:	1001703a 	wrctl	status,r2
  
  return context;
 801128c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8011290:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 8011294:	e0bffc17 	ldw	r2,-16(fp)
 8011298:	1080020b 	ldhu	r2,8(r2)
 801129c:	e0bff90d 	sth	r2,-28(fp)
 80112a0:	e0bff317 	ldw	r2,-52(fp)
 80112a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80112a8:	e0bff817 	ldw	r2,-32(fp)
 80112ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 80112b0:	e0bfff17 	ldw	r2,-4(fp)
 80112b4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 80112b8:	e0bff90b 	ldhu	r2,-28(fp)
}
 80112bc:	e037883a 	mov	sp,fp
 80112c0:	dfc00117 	ldw	ra,4(sp)
 80112c4:	df000017 	ldw	fp,0(sp)
 80112c8:	dec00204 	addi	sp,sp,8
 80112cc:	f800283a 	ret

080112d0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 80112d0:	defff904 	addi	sp,sp,-28
 80112d4:	df000615 	stw	fp,24(sp)
 80112d8:	df000604 	addi	fp,sp,24
 80112dc:	e13ffe15 	stw	r4,-8(fp)
 80112e0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 80112e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 80112e8:	e0bfff17 	ldw	r2,-4(fp)
 80112ec:	1000021e 	bne	r2,zero,80112f8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 80112f0:	0005883a 	mov	r2,zero
 80112f4:	00002306 	br	8011384 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 80112f8:	e0bffe17 	ldw	r2,-8(fp)
 80112fc:	1000051e 	bne	r2,zero,8011314 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8011300:	e0bfff17 	ldw	r2,-4(fp)
 8011304:	00c01b84 	movi	r3,110
 8011308:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 801130c:	0005883a 	mov	r2,zero
 8011310:	00001c06 	br	8011384 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 8011314:	e0bffe17 	ldw	r2,-8(fp)
 8011318:	10800003 	ldbu	r2,0(r2)
 801131c:	10803fcc 	andi	r2,r2,255
 8011320:	10800160 	cmpeqi	r2,r2,5
 8011324:	1000051e 	bne	r2,zero,801133c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 8011328:	e0bfff17 	ldw	r2,-4(fp)
 801132c:	00c00044 	movi	r3,1
 8011330:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8011334:	0005883a 	mov	r2,zero
 8011338:	00001206 	br	8011384 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801133c:	0005303a 	rdctl	r2,status
 8011340:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011344:	e0fffc17 	ldw	r3,-16(fp)
 8011348:	00bfff84 	movi	r2,-2
 801134c:	1884703a 	and	r2,r3,r2
 8011350:	1001703a 	wrctl	status,r2
  
  return context;
 8011354:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8011358:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 801135c:	e0bffe17 	ldw	r2,-8(fp)
 8011360:	1080020b 	ldhu	r2,8(r2)
 8011364:	e0bffb0d 	sth	r2,-20(fp)
 8011368:	e0bffa17 	ldw	r2,-24(fp)
 801136c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011370:	e0bffd17 	ldw	r2,-12(fp)
 8011374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011378:	e0bfff17 	ldw	r2,-4(fp)
 801137c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 8011380:	e0bffb0b 	ldhu	r2,-20(fp)
}
 8011384:	e037883a 	mov	sp,fp
 8011388:	df000017 	ldw	fp,0(sp)
 801138c:	dec00104 	addi	sp,sp,4
 8011390:	f800283a 	ret

08011394 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 8011394:	defff804 	addi	sp,sp,-32
 8011398:	df000715 	stw	fp,28(sp)
 801139c:	df000704 	addi	fp,sp,28
 80113a0:	e13ffb15 	stw	r4,-20(fp)
 80113a4:	e17ffc15 	stw	r5,-16(fp)
 80113a8:	3009883a 	mov	r4,r6
 80113ac:	3807883a 	mov	r3,r7
 80113b0:	e0800117 	ldw	r2,4(fp)
 80113b4:	e13ffd0d 	sth	r4,-12(fp)
 80113b8:	e0fffe05 	stb	r3,-8(fp)
 80113bc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 80113c0:	d0a73817 	ldw	r2,-25376(gp)
 80113c4:	d0e73817 	ldw	r3,-25376(gp)
 80113c8:	18c00c03 	ldbu	r3,48(r3)
 80113cc:	18c00814 	ori	r3,r3,32
 80113d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 80113d4:	d0a73817 	ldw	r2,-25376(gp)
 80113d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 80113dc:	d0a73817 	ldw	r2,-25376(gp)
 80113e0:	e0ffff0b 	ldhu	r3,-4(fp)
 80113e4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 80113e8:	d0a73817 	ldw	r2,-25376(gp)
 80113ec:	e0fffc17 	ldw	r3,-16(fp)
 80113f0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 80113f4:	e0bffc17 	ldw	r2,-16(fp)
 80113f8:	e0fffd0b 	ldhu	r3,-12(fp)
 80113fc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 8011400:	e0bffc17 	ldw	r2,-16(fp)
 8011404:	e0fffe03 	ldbu	r3,-8(fp)
 8011408:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 801140c:	d0e73817 	ldw	r3,-25376(gp)
 8011410:	e0bffc17 	ldw	r2,-16(fp)
 8011414:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 8011418:	e0bffb17 	ldw	r2,-20(fp)
 801141c:	10c00117 	ldw	r3,4(r2)
 8011420:	e0bffc17 	ldw	r2,-16(fp)
 8011424:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 8011428:	e0bffc17 	ldw	r2,-16(fp)
 801142c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 8011430:	e0bffc17 	ldw	r2,-16(fp)
 8011434:	e0fffb17 	ldw	r3,-20(fp)
 8011438:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 801143c:	e0bffb17 	ldw	r2,-20(fp)
 8011440:	10800117 	ldw	r2,4(r2)
 8011444:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 8011448:	e0bff917 	ldw	r2,-28(fp)
 801144c:	10000326 	beq	r2,zero,801145c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 8011450:	e0bff917 	ldw	r2,-28(fp)
 8011454:	e0fffc17 	ldw	r3,-16(fp)
 8011458:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 801145c:	e0bffb17 	ldw	r2,-20(fp)
 8011460:	e0fffc17 	ldw	r3,-16(fp)
 8011464:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 8011468:	d0a73817 	ldw	r2,-25376(gp)
 801146c:	10800d03 	ldbu	r2,52(r2)
 8011470:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 8011474:	e0fffa03 	ldbu	r3,-24(fp)
 8011478:	e13ffa03 	ldbu	r4,-24(fp)
 801147c:	d0a73544 	addi	r2,gp,-25387
 8011480:	2085883a 	add	r2,r4,r2
 8011484:	10800003 	ldbu	r2,0(r2)
 8011488:	1009883a 	mov	r4,r2
 801148c:	d0a73817 	ldw	r2,-25376(gp)
 8011490:	10800d43 	ldbu	r2,53(r2)
 8011494:	0084303a 	nor	r2,zero,r2
 8011498:	2084703a 	and	r2,r4,r2
 801149c:	1009883a 	mov	r4,r2
 80114a0:	d0a73544 	addi	r2,gp,-25387
 80114a4:	1885883a 	add	r2,r3,r2
 80114a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 80114ac:	e0fffa03 	ldbu	r3,-24(fp)
 80114b0:	d0a73544 	addi	r2,gp,-25387
 80114b4:	1885883a 	add	r2,r3,r2
 80114b8:	10800003 	ldbu	r2,0(r2)
 80114bc:	10803fcc 	andi	r2,r2,255
 80114c0:	1000071e 	bne	r2,zero,80114e0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 80114c4:	d0a73817 	ldw	r2,-25376(gp)
 80114c8:	10800d83 	ldbu	r2,54(r2)
 80114cc:	0084303a 	nor	r2,zero,r2
 80114d0:	1007883a 	mov	r3,r2
 80114d4:	d0a73503 	ldbu	r2,-25388(gp)
 80114d8:	1884703a 	and	r2,r3,r2
 80114dc:	d0a73505 	stb	r2,-25388(gp)
    }
}
 80114e0:	0001883a 	nop
 80114e4:	e037883a 	mov	sp,fp
 80114e8:	df000017 	ldw	fp,0(sp)
 80114ec:	dec00104 	addi	sp,sp,4
 80114f0:	f800283a 	ret

080114f4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 80114f4:	defffb04 	addi	sp,sp,-20
 80114f8:	dfc00415 	stw	ra,16(sp)
 80114fc:	df000315 	stw	fp,12(sp)
 8011500:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8011504:	0140dc04 	movi	r5,880
 8011508:	010200b4 	movhi	r4,2050
 801150c:	21032804 	addi	r4,r4,3232
 8011510:	800f7380 	call	800f738 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 8011514:	008200b4 	movhi	r2,2050
 8011518:	10832804 	addi	r2,r2,3232
 801151c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 8011520:	008200b4 	movhi	r2,2050
 8011524:	10833304 	addi	r2,r2,3276
 8011528:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 801152c:	e03ffd0d 	sth	zero,-12(fp)
 8011530:	00001306 	br	8011580 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8011534:	e0bffe17 	ldw	r2,-8(fp)
 8011538:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 801153c:	e0bffe17 	ldw	r2,-8(fp)
 8011540:	e0ffff17 	ldw	r3,-4(fp)
 8011544:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 8011548:	e0bffe17 	ldw	r2,-8(fp)
 801154c:	00c00fc4 	movi	r3,63
 8011550:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 8011554:	e0bffe17 	ldw	r2,-8(fp)
 8011558:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 801155c:	e0bffe17 	ldw	r2,-8(fp)
 8011560:	10800b04 	addi	r2,r2,44
 8011564:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 8011568:	e0bfff17 	ldw	r2,-4(fp)
 801156c:	10800b04 	addi	r2,r2,44
 8011570:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 8011574:	e0bffd0b 	ldhu	r2,-12(fp)
 8011578:	10800044 	addi	r2,r2,1
 801157c:	e0bffd0d 	sth	r2,-12(fp)
 8011580:	e0bffd0b 	ldhu	r2,-12(fp)
 8011584:	108004f0 	cmpltui	r2,r2,19
 8011588:	103fea1e 	bne	r2,zero,8011534 <__alt_data_end+0xf8011534>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 801158c:	e0bffe17 	ldw	r2,-8(fp)
 8011590:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 8011594:	e0bffe17 	ldw	r2,-8(fp)
 8011598:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 801159c:	e0bffe17 	ldw	r2,-8(fp)
 80115a0:	00c00fc4 	movi	r3,63
 80115a4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 80115a8:	e0bffe17 	ldw	r2,-8(fp)
 80115ac:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80115b0:	008200b4 	movhi	r2,2050
 80115b4:	10832804 	addi	r2,r2,3232
 80115b8:	d0a73a15 	stw	r2,-25368(gp)
#endif
}
 80115bc:	0001883a 	nop
 80115c0:	e037883a 	mov	sp,fp
 80115c4:	dfc00117 	ldw	ra,4(sp)
 80115c8:	df000017 	ldw	fp,0(sp)
 80115cc:	dec00204 	addi	sp,sp,8
 80115d0:	f800283a 	ret

080115d4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 80115d4:	defffa04 	addi	sp,sp,-24
 80115d8:	dfc00515 	stw	ra,20(sp)
 80115dc:	df000415 	stw	fp,16(sp)
 80115e0:	df000404 	addi	fp,sp,16
 80115e4:	e13ffe15 	stw	r4,-8(fp)
 80115e8:	2805883a 	mov	r2,r5
 80115ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 80115f0:	e0bffe17 	ldw	r2,-8(fp)
 80115f4:	10800217 	ldw	r2,8(r2)
 80115f8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 80115fc:	e0bffd17 	ldw	r2,-12(fp)
 8011600:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8011604:	e0bffd17 	ldw	r2,-12(fp)
 8011608:	e0ffff0b 	ldhu	r3,-4(fp)
 801160c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 8011610:	e0bffd17 	ldw	r2,-12(fp)
 8011614:	10c00c03 	ldbu	r3,48(r2)
 8011618:	00bff7c4 	movi	r2,-33
 801161c:	1884703a 	and	r2,r3,r2
 8011620:	1007883a 	mov	r3,r2
 8011624:	e0bffd17 	ldw	r2,-12(fp)
 8011628:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 801162c:	e0bffd17 	ldw	r2,-12(fp)
 8011630:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8011634:	e0bffd17 	ldw	r2,-12(fp)
 8011638:	10800c03 	ldbu	r2,48(r2)
 801163c:	10803fcc 	andi	r2,r2,255
 8011640:	1000181e 	bne	r2,zero,80116a4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8011644:	e0bffd17 	ldw	r2,-12(fp)
 8011648:	10c00d83 	ldbu	r3,54(r2)
 801164c:	d0a73503 	ldbu	r2,-25388(gp)
 8011650:	1884b03a 	or	r2,r3,r2
 8011654:	d0a73505 	stb	r2,-25388(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8011658:	e0bffd17 	ldw	r2,-12(fp)
 801165c:	10800d03 	ldbu	r2,52(r2)
 8011660:	10c03fcc 	andi	r3,r2,255
 8011664:	e0bffd17 	ldw	r2,-12(fp)
 8011668:	10800d03 	ldbu	r2,52(r2)
 801166c:	11003fcc 	andi	r4,r2,255
 8011670:	d0a73544 	addi	r2,gp,-25387
 8011674:	2085883a 	add	r2,r4,r2
 8011678:	11000003 	ldbu	r4,0(r2)
 801167c:	e0bffd17 	ldw	r2,-12(fp)
 8011680:	10800d43 	ldbu	r2,53(r2)
 8011684:	2084b03a 	or	r2,r4,r2
 8011688:	1009883a 	mov	r4,r2
 801168c:	d0a73544 	addi	r2,gp,-25387
 8011690:	1885883a 	add	r2,r3,r2
 8011694:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 8011698:	00800044 	movi	r2,1
 801169c:	e0bffc05 	stb	r2,-16(fp)
 80116a0:	00000106 	br	80116a8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 80116a4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 80116a8:	e13ffe17 	ldw	r4,-8(fp)
 80116ac:	80116c80 	call	80116c8 <OS_FlagUnlink>
    return (sched);
 80116b0:	e0bffc03 	ldbu	r2,-16(fp)
}
 80116b4:	e037883a 	mov	sp,fp
 80116b8:	dfc00117 	ldw	ra,4(sp)
 80116bc:	df000017 	ldw	fp,0(sp)
 80116c0:	dec00204 	addi	sp,sp,8
 80116c4:	f800283a 	ret

080116c8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80116c8:	defffa04 	addi	sp,sp,-24
 80116cc:	df000515 	stw	fp,20(sp)
 80116d0:	df000504 	addi	fp,sp,20
 80116d4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80116d8:	e0bfff17 	ldw	r2,-4(fp)
 80116dc:	10800117 	ldw	r2,4(r2)
 80116e0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80116e4:	e0bfff17 	ldw	r2,-4(fp)
 80116e8:	10800017 	ldw	r2,0(r2)
 80116ec:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80116f0:	e0bffb17 	ldw	r2,-20(fp)
 80116f4:	10000b1e 	bne	r2,zero,8011724 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80116f8:	e0bfff17 	ldw	r2,-4(fp)
 80116fc:	10800317 	ldw	r2,12(r2)
 8011700:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8011704:	e0bffd17 	ldw	r2,-12(fp)
 8011708:	e0fffc17 	ldw	r3,-16(fp)
 801170c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8011710:	e0bffc17 	ldw	r2,-16(fp)
 8011714:	10000b26 	beq	r2,zero,8011744 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8011718:	e0bffc17 	ldw	r2,-16(fp)
 801171c:	10000115 	stw	zero,4(r2)
 8011720:	00000806 	br	8011744 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8011724:	e0bffb17 	ldw	r2,-20(fp)
 8011728:	e0fffc17 	ldw	r3,-16(fp)
 801172c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8011730:	e0bffc17 	ldw	r2,-16(fp)
 8011734:	10000326 	beq	r2,zero,8011744 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8011738:	e0bffc17 	ldw	r2,-16(fp)
 801173c:	e0fffb17 	ldw	r3,-20(fp)
 8011740:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8011744:	e0bfff17 	ldw	r2,-4(fp)
 8011748:	10800217 	ldw	r2,8(r2)
 801174c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8011750:	e0bffe17 	ldw	r2,-8(fp)
 8011754:	10000a15 	stw	zero,40(r2)
#endif
}
 8011758:	0001883a 	nop
 801175c:	e037883a 	mov	sp,fp
 8011760:	df000017 	ldw	fp,0(sp)
 8011764:	dec00104 	addi	sp,sp,4
 8011768:	f800283a 	ret

0801176c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 801176c:	defff404 	addi	sp,sp,-48
 8011770:	df000b15 	stw	fp,44(sp)
 8011774:	df000b04 	addi	fp,sp,44
 8011778:	e13ffc15 	stw	r4,-16(fp)
 801177c:	e17ffd15 	stw	r5,-12(fp)
 8011780:	e1bffe15 	stw	r6,-8(fp)
 8011784:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8011788:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 801178c:	e0bfff17 	ldw	r2,-4(fp)
 8011790:	1000021e 	bne	r2,zero,801179c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 8011794:	0005883a 	mov	r2,zero
 8011798:	00006506 	br	8011930 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 801179c:	e0bffc17 	ldw	r2,-16(fp)
 80117a0:	1000051e 	bne	r2,zero,80117b8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 80117a4:	e0bfff17 	ldw	r2,-4(fp)
 80117a8:	00c01884 	movi	r3,98
 80117ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 80117b0:	0005883a 	mov	r2,zero
 80117b4:	00005e06 	br	8011930 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 80117b8:	e0bffc17 	ldw	r2,-16(fp)
 80117bc:	108000cc 	andi	r2,r2,3
 80117c0:	10000526 	beq	r2,zero,80117d8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 80117c4:	e0bfff17 	ldw	r2,-4(fp)
 80117c8:	00c01884 	movi	r3,98
 80117cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 80117d0:	0005883a 	mov	r2,zero
 80117d4:	00005606 	br	8011930 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 80117d8:	e0bffd17 	ldw	r2,-12(fp)
 80117dc:	108000a8 	cmpgeui	r2,r2,2
 80117e0:	1000051e 	bne	r2,zero,80117f8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 80117e4:	e0bfff17 	ldw	r2,-4(fp)
 80117e8:	00c016c4 	movi	r3,91
 80117ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 80117f0:	0005883a 	mov	r2,zero
 80117f4:	00004e06 	br	8011930 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 80117f8:	e0bffe17 	ldw	r2,-8(fp)
 80117fc:	10800128 	cmpgeui	r2,r2,4
 8011800:	1000051e 	bne	r2,zero,8011818 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 8011804:	e0bfff17 	ldw	r2,-4(fp)
 8011808:	00c01704 	movi	r3,92
 801180c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011810:	0005883a 	mov	r2,zero
 8011814:	00004606 	br	8011930 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011818:	0005303a 	rdctl	r2,status
 801181c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011820:	e0fffb17 	ldw	r3,-20(fp)
 8011824:	00bfff84 	movi	r2,-2
 8011828:	1884703a 	and	r2,r3,r2
 801182c:	1001703a 	wrctl	status,r2
  
  return context;
 8011830:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011834:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 8011838:	d0a73217 	ldw	r2,-25400(gp)
 801183c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 8011840:	d0a73217 	ldw	r2,-25400(gp)
 8011844:	10000326 	beq	r2,zero,8011854 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 8011848:	d0a73217 	ldw	r2,-25400(gp)
 801184c:	10800117 	ldw	r2,4(r2)
 8011850:	d0a73215 	stw	r2,-25400(gp)
 8011854:	e0bff817 	ldw	r2,-32(fp)
 8011858:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801185c:	e0bff917 	ldw	r2,-28(fp)
 8011860:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 8011864:	e0bffa17 	ldw	r2,-24(fp)
 8011868:	1000051e 	bne	r2,zero,8011880 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 801186c:	e0bfff17 	ldw	r2,-4(fp)
 8011870:	00c01684 	movi	r3,90
 8011874:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011878:	0005883a 	mov	r2,zero
 801187c:	00002c06 	br	8011930 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 8011880:	e0bffc17 	ldw	r2,-16(fp)
 8011884:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 8011888:	e0fffc17 	ldw	r3,-16(fp)
 801188c:	e0bffe17 	ldw	r2,-8(fp)
 8011890:	1885883a 	add	r2,r3,r2
 8011894:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8011898:	e03ff715 	stw	zero,-36(fp)
 801189c:	00000c06 	br	80118d0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 80118a0:	e0bff617 	ldw	r2,-40(fp)
 80118a4:	e0fff517 	ldw	r3,-44(fp)
 80118a8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 80118ac:	e0bff517 	ldw	r2,-44(fp)
 80118b0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 80118b4:	e0fff517 	ldw	r3,-44(fp)
 80118b8:	e0bffe17 	ldw	r2,-8(fp)
 80118bc:	1885883a 	add	r2,r3,r2
 80118c0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 80118c4:	e0bff717 	ldw	r2,-36(fp)
 80118c8:	10800044 	addi	r2,r2,1
 80118cc:	e0bff715 	stw	r2,-36(fp)
 80118d0:	e0bffd17 	ldw	r2,-12(fp)
 80118d4:	10bfffc4 	addi	r2,r2,-1
 80118d8:	e0fff717 	ldw	r3,-36(fp)
 80118dc:	18bff036 	bltu	r3,r2,80118a0 <__alt_data_end+0xf80118a0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 80118e0:	e0bff617 	ldw	r2,-40(fp)
 80118e4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 80118e8:	e0bffa17 	ldw	r2,-24(fp)
 80118ec:	e0fffc17 	ldw	r3,-16(fp)
 80118f0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 80118f4:	e0bffa17 	ldw	r2,-24(fp)
 80118f8:	e0fffc17 	ldw	r3,-16(fp)
 80118fc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 8011900:	e0bffa17 	ldw	r2,-24(fp)
 8011904:	e0fffd17 	ldw	r3,-12(fp)
 8011908:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 801190c:	e0bffa17 	ldw	r2,-24(fp)
 8011910:	e0fffd17 	ldw	r3,-12(fp)
 8011914:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 8011918:	e0bffa17 	ldw	r2,-24(fp)
 801191c:	e0fffe17 	ldw	r3,-8(fp)
 8011920:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 8011924:	e0bfff17 	ldw	r2,-4(fp)
 8011928:	10000005 	stb	zero,0(r2)
    return (pmem);
 801192c:	e0bffa17 	ldw	r2,-24(fp)
}
 8011930:	e037883a 	mov	sp,fp
 8011934:	df000017 	ldw	fp,0(sp)
 8011938:	dec00104 	addi	sp,sp,4
 801193c:	f800283a 	ret

08011940 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 8011940:	defff804 	addi	sp,sp,-32
 8011944:	df000715 	stw	fp,28(sp)
 8011948:	df000704 	addi	fp,sp,28
 801194c:	e13ffe15 	stw	r4,-8(fp)
 8011950:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8011954:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8011958:	e0bfff17 	ldw	r2,-4(fp)
 801195c:	1000021e 	bne	r2,zero,8011968 <OSMemGet+0x28>
        return ((void *)0);
 8011960:	0005883a 	mov	r2,zero
 8011964:	00002e06 	br	8011a20 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 8011968:	e0bffe17 	ldw	r2,-8(fp)
 801196c:	1000051e 	bne	r2,zero,8011984 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011970:	e0bfff17 	ldw	r2,-4(fp)
 8011974:	00c01804 	movi	r3,96
 8011978:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 801197c:	0005883a 	mov	r2,zero
 8011980:	00002706 	br	8011a20 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011984:	0005303a 	rdctl	r2,status
 8011988:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801198c:	e0fffd17 	ldw	r3,-12(fp)
 8011990:	00bfff84 	movi	r2,-2
 8011994:	1884703a 	and	r2,r3,r2
 8011998:	1001703a 	wrctl	status,r2
  
  return context;
 801199c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 80119a0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 80119a4:	e0bffe17 	ldw	r2,-8(fp)
 80119a8:	10800417 	ldw	r2,16(r2)
 80119ac:	10001426 	beq	r2,zero,8011a00 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 80119b0:	e0bffe17 	ldw	r2,-8(fp)
 80119b4:	10800117 	ldw	r2,4(r2)
 80119b8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 80119bc:	e0bffb17 	ldw	r2,-20(fp)
 80119c0:	10c00017 	ldw	r3,0(r2)
 80119c4:	e0bffe17 	ldw	r2,-8(fp)
 80119c8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 80119cc:	e0bffe17 	ldw	r2,-8(fp)
 80119d0:	10800417 	ldw	r2,16(r2)
 80119d4:	10ffffc4 	addi	r3,r2,-1
 80119d8:	e0bffe17 	ldw	r2,-8(fp)
 80119dc:	10c00415 	stw	r3,16(r2)
 80119e0:	e0bff917 	ldw	r2,-28(fp)
 80119e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80119e8:	e0bffa17 	ldw	r2,-24(fp)
 80119ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 80119f0:	e0bfff17 	ldw	r2,-4(fp)
 80119f4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 80119f8:	e0bffb17 	ldw	r2,-20(fp)
 80119fc:	00000806 	br	8011a20 <OSMemGet+0xe0>
 8011a00:	e0bff917 	ldw	r2,-28(fp)
 8011a04:	e0bffc15 	stw	r2,-16(fp)
 8011a08:	e0bffc17 	ldw	r2,-16(fp)
 8011a0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 8011a10:	e0bfff17 	ldw	r2,-4(fp)
 8011a14:	00c01744 	movi	r3,93
 8011a18:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 8011a1c:	0005883a 	mov	r2,zero
}
 8011a20:	e037883a 	mov	sp,fp
 8011a24:	df000017 	ldw	fp,0(sp)
 8011a28:	dec00104 	addi	sp,sp,4
 8011a2c:	f800283a 	ret

08011a30 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8011a30:	defff704 	addi	sp,sp,-36
 8011a34:	dfc00815 	stw	ra,32(sp)
 8011a38:	df000715 	stw	fp,28(sp)
 8011a3c:	df000704 	addi	fp,sp,28
 8011a40:	e13ffd15 	stw	r4,-12(fp)
 8011a44:	e17ffe15 	stw	r5,-8(fp)
 8011a48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011a4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8011a50:	e0bfff17 	ldw	r2,-4(fp)
 8011a54:	1000021e 	bne	r2,zero,8011a60 <OSMemNameGet+0x30>
        return (0);
 8011a58:	0005883a 	mov	r2,zero
 8011a5c:	00002b06 	br	8011b0c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8011a60:	e0bffd17 	ldw	r2,-12(fp)
 8011a64:	1000051e 	bne	r2,zero,8011a7c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011a68:	e0bfff17 	ldw	r2,-4(fp)
 8011a6c:	00c01804 	movi	r3,96
 8011a70:	10c00005 	stb	r3,0(r2)
        return (0);
 8011a74:	0005883a 	mov	r2,zero
 8011a78:	00002406 	br	8011b0c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8011a7c:	e0bffe17 	ldw	r2,-8(fp)
 8011a80:	1000051e 	bne	r2,zero,8011a98 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8011a84:	e0bfff17 	ldw	r2,-4(fp)
 8011a88:	00c00304 	movi	r3,12
 8011a8c:	10c00005 	stb	r3,0(r2)
        return (0);
 8011a90:	0005883a 	mov	r2,zero
 8011a94:	00001d06 	br	8011b0c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8011a98:	d0a73703 	ldbu	r2,-25380(gp)
 8011a9c:	10803fcc 	andi	r2,r2,255
 8011aa0:	10000526 	beq	r2,zero,8011ab8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 8011aa4:	e0bfff17 	ldw	r2,-4(fp)
 8011aa8:	00c00444 	movi	r3,17
 8011aac:	10c00005 	stb	r3,0(r2)
        return (0);
 8011ab0:	0005883a 	mov	r2,zero
 8011ab4:	00001506 	br	8011b0c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011ab8:	0005303a 	rdctl	r2,status
 8011abc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011ac0:	e0fffb17 	ldw	r3,-20(fp)
 8011ac4:	00bfff84 	movi	r2,-2
 8011ac8:	1884703a 	and	r2,r3,r2
 8011acc:	1001703a 	wrctl	status,r2
  
  return context;
 8011ad0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8011ad4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 8011ad8:	e0bffd17 	ldw	r2,-12(fp)
 8011adc:	10800504 	addi	r2,r2,20
 8011ae0:	100b883a 	mov	r5,r2
 8011ae4:	e13ffe17 	ldw	r4,-8(fp)
 8011ae8:	800f9380 	call	800f938 <OS_StrCopy>
 8011aec:	e0bffa05 	stb	r2,-24(fp)
 8011af0:	e0bff917 	ldw	r2,-28(fp)
 8011af4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011af8:	e0bffc17 	ldw	r2,-16(fp)
 8011afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011b00:	e0bfff17 	ldw	r2,-4(fp)
 8011b04:	10000005 	stb	zero,0(r2)
    return (len);
 8011b08:	e0bffa03 	ldbu	r2,-24(fp)
}
 8011b0c:	e037883a 	mov	sp,fp
 8011b10:	dfc00117 	ldw	ra,4(sp)
 8011b14:	df000017 	ldw	fp,0(sp)
 8011b18:	dec00204 	addi	sp,sp,8
 8011b1c:	f800283a 	ret

08011b20 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8011b20:	defff604 	addi	sp,sp,-40
 8011b24:	dfc00915 	stw	ra,36(sp)
 8011b28:	df000815 	stw	fp,32(sp)
 8011b2c:	df000804 	addi	fp,sp,32
 8011b30:	e13ffd15 	stw	r4,-12(fp)
 8011b34:	e17ffe15 	stw	r5,-8(fp)
 8011b38:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011b3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8011b40:	e0bfff17 	ldw	r2,-4(fp)
 8011b44:	10003526 	beq	r2,zero,8011c1c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8011b48:	e0bffd17 	ldw	r2,-12(fp)
 8011b4c:	1000041e 	bne	r2,zero,8011b60 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011b50:	e0bfff17 	ldw	r2,-4(fp)
 8011b54:	00c01804 	movi	r3,96
 8011b58:	10c00005 	stb	r3,0(r2)
        return;
 8011b5c:	00003006 	br	8011c20 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8011b60:	e0bffe17 	ldw	r2,-8(fp)
 8011b64:	1000041e 	bne	r2,zero,8011b78 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 8011b68:	e0bfff17 	ldw	r2,-4(fp)
 8011b6c:	00c00304 	movi	r3,12
 8011b70:	10c00005 	stb	r3,0(r2)
        return;
 8011b74:	00002a06 	br	8011c20 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8011b78:	d0a73703 	ldbu	r2,-25380(gp)
 8011b7c:	10803fcc 	andi	r2,r2,255
 8011b80:	10000426 	beq	r2,zero,8011b94 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 8011b84:	e0bfff17 	ldw	r2,-4(fp)
 8011b88:	00c00484 	movi	r3,18
 8011b8c:	10c00005 	stb	r3,0(r2)
        return;
 8011b90:	00002306 	br	8011c20 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011b94:	0005303a 	rdctl	r2,status
 8011b98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011b9c:	e0fffc17 	ldw	r3,-16(fp)
 8011ba0:	00bfff84 	movi	r2,-2
 8011ba4:	1884703a 	and	r2,r3,r2
 8011ba8:	1001703a 	wrctl	status,r2
  
  return context;
 8011bac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8011bb0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8011bb4:	e13ffe17 	ldw	r4,-8(fp)
 8011bb8:	800f9ac0 	call	800f9ac <OS_StrLen>
 8011bbc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 8011bc0:	e0bffa03 	ldbu	r2,-24(fp)
 8011bc4:	10800830 	cmpltui	r2,r2,32
 8011bc8:	1000081e 	bne	r2,zero,8011bec <OSMemNameSet+0xcc>
 8011bcc:	e0bff817 	ldw	r2,-32(fp)
 8011bd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011bd4:	e0bff917 	ldw	r2,-28(fp)
 8011bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 8011bdc:	e0bfff17 	ldw	r2,-4(fp)
 8011be0:	00c018c4 	movi	r3,99
 8011be4:	10c00005 	stb	r3,0(r2)
        return;
 8011be8:	00000d06 	br	8011c20 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 8011bec:	e0bffd17 	ldw	r2,-12(fp)
 8011bf0:	10800504 	addi	r2,r2,20
 8011bf4:	e17ffe17 	ldw	r5,-8(fp)
 8011bf8:	1009883a 	mov	r4,r2
 8011bfc:	800f9380 	call	800f938 <OS_StrCopy>
 8011c00:	e0bff817 	ldw	r2,-32(fp)
 8011c04:	e0bffb15 	stw	r2,-20(fp)
 8011c08:	e0bffb17 	ldw	r2,-20(fp)
 8011c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011c10:	e0bfff17 	ldw	r2,-4(fp)
 8011c14:	10000005 	stb	zero,0(r2)
 8011c18:	00000106 	br	8011c20 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 8011c1c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 8011c20:	e037883a 	mov	sp,fp
 8011c24:	dfc00117 	ldw	ra,4(sp)
 8011c28:	df000017 	ldw	fp,0(sp)
 8011c2c:	dec00204 	addi	sp,sp,8
 8011c30:	f800283a 	ret

08011c34 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 8011c34:	defff904 	addi	sp,sp,-28
 8011c38:	df000615 	stw	fp,24(sp)
 8011c3c:	df000604 	addi	fp,sp,24
 8011c40:	e13ffe15 	stw	r4,-8(fp)
 8011c44:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011c48:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8011c4c:	e0bffe17 	ldw	r2,-8(fp)
 8011c50:	1000021e 	bne	r2,zero,8011c5c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8011c54:	00801804 	movi	r2,96
 8011c58:	00002806 	br	8011cfc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 8011c5c:	e0bfff17 	ldw	r2,-4(fp)
 8011c60:	1000021e 	bne	r2,zero,8011c6c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 8011c64:	008017c4 	movi	r2,95
 8011c68:	00002406 	br	8011cfc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011c6c:	0005303a 	rdctl	r2,status
 8011c70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011c74:	e0fffd17 	ldw	r3,-12(fp)
 8011c78:	00bfff84 	movi	r2,-2
 8011c7c:	1884703a 	and	r2,r3,r2
 8011c80:	1001703a 	wrctl	status,r2
  
  return context;
 8011c84:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011c88:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 8011c8c:	e0bffe17 	ldw	r2,-8(fp)
 8011c90:	10c00417 	ldw	r3,16(r2)
 8011c94:	e0bffe17 	ldw	r2,-8(fp)
 8011c98:	10800317 	ldw	r2,12(r2)
 8011c9c:	18800636 	bltu	r3,r2,8011cb8 <OSMemPut+0x84>
 8011ca0:	e0bffa17 	ldw	r2,-24(fp)
 8011ca4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011ca8:	e0bffb17 	ldw	r2,-20(fp)
 8011cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 8011cb0:	00801784 	movi	r2,94
 8011cb4:	00001106 	br	8011cfc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 8011cb8:	e0bffe17 	ldw	r2,-8(fp)
 8011cbc:	10c00117 	ldw	r3,4(r2)
 8011cc0:	e0bfff17 	ldw	r2,-4(fp)
 8011cc4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 8011cc8:	e0bffe17 	ldw	r2,-8(fp)
 8011ccc:	e0ffff17 	ldw	r3,-4(fp)
 8011cd0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 8011cd4:	e0bffe17 	ldw	r2,-8(fp)
 8011cd8:	10800417 	ldw	r2,16(r2)
 8011cdc:	10c00044 	addi	r3,r2,1
 8011ce0:	e0bffe17 	ldw	r2,-8(fp)
 8011ce4:	10c00415 	stw	r3,16(r2)
 8011ce8:	e0bffa17 	ldw	r2,-24(fp)
 8011cec:	e0bffc15 	stw	r2,-16(fp)
 8011cf0:	e0bffc17 	ldw	r2,-16(fp)
 8011cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 8011cf8:	0005883a 	mov	r2,zero
}
 8011cfc:	e037883a 	mov	sp,fp
 8011d00:	df000017 	ldw	fp,0(sp)
 8011d04:	dec00104 	addi	sp,sp,4
 8011d08:	f800283a 	ret

08011d0c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 8011d0c:	defffa04 	addi	sp,sp,-24
 8011d10:	df000515 	stw	fp,20(sp)
 8011d14:	df000504 	addi	fp,sp,20
 8011d18:	e13ffe15 	stw	r4,-8(fp)
 8011d1c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011d20:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8011d24:	e0bffe17 	ldw	r2,-8(fp)
 8011d28:	1000021e 	bne	r2,zero,8011d34 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8011d2c:	00801804 	movi	r2,96
 8011d30:	00002c06 	br	8011de4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 8011d34:	e0bfff17 	ldw	r2,-4(fp)
 8011d38:	1000021e 	bne	r2,zero,8011d44 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 8011d3c:	00801844 	movi	r2,97
 8011d40:	00002806 	br	8011de4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011d44:	0005303a 	rdctl	r2,status
 8011d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011d4c:	e0fffc17 	ldw	r3,-16(fp)
 8011d50:	00bfff84 	movi	r2,-2
 8011d54:	1884703a 	and	r2,r3,r2
 8011d58:	1001703a 	wrctl	status,r2
  
  return context;
 8011d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011d60:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 8011d64:	e0bffe17 	ldw	r2,-8(fp)
 8011d68:	10c00017 	ldw	r3,0(r2)
 8011d6c:	e0bfff17 	ldw	r2,-4(fp)
 8011d70:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 8011d74:	e0bffe17 	ldw	r2,-8(fp)
 8011d78:	10c00117 	ldw	r3,4(r2)
 8011d7c:	e0bfff17 	ldw	r2,-4(fp)
 8011d80:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 8011d84:	e0bffe17 	ldw	r2,-8(fp)
 8011d88:	10c00217 	ldw	r3,8(r2)
 8011d8c:	e0bfff17 	ldw	r2,-4(fp)
 8011d90:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 8011d94:	e0bffe17 	ldw	r2,-8(fp)
 8011d98:	10c00317 	ldw	r3,12(r2)
 8011d9c:	e0bfff17 	ldw	r2,-4(fp)
 8011da0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 8011da4:	e0bffe17 	ldw	r2,-8(fp)
 8011da8:	10c00417 	ldw	r3,16(r2)
 8011dac:	e0bfff17 	ldw	r2,-4(fp)
 8011db0:	10c00415 	stw	r3,16(r2)
 8011db4:	e0bffb17 	ldw	r2,-20(fp)
 8011db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011dbc:	e0bffd17 	ldw	r2,-12(fp)
 8011dc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 8011dc4:	e0bfff17 	ldw	r2,-4(fp)
 8011dc8:	10c00317 	ldw	r3,12(r2)
 8011dcc:	e0bfff17 	ldw	r2,-4(fp)
 8011dd0:	10800417 	ldw	r2,16(r2)
 8011dd4:	1887c83a 	sub	r3,r3,r2
 8011dd8:	e0bfff17 	ldw	r2,-4(fp)
 8011ddc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 8011de0:	0005883a 	mov	r2,zero
}
 8011de4:	e037883a 	mov	sp,fp
 8011de8:	df000017 	ldw	fp,0(sp)
 8011dec:	dec00104 	addi	sp,sp,4
 8011df0:	f800283a 	ret

08011df4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8011df4:	defffc04 	addi	sp,sp,-16
 8011df8:	dfc00315 	stw	ra,12(sp)
 8011dfc:	df000215 	stw	fp,8(sp)
 8011e00:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8011e04:	01430c04 	movi	r5,3120
 8011e08:	010200b4 	movhi	r4,2050
 8011e0c:	21040404 	addi	r4,r4,4112
 8011e10:	800f7380 	call	800f738 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 8011e14:	008200b4 	movhi	r2,2050
 8011e18:	10840404 	addi	r2,r2,4112
 8011e1c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 8011e20:	e03fff0d 	sth	zero,-4(fp)
 8011e24:	00001306 	br	8011e74 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 8011e28:	e0bfff0b 	ldhu	r2,-4(fp)
 8011e2c:	10800044 	addi	r2,r2,1
 8011e30:	10c00d24 	muli	r3,r2,52
 8011e34:	008200b4 	movhi	r2,2050
 8011e38:	10840404 	addi	r2,r2,4112
 8011e3c:	1887883a 	add	r3,r3,r2
 8011e40:	e0bffe17 	ldw	r2,-8(fp)
 8011e44:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 8011e48:	e0bffe17 	ldw	r2,-8(fp)
 8011e4c:	00c00fc4 	movi	r3,63
 8011e50:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 8011e54:	e0bffe17 	ldw	r2,-8(fp)
 8011e58:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 8011e5c:	e0bffe17 	ldw	r2,-8(fp)
 8011e60:	10800d04 	addi	r2,r2,52
 8011e64:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 8011e68:	e0bfff0b 	ldhu	r2,-4(fp)
 8011e6c:	10800044 	addi	r2,r2,1
 8011e70:	e0bfff0d 	sth	r2,-4(fp)
 8011e74:	e0bfff0b 	ldhu	r2,-4(fp)
 8011e78:	10800ef0 	cmpltui	r2,r2,59
 8011e7c:	103fea1e 	bne	r2,zero,8011e28 <__alt_data_end+0xf8011e28>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8011e80:	e0bffe17 	ldw	r2,-8(fp)
 8011e84:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 8011e88:	e0bffe17 	ldw	r2,-8(fp)
 8011e8c:	00c00fc4 	movi	r3,63
 8011e90:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 8011e94:	e0bffe17 	ldw	r2,-8(fp)
 8011e98:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 8011e9c:	008200b4 	movhi	r2,2050
 8011ea0:	10840404 	addi	r2,r2,4112
 8011ea4:	d0a73215 	stw	r2,-25400(gp)
#endif
}
 8011ea8:	0001883a 	nop
 8011eac:	e037883a 	mov	sp,fp
 8011eb0:	dfc00117 	ldw	ra,4(sp)
 8011eb4:	df000017 	ldw	fp,0(sp)
 8011eb8:	dec00204 	addi	sp,sp,8
 8011ebc:	f800283a 	ret

08011ec0 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
 8011ec0:	defff704 	addi	sp,sp,-36
 8011ec4:	df000815 	stw	fp,32(sp)
 8011ec8:	df000804 	addi	fp,sp,32
 8011ecc:	e13ffe15 	stw	r4,-8(fp)
 8011ed0:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8011ed4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
 8011ed8:	e0bfff17 	ldw	r2,-4(fp)
 8011edc:	1000021e 	bne	r2,zero,8011ee8 <OSMutexAccept+0x28>
        return (OS_FALSE);
 8011ee0:	0005883a 	mov	r2,zero
 8011ee4:	00005b06 	br	8012054 <OSMutexAccept+0x194>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8011ee8:	e0bffe17 	ldw	r2,-8(fp)
 8011eec:	1000051e 	bne	r2,zero,8011f04 <OSMutexAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 8011ef0:	e0bfff17 	ldw	r2,-4(fp)
 8011ef4:	00c00104 	movi	r3,4
 8011ef8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
 8011efc:	0005883a 	mov	r2,zero
 8011f00:	00005406 	br	8012054 <OSMutexAccept+0x194>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
 8011f04:	e0bffe17 	ldw	r2,-8(fp)
 8011f08:	10800003 	ldbu	r2,0(r2)
 8011f0c:	10803fcc 	andi	r2,r2,255
 8011f10:	10800120 	cmpeqi	r2,r2,4
 8011f14:	1000051e 	bne	r2,zero,8011f2c <OSMutexAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 8011f18:	e0bfff17 	ldw	r2,-4(fp)
 8011f1c:	00c00044 	movi	r3,1
 8011f20:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
 8011f24:	0005883a 	mov	r2,zero
 8011f28:	00004a06 	br	8012054 <OSMutexAccept+0x194>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
 8011f2c:	d0a73703 	ldbu	r2,-25380(gp)
 8011f30:	10803fcc 	andi	r2,r2,255
 8011f34:	10000526 	beq	r2,zero,8011f4c <OSMutexAccept+0x8c>
        *perr = OS_ERR_PEND_ISR;
 8011f38:	e0bfff17 	ldw	r2,-4(fp)
 8011f3c:	00c00084 	movi	r3,2
 8011f40:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
 8011f44:	0005883a 	mov	r2,zero
 8011f48:	00004206 	br	8012054 <OSMutexAccept+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011f4c:	0005303a 	rdctl	r2,status
 8011f50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011f54:	e0fffd17 	ldw	r3,-12(fp)
 8011f58:	00bfff84 	movi	r2,-2
 8011f5c:	1884703a 	and	r2,r3,r2
 8011f60:	1001703a 	wrctl	status,r2
  
  return context;
 8011f64:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
 8011f68:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
 8011f6c:	e0bffe17 	ldw	r2,-8(fp)
 8011f70:	1080020b 	ldhu	r2,8(r2)
 8011f74:	10bfffcc 	andi	r2,r2,65535
 8011f78:	1004d23a 	srli	r2,r2,8
 8011f7c:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
 8011f80:	e0bffe17 	ldw	r2,-8(fp)
 8011f84:	1080020b 	ldhu	r2,8(r2)
 8011f88:	10bfffcc 	andi	r2,r2,65535
 8011f8c:	10803fcc 	andi	r2,r2,255
 8011f90:	10803fd8 	cmpnei	r2,r2,255
 8011f94:	1000281e 	bne	r2,zero,8012038 <OSMutexAccept+0x178>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
 8011f98:	e0bffe17 	ldw	r2,-8(fp)
 8011f9c:	10c0020b 	ldhu	r3,8(r2)
 8011fa0:	00bfc004 	movi	r2,-256
 8011fa4:	1884703a 	and	r2,r3,r2
 8011fa8:	1007883a 	mov	r3,r2
 8011fac:	e0bffe17 	ldw	r2,-8(fp)
 8011fb0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
 8011fb4:	e0bffe17 	ldw	r2,-8(fp)
 8011fb8:	10c0020b 	ldhu	r3,8(r2)
 8011fbc:	d0a73817 	ldw	r2,-25376(gp)
 8011fc0:	10800c83 	ldbu	r2,50(r2)
 8011fc4:	10803fcc 	andi	r2,r2,255
 8011fc8:	1884b03a 	or	r2,r3,r2
 8011fcc:	1007883a 	mov	r3,r2
 8011fd0:	e0bffe17 	ldw	r2,-8(fp)
 8011fd4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
 8011fd8:	d0e73817 	ldw	r3,-25376(gp)
 8011fdc:	e0bffe17 	ldw	r2,-8(fp)
 8011fe0:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
 8011fe4:	d0a73817 	ldw	r2,-25376(gp)
 8011fe8:	10800c83 	ldbu	r2,50(r2)
 8011fec:	10803fcc 	andi	r2,r2,255
 8011ff0:	e0fffa03 	ldbu	r3,-24(fp)
 8011ff4:	18800836 	bltu	r3,r2,8012018 <OSMutexAccept+0x158>
 8011ff8:	e0bff817 	ldw	r2,-32(fp)
 8011ffc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012000:	e0bff917 	ldw	r2,-28(fp)
 8012004:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
 8012008:	e0bfff17 	ldw	r2,-4(fp)
 801200c:	00c01e04 	movi	r3,120
 8012010:	10c00005 	stb	r3,0(r2)
 8012014:	00000606 	br	8012030 <OSMutexAccept+0x170>
 8012018:	e0bff817 	ldw	r2,-32(fp)
 801201c:	e0bffb15 	stw	r2,-20(fp)
 8012020:	e0bffb17 	ldw	r2,-20(fp)
 8012024:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
 8012028:	e0bfff17 	ldw	r2,-4(fp)
 801202c:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
 8012030:	00800044 	movi	r2,1
 8012034:	00000706 	br	8012054 <OSMutexAccept+0x194>
 8012038:	e0bff817 	ldw	r2,-32(fp)
 801203c:	e0bffc15 	stw	r2,-16(fp)
 8012040:	e0bffc17 	ldw	r2,-16(fp)
 8012044:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8012048:	e0bfff17 	ldw	r2,-4(fp)
 801204c:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
 8012050:	0005883a 	mov	r2,zero
}
 8012054:	e037883a 	mov	sp,fp
 8012058:	df000017 	ldw	fp,0(sp)
 801205c:	dec00104 	addi	sp,sp,4
 8012060:	f800283a 	ret

08012064 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
 8012064:	defff604 	addi	sp,sp,-40
 8012068:	dfc00915 	stw	ra,36(sp)
 801206c:	df000815 	stw	fp,32(sp)
 8012070:	df000804 	addi	fp,sp,32
 8012074:	2005883a 	mov	r2,r4
 8012078:	e17fff15 	stw	r5,-4(fp)
 801207c:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8012080:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8012084:	e0bfff17 	ldw	r2,-4(fp)
 8012088:	1000021e 	bne	r2,zero,8012094 <OSMutexCreate+0x30>
        return ((OS_EVENT *)0);
 801208c:	0005883a 	mov	r2,zero
 8012090:	00006106 	br	8012218 <OSMutexCreate+0x1b4>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
 8012094:	e0bffe03 	ldbu	r2,-8(fp)
 8012098:	10800530 	cmpltui	r2,r2,20
 801209c:	1000051e 	bne	r2,zero,80120b4 <OSMutexCreate+0x50>
        *perr = OS_ERR_PRIO_INVALID;
 80120a0:	e0bfff17 	ldw	r2,-4(fp)
 80120a4:	00c00a84 	movi	r3,42
 80120a8:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
 80120ac:	0005883a 	mov	r2,zero
 80120b0:	00005906 	br	8012218 <OSMutexCreate+0x1b4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80120b4:	d0a73703 	ldbu	r2,-25380(gp)
 80120b8:	10803fcc 	andi	r2,r2,255
 80120bc:	10000526 	beq	r2,zero,80120d4 <OSMutexCreate+0x70>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
 80120c0:	e0bfff17 	ldw	r2,-4(fp)
 80120c4:	00c00404 	movi	r3,16
 80120c8:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
 80120cc:	0005883a 	mov	r2,zero
 80120d0:	00005106 	br	8012218 <OSMutexCreate+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80120d4:	0005303a 	rdctl	r2,status
 80120d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80120dc:	e0fffd17 	ldw	r3,-12(fp)
 80120e0:	00bfff84 	movi	r2,-2
 80120e4:	1884703a 	and	r2,r3,r2
 80120e8:	1001703a 	wrctl	status,r2
  
  return context;
 80120ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80120f0:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
 80120f4:	e0fffe03 	ldbu	r3,-8(fp)
 80120f8:	008200b4 	movhi	r2,2050
 80120fc:	108f9c04 	addi	r2,r2,15984
 8012100:	18c7883a 	add	r3,r3,r3
 8012104:	18c7883a 	add	r3,r3,r3
 8012108:	10c5883a 	add	r2,r2,r3
 801210c:	10800017 	ldw	r2,0(r2)
 8012110:	10000926 	beq	r2,zero,8012138 <OSMutexCreate+0xd4>
 8012114:	e0bff817 	ldw	r2,-32(fp)
 8012118:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801211c:	e0bff917 	ldw	r2,-28(fp)
 8012120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
 8012124:	e0bfff17 	ldw	r2,-4(fp)
 8012128:	00c00a04 	movi	r3,40
 801212c:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
 8012130:	0005883a 	mov	r2,zero
 8012134:	00003806 	br	8012218 <OSMutexCreate+0x1b4>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
 8012138:	e0fffe03 	ldbu	r3,-8(fp)
 801213c:	008200b4 	movhi	r2,2050
 8012140:	108f9c04 	addi	r2,r2,15984
 8012144:	18c7883a 	add	r3,r3,r3
 8012148:	18c7883a 	add	r3,r3,r3
 801214c:	10c5883a 	add	r2,r2,r3
 8012150:	00c00044 	movi	r3,1
 8012154:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
 8012158:	d0a73617 	ldw	r2,-25384(gp)
 801215c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
 8012160:	e0bffb17 	ldw	r2,-20(fp)
 8012164:	1000101e 	bne	r2,zero,80121a8 <OSMutexCreate+0x144>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
 8012168:	e0fffe03 	ldbu	r3,-8(fp)
 801216c:	008200b4 	movhi	r2,2050
 8012170:	108f9c04 	addi	r2,r2,15984
 8012174:	18c7883a 	add	r3,r3,r3
 8012178:	18c7883a 	add	r3,r3,r3
 801217c:	10c5883a 	add	r2,r2,r3
 8012180:	10000015 	stw	zero,0(r2)
 8012184:	e0bff817 	ldw	r2,-32(fp)
 8012188:	e0bffa15 	stw	r2,-24(fp)
 801218c:	e0bffa17 	ldw	r2,-24(fp)
 8012190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
 8012194:	e0bfff17 	ldw	r2,-4(fp)
 8012198:	00c00104 	movi	r3,4
 801219c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80121a0:	e0bffb17 	ldw	r2,-20(fp)
 80121a4:	00001c06 	br	8012218 <OSMutexCreate+0x1b4>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
 80121a8:	d0a73617 	ldw	r2,-25384(gp)
 80121ac:	10800117 	ldw	r2,4(r2)
 80121b0:	d0a73615 	stw	r2,-25384(gp)
 80121b4:	e0bff817 	ldw	r2,-32(fp)
 80121b8:	e0bffc15 	stw	r2,-16(fp)
 80121bc:	e0bffc17 	ldw	r2,-16(fp)
 80121c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
 80121c4:	e0bffb17 	ldw	r2,-20(fp)
 80121c8:	00c00104 	movi	r3,4
 80121cc:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
 80121d0:	e0bffe03 	ldbu	r2,-8(fp)
 80121d4:	1004923a 	slli	r2,r2,8
 80121d8:	10803fd4 	ori	r2,r2,255
 80121dc:	1007883a 	mov	r3,r2
 80121e0:	e0bffb17 	ldw	r2,-20(fp)
 80121e4:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
 80121e8:	e0bffb17 	ldw	r2,-20(fp)
 80121ec:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
 80121f0:	e0bffb17 	ldw	r2,-20(fp)
 80121f4:	00c00fc4 	movi	r3,63
 80121f8:	10c00385 	stb	r3,14(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
 80121fc:	e0bffb17 	ldw	r2,-20(fp)
 8012200:	100003c5 	stb	zero,15(r2)
#endif
    OS_EventWaitListInit(pevent);
 8012204:	e13ffb17 	ldw	r4,-20(fp)
 8012208:	800f3580 	call	800f358 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
 801220c:	e0bfff17 	ldw	r2,-4(fp)
 8012210:	10000005 	stb	zero,0(r2)
    return (pevent);
 8012214:	e0bffb17 	ldw	r2,-20(fp)
}
 8012218:	e037883a 	mov	sp,fp
 801221c:	dfc00117 	ldw	ra,4(sp)
 8012220:	df000017 	ldw	fp,0(sp)
 8012224:	dec00204 	addi	sp,sp,8
 8012228:	f800283a 	ret

0801222c <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 801222c:	defff004 	addi	sp,sp,-64
 8012230:	dfc00f15 	stw	ra,60(sp)
 8012234:	df000e15 	stw	fp,56(sp)
 8012238:	df000e04 	addi	fp,sp,56
 801223c:	e13ffd15 	stw	r4,-12(fp)
 8012240:	2805883a 	mov	r2,r5
 8012244:	e1bfff15 	stw	r6,-4(fp)
 8012248:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801224c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8012250:	e0bfff17 	ldw	r2,-4(fp)
 8012254:	1000021e 	bne	r2,zero,8012260 <OSMutexDel+0x34>
        return (pevent);
 8012258:	e0bffd17 	ldw	r2,-12(fp)
 801225c:	0000ad06 	br	8012514 <OSMutexDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8012260:	e0bffd17 	ldw	r2,-12(fp)
 8012264:	1000051e 	bne	r2,zero,801227c <OSMutexDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8012268:	e0bfff17 	ldw	r2,-4(fp)
 801226c:	00c00104 	movi	r3,4
 8012270:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8012274:	e0bffd17 	ldw	r2,-12(fp)
 8012278:	0000a606 	br	8012514 <OSMutexDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 801227c:	e0bffd17 	ldw	r2,-12(fp)
 8012280:	10800003 	ldbu	r2,0(r2)
 8012284:	10803fcc 	andi	r2,r2,255
 8012288:	10800120 	cmpeqi	r2,r2,4
 801228c:	1000051e 	bne	r2,zero,80122a4 <OSMutexDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8012290:	e0bfff17 	ldw	r2,-4(fp)
 8012294:	00c00044 	movi	r3,1
 8012298:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801229c:	e0bffd17 	ldw	r2,-12(fp)
 80122a0:	00009c06 	br	8012514 <OSMutexDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80122a4:	d0a73703 	ldbu	r2,-25380(gp)
 80122a8:	10803fcc 	andi	r2,r2,255
 80122ac:	10000526 	beq	r2,zero,80122c4 <OSMutexDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 80122b0:	e0bfff17 	ldw	r2,-4(fp)
 80122b4:	00c003c4 	movi	r3,15
 80122b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80122bc:	e0bffd17 	ldw	r2,-12(fp)
 80122c0:	00009406 	br	8012514 <OSMutexDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80122c4:	0005303a 	rdctl	r2,status
 80122c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80122cc:	e0fffc17 	ldw	r3,-16(fp)
 80122d0:	00bfff84 	movi	r2,-2
 80122d4:	1884703a 	and	r2,r3,r2
 80122d8:	1001703a 	wrctl	status,r2
  
  return context;
 80122dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80122e0:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
 80122e4:	e0bffd17 	ldw	r2,-12(fp)
 80122e8:	10800283 	ldbu	r2,10(r2)
 80122ec:	10803fcc 	andi	r2,r2,255
 80122f0:	10000326 	beq	r2,zero,8012300 <OSMutexDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 80122f4:	00800044 	movi	r2,1
 80122f8:	e0bff205 	stb	r2,-56(fp)
 80122fc:	00000106 	br	8012304 <OSMutexDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8012300:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
 8012304:	e0bffe03 	ldbu	r2,-8(fp)
 8012308:	10000326 	beq	r2,zero,8012318 <OSMutexDel+0xec>
 801230c:	10800060 	cmpeqi	r2,r2,1
 8012310:	10002f1e 	bne	r2,zero,80123d0 <OSMutexDel+0x1a4>
 8012314:	00007406 	br	80124e8 <OSMutexDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
 8012318:	e0bff203 	ldbu	r2,-56(fp)
 801231c:	1000221e 	bne	r2,zero,80123a8 <OSMutexDel+0x17c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 8012320:	e0bffd17 	ldw	r2,-12(fp)
 8012324:	00c00fc4 	movi	r3,63
 8012328:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 801232c:	e0bffd17 	ldw	r2,-12(fp)
 8012330:	100003c5 	stb	zero,15(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
 8012334:	e0bffd17 	ldw	r2,-12(fp)
 8012338:	1080020b 	ldhu	r2,8(r2)
 801233c:	10bfffcc 	andi	r2,r2,65535
 8012340:	1004d23a 	srli	r2,r2,8
 8012344:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
 8012348:	e0fff603 	ldbu	r3,-40(fp)
 801234c:	008200b4 	movhi	r2,2050
 8012350:	108f9c04 	addi	r2,r2,15984
 8012354:	18c7883a 	add	r3,r3,r3
 8012358:	18c7883a 	add	r3,r3,r3
 801235c:	10c5883a 	add	r2,r2,r3
 8012360:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 8012364:	e0bffd17 	ldw	r2,-12(fp)
 8012368:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 801236c:	d0e73617 	ldw	r3,-25384(gp)
 8012370:	e0bffd17 	ldw	r2,-12(fp)
 8012374:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 8012378:	e0bffd17 	ldw	r2,-12(fp)
 801237c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
 8012380:	e0bffd17 	ldw	r2,-12(fp)
 8012384:	d0a73615 	stw	r2,-25384(gp)
 8012388:	e0bff417 	ldw	r2,-48(fp)
 801238c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012390:	e0bff517 	ldw	r2,-44(fp)
 8012394:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 8012398:	e0bfff17 	ldw	r2,-4(fp)
 801239c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
 80123a0:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 80123a4:	00005a06 	br	8012510 <OSMutexDel+0x2e4>
 80123a8:	e0bff417 	ldw	r2,-48(fp)
 80123ac:	e0bff715 	stw	r2,-36(fp)
 80123b0:	e0bff717 	ldw	r2,-36(fp)
 80123b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 80123b8:	e0bfff17 	ldw	r2,-4(fp)
 80123bc:	00c01244 	movi	r3,73
 80123c0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 80123c4:	e0bffd17 	ldw	r2,-12(fp)
 80123c8:	e0bff315 	stw	r2,-52(fp)
             }
             break;
 80123cc:	00005006 	br	8012510 <OSMutexDel+0x2e4>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
 80123d0:	e0bffd17 	ldw	r2,-12(fp)
 80123d4:	1080020b 	ldhu	r2,8(r2)
 80123d8:	10bfffcc 	andi	r2,r2,65535
 80123dc:	1004d23a 	srli	r2,r2,8
 80123e0:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
 80123e4:	e0bffd17 	ldw	r2,-12(fp)
 80123e8:	1080020b 	ldhu	r2,8(r2)
 80123ec:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
 80123f0:	e0bffd17 	ldw	r2,-12(fp)
 80123f4:	10800117 	ldw	r2,4(r2)
 80123f8:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
 80123fc:	e0bffa17 	ldw	r2,-24(fp)
 8012400:	10000f26 	beq	r2,zero,8012440 <OSMutexDel+0x214>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
 8012404:	e0bffa17 	ldw	r2,-24(fp)
 8012408:	10800c83 	ldbu	r2,50(r2)
 801240c:	10c03fcc 	andi	r3,r2,255
 8012410:	e0bff603 	ldbu	r2,-40(fp)
 8012414:	18800a1e 	bne	r3,r2,8012440 <OSMutexDel+0x214>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
 8012418:	e0bff903 	ldbu	r2,-28(fp)
 801241c:	100b883a 	mov	r5,r2
 8012420:	e13ffa17 	ldw	r4,-24(fp)
 8012424:	8012e480 	call	8012e48 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
 8012428:	00000506 	br	8012440 <OSMutexDel+0x214>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
 801242c:	000f883a 	mov	r7,zero
 8012430:	01800404 	movi	r6,16
 8012434:	000b883a 	mov	r5,zero
 8012438:	e13ffd17 	ldw	r4,-12(fp)
 801243c:	800eda80 	call	800eda8 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
 8012440:	e0bffd17 	ldw	r2,-12(fp)
 8012444:	10800283 	ldbu	r2,10(r2)
 8012448:	10803fcc 	andi	r2,r2,255
 801244c:	103ff71e 	bne	r2,zero,801242c <__alt_data_end+0xf801242c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 8012450:	e0bffd17 	ldw	r2,-12(fp)
 8012454:	00c00fc4 	movi	r3,63
 8012458:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 801245c:	e0bffd17 	ldw	r2,-12(fp)
 8012460:	100003c5 	stb	zero,15(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
 8012464:	e0bffd17 	ldw	r2,-12(fp)
 8012468:	1080020b 	ldhu	r2,8(r2)
 801246c:	10bfffcc 	andi	r2,r2,65535
 8012470:	1004d23a 	srli	r2,r2,8
 8012474:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
 8012478:	e0fff603 	ldbu	r3,-40(fp)
 801247c:	008200b4 	movhi	r2,2050
 8012480:	108f9c04 	addi	r2,r2,15984
 8012484:	18c7883a 	add	r3,r3,r3
 8012488:	18c7883a 	add	r3,r3,r3
 801248c:	10c5883a 	add	r2,r2,r3
 8012490:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 8012494:	e0bffd17 	ldw	r2,-12(fp)
 8012498:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
 801249c:	d0e73617 	ldw	r3,-25384(gp)
 80124a0:	e0bffd17 	ldw	r2,-12(fp)
 80124a4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
 80124a8:	e0bffd17 	ldw	r2,-12(fp)
 80124ac:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
 80124b0:	e0bffd17 	ldw	r2,-12(fp)
 80124b4:	d0a73615 	stw	r2,-25384(gp)
 80124b8:	e0bff417 	ldw	r2,-48(fp)
 80124bc:	e0bff815 	stw	r2,-32(fp)
 80124c0:	e0bff817 	ldw	r2,-32(fp)
 80124c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80124c8:	e0bff203 	ldbu	r2,-56(fp)
 80124cc:	10800058 	cmpnei	r2,r2,1
 80124d0:	1000011e 	bne	r2,zero,80124d8 <OSMutexDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 80124d4:	800f7f40 	call	800f7f4 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 80124d8:	e0bfff17 	ldw	r2,-4(fp)
 80124dc:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
 80124e0:	e03ff315 	stw	zero,-52(fp)
             break;
 80124e4:	00000a06 	br	8012510 <OSMutexDel+0x2e4>
 80124e8:	e0bff417 	ldw	r2,-48(fp)
 80124ec:	e0bffb15 	stw	r2,-20(fp)
 80124f0:	e0bffb17 	ldw	r2,-20(fp)
 80124f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 80124f8:	e0bfff17 	ldw	r2,-4(fp)
 80124fc:	00c001c4 	movi	r3,7
 8012500:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 8012504:	e0bffd17 	ldw	r2,-12(fp)
 8012508:	e0bff315 	stw	r2,-52(fp)
             break;
 801250c:	0001883a 	nop
    }
    return (pevent_return);
 8012510:	e0bff317 	ldw	r2,-52(fp)
}
 8012514:	e037883a 	mov	sp,fp
 8012518:	dfc00117 	ldw	ra,4(sp)
 801251c:	df000017 	ldw	fp,0(sp)
 8012520:	dec00204 	addi	sp,sp,8
 8012524:	f800283a 	ret

08012528 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 8012528:	deffee04 	addi	sp,sp,-72
 801252c:	dfc01115 	stw	ra,68(sp)
 8012530:	df001015 	stw	fp,64(sp)
 8012534:	df001004 	addi	fp,sp,64
 8012538:	e13ffd15 	stw	r4,-12(fp)
 801253c:	2805883a 	mov	r2,r5
 8012540:	e1bfff15 	stw	r6,-4(fp)
 8012544:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8012548:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 801254c:	e0bfff17 	ldw	r2,-4(fp)
 8012550:	10015626 	beq	r2,zero,8012aac <OSMutexPend+0x584>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8012554:	e0bffd17 	ldw	r2,-12(fp)
 8012558:	1000041e 	bne	r2,zero,801256c <OSMutexPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 801255c:	e0bfff17 	ldw	r2,-4(fp)
 8012560:	00c00104 	movi	r3,4
 8012564:	10c00005 	stb	r3,0(r2)
        return;
 8012568:	00015106 	br	8012ab0 <OSMutexPend+0x588>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 801256c:	e0bffd17 	ldw	r2,-12(fp)
 8012570:	10800003 	ldbu	r2,0(r2)
 8012574:	10803fcc 	andi	r2,r2,255
 8012578:	10800120 	cmpeqi	r2,r2,4
 801257c:	1000041e 	bne	r2,zero,8012590 <OSMutexPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 8012580:	e0bfff17 	ldw	r2,-4(fp)
 8012584:	00c00044 	movi	r3,1
 8012588:	10c00005 	stb	r3,0(r2)
        return;
 801258c:	00014806 	br	8012ab0 <OSMutexPend+0x588>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8012590:	d0a73703 	ldbu	r2,-25380(gp)
 8012594:	10803fcc 	andi	r2,r2,255
 8012598:	10000426 	beq	r2,zero,80125ac <OSMutexPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 801259c:	e0bfff17 	ldw	r2,-4(fp)
 80125a0:	00c00084 	movi	r3,2
 80125a4:	10c00005 	stb	r3,0(r2)
        return;
 80125a8:	00014106 	br	8012ab0 <OSMutexPend+0x588>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 80125ac:	d0a72903 	ldbu	r2,-25436(gp)
 80125b0:	10803fcc 	andi	r2,r2,255
 80125b4:	10000426 	beq	r2,zero,80125c8 <OSMutexPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 80125b8:	e0bfff17 	ldw	r2,-4(fp)
 80125bc:	00c00344 	movi	r3,13
 80125c0:	10c00005 	stb	r3,0(r2)
        return;
 80125c4:	00013a06 	br	8012ab0 <OSMutexPend+0x588>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80125c8:	0005303a 	rdctl	r2,status
 80125cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80125d0:	e0fffc17 	ldw	r3,-16(fp)
 80125d4:	00bfff84 	movi	r2,-2
 80125d8:	1884703a 	and	r2,r3,r2
 80125dc:	1001703a 	wrctl	status,r2
  
  return context;
 80125e0:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 80125e4:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
 80125e8:	e0bffd17 	ldw	r2,-12(fp)
 80125ec:	1080020b 	ldhu	r2,8(r2)
 80125f0:	10bfffcc 	andi	r2,r2,65535
 80125f4:	1004d23a 	srli	r2,r2,8
 80125f8:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
 80125fc:	e0bffd17 	ldw	r2,-12(fp)
 8012600:	1080020b 	ldhu	r2,8(r2)
 8012604:	10803fcc 	andi	r2,r2,255
 8012608:	10803fd8 	cmpnei	r2,r2,255
 801260c:	1000271e 	bne	r2,zero,80126ac <OSMutexPend+0x184>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
 8012610:	e0bffd17 	ldw	r2,-12(fp)
 8012614:	10c0020b 	ldhu	r3,8(r2)
 8012618:	00bfc004 	movi	r2,-256
 801261c:	1884703a 	and	r2,r3,r2
 8012620:	1007883a 	mov	r3,r2
 8012624:	e0bffd17 	ldw	r2,-12(fp)
 8012628:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
 801262c:	e0bffd17 	ldw	r2,-12(fp)
 8012630:	10c0020b 	ldhu	r3,8(r2)
 8012634:	d0a73817 	ldw	r2,-25376(gp)
 8012638:	10800c83 	ldbu	r2,50(r2)
 801263c:	10803fcc 	andi	r2,r2,255
 8012640:	1884b03a 	or	r2,r3,r2
 8012644:	1007883a 	mov	r3,r2
 8012648:	e0bffd17 	ldw	r2,-12(fp)
 801264c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
 8012650:	d0e73817 	ldw	r3,-25376(gp)
 8012654:	e0bffd17 	ldw	r2,-12(fp)
 8012658:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
 801265c:	d0a73817 	ldw	r2,-25376(gp)
 8012660:	10800c83 	ldbu	r2,50(r2)
 8012664:	10803fcc 	andi	r2,r2,255
 8012668:	e0fff303 	ldbu	r3,-52(fp)
 801266c:	18800836 	bltu	r3,r2,8012690 <OSMutexPend+0x168>
 8012670:	e0bff117 	ldw	r2,-60(fp)
 8012674:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012678:	e0bff217 	ldw	r2,-56(fp)
 801267c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
 8012680:	e0bfff17 	ldw	r2,-4(fp)
 8012684:	00c01e04 	movi	r3,120
 8012688:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
 801268c:	00010806 	br	8012ab0 <OSMutexPend+0x588>
 8012690:	e0bff117 	ldw	r2,-60(fp)
 8012694:	e0bff415 	stw	r2,-48(fp)
 8012698:	e0bff417 	ldw	r2,-48(fp)
 801269c:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
 80126a0:	e0bfff17 	ldw	r2,-4(fp)
 80126a4:	10000005 	stb	zero,0(r2)
        }
        return;
 80126a8:	00010106 	br	8012ab0 <OSMutexPend+0x588>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
 80126ac:	e0bffd17 	ldw	r2,-12(fp)
 80126b0:	1080020b 	ldhu	r2,8(r2)
 80126b4:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
 80126b8:	e0bffd17 	ldw	r2,-12(fp)
 80126bc:	10800117 	ldw	r2,4(r2)
 80126c0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
 80126c4:	e0bff717 	ldw	r2,-36(fp)
 80126c8:	10800c83 	ldbu	r2,50(r2)
 80126cc:	10803fcc 	andi	r2,r2,255
 80126d0:	e0fff303 	ldbu	r3,-52(fp)
 80126d4:	1880b92e 	bgeu	r3,r2,80129bc <OSMutexPend+0x494>
        if (mprio > OSTCBCur->OSTCBPrio) {
 80126d8:	d0a73817 	ldw	r2,-25376(gp)
 80126dc:	10800c83 	ldbu	r2,50(r2)
 80126e0:	10c03fcc 	andi	r3,r2,255
 80126e4:	e0bff603 	ldbu	r2,-40(fp)
 80126e8:	1880b42e 	bgeu	r3,r2,80129bc <OSMutexPend+0x494>
            y = ptcb->OSTCBY;
 80126ec:	e0bff717 	ldw	r2,-36(fp)
 80126f0:	10800d03 	ldbu	r2,52(r2)
 80126f4:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
 80126f8:	e0fff803 	ldbu	r3,-32(fp)
 80126fc:	d0a73544 	addi	r2,gp,-25387
 8012700:	1885883a 	add	r2,r3,r2
 8012704:	10c00003 	ldbu	r3,0(r2)
 8012708:	e0bff717 	ldw	r2,-36(fp)
 801270c:	10800d43 	ldbu	r2,53(r2)
 8012710:	1884703a 	and	r2,r3,r2
 8012714:	10803fcc 	andi	r2,r2,255
 8012718:	10001e26 	beq	r2,zero,8012794 <OSMutexPend+0x26c>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
 801271c:	e0fff803 	ldbu	r3,-32(fp)
 8012720:	e13ff803 	ldbu	r4,-32(fp)
 8012724:	d0a73544 	addi	r2,gp,-25387
 8012728:	2085883a 	add	r2,r4,r2
 801272c:	10800003 	ldbu	r2,0(r2)
 8012730:	1009883a 	mov	r4,r2
 8012734:	e0bff717 	ldw	r2,-36(fp)
 8012738:	10800d43 	ldbu	r2,53(r2)
 801273c:	0084303a 	nor	r2,zero,r2
 8012740:	2084703a 	and	r2,r4,r2
 8012744:	1009883a 	mov	r4,r2
 8012748:	d0a73544 	addi	r2,gp,-25387
 801274c:	1885883a 	add	r2,r3,r2
 8012750:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
 8012754:	e0fff803 	ldbu	r3,-32(fp)
 8012758:	d0a73544 	addi	r2,gp,-25387
 801275c:	1885883a 	add	r2,r3,r2
 8012760:	10800003 	ldbu	r2,0(r2)
 8012764:	10803fcc 	andi	r2,r2,255
 8012768:	1000071e 	bne	r2,zero,8012788 <OSMutexPend+0x260>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
 801276c:	e0bff717 	ldw	r2,-36(fp)
 8012770:	10800d83 	ldbu	r2,54(r2)
 8012774:	0084303a 	nor	r2,zero,r2
 8012778:	1007883a 	mov	r3,r2
 801277c:	d0a73503 	ldbu	r2,-25388(gp)
 8012780:	1884703a 	and	r2,r3,r2
 8012784:	d0a73505 	stb	r2,-25388(gp)
                }
                rdy = OS_TRUE;
 8012788:	00800044 	movi	r2,1
 801278c:	e0bff005 	stb	r2,-64(fp)
 8012790:	00002a06 	br	801283c <OSMutexPend+0x314>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
 8012794:	e0bff717 	ldw	r2,-36(fp)
 8012798:	10800717 	ldw	r2,28(r2)
 801279c:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
 80127a0:	e0bff917 	ldw	r2,-28(fp)
 80127a4:	10002426 	beq	r2,zero,8012838 <OSMutexPend+0x310>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
 80127a8:	e0bff717 	ldw	r2,-36(fp)
 80127ac:	10800d03 	ldbu	r2,52(r2)
 80127b0:	10803fcc 	andi	r2,r2,255
 80127b4:	e0fff717 	ldw	r3,-36(fp)
 80127b8:	18c00d03 	ldbu	r3,52(r3)
 80127bc:	18c03fcc 	andi	r3,r3,255
 80127c0:	e13ff917 	ldw	r4,-28(fp)
 80127c4:	20c7883a 	add	r3,r4,r3
 80127c8:	18c002c4 	addi	r3,r3,11
 80127cc:	18c00003 	ldbu	r3,0(r3)
 80127d0:	1809883a 	mov	r4,r3
 80127d4:	e0fff717 	ldw	r3,-36(fp)
 80127d8:	18c00d43 	ldbu	r3,53(r3)
 80127dc:	00c6303a 	nor	r3,zero,r3
 80127e0:	20c6703a 	and	r3,r4,r3
 80127e4:	1809883a 	mov	r4,r3
 80127e8:	e0fff917 	ldw	r3,-28(fp)
 80127ec:	1887883a 	add	r3,r3,r2
 80127f0:	18c002c4 	addi	r3,r3,11
 80127f4:	19000005 	stb	r4,0(r3)
 80127f8:	e0fff917 	ldw	r3,-28(fp)
 80127fc:	1885883a 	add	r2,r3,r2
 8012800:	108002c4 	addi	r2,r2,11
 8012804:	10800003 	ldbu	r2,0(r2)
 8012808:	10803fcc 	andi	r2,r2,255
 801280c:	10000a1e 	bne	r2,zero,8012838 <OSMutexPend+0x310>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
 8012810:	e0bff917 	ldw	r2,-28(fp)
 8012814:	10800283 	ldbu	r2,10(r2)
 8012818:	1007883a 	mov	r3,r2
 801281c:	e0bff717 	ldw	r2,-36(fp)
 8012820:	10800d83 	ldbu	r2,54(r2)
 8012824:	0084303a 	nor	r2,zero,r2
 8012828:	1884703a 	and	r2,r3,r2
 801282c:	1007883a 	mov	r3,r2
 8012830:	e0bff917 	ldw	r2,-28(fp)
 8012834:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
 8012838:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
 801283c:	e0bff717 	ldw	r2,-36(fp)
 8012840:	e0fff303 	ldbu	r3,-52(fp)
 8012844:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
 8012848:	e0bff717 	ldw	r2,-36(fp)
 801284c:	10800c83 	ldbu	r2,50(r2)
 8012850:	10803fcc 	andi	r2,r2,255
 8012854:	1004d0fa 	srli	r2,r2,3
 8012858:	1007883a 	mov	r3,r2
 801285c:	e0bff717 	ldw	r2,-36(fp)
 8012860:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
 8012864:	e0bff717 	ldw	r2,-36(fp)
 8012868:	10800c83 	ldbu	r2,50(r2)
 801286c:	108001cc 	andi	r2,r2,7
 8012870:	1007883a 	mov	r3,r2
 8012874:	e0bff717 	ldw	r2,-36(fp)
 8012878:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
 801287c:	e0bff717 	ldw	r2,-36(fp)
 8012880:	10800d03 	ldbu	r2,52(r2)
 8012884:	10803fcc 	andi	r2,r2,255
 8012888:	00c00044 	movi	r3,1
 801288c:	1884983a 	sll	r2,r3,r2
 8012890:	1007883a 	mov	r3,r2
 8012894:	e0bff717 	ldw	r2,-36(fp)
 8012898:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
 801289c:	e0bff717 	ldw	r2,-36(fp)
 80128a0:	10800cc3 	ldbu	r2,51(r2)
 80128a4:	10803fcc 	andi	r2,r2,255
 80128a8:	00c00044 	movi	r3,1
 80128ac:	1884983a 	sll	r2,r3,r2
 80128b0:	1007883a 	mov	r3,r2
 80128b4:	e0bff717 	ldw	r2,-36(fp)
 80128b8:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
 80128bc:	e0bff003 	ldbu	r2,-64(fp)
 80128c0:	10800058 	cmpnei	r2,r2,1
 80128c4:	1000161e 	bne	r2,zero,8012920 <OSMutexPend+0x3f8>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
 80128c8:	e0bff717 	ldw	r2,-36(fp)
 80128cc:	10c00d83 	ldbu	r3,54(r2)
 80128d0:	d0a73503 	ldbu	r2,-25388(gp)
 80128d4:	1884b03a 	or	r2,r3,r2
 80128d8:	d0a73505 	stb	r2,-25388(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80128dc:	e0bff717 	ldw	r2,-36(fp)
 80128e0:	10800d03 	ldbu	r2,52(r2)
 80128e4:	10c03fcc 	andi	r3,r2,255
 80128e8:	e0bff717 	ldw	r2,-36(fp)
 80128ec:	10800d03 	ldbu	r2,52(r2)
 80128f0:	11003fcc 	andi	r4,r2,255
 80128f4:	d0a73544 	addi	r2,gp,-25387
 80128f8:	2085883a 	add	r2,r4,r2
 80128fc:	11000003 	ldbu	r4,0(r2)
 8012900:	e0bff717 	ldw	r2,-36(fp)
 8012904:	10800d43 	ldbu	r2,53(r2)
 8012908:	2084b03a 	or	r2,r4,r2
 801290c:	1009883a 	mov	r4,r2
 8012910:	d0a73544 	addi	r2,gp,-25387
 8012914:	1885883a 	add	r2,r3,r2
 8012918:	11000005 	stb	r4,0(r2)
 801291c:	00001f06 	br	801299c <OSMutexPend+0x474>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
 8012920:	e0bff717 	ldw	r2,-36(fp)
 8012924:	10800717 	ldw	r2,28(r2)
 8012928:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
 801292c:	e0bff917 	ldw	r2,-28(fp)
 8012930:	10001a26 	beq	r2,zero,801299c <OSMutexPend+0x474>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
 8012934:	e0bff917 	ldw	r2,-28(fp)
 8012938:	10c00283 	ldbu	r3,10(r2)
 801293c:	e0bff717 	ldw	r2,-36(fp)
 8012940:	10800d83 	ldbu	r2,54(r2)
 8012944:	1884b03a 	or	r2,r3,r2
 8012948:	1007883a 	mov	r3,r2
 801294c:	e0bff917 	ldw	r2,-28(fp)
 8012950:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8012954:	e0bff717 	ldw	r2,-36(fp)
 8012958:	10800d03 	ldbu	r2,52(r2)
 801295c:	10803fcc 	andi	r2,r2,255
 8012960:	e0fff717 	ldw	r3,-36(fp)
 8012964:	18c00d03 	ldbu	r3,52(r3)
 8012968:	18c03fcc 	andi	r3,r3,255
 801296c:	e13ff917 	ldw	r4,-28(fp)
 8012970:	20c7883a 	add	r3,r4,r3
 8012974:	18c002c4 	addi	r3,r3,11
 8012978:	19000003 	ldbu	r4,0(r3)
 801297c:	e0fff717 	ldw	r3,-36(fp)
 8012980:	18c00d43 	ldbu	r3,53(r3)
 8012984:	20c6b03a 	or	r3,r4,r3
 8012988:	1809883a 	mov	r4,r3
 801298c:	e0fff917 	ldw	r3,-28(fp)
 8012990:	1885883a 	add	r2,r3,r2
 8012994:	108002c4 	addi	r2,r2,11
 8012998:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
 801299c:	e0fff303 	ldbu	r3,-52(fp)
 80129a0:	008200b4 	movhi	r2,2050
 80129a4:	108f9c04 	addi	r2,r2,15984
 80129a8:	18c7883a 	add	r3,r3,r3
 80129ac:	18c7883a 	add	r3,r3,r3
 80129b0:	10c5883a 	add	r2,r2,r3
 80129b4:	e0fff717 	ldw	r3,-36(fp)
 80129b8:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
 80129bc:	d0a73817 	ldw	r2,-25376(gp)
 80129c0:	d0e73817 	ldw	r3,-25376(gp)
 80129c4:	18c00c03 	ldbu	r3,48(r3)
 80129c8:	18c00414 	ori	r3,r3,16
 80129cc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80129d0:	d0a73817 	ldw	r2,-25376(gp)
 80129d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
 80129d8:	d0a73817 	ldw	r2,-25376(gp)
 80129dc:	e0fffe0b 	ldhu	r3,-8(fp)
 80129e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80129e4:	e13ffd17 	ldw	r4,-12(fp)
 80129e8:	800ef400 	call	800ef40 <OS_EventTaskWait>
 80129ec:	e0bff117 	ldw	r2,-60(fp)
 80129f0:	e0bffb15 	stw	r2,-20(fp)
 80129f4:	e0bffb17 	ldw	r2,-20(fp)
 80129f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 80129fc:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012a00:	0005303a 	rdctl	r2,status
 8012a04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012a08:	e0fff517 	ldw	r3,-44(fp)
 8012a0c:	00bfff84 	movi	r2,-2
 8012a10:	1884703a 	and	r2,r3,r2
 8012a14:	1001703a 	wrctl	status,r2
  
  return context;
 8012a18:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
 8012a1c:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8012a20:	d0a73817 	ldw	r2,-25376(gp)
 8012a24:	10800c43 	ldbu	r2,49(r2)
 8012a28:	10803fcc 	andi	r2,r2,255
 8012a2c:	10000326 	beq	r2,zero,8012a3c <OSMutexPend+0x514>
 8012a30:	108000a0 	cmpeqi	r2,r2,2
 8012a34:	1000041e 	bne	r2,zero,8012a48 <OSMutexPend+0x520>
 8012a38:	00000706 	br	8012a58 <OSMutexPend+0x530>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8012a3c:	e0bfff17 	ldw	r2,-4(fp)
 8012a40:	10000005 	stb	zero,0(r2)
             break;
 8012a44:	00000c06 	br	8012a78 <OSMutexPend+0x550>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
 8012a48:	e0bfff17 	ldw	r2,-4(fp)
 8012a4c:	00c00384 	movi	r3,14
 8012a50:	10c00005 	stb	r3,0(r2)
             break;
 8012a54:	00000806 	br	8012a78 <OSMutexPend+0x550>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8012a58:	d0a73817 	ldw	r2,-25376(gp)
 8012a5c:	e17ffd17 	ldw	r5,-12(fp)
 8012a60:	1009883a 	mov	r4,r2
 8012a64:	800f1a00 	call	800f1a0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
 8012a68:	e0bfff17 	ldw	r2,-4(fp)
 8012a6c:	00c00284 	movi	r3,10
 8012a70:	10c00005 	stb	r3,0(r2)
             break;
 8012a74:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8012a78:	d0a73817 	ldw	r2,-25376(gp)
 8012a7c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8012a80:	d0a73817 	ldw	r2,-25376(gp)
 8012a84:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8012a88:	d0a73817 	ldw	r2,-25376(gp)
 8012a8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8012a90:	d0a73817 	ldw	r2,-25376(gp)
 8012a94:	10000815 	stw	zero,32(r2)
 8012a98:	e0bff117 	ldw	r2,-60(fp)
 8012a9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012aa0:	e0bffa17 	ldw	r2,-24(fp)
 8012aa4:	1001703a 	wrctl	status,r2
 8012aa8:	00000106 	br	8012ab0 <OSMutexPend+0x588>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
 8012aac:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 8012ab0:	e037883a 	mov	sp,fp
 8012ab4:	dfc00117 	ldw	ra,4(sp)
 8012ab8:	df000017 	ldw	fp,0(sp)
 8012abc:	dec00204 	addi	sp,sp,8
 8012ac0:	f800283a 	ret

08012ac4 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
 8012ac4:	defff604 	addi	sp,sp,-40
 8012ac8:	dfc00915 	stw	ra,36(sp)
 8012acc:	df000815 	stw	fp,32(sp)
 8012ad0:	df000804 	addi	fp,sp,32
 8012ad4:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8012ad8:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 8012adc:	d0a73703 	ldbu	r2,-25380(gp)
 8012ae0:	10803fcc 	andi	r2,r2,255
 8012ae4:	10000226 	beq	r2,zero,8012af0 <OSMutexPost+0x2c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
 8012ae8:	00800144 	movi	r2,5
 8012aec:	00007606 	br	8012cc8 <OSMutexPost+0x204>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8012af0:	e0bfff17 	ldw	r2,-4(fp)
 8012af4:	1000021e 	bne	r2,zero,8012b00 <OSMutexPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
 8012af8:	00800104 	movi	r2,4
 8012afc:	00007206 	br	8012cc8 <OSMutexPost+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
 8012b00:	e0bfff17 	ldw	r2,-4(fp)
 8012b04:	10800003 	ldbu	r2,0(r2)
 8012b08:	10803fcc 	andi	r2,r2,255
 8012b0c:	10800120 	cmpeqi	r2,r2,4
 8012b10:	1000021e 	bne	r2,zero,8012b1c <OSMutexPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 8012b14:	00800044 	movi	r2,1
 8012b18:	00006b06 	br	8012cc8 <OSMutexPost+0x204>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012b1c:	0005303a 	rdctl	r2,status
 8012b20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012b24:	e0fffe17 	ldw	r3,-8(fp)
 8012b28:	00bfff84 	movi	r2,-2
 8012b2c:	1884703a 	and	r2,r3,r2
 8012b30:	1001703a 	wrctl	status,r2
  
  return context;
 8012b34:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 8012b38:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
 8012b3c:	e0bfff17 	ldw	r2,-4(fp)
 8012b40:	1080020b 	ldhu	r2,8(r2)
 8012b44:	10bfffcc 	andi	r2,r2,65535
 8012b48:	1004d23a 	srli	r2,r2,8
 8012b4c:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
 8012b50:	e0bfff17 	ldw	r2,-4(fp)
 8012b54:	1080020b 	ldhu	r2,8(r2)
 8012b58:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
 8012b5c:	e0bfff17 	ldw	r2,-4(fp)
 8012b60:	10c00117 	ldw	r3,4(r2)
 8012b64:	d0a73817 	ldw	r2,-25376(gp)
 8012b68:	18800626 	beq	r3,r2,8012b84 <OSMutexPost+0xc0>
 8012b6c:	e0bff817 	ldw	r2,-32(fp)
 8012b70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012b74:	e0bff917 	ldw	r2,-28(fp)
 8012b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
 8012b7c:	00801904 	movi	r2,100
 8012b80:	00005106 	br	8012cc8 <OSMutexPost+0x204>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
 8012b84:	d0a73817 	ldw	r2,-25376(gp)
 8012b88:	10800c83 	ldbu	r2,50(r2)
 8012b8c:	10c03fcc 	andi	r3,r2,255
 8012b90:	e0bffa03 	ldbu	r2,-24(fp)
 8012b94:	1880051e 	bne	r3,r2,8012bac <OSMutexPost+0xe8>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
 8012b98:	d0a73817 	ldw	r2,-25376(gp)
 8012b9c:	e0fffa43 	ldbu	r3,-23(fp)
 8012ba0:	180b883a 	mov	r5,r3
 8012ba4:	1009883a 	mov	r4,r2
 8012ba8:	8012e480 	call	8012e48 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
 8012bac:	e0fffa03 	ldbu	r3,-24(fp)
 8012bb0:	008200b4 	movhi	r2,2050
 8012bb4:	108f9c04 	addi	r2,r2,15984
 8012bb8:	18c7883a 	add	r3,r3,r3
 8012bbc:	18c7883a 	add	r3,r3,r3
 8012bc0:	10c5883a 	add	r2,r2,r3
 8012bc4:	00c00044 	movi	r3,1
 8012bc8:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
 8012bcc:	e0bfff17 	ldw	r2,-4(fp)
 8012bd0:	10800283 	ldbu	r2,10(r2)
 8012bd4:	10803fcc 	andi	r2,r2,255
 8012bd8:	10002e26 	beq	r2,zero,8012c94 <OSMutexPost+0x1d0>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
 8012bdc:	000f883a 	mov	r7,zero
 8012be0:	01800404 	movi	r6,16
 8012be4:	000b883a 	mov	r5,zero
 8012be8:	e13fff17 	ldw	r4,-4(fp)
 8012bec:	800eda80 	call	800eda8 <OS_EventTaskRdy>
 8012bf0:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
 8012bf4:	e0bfff17 	ldw	r2,-4(fp)
 8012bf8:	10c0020b 	ldhu	r3,8(r2)
 8012bfc:	00bfc004 	movi	r2,-256
 8012c00:	1884703a 	and	r2,r3,r2
 8012c04:	1007883a 	mov	r3,r2
 8012c08:	e0bfff17 	ldw	r2,-4(fp)
 8012c0c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
 8012c10:	e0bfff17 	ldw	r2,-4(fp)
 8012c14:	10c0020b 	ldhu	r3,8(r2)
 8012c18:	e0bffa43 	ldbu	r2,-23(fp)
 8012c1c:	1884b03a 	or	r2,r3,r2
 8012c20:	1007883a 	mov	r3,r2
 8012c24:	e0bfff17 	ldw	r2,-4(fp)
 8012c28:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
 8012c2c:	e0fffa43 	ldbu	r3,-23(fp)
 8012c30:	008200b4 	movhi	r2,2050
 8012c34:	108f9c04 	addi	r2,r2,15984
 8012c38:	18c7883a 	add	r3,r3,r3
 8012c3c:	18c7883a 	add	r3,r3,r3
 8012c40:	10c5883a 	add	r2,r2,r3
 8012c44:	10c00017 	ldw	r3,0(r2)
 8012c48:	e0bfff17 	ldw	r2,-4(fp)
 8012c4c:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
 8012c50:	e0bffa43 	ldbu	r2,-23(fp)
 8012c54:	e0fffa03 	ldbu	r3,-24(fp)
 8012c58:	18800736 	bltu	r3,r2,8012c78 <OSMutexPost+0x1b4>
 8012c5c:	e0bff817 	ldw	r2,-32(fp)
 8012c60:	e0bffb15 	stw	r2,-20(fp)
 8012c64:	e0bffb17 	ldw	r2,-20(fp)
 8012c68:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
 8012c6c:	800f7f40 	call	800f7f4 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
 8012c70:	00801e04 	movi	r2,120
 8012c74:	00001406 	br	8012cc8 <OSMutexPost+0x204>
 8012c78:	e0bff817 	ldw	r2,-32(fp)
 8012c7c:	e0bffc15 	stw	r2,-16(fp)
 8012c80:	e0bffc17 	ldw	r2,-16(fp)
 8012c84:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
 8012c88:	800f7f40 	call	800f7f4 <OS_Sched>
            return (OS_ERR_NONE);
 8012c8c:	0005883a 	mov	r2,zero
 8012c90:	00000d06 	br	8012cc8 <OSMutexPost+0x204>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
 8012c94:	e0bfff17 	ldw	r2,-4(fp)
 8012c98:	1080020b 	ldhu	r2,8(r2)
 8012c9c:	10803fd4 	ori	r2,r2,255
 8012ca0:	1007883a 	mov	r3,r2
 8012ca4:	e0bfff17 	ldw	r2,-4(fp)
 8012ca8:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
 8012cac:	e0bfff17 	ldw	r2,-4(fp)
 8012cb0:	10000115 	stw	zero,4(r2)
 8012cb4:	e0bff817 	ldw	r2,-32(fp)
 8012cb8:	e0bffd15 	stw	r2,-12(fp)
 8012cbc:	e0bffd17 	ldw	r2,-12(fp)
 8012cc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8012cc4:	0005883a 	mov	r2,zero
}
 8012cc8:	e037883a 	mov	sp,fp
 8012ccc:	dfc00117 	ldw	ra,4(sp)
 8012cd0:	df000017 	ldw	fp,0(sp)
 8012cd4:	dec00204 	addi	sp,sp,8
 8012cd8:	f800283a 	ret

08012cdc <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
 8012cdc:	defff704 	addi	sp,sp,-36
 8012ce0:	df000815 	stw	fp,32(sp)
 8012ce4:	df000804 	addi	fp,sp,32
 8012ce8:	e13ffe15 	stw	r4,-8(fp)
 8012cec:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012cf0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8012cf4:	d0a73703 	ldbu	r2,-25380(gp)
 8012cf8:	10803fcc 	andi	r2,r2,255
 8012cfc:	10000226 	beq	r2,zero,8012d08 <OSMutexQuery+0x2c>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
 8012d00:	00800184 	movi	r2,6
 8012d04:	00004c06 	br	8012e38 <OSMutexQuery+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8012d08:	e0bffe17 	ldw	r2,-8(fp)
 8012d0c:	1000021e 	bne	r2,zero,8012d18 <OSMutexQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
 8012d10:	00800104 	movi	r2,4
 8012d14:	00004806 	br	8012e38 <OSMutexQuery+0x15c>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
 8012d18:	e0bfff17 	ldw	r2,-4(fp)
 8012d1c:	1000021e 	bne	r2,zero,8012d28 <OSMutexQuery+0x4c>
        return (OS_ERR_PDATA_NULL);
 8012d20:	00800244 	movi	r2,9
 8012d24:	00004406 	br	8012e38 <OSMutexQuery+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 8012d28:	e0bffe17 	ldw	r2,-8(fp)
 8012d2c:	10800003 	ldbu	r2,0(r2)
 8012d30:	10803fcc 	andi	r2,r2,255
 8012d34:	10800120 	cmpeqi	r2,r2,4
 8012d38:	1000021e 	bne	r2,zero,8012d44 <OSMutexQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 8012d3c:	00800044 	movi	r2,1
 8012d40:	00003d06 	br	8012e38 <OSMutexQuery+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012d44:	0005303a 	rdctl	r2,status
 8012d48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012d4c:	e0fffd17 	ldw	r3,-12(fp)
 8012d50:	00bfff84 	movi	r2,-2
 8012d54:	1884703a 	and	r2,r3,r2
 8012d58:	1001703a 	wrctl	status,r2
  
  return context;
 8012d5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8012d60:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
 8012d64:	e0bffe17 	ldw	r2,-8(fp)
 8012d68:	1080020b 	ldhu	r2,8(r2)
 8012d6c:	10bfffcc 	andi	r2,r2,65535
 8012d70:	1004d23a 	srli	r2,r2,8
 8012d74:	1007883a 	mov	r3,r2
 8012d78:	e0bfff17 	ldw	r2,-4(fp)
 8012d7c:	10c00185 	stb	r3,6(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
 8012d80:	e0bffe17 	ldw	r2,-8(fp)
 8012d84:	1080020b 	ldhu	r2,8(r2)
 8012d88:	1007883a 	mov	r3,r2
 8012d8c:	e0bfff17 	ldw	r2,-4(fp)
 8012d90:	10c00145 	stb	r3,5(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
 8012d94:	e0bfff17 	ldw	r2,-4(fp)
 8012d98:	10800143 	ldbu	r2,5(r2)
 8012d9c:	10803fcc 	andi	r2,r2,255
 8012da0:	10803fd8 	cmpnei	r2,r2,255
 8012da4:	1000041e 	bne	r2,zero,8012db8 <OSMutexQuery+0xdc>
        p_mutex_data->OSValue = OS_TRUE;
 8012da8:	e0bfff17 	ldw	r2,-4(fp)
 8012dac:	00c00044 	movi	r3,1
 8012db0:	10c00105 	stb	r3,4(r2)
 8012db4:	00000206 	br	8012dc0 <OSMutexQuery+0xe4>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
 8012db8:	e0bfff17 	ldw	r2,-4(fp)
 8012dbc:	10000105 	stb	zero,4(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
 8012dc0:	e0bffe17 	ldw	r2,-8(fp)
 8012dc4:	10c00283 	ldbu	r3,10(r2)
 8012dc8:	e0bfff17 	ldw	r2,-4(fp)
 8012dcc:	10c000c5 	stb	r3,3(r2)
    psrc                      = &pevent->OSEventTbl[0];
 8012dd0:	e0bffe17 	ldw	r2,-8(fp)
 8012dd4:	108002c4 	addi	r2,r2,11
 8012dd8:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
 8012ddc:	e0bfff17 	ldw	r2,-4(fp)
 8012de0:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8012de4:	e03ff805 	stb	zero,-32(fp)
 8012de8:	00000b06 	br	8012e18 <OSMutexQuery+0x13c>
        *pdest++ = *psrc++;
 8012dec:	e0bffa17 	ldw	r2,-24(fp)
 8012df0:	10c00044 	addi	r3,r2,1
 8012df4:	e0fffa15 	stw	r3,-24(fp)
 8012df8:	e0fff917 	ldw	r3,-28(fp)
 8012dfc:	19000044 	addi	r4,r3,1
 8012e00:	e13ff915 	stw	r4,-28(fp)
 8012e04:	18c00003 	ldbu	r3,0(r3)
 8012e08:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8012e0c:	e0bff803 	ldbu	r2,-32(fp)
 8012e10:	10800044 	addi	r2,r2,1
 8012e14:	e0bff805 	stb	r2,-32(fp)
 8012e18:	e0bff803 	ldbu	r2,-32(fp)
 8012e1c:	108000f0 	cmpltui	r2,r2,3
 8012e20:	103ff21e 	bne	r2,zero,8012dec <__alt_data_end+0xf8012dec>
 8012e24:	e0bffb17 	ldw	r2,-20(fp)
 8012e28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012e2c:	e0bffc17 	ldw	r2,-16(fp)
 8012e30:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8012e34:	0005883a 	mov	r2,zero
}
 8012e38:	e037883a 	mov	sp,fp
 8012e3c:	df000017 	ldw	fp,0(sp)
 8012e40:	dec00104 	addi	sp,sp,4
 8012e44:	f800283a 	ret

08012e48 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
 8012e48:	defffc04 	addi	sp,sp,-16
 8012e4c:	df000315 	stw	fp,12(sp)
 8012e50:	df000304 	addi	fp,sp,12
 8012e54:	e13ffe15 	stw	r4,-8(fp)
 8012e58:	2805883a 	mov	r2,r5
 8012e5c:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
 8012e60:	e0bffe17 	ldw	r2,-8(fp)
 8012e64:	10800d03 	ldbu	r2,52(r2)
 8012e68:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
 8012e6c:	e0fffd03 	ldbu	r3,-12(fp)
 8012e70:	e13ffd03 	ldbu	r4,-12(fp)
 8012e74:	d0a73544 	addi	r2,gp,-25387
 8012e78:	2085883a 	add	r2,r4,r2
 8012e7c:	10800003 	ldbu	r2,0(r2)
 8012e80:	1009883a 	mov	r4,r2
 8012e84:	e0bffe17 	ldw	r2,-8(fp)
 8012e88:	10800d43 	ldbu	r2,53(r2)
 8012e8c:	0084303a 	nor	r2,zero,r2
 8012e90:	2084703a 	and	r2,r4,r2
 8012e94:	1009883a 	mov	r4,r2
 8012e98:	d0a73544 	addi	r2,gp,-25387
 8012e9c:	1885883a 	add	r2,r3,r2
 8012ea0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 8012ea4:	e0fffd03 	ldbu	r3,-12(fp)
 8012ea8:	d0a73544 	addi	r2,gp,-25387
 8012eac:	1885883a 	add	r2,r3,r2
 8012eb0:	10800003 	ldbu	r2,0(r2)
 8012eb4:	10803fcc 	andi	r2,r2,255
 8012eb8:	1000071e 	bne	r2,zero,8012ed8 <OSMutex_RdyAtPrio+0x90>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 8012ebc:	e0bffe17 	ldw	r2,-8(fp)
 8012ec0:	10800d83 	ldbu	r2,54(r2)
 8012ec4:	0084303a 	nor	r2,zero,r2
 8012ec8:	1007883a 	mov	r3,r2
 8012ecc:	d0a73503 	ldbu	r2,-25388(gp)
 8012ed0:	1884703a 	and	r2,r3,r2
 8012ed4:	d0a73505 	stb	r2,-25388(gp)
    }
    ptcb->OSTCBPrio         = prio;
 8012ed8:	e0bffe17 	ldw	r2,-8(fp)
 8012edc:	e0ffff03 	ldbu	r3,-4(fp)
 8012ee0:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
 8012ee4:	e0bfff03 	ldbu	r2,-4(fp)
 8012ee8:	1004d0fa 	srli	r2,r2,3
 8012eec:	108001cc 	andi	r2,r2,7
 8012ef0:	1007883a 	mov	r3,r2
 8012ef4:	e0bffe17 	ldw	r2,-8(fp)
 8012ef8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
 8012efc:	e0bfff03 	ldbu	r2,-4(fp)
 8012f00:	108001cc 	andi	r2,r2,7
 8012f04:	1007883a 	mov	r3,r2
 8012f08:	e0bffe17 	ldw	r2,-8(fp)
 8012f0c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
 8012f10:	e0bffe17 	ldw	r2,-8(fp)
 8012f14:	10800d03 	ldbu	r2,52(r2)
 8012f18:	10803fcc 	andi	r2,r2,255
 8012f1c:	00c00044 	movi	r3,1
 8012f20:	1884983a 	sll	r2,r3,r2
 8012f24:	1007883a 	mov	r3,r2
 8012f28:	e0bffe17 	ldw	r2,-8(fp)
 8012f2c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
 8012f30:	e0bffe17 	ldw	r2,-8(fp)
 8012f34:	10800cc3 	ldbu	r2,51(r2)
 8012f38:	10803fcc 	andi	r2,r2,255
 8012f3c:	00c00044 	movi	r3,1
 8012f40:	1884983a 	sll	r2,r3,r2
 8012f44:	1007883a 	mov	r3,r2
 8012f48:	e0bffe17 	ldw	r2,-8(fp)
 8012f4c:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
 8012f50:	e0bffe17 	ldw	r2,-8(fp)
 8012f54:	10c00d83 	ldbu	r3,54(r2)
 8012f58:	d0a73503 	ldbu	r2,-25388(gp)
 8012f5c:	1884b03a 	or	r2,r3,r2
 8012f60:	d0a73505 	stb	r2,-25388(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8012f64:	e0bffe17 	ldw	r2,-8(fp)
 8012f68:	10800d03 	ldbu	r2,52(r2)
 8012f6c:	10c03fcc 	andi	r3,r2,255
 8012f70:	e0bffe17 	ldw	r2,-8(fp)
 8012f74:	10800d03 	ldbu	r2,52(r2)
 8012f78:	11003fcc 	andi	r4,r2,255
 8012f7c:	d0a73544 	addi	r2,gp,-25387
 8012f80:	2085883a 	add	r2,r4,r2
 8012f84:	11000003 	ldbu	r4,0(r2)
 8012f88:	e0bffe17 	ldw	r2,-8(fp)
 8012f8c:	10800d43 	ldbu	r2,53(r2)
 8012f90:	2084b03a 	or	r2,r4,r2
 8012f94:	1009883a 	mov	r4,r2
 8012f98:	d0a73544 	addi	r2,gp,-25387
 8012f9c:	1885883a 	add	r2,r3,r2
 8012fa0:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
 8012fa4:	e0ffff03 	ldbu	r3,-4(fp)
 8012fa8:	008200b4 	movhi	r2,2050
 8012fac:	108f9c04 	addi	r2,r2,15984
 8012fb0:	18c7883a 	add	r3,r3,r3
 8012fb4:	18c7883a 	add	r3,r3,r3
 8012fb8:	10c5883a 	add	r2,r2,r3
 8012fbc:	e0fffe17 	ldw	r3,-8(fp)
 8012fc0:	10c00015 	stw	r3,0(r2)
}
 8012fc4:	0001883a 	nop
 8012fc8:	e037883a 	mov	sp,fp
 8012fcc:	df000017 	ldw	fp,0(sp)
 8012fd0:	dec00104 	addi	sp,sp,4
 8012fd4:	f800283a 	ret

08012fd8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 8012fd8:	defff804 	addi	sp,sp,-32
 8012fdc:	df000715 	stw	fp,28(sp)
 8012fe0:	df000704 	addi	fp,sp,28
 8012fe4:	e13ffe15 	stw	r4,-8(fp)
 8012fe8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012fec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8012ff0:	e0bfff17 	ldw	r2,-4(fp)
 8012ff4:	1000021e 	bne	r2,zero,8013000 <OSQAccept+0x28>
        return ((void *)0);
 8012ff8:	0005883a 	mov	r2,zero
 8012ffc:	00004206 	br	8013108 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 8013000:	e0bffe17 	ldw	r2,-8(fp)
 8013004:	1000051e 	bne	r2,zero,801301c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 8013008:	e0bfff17 	ldw	r2,-4(fp)
 801300c:	00c00104 	movi	r3,4
 8013010:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8013014:	0005883a 	mov	r2,zero
 8013018:	00003b06 	br	8013108 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 801301c:	e0bffe17 	ldw	r2,-8(fp)
 8013020:	10800003 	ldbu	r2,0(r2)
 8013024:	10803fcc 	andi	r2,r2,255
 8013028:	108000a0 	cmpeqi	r2,r2,2
 801302c:	1000051e 	bne	r2,zero,8013044 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 8013030:	e0bfff17 	ldw	r2,-4(fp)
 8013034:	00c00044 	movi	r3,1
 8013038:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 801303c:	0005883a 	mov	r2,zero
 8013040:	00003106 	br	8013108 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013044:	0005303a 	rdctl	r2,status
 8013048:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801304c:	e0fffd17 	ldw	r3,-12(fp)
 8013050:	00bfff84 	movi	r2,-2
 8013054:	1884703a 	and	r2,r3,r2
 8013058:	1001703a 	wrctl	status,r2
  
  return context;
 801305c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013060:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 8013064:	e0bffe17 	ldw	r2,-8(fp)
 8013068:	10800117 	ldw	r2,4(r2)
 801306c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 8013070:	e0bffc17 	ldw	r2,-16(fp)
 8013074:	1080058b 	ldhu	r2,22(r2)
 8013078:	10bfffcc 	andi	r2,r2,65535
 801307c:	10001926 	beq	r2,zero,80130e4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 8013080:	e0bffc17 	ldw	r2,-16(fp)
 8013084:	10800417 	ldw	r2,16(r2)
 8013088:	11000104 	addi	r4,r2,4
 801308c:	e0fffc17 	ldw	r3,-16(fp)
 8013090:	19000415 	stw	r4,16(r3)
 8013094:	10800017 	ldw	r2,0(r2)
 8013098:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 801309c:	e0bffc17 	ldw	r2,-16(fp)
 80130a0:	1080058b 	ldhu	r2,22(r2)
 80130a4:	10bfffc4 	addi	r2,r2,-1
 80130a8:	1007883a 	mov	r3,r2
 80130ac:	e0bffc17 	ldw	r2,-16(fp)
 80130b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 80130b4:	e0bffc17 	ldw	r2,-16(fp)
 80130b8:	10c00417 	ldw	r3,16(r2)
 80130bc:	e0bffc17 	ldw	r2,-16(fp)
 80130c0:	10800217 	ldw	r2,8(r2)
 80130c4:	1880041e 	bne	r3,r2,80130d8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 80130c8:	e0bffc17 	ldw	r2,-16(fp)
 80130cc:	10c00117 	ldw	r3,4(r2)
 80130d0:	e0bffc17 	ldw	r2,-16(fp)
 80130d4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 80130d8:	e0bfff17 	ldw	r2,-4(fp)
 80130dc:	10000005 	stb	zero,0(r2)
 80130e0:	00000406 	br	80130f4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 80130e4:	e0bfff17 	ldw	r2,-4(fp)
 80130e8:	00c007c4 	movi	r3,31
 80130ec:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 80130f0:	e03ff915 	stw	zero,-28(fp)
 80130f4:	e0bffa17 	ldw	r2,-24(fp)
 80130f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80130fc:	e0bffb17 	ldw	r2,-20(fp)
 8013100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 8013104:	e0bff917 	ldw	r2,-28(fp)
}
 8013108:	e037883a 	mov	sp,fp
 801310c:	df000017 	ldw	fp,0(sp)
 8013110:	dec00104 	addi	sp,sp,4
 8013114:	f800283a 	ret

08013118 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 8013118:	defff404 	addi	sp,sp,-48
 801311c:	dfc00b15 	stw	ra,44(sp)
 8013120:	df000a15 	stw	fp,40(sp)
 8013124:	df000a04 	addi	fp,sp,40
 8013128:	e13ffe15 	stw	r4,-8(fp)
 801312c:	2805883a 	mov	r2,r5
 8013130:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8013134:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8013138:	d0a73703 	ldbu	r2,-25380(gp)
 801313c:	10803fcc 	andi	r2,r2,255
 8013140:	10000226 	beq	r2,zero,801314c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 8013144:	0005883a 	mov	r2,zero
 8013148:	00005906 	br	80132b0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801314c:	0005303a 	rdctl	r2,status
 8013150:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013154:	e0fffd17 	ldw	r3,-12(fp)
 8013158:	00bfff84 	movi	r2,-2
 801315c:	1884703a 	and	r2,r3,r2
 8013160:	1001703a 	wrctl	status,r2
  
  return context;
 8013164:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013168:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 801316c:	d0a73617 	ldw	r2,-25384(gp)
 8013170:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 8013174:	d0a73617 	ldw	r2,-25384(gp)
 8013178:	10000326 	beq	r2,zero,8013188 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 801317c:	d0a73617 	ldw	r2,-25384(gp)
 8013180:	10800117 	ldw	r2,4(r2)
 8013184:	d0a73615 	stw	r2,-25384(gp)
 8013188:	e0bff717 	ldw	r2,-36(fp)
 801318c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013190:	e0bff817 	ldw	r2,-32(fp)
 8013194:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 8013198:	e0bff617 	ldw	r2,-40(fp)
 801319c:	10004326 	beq	r2,zero,80132ac <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80131a0:	0005303a 	rdctl	r2,status
 80131a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80131a8:	e0fff917 	ldw	r3,-28(fp)
 80131ac:	00bfff84 	movi	r2,-2
 80131b0:	1884703a 	and	r2,r3,r2
 80131b4:	1001703a 	wrctl	status,r2
  
  return context;
 80131b8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 80131bc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 80131c0:	d0a73417 	ldw	r2,-25392(gp)
 80131c4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 80131c8:	e0bffb17 	ldw	r2,-20(fp)
 80131cc:	10002d26 	beq	r2,zero,8013284 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 80131d0:	d0a73417 	ldw	r2,-25392(gp)
 80131d4:	10800017 	ldw	r2,0(r2)
 80131d8:	d0a73415 	stw	r2,-25392(gp)
 80131dc:	e0bff717 	ldw	r2,-36(fp)
 80131e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80131e4:	e0bffa17 	ldw	r2,-24(fp)
 80131e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 80131ec:	e0bffb17 	ldw	r2,-20(fp)
 80131f0:	e0fffe17 	ldw	r3,-8(fp)
 80131f4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 80131f8:	e0bfff0b 	ldhu	r2,-4(fp)
 80131fc:	1085883a 	add	r2,r2,r2
 8013200:	1085883a 	add	r2,r2,r2
 8013204:	1007883a 	mov	r3,r2
 8013208:	e0bffe17 	ldw	r2,-8(fp)
 801320c:	10c7883a 	add	r3,r2,r3
 8013210:	e0bffb17 	ldw	r2,-20(fp)
 8013214:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 8013218:	e0bffb17 	ldw	r2,-20(fp)
 801321c:	e0fffe17 	ldw	r3,-8(fp)
 8013220:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 8013224:	e0bffb17 	ldw	r2,-20(fp)
 8013228:	e0fffe17 	ldw	r3,-8(fp)
 801322c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 8013230:	e0bffb17 	ldw	r2,-20(fp)
 8013234:	e0ffff0b 	ldhu	r3,-4(fp)
 8013238:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 801323c:	e0bffb17 	ldw	r2,-20(fp)
 8013240:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 8013244:	e0bff617 	ldw	r2,-40(fp)
 8013248:	00c00084 	movi	r3,2
 801324c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 8013250:	e0bff617 	ldw	r2,-40(fp)
 8013254:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 8013258:	e0bff617 	ldw	r2,-40(fp)
 801325c:	e0fffb17 	ldw	r3,-20(fp)
 8013260:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 8013264:	e0bff617 	ldw	r2,-40(fp)
 8013268:	00c00fc4 	movi	r3,63
 801326c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 8013270:	e0bff617 	ldw	r2,-40(fp)
 8013274:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 8013278:	e13ff617 	ldw	r4,-40(fp)
 801327c:	800f3580 	call	800f358 <OS_EventWaitListInit>
 8013280:	00000a06 	br	80132ac <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 8013284:	d0e73617 	ldw	r3,-25384(gp)
 8013288:	e0bff617 	ldw	r2,-40(fp)
 801328c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 8013290:	e0bff617 	ldw	r2,-40(fp)
 8013294:	d0a73615 	stw	r2,-25384(gp)
 8013298:	e0bff717 	ldw	r2,-36(fp)
 801329c:	e0bffc15 	stw	r2,-16(fp)
 80132a0:	e0bffc17 	ldw	r2,-16(fp)
 80132a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 80132a8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 80132ac:	e0bff617 	ldw	r2,-40(fp)
}
 80132b0:	e037883a 	mov	sp,fp
 80132b4:	dfc00117 	ldw	ra,4(sp)
 80132b8:	df000017 	ldw	fp,0(sp)
 80132bc:	dec00204 	addi	sp,sp,8
 80132c0:	f800283a 	ret

080132c4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 80132c4:	defff204 	addi	sp,sp,-56
 80132c8:	dfc00d15 	stw	ra,52(sp)
 80132cc:	df000c15 	stw	fp,48(sp)
 80132d0:	df000c04 	addi	fp,sp,48
 80132d4:	e13ffd15 	stw	r4,-12(fp)
 80132d8:	2805883a 	mov	r2,r5
 80132dc:	e1bfff15 	stw	r6,-4(fp)
 80132e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 80132e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80132e8:	e0bfff17 	ldw	r2,-4(fp)
 80132ec:	1000021e 	bne	r2,zero,80132f8 <OSQDel+0x34>
        return (pevent);
 80132f0:	e0bffd17 	ldw	r2,-12(fp)
 80132f4:	00008e06 	br	8013530 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 80132f8:	e0bffd17 	ldw	r2,-12(fp)
 80132fc:	1000051e 	bne	r2,zero,8013314 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8013300:	e0bfff17 	ldw	r2,-4(fp)
 8013304:	00c00104 	movi	r3,4
 8013308:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801330c:	e0bffd17 	ldw	r2,-12(fp)
 8013310:	00008706 	br	8013530 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 8013314:	e0bffd17 	ldw	r2,-12(fp)
 8013318:	10800003 	ldbu	r2,0(r2)
 801331c:	10803fcc 	andi	r2,r2,255
 8013320:	108000a0 	cmpeqi	r2,r2,2
 8013324:	1000051e 	bne	r2,zero,801333c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8013328:	e0bfff17 	ldw	r2,-4(fp)
 801332c:	00c00044 	movi	r3,1
 8013330:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8013334:	e0bffd17 	ldw	r2,-12(fp)
 8013338:	00007d06 	br	8013530 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 801333c:	d0a73703 	ldbu	r2,-25380(gp)
 8013340:	10803fcc 	andi	r2,r2,255
 8013344:	10000526 	beq	r2,zero,801335c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 8013348:	e0bfff17 	ldw	r2,-4(fp)
 801334c:	00c003c4 	movi	r3,15
 8013350:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8013354:	e0bffd17 	ldw	r2,-12(fp)
 8013358:	00007506 	br	8013530 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801335c:	0005303a 	rdctl	r2,status
 8013360:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013364:	e0fffc17 	ldw	r3,-16(fp)
 8013368:	00bfff84 	movi	r2,-2
 801336c:	1884703a 	and	r2,r3,r2
 8013370:	1001703a 	wrctl	status,r2
  
  return context;
 8013374:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8013378:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 801337c:	e0bffd17 	ldw	r2,-12(fp)
 8013380:	10800283 	ldbu	r2,10(r2)
 8013384:	10803fcc 	andi	r2,r2,255
 8013388:	10000326 	beq	r2,zero,8013398 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 801338c:	00800044 	movi	r2,1
 8013390:	e0bff405 	stb	r2,-48(fp)
 8013394:	00000106 	br	801339c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8013398:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 801339c:	e0bffe03 	ldbu	r2,-8(fp)
 80133a0:	10000326 	beq	r2,zero,80133b0 <OSQDel+0xec>
 80133a4:	10800060 	cmpeqi	r2,r2,1
 80133a8:	1000301e 	bne	r2,zero,801346c <OSQDel+0x1a8>
 80133ac:	00005506 	br	8013504 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 80133b0:	e0bff403 	ldbu	r2,-48(fp)
 80133b4:	10001e1e 	bne	r2,zero,8013430 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 80133b8:	e0bffd17 	ldw	r2,-12(fp)
 80133bc:	00c00fc4 	movi	r3,63
 80133c0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 80133c4:	e0bffd17 	ldw	r2,-12(fp)
 80133c8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 80133cc:	e0bffd17 	ldw	r2,-12(fp)
 80133d0:	10800117 	ldw	r2,4(r2)
 80133d4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 80133d8:	d0e73417 	ldw	r3,-25392(gp)
 80133dc:	e0bff817 	ldw	r2,-32(fp)
 80133e0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 80133e4:	e0bff817 	ldw	r2,-32(fp)
 80133e8:	d0a73415 	stw	r2,-25392(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80133ec:	e0bffd17 	ldw	r2,-12(fp)
 80133f0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 80133f4:	d0e73617 	ldw	r3,-25384(gp)
 80133f8:	e0bffd17 	ldw	r2,-12(fp)
 80133fc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 8013400:	e0bffd17 	ldw	r2,-12(fp)
 8013404:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 8013408:	e0bffd17 	ldw	r2,-12(fp)
 801340c:	d0a73615 	stw	r2,-25384(gp)
 8013410:	e0bff617 	ldw	r2,-40(fp)
 8013414:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013418:	e0bff717 	ldw	r2,-36(fp)
 801341c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 8013420:	e0bfff17 	ldw	r2,-4(fp)
 8013424:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 8013428:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 801342c:	00003f06 	br	801352c <OSQDel+0x268>
 8013430:	e0bff617 	ldw	r2,-40(fp)
 8013434:	e0bff915 	stw	r2,-28(fp)
 8013438:	e0bff917 	ldw	r2,-28(fp)
 801343c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 8013440:	e0bfff17 	ldw	r2,-4(fp)
 8013444:	00c01244 	movi	r3,73
 8013448:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 801344c:	e0bffd17 	ldw	r2,-12(fp)
 8013450:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 8013454:	00003506 	br	801352c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 8013458:	000f883a 	mov	r7,zero
 801345c:	01800104 	movi	r6,4
 8013460:	000b883a 	mov	r5,zero
 8013464:	e13ffd17 	ldw	r4,-12(fp)
 8013468:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 801346c:	e0bffd17 	ldw	r2,-12(fp)
 8013470:	10800283 	ldbu	r2,10(r2)
 8013474:	10803fcc 	andi	r2,r2,255
 8013478:	103ff71e 	bne	r2,zero,8013458 <__alt_data_end+0xf8013458>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 801347c:	e0bffd17 	ldw	r2,-12(fp)
 8013480:	00c00fc4 	movi	r3,63
 8013484:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 8013488:	e0bffd17 	ldw	r2,-12(fp)
 801348c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 8013490:	e0bffd17 	ldw	r2,-12(fp)
 8013494:	10800117 	ldw	r2,4(r2)
 8013498:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 801349c:	d0e73417 	ldw	r3,-25392(gp)
 80134a0:	e0bff817 	ldw	r2,-32(fp)
 80134a4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 80134a8:	e0bff817 	ldw	r2,-32(fp)
 80134ac:	d0a73415 	stw	r2,-25392(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80134b0:	e0bffd17 	ldw	r2,-12(fp)
 80134b4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 80134b8:	d0e73617 	ldw	r3,-25384(gp)
 80134bc:	e0bffd17 	ldw	r2,-12(fp)
 80134c0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 80134c4:	e0bffd17 	ldw	r2,-12(fp)
 80134c8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 80134cc:	e0bffd17 	ldw	r2,-12(fp)
 80134d0:	d0a73615 	stw	r2,-25384(gp)
 80134d4:	e0bff617 	ldw	r2,-40(fp)
 80134d8:	e0bffa15 	stw	r2,-24(fp)
 80134dc:	e0bffa17 	ldw	r2,-24(fp)
 80134e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80134e4:	e0bff403 	ldbu	r2,-48(fp)
 80134e8:	10800058 	cmpnei	r2,r2,1
 80134ec:	1000011e 	bne	r2,zero,80134f4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 80134f0:	800f7f40 	call	800f7f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 80134f4:	e0bfff17 	ldw	r2,-4(fp)
 80134f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 80134fc:	e03ff515 	stw	zero,-44(fp)
             break;
 8013500:	00000a06 	br	801352c <OSQDel+0x268>
 8013504:	e0bff617 	ldw	r2,-40(fp)
 8013508:	e0bffb15 	stw	r2,-20(fp)
 801350c:	e0bffb17 	ldw	r2,-20(fp)
 8013510:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 8013514:	e0bfff17 	ldw	r2,-4(fp)
 8013518:	00c001c4 	movi	r3,7
 801351c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 8013520:	e0bffd17 	ldw	r2,-12(fp)
 8013524:	e0bff515 	stw	r2,-44(fp)
             break;
 8013528:	0001883a 	nop
    }
    return (pevent_return);
 801352c:	e0bff517 	ldw	r2,-44(fp)
}
 8013530:	e037883a 	mov	sp,fp
 8013534:	dfc00117 	ldw	ra,4(sp)
 8013538:	df000017 	ldw	fp,0(sp)
 801353c:	dec00204 	addi	sp,sp,8
 8013540:	f800283a 	ret

08013544 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 8013544:	defffa04 	addi	sp,sp,-24
 8013548:	df000515 	stw	fp,20(sp)
 801354c:	df000504 	addi	fp,sp,20
 8013550:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013554:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013558:	e0bfff17 	ldw	r2,-4(fp)
 801355c:	1000021e 	bne	r2,zero,8013568 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 8013560:	00800104 	movi	r2,4
 8013564:	00002106 	br	80135ec <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8013568:	e0bfff17 	ldw	r2,-4(fp)
 801356c:	10800003 	ldbu	r2,0(r2)
 8013570:	10803fcc 	andi	r2,r2,255
 8013574:	108000a0 	cmpeqi	r2,r2,2
 8013578:	1000021e 	bne	r2,zero,8013584 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 801357c:	00800044 	movi	r2,1
 8013580:	00001a06 	br	80135ec <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013584:	0005303a 	rdctl	r2,status
 8013588:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801358c:	e0fffd17 	ldw	r3,-12(fp)
 8013590:	00bfff84 	movi	r2,-2
 8013594:	1884703a 	and	r2,r3,r2
 8013598:	1001703a 	wrctl	status,r2
  
  return context;
 801359c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 80135a0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 80135a4:	e0bfff17 	ldw	r2,-4(fp)
 80135a8:	10800117 	ldw	r2,4(r2)
 80135ac:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 80135b0:	e0bffc17 	ldw	r2,-16(fp)
 80135b4:	10c00117 	ldw	r3,4(r2)
 80135b8:	e0bffc17 	ldw	r2,-16(fp)
 80135bc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 80135c0:	e0bffc17 	ldw	r2,-16(fp)
 80135c4:	10c00117 	ldw	r3,4(r2)
 80135c8:	e0bffc17 	ldw	r2,-16(fp)
 80135cc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 80135d0:	e0bffc17 	ldw	r2,-16(fp)
 80135d4:	1000058d 	sth	zero,22(r2)
 80135d8:	e0bffb17 	ldw	r2,-20(fp)
 80135dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80135e0:	e0bffe17 	ldw	r2,-8(fp)
 80135e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80135e8:	0005883a 	mov	r2,zero
}
 80135ec:	e037883a 	mov	sp,fp
 80135f0:	df000017 	ldw	fp,0(sp)
 80135f4:	dec00104 	addi	sp,sp,4
 80135f8:	f800283a 	ret

080135fc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 80135fc:	defff304 	addi	sp,sp,-52
 8013600:	dfc00c15 	stw	ra,48(sp)
 8013604:	df000b15 	stw	fp,44(sp)
 8013608:	df000b04 	addi	fp,sp,44
 801360c:	e13ffd15 	stw	r4,-12(fp)
 8013610:	2805883a 	mov	r2,r5
 8013614:	e1bfff15 	stw	r6,-4(fp)
 8013618:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801361c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8013620:	e0bfff17 	ldw	r2,-4(fp)
 8013624:	1000021e 	bne	r2,zero,8013630 <OSQPend+0x34>
        return ((void *)0);
 8013628:	0005883a 	mov	r2,zero
 801362c:	00009106 	br	8013874 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 8013630:	e0bffd17 	ldw	r2,-12(fp)
 8013634:	1000051e 	bne	r2,zero,801364c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8013638:	e0bfff17 	ldw	r2,-4(fp)
 801363c:	00c00104 	movi	r3,4
 8013640:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8013644:	0005883a 	mov	r2,zero
 8013648:	00008a06 	br	8013874 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 801364c:	e0bffd17 	ldw	r2,-12(fp)
 8013650:	10800003 	ldbu	r2,0(r2)
 8013654:	10803fcc 	andi	r2,r2,255
 8013658:	108000a0 	cmpeqi	r2,r2,2
 801365c:	1000051e 	bne	r2,zero,8013674 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8013660:	e0bfff17 	ldw	r2,-4(fp)
 8013664:	00c00044 	movi	r3,1
 8013668:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 801366c:	0005883a 	mov	r2,zero
 8013670:	00008006 	br	8013874 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8013674:	d0a73703 	ldbu	r2,-25380(gp)
 8013678:	10803fcc 	andi	r2,r2,255
 801367c:	10000526 	beq	r2,zero,8013694 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 8013680:	e0bfff17 	ldw	r2,-4(fp)
 8013684:	00c00084 	movi	r3,2
 8013688:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 801368c:	0005883a 	mov	r2,zero
 8013690:	00007806 	br	8013874 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 8013694:	d0a72903 	ldbu	r2,-25436(gp)
 8013698:	10803fcc 	andi	r2,r2,255
 801369c:	10000526 	beq	r2,zero,80136b4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 80136a0:	e0bfff17 	ldw	r2,-4(fp)
 80136a4:	00c00344 	movi	r3,13
 80136a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80136ac:	0005883a 	mov	r2,zero
 80136b0:	00007006 	br	8013874 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80136b4:	0005303a 	rdctl	r2,status
 80136b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80136bc:	e0fffc17 	ldw	r3,-16(fp)
 80136c0:	00bfff84 	movi	r2,-2
 80136c4:	1884703a 	and	r2,r3,r2
 80136c8:	1001703a 	wrctl	status,r2
  
  return context;
 80136cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80136d0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80136d4:	e0bffd17 	ldw	r2,-12(fp)
 80136d8:	10800117 	ldw	r2,4(r2)
 80136dc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 80136e0:	e0bff817 	ldw	r2,-32(fp)
 80136e4:	1080058b 	ldhu	r2,22(r2)
 80136e8:	10bfffcc 	andi	r2,r2,65535
 80136ec:	10001e26 	beq	r2,zero,8013768 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80136f0:	e0bff817 	ldw	r2,-32(fp)
 80136f4:	10800417 	ldw	r2,16(r2)
 80136f8:	11000104 	addi	r4,r2,4
 80136fc:	e0fff817 	ldw	r3,-32(fp)
 8013700:	19000415 	stw	r4,16(r3)
 8013704:	10800017 	ldw	r2,0(r2)
 8013708:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 801370c:	e0bff817 	ldw	r2,-32(fp)
 8013710:	1080058b 	ldhu	r2,22(r2)
 8013714:	10bfffc4 	addi	r2,r2,-1
 8013718:	1007883a 	mov	r3,r2
 801371c:	e0bff817 	ldw	r2,-32(fp)
 8013720:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8013724:	e0bff817 	ldw	r2,-32(fp)
 8013728:	10c00417 	ldw	r3,16(r2)
 801372c:	e0bff817 	ldw	r2,-32(fp)
 8013730:	10800217 	ldw	r2,8(r2)
 8013734:	1880041e 	bne	r3,r2,8013748 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 8013738:	e0bff817 	ldw	r2,-32(fp)
 801373c:	10c00117 	ldw	r3,4(r2)
 8013740:	e0bff817 	ldw	r2,-32(fp)
 8013744:	10c00415 	stw	r3,16(r2)
 8013748:	e0bff617 	ldw	r2,-40(fp)
 801374c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013750:	e0bff717 	ldw	r2,-36(fp)
 8013754:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 8013758:	e0bfff17 	ldw	r2,-4(fp)
 801375c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 8013760:	e0bff517 	ldw	r2,-44(fp)
 8013764:	00004306 	br	8013874 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 8013768:	d0a73817 	ldw	r2,-25376(gp)
 801376c:	d0e73817 	ldw	r3,-25376(gp)
 8013770:	18c00c03 	ldbu	r3,48(r3)
 8013774:	18c00114 	ori	r3,r3,4
 8013778:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 801377c:	d0a73817 	ldw	r2,-25376(gp)
 8013780:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 8013784:	d0a73817 	ldw	r2,-25376(gp)
 8013788:	e0fffe0b 	ldhu	r3,-8(fp)
 801378c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 8013790:	e13ffd17 	ldw	r4,-12(fp)
 8013794:	800ef400 	call	800ef40 <OS_EventTaskWait>
 8013798:	e0bff617 	ldw	r2,-40(fp)
 801379c:	e0bffb15 	stw	r2,-20(fp)
 80137a0:	e0bffb17 	ldw	r2,-20(fp)
 80137a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 80137a8:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80137ac:	0005303a 	rdctl	r2,status
 80137b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80137b4:	e0fff917 	ldw	r3,-28(fp)
 80137b8:	00bfff84 	movi	r2,-2
 80137bc:	1884703a 	and	r2,r3,r2
 80137c0:	1001703a 	wrctl	status,r2
  
  return context;
 80137c4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 80137c8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80137cc:	d0a73817 	ldw	r2,-25376(gp)
 80137d0:	10800c43 	ldbu	r2,49(r2)
 80137d4:	10803fcc 	andi	r2,r2,255
 80137d8:	10000326 	beq	r2,zero,80137e8 <OSQPend+0x1ec>
 80137dc:	108000a0 	cmpeqi	r2,r2,2
 80137e0:	1000071e 	bne	r2,zero,8013800 <OSQPend+0x204>
 80137e4:	00000b06 	br	8013814 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 80137e8:	d0a73817 	ldw	r2,-25376(gp)
 80137ec:	10800917 	ldw	r2,36(r2)
 80137f0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 80137f4:	e0bfff17 	ldw	r2,-4(fp)
 80137f8:	10000005 	stb	zero,0(r2)
             break;
 80137fc:	00000e06 	br	8013838 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8013800:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8013804:	e0bfff17 	ldw	r2,-4(fp)
 8013808:	00c00384 	movi	r3,14
 801380c:	10c00005 	stb	r3,0(r2)
             break;
 8013810:	00000906 	br	8013838 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8013814:	d0a73817 	ldw	r2,-25376(gp)
 8013818:	e17ffd17 	ldw	r5,-12(fp)
 801381c:	1009883a 	mov	r4,r2
 8013820:	800f1a00 	call	800f1a0 <OS_EventTaskRemove>
             pmsg = (void *)0;
 8013824:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8013828:	e0bfff17 	ldw	r2,-4(fp)
 801382c:	00c00284 	movi	r3,10
 8013830:	10c00005 	stb	r3,0(r2)
             break;
 8013834:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8013838:	d0a73817 	ldw	r2,-25376(gp)
 801383c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8013840:	d0a73817 	ldw	r2,-25376(gp)
 8013844:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8013848:	d0a73817 	ldw	r2,-25376(gp)
 801384c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8013850:	d0a73817 	ldw	r2,-25376(gp)
 8013854:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 8013858:	d0a73817 	ldw	r2,-25376(gp)
 801385c:	10000915 	stw	zero,36(r2)
 8013860:	e0bff617 	ldw	r2,-40(fp)
 8013864:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013868:	e0bffa17 	ldw	r2,-24(fp)
 801386c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 8013870:	e0bff517 	ldw	r2,-44(fp)
}
 8013874:	e037883a 	mov	sp,fp
 8013878:	dfc00117 	ldw	ra,4(sp)
 801387c:	df000017 	ldw	fp,0(sp)
 8013880:	dec00204 	addi	sp,sp,8
 8013884:	f800283a 	ret

08013888 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8013888:	defff604 	addi	sp,sp,-40
 801388c:	dfc00915 	stw	ra,36(sp)
 8013890:	df000815 	stw	fp,32(sp)
 8013894:	df000804 	addi	fp,sp,32
 8013898:	e13ffd15 	stw	r4,-12(fp)
 801389c:	2805883a 	mov	r2,r5
 80138a0:	e1bfff15 	stw	r6,-4(fp)
 80138a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 80138a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80138ac:	e0bfff17 	ldw	r2,-4(fp)
 80138b0:	1000021e 	bne	r2,zero,80138bc <OSQPendAbort+0x34>
        return (0);
 80138b4:	0005883a 	mov	r2,zero
 80138b8:	00004906 	br	80139e0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 80138bc:	e0bffd17 	ldw	r2,-12(fp)
 80138c0:	1000051e 	bne	r2,zero,80138d8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80138c4:	e0bfff17 	ldw	r2,-4(fp)
 80138c8:	00c00104 	movi	r3,4
 80138cc:	10c00005 	stb	r3,0(r2)
        return (0);
 80138d0:	0005883a 	mov	r2,zero
 80138d4:	00004206 	br	80139e0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 80138d8:	e0bffd17 	ldw	r2,-12(fp)
 80138dc:	10800003 	ldbu	r2,0(r2)
 80138e0:	10803fcc 	andi	r2,r2,255
 80138e4:	108000a0 	cmpeqi	r2,r2,2
 80138e8:	1000051e 	bne	r2,zero,8013900 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80138ec:	e0bfff17 	ldw	r2,-4(fp)
 80138f0:	00c00044 	movi	r3,1
 80138f4:	10c00005 	stb	r3,0(r2)
        return (0);
 80138f8:	0005883a 	mov	r2,zero
 80138fc:	00003806 	br	80139e0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013900:	0005303a 	rdctl	r2,status
 8013904:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013908:	e0fffc17 	ldw	r3,-16(fp)
 801390c:	00bfff84 	movi	r2,-2
 8013910:	1884703a 	and	r2,r3,r2
 8013914:	1001703a 	wrctl	status,r2
  
  return context;
 8013918:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801391c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 8013920:	e0bffd17 	ldw	r2,-12(fp)
 8013924:	10800283 	ldbu	r2,10(r2)
 8013928:	10803fcc 	andi	r2,r2,255
 801392c:	10002526 	beq	r2,zero,80139c4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 8013930:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 8013934:	e0bffe03 	ldbu	r2,-8(fp)
 8013938:	10800060 	cmpeqi	r2,r2,1
 801393c:	10000e26 	beq	r2,zero,8013978 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8013940:	00000806 	br	8013964 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8013944:	01c00084 	movi	r7,2
 8013948:	01800104 	movi	r6,4
 801394c:	000b883a 	mov	r5,zero
 8013950:	e13ffd17 	ldw	r4,-12(fp)
 8013954:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                     nbr_tasks++;
 8013958:	e0bff803 	ldbu	r2,-32(fp)
 801395c:	10800044 	addi	r2,r2,1
 8013960:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8013964:	e0bffd17 	ldw	r2,-12(fp)
 8013968:	10800283 	ldbu	r2,10(r2)
 801396c:	10803fcc 	andi	r2,r2,255
 8013970:	103ff41e 	bne	r2,zero,8013944 <__alt_data_end+0xf8013944>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 8013974:	00000906 	br	801399c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8013978:	01c00084 	movi	r7,2
 801397c:	01800104 	movi	r6,4
 8013980:	000b883a 	mov	r5,zero
 8013984:	e13ffd17 	ldw	r4,-12(fp)
 8013988:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                 nbr_tasks++;
 801398c:	e0bff803 	ldbu	r2,-32(fp)
 8013990:	10800044 	addi	r2,r2,1
 8013994:	e0bff805 	stb	r2,-32(fp)
                 break;
 8013998:	0001883a 	nop
 801399c:	e0bff917 	ldw	r2,-28(fp)
 80139a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80139a4:	e0bffa17 	ldw	r2,-24(fp)
 80139a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 80139ac:	800f7f40 	call	800f7f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 80139b0:	e0bfff17 	ldw	r2,-4(fp)
 80139b4:	00c00384 	movi	r3,14
 80139b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 80139bc:	e0bff803 	ldbu	r2,-32(fp)
 80139c0:	00000706 	br	80139e0 <OSQPendAbort+0x158>
 80139c4:	e0bff917 	ldw	r2,-28(fp)
 80139c8:	e0bffb15 	stw	r2,-20(fp)
 80139cc:	e0bffb17 	ldw	r2,-20(fp)
 80139d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80139d4:	e0bfff17 	ldw	r2,-4(fp)
 80139d8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 80139dc:	0005883a 	mov	r2,zero
}
 80139e0:	e037883a 	mov	sp,fp
 80139e4:	dfc00117 	ldw	ra,4(sp)
 80139e8:	df000017 	ldw	fp,0(sp)
 80139ec:	dec00204 	addi	sp,sp,8
 80139f0:	f800283a 	ret

080139f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 80139f4:	defff604 	addi	sp,sp,-40
 80139f8:	dfc00915 	stw	ra,36(sp)
 80139fc:	df000815 	stw	fp,32(sp)
 8013a00:	df000804 	addi	fp,sp,32
 8013a04:	e13ffe15 	stw	r4,-8(fp)
 8013a08:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8013a0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8013a10:	e0bffe17 	ldw	r2,-8(fp)
 8013a14:	1000021e 	bne	r2,zero,8013a20 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8013a18:	00800104 	movi	r2,4
 8013a1c:	00004a06 	br	8013b48 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8013a20:	e0bffe17 	ldw	r2,-8(fp)
 8013a24:	10800003 	ldbu	r2,0(r2)
 8013a28:	10803fcc 	andi	r2,r2,255
 8013a2c:	108000a0 	cmpeqi	r2,r2,2
 8013a30:	1000021e 	bne	r2,zero,8013a3c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 8013a34:	00800044 	movi	r2,1
 8013a38:	00004306 	br	8013b48 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013a3c:	0005303a 	rdctl	r2,status
 8013a40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013a44:	e0fffd17 	ldw	r3,-12(fp)
 8013a48:	00bfff84 	movi	r2,-2
 8013a4c:	1884703a 	and	r2,r3,r2
 8013a50:	1001703a 	wrctl	status,r2
  
  return context;
 8013a54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013a58:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 8013a5c:	e0bffe17 	ldw	r2,-8(fp)
 8013a60:	10800283 	ldbu	r2,10(r2)
 8013a64:	10803fcc 	andi	r2,r2,255
 8013a68:	10000c26 	beq	r2,zero,8013a9c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8013a6c:	000f883a 	mov	r7,zero
 8013a70:	01800104 	movi	r6,4
 8013a74:	e17fff17 	ldw	r5,-4(fp)
 8013a78:	e13ffe17 	ldw	r4,-8(fp)
 8013a7c:	800eda80 	call	800eda8 <OS_EventTaskRdy>
 8013a80:	e0bff817 	ldw	r2,-32(fp)
 8013a84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013a88:	e0bff917 	ldw	r2,-28(fp)
 8013a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 8013a90:	800f7f40 	call	800f7f4 <OS_Sched>
        return (OS_ERR_NONE);
 8013a94:	0005883a 	mov	r2,zero
 8013a98:	00002b06 	br	8013b48 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8013a9c:	e0bffe17 	ldw	r2,-8(fp)
 8013aa0:	10800117 	ldw	r2,4(r2)
 8013aa4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 8013aa8:	e0bffb17 	ldw	r2,-20(fp)
 8013aac:	10c0058b 	ldhu	r3,22(r2)
 8013ab0:	e0bffb17 	ldw	r2,-20(fp)
 8013ab4:	1080050b 	ldhu	r2,20(r2)
 8013ab8:	18ffffcc 	andi	r3,r3,65535
 8013abc:	10bfffcc 	andi	r2,r2,65535
 8013ac0:	18800636 	bltu	r3,r2,8013adc <OSQPost+0xe8>
 8013ac4:	e0bff817 	ldw	r2,-32(fp)
 8013ac8:	e0bffa15 	stw	r2,-24(fp)
 8013acc:	e0bffa17 	ldw	r2,-24(fp)
 8013ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8013ad4:	00800784 	movi	r2,30
 8013ad8:	00001b06 	br	8013b48 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 8013adc:	e0bffb17 	ldw	r2,-20(fp)
 8013ae0:	10800317 	ldw	r2,12(r2)
 8013ae4:	11000104 	addi	r4,r2,4
 8013ae8:	e0fffb17 	ldw	r3,-20(fp)
 8013aec:	19000315 	stw	r4,12(r3)
 8013af0:	e0ffff17 	ldw	r3,-4(fp)
 8013af4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 8013af8:	e0bffb17 	ldw	r2,-20(fp)
 8013afc:	1080058b 	ldhu	r2,22(r2)
 8013b00:	10800044 	addi	r2,r2,1
 8013b04:	1007883a 	mov	r3,r2
 8013b08:	e0bffb17 	ldw	r2,-20(fp)
 8013b0c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 8013b10:	e0bffb17 	ldw	r2,-20(fp)
 8013b14:	10c00317 	ldw	r3,12(r2)
 8013b18:	e0bffb17 	ldw	r2,-20(fp)
 8013b1c:	10800217 	ldw	r2,8(r2)
 8013b20:	1880041e 	bne	r3,r2,8013b34 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 8013b24:	e0bffb17 	ldw	r2,-20(fp)
 8013b28:	10c00117 	ldw	r3,4(r2)
 8013b2c:	e0bffb17 	ldw	r2,-20(fp)
 8013b30:	10c00315 	stw	r3,12(r2)
 8013b34:	e0bff817 	ldw	r2,-32(fp)
 8013b38:	e0bffc15 	stw	r2,-16(fp)
 8013b3c:	e0bffc17 	ldw	r2,-16(fp)
 8013b40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013b44:	0005883a 	mov	r2,zero
}
 8013b48:	e037883a 	mov	sp,fp
 8013b4c:	dfc00117 	ldw	ra,4(sp)
 8013b50:	df000017 	ldw	fp,0(sp)
 8013b54:	dec00204 	addi	sp,sp,8
 8013b58:	f800283a 	ret

08013b5c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 8013b5c:	defff604 	addi	sp,sp,-40
 8013b60:	dfc00915 	stw	ra,36(sp)
 8013b64:	df000815 	stw	fp,32(sp)
 8013b68:	df000804 	addi	fp,sp,32
 8013b6c:	e13ffe15 	stw	r4,-8(fp)
 8013b70:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013b74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013b78:	e0bffe17 	ldw	r2,-8(fp)
 8013b7c:	1000021e 	bne	r2,zero,8013b88 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8013b80:	00800104 	movi	r2,4
 8013b84:	00004c06 	br	8013cb8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8013b88:	e0bffe17 	ldw	r2,-8(fp)
 8013b8c:	10800003 	ldbu	r2,0(r2)
 8013b90:	10803fcc 	andi	r2,r2,255
 8013b94:	108000a0 	cmpeqi	r2,r2,2
 8013b98:	1000021e 	bne	r2,zero,8013ba4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 8013b9c:	00800044 	movi	r2,1
 8013ba0:	00004506 	br	8013cb8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013ba4:	0005303a 	rdctl	r2,status
 8013ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013bac:	e0fffd17 	ldw	r3,-12(fp)
 8013bb0:	00bfff84 	movi	r2,-2
 8013bb4:	1884703a 	and	r2,r3,r2
 8013bb8:	1001703a 	wrctl	status,r2
  
  return context;
 8013bbc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013bc0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 8013bc4:	e0bffe17 	ldw	r2,-8(fp)
 8013bc8:	10800283 	ldbu	r2,10(r2)
 8013bcc:	10803fcc 	andi	r2,r2,255
 8013bd0:	10000c26 	beq	r2,zero,8013c04 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8013bd4:	000f883a 	mov	r7,zero
 8013bd8:	01800104 	movi	r6,4
 8013bdc:	e17fff17 	ldw	r5,-4(fp)
 8013be0:	e13ffe17 	ldw	r4,-8(fp)
 8013be4:	800eda80 	call	800eda8 <OS_EventTaskRdy>
 8013be8:	e0bff817 	ldw	r2,-32(fp)
 8013bec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013bf0:	e0bff917 	ldw	r2,-28(fp)
 8013bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 8013bf8:	800f7f40 	call	800f7f4 <OS_Sched>
        return (OS_ERR_NONE);
 8013bfc:	0005883a 	mov	r2,zero
 8013c00:	00002d06 	br	8013cb8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8013c04:	e0bffe17 	ldw	r2,-8(fp)
 8013c08:	10800117 	ldw	r2,4(r2)
 8013c0c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8013c10:	e0bffb17 	ldw	r2,-20(fp)
 8013c14:	10c0058b 	ldhu	r3,22(r2)
 8013c18:	e0bffb17 	ldw	r2,-20(fp)
 8013c1c:	1080050b 	ldhu	r2,20(r2)
 8013c20:	18ffffcc 	andi	r3,r3,65535
 8013c24:	10bfffcc 	andi	r2,r2,65535
 8013c28:	18800636 	bltu	r3,r2,8013c44 <OSQPostFront+0xe8>
 8013c2c:	e0bff817 	ldw	r2,-32(fp)
 8013c30:	e0bffa15 	stw	r2,-24(fp)
 8013c34:	e0bffa17 	ldw	r2,-24(fp)
 8013c38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8013c3c:	00800784 	movi	r2,30
 8013c40:	00001d06 	br	8013cb8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 8013c44:	e0bffb17 	ldw	r2,-20(fp)
 8013c48:	10c00417 	ldw	r3,16(r2)
 8013c4c:	e0bffb17 	ldw	r2,-20(fp)
 8013c50:	10800117 	ldw	r2,4(r2)
 8013c54:	1880041e 	bne	r3,r2,8013c68 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 8013c58:	e0bffb17 	ldw	r2,-20(fp)
 8013c5c:	10c00217 	ldw	r3,8(r2)
 8013c60:	e0bffb17 	ldw	r2,-20(fp)
 8013c64:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 8013c68:	e0bffb17 	ldw	r2,-20(fp)
 8013c6c:	10800417 	ldw	r2,16(r2)
 8013c70:	10ffff04 	addi	r3,r2,-4
 8013c74:	e0bffb17 	ldw	r2,-20(fp)
 8013c78:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 8013c7c:	e0bffb17 	ldw	r2,-20(fp)
 8013c80:	10800417 	ldw	r2,16(r2)
 8013c84:	e0ffff17 	ldw	r3,-4(fp)
 8013c88:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8013c8c:	e0bffb17 	ldw	r2,-20(fp)
 8013c90:	1080058b 	ldhu	r2,22(r2)
 8013c94:	10800044 	addi	r2,r2,1
 8013c98:	1007883a 	mov	r3,r2
 8013c9c:	e0bffb17 	ldw	r2,-20(fp)
 8013ca0:	10c0058d 	sth	r3,22(r2)
 8013ca4:	e0bff817 	ldw	r2,-32(fp)
 8013ca8:	e0bffc15 	stw	r2,-16(fp)
 8013cac:	e0bffc17 	ldw	r2,-16(fp)
 8013cb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013cb4:	0005883a 	mov	r2,zero
}
 8013cb8:	e037883a 	mov	sp,fp
 8013cbc:	dfc00117 	ldw	ra,4(sp)
 8013cc0:	df000017 	ldw	fp,0(sp)
 8013cc4:	dec00204 	addi	sp,sp,8
 8013cc8:	f800283a 	ret

08013ccc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 8013ccc:	defff504 	addi	sp,sp,-44
 8013cd0:	dfc00a15 	stw	ra,40(sp)
 8013cd4:	df000915 	stw	fp,36(sp)
 8013cd8:	df000904 	addi	fp,sp,36
 8013cdc:	e13ffd15 	stw	r4,-12(fp)
 8013ce0:	e17ffe15 	stw	r5,-8(fp)
 8013ce4:	3005883a 	mov	r2,r6
 8013ce8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013cec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013cf0:	e0bffd17 	ldw	r2,-12(fp)
 8013cf4:	1000021e 	bne	r2,zero,8013d00 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 8013cf8:	00800104 	movi	r2,4
 8013cfc:	00007106 	br	8013ec4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8013d00:	e0bffd17 	ldw	r2,-12(fp)
 8013d04:	10800003 	ldbu	r2,0(r2)
 8013d08:	10803fcc 	andi	r2,r2,255
 8013d0c:	108000a0 	cmpeqi	r2,r2,2
 8013d10:	1000021e 	bne	r2,zero,8013d1c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 8013d14:	00800044 	movi	r2,1
 8013d18:	00006a06 	br	8013ec4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013d1c:	0005303a 	rdctl	r2,status
 8013d20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013d24:	e0fffc17 	ldw	r3,-16(fp)
 8013d28:	00bfff84 	movi	r2,-2
 8013d2c:	1884703a 	and	r2,r3,r2
 8013d30:	1001703a 	wrctl	status,r2
  
  return context;
 8013d34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8013d38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 8013d3c:	e0bffd17 	ldw	r2,-12(fp)
 8013d40:	10800283 	ldbu	r2,10(r2)
 8013d44:	10803fcc 	andi	r2,r2,255
 8013d48:	10001d26 	beq	r2,zero,8013dc0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 8013d4c:	e0bfff03 	ldbu	r2,-4(fp)
 8013d50:	1080004c 	andi	r2,r2,1
 8013d54:	10000b26 	beq	r2,zero,8013d84 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8013d58:	00000506 	br	8013d70 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8013d5c:	000f883a 	mov	r7,zero
 8013d60:	01800104 	movi	r6,4
 8013d64:	e17ffe17 	ldw	r5,-8(fp)
 8013d68:	e13ffd17 	ldw	r4,-12(fp)
 8013d6c:	800eda80 	call	800eda8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8013d70:	e0bffd17 	ldw	r2,-12(fp)
 8013d74:	10800283 	ldbu	r2,10(r2)
 8013d78:	10803fcc 	andi	r2,r2,255
 8013d7c:	103ff71e 	bne	r2,zero,8013d5c <__alt_data_end+0xf8013d5c>
 8013d80:	00000506 	br	8013d98 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8013d84:	000f883a 	mov	r7,zero
 8013d88:	01800104 	movi	r6,4
 8013d8c:	e17ffe17 	ldw	r5,-8(fp)
 8013d90:	e13ffd17 	ldw	r4,-12(fp)
 8013d94:	800eda80 	call	800eda8 <OS_EventTaskRdy>
 8013d98:	e0bff717 	ldw	r2,-36(fp)
 8013d9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013da0:	e0bff817 	ldw	r2,-32(fp)
 8013da4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 8013da8:	e0bfff03 	ldbu	r2,-4(fp)
 8013dac:	1080010c 	andi	r2,r2,4
 8013db0:	1000011e 	bne	r2,zero,8013db8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 8013db4:	800f7f40 	call	800f7f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
 8013db8:	0005883a 	mov	r2,zero
 8013dbc:	00004106 	br	8013ec4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8013dc0:	e0bffd17 	ldw	r2,-12(fp)
 8013dc4:	10800117 	ldw	r2,4(r2)
 8013dc8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8013dcc:	e0bffa17 	ldw	r2,-24(fp)
 8013dd0:	10c0058b 	ldhu	r3,22(r2)
 8013dd4:	e0bffa17 	ldw	r2,-24(fp)
 8013dd8:	1080050b 	ldhu	r2,20(r2)
 8013ddc:	18ffffcc 	andi	r3,r3,65535
 8013de0:	10bfffcc 	andi	r2,r2,65535
 8013de4:	18800636 	bltu	r3,r2,8013e00 <OSQPostOpt+0x134>
 8013de8:	e0bff717 	ldw	r2,-36(fp)
 8013dec:	e0bff915 	stw	r2,-28(fp)
 8013df0:	e0bff917 	ldw	r2,-28(fp)
 8013df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8013df8:	00800784 	movi	r2,30
 8013dfc:	00003106 	br	8013ec4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 8013e00:	e0bfff03 	ldbu	r2,-4(fp)
 8013e04:	1080008c 	andi	r2,r2,2
 8013e08:	10001326 	beq	r2,zero,8013e58 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 8013e0c:	e0bffa17 	ldw	r2,-24(fp)
 8013e10:	10c00417 	ldw	r3,16(r2)
 8013e14:	e0bffa17 	ldw	r2,-24(fp)
 8013e18:	10800117 	ldw	r2,4(r2)
 8013e1c:	1880041e 	bne	r3,r2,8013e30 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 8013e20:	e0bffa17 	ldw	r2,-24(fp)
 8013e24:	10c00217 	ldw	r3,8(r2)
 8013e28:	e0bffa17 	ldw	r2,-24(fp)
 8013e2c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 8013e30:	e0bffa17 	ldw	r2,-24(fp)
 8013e34:	10800417 	ldw	r2,16(r2)
 8013e38:	10ffff04 	addi	r3,r2,-4
 8013e3c:	e0bffa17 	ldw	r2,-24(fp)
 8013e40:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 8013e44:	e0bffa17 	ldw	r2,-24(fp)
 8013e48:	10800417 	ldw	r2,16(r2)
 8013e4c:	e0fffe17 	ldw	r3,-8(fp)
 8013e50:	10c00015 	stw	r3,0(r2)
 8013e54:	00001006 	br	8013e98 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 8013e58:	e0bffa17 	ldw	r2,-24(fp)
 8013e5c:	10800317 	ldw	r2,12(r2)
 8013e60:	11000104 	addi	r4,r2,4
 8013e64:	e0fffa17 	ldw	r3,-24(fp)
 8013e68:	19000315 	stw	r4,12(r3)
 8013e6c:	e0fffe17 	ldw	r3,-8(fp)
 8013e70:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 8013e74:	e0bffa17 	ldw	r2,-24(fp)
 8013e78:	10c00317 	ldw	r3,12(r2)
 8013e7c:	e0bffa17 	ldw	r2,-24(fp)
 8013e80:	10800217 	ldw	r2,8(r2)
 8013e84:	1880041e 	bne	r3,r2,8013e98 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 8013e88:	e0bffa17 	ldw	r2,-24(fp)
 8013e8c:	10c00117 	ldw	r3,4(r2)
 8013e90:	e0bffa17 	ldw	r2,-24(fp)
 8013e94:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8013e98:	e0bffa17 	ldw	r2,-24(fp)
 8013e9c:	1080058b 	ldhu	r2,22(r2)
 8013ea0:	10800044 	addi	r2,r2,1
 8013ea4:	1007883a 	mov	r3,r2
 8013ea8:	e0bffa17 	ldw	r2,-24(fp)
 8013eac:	10c0058d 	sth	r3,22(r2)
 8013eb0:	e0bff717 	ldw	r2,-36(fp)
 8013eb4:	e0bffb15 	stw	r2,-20(fp)
 8013eb8:	e0bffb17 	ldw	r2,-20(fp)
 8013ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013ec0:	0005883a 	mov	r2,zero
}
 8013ec4:	e037883a 	mov	sp,fp
 8013ec8:	dfc00117 	ldw	ra,4(sp)
 8013ecc:	df000017 	ldw	fp,0(sp)
 8013ed0:	dec00204 	addi	sp,sp,8
 8013ed4:	f800283a 	ret

08013ed8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 8013ed8:	defff604 	addi	sp,sp,-40
 8013edc:	df000915 	stw	fp,36(sp)
 8013ee0:	df000904 	addi	fp,sp,36
 8013ee4:	e13ffe15 	stw	r4,-8(fp)
 8013ee8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8013eec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8013ef0:	e0bffe17 	ldw	r2,-8(fp)
 8013ef4:	1000021e 	bne	r2,zero,8013f00 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 8013ef8:	00800104 	movi	r2,4
 8013efc:	00004906 	br	8014024 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 8013f00:	e0bfff17 	ldw	r2,-4(fp)
 8013f04:	1000021e 	bne	r2,zero,8013f10 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 8013f08:	00800244 	movi	r2,9
 8013f0c:	00004506 	br	8014024 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8013f10:	e0bffe17 	ldw	r2,-8(fp)
 8013f14:	10800003 	ldbu	r2,0(r2)
 8013f18:	10803fcc 	andi	r2,r2,255
 8013f1c:	108000a0 	cmpeqi	r2,r2,2
 8013f20:	1000021e 	bne	r2,zero,8013f2c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8013f24:	00800044 	movi	r2,1
 8013f28:	00003e06 	br	8014024 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013f2c:	0005303a 	rdctl	r2,status
 8013f30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013f34:	e0fffd17 	ldw	r3,-12(fp)
 8013f38:	00bfff84 	movi	r2,-2
 8013f3c:	1884703a 	and	r2,r3,r2
 8013f40:	1001703a 	wrctl	status,r2
  
  return context;
 8013f44:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013f48:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 8013f4c:	e0bffe17 	ldw	r2,-8(fp)
 8013f50:	10c00283 	ldbu	r3,10(r2)
 8013f54:	e0bfff17 	ldw	r2,-4(fp)
 8013f58:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 8013f5c:	e0bffe17 	ldw	r2,-8(fp)
 8013f60:	108002c4 	addi	r2,r2,11
 8013f64:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 8013f68:	e0bfff17 	ldw	r2,-4(fp)
 8013f6c:	10800204 	addi	r2,r2,8
 8013f70:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8013f74:	e03ff705 	stb	zero,-36(fp)
 8013f78:	00000b06 	br	8013fa8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 8013f7c:	e0bff917 	ldw	r2,-28(fp)
 8013f80:	10c00044 	addi	r3,r2,1
 8013f84:	e0fff915 	stw	r3,-28(fp)
 8013f88:	e0fff817 	ldw	r3,-32(fp)
 8013f8c:	19000044 	addi	r4,r3,1
 8013f90:	e13ff815 	stw	r4,-32(fp)
 8013f94:	18c00003 	ldbu	r3,0(r3)
 8013f98:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8013f9c:	e0bff703 	ldbu	r2,-36(fp)
 8013fa0:	10800044 	addi	r2,r2,1
 8013fa4:	e0bff705 	stb	r2,-36(fp)
 8013fa8:	e0bff703 	ldbu	r2,-36(fp)
 8013fac:	108000f0 	cmpltui	r2,r2,3
 8013fb0:	103ff21e 	bne	r2,zero,8013f7c <__alt_data_end+0xf8013f7c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 8013fb4:	e0bffe17 	ldw	r2,-8(fp)
 8013fb8:	10800117 	ldw	r2,4(r2)
 8013fbc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 8013fc0:	e0bffc17 	ldw	r2,-16(fp)
 8013fc4:	1080058b 	ldhu	r2,22(r2)
 8013fc8:	10bfffcc 	andi	r2,r2,65535
 8013fcc:	10000626 	beq	r2,zero,8013fe8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 8013fd0:	e0bffc17 	ldw	r2,-16(fp)
 8013fd4:	10800417 	ldw	r2,16(r2)
 8013fd8:	10c00017 	ldw	r3,0(r2)
 8013fdc:	e0bfff17 	ldw	r2,-4(fp)
 8013fe0:	10c00015 	stw	r3,0(r2)
 8013fe4:	00000206 	br	8013ff0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 8013fe8:	e0bfff17 	ldw	r2,-4(fp)
 8013fec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 8013ff0:	e0bffc17 	ldw	r2,-16(fp)
 8013ff4:	10c0058b 	ldhu	r3,22(r2)
 8013ff8:	e0bfff17 	ldw	r2,-4(fp)
 8013ffc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 8014000:	e0bffc17 	ldw	r2,-16(fp)
 8014004:	10c0050b 	ldhu	r3,20(r2)
 8014008:	e0bfff17 	ldw	r2,-4(fp)
 801400c:	10c0018d 	sth	r3,6(r2)
 8014010:	e0bffa17 	ldw	r2,-24(fp)
 8014014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014018:	e0bffb17 	ldw	r2,-20(fp)
 801401c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8014020:	0005883a 	mov	r2,zero
}
 8014024:	e037883a 	mov	sp,fp
 8014028:	df000017 	ldw	fp,0(sp)
 801402c:	dec00104 	addi	sp,sp,4
 8014030:	f800283a 	ret

08014034 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8014034:	defffb04 	addi	sp,sp,-20
 8014038:	dfc00415 	stw	ra,16(sp)
 801403c:	df000315 	stw	fp,12(sp)
 8014040:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8014044:	01407804 	movi	r5,480
 8014048:	010200b4 	movhi	r4,2050
 801404c:	21091004 	addi	r4,r4,9280
 8014050:	800f7380 	call	800f738 <OS_MemClr>
    pq1 = &OSQTbl[0];
 8014054:	008200b4 	movhi	r2,2050
 8014058:	10891004 	addi	r2,r2,9280
 801405c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 8014060:	008200b4 	movhi	r2,2050
 8014064:	10891604 	addi	r2,r2,9304
 8014068:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 801406c:	e03ffd0d 	sth	zero,-12(fp)
 8014070:	00000c06 	br	80140a4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 8014074:	e0bffe17 	ldw	r2,-8(fp)
 8014078:	e0ffff17 	ldw	r3,-4(fp)
 801407c:	10c00015 	stw	r3,0(r2)
        pq1++;
 8014080:	e0bffe17 	ldw	r2,-8(fp)
 8014084:	10800604 	addi	r2,r2,24
 8014088:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 801408c:	e0bfff17 	ldw	r2,-4(fp)
 8014090:	10800604 	addi	r2,r2,24
 8014094:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 8014098:	e0bffd0b 	ldhu	r2,-12(fp)
 801409c:	10800044 	addi	r2,r2,1
 80140a0:	e0bffd0d 	sth	r2,-12(fp)
 80140a4:	e0bffd0b 	ldhu	r2,-12(fp)
 80140a8:	108004f0 	cmpltui	r2,r2,19
 80140ac:	103ff11e 	bne	r2,zero,8014074 <__alt_data_end+0xf8014074>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 80140b0:	e0bffe17 	ldw	r2,-8(fp)
 80140b4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 80140b8:	008200b4 	movhi	r2,2050
 80140bc:	10891004 	addi	r2,r2,9280
 80140c0:	d0a73415 	stw	r2,-25392(gp)
#endif
}
 80140c4:	0001883a 	nop
 80140c8:	e037883a 	mov	sp,fp
 80140cc:	dfc00117 	ldw	ra,4(sp)
 80140d0:	df000017 	ldw	fp,0(sp)
 80140d4:	dec00204 	addi	sp,sp,8
 80140d8:	f800283a 	ret

080140dc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 80140dc:	defffa04 	addi	sp,sp,-24
 80140e0:	df000515 	stw	fp,20(sp)
 80140e4:	df000504 	addi	fp,sp,20
 80140e8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80140ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80140f0:	e0bfff17 	ldw	r2,-4(fp)
 80140f4:	1000021e 	bne	r2,zero,8014100 <OSSemAccept+0x24>
        return (0);
 80140f8:	0005883a 	mov	r2,zero
 80140fc:	00001f06 	br	801417c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8014100:	e0bfff17 	ldw	r2,-4(fp)
 8014104:	10800003 	ldbu	r2,0(r2)
 8014108:	10803fcc 	andi	r2,r2,255
 801410c:	108000e0 	cmpeqi	r2,r2,3
 8014110:	1000021e 	bne	r2,zero,801411c <OSSemAccept+0x40>
        return (0);
 8014114:	0005883a 	mov	r2,zero
 8014118:	00001806 	br	801417c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801411c:	0005303a 	rdctl	r2,status
 8014120:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014124:	e0fffe17 	ldw	r3,-8(fp)
 8014128:	00bfff84 	movi	r2,-2
 801412c:	1884703a 	and	r2,r3,r2
 8014130:	1001703a 	wrctl	status,r2
  
  return context;
 8014134:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 8014138:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 801413c:	e0bfff17 	ldw	r2,-4(fp)
 8014140:	1080020b 	ldhu	r2,8(r2)
 8014144:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 8014148:	e0bffd0b 	ldhu	r2,-12(fp)
 801414c:	10000626 	beq	r2,zero,8014168 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 8014150:	e0bfff17 	ldw	r2,-4(fp)
 8014154:	1080020b 	ldhu	r2,8(r2)
 8014158:	10bfffc4 	addi	r2,r2,-1
 801415c:	1007883a 	mov	r3,r2
 8014160:	e0bfff17 	ldw	r2,-4(fp)
 8014164:	10c0020d 	sth	r3,8(r2)
 8014168:	e0bffb17 	ldw	r2,-20(fp)
 801416c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014170:	e0bffc17 	ldw	r2,-16(fp)
 8014174:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 8014178:	e0bffd0b 	ldhu	r2,-12(fp)
}
 801417c:	e037883a 	mov	sp,fp
 8014180:	df000017 	ldw	fp,0(sp)
 8014184:	dec00104 	addi	sp,sp,4
 8014188:	f800283a 	ret

0801418c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 801418c:	defff904 	addi	sp,sp,-28
 8014190:	dfc00615 	stw	ra,24(sp)
 8014194:	df000515 	stw	fp,20(sp)
 8014198:	df000504 	addi	fp,sp,20
 801419c:	2005883a 	mov	r2,r4
 80141a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 80141a4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80141a8:	d0a73703 	ldbu	r2,-25380(gp)
 80141ac:	10803fcc 	andi	r2,r2,255
 80141b0:	10000226 	beq	r2,zero,80141bc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 80141b4:	0005883a 	mov	r2,zero
 80141b8:	00002506 	br	8014250 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80141bc:	0005303a 	rdctl	r2,status
 80141c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80141c4:	e0fffe17 	ldw	r3,-8(fp)
 80141c8:	00bfff84 	movi	r2,-2
 80141cc:	1884703a 	and	r2,r3,r2
 80141d0:	1001703a 	wrctl	status,r2
  
  return context;
 80141d4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 80141d8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 80141dc:	d0a73617 	ldw	r2,-25384(gp)
 80141e0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 80141e4:	d0a73617 	ldw	r2,-25384(gp)
 80141e8:	10000326 	beq	r2,zero,80141f8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80141ec:	d0a73617 	ldw	r2,-25384(gp)
 80141f0:	10800117 	ldw	r2,4(r2)
 80141f4:	d0a73615 	stw	r2,-25384(gp)
 80141f8:	e0bffb17 	ldw	r2,-20(fp)
 80141fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014200:	e0bffc17 	ldw	r2,-16(fp)
 8014204:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8014208:	e0bffd17 	ldw	r2,-12(fp)
 801420c:	10000f26 	beq	r2,zero,801424c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8014210:	e0bffd17 	ldw	r2,-12(fp)
 8014214:	00c000c4 	movi	r3,3
 8014218:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 801421c:	e0bffd17 	ldw	r2,-12(fp)
 8014220:	e0ffff0b 	ldhu	r3,-4(fp)
 8014224:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8014228:	e0bffd17 	ldw	r2,-12(fp)
 801422c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 8014230:	e0bffd17 	ldw	r2,-12(fp)
 8014234:	00c00fc4 	movi	r3,63
 8014238:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 801423c:	e0bffd17 	ldw	r2,-12(fp)
 8014240:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8014244:	e13ffd17 	ldw	r4,-12(fp)
 8014248:	800f3580 	call	800f358 <OS_EventWaitListInit>
    }
    return (pevent);
 801424c:	e0bffd17 	ldw	r2,-12(fp)
}
 8014250:	e037883a 	mov	sp,fp
 8014254:	dfc00117 	ldw	ra,4(sp)
 8014258:	df000017 	ldw	fp,0(sp)
 801425c:	dec00204 	addi	sp,sp,8
 8014260:	f800283a 	ret

08014264 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8014264:	defff304 	addi	sp,sp,-52
 8014268:	dfc00c15 	stw	ra,48(sp)
 801426c:	df000b15 	stw	fp,44(sp)
 8014270:	df000b04 	addi	fp,sp,44
 8014274:	e13ffd15 	stw	r4,-12(fp)
 8014278:	2805883a 	mov	r2,r5
 801427c:	e1bfff15 	stw	r6,-4(fp)
 8014280:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8014284:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8014288:	e0bfff17 	ldw	r2,-4(fp)
 801428c:	1000021e 	bne	r2,zero,8014298 <OSSemDel+0x34>
        return (pevent);
 8014290:	e0bffd17 	ldw	r2,-12(fp)
 8014294:	00007e06 	br	8014490 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8014298:	e0bffd17 	ldw	r2,-12(fp)
 801429c:	1000051e 	bne	r2,zero,80142b4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80142a0:	e0bfff17 	ldw	r2,-4(fp)
 80142a4:	00c00104 	movi	r3,4
 80142a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80142ac:	e0bffd17 	ldw	r2,-12(fp)
 80142b0:	00007706 	br	8014490 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 80142b4:	e0bffd17 	ldw	r2,-12(fp)
 80142b8:	10800003 	ldbu	r2,0(r2)
 80142bc:	10803fcc 	andi	r2,r2,255
 80142c0:	108000e0 	cmpeqi	r2,r2,3
 80142c4:	1000051e 	bne	r2,zero,80142dc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80142c8:	e0bfff17 	ldw	r2,-4(fp)
 80142cc:	00c00044 	movi	r3,1
 80142d0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80142d4:	e0bffd17 	ldw	r2,-12(fp)
 80142d8:	00006d06 	br	8014490 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80142dc:	d0a73703 	ldbu	r2,-25380(gp)
 80142e0:	10803fcc 	andi	r2,r2,255
 80142e4:	10000526 	beq	r2,zero,80142fc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 80142e8:	e0bfff17 	ldw	r2,-4(fp)
 80142ec:	00c003c4 	movi	r3,15
 80142f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80142f4:	e0bffd17 	ldw	r2,-12(fp)
 80142f8:	00006506 	br	8014490 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80142fc:	0005303a 	rdctl	r2,status
 8014300:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014304:	e0fffc17 	ldw	r3,-16(fp)
 8014308:	00bfff84 	movi	r2,-2
 801430c:	1884703a 	and	r2,r3,r2
 8014310:	1001703a 	wrctl	status,r2
  
  return context;
 8014314:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8014318:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 801431c:	e0bffd17 	ldw	r2,-12(fp)
 8014320:	10800283 	ldbu	r2,10(r2)
 8014324:	10803fcc 	andi	r2,r2,255
 8014328:	10000326 	beq	r2,zero,8014338 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 801432c:	00800044 	movi	r2,1
 8014330:	e0bff505 	stb	r2,-44(fp)
 8014334:	00000106 	br	801433c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8014338:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 801433c:	e0bffe03 	ldbu	r2,-8(fp)
 8014340:	10000326 	beq	r2,zero,8014350 <OSSemDel+0xec>
 8014344:	10800060 	cmpeqi	r2,r2,1
 8014348:	1000281e 	bne	r2,zero,80143ec <OSSemDel+0x188>
 801434c:	00004506 	br	8014464 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 8014350:	e0bff503 	ldbu	r2,-44(fp)
 8014354:	1000161e 	bne	r2,zero,80143b0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 8014358:	e0bffd17 	ldw	r2,-12(fp)
 801435c:	00c00fc4 	movi	r3,63
 8014360:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 8014364:	e0bffd17 	ldw	r2,-12(fp)
 8014368:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 801436c:	e0bffd17 	ldw	r2,-12(fp)
 8014370:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 8014374:	d0e73617 	ldw	r3,-25384(gp)
 8014378:	e0bffd17 	ldw	r2,-12(fp)
 801437c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 8014380:	e0bffd17 	ldw	r2,-12(fp)
 8014384:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 8014388:	e0bffd17 	ldw	r2,-12(fp)
 801438c:	d0a73615 	stw	r2,-25384(gp)
 8014390:	e0bff717 	ldw	r2,-36(fp)
 8014394:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014398:	e0bff817 	ldw	r2,-32(fp)
 801439c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 80143a0:	e0bfff17 	ldw	r2,-4(fp)
 80143a4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 80143a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 80143ac:	00003706 	br	801448c <OSSemDel+0x228>
 80143b0:	e0bff717 	ldw	r2,-36(fp)
 80143b4:	e0bff915 	stw	r2,-28(fp)
 80143b8:	e0bff917 	ldw	r2,-28(fp)
 80143bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 80143c0:	e0bfff17 	ldw	r2,-4(fp)
 80143c4:	00c01244 	movi	r3,73
 80143c8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 80143cc:	e0bffd17 	ldw	r2,-12(fp)
 80143d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 80143d4:	00002d06 	br	801448c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80143d8:	000f883a 	mov	r7,zero
 80143dc:	01800044 	movi	r6,1
 80143e0:	000b883a 	mov	r5,zero
 80143e4:	e13ffd17 	ldw	r4,-12(fp)
 80143e8:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 80143ec:	e0bffd17 	ldw	r2,-12(fp)
 80143f0:	10800283 	ldbu	r2,10(r2)
 80143f4:	10803fcc 	andi	r2,r2,255
 80143f8:	103ff71e 	bne	r2,zero,80143d8 <__alt_data_end+0xf80143d8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 80143fc:	e0bffd17 	ldw	r2,-12(fp)
 8014400:	00c00fc4 	movi	r3,63
 8014404:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 8014408:	e0bffd17 	ldw	r2,-12(fp)
 801440c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8014410:	e0bffd17 	ldw	r2,-12(fp)
 8014414:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 8014418:	d0e73617 	ldw	r3,-25384(gp)
 801441c:	e0bffd17 	ldw	r2,-12(fp)
 8014420:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 8014424:	e0bffd17 	ldw	r2,-12(fp)
 8014428:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 801442c:	e0bffd17 	ldw	r2,-12(fp)
 8014430:	d0a73615 	stw	r2,-25384(gp)
 8014434:	e0bff717 	ldw	r2,-36(fp)
 8014438:	e0bffa15 	stw	r2,-24(fp)
 801443c:	e0bffa17 	ldw	r2,-24(fp)
 8014440:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8014444:	e0bff503 	ldbu	r2,-44(fp)
 8014448:	10800058 	cmpnei	r2,r2,1
 801444c:	1000011e 	bne	r2,zero,8014454 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 8014450:	800f7f40 	call	800f7f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 8014454:	e0bfff17 	ldw	r2,-4(fp)
 8014458:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 801445c:	e03ff615 	stw	zero,-40(fp)
             break;
 8014460:	00000a06 	br	801448c <OSSemDel+0x228>
 8014464:	e0bff717 	ldw	r2,-36(fp)
 8014468:	e0bffb15 	stw	r2,-20(fp)
 801446c:	e0bffb17 	ldw	r2,-20(fp)
 8014470:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 8014474:	e0bfff17 	ldw	r2,-4(fp)
 8014478:	00c001c4 	movi	r3,7
 801447c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 8014480:	e0bffd17 	ldw	r2,-12(fp)
 8014484:	e0bff615 	stw	r2,-40(fp)
             break;
 8014488:	0001883a 	nop
    }
    return (pevent_return);
 801448c:	e0bff617 	ldw	r2,-40(fp)
}
 8014490:	e037883a 	mov	sp,fp
 8014494:	dfc00117 	ldw	ra,4(sp)
 8014498:	df000017 	ldw	fp,0(sp)
 801449c:	dec00204 	addi	sp,sp,8
 80144a0:	f800283a 	ret

080144a4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 80144a4:	defff504 	addi	sp,sp,-44
 80144a8:	dfc00a15 	stw	ra,40(sp)
 80144ac:	df000915 	stw	fp,36(sp)
 80144b0:	df000904 	addi	fp,sp,36
 80144b4:	e13ffd15 	stw	r4,-12(fp)
 80144b8:	2805883a 	mov	r2,r5
 80144bc:	e1bfff15 	stw	r6,-4(fp)
 80144c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80144c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80144c8:	e0bfff17 	ldw	r2,-4(fp)
 80144cc:	10007226 	beq	r2,zero,8014698 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80144d0:	e0bffd17 	ldw	r2,-12(fp)
 80144d4:	1000041e 	bne	r2,zero,80144e8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 80144d8:	e0bfff17 	ldw	r2,-4(fp)
 80144dc:	00c00104 	movi	r3,4
 80144e0:	10c00005 	stb	r3,0(r2)
        return;
 80144e4:	00006d06 	br	801469c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80144e8:	e0bffd17 	ldw	r2,-12(fp)
 80144ec:	10800003 	ldbu	r2,0(r2)
 80144f0:	10803fcc 	andi	r2,r2,255
 80144f4:	108000e0 	cmpeqi	r2,r2,3
 80144f8:	1000041e 	bne	r2,zero,801450c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 80144fc:	e0bfff17 	ldw	r2,-4(fp)
 8014500:	00c00044 	movi	r3,1
 8014504:	10c00005 	stb	r3,0(r2)
        return;
 8014508:	00006406 	br	801469c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 801450c:	d0a73703 	ldbu	r2,-25380(gp)
 8014510:	10803fcc 	andi	r2,r2,255
 8014514:	10000426 	beq	r2,zero,8014528 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8014518:	e0bfff17 	ldw	r2,-4(fp)
 801451c:	00c00084 	movi	r3,2
 8014520:	10c00005 	stb	r3,0(r2)
        return;
 8014524:	00005d06 	br	801469c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 8014528:	d0a72903 	ldbu	r2,-25436(gp)
 801452c:	10803fcc 	andi	r2,r2,255
 8014530:	10000426 	beq	r2,zero,8014544 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8014534:	e0bfff17 	ldw	r2,-4(fp)
 8014538:	00c00344 	movi	r3,13
 801453c:	10c00005 	stb	r3,0(r2)
        return;
 8014540:	00005606 	br	801469c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014544:	0005303a 	rdctl	r2,status
 8014548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801454c:	e0fffc17 	ldw	r3,-16(fp)
 8014550:	00bfff84 	movi	r2,-2
 8014554:	1884703a 	and	r2,r3,r2
 8014558:	1001703a 	wrctl	status,r2
  
  return context;
 801455c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8014560:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 8014564:	e0bffd17 	ldw	r2,-12(fp)
 8014568:	1080020b 	ldhu	r2,8(r2)
 801456c:	10bfffcc 	andi	r2,r2,65535
 8014570:	10000d26 	beq	r2,zero,80145a8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8014574:	e0bffd17 	ldw	r2,-12(fp)
 8014578:	1080020b 	ldhu	r2,8(r2)
 801457c:	10bfffc4 	addi	r2,r2,-1
 8014580:	1007883a 	mov	r3,r2
 8014584:	e0bffd17 	ldw	r2,-12(fp)
 8014588:	10c0020d 	sth	r3,8(r2)
 801458c:	e0bff717 	ldw	r2,-36(fp)
 8014590:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014594:	e0bff817 	ldw	r2,-32(fp)
 8014598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 801459c:	e0bfff17 	ldw	r2,-4(fp)
 80145a0:	10000005 	stb	zero,0(r2)
        return;
 80145a4:	00003d06 	br	801469c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80145a8:	d0a73817 	ldw	r2,-25376(gp)
 80145ac:	d0e73817 	ldw	r3,-25376(gp)
 80145b0:	18c00c03 	ldbu	r3,48(r3)
 80145b4:	18c00054 	ori	r3,r3,1
 80145b8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80145bc:	d0a73817 	ldw	r2,-25376(gp)
 80145c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80145c4:	d0a73817 	ldw	r2,-25376(gp)
 80145c8:	e0fffe0b 	ldhu	r3,-8(fp)
 80145cc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80145d0:	e13ffd17 	ldw	r4,-12(fp)
 80145d4:	800ef400 	call	800ef40 <OS_EventTaskWait>
 80145d8:	e0bff717 	ldw	r2,-36(fp)
 80145dc:	e0bffb15 	stw	r2,-20(fp)
 80145e0:	e0bffb17 	ldw	r2,-20(fp)
 80145e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 80145e8:	800f7f40 	call	800f7f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80145ec:	0005303a 	rdctl	r2,status
 80145f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80145f4:	e0fff917 	ldw	r3,-28(fp)
 80145f8:	00bfff84 	movi	r2,-2
 80145fc:	1884703a 	and	r2,r3,r2
 8014600:	1001703a 	wrctl	status,r2
  
  return context;
 8014604:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 8014608:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 801460c:	d0a73817 	ldw	r2,-25376(gp)
 8014610:	10800c43 	ldbu	r2,49(r2)
 8014614:	10803fcc 	andi	r2,r2,255
 8014618:	10000326 	beq	r2,zero,8014628 <OSSemPend+0x184>
 801461c:	108000a0 	cmpeqi	r2,r2,2
 8014620:	1000041e 	bne	r2,zero,8014634 <OSSemPend+0x190>
 8014624:	00000706 	br	8014644 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8014628:	e0bfff17 	ldw	r2,-4(fp)
 801462c:	10000005 	stb	zero,0(r2)
             break;
 8014630:	00000c06 	br	8014664 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8014634:	e0bfff17 	ldw	r2,-4(fp)
 8014638:	00c00384 	movi	r3,14
 801463c:	10c00005 	stb	r3,0(r2)
             break;
 8014640:	00000806 	br	8014664 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 8014644:	d0a73817 	ldw	r2,-25376(gp)
 8014648:	e17ffd17 	ldw	r5,-12(fp)
 801464c:	1009883a 	mov	r4,r2
 8014650:	800f1a00 	call	800f1a0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8014654:	e0bfff17 	ldw	r2,-4(fp)
 8014658:	00c00284 	movi	r3,10
 801465c:	10c00005 	stb	r3,0(r2)
             break;
 8014660:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8014664:	d0a73817 	ldw	r2,-25376(gp)
 8014668:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 801466c:	d0a73817 	ldw	r2,-25376(gp)
 8014670:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8014674:	d0a73817 	ldw	r2,-25376(gp)
 8014678:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 801467c:	d0a73817 	ldw	r2,-25376(gp)
 8014680:	10000815 	stw	zero,32(r2)
 8014684:	e0bff717 	ldw	r2,-36(fp)
 8014688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801468c:	e0bffa17 	ldw	r2,-24(fp)
 8014690:	1001703a 	wrctl	status,r2
 8014694:	00000106 	br	801469c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 8014698:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 801469c:	e037883a 	mov	sp,fp
 80146a0:	dfc00117 	ldw	ra,4(sp)
 80146a4:	df000017 	ldw	fp,0(sp)
 80146a8:	dec00204 	addi	sp,sp,8
 80146ac:	f800283a 	ret

080146b0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 80146b0:	defff604 	addi	sp,sp,-40
 80146b4:	dfc00915 	stw	ra,36(sp)
 80146b8:	df000815 	stw	fp,32(sp)
 80146bc:	df000804 	addi	fp,sp,32
 80146c0:	e13ffd15 	stw	r4,-12(fp)
 80146c4:	2805883a 	mov	r2,r5
 80146c8:	e1bfff15 	stw	r6,-4(fp)
 80146cc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80146d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80146d4:	e0bfff17 	ldw	r2,-4(fp)
 80146d8:	1000021e 	bne	r2,zero,80146e4 <OSSemPendAbort+0x34>
        return (0);
 80146dc:	0005883a 	mov	r2,zero
 80146e0:	00004906 	br	8014808 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80146e4:	e0bffd17 	ldw	r2,-12(fp)
 80146e8:	1000051e 	bne	r2,zero,8014700 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80146ec:	e0bfff17 	ldw	r2,-4(fp)
 80146f0:	00c00104 	movi	r3,4
 80146f4:	10c00005 	stb	r3,0(r2)
        return (0);
 80146f8:	0005883a 	mov	r2,zero
 80146fc:	00004206 	br	8014808 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8014700:	e0bffd17 	ldw	r2,-12(fp)
 8014704:	10800003 	ldbu	r2,0(r2)
 8014708:	10803fcc 	andi	r2,r2,255
 801470c:	108000e0 	cmpeqi	r2,r2,3
 8014710:	1000051e 	bne	r2,zero,8014728 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8014714:	e0bfff17 	ldw	r2,-4(fp)
 8014718:	00c00044 	movi	r3,1
 801471c:	10c00005 	stb	r3,0(r2)
        return (0);
 8014720:	0005883a 	mov	r2,zero
 8014724:	00003806 	br	8014808 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014728:	0005303a 	rdctl	r2,status
 801472c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014730:	e0fffc17 	ldw	r3,-16(fp)
 8014734:	00bfff84 	movi	r2,-2
 8014738:	1884703a 	and	r2,r3,r2
 801473c:	1001703a 	wrctl	status,r2
  
  return context;
 8014740:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8014744:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 8014748:	e0bffd17 	ldw	r2,-12(fp)
 801474c:	10800283 	ldbu	r2,10(r2)
 8014750:	10803fcc 	andi	r2,r2,255
 8014754:	10002526 	beq	r2,zero,80147ec <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 8014758:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 801475c:	e0bffe03 	ldbu	r2,-8(fp)
 8014760:	10800060 	cmpeqi	r2,r2,1
 8014764:	10000e26 	beq	r2,zero,80147a0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 8014768:	00000806 	br	801478c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 801476c:	01c00084 	movi	r7,2
 8014770:	01800044 	movi	r6,1
 8014774:	000b883a 	mov	r5,zero
 8014778:	e13ffd17 	ldw	r4,-12(fp)
 801477c:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                     nbr_tasks++;
 8014780:	e0bff803 	ldbu	r2,-32(fp)
 8014784:	10800044 	addi	r2,r2,1
 8014788:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 801478c:	e0bffd17 	ldw	r2,-12(fp)
 8014790:	10800283 	ldbu	r2,10(r2)
 8014794:	10803fcc 	andi	r2,r2,255
 8014798:	103ff41e 	bne	r2,zero,801476c <__alt_data_end+0xf801476c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 801479c:	00000906 	br	80147c4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 80147a0:	01c00084 	movi	r7,2
 80147a4:	01800044 	movi	r6,1
 80147a8:	000b883a 	mov	r5,zero
 80147ac:	e13ffd17 	ldw	r4,-12(fp)
 80147b0:	800eda80 	call	800eda8 <OS_EventTaskRdy>
                 nbr_tasks++;
 80147b4:	e0bff803 	ldbu	r2,-32(fp)
 80147b8:	10800044 	addi	r2,r2,1
 80147bc:	e0bff805 	stb	r2,-32(fp)
                 break;
 80147c0:	0001883a 	nop
 80147c4:	e0bff917 	ldw	r2,-28(fp)
 80147c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80147cc:	e0bffa17 	ldw	r2,-24(fp)
 80147d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 80147d4:	800f7f40 	call	800f7f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 80147d8:	e0bfff17 	ldw	r2,-4(fp)
 80147dc:	00c00384 	movi	r3,14
 80147e0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 80147e4:	e0bff803 	ldbu	r2,-32(fp)
 80147e8:	00000706 	br	8014808 <OSSemPendAbort+0x158>
 80147ec:	e0bff917 	ldw	r2,-28(fp)
 80147f0:	e0bffb15 	stw	r2,-20(fp)
 80147f4:	e0bffb17 	ldw	r2,-20(fp)
 80147f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80147fc:	e0bfff17 	ldw	r2,-4(fp)
 8014800:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 8014804:	0005883a 	mov	r2,zero
}
 8014808:	e037883a 	mov	sp,fp
 801480c:	dfc00117 	ldw	ra,4(sp)
 8014810:	df000017 	ldw	fp,0(sp)
 8014814:	dec00204 	addi	sp,sp,8
 8014818:	f800283a 	ret

0801481c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 801481c:	defff804 	addi	sp,sp,-32
 8014820:	dfc00715 	stw	ra,28(sp)
 8014824:	df000615 	stw	fp,24(sp)
 8014828:	df000604 	addi	fp,sp,24
 801482c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8014830:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8014834:	e0bfff17 	ldw	r2,-4(fp)
 8014838:	1000021e 	bne	r2,zero,8014844 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 801483c:	00800104 	movi	r2,4
 8014840:	00003506 	br	8014918 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8014844:	e0bfff17 	ldw	r2,-4(fp)
 8014848:	10800003 	ldbu	r2,0(r2)
 801484c:	10803fcc 	andi	r2,r2,255
 8014850:	108000e0 	cmpeqi	r2,r2,3
 8014854:	1000021e 	bne	r2,zero,8014860 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 8014858:	00800044 	movi	r2,1
 801485c:	00002e06 	br	8014918 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014860:	0005303a 	rdctl	r2,status
 8014864:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014868:	e0fffe17 	ldw	r3,-8(fp)
 801486c:	00bfff84 	movi	r2,-2
 8014870:	1884703a 	and	r2,r3,r2
 8014874:	1001703a 	wrctl	status,r2
  
  return context;
 8014878:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 801487c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 8014880:	e0bfff17 	ldw	r2,-4(fp)
 8014884:	10800283 	ldbu	r2,10(r2)
 8014888:	10803fcc 	andi	r2,r2,255
 801488c:	10000c26 	beq	r2,zero,80148c0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8014890:	000f883a 	mov	r7,zero
 8014894:	01800044 	movi	r6,1
 8014898:	000b883a 	mov	r5,zero
 801489c:	e13fff17 	ldw	r4,-4(fp)
 80148a0:	800eda80 	call	800eda8 <OS_EventTaskRdy>
 80148a4:	e0bffa17 	ldw	r2,-24(fp)
 80148a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80148ac:	e0bffb17 	ldw	r2,-20(fp)
 80148b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 80148b4:	800f7f40 	call	800f7f4 <OS_Sched>
        return (OS_ERR_NONE);
 80148b8:	0005883a 	mov	r2,zero
 80148bc:	00001606 	br	8014918 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 80148c0:	e0bfff17 	ldw	r2,-4(fp)
 80148c4:	1080020b 	ldhu	r2,8(r2)
 80148c8:	10ffffcc 	andi	r3,r2,65535
 80148cc:	00bfffd4 	movui	r2,65535
 80148d0:	18800c26 	beq	r3,r2,8014904 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 80148d4:	e0bfff17 	ldw	r2,-4(fp)
 80148d8:	1080020b 	ldhu	r2,8(r2)
 80148dc:	10800044 	addi	r2,r2,1
 80148e0:	1007883a 	mov	r3,r2
 80148e4:	e0bfff17 	ldw	r2,-4(fp)
 80148e8:	10c0020d 	sth	r3,8(r2)
 80148ec:	e0bffa17 	ldw	r2,-24(fp)
 80148f0:	e0bffc15 	stw	r2,-16(fp)
 80148f4:	e0bffc17 	ldw	r2,-16(fp)
 80148f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 80148fc:	0005883a 	mov	r2,zero
 8014900:	00000506 	br	8014918 <OSSemPost+0xfc>
 8014904:	e0bffa17 	ldw	r2,-24(fp)
 8014908:	e0bffd15 	stw	r2,-12(fp)
 801490c:	e0bffd17 	ldw	r2,-12(fp)
 8014910:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 8014914:	00800c84 	movi	r2,50
}
 8014918:	e037883a 	mov	sp,fp
 801491c:	dfc00117 	ldw	ra,4(sp)
 8014920:	df000017 	ldw	fp,0(sp)
 8014924:	dec00204 	addi	sp,sp,8
 8014928:	f800283a 	ret

0801492c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 801492c:	defff704 	addi	sp,sp,-36
 8014930:	df000815 	stw	fp,32(sp)
 8014934:	df000804 	addi	fp,sp,32
 8014938:	e13ffe15 	stw	r4,-8(fp)
 801493c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8014940:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8014944:	e0bffe17 	ldw	r2,-8(fp)
 8014948:	1000021e 	bne	r2,zero,8014954 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 801494c:	00800104 	movi	r2,4
 8014950:	00003606 	br	8014a2c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 8014954:	e0bfff17 	ldw	r2,-4(fp)
 8014958:	1000021e 	bne	r2,zero,8014964 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 801495c:	00800244 	movi	r2,9
 8014960:	00003206 	br	8014a2c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 8014964:	e0bffe17 	ldw	r2,-8(fp)
 8014968:	10800003 	ldbu	r2,0(r2)
 801496c:	10803fcc 	andi	r2,r2,255
 8014970:	108000e0 	cmpeqi	r2,r2,3
 8014974:	1000021e 	bne	r2,zero,8014980 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8014978:	00800044 	movi	r2,1
 801497c:	00002b06 	br	8014a2c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014980:	0005303a 	rdctl	r2,status
 8014984:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014988:	e0fffd17 	ldw	r3,-12(fp)
 801498c:	00bfff84 	movi	r2,-2
 8014990:	1884703a 	and	r2,r3,r2
 8014994:	1001703a 	wrctl	status,r2
  
  return context;
 8014998:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 801499c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 80149a0:	e0bffe17 	ldw	r2,-8(fp)
 80149a4:	10c00283 	ldbu	r3,10(r2)
 80149a8:	e0bfff17 	ldw	r2,-4(fp)
 80149ac:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 80149b0:	e0bffe17 	ldw	r2,-8(fp)
 80149b4:	108002c4 	addi	r2,r2,11
 80149b8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 80149bc:	e0bfff17 	ldw	r2,-4(fp)
 80149c0:	10800084 	addi	r2,r2,2
 80149c4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 80149c8:	e03ffa05 	stb	zero,-24(fp)
 80149cc:	00000b06 	br	80149fc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 80149d0:	e0bff917 	ldw	r2,-28(fp)
 80149d4:	10c00044 	addi	r3,r2,1
 80149d8:	e0fff915 	stw	r3,-28(fp)
 80149dc:	e0fff817 	ldw	r3,-32(fp)
 80149e0:	19000044 	addi	r4,r3,1
 80149e4:	e13ff815 	stw	r4,-32(fp)
 80149e8:	18c00003 	ldbu	r3,0(r3)
 80149ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 80149f0:	e0bffa03 	ldbu	r2,-24(fp)
 80149f4:	10800044 	addi	r2,r2,1
 80149f8:	e0bffa05 	stb	r2,-24(fp)
 80149fc:	e0bffa03 	ldbu	r2,-24(fp)
 8014a00:	108000f0 	cmpltui	r2,r2,3
 8014a04:	103ff21e 	bne	r2,zero,80149d0 <__alt_data_end+0xf80149d0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 8014a08:	e0bffe17 	ldw	r2,-8(fp)
 8014a0c:	10c0020b 	ldhu	r3,8(r2)
 8014a10:	e0bfff17 	ldw	r2,-4(fp)
 8014a14:	10c0000d 	sth	r3,0(r2)
 8014a18:	e0bffb17 	ldw	r2,-20(fp)
 8014a1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014a20:	e0bffc17 	ldw	r2,-16(fp)
 8014a24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8014a28:	0005883a 	mov	r2,zero
}
 8014a2c:	e037883a 	mov	sp,fp
 8014a30:	df000017 	ldw	fp,0(sp)
 8014a34:	dec00104 	addi	sp,sp,4
 8014a38:	f800283a 	ret

08014a3c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 8014a3c:	defff904 	addi	sp,sp,-28
 8014a40:	df000615 	stw	fp,24(sp)
 8014a44:	df000604 	addi	fp,sp,24
 8014a48:	e13ffd15 	stw	r4,-12(fp)
 8014a4c:	2805883a 	mov	r2,r5
 8014a50:	e1bfff15 	stw	r6,-4(fp)
 8014a54:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8014a58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8014a5c:	e0bfff17 	ldw	r2,-4(fp)
 8014a60:	10003126 	beq	r2,zero,8014b28 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8014a64:	e0bffd17 	ldw	r2,-12(fp)
 8014a68:	1000041e 	bne	r2,zero,8014a7c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 8014a6c:	e0bfff17 	ldw	r2,-4(fp)
 8014a70:	00c00104 	movi	r3,4
 8014a74:	10c00005 	stb	r3,0(r2)
        return;
 8014a78:	00002c06 	br	8014b2c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8014a7c:	e0bffd17 	ldw	r2,-12(fp)
 8014a80:	10800003 	ldbu	r2,0(r2)
 8014a84:	10803fcc 	andi	r2,r2,255
 8014a88:	108000e0 	cmpeqi	r2,r2,3
 8014a8c:	1000041e 	bne	r2,zero,8014aa0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 8014a90:	e0bfff17 	ldw	r2,-4(fp)
 8014a94:	00c00044 	movi	r3,1
 8014a98:	10c00005 	stb	r3,0(r2)
        return;
 8014a9c:	00002306 	br	8014b2c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014aa0:	0005303a 	rdctl	r2,status
 8014aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014aa8:	e0fffc17 	ldw	r3,-16(fp)
 8014aac:	00bfff84 	movi	r2,-2
 8014ab0:	1884703a 	and	r2,r3,r2
 8014ab4:	1001703a 	wrctl	status,r2
  
  return context;
 8014ab8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8014abc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 8014ac0:	e0bfff17 	ldw	r2,-4(fp)
 8014ac4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 8014ac8:	e0bffd17 	ldw	r2,-12(fp)
 8014acc:	1080020b 	ldhu	r2,8(r2)
 8014ad0:	10bfffcc 	andi	r2,r2,65535
 8014ad4:	10000426 	beq	r2,zero,8014ae8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 8014ad8:	e0bffd17 	ldw	r2,-12(fp)
 8014adc:	e0fffe0b 	ldhu	r3,-8(fp)
 8014ae0:	10c0020d 	sth	r3,8(r2)
 8014ae4:	00000b06 	br	8014b14 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 8014ae8:	e0bffd17 	ldw	r2,-12(fp)
 8014aec:	10800283 	ldbu	r2,10(r2)
 8014af0:	10803fcc 	andi	r2,r2,255
 8014af4:	1000041e 	bne	r2,zero,8014b08 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 8014af8:	e0bffd17 	ldw	r2,-12(fp)
 8014afc:	e0fffe0b 	ldhu	r3,-8(fp)
 8014b00:	10c0020d 	sth	r3,8(r2)
 8014b04:	00000306 	br	8014b14 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 8014b08:	e0bfff17 	ldw	r2,-4(fp)
 8014b0c:	00c01244 	movi	r3,73
 8014b10:	10c00005 	stb	r3,0(r2)
 8014b14:	e0bffa17 	ldw	r2,-24(fp)
 8014b18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014b1c:	e0bffb17 	ldw	r2,-20(fp)
 8014b20:	1001703a 	wrctl	status,r2
 8014b24:	00000106 	br	8014b2c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 8014b28:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 8014b2c:	e037883a 	mov	sp,fp
 8014b30:	df000017 	ldw	fp,0(sp)
 8014b34:	dec00104 	addi	sp,sp,4
 8014b38:	f800283a 	ret

08014b3c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 8014b3c:	defff104 	addi	sp,sp,-60
 8014b40:	dfc00e15 	stw	ra,56(sp)
 8014b44:	df000d15 	stw	fp,52(sp)
 8014b48:	df000d04 	addi	fp,sp,52
 8014b4c:	2007883a 	mov	r3,r4
 8014b50:	2805883a 	mov	r2,r5
 8014b54:	e0fffe05 	stb	r3,-8(fp)
 8014b58:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 8014b5c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 8014b60:	e0bffe03 	ldbu	r2,-8(fp)
 8014b64:	10800530 	cmpltui	r2,r2,20
 8014b68:	1000051e 	bne	r2,zero,8014b80 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 8014b6c:	e0bffe03 	ldbu	r2,-8(fp)
 8014b70:	10803fe0 	cmpeqi	r2,r2,255
 8014b74:	1000021e 	bne	r2,zero,8014b80 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 8014b78:	00800a84 	movi	r2,42
 8014b7c:	00012606 	br	8015018 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 8014b80:	e0bfff03 	ldbu	r2,-4(fp)
 8014b84:	10800530 	cmpltui	r2,r2,20
 8014b88:	1000021e 	bne	r2,zero,8014b94 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 8014b8c:	00800a84 	movi	r2,42
 8014b90:	00012106 	br	8015018 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014b94:	0005303a 	rdctl	r2,status
 8014b98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014b9c:	e0fffd17 	ldw	r3,-12(fp)
 8014ba0:	00bfff84 	movi	r2,-2
 8014ba4:	1884703a 	and	r2,r3,r2
 8014ba8:	1001703a 	wrctl	status,r2
  
  return context;
 8014bac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8014bb0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 8014bb4:	e0ffff03 	ldbu	r3,-4(fp)
 8014bb8:	008200b4 	movhi	r2,2050
 8014bbc:	108f9c04 	addi	r2,r2,15984
 8014bc0:	18c7883a 	add	r3,r3,r3
 8014bc4:	18c7883a 	add	r3,r3,r3
 8014bc8:	10c5883a 	add	r2,r2,r3
 8014bcc:	10800017 	ldw	r2,0(r2)
 8014bd0:	10000626 	beq	r2,zero,8014bec <OSTaskChangePrio+0xb0>
 8014bd4:	e0bff517 	ldw	r2,-44(fp)
 8014bd8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014bdc:	e0bff617 	ldw	r2,-40(fp)
 8014be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 8014be4:	00800a04 	movi	r2,40
 8014be8:	00010b06 	br	8015018 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 8014bec:	e0bffe03 	ldbu	r2,-8(fp)
 8014bf0:	10803fd8 	cmpnei	r2,r2,255
 8014bf4:	1000031e 	bne	r2,zero,8014c04 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 8014bf8:	d0a73817 	ldw	r2,-25376(gp)
 8014bfc:	10800c83 	ldbu	r2,50(r2)
 8014c00:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 8014c04:	e0fffe03 	ldbu	r3,-8(fp)
 8014c08:	008200b4 	movhi	r2,2050
 8014c0c:	108f9c04 	addi	r2,r2,15984
 8014c10:	18c7883a 	add	r3,r3,r3
 8014c14:	18c7883a 	add	r3,r3,r3
 8014c18:	10c5883a 	add	r2,r2,r3
 8014c1c:	10800017 	ldw	r2,0(r2)
 8014c20:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 8014c24:	e0bff817 	ldw	r2,-32(fp)
 8014c28:	1000061e 	bne	r2,zero,8014c44 <OSTaskChangePrio+0x108>
 8014c2c:	e0bff517 	ldw	r2,-44(fp)
 8014c30:	e0bff715 	stw	r2,-36(fp)
 8014c34:	e0bff717 	ldw	r2,-36(fp)
 8014c38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 8014c3c:	00800a44 	movi	r2,41
 8014c40:	0000f506 	br	8015018 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 8014c44:	e0bff817 	ldw	r2,-32(fp)
 8014c48:	10800058 	cmpnei	r2,r2,1
 8014c4c:	1000061e 	bne	r2,zero,8014c68 <OSTaskChangePrio+0x12c>
 8014c50:	e0bff517 	ldw	r2,-44(fp)
 8014c54:	e0bff915 	stw	r2,-28(fp)
 8014c58:	e0bff917 	ldw	r2,-28(fp)
 8014c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 8014c60:	008010c4 	movi	r2,67
 8014c64:	0000ec06 	br	8015018 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 8014c68:	e0bfff03 	ldbu	r2,-4(fp)
 8014c6c:	1004d0fa 	srli	r2,r2,3
 8014c70:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 8014c74:	e0bfff03 	ldbu	r2,-4(fp)
 8014c78:	108001cc 	andi	r2,r2,7
 8014c7c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 8014c80:	e0bffb03 	ldbu	r2,-20(fp)
 8014c84:	00c00044 	movi	r3,1
 8014c88:	1884983a 	sll	r2,r3,r2
 8014c8c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 8014c90:	e0bffb43 	ldbu	r2,-19(fp)
 8014c94:	00c00044 	movi	r3,1
 8014c98:	1884983a 	sll	r2,r3,r2
 8014c9c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 8014ca0:	e0fffe03 	ldbu	r3,-8(fp)
 8014ca4:	008200b4 	movhi	r2,2050
 8014ca8:	108f9c04 	addi	r2,r2,15984
 8014cac:	18c7883a 	add	r3,r3,r3
 8014cb0:	18c7883a 	add	r3,r3,r3
 8014cb4:	10c5883a 	add	r2,r2,r3
 8014cb8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 8014cbc:	e0ffff03 	ldbu	r3,-4(fp)
 8014cc0:	008200b4 	movhi	r2,2050
 8014cc4:	108f9c04 	addi	r2,r2,15984
 8014cc8:	18c7883a 	add	r3,r3,r3
 8014ccc:	18c7883a 	add	r3,r3,r3
 8014cd0:	10c5883a 	add	r2,r2,r3
 8014cd4:	e0fff817 	ldw	r3,-32(fp)
 8014cd8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 8014cdc:	e0bff817 	ldw	r2,-32(fp)
 8014ce0:	10800d03 	ldbu	r2,52(r2)
 8014ce4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 8014ce8:	e0bff817 	ldw	r2,-32(fp)
 8014cec:	10800d83 	ldbu	r2,54(r2)
 8014cf0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 8014cf4:	e0bff817 	ldw	r2,-32(fp)
 8014cf8:	10800d43 	ldbu	r2,53(r2)
 8014cfc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 8014d00:	e0fffc03 	ldbu	r3,-16(fp)
 8014d04:	d0a73544 	addi	r2,gp,-25387
 8014d08:	1885883a 	add	r2,r3,r2
 8014d0c:	10c00003 	ldbu	r3,0(r2)
 8014d10:	e0bffc83 	ldbu	r2,-14(fp)
 8014d14:	1884703a 	and	r2,r3,r2
 8014d18:	10803fcc 	andi	r2,r2,255
 8014d1c:	10002826 	beq	r2,zero,8014dc0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 8014d20:	e0fffc03 	ldbu	r3,-16(fp)
 8014d24:	e13ffc03 	ldbu	r4,-16(fp)
 8014d28:	d0a73544 	addi	r2,gp,-25387
 8014d2c:	2085883a 	add	r2,r4,r2
 8014d30:	10800003 	ldbu	r2,0(r2)
 8014d34:	1009883a 	mov	r4,r2
 8014d38:	e0bffc83 	ldbu	r2,-14(fp)
 8014d3c:	0084303a 	nor	r2,zero,r2
 8014d40:	2084703a 	and	r2,r4,r2
 8014d44:	1009883a 	mov	r4,r2
 8014d48:	d0a73544 	addi	r2,gp,-25387
 8014d4c:	1885883a 	add	r2,r3,r2
 8014d50:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 8014d54:	e0fffc03 	ldbu	r3,-16(fp)
 8014d58:	d0a73544 	addi	r2,gp,-25387
 8014d5c:	1885883a 	add	r2,r3,r2
 8014d60:	10800003 	ldbu	r2,0(r2)
 8014d64:	10803fcc 	andi	r2,r2,255
 8014d68:	1000061e 	bne	r2,zero,8014d84 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 8014d6c:	e0bffc43 	ldbu	r2,-15(fp)
 8014d70:	0084303a 	nor	r2,zero,r2
 8014d74:	1007883a 	mov	r3,r2
 8014d78:	d0a73503 	ldbu	r2,-25388(gp)
 8014d7c:	1884703a 	and	r2,r3,r2
 8014d80:	d0a73505 	stb	r2,-25388(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 8014d84:	d0e73503 	ldbu	r3,-25388(gp)
 8014d88:	e0bffb83 	ldbu	r2,-18(fp)
 8014d8c:	1884b03a 	or	r2,r3,r2
 8014d90:	d0a73505 	stb	r2,-25388(gp)
         OSRdyTbl[y_new] |= bitx_new;
 8014d94:	e0fffb03 	ldbu	r3,-20(fp)
 8014d98:	e13ffb03 	ldbu	r4,-20(fp)
 8014d9c:	d0a73544 	addi	r2,gp,-25387
 8014da0:	2085883a 	add	r2,r4,r2
 8014da4:	11000003 	ldbu	r4,0(r2)
 8014da8:	e0bffbc3 	ldbu	r2,-17(fp)
 8014dac:	2084b03a 	or	r2,r4,r2
 8014db0:	1009883a 	mov	r4,r2
 8014db4:	d0a73544 	addi	r2,gp,-25387
 8014db8:	1885883a 	add	r2,r3,r2
 8014dbc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 8014dc0:	e0bff817 	ldw	r2,-32(fp)
 8014dc4:	10800717 	ldw	r2,28(r2)
 8014dc8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 8014dcc:	e0bff317 	ldw	r2,-52(fp)
 8014dd0:	10003326 	beq	r2,zero,8014ea0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 8014dd4:	e0bffc03 	ldbu	r2,-16(fp)
 8014dd8:	e0fffc03 	ldbu	r3,-16(fp)
 8014ddc:	e13ff317 	ldw	r4,-52(fp)
 8014de0:	20c7883a 	add	r3,r4,r3
 8014de4:	18c002c4 	addi	r3,r3,11
 8014de8:	18c00003 	ldbu	r3,0(r3)
 8014dec:	1809883a 	mov	r4,r3
 8014df0:	e0fffc83 	ldbu	r3,-14(fp)
 8014df4:	00c6303a 	nor	r3,zero,r3
 8014df8:	20c6703a 	and	r3,r4,r3
 8014dfc:	1809883a 	mov	r4,r3
 8014e00:	e0fff317 	ldw	r3,-52(fp)
 8014e04:	1885883a 	add	r2,r3,r2
 8014e08:	108002c4 	addi	r2,r2,11
 8014e0c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 8014e10:	e0bffc03 	ldbu	r2,-16(fp)
 8014e14:	e0fff317 	ldw	r3,-52(fp)
 8014e18:	1885883a 	add	r2,r3,r2
 8014e1c:	108002c4 	addi	r2,r2,11
 8014e20:	10800003 	ldbu	r2,0(r2)
 8014e24:	10803fcc 	andi	r2,r2,255
 8014e28:	1000091e 	bne	r2,zero,8014e50 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 8014e2c:	e0bff317 	ldw	r2,-52(fp)
 8014e30:	10800283 	ldbu	r2,10(r2)
 8014e34:	1007883a 	mov	r3,r2
 8014e38:	e0bffc43 	ldbu	r2,-15(fp)
 8014e3c:	0084303a 	nor	r2,zero,r2
 8014e40:	1884703a 	and	r2,r3,r2
 8014e44:	1007883a 	mov	r3,r2
 8014e48:	e0bff317 	ldw	r2,-52(fp)
 8014e4c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 8014e50:	e0bff317 	ldw	r2,-52(fp)
 8014e54:	10c00283 	ldbu	r3,10(r2)
 8014e58:	e0bffb83 	ldbu	r2,-18(fp)
 8014e5c:	1884b03a 	or	r2,r3,r2
 8014e60:	1007883a 	mov	r3,r2
 8014e64:	e0bff317 	ldw	r2,-52(fp)
 8014e68:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 8014e6c:	e0bffb03 	ldbu	r2,-20(fp)
 8014e70:	e0fffb03 	ldbu	r3,-20(fp)
 8014e74:	e13ff317 	ldw	r4,-52(fp)
 8014e78:	20c7883a 	add	r3,r4,r3
 8014e7c:	18c002c4 	addi	r3,r3,11
 8014e80:	19000003 	ldbu	r4,0(r3)
 8014e84:	e0fffbc3 	ldbu	r3,-17(fp)
 8014e88:	20c6b03a 	or	r3,r4,r3
 8014e8c:	1809883a 	mov	r4,r3
 8014e90:	e0fff317 	ldw	r3,-52(fp)
 8014e94:	1885883a 	add	r2,r3,r2
 8014e98:	108002c4 	addi	r2,r2,11
 8014e9c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 8014ea0:	e0bff817 	ldw	r2,-32(fp)
 8014ea4:	10800817 	ldw	r2,32(r2)
 8014ea8:	10004226 	beq	r2,zero,8014fb4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 8014eac:	e0bff817 	ldw	r2,-32(fp)
 8014eb0:	10800817 	ldw	r2,32(r2)
 8014eb4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 8014eb8:	e0bff417 	ldw	r2,-48(fp)
 8014ebc:	10800017 	ldw	r2,0(r2)
 8014ec0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 8014ec4:	00003906 	br	8014fac <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 8014ec8:	e0bffc03 	ldbu	r2,-16(fp)
 8014ecc:	e0fffc03 	ldbu	r3,-16(fp)
 8014ed0:	e13ff317 	ldw	r4,-52(fp)
 8014ed4:	20c7883a 	add	r3,r4,r3
 8014ed8:	18c002c4 	addi	r3,r3,11
 8014edc:	18c00003 	ldbu	r3,0(r3)
 8014ee0:	1809883a 	mov	r4,r3
 8014ee4:	e0fffc83 	ldbu	r3,-14(fp)
 8014ee8:	00c6303a 	nor	r3,zero,r3
 8014eec:	20c6703a 	and	r3,r4,r3
 8014ef0:	1809883a 	mov	r4,r3
 8014ef4:	e0fff317 	ldw	r3,-52(fp)
 8014ef8:	1885883a 	add	r2,r3,r2
 8014efc:	108002c4 	addi	r2,r2,11
 8014f00:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 8014f04:	e0bffc03 	ldbu	r2,-16(fp)
 8014f08:	e0fff317 	ldw	r3,-52(fp)
 8014f0c:	1885883a 	add	r2,r3,r2
 8014f10:	108002c4 	addi	r2,r2,11
 8014f14:	10800003 	ldbu	r2,0(r2)
 8014f18:	10803fcc 	andi	r2,r2,255
 8014f1c:	1000091e 	bne	r2,zero,8014f44 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 8014f20:	e0bff317 	ldw	r2,-52(fp)
 8014f24:	10800283 	ldbu	r2,10(r2)
 8014f28:	1007883a 	mov	r3,r2
 8014f2c:	e0bffc43 	ldbu	r2,-15(fp)
 8014f30:	0084303a 	nor	r2,zero,r2
 8014f34:	1884703a 	and	r2,r3,r2
 8014f38:	1007883a 	mov	r3,r2
 8014f3c:	e0bff317 	ldw	r2,-52(fp)
 8014f40:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 8014f44:	e0bff317 	ldw	r2,-52(fp)
 8014f48:	10c00283 	ldbu	r3,10(r2)
 8014f4c:	e0bffb83 	ldbu	r2,-18(fp)
 8014f50:	1884b03a 	or	r2,r3,r2
 8014f54:	1007883a 	mov	r3,r2
 8014f58:	e0bff317 	ldw	r2,-52(fp)
 8014f5c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 8014f60:	e0bffb03 	ldbu	r2,-20(fp)
 8014f64:	e0fffb03 	ldbu	r3,-20(fp)
 8014f68:	e13ff317 	ldw	r4,-52(fp)
 8014f6c:	20c7883a 	add	r3,r4,r3
 8014f70:	18c002c4 	addi	r3,r3,11
 8014f74:	19000003 	ldbu	r4,0(r3)
 8014f78:	e0fffbc3 	ldbu	r3,-17(fp)
 8014f7c:	20c6b03a 	or	r3,r4,r3
 8014f80:	1809883a 	mov	r4,r3
 8014f84:	e0fff317 	ldw	r3,-52(fp)
 8014f88:	1885883a 	add	r2,r3,r2
 8014f8c:	108002c4 	addi	r2,r2,11
 8014f90:	11000005 	stb	r4,0(r2)
            pevents++;
 8014f94:	e0bff417 	ldw	r2,-48(fp)
 8014f98:	10800104 	addi	r2,r2,4
 8014f9c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 8014fa0:	e0bff417 	ldw	r2,-48(fp)
 8014fa4:	10800017 	ldw	r2,0(r2)
 8014fa8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 8014fac:	e0bff317 	ldw	r2,-52(fp)
 8014fb0:	103fc51e 	bne	r2,zero,8014ec8 <__alt_data_end+0xf8014ec8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 8014fb4:	e0bff817 	ldw	r2,-32(fp)
 8014fb8:	e0ffff03 	ldbu	r3,-4(fp)
 8014fbc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 8014fc0:	e0bff817 	ldw	r2,-32(fp)
 8014fc4:	e0fffb03 	ldbu	r3,-20(fp)
 8014fc8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 8014fcc:	e0bff817 	ldw	r2,-32(fp)
 8014fd0:	e0fffb43 	ldbu	r3,-19(fp)
 8014fd4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 8014fd8:	e0bff817 	ldw	r2,-32(fp)
 8014fdc:	e0fffb83 	ldbu	r3,-18(fp)
 8014fe0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 8014fe4:	e0bff817 	ldw	r2,-32(fp)
 8014fe8:	e0fffbc3 	ldbu	r3,-17(fp)
 8014fec:	10c00d45 	stb	r3,53(r2)
 8014ff0:	e0bff517 	ldw	r2,-44(fp)
 8014ff4:	e0bffa15 	stw	r2,-24(fp)
 8014ff8:	e0bffa17 	ldw	r2,-24(fp)
 8014ffc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 8015000:	d0a72943 	ldbu	r2,-25435(gp)
 8015004:	10803fcc 	andi	r2,r2,255
 8015008:	10800058 	cmpnei	r2,r2,1
 801500c:	1000011e 	bne	r2,zero,8015014 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 8015010:	800f7f40 	call	800f7f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8015014:	0005883a 	mov	r2,zero
}
 8015018:	e037883a 	mov	sp,fp
 801501c:	dfc00117 	ldw	ra,4(sp)
 8015020:	df000017 	ldw	fp,0(sp)
 8015024:	dec00204 	addi	sp,sp,8
 8015028:	f800283a 	ret

0801502c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 801502c:	deffee04 	addi	sp,sp,-72
 8015030:	dfc01115 	stw	ra,68(sp)
 8015034:	df001015 	stw	fp,64(sp)
 8015038:	df001004 	addi	fp,sp,64
 801503c:	e13ffc15 	stw	r4,-16(fp)
 8015040:	e17ffd15 	stw	r5,-12(fp)
 8015044:	e1bffe15 	stw	r6,-8(fp)
 8015048:	3805883a 	mov	r2,r7
 801504c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 8015050:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8015054:	e0bfff03 	ldbu	r2,-4(fp)
 8015058:	10800570 	cmpltui	r2,r2,21
 801505c:	1000021e 	bne	r2,zero,8015068 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 8015060:	00800a84 	movi	r2,42
 8015064:	00005706 	br	80151c4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015068:	0005303a 	rdctl	r2,status
 801506c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015070:	e0fffb17 	ldw	r3,-20(fp)
 8015074:	00bfff84 	movi	r2,-2
 8015078:	1884703a 	and	r2,r3,r2
 801507c:	1001703a 	wrctl	status,r2
  
  return context;
 8015080:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015084:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 8015088:	d0a73703 	ldbu	r2,-25380(gp)
 801508c:	10803fcc 	andi	r2,r2,255
 8015090:	10000626 	beq	r2,zero,80150ac <OSTaskCreate+0x80>
 8015094:	e0bff317 	ldw	r2,-52(fp)
 8015098:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801509c:	e0bff417 	ldw	r2,-48(fp)
 80150a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 80150a4:	00800f04 	movi	r2,60
 80150a8:	00004606 	br	80151c4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80150ac:	e0ffff03 	ldbu	r3,-4(fp)
 80150b0:	008200b4 	movhi	r2,2050
 80150b4:	108f9c04 	addi	r2,r2,15984
 80150b8:	18c7883a 	add	r3,r3,r3
 80150bc:	18c7883a 	add	r3,r3,r3
 80150c0:	10c5883a 	add	r2,r2,r3
 80150c4:	10800017 	ldw	r2,0(r2)
 80150c8:	1000391e 	bne	r2,zero,80151b0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 80150cc:	e0ffff03 	ldbu	r3,-4(fp)
 80150d0:	008200b4 	movhi	r2,2050
 80150d4:	108f9c04 	addi	r2,r2,15984
 80150d8:	18c7883a 	add	r3,r3,r3
 80150dc:	18c7883a 	add	r3,r3,r3
 80150e0:	10c5883a 	add	r2,r2,r3
 80150e4:	00c00044 	movi	r3,1
 80150e8:	10c00015 	stw	r3,0(r2)
 80150ec:	e0bff317 	ldw	r2,-52(fp)
 80150f0:	e0bff515 	stw	r2,-44(fp)
 80150f4:	e0bff517 	ldw	r2,-44(fp)
 80150f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 80150fc:	000f883a 	mov	r7,zero
 8015100:	e1bffe17 	ldw	r6,-8(fp)
 8015104:	e17ffd17 	ldw	r5,-12(fp)
 8015108:	e13ffc17 	ldw	r4,-16(fp)
 801510c:	801862c0 	call	801862c <OSTaskStkInit>
 8015110:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 8015114:	e0bfff03 	ldbu	r2,-4(fp)
 8015118:	d8000215 	stw	zero,8(sp)
 801511c:	d8000115 	stw	zero,4(sp)
 8015120:	d8000015 	stw	zero,0(sp)
 8015124:	000f883a 	mov	r7,zero
 8015128:	000d883a 	mov	r6,zero
 801512c:	e17ff717 	ldw	r5,-36(fp)
 8015130:	1009883a 	mov	r4,r2
 8015134:	800fbf40 	call	800fbf4 <OS_TCBInit>
 8015138:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 801513c:	e0bff803 	ldbu	r2,-32(fp)
 8015140:	1000061e 	bne	r2,zero,801515c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8015144:	d0a72943 	ldbu	r2,-25435(gp)
 8015148:	10803fcc 	andi	r2,r2,255
 801514c:	10800058 	cmpnei	r2,r2,1
 8015150:	1000151e 	bne	r2,zero,80151a8 <OSTaskCreate+0x17c>
                OS_Sched();
 8015154:	800f7f40 	call	800f7f4 <OS_Sched>
 8015158:	00001306 	br	80151a8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801515c:	0005303a 	rdctl	r2,status
 8015160:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015164:	e0fffa17 	ldw	r3,-24(fp)
 8015168:	00bfff84 	movi	r2,-2
 801516c:	1884703a 	and	r2,r3,r2
 8015170:	1001703a 	wrctl	status,r2
  
  return context;
 8015174:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 8015178:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 801517c:	e0ffff03 	ldbu	r3,-4(fp)
 8015180:	008200b4 	movhi	r2,2050
 8015184:	108f9c04 	addi	r2,r2,15984
 8015188:	18c7883a 	add	r3,r3,r3
 801518c:	18c7883a 	add	r3,r3,r3
 8015190:	10c5883a 	add	r2,r2,r3
 8015194:	10000015 	stw	zero,0(r2)
 8015198:	e0bff317 	ldw	r2,-52(fp)
 801519c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80151a0:	e0bff617 	ldw	r2,-40(fp)
 80151a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 80151a8:	e0bff803 	ldbu	r2,-32(fp)
 80151ac:	00000506 	br	80151c4 <OSTaskCreate+0x198>
 80151b0:	e0bff317 	ldw	r2,-52(fp)
 80151b4:	e0bff915 	stw	r2,-28(fp)
 80151b8:	e0bff917 	ldw	r2,-28(fp)
 80151bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 80151c0:	00800a04 	movi	r2,40
}
 80151c4:	e037883a 	mov	sp,fp
 80151c8:	dfc00117 	ldw	ra,4(sp)
 80151cc:	df000017 	ldw	fp,0(sp)
 80151d0:	dec00204 	addi	sp,sp,8
 80151d4:	f800283a 	ret

080151d8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 80151d8:	deffec04 	addi	sp,sp,-80
 80151dc:	dfc01315 	stw	ra,76(sp)
 80151e0:	df001215 	stw	fp,72(sp)
 80151e4:	df001204 	addi	fp,sp,72
 80151e8:	e13ffa15 	stw	r4,-24(fp)
 80151ec:	e17ffb15 	stw	r5,-20(fp)
 80151f0:	e1bffc15 	stw	r6,-16(fp)
 80151f4:	3809883a 	mov	r4,r7
 80151f8:	e0c00217 	ldw	r3,8(fp)
 80151fc:	e0800617 	ldw	r2,24(fp)
 8015200:	e13ffd05 	stb	r4,-12(fp)
 8015204:	e0fffe0d 	sth	r3,-8(fp)
 8015208:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 801520c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8015210:	e0bffd03 	ldbu	r2,-12(fp)
 8015214:	10800570 	cmpltui	r2,r2,21
 8015218:	1000021e 	bne	r2,zero,8015224 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 801521c:	00800a84 	movi	r2,42
 8015220:	00006106 	br	80153a8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015224:	0005303a 	rdctl	r2,status
 8015228:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801522c:	e0fff917 	ldw	r3,-28(fp)
 8015230:	00bfff84 	movi	r2,-2
 8015234:	1884703a 	and	r2,r3,r2
 8015238:	1001703a 	wrctl	status,r2
  
  return context;
 801523c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015240:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 8015244:	d0a73703 	ldbu	r2,-25380(gp)
 8015248:	10803fcc 	andi	r2,r2,255
 801524c:	10000626 	beq	r2,zero,8015268 <OSTaskCreateExt+0x90>
 8015250:	e0bff117 	ldw	r2,-60(fp)
 8015254:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015258:	e0bff217 	ldw	r2,-56(fp)
 801525c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 8015260:	00800f04 	movi	r2,60
 8015264:	00005006 	br	80153a8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8015268:	e0fffd03 	ldbu	r3,-12(fp)
 801526c:	008200b4 	movhi	r2,2050
 8015270:	108f9c04 	addi	r2,r2,15984
 8015274:	18c7883a 	add	r3,r3,r3
 8015278:	18c7883a 	add	r3,r3,r3
 801527c:	10c5883a 	add	r2,r2,r3
 8015280:	10800017 	ldw	r2,0(r2)
 8015284:	1000431e 	bne	r2,zero,8015394 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8015288:	e0fffd03 	ldbu	r3,-12(fp)
 801528c:	008200b4 	movhi	r2,2050
 8015290:	108f9c04 	addi	r2,r2,15984
 8015294:	18c7883a 	add	r3,r3,r3
 8015298:	18c7883a 	add	r3,r3,r3
 801529c:	10c5883a 	add	r2,r2,r3
 80152a0:	00c00044 	movi	r3,1
 80152a4:	10c00015 	stw	r3,0(r2)
 80152a8:	e0bff117 	ldw	r2,-60(fp)
 80152ac:	e0bff315 	stw	r2,-52(fp)
 80152b0:	e0bff317 	ldw	r2,-52(fp)
 80152b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80152b8:	e0bfff0b 	ldhu	r2,-4(fp)
 80152bc:	100d883a 	mov	r6,r2
 80152c0:	e1400417 	ldw	r5,16(fp)
 80152c4:	e1000317 	ldw	r4,12(fp)
 80152c8:	80162380 	call	8016238 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80152cc:	e0bfff0b 	ldhu	r2,-4(fp)
 80152d0:	100f883a 	mov	r7,r2
 80152d4:	e1bffc17 	ldw	r6,-16(fp)
 80152d8:	e17ffb17 	ldw	r5,-20(fp)
 80152dc:	e13ffa17 	ldw	r4,-24(fp)
 80152e0:	801862c0 	call	801862c <OSTaskStkInit>
 80152e4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80152e8:	e0fffd03 	ldbu	r3,-12(fp)
 80152ec:	e13ffe0b 	ldhu	r4,-8(fp)
 80152f0:	e0bfff0b 	ldhu	r2,-4(fp)
 80152f4:	d8800215 	stw	r2,8(sp)
 80152f8:	e0800517 	ldw	r2,20(fp)
 80152fc:	d8800115 	stw	r2,4(sp)
 8015300:	e0800417 	ldw	r2,16(fp)
 8015304:	d8800015 	stw	r2,0(sp)
 8015308:	200f883a 	mov	r7,r4
 801530c:	e1800317 	ldw	r6,12(fp)
 8015310:	e17ff517 	ldw	r5,-44(fp)
 8015314:	1809883a 	mov	r4,r3
 8015318:	800fbf40 	call	800fbf4 <OS_TCBInit>
 801531c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 8015320:	e0bff603 	ldbu	r2,-40(fp)
 8015324:	1000061e 	bne	r2,zero,8015340 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8015328:	d0a72943 	ldbu	r2,-25435(gp)
 801532c:	10803fcc 	andi	r2,r2,255
 8015330:	10800058 	cmpnei	r2,r2,1
 8015334:	1000151e 	bne	r2,zero,801538c <OSTaskCreateExt+0x1b4>
                OS_Sched();
 8015338:	800f7f40 	call	800f7f4 <OS_Sched>
 801533c:	00001306 	br	801538c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015340:	0005303a 	rdctl	r2,status
 8015344:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015348:	e0fff817 	ldw	r3,-32(fp)
 801534c:	00bfff84 	movi	r2,-2
 8015350:	1884703a 	and	r2,r3,r2
 8015354:	1001703a 	wrctl	status,r2
  
  return context;
 8015358:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 801535c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8015360:	e0fffd03 	ldbu	r3,-12(fp)
 8015364:	008200b4 	movhi	r2,2050
 8015368:	108f9c04 	addi	r2,r2,15984
 801536c:	18c7883a 	add	r3,r3,r3
 8015370:	18c7883a 	add	r3,r3,r3
 8015374:	10c5883a 	add	r2,r2,r3
 8015378:	10000015 	stw	zero,0(r2)
 801537c:	e0bff117 	ldw	r2,-60(fp)
 8015380:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015384:	e0bff417 	ldw	r2,-48(fp)
 8015388:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 801538c:	e0bff603 	ldbu	r2,-40(fp)
 8015390:	00000506 	br	80153a8 <OSTaskCreateExt+0x1d0>
 8015394:	e0bff117 	ldw	r2,-60(fp)
 8015398:	e0bff715 	stw	r2,-36(fp)
 801539c:	e0bff717 	ldw	r2,-36(fp)
 80153a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 80153a4:	00800a04 	movi	r2,40
}
 80153a8:	e037883a 	mov	sp,fp
 80153ac:	dfc00117 	ldw	ra,4(sp)
 80153b0:	df000017 	ldw	fp,0(sp)
 80153b4:	dec00204 	addi	sp,sp,8
 80153b8:	f800283a 	ret

080153bc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 80153bc:	defff404 	addi	sp,sp,-48
 80153c0:	dfc00b15 	stw	ra,44(sp)
 80153c4:	df000a15 	stw	fp,40(sp)
 80153c8:	df000a04 	addi	fp,sp,40
 80153cc:	2005883a 	mov	r2,r4
 80153d0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 80153d4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 80153d8:	d0a73703 	ldbu	r2,-25380(gp)
 80153dc:	10803fcc 	andi	r2,r2,255
 80153e0:	10000226 	beq	r2,zero,80153ec <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 80153e4:	00801004 	movi	r2,64
 80153e8:	0000c006 	br	80156ec <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 80153ec:	e0bfff03 	ldbu	r2,-4(fp)
 80153f0:	10800518 	cmpnei	r2,r2,20
 80153f4:	1000021e 	bne	r2,zero,8015400 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 80153f8:	00800f84 	movi	r2,62
 80153fc:	0000bb06 	br	80156ec <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8015400:	e0bfff03 	ldbu	r2,-4(fp)
 8015404:	10800530 	cmpltui	r2,r2,20
 8015408:	1000051e 	bne	r2,zero,8015420 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 801540c:	e0bfff03 	ldbu	r2,-4(fp)
 8015410:	10803fe0 	cmpeqi	r2,r2,255
 8015414:	1000021e 	bne	r2,zero,8015420 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 8015418:	00800a84 	movi	r2,42
 801541c:	0000b306 	br	80156ec <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015420:	0005303a 	rdctl	r2,status
 8015424:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015428:	e0fffe17 	ldw	r3,-8(fp)
 801542c:	00bfff84 	movi	r2,-2
 8015430:	1884703a 	and	r2,r3,r2
 8015434:	1001703a 	wrctl	status,r2
  
  return context;
 8015438:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 801543c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8015440:	e0bfff03 	ldbu	r2,-4(fp)
 8015444:	10803fd8 	cmpnei	r2,r2,255
 8015448:	1000031e 	bne	r2,zero,8015458 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 801544c:	d0a73817 	ldw	r2,-25376(gp)
 8015450:	10800c83 	ldbu	r2,50(r2)
 8015454:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015458:	e0ffff03 	ldbu	r3,-4(fp)
 801545c:	008200b4 	movhi	r2,2050
 8015460:	108f9c04 	addi	r2,r2,15984
 8015464:	18c7883a 	add	r3,r3,r3
 8015468:	18c7883a 	add	r3,r3,r3
 801546c:	10c5883a 	add	r2,r2,r3
 8015470:	10800017 	ldw	r2,0(r2)
 8015474:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8015478:	e0bff817 	ldw	r2,-32(fp)
 801547c:	1000061e 	bne	r2,zero,8015498 <OSTaskDel+0xdc>
 8015480:	e0bff617 	ldw	r2,-40(fp)
 8015484:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015488:	e0bff717 	ldw	r2,-36(fp)
 801548c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015490:	008010c4 	movi	r2,67
 8015494:	00009506 	br	80156ec <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8015498:	e0bff817 	ldw	r2,-32(fp)
 801549c:	10800058 	cmpnei	r2,r2,1
 80154a0:	1000061e 	bne	r2,zero,80154bc <OSTaskDel+0x100>
 80154a4:	e0bff617 	ldw	r2,-40(fp)
 80154a8:	e0bff915 	stw	r2,-28(fp)
 80154ac:	e0bff917 	ldw	r2,-28(fp)
 80154b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 80154b4:	00800f44 	movi	r2,61
 80154b8:	00008c06 	br	80156ec <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 80154bc:	e0bff817 	ldw	r2,-32(fp)
 80154c0:	10800d03 	ldbu	r2,52(r2)
 80154c4:	10c03fcc 	andi	r3,r2,255
 80154c8:	e0bff817 	ldw	r2,-32(fp)
 80154cc:	10800d03 	ldbu	r2,52(r2)
 80154d0:	11003fcc 	andi	r4,r2,255
 80154d4:	d0a73544 	addi	r2,gp,-25387
 80154d8:	2085883a 	add	r2,r4,r2
 80154dc:	10800003 	ldbu	r2,0(r2)
 80154e0:	1009883a 	mov	r4,r2
 80154e4:	e0bff817 	ldw	r2,-32(fp)
 80154e8:	10800d43 	ldbu	r2,53(r2)
 80154ec:	0084303a 	nor	r2,zero,r2
 80154f0:	2084703a 	and	r2,r4,r2
 80154f4:	1009883a 	mov	r4,r2
 80154f8:	d0a73544 	addi	r2,gp,-25387
 80154fc:	1885883a 	add	r2,r3,r2
 8015500:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 8015504:	e0bff817 	ldw	r2,-32(fp)
 8015508:	10800d03 	ldbu	r2,52(r2)
 801550c:	10c03fcc 	andi	r3,r2,255
 8015510:	d0a73544 	addi	r2,gp,-25387
 8015514:	1885883a 	add	r2,r3,r2
 8015518:	10800003 	ldbu	r2,0(r2)
 801551c:	10803fcc 	andi	r2,r2,255
 8015520:	1000071e 	bne	r2,zero,8015540 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 8015524:	e0bff817 	ldw	r2,-32(fp)
 8015528:	10800d83 	ldbu	r2,54(r2)
 801552c:	0084303a 	nor	r2,zero,r2
 8015530:	1007883a 	mov	r3,r2
 8015534:	d0a73503 	ldbu	r2,-25388(gp)
 8015538:	1884703a 	and	r2,r3,r2
 801553c:	d0a73505 	stb	r2,-25388(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8015540:	e0bff817 	ldw	r2,-32(fp)
 8015544:	10800717 	ldw	r2,28(r2)
 8015548:	10000526 	beq	r2,zero,8015560 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 801554c:	e0bff817 	ldw	r2,-32(fp)
 8015550:	10800717 	ldw	r2,28(r2)
 8015554:	100b883a 	mov	r5,r2
 8015558:	e13ff817 	ldw	r4,-32(fp)
 801555c:	800f1a00 	call	800f1a0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8015560:	e0bff817 	ldw	r2,-32(fp)
 8015564:	10800817 	ldw	r2,32(r2)
 8015568:	10000526 	beq	r2,zero,8015580 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 801556c:	e0bff817 	ldw	r2,-32(fp)
 8015570:	10800817 	ldw	r2,32(r2)
 8015574:	100b883a 	mov	r5,r2
 8015578:	e13ff817 	ldw	r4,-32(fp)
 801557c:	800f2580 	call	800f258 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 8015580:	e0bff817 	ldw	r2,-32(fp)
 8015584:	10800a17 	ldw	r2,40(r2)
 8015588:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 801558c:	e0bffb17 	ldw	r2,-20(fp)
 8015590:	10000226 	beq	r2,zero,801559c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8015594:	e13ffb17 	ldw	r4,-20(fp)
 8015598:	80116c80 	call	80116c8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 801559c:	e0bff817 	ldw	r2,-32(fp)
 80155a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 80155a4:	e0bff817 	ldw	r2,-32(fp)
 80155a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80155ac:	e0bff817 	ldw	r2,-32(fp)
 80155b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 80155b4:	d0a72903 	ldbu	r2,-25436(gp)
 80155b8:	10803fcc 	andi	r2,r2,255
 80155bc:	10803fe0 	cmpeqi	r2,r2,255
 80155c0:	1000031e 	bne	r2,zero,80155d0 <OSTaskDel+0x214>
        OSLockNesting++;
 80155c4:	d0a72903 	ldbu	r2,-25436(gp)
 80155c8:	10800044 	addi	r2,r2,1
 80155cc:	d0a72905 	stb	r2,-25436(gp)
 80155d0:	e0bff617 	ldw	r2,-40(fp)
 80155d4:	e0bffd15 	stw	r2,-12(fp)
 80155d8:	e0bffd17 	ldw	r2,-12(fp)
 80155dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 80155e0:	800ed880 	call	800ed88 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80155e4:	0005303a 	rdctl	r2,status
 80155e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80155ec:	e0fffa17 	ldw	r3,-24(fp)
 80155f0:	00bfff84 	movi	r2,-2
 80155f4:	1884703a 	and	r2,r3,r2
 80155f8:	1001703a 	wrctl	status,r2
  
  return context;
 80155fc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8015600:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 8015604:	d0a72903 	ldbu	r2,-25436(gp)
 8015608:	10803fcc 	andi	r2,r2,255
 801560c:	10000326 	beq	r2,zero,801561c <OSTaskDel+0x260>
        OSLockNesting--;
 8015610:	d0a72903 	ldbu	r2,-25436(gp)
 8015614:	10bfffc4 	addi	r2,r2,-1
 8015618:	d0a72905 	stb	r2,-25436(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 801561c:	e13ff817 	ldw	r4,-32(fp)
 8015620:	80187ac0 	call	80187ac <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8015624:	d0a73143 	ldbu	r2,-25403(gp)
 8015628:	10bfffc4 	addi	r2,r2,-1
 801562c:	d0a73145 	stb	r2,-25403(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8015630:	e0ffff03 	ldbu	r3,-4(fp)
 8015634:	008200b4 	movhi	r2,2050
 8015638:	108f9c04 	addi	r2,r2,15984
 801563c:	18c7883a 	add	r3,r3,r3
 8015640:	18c7883a 	add	r3,r3,r3
 8015644:	10c5883a 	add	r2,r2,r3
 8015648:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 801564c:	e0bff817 	ldw	r2,-32(fp)
 8015650:	10800617 	ldw	r2,24(r2)
 8015654:	1000071e 	bne	r2,zero,8015674 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8015658:	e0bff817 	ldw	r2,-32(fp)
 801565c:	10800517 	ldw	r2,20(r2)
 8015660:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 8015664:	e0bff817 	ldw	r2,-32(fp)
 8015668:	10800517 	ldw	r2,20(r2)
 801566c:	d0a72c15 	stw	r2,-25424(gp)
 8015670:	00000a06 	br	801569c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8015674:	e0bff817 	ldw	r2,-32(fp)
 8015678:	10800617 	ldw	r2,24(r2)
 801567c:	e0fff817 	ldw	r3,-32(fp)
 8015680:	18c00517 	ldw	r3,20(r3)
 8015684:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8015688:	e0bff817 	ldw	r2,-32(fp)
 801568c:	10800517 	ldw	r2,20(r2)
 8015690:	e0fff817 	ldw	r3,-32(fp)
 8015694:	18c00617 	ldw	r3,24(r3)
 8015698:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 801569c:	d0e73017 	ldw	r3,-25408(gp)
 80156a0:	e0bff817 	ldw	r2,-32(fp)
 80156a4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 80156a8:	e0bff817 	ldw	r2,-32(fp)
 80156ac:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 80156b0:	e0bff817 	ldw	r2,-32(fp)
 80156b4:	00c00fc4 	movi	r3,63
 80156b8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 80156bc:	e0bff817 	ldw	r2,-32(fp)
 80156c0:	10001345 	stb	zero,77(r2)
 80156c4:	e0bff617 	ldw	r2,-40(fp)
 80156c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80156cc:	e0bffc17 	ldw	r2,-16(fp)
 80156d0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 80156d4:	d0a72943 	ldbu	r2,-25435(gp)
 80156d8:	10803fcc 	andi	r2,r2,255
 80156dc:	10800058 	cmpnei	r2,r2,1
 80156e0:	1000011e 	bne	r2,zero,80156e8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 80156e4:	800f7f40 	call	800f7f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80156e8:	0005883a 	mov	r2,zero
}
 80156ec:	e037883a 	mov	sp,fp
 80156f0:	dfc00117 	ldw	ra,4(sp)
 80156f4:	df000017 	ldw	fp,0(sp)
 80156f8:	dec00204 	addi	sp,sp,8
 80156fc:	f800283a 	ret

08015700 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 8015700:	defff504 	addi	sp,sp,-44
 8015704:	df000a15 	stw	fp,40(sp)
 8015708:	df000a04 	addi	fp,sp,40
 801570c:	2005883a 	mov	r2,r4
 8015710:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015714:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 8015718:	e0bfff03 	ldbu	r2,-4(fp)
 801571c:	10800518 	cmpnei	r2,r2,20
 8015720:	1000021e 	bne	r2,zero,801572c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 8015724:	00800f84 	movi	r2,62
 8015728:	00004506 	br	8015840 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 801572c:	e0bfff03 	ldbu	r2,-4(fp)
 8015730:	10800530 	cmpltui	r2,r2,20
 8015734:	1000051e 	bne	r2,zero,801574c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 8015738:	e0bfff03 	ldbu	r2,-4(fp)
 801573c:	10803fe0 	cmpeqi	r2,r2,255
 8015740:	1000021e 	bne	r2,zero,801574c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 8015744:	00800a84 	movi	r2,42
 8015748:	00003d06 	br	8015840 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 801574c:	e0bfff03 	ldbu	r2,-4(fp)
 8015750:	10803fd8 	cmpnei	r2,r2,255
 8015754:	1000111e 	bne	r2,zero,801579c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015758:	0005303a 	rdctl	r2,status
 801575c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015760:	e0fff917 	ldw	r3,-28(fp)
 8015764:	00bfff84 	movi	r2,-2
 8015768:	1884703a 	and	r2,r3,r2
 801576c:	1001703a 	wrctl	status,r2
  
  return context;
 8015770:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 8015774:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 8015778:	d0a73817 	ldw	r2,-25376(gp)
 801577c:	10800dc3 	ldbu	r2,55(r2)
 8015780:	e0bff805 	stb	r2,-32(fp)
 8015784:	e0bff617 	ldw	r2,-40(fp)
 8015788:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801578c:	e0bffe17 	ldw	r2,-8(fp)
 8015790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 8015794:	e0bff803 	ldbu	r2,-32(fp)
 8015798:	00002906 	br	8015840 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801579c:	0005303a 	rdctl	r2,status
 80157a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80157a4:	e0fff717 	ldw	r3,-36(fp)
 80157a8:	00bfff84 	movi	r2,-2
 80157ac:	1884703a 	and	r2,r3,r2
 80157b0:	1001703a 	wrctl	status,r2
  
  return context;
 80157b4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 80157b8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 80157bc:	e0ffff03 	ldbu	r3,-4(fp)
 80157c0:	008200b4 	movhi	r2,2050
 80157c4:	108f9c04 	addi	r2,r2,15984
 80157c8:	18c7883a 	add	r3,r3,r3
 80157cc:	18c7883a 	add	r3,r3,r3
 80157d0:	10c5883a 	add	r2,r2,r3
 80157d4:	10800017 	ldw	r2,0(r2)
 80157d8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 80157dc:	e0bffb17 	ldw	r2,-20(fp)
 80157e0:	1000061e 	bne	r2,zero,80157fc <OSTaskDelReq+0xfc>
 80157e4:	e0bff617 	ldw	r2,-40(fp)
 80157e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80157ec:	e0bffa17 	ldw	r2,-24(fp)
 80157f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 80157f4:	008010c4 	movi	r2,67
 80157f8:	00001106 	br	8015840 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 80157fc:	e0bffb17 	ldw	r2,-20(fp)
 8015800:	10800058 	cmpnei	r2,r2,1
 8015804:	1000061e 	bne	r2,zero,8015820 <OSTaskDelReq+0x120>
 8015808:	e0bff617 	ldw	r2,-40(fp)
 801580c:	e0bffc15 	stw	r2,-16(fp)
 8015810:	e0bffc17 	ldw	r2,-16(fp)
 8015814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 8015818:	00800f44 	movi	r2,61
 801581c:	00000806 	br	8015840 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 8015820:	e0bffb17 	ldw	r2,-20(fp)
 8015824:	00c00fc4 	movi	r3,63
 8015828:	10c00dc5 	stb	r3,55(r2)
 801582c:	e0bff617 	ldw	r2,-40(fp)
 8015830:	e0bffd15 	stw	r2,-12(fp)
 8015834:	e0bffd17 	ldw	r2,-12(fp)
 8015838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801583c:	0005883a 	mov	r2,zero
}
 8015840:	e037883a 	mov	sp,fp
 8015844:	df000017 	ldw	fp,0(sp)
 8015848:	dec00104 	addi	sp,sp,4
 801584c:	f800283a 	ret

08015850 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 8015850:	defff404 	addi	sp,sp,-48
 8015854:	dfc00b15 	stw	ra,44(sp)
 8015858:	df000a15 	stw	fp,40(sp)
 801585c:	df000a04 	addi	fp,sp,40
 8015860:	2005883a 	mov	r2,r4
 8015864:	e17ffe15 	stw	r5,-8(fp)
 8015868:	e1bfff15 	stw	r6,-4(fp)
 801586c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 8015870:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 8015874:	e0bfff17 	ldw	r2,-4(fp)
 8015878:	1000021e 	bne	r2,zero,8015884 <OSTaskNameGet+0x34>
        return (0);
 801587c:	0005883a 	mov	r2,zero
 8015880:	00005406 	br	80159d4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 8015884:	e0bffd03 	ldbu	r2,-12(fp)
 8015888:	10800570 	cmpltui	r2,r2,21
 801588c:	1000081e 	bne	r2,zero,80158b0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 8015890:	e0bffd03 	ldbu	r2,-12(fp)
 8015894:	10803fe0 	cmpeqi	r2,r2,255
 8015898:	1000051e 	bne	r2,zero,80158b0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 801589c:	e0bfff17 	ldw	r2,-4(fp)
 80158a0:	00c00a84 	movi	r3,42
 80158a4:	10c00005 	stb	r3,0(r2)
            return (0);
 80158a8:	0005883a 	mov	r2,zero
 80158ac:	00004906 	br	80159d4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 80158b0:	e0bffe17 	ldw	r2,-8(fp)
 80158b4:	1000051e 	bne	r2,zero,80158cc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 80158b8:	e0bfff17 	ldw	r2,-4(fp)
 80158bc:	00c00304 	movi	r3,12
 80158c0:	10c00005 	stb	r3,0(r2)
        return (0);
 80158c4:	0005883a 	mov	r2,zero
 80158c8:	00004206 	br	80159d4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 80158cc:	d0a73703 	ldbu	r2,-25380(gp)
 80158d0:	10803fcc 	andi	r2,r2,255
 80158d4:	10000526 	beq	r2,zero,80158ec <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 80158d8:	e0bfff17 	ldw	r2,-4(fp)
 80158dc:	00c00444 	movi	r3,17
 80158e0:	10c00005 	stb	r3,0(r2)
        return (0);
 80158e4:	0005883a 	mov	r2,zero
 80158e8:	00003a06 	br	80159d4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80158ec:	0005303a 	rdctl	r2,status
 80158f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80158f4:	e0fffc17 	ldw	r3,-16(fp)
 80158f8:	00bfff84 	movi	r2,-2
 80158fc:	1884703a 	and	r2,r3,r2
 8015900:	1001703a 	wrctl	status,r2
  
  return context;
 8015904:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8015908:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 801590c:	e0bffd03 	ldbu	r2,-12(fp)
 8015910:	10803fd8 	cmpnei	r2,r2,255
 8015914:	1000031e 	bne	r2,zero,8015924 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 8015918:	d0a73817 	ldw	r2,-25376(gp)
 801591c:	10800c83 	ldbu	r2,50(r2)
 8015920:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015924:	e0fffd03 	ldbu	r3,-12(fp)
 8015928:	008200b4 	movhi	r2,2050
 801592c:	108f9c04 	addi	r2,r2,15984
 8015930:	18c7883a 	add	r3,r3,r3
 8015934:	18c7883a 	add	r3,r3,r3
 8015938:	10c5883a 	add	r2,r2,r3
 801593c:	10800017 	ldw	r2,0(r2)
 8015940:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 8015944:	e0bff817 	ldw	r2,-32(fp)
 8015948:	1000091e 	bne	r2,zero,8015970 <OSTaskNameGet+0x120>
 801594c:	e0bff617 	ldw	r2,-40(fp)
 8015950:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015954:	e0bff717 	ldw	r2,-36(fp)
 8015958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801595c:	e0bfff17 	ldw	r2,-4(fp)
 8015960:	00c010c4 	movi	r3,67
 8015964:	10c00005 	stb	r3,0(r2)
        return (0);
 8015968:	0005883a 	mov	r2,zero
 801596c:	00001906 	br	80159d4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 8015970:	e0bff817 	ldw	r2,-32(fp)
 8015974:	10800058 	cmpnei	r2,r2,1
 8015978:	1000091e 	bne	r2,zero,80159a0 <OSTaskNameGet+0x150>
 801597c:	e0bff617 	ldw	r2,-40(fp)
 8015980:	e0bff915 	stw	r2,-28(fp)
 8015984:	e0bff917 	ldw	r2,-28(fp)
 8015988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801598c:	e0bfff17 	ldw	r2,-4(fp)
 8015990:	00c010c4 	movi	r3,67
 8015994:	10c00005 	stb	r3,0(r2)
        return (0);
 8015998:	0005883a 	mov	r2,zero
 801599c:	00000d06 	br	80159d4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 80159a0:	e0bff817 	ldw	r2,-32(fp)
 80159a4:	10801304 	addi	r2,r2,76
 80159a8:	100b883a 	mov	r5,r2
 80159ac:	e13ffe17 	ldw	r4,-8(fp)
 80159b0:	800f9380 	call	800f938 <OS_StrCopy>
 80159b4:	e0bffb05 	stb	r2,-20(fp)
 80159b8:	e0bff617 	ldw	r2,-40(fp)
 80159bc:	e0bffa15 	stw	r2,-24(fp)
 80159c0:	e0bffa17 	ldw	r2,-24(fp)
 80159c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80159c8:	e0bfff17 	ldw	r2,-4(fp)
 80159cc:	10000005 	stb	zero,0(r2)
    return (len);
 80159d0:	e0bffb03 	ldbu	r2,-20(fp)
}
 80159d4:	e037883a 	mov	sp,fp
 80159d8:	dfc00117 	ldw	ra,4(sp)
 80159dc:	df000017 	ldw	fp,0(sp)
 80159e0:	dec00204 	addi	sp,sp,8
 80159e4:	f800283a 	ret

080159e8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 80159e8:	defff304 	addi	sp,sp,-52
 80159ec:	dfc00c15 	stw	ra,48(sp)
 80159f0:	df000b15 	stw	fp,44(sp)
 80159f4:	df000b04 	addi	fp,sp,44
 80159f8:	2005883a 	mov	r2,r4
 80159fc:	e17ffe15 	stw	r5,-8(fp)
 8015a00:	e1bfff15 	stw	r6,-4(fp)
 8015a04:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8015a08:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 8015a0c:	e0bfff17 	ldw	r2,-4(fp)
 8015a10:	10005c26 	beq	r2,zero,8015b84 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8015a14:	e0bffd03 	ldbu	r2,-12(fp)
 8015a18:	10800570 	cmpltui	r2,r2,21
 8015a1c:	1000071e 	bne	r2,zero,8015a3c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 8015a20:	e0bffd03 	ldbu	r2,-12(fp)
 8015a24:	10803fe0 	cmpeqi	r2,r2,255
 8015a28:	1000041e 	bne	r2,zero,8015a3c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8015a2c:	e0bfff17 	ldw	r2,-4(fp)
 8015a30:	00c00a84 	movi	r3,42
 8015a34:	10c00005 	stb	r3,0(r2)
            return;
 8015a38:	00005306 	br	8015b88 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8015a3c:	e0bffe17 	ldw	r2,-8(fp)
 8015a40:	1000041e 	bne	r2,zero,8015a54 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8015a44:	e0bfff17 	ldw	r2,-4(fp)
 8015a48:	00c00304 	movi	r3,12
 8015a4c:	10c00005 	stb	r3,0(r2)
        return;
 8015a50:	00004d06 	br	8015b88 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 8015a54:	d0a73703 	ldbu	r2,-25380(gp)
 8015a58:	10803fcc 	andi	r2,r2,255
 8015a5c:	10000426 	beq	r2,zero,8015a70 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 8015a60:	e0bfff17 	ldw	r2,-4(fp)
 8015a64:	00c00484 	movi	r3,18
 8015a68:	10c00005 	stb	r3,0(r2)
        return;
 8015a6c:	00004606 	br	8015b88 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a70:	0005303a 	rdctl	r2,status
 8015a74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a78:	e0fffc17 	ldw	r3,-16(fp)
 8015a7c:	00bfff84 	movi	r2,-2
 8015a80:	1884703a 	and	r2,r3,r2
 8015a84:	1001703a 	wrctl	status,r2
  
  return context;
 8015a88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8015a8c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8015a90:	e0bffd03 	ldbu	r2,-12(fp)
 8015a94:	10803fd8 	cmpnei	r2,r2,255
 8015a98:	1000031e 	bne	r2,zero,8015aa8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 8015a9c:	d0a73817 	ldw	r2,-25376(gp)
 8015aa0:	10800c83 	ldbu	r2,50(r2)
 8015aa4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015aa8:	e0fffd03 	ldbu	r3,-12(fp)
 8015aac:	008200b4 	movhi	r2,2050
 8015ab0:	108f9c04 	addi	r2,r2,15984
 8015ab4:	18c7883a 	add	r3,r3,r3
 8015ab8:	18c7883a 	add	r3,r3,r3
 8015abc:	10c5883a 	add	r2,r2,r3
 8015ac0:	10800017 	ldw	r2,0(r2)
 8015ac4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8015ac8:	e0bff717 	ldw	r2,-36(fp)
 8015acc:	1000081e 	bne	r2,zero,8015af0 <OSTaskNameSet+0x108>
 8015ad0:	e0bff517 	ldw	r2,-44(fp)
 8015ad4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015ad8:	e0bff617 	ldw	r2,-40(fp)
 8015adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8015ae0:	e0bfff17 	ldw	r2,-4(fp)
 8015ae4:	00c010c4 	movi	r3,67
 8015ae8:	10c00005 	stb	r3,0(r2)
        return;
 8015aec:	00002606 	br	8015b88 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8015af0:	e0bff717 	ldw	r2,-36(fp)
 8015af4:	10800058 	cmpnei	r2,r2,1
 8015af8:	1000081e 	bne	r2,zero,8015b1c <OSTaskNameSet+0x134>
 8015afc:	e0bff517 	ldw	r2,-44(fp)
 8015b00:	e0bff815 	stw	r2,-32(fp)
 8015b04:	e0bff817 	ldw	r2,-32(fp)
 8015b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8015b0c:	e0bfff17 	ldw	r2,-4(fp)
 8015b10:	00c010c4 	movi	r3,67
 8015b14:	10c00005 	stb	r3,0(r2)
        return;
 8015b18:	00001b06 	br	8015b88 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 8015b1c:	e13ffe17 	ldw	r4,-8(fp)
 8015b20:	800f9ac0 	call	800f9ac <OS_StrLen>
 8015b24:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 8015b28:	e0bffa03 	ldbu	r2,-24(fp)
 8015b2c:	10800830 	cmpltui	r2,r2,32
 8015b30:	1000081e 	bne	r2,zero,8015b54 <OSTaskNameSet+0x16c>
 8015b34:	e0bff517 	ldw	r2,-44(fp)
 8015b38:	e0bff915 	stw	r2,-28(fp)
 8015b3c:	e0bff917 	ldw	r2,-28(fp)
 8015b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 8015b44:	e0bfff17 	ldw	r2,-4(fp)
 8015b48:	00c01044 	movi	r3,65
 8015b4c:	10c00005 	stb	r3,0(r2)
        return;
 8015b50:	00000d06 	br	8015b88 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 8015b54:	e0bff717 	ldw	r2,-36(fp)
 8015b58:	10801304 	addi	r2,r2,76
 8015b5c:	e17ffe17 	ldw	r5,-8(fp)
 8015b60:	1009883a 	mov	r4,r2
 8015b64:	800f9380 	call	800f938 <OS_StrCopy>
 8015b68:	e0bff517 	ldw	r2,-44(fp)
 8015b6c:	e0bffb15 	stw	r2,-20(fp)
 8015b70:	e0bffb17 	ldw	r2,-20(fp)
 8015b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8015b78:	e0bfff17 	ldw	r2,-4(fp)
 8015b7c:	10000005 	stb	zero,0(r2)
 8015b80:	00000106 	br	8015b88 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 8015b84:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 8015b88:	e037883a 	mov	sp,fp
 8015b8c:	dfc00117 	ldw	ra,4(sp)
 8015b90:	df000017 	ldw	fp,0(sp)
 8015b94:	dec00204 	addi	sp,sp,8
 8015b98:	f800283a 	ret

08015b9c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 8015b9c:	defff404 	addi	sp,sp,-48
 8015ba0:	dfc00b15 	stw	ra,44(sp)
 8015ba4:	df000a15 	stw	fp,40(sp)
 8015ba8:	df000a04 	addi	fp,sp,40
 8015bac:	2005883a 	mov	r2,r4
 8015bb0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8015bb4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8015bb8:	e0bfff03 	ldbu	r2,-4(fp)
 8015bbc:	10800530 	cmpltui	r2,r2,20
 8015bc0:	1000021e 	bne	r2,zero,8015bcc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 8015bc4:	00800a84 	movi	r2,42
 8015bc8:	00006406 	br	8015d5c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015bcc:	0005303a 	rdctl	r2,status
 8015bd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015bd4:	e0fffe17 	ldw	r3,-8(fp)
 8015bd8:	00bfff84 	movi	r2,-2
 8015bdc:	1884703a 	and	r2,r3,r2
 8015be0:	1001703a 	wrctl	status,r2
  
  return context;
 8015be4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015be8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 8015bec:	e0ffff03 	ldbu	r3,-4(fp)
 8015bf0:	008200b4 	movhi	r2,2050
 8015bf4:	108f9c04 	addi	r2,r2,15984
 8015bf8:	18c7883a 	add	r3,r3,r3
 8015bfc:	18c7883a 	add	r3,r3,r3
 8015c00:	10c5883a 	add	r2,r2,r3
 8015c04:	10800017 	ldw	r2,0(r2)
 8015c08:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8015c0c:	e0bff817 	ldw	r2,-32(fp)
 8015c10:	1000061e 	bne	r2,zero,8015c2c <OSTaskResume+0x90>
 8015c14:	e0bff617 	ldw	r2,-40(fp)
 8015c18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015c1c:	e0bff717 	ldw	r2,-36(fp)
 8015c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 8015c24:	00801184 	movi	r2,70
 8015c28:	00004c06 	br	8015d5c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8015c2c:	e0bff817 	ldw	r2,-32(fp)
 8015c30:	10800058 	cmpnei	r2,r2,1
 8015c34:	1000061e 	bne	r2,zero,8015c50 <OSTaskResume+0xb4>
 8015c38:	e0bff617 	ldw	r2,-40(fp)
 8015c3c:	e0bff915 	stw	r2,-28(fp)
 8015c40:	e0bff917 	ldw	r2,-28(fp)
 8015c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015c48:	008010c4 	movi	r2,67
 8015c4c:	00004306 	br	8015d5c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8015c50:	e0bff817 	ldw	r2,-32(fp)
 8015c54:	10800c03 	ldbu	r2,48(r2)
 8015c58:	10803fcc 	andi	r2,r2,255
 8015c5c:	1080020c 	andi	r2,r2,8
 8015c60:	10003926 	beq	r2,zero,8015d48 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 8015c64:	e0bff817 	ldw	r2,-32(fp)
 8015c68:	10c00c03 	ldbu	r3,48(r2)
 8015c6c:	00bffdc4 	movi	r2,-9
 8015c70:	1884703a 	and	r2,r3,r2
 8015c74:	1007883a 	mov	r3,r2
 8015c78:	e0bff817 	ldw	r2,-32(fp)
 8015c7c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 8015c80:	e0bff817 	ldw	r2,-32(fp)
 8015c84:	10800c03 	ldbu	r2,48(r2)
 8015c88:	10803fcc 	andi	r2,r2,255
 8015c8c:	1000281e 	bne	r2,zero,8015d30 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 8015c90:	e0bff817 	ldw	r2,-32(fp)
 8015c94:	10800b8b 	ldhu	r2,46(r2)
 8015c98:	10bfffcc 	andi	r2,r2,65535
 8015c9c:	10001f1e 	bne	r2,zero,8015d1c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8015ca0:	e0bff817 	ldw	r2,-32(fp)
 8015ca4:	10c00d83 	ldbu	r3,54(r2)
 8015ca8:	d0a73503 	ldbu	r2,-25388(gp)
 8015cac:	1884b03a 	or	r2,r3,r2
 8015cb0:	d0a73505 	stb	r2,-25388(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8015cb4:	e0bff817 	ldw	r2,-32(fp)
 8015cb8:	10800d03 	ldbu	r2,52(r2)
 8015cbc:	10c03fcc 	andi	r3,r2,255
 8015cc0:	e0bff817 	ldw	r2,-32(fp)
 8015cc4:	10800d03 	ldbu	r2,52(r2)
 8015cc8:	11003fcc 	andi	r4,r2,255
 8015ccc:	d0a73544 	addi	r2,gp,-25387
 8015cd0:	2085883a 	add	r2,r4,r2
 8015cd4:	11000003 	ldbu	r4,0(r2)
 8015cd8:	e0bff817 	ldw	r2,-32(fp)
 8015cdc:	10800d43 	ldbu	r2,53(r2)
 8015ce0:	2084b03a 	or	r2,r4,r2
 8015ce4:	1009883a 	mov	r4,r2
 8015ce8:	d0a73544 	addi	r2,gp,-25387
 8015cec:	1885883a 	add	r2,r3,r2
 8015cf0:	11000005 	stb	r4,0(r2)
 8015cf4:	e0bff617 	ldw	r2,-40(fp)
 8015cf8:	e0bffa15 	stw	r2,-24(fp)
 8015cfc:	e0bffa17 	ldw	r2,-24(fp)
 8015d00:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 8015d04:	d0a72943 	ldbu	r2,-25435(gp)
 8015d08:	10803fcc 	andi	r2,r2,255
 8015d0c:	10800058 	cmpnei	r2,r2,1
 8015d10:	10000b1e 	bne	r2,zero,8015d40 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 8015d14:	800f7f40 	call	800f7f4 <OS_Sched>
 8015d18:	00000906 	br	8015d40 <OSTaskResume+0x1a4>
 8015d1c:	e0bff617 	ldw	r2,-40(fp)
 8015d20:	e0bffb15 	stw	r2,-20(fp)
 8015d24:	e0bffb17 	ldw	r2,-20(fp)
 8015d28:	1001703a 	wrctl	status,r2
 8015d2c:	00000406 	br	8015d40 <OSTaskResume+0x1a4>
 8015d30:	e0bff617 	ldw	r2,-40(fp)
 8015d34:	e0bffc15 	stw	r2,-16(fp)
 8015d38:	e0bffc17 	ldw	r2,-16(fp)
 8015d3c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 8015d40:	0005883a 	mov	r2,zero
 8015d44:	00000506 	br	8015d5c <OSTaskResume+0x1c0>
 8015d48:	e0bff617 	ldw	r2,-40(fp)
 8015d4c:	e0bffd15 	stw	r2,-12(fp)
 8015d50:	e0bffd17 	ldw	r2,-12(fp)
 8015d54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8015d58:	00801104 	movi	r2,68
}
 8015d5c:	e037883a 	mov	sp,fp
 8015d60:	dfc00117 	ldw	ra,4(sp)
 8015d64:	df000017 	ldw	fp,0(sp)
 8015d68:	dec00204 	addi	sp,sp,8
 8015d6c:	f800283a 	ret

08015d70 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 8015d70:	defff304 	addi	sp,sp,-52
 8015d74:	df000c15 	stw	fp,48(sp)
 8015d78:	df000c04 	addi	fp,sp,48
 8015d7c:	2005883a 	mov	r2,r4
 8015d80:	e17fff15 	stw	r5,-4(fp)
 8015d84:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8015d88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8015d8c:	e0bffe03 	ldbu	r2,-8(fp)
 8015d90:	10800570 	cmpltui	r2,r2,21
 8015d94:	1000051e 	bne	r2,zero,8015dac <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 8015d98:	e0bffe03 	ldbu	r2,-8(fp)
 8015d9c:	10803fe0 	cmpeqi	r2,r2,255
 8015da0:	1000021e 	bne	r2,zero,8015dac <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 8015da4:	00800a84 	movi	r2,42
 8015da8:	00005d06 	br	8015f20 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8015dac:	e0bfff17 	ldw	r2,-4(fp)
 8015db0:	1000021e 	bne	r2,zero,8015dbc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 8015db4:	00800244 	movi	r2,9
 8015db8:	00005906 	br	8015f20 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 8015dbc:	e0bfff17 	ldw	r2,-4(fp)
 8015dc0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 8015dc4:	e0bfff17 	ldw	r2,-4(fp)
 8015dc8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015dcc:	0005303a 	rdctl	r2,status
 8015dd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015dd4:	e0fffd17 	ldw	r3,-12(fp)
 8015dd8:	00bfff84 	movi	r2,-2
 8015ddc:	1884703a 	and	r2,r3,r2
 8015de0:	1001703a 	wrctl	status,r2
  
  return context;
 8015de4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 8015de8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8015dec:	e0bffe03 	ldbu	r2,-8(fp)
 8015df0:	10803fd8 	cmpnei	r2,r2,255
 8015df4:	1000031e 	bne	r2,zero,8015e04 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 8015df8:	d0a73817 	ldw	r2,-25376(gp)
 8015dfc:	10800c83 	ldbu	r2,50(r2)
 8015e00:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015e04:	e0fffe03 	ldbu	r3,-8(fp)
 8015e08:	008200b4 	movhi	r2,2050
 8015e0c:	108f9c04 	addi	r2,r2,15984
 8015e10:	18c7883a 	add	r3,r3,r3
 8015e14:	18c7883a 	add	r3,r3,r3
 8015e18:	10c5883a 	add	r2,r2,r3
 8015e1c:	10800017 	ldw	r2,0(r2)
 8015e20:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8015e24:	e0bff817 	ldw	r2,-32(fp)
 8015e28:	1000061e 	bne	r2,zero,8015e44 <OSTaskStkChk+0xd4>
 8015e2c:	e0bff617 	ldw	r2,-40(fp)
 8015e30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015e34:	e0bff717 	ldw	r2,-36(fp)
 8015e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015e3c:	008010c4 	movi	r2,67
 8015e40:	00003706 	br	8015f20 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8015e44:	e0bff817 	ldw	r2,-32(fp)
 8015e48:	10800058 	cmpnei	r2,r2,1
 8015e4c:	1000061e 	bne	r2,zero,8015e68 <OSTaskStkChk+0xf8>
 8015e50:	e0bff617 	ldw	r2,-40(fp)
 8015e54:	e0bff915 	stw	r2,-28(fp)
 8015e58:	e0bff917 	ldw	r2,-28(fp)
 8015e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015e60:	008010c4 	movi	r2,67
 8015e64:	00002e06 	br	8015f20 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 8015e68:	e0bff817 	ldw	r2,-32(fp)
 8015e6c:	1080040b 	ldhu	r2,16(r2)
 8015e70:	10bfffcc 	andi	r2,r2,65535
 8015e74:	1080004c 	andi	r2,r2,1
 8015e78:	1000061e 	bne	r2,zero,8015e94 <OSTaskStkChk+0x124>
 8015e7c:	e0bff617 	ldw	r2,-40(fp)
 8015e80:	e0bffa15 	stw	r2,-24(fp)
 8015e84:	e0bffa17 	ldw	r2,-24(fp)
 8015e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 8015e8c:	00801144 	movi	r2,69
 8015e90:	00002306 	br	8015f20 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 8015e94:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 8015e98:	e0bff817 	ldw	r2,-32(fp)
 8015e9c:	10800317 	ldw	r2,12(r2)
 8015ea0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 8015ea4:	e0bff817 	ldw	r2,-32(fp)
 8015ea8:	10800217 	ldw	r2,8(r2)
 8015eac:	e0bff415 	stw	r2,-48(fp)
 8015eb0:	e0bff617 	ldw	r2,-40(fp)
 8015eb4:	e0bffb15 	stw	r2,-20(fp)
 8015eb8:	e0bffb17 	ldw	r2,-20(fp)
 8015ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8015ec0:	00000306 	br	8015ed0 <OSTaskStkChk+0x160>
        nfree++;
 8015ec4:	e0bff517 	ldw	r2,-44(fp)
 8015ec8:	10800044 	addi	r2,r2,1
 8015ecc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8015ed0:	e0bff417 	ldw	r2,-48(fp)
 8015ed4:	10c00104 	addi	r3,r2,4
 8015ed8:	e0fff415 	stw	r3,-48(fp)
 8015edc:	10800017 	ldw	r2,0(r2)
 8015ee0:	103ff826 	beq	r2,zero,8015ec4 <__alt_data_end+0xf8015ec4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 8015ee4:	e0bff517 	ldw	r2,-44(fp)
 8015ee8:	1085883a 	add	r2,r2,r2
 8015eec:	1085883a 	add	r2,r2,r2
 8015ef0:	1007883a 	mov	r3,r2
 8015ef4:	e0bfff17 	ldw	r2,-4(fp)
 8015ef8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 8015efc:	e0fffc17 	ldw	r3,-16(fp)
 8015f00:	e0bff517 	ldw	r2,-44(fp)
 8015f04:	1885c83a 	sub	r2,r3,r2
 8015f08:	1085883a 	add	r2,r2,r2
 8015f0c:	1085883a 	add	r2,r2,r2
 8015f10:	1007883a 	mov	r3,r2
 8015f14:	e0bfff17 	ldw	r2,-4(fp)
 8015f18:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 8015f1c:	0005883a 	mov	r2,zero
}
 8015f20:	e037883a 	mov	sp,fp
 8015f24:	df000017 	ldw	fp,0(sp)
 8015f28:	dec00104 	addi	sp,sp,4
 8015f2c:	f800283a 	ret

08015f30 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 8015f30:	defff504 	addi	sp,sp,-44
 8015f34:	dfc00a15 	stw	ra,40(sp)
 8015f38:	df000915 	stw	fp,36(sp)
 8015f3c:	df000904 	addi	fp,sp,36
 8015f40:	2005883a 	mov	r2,r4
 8015f44:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015f48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8015f4c:	e0bfff03 	ldbu	r2,-4(fp)
 8015f50:	10800518 	cmpnei	r2,r2,20
 8015f54:	1000021e 	bne	r2,zero,8015f60 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8015f58:	008011c4 	movi	r2,71
 8015f5c:	00006806 	br	8016100 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8015f60:	e0bfff03 	ldbu	r2,-4(fp)
 8015f64:	10800530 	cmpltui	r2,r2,20
 8015f68:	1000051e 	bne	r2,zero,8015f80 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 8015f6c:	e0bfff03 	ldbu	r2,-4(fp)
 8015f70:	10803fe0 	cmpeqi	r2,r2,255
 8015f74:	1000021e 	bne	r2,zero,8015f80 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 8015f78:	00800a84 	movi	r2,42
 8015f7c:	00006006 	br	8016100 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015f80:	0005303a 	rdctl	r2,status
 8015f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015f88:	e0fffe17 	ldw	r3,-8(fp)
 8015f8c:	00bfff84 	movi	r2,-2
 8015f90:	1884703a 	and	r2,r3,r2
 8015f94:	1001703a 	wrctl	status,r2
  
  return context;
 8015f98:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8015f9c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8015fa0:	e0bfff03 	ldbu	r2,-4(fp)
 8015fa4:	10803fd8 	cmpnei	r2,r2,255
 8015fa8:	1000061e 	bne	r2,zero,8015fc4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 8015fac:	d0a73817 	ldw	r2,-25376(gp)
 8015fb0:	10800c83 	ldbu	r2,50(r2)
 8015fb4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 8015fb8:	00800044 	movi	r2,1
 8015fbc:	e0bff705 	stb	r2,-36(fp)
 8015fc0:	00000906 	br	8015fe8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8015fc4:	d0a73817 	ldw	r2,-25376(gp)
 8015fc8:	10800c83 	ldbu	r2,50(r2)
 8015fcc:	10c03fcc 	andi	r3,r2,255
 8015fd0:	e0bfff03 	ldbu	r2,-4(fp)
 8015fd4:	1880031e 	bne	r3,r2,8015fe4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 8015fd8:	00800044 	movi	r2,1
 8015fdc:	e0bff705 	stb	r2,-36(fp)
 8015fe0:	00000106 	br	8015fe8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8015fe4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015fe8:	e0ffff03 	ldbu	r3,-4(fp)
 8015fec:	008200b4 	movhi	r2,2050
 8015ff0:	108f9c04 	addi	r2,r2,15984
 8015ff4:	18c7883a 	add	r3,r3,r3
 8015ff8:	18c7883a 	add	r3,r3,r3
 8015ffc:	10c5883a 	add	r2,r2,r3
 8016000:	10800017 	ldw	r2,0(r2)
 8016004:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8016008:	e0bffa17 	ldw	r2,-24(fp)
 801600c:	1000061e 	bne	r2,zero,8016028 <OSTaskSuspend+0xf8>
 8016010:	e0bff817 	ldw	r2,-32(fp)
 8016014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016018:	e0bff917 	ldw	r2,-28(fp)
 801601c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8016020:	00801204 	movi	r2,72
 8016024:	00003606 	br	8016100 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8016028:	e0bffa17 	ldw	r2,-24(fp)
 801602c:	10800058 	cmpnei	r2,r2,1
 8016030:	1000061e 	bne	r2,zero,801604c <OSTaskSuspend+0x11c>
 8016034:	e0bff817 	ldw	r2,-32(fp)
 8016038:	e0bffb15 	stw	r2,-20(fp)
 801603c:	e0bffb17 	ldw	r2,-20(fp)
 8016040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8016044:	008010c4 	movi	r2,67
 8016048:	00002d06 	br	8016100 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 801604c:	e0bffa17 	ldw	r2,-24(fp)
 8016050:	10800d03 	ldbu	r2,52(r2)
 8016054:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 8016058:	e0fffd03 	ldbu	r3,-12(fp)
 801605c:	e13ffd03 	ldbu	r4,-12(fp)
 8016060:	d0a73544 	addi	r2,gp,-25387
 8016064:	2085883a 	add	r2,r4,r2
 8016068:	10800003 	ldbu	r2,0(r2)
 801606c:	1009883a 	mov	r4,r2
 8016070:	e0bffa17 	ldw	r2,-24(fp)
 8016074:	10800d43 	ldbu	r2,53(r2)
 8016078:	0084303a 	nor	r2,zero,r2
 801607c:	2084703a 	and	r2,r4,r2
 8016080:	1009883a 	mov	r4,r2
 8016084:	d0a73544 	addi	r2,gp,-25387
 8016088:	1885883a 	add	r2,r3,r2
 801608c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 8016090:	e0fffd03 	ldbu	r3,-12(fp)
 8016094:	d0a73544 	addi	r2,gp,-25387
 8016098:	1885883a 	add	r2,r3,r2
 801609c:	10800003 	ldbu	r2,0(r2)
 80160a0:	10803fcc 	andi	r2,r2,255
 80160a4:	1000071e 	bne	r2,zero,80160c4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 80160a8:	e0bffa17 	ldw	r2,-24(fp)
 80160ac:	10800d83 	ldbu	r2,54(r2)
 80160b0:	0084303a 	nor	r2,zero,r2
 80160b4:	1007883a 	mov	r3,r2
 80160b8:	d0a73503 	ldbu	r2,-25388(gp)
 80160bc:	1884703a 	and	r2,r3,r2
 80160c0:	d0a73505 	stb	r2,-25388(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80160c4:	e0bffa17 	ldw	r2,-24(fp)
 80160c8:	10800c03 	ldbu	r2,48(r2)
 80160cc:	10800214 	ori	r2,r2,8
 80160d0:	1007883a 	mov	r3,r2
 80160d4:	e0bffa17 	ldw	r2,-24(fp)
 80160d8:	10c00c05 	stb	r3,48(r2)
 80160dc:	e0bff817 	ldw	r2,-32(fp)
 80160e0:	e0bffc15 	stw	r2,-16(fp)
 80160e4:	e0bffc17 	ldw	r2,-16(fp)
 80160e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80160ec:	e0bff703 	ldbu	r2,-36(fp)
 80160f0:	10800058 	cmpnei	r2,r2,1
 80160f4:	1000011e 	bne	r2,zero,80160fc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 80160f8:	800f7f40 	call	800f7f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80160fc:	0005883a 	mov	r2,zero
}
 8016100:	e037883a 	mov	sp,fp
 8016104:	dfc00117 	ldw	ra,4(sp)
 8016108:	df000017 	ldw	fp,0(sp)
 801610c:	dec00204 	addi	sp,sp,8
 8016110:	f800283a 	ret

08016114 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 8016114:	defff604 	addi	sp,sp,-40
 8016118:	dfc00915 	stw	ra,36(sp)
 801611c:	df000815 	stw	fp,32(sp)
 8016120:	df000804 	addi	fp,sp,32
 8016124:	2005883a 	mov	r2,r4
 8016128:	e17fff15 	stw	r5,-4(fp)
 801612c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8016130:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 8016134:	e0bffe03 	ldbu	r2,-8(fp)
 8016138:	10800570 	cmpltui	r2,r2,21
 801613c:	1000051e 	bne	r2,zero,8016154 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 8016140:	e0bffe03 	ldbu	r2,-8(fp)
 8016144:	10803fe0 	cmpeqi	r2,r2,255
 8016148:	1000021e 	bne	r2,zero,8016154 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 801614c:	00800a84 	movi	r2,42
 8016150:	00003406 	br	8016224 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 8016154:	e0bfff17 	ldw	r2,-4(fp)
 8016158:	1000021e 	bne	r2,zero,8016164 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 801615c:	00800244 	movi	r2,9
 8016160:	00003006 	br	8016224 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016164:	0005303a 	rdctl	r2,status
 8016168:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801616c:	e0fffd17 	ldw	r3,-12(fp)
 8016170:	00bfff84 	movi	r2,-2
 8016174:	1884703a 	and	r2,r3,r2
 8016178:	1001703a 	wrctl	status,r2
  
  return context;
 801617c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8016180:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 8016184:	e0bffe03 	ldbu	r2,-8(fp)
 8016188:	10803fd8 	cmpnei	r2,r2,255
 801618c:	1000031e 	bne	r2,zero,801619c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 8016190:	d0a73817 	ldw	r2,-25376(gp)
 8016194:	10800c83 	ldbu	r2,50(r2)
 8016198:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801619c:	e0fffe03 	ldbu	r3,-8(fp)
 80161a0:	008200b4 	movhi	r2,2050
 80161a4:	108f9c04 	addi	r2,r2,15984
 80161a8:	18c7883a 	add	r3,r3,r3
 80161ac:	18c7883a 	add	r3,r3,r3
 80161b0:	10c5883a 	add	r2,r2,r3
 80161b4:	10800017 	ldw	r2,0(r2)
 80161b8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 80161bc:	e0bffa17 	ldw	r2,-24(fp)
 80161c0:	1000061e 	bne	r2,zero,80161dc <OSTaskQuery+0xc8>
 80161c4:	e0bff817 	ldw	r2,-32(fp)
 80161c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80161cc:	e0bff917 	ldw	r2,-28(fp)
 80161d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 80161d4:	00800a44 	movi	r2,41
 80161d8:	00001206 	br	8016224 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 80161dc:	e0bffa17 	ldw	r2,-24(fp)
 80161e0:	10800058 	cmpnei	r2,r2,1
 80161e4:	1000061e 	bne	r2,zero,8016200 <OSTaskQuery+0xec>
 80161e8:	e0bff817 	ldw	r2,-32(fp)
 80161ec:	e0bffb15 	stw	r2,-20(fp)
 80161f0:	e0bffb17 	ldw	r2,-20(fp)
 80161f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 80161f8:	008010c4 	movi	r2,67
 80161fc:	00000906 	br	8016224 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 8016200:	01801b04 	movi	r6,108
 8016204:	e17ffa17 	ldw	r5,-24(fp)
 8016208:	e13fff17 	ldw	r4,-4(fp)
 801620c:	800f78c0 	call	800f78c <OS_MemCopy>
 8016210:	e0bff817 	ldw	r2,-32(fp)
 8016214:	e0bffc15 	stw	r2,-16(fp)
 8016218:	e0bffc17 	ldw	r2,-16(fp)
 801621c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8016220:	0005883a 	mov	r2,zero
}
 8016224:	e037883a 	mov	sp,fp
 8016228:	dfc00117 	ldw	ra,4(sp)
 801622c:	df000017 	ldw	fp,0(sp)
 8016230:	dec00204 	addi	sp,sp,8
 8016234:	f800283a 	ret

08016238 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 8016238:	defffc04 	addi	sp,sp,-16
 801623c:	df000315 	stw	fp,12(sp)
 8016240:	df000304 	addi	fp,sp,12
 8016244:	e13ffd15 	stw	r4,-12(fp)
 8016248:	e17ffe15 	stw	r5,-8(fp)
 801624c:	3005883a 	mov	r2,r6
 8016250:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 8016254:	e0bfff0b 	ldhu	r2,-4(fp)
 8016258:	1080004c 	andi	r2,r2,1
 801625c:	10000d26 	beq	r2,zero,8016294 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 8016260:	e0bfff0b 	ldhu	r2,-4(fp)
 8016264:	1080008c 	andi	r2,r2,2
 8016268:	10000a26 	beq	r2,zero,8016294 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 801626c:	00000706 	br	801628c <OS_TaskStkClr+0x54>
                size--;
 8016270:	e0bffe17 	ldw	r2,-8(fp)
 8016274:	10bfffc4 	addi	r2,r2,-1
 8016278:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 801627c:	e0bffd17 	ldw	r2,-12(fp)
 8016280:	10c00104 	addi	r3,r2,4
 8016284:	e0fffd15 	stw	r3,-12(fp)
 8016288:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 801628c:	e0bffe17 	ldw	r2,-8(fp)
 8016290:	103ff71e 	bne	r2,zero,8016270 <__alt_data_end+0xf8016270>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8016294:	0001883a 	nop
 8016298:	e037883a 	mov	sp,fp
 801629c:	df000017 	ldw	fp,0(sp)
 80162a0:	dec00104 	addi	sp,sp,4
 80162a4:	f800283a 	ret

080162a8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 80162a8:	defff904 	addi	sp,sp,-28
 80162ac:	dfc00615 	stw	ra,24(sp)
 80162b0:	df000515 	stw	fp,20(sp)
 80162b4:	df000504 	addi	fp,sp,20
 80162b8:	2005883a 	mov	r2,r4
 80162bc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80162c0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80162c4:	d0a73703 	ldbu	r2,-25380(gp)
 80162c8:	10803fcc 	andi	r2,r2,255
 80162cc:	1000311e 	bne	r2,zero,8016394 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 80162d0:	e0bfff0b 	ldhu	r2,-4(fp)
 80162d4:	10003026 	beq	r2,zero,8016398 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80162d8:	0005303a 	rdctl	r2,status
 80162dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80162e0:	e0fffe17 	ldw	r3,-8(fp)
 80162e4:	00bfff84 	movi	r2,-2
 80162e8:	1884703a 	and	r2,r3,r2
 80162ec:	1001703a 	wrctl	status,r2
  
  return context;
 80162f0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 80162f4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80162f8:	d0a73817 	ldw	r2,-25376(gp)
 80162fc:	10800d03 	ldbu	r2,52(r2)
 8016300:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 8016304:	e0fffd03 	ldbu	r3,-12(fp)
 8016308:	e13ffd03 	ldbu	r4,-12(fp)
 801630c:	d0a73544 	addi	r2,gp,-25387
 8016310:	2085883a 	add	r2,r4,r2
 8016314:	10800003 	ldbu	r2,0(r2)
 8016318:	1009883a 	mov	r4,r2
 801631c:	d0a73817 	ldw	r2,-25376(gp)
 8016320:	10800d43 	ldbu	r2,53(r2)
 8016324:	0084303a 	nor	r2,zero,r2
 8016328:	2084703a 	and	r2,r4,r2
 801632c:	1009883a 	mov	r4,r2
 8016330:	d0a73544 	addi	r2,gp,-25387
 8016334:	1885883a 	add	r2,r3,r2
 8016338:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 801633c:	e0fffd03 	ldbu	r3,-12(fp)
 8016340:	d0a73544 	addi	r2,gp,-25387
 8016344:	1885883a 	add	r2,r3,r2
 8016348:	10800003 	ldbu	r2,0(r2)
 801634c:	10803fcc 	andi	r2,r2,255
 8016350:	1000071e 	bne	r2,zero,8016370 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 8016354:	d0a73817 	ldw	r2,-25376(gp)
 8016358:	10800d83 	ldbu	r2,54(r2)
 801635c:	0084303a 	nor	r2,zero,r2
 8016360:	1007883a 	mov	r3,r2
 8016364:	d0a73503 	ldbu	r2,-25388(gp)
 8016368:	1884703a 	and	r2,r3,r2
 801636c:	d0a73505 	stb	r2,-25388(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8016370:	d0a73817 	ldw	r2,-25376(gp)
 8016374:	e0ffff0b 	ldhu	r3,-4(fp)
 8016378:	10c00b8d 	sth	r3,46(r2)
 801637c:	e0bffb17 	ldw	r2,-20(fp)
 8016380:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016384:	e0bffc17 	ldw	r2,-16(fp)
 8016388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 801638c:	800f7f40 	call	800f7f4 <OS_Sched>
 8016390:	00000106 	br	8016398 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 8016394:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 8016398:	e037883a 	mov	sp,fp
 801639c:	dfc00117 	ldw	ra,4(sp)
 80163a0:	df000017 	ldw	fp,0(sp)
 80163a4:	dec00204 	addi	sp,sp,8
 80163a8:	f800283a 	ret

080163ac <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 80163ac:	defff704 	addi	sp,sp,-36
 80163b0:	dfc00815 	stw	ra,32(sp)
 80163b4:	df000715 	stw	fp,28(sp)
 80163b8:	dc000615 	stw	r16,24(sp)
 80163bc:	df000704 	addi	fp,sp,28
 80163c0:	2011883a 	mov	r8,r4
 80163c4:	2809883a 	mov	r4,r5
 80163c8:	3007883a 	mov	r3,r6
 80163cc:	3805883a 	mov	r2,r7
 80163d0:	e23ffb05 	stb	r8,-20(fp)
 80163d4:	e13ffc05 	stb	r4,-16(fp)
 80163d8:	e0fffd05 	stb	r3,-12(fp)
 80163dc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80163e0:	d0a73703 	ldbu	r2,-25380(gp)
 80163e4:	10803fcc 	andi	r2,r2,255
 80163e8:	10000226 	beq	r2,zero,80163f4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 80163ec:	00801544 	movi	r2,85
 80163f0:	00003d06 	br	80164e8 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 80163f4:	e0bffb03 	ldbu	r2,-20(fp)
 80163f8:	1000081e 	bne	r2,zero,801641c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 80163fc:	e0bffc03 	ldbu	r2,-16(fp)
 8016400:	1000061e 	bne	r2,zero,801641c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 8016404:	e0bffd03 	ldbu	r2,-12(fp)
 8016408:	1000041e 	bne	r2,zero,801641c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 801640c:	e0bffe0b 	ldhu	r2,-8(fp)
 8016410:	1000021e 	bne	r2,zero,801641c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 8016414:	00801504 	movi	r2,84
 8016418:	00003306 	br	80164e8 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 801641c:	e0bffc03 	ldbu	r2,-16(fp)
 8016420:	10800f30 	cmpltui	r2,r2,60
 8016424:	1000021e 	bne	r2,zero,8016430 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8016428:	00801444 	movi	r2,81
 801642c:	00002e06 	br	80164e8 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 8016430:	e0bffd03 	ldbu	r2,-12(fp)
 8016434:	10800f30 	cmpltui	r2,r2,60
 8016438:	1000021e 	bne	r2,zero,8016444 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 801643c:	00801484 	movi	r2,82
 8016440:	00002906 	br	80164e8 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 8016444:	e0bffe0b 	ldhu	r2,-8(fp)
 8016448:	1080fa30 	cmpltui	r2,r2,1000
 801644c:	1000021e 	bne	r2,zero,8016458 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 8016450:	008014c4 	movi	r2,83
 8016454:	00002406 	br	80164e8 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 8016458:	e0bffb03 	ldbu	r2,-20(fp)
 801645c:	10c38424 	muli	r3,r2,3600
 8016460:	e0bffc03 	ldbu	r2,-16(fp)
 8016464:	10800f24 	muli	r2,r2,60
 8016468:	1887883a 	add	r3,r3,r2
 801646c:	e0bffd03 	ldbu	r2,-12(fp)
 8016470:	1885883a 	add	r2,r3,r2
 8016474:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 8016478:	e0bffe0b 	ldhu	r2,-8(fp)
 801647c:	1080fa24 	muli	r2,r2,1000
 8016480:	0140fa04 	movi	r5,1000
 8016484:	1009883a 	mov	r4,r2
 8016488:	800a8a40 	call	800a8a4 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 801648c:	8085883a 	add	r2,r16,r2
 8016490:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 8016494:	e0bffa17 	ldw	r2,-24(fp)
 8016498:	1004d43a 	srli	r2,r2,16
 801649c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 80164a0:	e0bffa17 	ldw	r2,-24(fp)
 80164a4:	10bfffcc 	andi	r2,r2,65535
 80164a8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 80164ac:	e0bffa17 	ldw	r2,-24(fp)
 80164b0:	10bfffcc 	andi	r2,r2,65535
 80164b4:	1009883a 	mov	r4,r2
 80164b8:	80162a80 	call	80162a8 <OSTimeDly>
    while (loops > 0) {
 80164bc:	00000706 	br	80164dc <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 80164c0:	01200014 	movui	r4,32768
 80164c4:	80162a80 	call	80162a8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 80164c8:	01200014 	movui	r4,32768
 80164cc:	80162a80 	call	80162a8 <OSTimeDly>
        loops--;
 80164d0:	e0bff90b 	ldhu	r2,-28(fp)
 80164d4:	10bfffc4 	addi	r2,r2,-1
 80164d8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 80164dc:	e0bff90b 	ldhu	r2,-28(fp)
 80164e0:	103ff71e 	bne	r2,zero,80164c0 <__alt_data_end+0xf80164c0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 80164e4:	0005883a 	mov	r2,zero
}
 80164e8:	e6ffff04 	addi	sp,fp,-4
 80164ec:	dfc00217 	ldw	ra,8(sp)
 80164f0:	df000117 	ldw	fp,4(sp)
 80164f4:	dc000017 	ldw	r16,0(sp)
 80164f8:	dec00304 	addi	sp,sp,12
 80164fc:	f800283a 	ret

08016500 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 8016500:	defff504 	addi	sp,sp,-44
 8016504:	dfc00a15 	stw	ra,40(sp)
 8016508:	df000915 	stw	fp,36(sp)
 801650c:	df000904 	addi	fp,sp,36
 8016510:	2005883a 	mov	r2,r4
 8016514:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8016518:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 801651c:	e0bfff03 	ldbu	r2,-4(fp)
 8016520:	10800530 	cmpltui	r2,r2,20
 8016524:	1000021e 	bne	r2,zero,8016530 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 8016528:	00800a84 	movi	r2,42
 801652c:	00006406 	br	80166c0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016530:	0005303a 	rdctl	r2,status
 8016534:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016538:	e0fffe17 	ldw	r3,-8(fp)
 801653c:	00bfff84 	movi	r2,-2
 8016540:	1884703a 	and	r2,r3,r2
 8016544:	1001703a 	wrctl	status,r2
  
  return context;
 8016548:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 801654c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 8016550:	e0ffff03 	ldbu	r3,-4(fp)
 8016554:	008200b4 	movhi	r2,2050
 8016558:	108f9c04 	addi	r2,r2,15984
 801655c:	18c7883a 	add	r3,r3,r3
 8016560:	18c7883a 	add	r3,r3,r3
 8016564:	10c5883a 	add	r2,r2,r3
 8016568:	10800017 	ldw	r2,0(r2)
 801656c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 8016570:	e0bff917 	ldw	r2,-28(fp)
 8016574:	1000061e 	bne	r2,zero,8016590 <OSTimeDlyResume+0x90>
 8016578:	e0bff717 	ldw	r2,-36(fp)
 801657c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016580:	e0bff817 	ldw	r2,-32(fp)
 8016584:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8016588:	008010c4 	movi	r2,67
 801658c:	00004c06 	br	80166c0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8016590:	e0bff917 	ldw	r2,-28(fp)
 8016594:	10800058 	cmpnei	r2,r2,1
 8016598:	1000061e 	bne	r2,zero,80165b4 <OSTimeDlyResume+0xb4>
 801659c:	e0bff717 	ldw	r2,-36(fp)
 80165a0:	e0bffa15 	stw	r2,-24(fp)
 80165a4:	e0bffa17 	ldw	r2,-24(fp)
 80165a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 80165ac:	008010c4 	movi	r2,67
 80165b0:	00004306 	br	80166c0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 80165b4:	e0bff917 	ldw	r2,-28(fp)
 80165b8:	10800b8b 	ldhu	r2,46(r2)
 80165bc:	10bfffcc 	andi	r2,r2,65535
 80165c0:	1000061e 	bne	r2,zero,80165dc <OSTimeDlyResume+0xdc>
 80165c4:	e0bff717 	ldw	r2,-36(fp)
 80165c8:	e0bffb15 	stw	r2,-20(fp)
 80165cc:	e0bffb17 	ldw	r2,-20(fp)
 80165d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 80165d4:	00801404 	movi	r2,80
 80165d8:	00003906 	br	80166c0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 80165dc:	e0bff917 	ldw	r2,-28(fp)
 80165e0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 80165e4:	e0bff917 	ldw	r2,-28(fp)
 80165e8:	10800c03 	ldbu	r2,48(r2)
 80165ec:	10803fcc 	andi	r2,r2,255
 80165f0:	10800dcc 	andi	r2,r2,55
 80165f4:	10000b26 	beq	r2,zero,8016624 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 80165f8:	e0bff917 	ldw	r2,-28(fp)
 80165fc:	10c00c03 	ldbu	r3,48(r2)
 8016600:	00bff204 	movi	r2,-56
 8016604:	1884703a 	and	r2,r3,r2
 8016608:	1007883a 	mov	r3,r2
 801660c:	e0bff917 	ldw	r2,-28(fp)
 8016610:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 8016614:	e0bff917 	ldw	r2,-28(fp)
 8016618:	00c00044 	movi	r3,1
 801661c:	10c00c45 	stb	r3,49(r2)
 8016620:	00000206 	br	801662c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 8016624:	e0bff917 	ldw	r2,-28(fp)
 8016628:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 801662c:	e0bff917 	ldw	r2,-28(fp)
 8016630:	10800c03 	ldbu	r2,48(r2)
 8016634:	10803fcc 	andi	r2,r2,255
 8016638:	1080020c 	andi	r2,r2,8
 801663c:	10001b1e 	bne	r2,zero,80166ac <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 8016640:	e0bff917 	ldw	r2,-28(fp)
 8016644:	10c00d83 	ldbu	r3,54(r2)
 8016648:	d0a73503 	ldbu	r2,-25388(gp)
 801664c:	1884b03a 	or	r2,r3,r2
 8016650:	d0a73505 	stb	r2,-25388(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8016654:	e0bff917 	ldw	r2,-28(fp)
 8016658:	10800d03 	ldbu	r2,52(r2)
 801665c:	10c03fcc 	andi	r3,r2,255
 8016660:	e0bff917 	ldw	r2,-28(fp)
 8016664:	10800d03 	ldbu	r2,52(r2)
 8016668:	11003fcc 	andi	r4,r2,255
 801666c:	d0a73544 	addi	r2,gp,-25387
 8016670:	2085883a 	add	r2,r4,r2
 8016674:	11000003 	ldbu	r4,0(r2)
 8016678:	e0bff917 	ldw	r2,-28(fp)
 801667c:	10800d43 	ldbu	r2,53(r2)
 8016680:	2084b03a 	or	r2,r4,r2
 8016684:	1009883a 	mov	r4,r2
 8016688:	d0a73544 	addi	r2,gp,-25387
 801668c:	1885883a 	add	r2,r3,r2
 8016690:	11000005 	stb	r4,0(r2)
 8016694:	e0bff717 	ldw	r2,-36(fp)
 8016698:	e0bffc15 	stw	r2,-16(fp)
 801669c:	e0bffc17 	ldw	r2,-16(fp)
 80166a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 80166a4:	800f7f40 	call	800f7f4 <OS_Sched>
 80166a8:	00000406 	br	80166bc <OSTimeDlyResume+0x1bc>
 80166ac:	e0bff717 	ldw	r2,-36(fp)
 80166b0:	e0bffd15 	stw	r2,-12(fp)
 80166b4:	e0bffd17 	ldw	r2,-12(fp)
 80166b8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 80166bc:	0005883a 	mov	r2,zero
}
 80166c0:	e037883a 	mov	sp,fp
 80166c4:	dfc00117 	ldw	ra,4(sp)
 80166c8:	df000017 	ldw	fp,0(sp)
 80166cc:	dec00204 	addi	sp,sp,8
 80166d0:	f800283a 	ret

080166d4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 80166d4:	defffb04 	addi	sp,sp,-20
 80166d8:	df000415 	stw	fp,16(sp)
 80166dc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80166e0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80166e4:	0005303a 	rdctl	r2,status
 80166e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80166ec:	e0fffe17 	ldw	r3,-8(fp)
 80166f0:	00bfff84 	movi	r2,-2
 80166f4:	1884703a 	and	r2,r3,r2
 80166f8:	1001703a 	wrctl	status,r2
  
  return context;
 80166fc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 8016700:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 8016704:	d0a73917 	ldw	r2,-25372(gp)
 8016708:	e0bffd15 	stw	r2,-12(fp)
 801670c:	e0bffc17 	ldw	r2,-16(fp)
 8016710:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016714:	e0bfff17 	ldw	r2,-4(fp)
 8016718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 801671c:	e0bffd17 	ldw	r2,-12(fp)
}
 8016720:	e037883a 	mov	sp,fp
 8016724:	df000017 	ldw	fp,0(sp)
 8016728:	dec00104 	addi	sp,sp,4
 801672c:	f800283a 	ret

08016730 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 8016730:	defffb04 	addi	sp,sp,-20
 8016734:	df000415 	stw	fp,16(sp)
 8016738:	df000404 	addi	fp,sp,16
 801673c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8016740:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016744:	0005303a 	rdctl	r2,status
 8016748:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801674c:	e0fffd17 	ldw	r3,-12(fp)
 8016750:	00bfff84 	movi	r2,-2
 8016754:	1884703a 	and	r2,r3,r2
 8016758:	1001703a 	wrctl	status,r2
  
  return context;
 801675c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 8016760:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 8016764:	e0bfff17 	ldw	r2,-4(fp)
 8016768:	d0a73915 	stw	r2,-25372(gp)
 801676c:	e0bffc17 	ldw	r2,-16(fp)
 8016770:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016774:	e0bffe17 	ldw	r2,-8(fp)
 8016778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 801677c:	0001883a 	nop
 8016780:	e037883a 	mov	sp,fp
 8016784:	df000017 	ldw	fp,0(sp)
 8016788:	dec00104 	addi	sp,sp,4
 801678c:	f800283a 	ret

08016790 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8016790:	defffd04 	addi	sp,sp,-12
 8016794:	dfc00215 	stw	ra,8(sp)
 8016798:	df000115 	stw	fp,4(sp)
 801679c:	df000104 	addi	fp,sp,4
 80167a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80167a4:	d1600804 	addi	r5,gp,-32736
 80167a8:	e13fff17 	ldw	r4,-4(fp)
 80167ac:	8017d3c0 	call	8017d3c <alt_dev_llist_insert>
}
 80167b0:	e037883a 	mov	sp,fp
 80167b4:	dfc00117 	ldw	ra,4(sp)
 80167b8:	df000017 	ldw	fp,0(sp)
 80167bc:	dec00204 	addi	sp,sp,8
 80167c0:	f800283a 	ret

080167c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80167c4:	defffd04 	addi	sp,sp,-12
 80167c8:	dfc00215 	stw	ra,8(sp)
 80167cc:	df000115 	stw	fp,4(sp)
 80167d0:	df000104 	addi	fp,sp,4
 80167d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80167d8:	80185380 	call	8018538 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80167dc:	00800044 	movi	r2,1
 80167e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80167e4:	0001883a 	nop
 80167e8:	e037883a 	mov	sp,fp
 80167ec:	dfc00117 	ldw	ra,4(sp)
 80167f0:	df000017 	ldw	fp,0(sp)
 80167f4:	dec00204 	addi	sp,sp,8
 80167f8:	f800283a 	ret

080167fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80167fc:	defffe04 	addi	sp,sp,-8
 8016800:	dfc00115 	stw	ra,4(sp)
 8016804:	df000015 	stw	fp,0(sp)
 8016808:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
 801680c:	01c0fa04 	movi	r7,1000
 8016810:	01800044 	movi	r6,1
 8016814:	000b883a 	mov	r5,zero
 8016818:	01000834 	movhi	r4,32
 801681c:	21043804 	addi	r4,r4,4320
 8016820:	801761c0 	call	801761c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8016824:	018000c4 	movi	r6,3
 8016828:	000b883a 	mov	r5,zero
 801682c:	010200b4 	movhi	r4,2050
 8016830:	21278204 	addi	r4,r4,-25080
 8016834:	80169dc0 	call	80169dc <altera_avalon_jtag_uart_init>
 8016838:	010200b4 	movhi	r4,2050
 801683c:	21277804 	addi	r4,r4,-25120
 8016840:	80167900 	call	8016790 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8016844:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
 8016848:	010200b4 	movhi	r4,2050
 801684c:	212b9304 	addi	r4,r4,-20916
 8016850:	801774c0 	call	801774c <alt_up_character_lcd_init>
 8016854:	010200b4 	movhi	r4,2050
 8016858:	212b9304 	addi	r4,r4,-20916
 801685c:	80167900 	call	8016790 <alt_dev_reg>
}
 8016860:	0001883a 	nop
 8016864:	e037883a 	mov	sp,fp
 8016868:	dfc00117 	ldw	ra,4(sp)
 801686c:	df000017 	ldw	fp,0(sp)
 8016870:	dec00204 	addi	sp,sp,8
 8016874:	f800283a 	ret

08016878 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8016878:	defffa04 	addi	sp,sp,-24
 801687c:	dfc00515 	stw	ra,20(sp)
 8016880:	df000415 	stw	fp,16(sp)
 8016884:	df000404 	addi	fp,sp,16
 8016888:	e13ffd15 	stw	r4,-12(fp)
 801688c:	e17ffe15 	stw	r5,-8(fp)
 8016890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016894:	e0bffd17 	ldw	r2,-12(fp)
 8016898:	10800017 	ldw	r2,0(r2)
 801689c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80168a0:	e0bffc17 	ldw	r2,-16(fp)
 80168a4:	10c00a04 	addi	r3,r2,40
 80168a8:	e0bffd17 	ldw	r2,-12(fp)
 80168ac:	10800217 	ldw	r2,8(r2)
 80168b0:	100f883a 	mov	r7,r2
 80168b4:	e1bfff17 	ldw	r6,-4(fp)
 80168b8:	e17ffe17 	ldw	r5,-8(fp)
 80168bc:	1809883a 	mov	r4,r3
 80168c0:	80170240 	call	8017024 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80168c4:	e037883a 	mov	sp,fp
 80168c8:	dfc00117 	ldw	ra,4(sp)
 80168cc:	df000017 	ldw	fp,0(sp)
 80168d0:	dec00204 	addi	sp,sp,8
 80168d4:	f800283a 	ret

080168d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80168d8:	defffa04 	addi	sp,sp,-24
 80168dc:	dfc00515 	stw	ra,20(sp)
 80168e0:	df000415 	stw	fp,16(sp)
 80168e4:	df000404 	addi	fp,sp,16
 80168e8:	e13ffd15 	stw	r4,-12(fp)
 80168ec:	e17ffe15 	stw	r5,-8(fp)
 80168f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80168f4:	e0bffd17 	ldw	r2,-12(fp)
 80168f8:	10800017 	ldw	r2,0(r2)
 80168fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8016900:	e0bffc17 	ldw	r2,-16(fp)
 8016904:	10c00a04 	addi	r3,r2,40
 8016908:	e0bffd17 	ldw	r2,-12(fp)
 801690c:	10800217 	ldw	r2,8(r2)
 8016910:	100f883a 	mov	r7,r2
 8016914:	e1bfff17 	ldw	r6,-4(fp)
 8016918:	e17ffe17 	ldw	r5,-8(fp)
 801691c:	1809883a 	mov	r4,r3
 8016920:	80172e00 	call	80172e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8016924:	e037883a 	mov	sp,fp
 8016928:	dfc00117 	ldw	ra,4(sp)
 801692c:	df000017 	ldw	fp,0(sp)
 8016930:	dec00204 	addi	sp,sp,8
 8016934:	f800283a 	ret

08016938 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8016938:	defffc04 	addi	sp,sp,-16
 801693c:	dfc00315 	stw	ra,12(sp)
 8016940:	df000215 	stw	fp,8(sp)
 8016944:	df000204 	addi	fp,sp,8
 8016948:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801694c:	e0bfff17 	ldw	r2,-4(fp)
 8016950:	10800017 	ldw	r2,0(r2)
 8016954:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8016958:	e0bffe17 	ldw	r2,-8(fp)
 801695c:	10c00a04 	addi	r3,r2,40
 8016960:	e0bfff17 	ldw	r2,-4(fp)
 8016964:	10800217 	ldw	r2,8(r2)
 8016968:	100b883a 	mov	r5,r2
 801696c:	1809883a 	mov	r4,r3
 8016970:	8016ecc0 	call	8016ecc <altera_avalon_jtag_uart_close>
}
 8016974:	e037883a 	mov	sp,fp
 8016978:	dfc00117 	ldw	ra,4(sp)
 801697c:	df000017 	ldw	fp,0(sp)
 8016980:	dec00204 	addi	sp,sp,8
 8016984:	f800283a 	ret

08016988 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8016988:	defffa04 	addi	sp,sp,-24
 801698c:	dfc00515 	stw	ra,20(sp)
 8016990:	df000415 	stw	fp,16(sp)
 8016994:	df000404 	addi	fp,sp,16
 8016998:	e13ffd15 	stw	r4,-12(fp)
 801699c:	e17ffe15 	stw	r5,-8(fp)
 80169a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80169a4:	e0bffd17 	ldw	r2,-12(fp)
 80169a8:	10800017 	ldw	r2,0(r2)
 80169ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80169b0:	e0bffc17 	ldw	r2,-16(fp)
 80169b4:	10800a04 	addi	r2,r2,40
 80169b8:	e1bfff17 	ldw	r6,-4(fp)
 80169bc:	e17ffe17 	ldw	r5,-8(fp)
 80169c0:	1009883a 	mov	r4,r2
 80169c4:	8016f340 	call	8016f34 <altera_avalon_jtag_uart_ioctl>
}
 80169c8:	e037883a 	mov	sp,fp
 80169cc:	dfc00117 	ldw	ra,4(sp)
 80169d0:	df000017 	ldw	fp,0(sp)
 80169d4:	dec00204 	addi	sp,sp,8
 80169d8:	f800283a 	ret

080169dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80169dc:	defff104 	addi	sp,sp,-60
 80169e0:	dfc00e15 	stw	ra,56(sp)
 80169e4:	df000d15 	stw	fp,52(sp)
 80169e8:	df000d04 	addi	fp,sp,52
 80169ec:	e13ff915 	stw	r4,-28(fp)
 80169f0:	e17ffa15 	stw	r5,-24(fp)
 80169f4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 80169f8:	e0bff917 	ldw	r2,-28(fp)
 80169fc:	10800c04 	addi	r2,r2,48
 8016a00:	e0bff415 	stw	r2,-48(fp)
 8016a04:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 8016a08:	e0bff80b 	ldhu	r2,-32(fp)
 8016a0c:	e0fff884 	addi	r3,fp,-30
 8016a10:	180b883a 	mov	r5,r3
 8016a14:	1009883a 	mov	r4,r2
 8016a18:	80103600 	call	8010360 <OSFlagCreate>
 8016a1c:	1007883a 	mov	r3,r2
 8016a20:	e0bff417 	ldw	r2,-48(fp)
 8016a24:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 8016a28:	e0bff917 	ldw	r2,-28(fp)
 8016a2c:	10800a04 	addi	r2,r2,40
 8016a30:	e0bff515 	stw	r2,-44(fp)
 8016a34:	00800044 	movi	r2,1
 8016a38:	e0bff78d 	sth	r2,-34(fp)
 8016a3c:	e0bff78b 	ldhu	r2,-34(fp)
 8016a40:	1009883a 	mov	r4,r2
 8016a44:	801418c0 	call	801418c <OSSemCreate>
 8016a48:	1007883a 	mov	r3,r2
 8016a4c:	e0bff517 	ldw	r2,-44(fp)
 8016a50:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 8016a54:	e0bff917 	ldw	r2,-28(fp)
 8016a58:	10800b04 	addi	r2,r2,44
 8016a5c:	e0bff615 	stw	r2,-40(fp)
 8016a60:	00800044 	movi	r2,1
 8016a64:	e0bff70d 	sth	r2,-36(fp)
 8016a68:	e0bff70b 	ldhu	r2,-36(fp)
 8016a6c:	1009883a 	mov	r4,r2
 8016a70:	801418c0 	call	801418c <OSSemCreate>
 8016a74:	1007883a 	mov	r3,r2
 8016a78:	e0bff617 	ldw	r2,-40(fp)
 8016a7c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016a80:	e0bff917 	ldw	r2,-28(fp)
 8016a84:	00c00044 	movi	r3,1
 8016a88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016a8c:	e0bff917 	ldw	r2,-28(fp)
 8016a90:	10800017 	ldw	r2,0(r2)
 8016a94:	10800104 	addi	r2,r2,4
 8016a98:	1007883a 	mov	r3,r2
 8016a9c:	e0bff917 	ldw	r2,-28(fp)
 8016aa0:	10800817 	ldw	r2,32(r2)
 8016aa4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8016aa8:	e0bffa17 	ldw	r2,-24(fp)
 8016aac:	e0fffb17 	ldw	r3,-20(fp)
 8016ab0:	d8000015 	stw	zero,0(sp)
 8016ab4:	e1fff917 	ldw	r7,-28(fp)
 8016ab8:	01820074 	movhi	r6,2049
 8016abc:	319ac904 	addi	r6,r6,27428
 8016ac0:	180b883a 	mov	r5,r3
 8016ac4:	1009883a 	mov	r4,r2
 8016ac8:	800d1ec0 	call	800d1ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8016acc:	e0bff917 	ldw	r2,-28(fp)
 8016ad0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8016ad4:	e0bff917 	ldw	r2,-28(fp)
 8016ad8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016adc:	d0e73e17 	ldw	r3,-25352(gp)
 8016ae0:	e1fff917 	ldw	r7,-28(fp)
 8016ae4:	01820074 	movhi	r6,2049
 8016ae8:	319b7204 	addi	r6,r6,28104
 8016aec:	180b883a 	mov	r5,r3
 8016af0:	1009883a 	mov	r4,r2
 8016af4:	8017b8c0 	call	8017b8c <alt_alarm_start>
 8016af8:	1000040e 	bge	r2,zero,8016b0c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8016afc:	e0fff917 	ldw	r3,-28(fp)
 8016b00:	00a00034 	movhi	r2,32768
 8016b04:	10bfffc4 	addi	r2,r2,-1
 8016b08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8016b0c:	0001883a 	nop
 8016b10:	e037883a 	mov	sp,fp
 8016b14:	dfc00117 	ldw	ra,4(sp)
 8016b18:	df000017 	ldw	fp,0(sp)
 8016b1c:	dec00204 	addi	sp,sp,8
 8016b20:	f800283a 	ret

08016b24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016b24:	defff204 	addi	sp,sp,-56
 8016b28:	dfc00d15 	stw	ra,52(sp)
 8016b2c:	df000c15 	stw	fp,48(sp)
 8016b30:	df000c04 	addi	fp,sp,48
 8016b34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8016b38:	e0bfff17 	ldw	r2,-4(fp)
 8016b3c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 8016b40:	e0bff617 	ldw	r2,-40(fp)
 8016b44:	10800017 	ldw	r2,0(r2)
 8016b48:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016b4c:	e0bff717 	ldw	r2,-36(fp)
 8016b50:	10800104 	addi	r2,r2,4
 8016b54:	10800037 	ldwio	r2,0(r2)
 8016b58:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8016b5c:	e0bff817 	ldw	r2,-32(fp)
 8016b60:	1080c00c 	andi	r2,r2,768
 8016b64:	10009126 	beq	r2,zero,8016dac <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016b68:	e0bff817 	ldw	r2,-32(fp)
 8016b6c:	1080400c 	andi	r2,r2,256
 8016b70:	10004726 	beq	r2,zero,8016c90 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8016b74:	00800074 	movhi	r2,1
 8016b78:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016b7c:	e0bff617 	ldw	r2,-40(fp)
 8016b80:	10800d17 	ldw	r2,52(r2)
 8016b84:	10800044 	addi	r2,r2,1
 8016b88:	1081ffcc 	andi	r2,r2,2047
 8016b8c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 8016b90:	e0bff617 	ldw	r2,-40(fp)
 8016b94:	10c00e17 	ldw	r3,56(r2)
 8016b98:	e0bff917 	ldw	r2,-28(fp)
 8016b9c:	18802726 	beq	r3,r2,8016c3c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016ba0:	e0bff717 	ldw	r2,-36(fp)
 8016ba4:	10800037 	ldwio	r2,0(r2)
 8016ba8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016bac:	e0bff417 	ldw	r2,-48(fp)
 8016bb0:	10a0000c 	andi	r2,r2,32768
 8016bb4:	10002326 	beq	r2,zero,8016c44 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016bb8:	e0bff617 	ldw	r2,-40(fp)
 8016bbc:	10800d17 	ldw	r2,52(r2)
 8016bc0:	e0fff417 	ldw	r3,-48(fp)
 8016bc4:	1809883a 	mov	r4,r3
 8016bc8:	e0fff617 	ldw	r3,-40(fp)
 8016bcc:	1885883a 	add	r2,r3,r2
 8016bd0:	10801104 	addi	r2,r2,68
 8016bd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016bd8:	e0bff617 	ldw	r2,-40(fp)
 8016bdc:	10800d17 	ldw	r2,52(r2)
 8016be0:	10800044 	addi	r2,r2,1
 8016be4:	10c1ffcc 	andi	r3,r2,2047
 8016be8:	e0bff617 	ldw	r2,-40(fp)
 8016bec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 8016bf0:	e0bff617 	ldw	r2,-40(fp)
 8016bf4:	10800c17 	ldw	r2,48(r2)
 8016bf8:	e0bffb15 	stw	r2,-20(fp)
 8016bfc:	00800044 	movi	r2,1
 8016c00:	e0bffc0d 	sth	r2,-16(fp)
 8016c04:	00800044 	movi	r2,1
 8016c08:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 8016c0c:	d0a72943 	ldbu	r2,-25435(gp)
 8016c10:	10803fcc 	andi	r2,r2,255
 8016c14:	103fd926 	beq	r2,zero,8016b7c <__alt_data_end+0xf8016b7c>
  {
    OSFlagPost (group, flags, opt, &err);
 8016c18:	e0bffc0b 	ldhu	r2,-16(fp)
 8016c1c:	e0fffc83 	ldbu	r3,-14(fp)
 8016c20:	e13ffdc4 	addi	r4,fp,-9
 8016c24:	200f883a 	mov	r7,r4
 8016c28:	180d883a 	mov	r6,r3
 8016c2c:	100b883a 	mov	r5,r2
 8016c30:	e13ffb17 	ldw	r4,-20(fp)
 8016c34:	8010f3c0 	call	8010f3c <OSFlagPost>
      }
 8016c38:	003fd006 	br	8016b7c <__alt_data_end+0xf8016b7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8016c3c:	0001883a 	nop
 8016c40:	00000106 	br	8016c48 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8016c44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016c48:	e0bff417 	ldw	r2,-48(fp)
 8016c4c:	10bfffec 	andhi	r2,r2,65535
 8016c50:	10000f26 	beq	r2,zero,8016c90 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016c54:	e0bff617 	ldw	r2,-40(fp)
 8016c58:	10c00817 	ldw	r3,32(r2)
 8016c5c:	00bfff84 	movi	r2,-2
 8016c60:	1886703a 	and	r3,r3,r2
 8016c64:	e0bff617 	ldw	r2,-40(fp)
 8016c68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016c6c:	e0bff717 	ldw	r2,-36(fp)
 8016c70:	10800104 	addi	r2,r2,4
 8016c74:	1007883a 	mov	r3,r2
 8016c78:	e0bff617 	ldw	r2,-40(fp)
 8016c7c:	10800817 	ldw	r2,32(r2)
 8016c80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016c84:	e0bff717 	ldw	r2,-36(fp)
 8016c88:	10800104 	addi	r2,r2,4
 8016c8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8016c90:	e0bff817 	ldw	r2,-32(fp)
 8016c94:	1080800c 	andi	r2,r2,512
 8016c98:	103fac26 	beq	r2,zero,8016b4c <__alt_data_end+0xf8016b4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8016c9c:	e0bff817 	ldw	r2,-32(fp)
 8016ca0:	1004d43a 	srli	r2,r2,16
 8016ca4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016ca8:	00002606 	br	8016d44 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8016cac:	e0bff717 	ldw	r2,-36(fp)
 8016cb0:	e0fff617 	ldw	r3,-40(fp)
 8016cb4:	18c01017 	ldw	r3,64(r3)
 8016cb8:	e13ff617 	ldw	r4,-40(fp)
 8016cbc:	20c7883a 	add	r3,r4,r3
 8016cc0:	18c21104 	addi	r3,r3,2116
 8016cc4:	18c00003 	ldbu	r3,0(r3)
 8016cc8:	18c03fcc 	andi	r3,r3,255
 8016ccc:	18c0201c 	xori	r3,r3,128
 8016cd0:	18ffe004 	addi	r3,r3,-128
 8016cd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016cd8:	e0bff617 	ldw	r2,-40(fp)
 8016cdc:	10801017 	ldw	r2,64(r2)
 8016ce0:	10800044 	addi	r2,r2,1
 8016ce4:	10c1ffcc 	andi	r3,r2,2047
 8016ce8:	e0bff617 	ldw	r2,-40(fp)
 8016cec:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 8016cf0:	e0bff617 	ldw	r2,-40(fp)
 8016cf4:	10800c17 	ldw	r2,48(r2)
 8016cf8:	e0bffa15 	stw	r2,-24(fp)
 8016cfc:	00800084 	movi	r2,2
 8016d00:	e0bffd0d 	sth	r2,-12(fp)
 8016d04:	00800044 	movi	r2,1
 8016d08:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 8016d0c:	d0a72943 	ldbu	r2,-25435(gp)
 8016d10:	10803fcc 	andi	r2,r2,255
 8016d14:	10000826 	beq	r2,zero,8016d38 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 8016d18:	e0bffd0b 	ldhu	r2,-12(fp)
 8016d1c:	e0fffd83 	ldbu	r3,-10(fp)
 8016d20:	e13ffe04 	addi	r4,fp,-8
 8016d24:	200f883a 	mov	r7,r4
 8016d28:	180d883a 	mov	r6,r3
 8016d2c:	100b883a 	mov	r5,r2
 8016d30:	e13ffa17 	ldw	r4,-24(fp)
 8016d34:	8010f3c0 	call	8010f3c <OSFlagPost>

        space--;
 8016d38:	e0bff517 	ldw	r2,-44(fp)
 8016d3c:	10bfffc4 	addi	r2,r2,-1
 8016d40:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016d44:	e0bff517 	ldw	r2,-44(fp)
 8016d48:	10000526 	beq	r2,zero,8016d60 <altera_avalon_jtag_uart_irq+0x23c>
 8016d4c:	e0bff617 	ldw	r2,-40(fp)
 8016d50:	10c01017 	ldw	r3,64(r2)
 8016d54:	e0bff617 	ldw	r2,-40(fp)
 8016d58:	10800f17 	ldw	r2,60(r2)
 8016d5c:	18bfd31e 	bne	r3,r2,8016cac <__alt_data_end+0xf8016cac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8016d60:	e0bff517 	ldw	r2,-44(fp)
 8016d64:	103f7926 	beq	r2,zero,8016b4c <__alt_data_end+0xf8016b4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016d68:	e0bff617 	ldw	r2,-40(fp)
 8016d6c:	10c00817 	ldw	r3,32(r2)
 8016d70:	00bfff44 	movi	r2,-3
 8016d74:	1886703a 	and	r3,r3,r2
 8016d78:	e0bff617 	ldw	r2,-40(fp)
 8016d7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016d80:	e0bff617 	ldw	r2,-40(fp)
 8016d84:	10800017 	ldw	r2,0(r2)
 8016d88:	10800104 	addi	r2,r2,4
 8016d8c:	1007883a 	mov	r3,r2
 8016d90:	e0bff617 	ldw	r2,-40(fp)
 8016d94:	10800817 	ldw	r2,32(r2)
 8016d98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016d9c:	e0bff717 	ldw	r2,-36(fp)
 8016da0:	10800104 	addi	r2,r2,4
 8016da4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016da8:	003f6806 	br	8016b4c <__alt_data_end+0xf8016b4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8016dac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8016db0:	0001883a 	nop
 8016db4:	e037883a 	mov	sp,fp
 8016db8:	dfc00117 	ldw	ra,4(sp)
 8016dbc:	df000017 	ldw	fp,0(sp)
 8016dc0:	dec00204 	addi	sp,sp,8
 8016dc4:	f800283a 	ret

08016dc8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8016dc8:	defff904 	addi	sp,sp,-28
 8016dcc:	dfc00615 	stw	ra,24(sp)
 8016dd0:	df000515 	stw	fp,20(sp)
 8016dd4:	df000504 	addi	fp,sp,20
 8016dd8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8016ddc:	e0bfff17 	ldw	r2,-4(fp)
 8016de0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8016de4:	e0bffb17 	ldw	r2,-20(fp)
 8016de8:	10800017 	ldw	r2,0(r2)
 8016dec:	10800104 	addi	r2,r2,4
 8016df0:	10800037 	ldwio	r2,0(r2)
 8016df4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8016df8:	e0bffc17 	ldw	r2,-16(fp)
 8016dfc:	1081000c 	andi	r2,r2,1024
 8016e00:	10000b26 	beq	r2,zero,8016e30 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8016e04:	e0bffb17 	ldw	r2,-20(fp)
 8016e08:	10800017 	ldw	r2,0(r2)
 8016e0c:	10800104 	addi	r2,r2,4
 8016e10:	1007883a 	mov	r3,r2
 8016e14:	e0bffb17 	ldw	r2,-20(fp)
 8016e18:	10800817 	ldw	r2,32(r2)
 8016e1c:	10810014 	ori	r2,r2,1024
 8016e20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016e24:	e0bffb17 	ldw	r2,-20(fp)
 8016e28:	10000915 	stw	zero,36(r2)
 8016e2c:	00002106 	br	8016eb4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016e30:	e0bffb17 	ldw	r2,-20(fp)
 8016e34:	10c00917 	ldw	r3,36(r2)
 8016e38:	00a00034 	movhi	r2,32768
 8016e3c:	10bfff04 	addi	r2,r2,-4
 8016e40:	10c01c36 	bltu	r2,r3,8016eb4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 8016e44:	e0bffb17 	ldw	r2,-20(fp)
 8016e48:	10800917 	ldw	r2,36(r2)
 8016e4c:	10c00044 	addi	r3,r2,1
 8016e50:	e0bffb17 	ldw	r2,-20(fp)
 8016e54:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 8016e58:	e0bffb17 	ldw	r2,-20(fp)
 8016e5c:	10c00917 	ldw	r3,36(r2)
 8016e60:	e0bffb17 	ldw	r2,-20(fp)
 8016e64:	10800117 	ldw	r2,4(r2)
 8016e68:	18801236 	bltu	r3,r2,8016eb4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 8016e6c:	e0bffb17 	ldw	r2,-20(fp)
 8016e70:	10800c17 	ldw	r2,48(r2)
 8016e74:	e0bffd15 	stw	r2,-12(fp)
 8016e78:	00800104 	movi	r2,4
 8016e7c:	e0bffe0d 	sth	r2,-8(fp)
 8016e80:	00800044 	movi	r2,1
 8016e84:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 8016e88:	d0a72943 	ldbu	r2,-25435(gp)
 8016e8c:	10803fcc 	andi	r2,r2,255
 8016e90:	10000826 	beq	r2,zero,8016eb4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 8016e94:	e0bffe0b 	ldhu	r2,-8(fp)
 8016e98:	e0fffe83 	ldbu	r3,-6(fp)
 8016e9c:	e13ffec4 	addi	r4,fp,-5
 8016ea0:	200f883a 	mov	r7,r4
 8016ea4:	180d883a 	mov	r6,r3
 8016ea8:	100b883a 	mov	r5,r2
 8016eac:	e13ffd17 	ldw	r4,-12(fp)
 8016eb0:	8010f3c0 	call	8010f3c <OSFlagPost>
 8016eb4:	d0a73e17 	ldw	r2,-25352(gp)
    }
  }

  return alt_ticks_per_second();
}
 8016eb8:	e037883a 	mov	sp,fp
 8016ebc:	dfc00117 	ldw	ra,4(sp)
 8016ec0:	df000017 	ldw	fp,0(sp)
 8016ec4:	dec00204 	addi	sp,sp,8
 8016ec8:	f800283a 	ret

08016ecc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8016ecc:	defffd04 	addi	sp,sp,-12
 8016ed0:	df000215 	stw	fp,8(sp)
 8016ed4:	df000204 	addi	fp,sp,8
 8016ed8:	e13ffe15 	stw	r4,-8(fp)
 8016edc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016ee0:	00000506 	br	8016ef8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8016ee4:	e0bfff17 	ldw	r2,-4(fp)
 8016ee8:	1090000c 	andi	r2,r2,16384
 8016eec:	10000226 	beq	r2,zero,8016ef8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016ef0:	00bffd44 	movi	r2,-11
 8016ef4:	00000b06 	br	8016f24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016ef8:	e0bffe17 	ldw	r2,-8(fp)
 8016efc:	10c01017 	ldw	r3,64(r2)
 8016f00:	e0bffe17 	ldw	r2,-8(fp)
 8016f04:	10800f17 	ldw	r2,60(r2)
 8016f08:	18800526 	beq	r3,r2,8016f20 <altera_avalon_jtag_uart_close+0x54>
 8016f0c:	e0bffe17 	ldw	r2,-8(fp)
 8016f10:	10c00917 	ldw	r3,36(r2)
 8016f14:	e0bffe17 	ldw	r2,-8(fp)
 8016f18:	10800117 	ldw	r2,4(r2)
 8016f1c:	18bff136 	bltu	r3,r2,8016ee4 <__alt_data_end+0xf8016ee4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016f20:	0005883a 	mov	r2,zero
}
 8016f24:	e037883a 	mov	sp,fp
 8016f28:	df000017 	ldw	fp,0(sp)
 8016f2c:	dec00104 	addi	sp,sp,4
 8016f30:	f800283a 	ret

08016f34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8016f34:	defffa04 	addi	sp,sp,-24
 8016f38:	df000515 	stw	fp,20(sp)
 8016f3c:	df000504 	addi	fp,sp,20
 8016f40:	e13ffd15 	stw	r4,-12(fp)
 8016f44:	e17ffe15 	stw	r5,-8(fp)
 8016f48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8016f4c:	00bff9c4 	movi	r2,-25
 8016f50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8016f54:	e0bffe17 	ldw	r2,-8(fp)
 8016f58:	10da8060 	cmpeqi	r3,r2,27137
 8016f5c:	1800031e 	bne	r3,zero,8016f6c <altera_avalon_jtag_uart_ioctl+0x38>
 8016f60:	109a80a0 	cmpeqi	r2,r2,27138
 8016f64:	1000181e 	bne	r2,zero,8016fc8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8016f68:	00002906 	br	8017010 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8016f6c:	e0bffd17 	ldw	r2,-12(fp)
 8016f70:	10c00117 	ldw	r3,4(r2)
 8016f74:	00a00034 	movhi	r2,32768
 8016f78:	10bfffc4 	addi	r2,r2,-1
 8016f7c:	18802126 	beq	r3,r2,8017004 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8016f80:	e0bfff17 	ldw	r2,-4(fp)
 8016f84:	10800017 	ldw	r2,0(r2)
 8016f88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8016f8c:	e0bffc17 	ldw	r2,-16(fp)
 8016f90:	10800090 	cmplti	r2,r2,2
 8016f94:	1000061e 	bne	r2,zero,8016fb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016f98:	e0fffc17 	ldw	r3,-16(fp)
 8016f9c:	00a00034 	movhi	r2,32768
 8016fa0:	10bfffc4 	addi	r2,r2,-1
 8016fa4:	18800226 	beq	r3,r2,8016fb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016fa8:	e0bffc17 	ldw	r2,-16(fp)
 8016fac:	00000206 	br	8016fb8 <altera_avalon_jtag_uart_ioctl+0x84>
 8016fb0:	00a00034 	movhi	r2,32768
 8016fb4:	10bfff84 	addi	r2,r2,-2
 8016fb8:	e0fffd17 	ldw	r3,-12(fp)
 8016fbc:	18800115 	stw	r2,4(r3)
      rc = 0;
 8016fc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016fc4:	00000f06 	br	8017004 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8016fc8:	e0bffd17 	ldw	r2,-12(fp)
 8016fcc:	10c00117 	ldw	r3,4(r2)
 8016fd0:	00a00034 	movhi	r2,32768
 8016fd4:	10bfffc4 	addi	r2,r2,-1
 8016fd8:	18800c26 	beq	r3,r2,801700c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8016fdc:	e0bffd17 	ldw	r2,-12(fp)
 8016fe0:	10c00917 	ldw	r3,36(r2)
 8016fe4:	e0bffd17 	ldw	r2,-12(fp)
 8016fe8:	10800117 	ldw	r2,4(r2)
 8016fec:	1885803a 	cmpltu	r2,r3,r2
 8016ff0:	10c03fcc 	andi	r3,r2,255
 8016ff4:	e0bfff17 	ldw	r2,-4(fp)
 8016ff8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8016ffc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8017000:	00000206 	br	801700c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8017004:	0001883a 	nop
 8017008:	00000106 	br	8017010 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 801700c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8017010:	e0bffb17 	ldw	r2,-20(fp)
}
 8017014:	e037883a 	mov	sp,fp
 8017018:	df000017 	ldw	fp,0(sp)
 801701c:	dec00104 	addi	sp,sp,4
 8017020:	f800283a 	ret

08017024 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8017024:	deffed04 	addi	sp,sp,-76
 8017028:	dfc01215 	stw	ra,72(sp)
 801702c:	df001115 	stw	fp,68(sp)
 8017030:	df001104 	addi	fp,sp,68
 8017034:	e13ffc15 	stw	r4,-16(fp)
 8017038:	e17ffd15 	stw	r5,-12(fp)
 801703c:	e1bffe15 	stw	r6,-8(fp)
 8017040:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8017044:	e0bffd17 	ldw	r2,-12(fp)
 8017048:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 801704c:	e0bffc17 	ldw	r2,-16(fp)
 8017050:	10800a17 	ldw	r2,40(r2)
 8017054:	e0bff815 	stw	r2,-32(fp)
 8017058:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 801705c:	e0bff90b 	ldhu	r2,-28(fp)
 8017060:	e0fffb04 	addi	r3,fp,-20
 8017064:	180d883a 	mov	r6,r3
 8017068:	100b883a 	mov	r5,r2
 801706c:	e13ff817 	ldw	r4,-32(fp)
 8017070:	80144a40 	call	80144a4 <OSSemPend>

  while (space > 0)
 8017074:	00006106 	br	80171fc <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8017078:	e0bffc17 	ldw	r2,-16(fp)
 801707c:	10800d17 	ldw	r2,52(r2)
 8017080:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 8017084:	e0bffc17 	ldw	r2,-16(fp)
 8017088:	10800e17 	ldw	r2,56(r2)
 801708c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 8017090:	e0fff317 	ldw	r3,-52(fp)
 8017094:	e0bff417 	ldw	r2,-48(fp)
 8017098:	18800536 	bltu	r3,r2,80170b0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 801709c:	e0fff317 	ldw	r3,-52(fp)
 80170a0:	e0bff417 	ldw	r2,-48(fp)
 80170a4:	1885c83a 	sub	r2,r3,r2
 80170a8:	e0bff115 	stw	r2,-60(fp)
 80170ac:	00000406 	br	80170c0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80170b0:	00c20004 	movi	r3,2048
 80170b4:	e0bff417 	ldw	r2,-48(fp)
 80170b8:	1885c83a 	sub	r2,r3,r2
 80170bc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 80170c0:	e0bff117 	ldw	r2,-60(fp)
 80170c4:	10001e26 	beq	r2,zero,8017140 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 80170c8:	e0fffe17 	ldw	r3,-8(fp)
 80170cc:	e0bff117 	ldw	r2,-60(fp)
 80170d0:	1880022e 	bgeu	r3,r2,80170dc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 80170d4:	e0bffe17 	ldw	r2,-8(fp)
 80170d8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80170dc:	e0bffc17 	ldw	r2,-16(fp)
 80170e0:	10c01104 	addi	r3,r2,68
 80170e4:	e0bff417 	ldw	r2,-48(fp)
 80170e8:	1885883a 	add	r2,r3,r2
 80170ec:	e1bff117 	ldw	r6,-60(fp)
 80170f0:	100b883a 	mov	r5,r2
 80170f4:	e13ff017 	ldw	r4,-64(fp)
 80170f8:	80061740 	call	8006174 <memcpy>
      ptr   += n;
 80170fc:	e0fff017 	ldw	r3,-64(fp)
 8017100:	e0bff117 	ldw	r2,-60(fp)
 8017104:	1885883a 	add	r2,r3,r2
 8017108:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 801710c:	e0fffe17 	ldw	r3,-8(fp)
 8017110:	e0bff117 	ldw	r2,-60(fp)
 8017114:	1885c83a 	sub	r2,r3,r2
 8017118:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801711c:	e0fff417 	ldw	r3,-48(fp)
 8017120:	e0bff117 	ldw	r2,-60(fp)
 8017124:	1885883a 	add	r2,r3,r2
 8017128:	10c1ffcc 	andi	r3,r2,2047
 801712c:	e0bffc17 	ldw	r2,-16(fp)
 8017130:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 8017134:	e0bffe17 	ldw	r2,-8(fp)
 8017138:	00bfcf16 	blt	zero,r2,8017078 <__alt_data_end+0xf8017078>
 801713c:	00000106 	br	8017144 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8017140:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8017144:	e0fff017 	ldw	r3,-64(fp)
 8017148:	e0bffd17 	ldw	r2,-12(fp)
 801714c:	18802e1e 	bne	r3,r2,8017208 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8017150:	e0bfff17 	ldw	r2,-4(fp)
 8017154:	1090000c 	andi	r2,r2,16384
 8017158:	10002d1e 	bne	r2,zero,8017210 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 801715c:	d0a72943 	ldbu	r2,-25435(gp)
 8017160:	10803fcc 	andi	r2,r2,255
 8017164:	10800058 	cmpnei	r2,r2,1
 8017168:	1000161e 	bne	r2,zero,80171c4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 801716c:	e0bffc17 	ldw	r2,-16(fp)
 8017170:	10800c17 	ldw	r2,48(r2)
 8017174:	e0bff215 	stw	r2,-56(fp)
 8017178:	00800144 	movi	r2,5
 801717c:	e0bff98d 	sth	r2,-26(fp)
 8017180:	00bfe0c4 	movi	r2,-125
 8017184:	e0bffa05 	stb	r2,-24(fp)
 8017188:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 801718c:	d0a72943 	ldbu	r2,-25435(gp)
 8017190:	10803fcc 	andi	r2,r2,255
 8017194:	10001526 	beq	r2,zero,80171ec <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 8017198:	e0fff98b 	ldhu	r3,-26(fp)
 801719c:	e13ffa03 	ldbu	r4,-24(fp)
 80171a0:	e17ffa8b 	ldhu	r5,-22(fp)
 80171a4:	e0bffb44 	addi	r2,fp,-19
 80171a8:	d8800015 	stw	r2,0(sp)
 80171ac:	280f883a 	mov	r7,r5
 80171b0:	200d883a 	mov	r6,r4
 80171b4:	180b883a 	mov	r5,r3
 80171b8:	e13ff217 	ldw	r4,-56(fp)
 80171bc:	80109240 	call	8010924 <OSFlagPend>
 80171c0:	00000a06 	br	80171ec <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80171c4:	0001883a 	nop
 80171c8:	e0bffc17 	ldw	r2,-16(fp)
 80171cc:	10c00d17 	ldw	r3,52(r2)
 80171d0:	e0bff317 	ldw	r2,-52(fp)
 80171d4:	1880051e 	bne	r3,r2,80171ec <altera_avalon_jtag_uart_read+0x1c8>
 80171d8:	e0bffc17 	ldw	r2,-16(fp)
 80171dc:	10c00917 	ldw	r3,36(r2)
 80171e0:	e0bffc17 	ldw	r2,-16(fp)
 80171e4:	10800117 	ldw	r2,4(r2)
 80171e8:	18bff736 	bltu	r3,r2,80171c8 <__alt_data_end+0xf80171c8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80171ec:	e0bffc17 	ldw	r2,-16(fp)
 80171f0:	10c00d17 	ldw	r3,52(r2)
 80171f4:	e0bff317 	ldw	r2,-52(fp)
 80171f8:	18800726 	beq	r3,r2,8017218 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80171fc:	e0bffe17 	ldw	r2,-8(fp)
 8017200:	00bf9d16 	blt	zero,r2,8017078 <__alt_data_end+0xf8017078>
 8017204:	00000506 	br	801721c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8017208:	0001883a 	nop
 801720c:	00000306 	br	801721c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8017210:	0001883a 	nop
 8017214:	00000106 	br	801721c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8017218:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 801721c:	e0bffc17 	ldw	r2,-16(fp)
 8017220:	10800a17 	ldw	r2,40(r2)
 8017224:	1009883a 	mov	r4,r2
 8017228:	801481c0 	call	801481c <OSSemPost>

  if (ptr != buffer)
 801722c:	e0fff017 	ldw	r3,-64(fp)
 8017230:	e0bffd17 	ldw	r2,-12(fp)
 8017234:	18801826 	beq	r3,r2,8017298 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017238:	0005303a 	rdctl	r2,status
 801723c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017240:	e0fff717 	ldw	r3,-36(fp)
 8017244:	00bfff84 	movi	r2,-2
 8017248:	1884703a 	and	r2,r3,r2
 801724c:	1001703a 	wrctl	status,r2
  
  return context;
 8017250:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8017254:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8017258:	e0bffc17 	ldw	r2,-16(fp)
 801725c:	10800817 	ldw	r2,32(r2)
 8017260:	10c00054 	ori	r3,r2,1
 8017264:	e0bffc17 	ldw	r2,-16(fp)
 8017268:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801726c:	e0bffc17 	ldw	r2,-16(fp)
 8017270:	10800017 	ldw	r2,0(r2)
 8017274:	10800104 	addi	r2,r2,4
 8017278:	1007883a 	mov	r3,r2
 801727c:	e0bffc17 	ldw	r2,-16(fp)
 8017280:	10800817 	ldw	r2,32(r2)
 8017284:	18800035 	stwio	r2,0(r3)
 8017288:	e0bff617 	ldw	r2,-40(fp)
 801728c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017290:	e0bff517 	ldw	r2,-44(fp)
 8017294:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8017298:	e0fff017 	ldw	r3,-64(fp)
 801729c:	e0bffd17 	ldw	r2,-12(fp)
 80172a0:	18800426 	beq	r3,r2,80172b4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 80172a4:	e0fff017 	ldw	r3,-64(fp)
 80172a8:	e0bffd17 	ldw	r2,-12(fp)
 80172ac:	1885c83a 	sub	r2,r3,r2
 80172b0:	00000606 	br	80172cc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 80172b4:	e0bfff17 	ldw	r2,-4(fp)
 80172b8:	1090000c 	andi	r2,r2,16384
 80172bc:	10000226 	beq	r2,zero,80172c8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 80172c0:	00bffd44 	movi	r2,-11
 80172c4:	00000106 	br	80172cc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 80172c8:	00bffec4 	movi	r2,-5
}
 80172cc:	e037883a 	mov	sp,fp
 80172d0:	dfc00117 	ldw	ra,4(sp)
 80172d4:	df000017 	ldw	fp,0(sp)
 80172d8:	dec00204 	addi	sp,sp,8
 80172dc:	f800283a 	ret

080172e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80172e0:	deffed04 	addi	sp,sp,-76
 80172e4:	dfc01215 	stw	ra,72(sp)
 80172e8:	df001115 	stw	fp,68(sp)
 80172ec:	df001104 	addi	fp,sp,68
 80172f0:	e13ffc15 	stw	r4,-16(fp)
 80172f4:	e17ffd15 	stw	r5,-12(fp)
 80172f8:	e1bffe15 	stw	r6,-8(fp)
 80172fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8017300:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8017304:	e0bffd17 	ldw	r2,-12(fp)
 8017308:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 801730c:	e0bffc17 	ldw	r2,-16(fp)
 8017310:	10800b17 	ldw	r2,44(r2)
 8017314:	e0bff815 	stw	r2,-32(fp)
 8017318:	e03ff90d 	sth	zero,-28(fp)
 801731c:	e0bff90b 	ldhu	r2,-28(fp)
 8017320:	e0fffb44 	addi	r3,fp,-19
 8017324:	180d883a 	mov	r6,r3
 8017328:	100b883a 	mov	r5,r2
 801732c:	e13ff817 	ldw	r4,-32(fp)
 8017330:	80144a40 	call	80144a4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017334:	00003706 	br	8017414 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8017338:	e0bffc17 	ldw	r2,-16(fp)
 801733c:	10800f17 	ldw	r2,60(r2)
 8017340:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 8017344:	e0bffc17 	ldw	r2,-16(fp)
 8017348:	10801017 	ldw	r2,64(r2)
 801734c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 8017350:	e0fff417 	ldw	r3,-48(fp)
 8017354:	e0bff017 	ldw	r2,-64(fp)
 8017358:	1880062e 	bgeu	r3,r2,8017374 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 801735c:	e0fff017 	ldw	r3,-64(fp)
 8017360:	e0bff417 	ldw	r2,-48(fp)
 8017364:	1885c83a 	sub	r2,r3,r2
 8017368:	10bfffc4 	addi	r2,r2,-1
 801736c:	e0bff115 	stw	r2,-60(fp)
 8017370:	00000b06 	br	80173a0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 8017374:	e0bff017 	ldw	r2,-64(fp)
 8017378:	10000526 	beq	r2,zero,8017390 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801737c:	00c20004 	movi	r3,2048
 8017380:	e0bff417 	ldw	r2,-48(fp)
 8017384:	1885c83a 	sub	r2,r3,r2
 8017388:	e0bff115 	stw	r2,-60(fp)
 801738c:	00000406 	br	80173a0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8017390:	00c1ffc4 	movi	r3,2047
 8017394:	e0bff417 	ldw	r2,-48(fp)
 8017398:	1885c83a 	sub	r2,r3,r2
 801739c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 80173a0:	e0bff117 	ldw	r2,-60(fp)
 80173a4:	10001e26 	beq	r2,zero,8017420 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 80173a8:	e0fffe17 	ldw	r3,-8(fp)
 80173ac:	e0bff117 	ldw	r2,-60(fp)
 80173b0:	1880022e 	bgeu	r3,r2,80173bc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 80173b4:	e0bffe17 	ldw	r2,-8(fp)
 80173b8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80173bc:	e0bffc17 	ldw	r2,-16(fp)
 80173c0:	10c21104 	addi	r3,r2,2116
 80173c4:	e0bff417 	ldw	r2,-48(fp)
 80173c8:	1885883a 	add	r2,r3,r2
 80173cc:	e1bff117 	ldw	r6,-60(fp)
 80173d0:	e17ffd17 	ldw	r5,-12(fp)
 80173d4:	1009883a 	mov	r4,r2
 80173d8:	80061740 	call	8006174 <memcpy>
      ptr   += n;
 80173dc:	e0fffd17 	ldw	r3,-12(fp)
 80173e0:	e0bff117 	ldw	r2,-60(fp)
 80173e4:	1885883a 	add	r2,r3,r2
 80173e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80173ec:	e0fffe17 	ldw	r3,-8(fp)
 80173f0:	e0bff117 	ldw	r2,-60(fp)
 80173f4:	1885c83a 	sub	r2,r3,r2
 80173f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80173fc:	e0fff417 	ldw	r3,-48(fp)
 8017400:	e0bff117 	ldw	r2,-60(fp)
 8017404:	1885883a 	add	r2,r3,r2
 8017408:	10c1ffcc 	andi	r3,r2,2047
 801740c:	e0bffc17 	ldw	r2,-16(fp)
 8017410:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017414:	e0bffe17 	ldw	r2,-8(fp)
 8017418:	00bfc716 	blt	zero,r2,8017338 <__alt_data_end+0xf8017338>
 801741c:	00000106 	br	8017424 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8017420:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017424:	0005303a 	rdctl	r2,status
 8017428:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801742c:	e0fff717 	ldw	r3,-36(fp)
 8017430:	00bfff84 	movi	r2,-2
 8017434:	1884703a 	and	r2,r3,r2
 8017438:	1001703a 	wrctl	status,r2
  
  return context;
 801743c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8017440:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017444:	e0bffc17 	ldw	r2,-16(fp)
 8017448:	10800817 	ldw	r2,32(r2)
 801744c:	10c00094 	ori	r3,r2,2
 8017450:	e0bffc17 	ldw	r2,-16(fp)
 8017454:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017458:	e0bffc17 	ldw	r2,-16(fp)
 801745c:	10800017 	ldw	r2,0(r2)
 8017460:	10800104 	addi	r2,r2,4
 8017464:	1007883a 	mov	r3,r2
 8017468:	e0bffc17 	ldw	r2,-16(fp)
 801746c:	10800817 	ldw	r2,32(r2)
 8017470:	18800035 	stwio	r2,0(r3)
 8017474:	e0bff617 	ldw	r2,-40(fp)
 8017478:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801747c:	e0bff317 	ldw	r2,-52(fp)
 8017480:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8017484:	e0bffe17 	ldw	r2,-8(fp)
 8017488:	00802a0e 	bge	zero,r2,8017534 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 801748c:	e0bfff17 	ldw	r2,-4(fp)
 8017490:	1090000c 	andi	r2,r2,16384
 8017494:	10002a1e 	bne	r2,zero,8017540 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 8017498:	d0a72943 	ldbu	r2,-25435(gp)
 801749c:	10803fcc 	andi	r2,r2,255
 80174a0:	10800058 	cmpnei	r2,r2,1
 80174a4:	1000161e 	bne	r2,zero,8017500 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 80174a8:	e0bffc17 	ldw	r2,-16(fp)
 80174ac:	10800c17 	ldw	r2,48(r2)
 80174b0:	e0bff515 	stw	r2,-44(fp)
 80174b4:	00800184 	movi	r2,6
 80174b8:	e0bff98d 	sth	r2,-26(fp)
 80174bc:	00bfe0c4 	movi	r2,-125
 80174c0:	e0bffa05 	stb	r2,-24(fp)
 80174c4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 80174c8:	d0a72943 	ldbu	r2,-25435(gp)
 80174cc:	10803fcc 	andi	r2,r2,255
 80174d0:	10001526 	beq	r2,zero,8017528 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 80174d4:	e0fff98b 	ldhu	r3,-26(fp)
 80174d8:	e13ffa03 	ldbu	r4,-24(fp)
 80174dc:	e17ffa8b 	ldhu	r5,-22(fp)
 80174e0:	e0bffb04 	addi	r2,fp,-20
 80174e4:	d8800015 	stw	r2,0(sp)
 80174e8:	280f883a 	mov	r7,r5
 80174ec:	200d883a 	mov	r6,r4
 80174f0:	180b883a 	mov	r5,r3
 80174f4:	e13ff517 	ldw	r4,-44(fp)
 80174f8:	80109240 	call	8010924 <OSFlagPend>
 80174fc:	00000a06 	br	8017528 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8017500:	0001883a 	nop
 8017504:	e0bffc17 	ldw	r2,-16(fp)
 8017508:	10c01017 	ldw	r3,64(r2)
 801750c:	e0bff017 	ldw	r2,-64(fp)
 8017510:	1880051e 	bne	r3,r2,8017528 <altera_avalon_jtag_uart_write+0x248>
 8017514:	e0bffc17 	ldw	r2,-16(fp)
 8017518:	10c00917 	ldw	r3,36(r2)
 801751c:	e0bffc17 	ldw	r2,-16(fp)
 8017520:	10800117 	ldw	r2,4(r2)
 8017524:	18bff736 	bltu	r3,r2,8017504 <__alt_data_end+0xf8017504>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8017528:	e0bffc17 	ldw	r2,-16(fp)
 801752c:	10800917 	ldw	r2,36(r2)
 8017530:	1000051e 	bne	r2,zero,8017548 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 8017534:	e0bffe17 	ldw	r2,-8(fp)
 8017538:	00bfb616 	blt	zero,r2,8017414 <__alt_data_end+0xf8017414>
 801753c:	00000306 	br	801754c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8017540:	0001883a 	nop
 8017544:	00000106 	br	801754c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8017548:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 801754c:	e0bffc17 	ldw	r2,-16(fp)
 8017550:	10800b17 	ldw	r2,44(r2)
 8017554:	1009883a 	mov	r4,r2
 8017558:	801481c0 	call	801481c <OSSemPost>

  if (ptr != start)
 801755c:	e0fffd17 	ldw	r3,-12(fp)
 8017560:	e0bff217 	ldw	r2,-56(fp)
 8017564:	18800426 	beq	r3,r2,8017578 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 8017568:	e0fffd17 	ldw	r3,-12(fp)
 801756c:	e0bff217 	ldw	r2,-56(fp)
 8017570:	1885c83a 	sub	r2,r3,r2
 8017574:	00000606 	br	8017590 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 8017578:	e0bfff17 	ldw	r2,-4(fp)
 801757c:	1090000c 	andi	r2,r2,16384
 8017580:	10000226 	beq	r2,zero,801758c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 8017584:	00bffd44 	movi	r2,-11
 8017588:	00000106 	br	8017590 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801758c:	00bffec4 	movi	r2,-5
}
 8017590:	e037883a 	mov	sp,fp
 8017594:	dfc00117 	ldw	ra,4(sp)
 8017598:	df000017 	ldw	fp,0(sp)
 801759c:	dec00204 	addi	sp,sp,8
 80175a0:	f800283a 	ret

080175a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80175a4:	defffa04 	addi	sp,sp,-24
 80175a8:	dfc00515 	stw	ra,20(sp)
 80175ac:	df000415 	stw	fp,16(sp)
 80175b0:	df000404 	addi	fp,sp,16
 80175b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80175b8:	0007883a 	mov	r3,zero
 80175bc:	e0bfff17 	ldw	r2,-4(fp)
 80175c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80175c4:	e0bfff17 	ldw	r2,-4(fp)
 80175c8:	10800104 	addi	r2,r2,4
 80175cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80175d0:	0005303a 	rdctl	r2,status
 80175d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80175d8:	e0fffd17 	ldw	r3,-12(fp)
 80175dc:	00bfff84 	movi	r2,-2
 80175e0:	1884703a 	and	r2,r3,r2
 80175e4:	1001703a 	wrctl	status,r2
  
  return context;
 80175e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80175ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80175f0:	80184300 	call	8018430 <alt_tick>
 80175f4:	e0bffc17 	ldw	r2,-16(fp)
 80175f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80175fc:	e0bffe17 	ldw	r2,-8(fp)
 8017600:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8017604:	0001883a 	nop
 8017608:	e037883a 	mov	sp,fp
 801760c:	dfc00117 	ldw	ra,4(sp)
 8017610:	df000017 	ldw	fp,0(sp)
 8017614:	dec00204 	addi	sp,sp,8
 8017618:	f800283a 	ret

0801761c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801761c:	defff804 	addi	sp,sp,-32
 8017620:	dfc00715 	stw	ra,28(sp)
 8017624:	df000615 	stw	fp,24(sp)
 8017628:	df000604 	addi	fp,sp,24
 801762c:	e13ffc15 	stw	r4,-16(fp)
 8017630:	e17ffd15 	stw	r5,-12(fp)
 8017634:	e1bffe15 	stw	r6,-8(fp)
 8017638:	e1ffff15 	stw	r7,-4(fp)
 801763c:	e0bfff17 	ldw	r2,-4(fp)
 8017640:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8017644:	d0a73e17 	ldw	r2,-25352(gp)
 8017648:	1000021e 	bne	r2,zero,8017654 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 801764c:	e0bffb17 	ldw	r2,-20(fp)
 8017650:	d0a73e15 	stw	r2,-25352(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8017654:	e0bffc17 	ldw	r2,-16(fp)
 8017658:	10800104 	addi	r2,r2,4
 801765c:	00c001c4 	movi	r3,7
 8017660:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8017664:	d8000015 	stw	zero,0(sp)
 8017668:	e1fffc17 	ldw	r7,-16(fp)
 801766c:	01820074 	movhi	r6,2049
 8017670:	319d6904 	addi	r6,r6,30116
 8017674:	e17ffe17 	ldw	r5,-8(fp)
 8017678:	e13ffd17 	ldw	r4,-12(fp)
 801767c:	800d1ec0 	call	800d1ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8017680:	0001883a 	nop
 8017684:	e037883a 	mov	sp,fp
 8017688:	dfc00117 	ldw	ra,4(sp)
 801768c:	df000017 	ldw	fp,0(sp)
 8017690:	dec00204 	addi	sp,sp,8
 8017694:	f800283a 	ret

08017698 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8017698:	defffc04 	addi	sp,sp,-16
 801769c:	df000315 	stw	fp,12(sp)
 80176a0:	df000304 	addi	fp,sp,12
 80176a4:	e13ffe15 	stw	r4,-8(fp)
 80176a8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 80176ac:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 80176b0:	e0bfff17 	ldw	r2,-4(fp)
 80176b4:	1000061e 	bne	r2,zero,80176d0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 80176b8:	e0bffe17 	ldw	r2,-8(fp)
 80176bc:	1007883a 	mov	r3,r2
 80176c0:	e0bffd03 	ldbu	r2,-12(fp)
 80176c4:	1884b03a 	or	r2,r3,r2
 80176c8:	e0bffd05 	stb	r2,-12(fp)
 80176cc:	00000806 	br	80176f0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 80176d0:	e0bffe17 	ldw	r2,-8(fp)
 80176d4:	1007883a 	mov	r3,r2
 80176d8:	e0bffd03 	ldbu	r2,-12(fp)
 80176dc:	1884b03a 	or	r2,r3,r2
 80176e0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 80176e4:	e0bffd03 	ldbu	r2,-12(fp)
 80176e8:	10801014 	ori	r2,r2,64
 80176ec:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 80176f0:	e0fffd03 	ldbu	r3,-12(fp)
 80176f4:	00bfe004 	movi	r2,-128
 80176f8:	1884b03a 	or	r2,r3,r2
}
 80176fc:	e037883a 	mov	sp,fp
 8017700:	df000017 	ldw	fp,0(sp)
 8017704:	dec00104 	addi	sp,sp,4
 8017708:	f800283a 	ret

0801770c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 801770c:	defffd04 	addi	sp,sp,-12
 8017710:	df000215 	stw	fp,8(sp)
 8017714:	df000204 	addi	fp,sp,8
 8017718:	e13ffe15 	stw	r4,-8(fp)
 801771c:	2805883a 	mov	r2,r5
 8017720:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8017724:	e0bffe17 	ldw	r2,-8(fp)
 8017728:	10800a17 	ldw	r2,40(r2)
 801772c:	1007883a 	mov	r3,r2
 8017730:	e0bfff03 	ldbu	r2,-4(fp)
 8017734:	18800025 	stbio	r2,0(r3)
}
 8017738:	0001883a 	nop
 801773c:	e037883a 	mov	sp,fp
 8017740:	df000017 	ldw	fp,0(sp)
 8017744:	dec00104 	addi	sp,sp,4
 8017748:	f800283a 	ret

0801774c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 801774c:	defffe04 	addi	sp,sp,-8
 8017750:	df000115 	stw	fp,4(sp)
 8017754:	df000104 	addi	fp,sp,4
 8017758:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 801775c:	e0bfff17 	ldw	r2,-4(fp)
 8017760:	10800a17 	ldw	r2,40(r2)
 8017764:	1007883a 	mov	r3,r2
 8017768:	00800044 	movi	r2,1
 801776c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8017770:	0001883a 	nop
 8017774:	e037883a 	mov	sp,fp
 8017778:	df000017 	ldw	fp,0(sp)
 801777c:	dec00104 	addi	sp,sp,4
 8017780:	f800283a 	ret

08017784 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8017784:	defffc04 	addi	sp,sp,-16
 8017788:	dfc00315 	stw	ra,12(sp)
 801778c:	df000215 	stw	fp,8(sp)
 8017790:	df000204 	addi	fp,sp,8
 8017794:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8017798:	d1600804 	addi	r5,gp,-32736
 801779c:	e13fff17 	ldw	r4,-4(fp)
 80177a0:	8017ea00 	call	8017ea0 <alt_find_dev>
 80177a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80177a8:	e0bffe17 	ldw	r2,-8(fp)
}
 80177ac:	e037883a 	mov	sp,fp
 80177b0:	dfc00117 	ldw	ra,4(sp)
 80177b4:	df000017 	ldw	fp,0(sp)
 80177b8:	dec00204 	addi	sp,sp,8
 80177bc:	f800283a 	ret

080177c0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 80177c0:	defffb04 	addi	sp,sp,-20
 80177c4:	df000415 	stw	fp,16(sp)
 80177c8:	df000404 	addi	fp,sp,16
 80177cc:	e13ffd15 	stw	r4,-12(fp)
 80177d0:	e17ffe15 	stw	r5,-8(fp)
 80177d4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 80177d8:	e03ffc15 	stw	zero,-16(fp)
 80177dc:	00000f06 	br	801781c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 80177e0:	e0bffd17 	ldw	r2,-12(fp)
 80177e4:	10800a17 	ldw	r2,40(r2)
 80177e8:	10800044 	addi	r2,r2,1
 80177ec:	1009883a 	mov	r4,r2
 80177f0:	e0fffe17 	ldw	r3,-8(fp)
 80177f4:	e0bffc17 	ldw	r2,-16(fp)
 80177f8:	1885883a 	add	r2,r3,r2
 80177fc:	10800003 	ldbu	r2,0(r2)
 8017800:	10803fcc 	andi	r2,r2,255
 8017804:	1080201c 	xori	r2,r2,128
 8017808:	10bfe004 	addi	r2,r2,-128
 801780c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8017810:	e0bffc17 	ldw	r2,-16(fp)
 8017814:	10800044 	addi	r2,r2,1
 8017818:	e0bffc15 	stw	r2,-16(fp)
 801781c:	e0fffc17 	ldw	r3,-16(fp)
 8017820:	e0bfff17 	ldw	r2,-4(fp)
 8017824:	18bfee36 	bltu	r3,r2,80177e0 <__alt_data_end+0xf80177e0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8017828:	0001883a 	nop
 801782c:	e037883a 	mov	sp,fp
 8017830:	df000017 	ldw	fp,0(sp)
 8017834:	dec00104 	addi	sp,sp,4
 8017838:	f800283a 	ret

0801783c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 801783c:	defffd04 	addi	sp,sp,-12
 8017840:	df000215 	stw	fp,8(sp)
 8017844:	df000204 	addi	fp,sp,8
 8017848:	e13ffe15 	stw	r4,-8(fp)
 801784c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8017850:	00000d06 	br	8017888 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8017854:	e0bffe17 	ldw	r2,-8(fp)
 8017858:	10800a17 	ldw	r2,40(r2)
 801785c:	10800044 	addi	r2,r2,1
 8017860:	1007883a 	mov	r3,r2
 8017864:	e0bfff17 	ldw	r2,-4(fp)
 8017868:	10800003 	ldbu	r2,0(r2)
 801786c:	10803fcc 	andi	r2,r2,255
 8017870:	1080201c 	xori	r2,r2,128
 8017874:	10bfe004 	addi	r2,r2,-128
 8017878:	18800025 	stbio	r2,0(r3)
		++ptr;
 801787c:	e0bfff17 	ldw	r2,-4(fp)
 8017880:	10800044 	addi	r2,r2,1
 8017884:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8017888:	e0bfff17 	ldw	r2,-4(fp)
 801788c:	10800003 	ldbu	r2,0(r2)
 8017890:	10803fcc 	andi	r2,r2,255
 8017894:	1080201c 	xori	r2,r2,128
 8017898:	10bfe004 	addi	r2,r2,-128
 801789c:	103fed1e 	bne	r2,zero,8017854 <__alt_data_end+0xf8017854>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 80178a0:	0001883a 	nop
 80178a4:	e037883a 	mov	sp,fp
 80178a8:	df000017 	ldw	fp,0(sp)
 80178ac:	dec00104 	addi	sp,sp,4
 80178b0:	f800283a 	ret

080178b4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 80178b4:	defffb04 	addi	sp,sp,-20
 80178b8:	dfc00415 	stw	ra,16(sp)
 80178bc:	df000315 	stw	fp,12(sp)
 80178c0:	df000304 	addi	fp,sp,12
 80178c4:	e13ffd15 	stw	r4,-12(fp)
 80178c8:	e17ffe15 	stw	r5,-8(fp)
 80178cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 80178d0:	e0bffd17 	ldw	r2,-12(fp)
 80178d4:	10800017 	ldw	r2,0(r2)
 80178d8:	e0ffff17 	ldw	r3,-4(fp)
 80178dc:	180d883a 	mov	r6,r3
 80178e0:	e17ffe17 	ldw	r5,-8(fp)
 80178e4:	1009883a 	mov	r4,r2
 80178e8:	80177c00 	call	80177c0 <alt_up_character_lcd_write>
	return 0;
 80178ec:	0005883a 	mov	r2,zero
}
 80178f0:	e037883a 	mov	sp,fp
 80178f4:	dfc00117 	ldw	ra,4(sp)
 80178f8:	df000017 	ldw	fp,0(sp)
 80178fc:	dec00204 	addi	sp,sp,8
 8017900:	f800283a 	ret

08017904 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8017904:	defffa04 	addi	sp,sp,-24
 8017908:	dfc00515 	stw	ra,20(sp)
 801790c:	df000415 	stw	fp,16(sp)
 8017910:	df000404 	addi	fp,sp,16
 8017914:	e13ffd15 	stw	r4,-12(fp)
 8017918:	e17ffe15 	stw	r5,-8(fp)
 801791c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8017920:	e0bffe17 	ldw	r2,-8(fp)
 8017924:	10800a28 	cmpgeui	r2,r2,40
 8017928:	1000031e 	bne	r2,zero,8017938 <alt_up_character_lcd_set_cursor_pos+0x34>
 801792c:	e0bfff17 	ldw	r2,-4(fp)
 8017930:	108000b0 	cmpltui	r2,r2,2
 8017934:	1000021e 	bne	r2,zero,8017940 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8017938:	00bfffc4 	movi	r2,-1
 801793c:	00000906 	br	8017964 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8017940:	e17fff17 	ldw	r5,-4(fp)
 8017944:	e13ffe17 	ldw	r4,-8(fp)
 8017948:	80176980 	call	8017698 <get_DDRAM_addr>
 801794c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8017950:	e0bffc03 	ldbu	r2,-16(fp)
 8017954:	100b883a 	mov	r5,r2
 8017958:	e13ffd17 	ldw	r4,-12(fp)
 801795c:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
	return 0;
 8017960:	0005883a 	mov	r2,zero
}
 8017964:	e037883a 	mov	sp,fp
 8017968:	dfc00117 	ldw	ra,4(sp)
 801796c:	df000017 	ldw	fp,0(sp)
 8017970:	dec00204 	addi	sp,sp,8
 8017974:	f800283a 	ret

08017978 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8017978:	defffb04 	addi	sp,sp,-20
 801797c:	dfc00415 	stw	ra,16(sp)
 8017980:	df000315 	stw	fp,12(sp)
 8017984:	df000304 	addi	fp,sp,12
 8017988:	e13ffe15 	stw	r4,-8(fp)
 801798c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8017990:	e0bfff17 	ldw	r2,-4(fp)
 8017994:	10001526 	beq	r2,zero,80179ec <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8017998:	e0bfff17 	ldw	r2,-4(fp)
 801799c:	0080020e 	bge	zero,r2,80179a8 <alt_up_character_lcd_shift_cursor+0x30>
 80179a0:	00800504 	movi	r2,20
 80179a4:	00000106 	br	80179ac <alt_up_character_lcd_shift_cursor+0x34>
 80179a8:	00800404 	movi	r2,16
 80179ac:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80179b0:	e0bfff17 	ldw	r2,-4(fp)
 80179b4:	1000010e 	bge	r2,zero,80179bc <alt_up_character_lcd_shift_cursor+0x44>
 80179b8:	0085c83a 	sub	r2,zero,r2
 80179bc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80179c0:	00000406 	br	80179d4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80179c4:	e0bffd43 	ldbu	r2,-11(fp)
 80179c8:	100b883a 	mov	r5,r2
 80179cc:	e13ffe17 	ldw	r4,-8(fp)
 80179d0:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80179d4:	e0bffd03 	ldbu	r2,-12(fp)
 80179d8:	10ffffc4 	addi	r3,r2,-1
 80179dc:	e0fffd05 	stb	r3,-12(fp)
 80179e0:	10803fcc 	andi	r2,r2,255
 80179e4:	103ff71e 	bne	r2,zero,80179c4 <__alt_data_end+0xf80179c4>
 80179e8:	00000106 	br	80179f0 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 80179ec:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80179f0:	e037883a 	mov	sp,fp
 80179f4:	dfc00117 	ldw	ra,4(sp)
 80179f8:	df000017 	ldw	fp,0(sp)
 80179fc:	dec00204 	addi	sp,sp,8
 8017a00:	f800283a 	ret

08017a04 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8017a04:	defffb04 	addi	sp,sp,-20
 8017a08:	dfc00415 	stw	ra,16(sp)
 8017a0c:	df000315 	stw	fp,12(sp)
 8017a10:	df000304 	addi	fp,sp,12
 8017a14:	e13ffe15 	stw	r4,-8(fp)
 8017a18:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8017a1c:	e0bfff17 	ldw	r2,-4(fp)
 8017a20:	10001526 	beq	r2,zero,8017a78 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8017a24:	e0bfff17 	ldw	r2,-4(fp)
 8017a28:	0080020e 	bge	zero,r2,8017a34 <alt_up_character_lcd_shift_display+0x30>
 8017a2c:	00800704 	movi	r2,28
 8017a30:	00000106 	br	8017a38 <alt_up_character_lcd_shift_display+0x34>
 8017a34:	00800604 	movi	r2,24
 8017a38:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8017a3c:	e0bfff17 	ldw	r2,-4(fp)
 8017a40:	1000010e 	bge	r2,zero,8017a48 <alt_up_character_lcd_shift_display+0x44>
 8017a44:	0085c83a 	sub	r2,zero,r2
 8017a48:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8017a4c:	00000406 	br	8017a60 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8017a50:	e0bffd43 	ldbu	r2,-11(fp)
 8017a54:	100b883a 	mov	r5,r2
 8017a58:	e13ffe17 	ldw	r4,-8(fp)
 8017a5c:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8017a60:	e0bffd03 	ldbu	r2,-12(fp)
 8017a64:	10ffffc4 	addi	r3,r2,-1
 8017a68:	e0fffd05 	stb	r3,-12(fp)
 8017a6c:	10803fcc 	andi	r2,r2,255
 8017a70:	103ff71e 	bne	r2,zero,8017a50 <__alt_data_end+0xf8017a50>
 8017a74:	00000106 	br	8017a7c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
 8017a78:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8017a7c:	e037883a 	mov	sp,fp
 8017a80:	dfc00117 	ldw	ra,4(sp)
 8017a84:	df000017 	ldw	fp,0(sp)
 8017a88:	dec00204 	addi	sp,sp,8
 8017a8c:	f800283a 	ret

08017a90 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8017a90:	defffa04 	addi	sp,sp,-24
 8017a94:	dfc00515 	stw	ra,20(sp)
 8017a98:	df000415 	stw	fp,16(sp)
 8017a9c:	df000404 	addi	fp,sp,16
 8017aa0:	e13ffd15 	stw	r4,-12(fp)
 8017aa4:	e17ffe15 	stw	r5,-8(fp)
 8017aa8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8017aac:	e0bffe17 	ldw	r2,-8(fp)
 8017ab0:	10800a28 	cmpgeui	r2,r2,40
 8017ab4:	1000031e 	bne	r2,zero,8017ac4 <alt_up_character_lcd_erase_pos+0x34>
 8017ab8:	e0bfff17 	ldw	r2,-4(fp)
 8017abc:	108000b0 	cmpltui	r2,r2,2
 8017ac0:	1000021e 	bne	r2,zero,8017acc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8017ac4:	00bfffc4 	movi	r2,-1
 8017ac8:	00000f06 	br	8017b08 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8017acc:	e17fff17 	ldw	r5,-4(fp)
 8017ad0:	e13ffe17 	ldw	r4,-8(fp)
 8017ad4:	80176980 	call	8017698 <get_DDRAM_addr>
 8017ad8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8017adc:	e0bffc03 	ldbu	r2,-16(fp)
 8017ae0:	100b883a 	mov	r5,r2
 8017ae4:	e13ffd17 	ldw	r4,-12(fp)
 8017ae8:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8017aec:	e0bffd17 	ldw	r2,-12(fp)
 8017af0:	10800a17 	ldw	r2,40(r2)
 8017af4:	10800044 	addi	r2,r2,1
 8017af8:	1007883a 	mov	r3,r2
 8017afc:	00800084 	movi	r2,2
 8017b00:	18800025 	stbio	r2,0(r3)
	return 0;
 8017b04:	0005883a 	mov	r2,zero
}
 8017b08:	e037883a 	mov	sp,fp
 8017b0c:	dfc00117 	ldw	ra,4(sp)
 8017b10:	df000017 	ldw	fp,0(sp)
 8017b14:	dec00204 	addi	sp,sp,8
 8017b18:	f800283a 	ret

08017b1c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8017b1c:	defffd04 	addi	sp,sp,-12
 8017b20:	dfc00215 	stw	ra,8(sp)
 8017b24:	df000115 	stw	fp,4(sp)
 8017b28:	df000104 	addi	fp,sp,4
 8017b2c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8017b30:	01400304 	movi	r5,12
 8017b34:	e13fff17 	ldw	r4,-4(fp)
 8017b38:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
}
 8017b3c:	0001883a 	nop
 8017b40:	e037883a 	mov	sp,fp
 8017b44:	dfc00117 	ldw	ra,4(sp)
 8017b48:	df000017 	ldw	fp,0(sp)
 8017b4c:	dec00204 	addi	sp,sp,8
 8017b50:	f800283a 	ret

08017b54 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8017b54:	defffd04 	addi	sp,sp,-12
 8017b58:	dfc00215 	stw	ra,8(sp)
 8017b5c:	df000115 	stw	fp,4(sp)
 8017b60:	df000104 	addi	fp,sp,4
 8017b64:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8017b68:	014003c4 	movi	r5,15
 8017b6c:	e13fff17 	ldw	r4,-4(fp)
 8017b70:	801770c0 	call	801770c <alt_up_character_lcd_send_cmd>
}
 8017b74:	0001883a 	nop
 8017b78:	e037883a 	mov	sp,fp
 8017b7c:	dfc00117 	ldw	ra,4(sp)
 8017b80:	df000017 	ldw	fp,0(sp)
 8017b84:	dec00204 	addi	sp,sp,8
 8017b88:	f800283a 	ret

08017b8c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8017b8c:	defff504 	addi	sp,sp,-44
 8017b90:	df000a15 	stw	fp,40(sp)
 8017b94:	df000a04 	addi	fp,sp,40
 8017b98:	e13ffc15 	stw	r4,-16(fp)
 8017b9c:	e17ffd15 	stw	r5,-12(fp)
 8017ba0:	e1bffe15 	stw	r6,-8(fp)
 8017ba4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8017ba8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8017bac:	d0a73e17 	ldw	r2,-25352(gp)
  
  if (alt_ticks_per_second ())
 8017bb0:	10003c26 	beq	r2,zero,8017ca4 <alt_alarm_start+0x118>
  {
    if (alarm)
 8017bb4:	e0bffc17 	ldw	r2,-16(fp)
 8017bb8:	10003826 	beq	r2,zero,8017c9c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8017bbc:	e0bffc17 	ldw	r2,-16(fp)
 8017bc0:	e0fffe17 	ldw	r3,-8(fp)
 8017bc4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8017bc8:	e0bffc17 	ldw	r2,-16(fp)
 8017bcc:	e0ffff17 	ldw	r3,-4(fp)
 8017bd0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017bd4:	0005303a 	rdctl	r2,status
 8017bd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017bdc:	e0fff917 	ldw	r3,-28(fp)
 8017be0:	00bfff84 	movi	r2,-2
 8017be4:	1884703a 	and	r2,r3,r2
 8017be8:	1001703a 	wrctl	status,r2
  
  return context;
 8017bec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8017bf0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8017bf4:	d0a73f17 	ldw	r2,-25348(gp)
      
      current_nticks = alt_nticks();
 8017bf8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8017bfc:	e0fffd17 	ldw	r3,-12(fp)
 8017c00:	e0bff617 	ldw	r2,-40(fp)
 8017c04:	1885883a 	add	r2,r3,r2
 8017c08:	10c00044 	addi	r3,r2,1
 8017c0c:	e0bffc17 	ldw	r2,-16(fp)
 8017c10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8017c14:	e0bffc17 	ldw	r2,-16(fp)
 8017c18:	10c00217 	ldw	r3,8(r2)
 8017c1c:	e0bff617 	ldw	r2,-40(fp)
 8017c20:	1880042e 	bgeu	r3,r2,8017c34 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8017c24:	e0bffc17 	ldw	r2,-16(fp)
 8017c28:	00c00044 	movi	r3,1
 8017c2c:	10c00405 	stb	r3,16(r2)
 8017c30:	00000206 	br	8017c3c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8017c34:	e0bffc17 	ldw	r2,-16(fp)
 8017c38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8017c3c:	e0bffc17 	ldw	r2,-16(fp)
 8017c40:	d0e02d04 	addi	r3,gp,-32588
 8017c44:	e0fffa15 	stw	r3,-24(fp)
 8017c48:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017c4c:	e0bffb17 	ldw	r2,-20(fp)
 8017c50:	e0fffa17 	ldw	r3,-24(fp)
 8017c54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8017c58:	e0bffa17 	ldw	r2,-24(fp)
 8017c5c:	10c00017 	ldw	r3,0(r2)
 8017c60:	e0bffb17 	ldw	r2,-20(fp)
 8017c64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8017c68:	e0bffa17 	ldw	r2,-24(fp)
 8017c6c:	10800017 	ldw	r2,0(r2)
 8017c70:	e0fffb17 	ldw	r3,-20(fp)
 8017c74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017c78:	e0bffa17 	ldw	r2,-24(fp)
 8017c7c:	e0fffb17 	ldw	r3,-20(fp)
 8017c80:	10c00015 	stw	r3,0(r2)
 8017c84:	e0bff817 	ldw	r2,-32(fp)
 8017c88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017c8c:	e0bff717 	ldw	r2,-36(fp)
 8017c90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8017c94:	0005883a 	mov	r2,zero
 8017c98:	00000306 	br	8017ca8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8017c9c:	00bffa84 	movi	r2,-22
 8017ca0:	00000106 	br	8017ca8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8017ca4:	00bfde84 	movi	r2,-134
  }
}
 8017ca8:	e037883a 	mov	sp,fp
 8017cac:	df000017 	ldw	fp,0(sp)
 8017cb0:	dec00104 	addi	sp,sp,4
 8017cb4:	f800283a 	ret

08017cb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8017cb8:	defffe04 	addi	sp,sp,-8
 8017cbc:	df000115 	stw	fp,4(sp)
 8017cc0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8017cc4:	e03fff15 	stw	zero,-4(fp)
 8017cc8:	00000506 	br	8017ce0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8017ccc:	e0bfff17 	ldw	r2,-4(fp)
 8017cd0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8017cd4:	e0bfff17 	ldw	r2,-4(fp)
 8017cd8:	10800804 	addi	r2,r2,32
 8017cdc:	e0bfff15 	stw	r2,-4(fp)
 8017ce0:	e0bfff17 	ldw	r2,-4(fp)
 8017ce4:	10820030 	cmpltui	r2,r2,2048
 8017ce8:	103ff81e 	bne	r2,zero,8017ccc <__alt_data_end+0xf8017ccc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8017cec:	0001883a 	nop
 8017cf0:	e037883a 	mov	sp,fp
 8017cf4:	df000017 	ldw	fp,0(sp)
 8017cf8:	dec00104 	addi	sp,sp,4
 8017cfc:	f800283a 	ret

08017d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017d00:	defffe04 	addi	sp,sp,-8
 8017d04:	dfc00115 	stw	ra,4(sp)
 8017d08:	df000015 	stw	fp,0(sp)
 8017d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017d10:	d0a00b17 	ldw	r2,-32724(gp)
 8017d14:	10000326 	beq	r2,zero,8017d24 <alt_get_errno+0x24>
 8017d18:	d0a00b17 	ldw	r2,-32724(gp)
 8017d1c:	103ee83a 	callr	r2
 8017d20:	00000106 	br	8017d28 <alt_get_errno+0x28>
 8017d24:	d0a71f04 	addi	r2,gp,-25476
}
 8017d28:	e037883a 	mov	sp,fp
 8017d2c:	dfc00117 	ldw	ra,4(sp)
 8017d30:	df000017 	ldw	fp,0(sp)
 8017d34:	dec00204 	addi	sp,sp,8
 8017d38:	f800283a 	ret

08017d3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8017d3c:	defffa04 	addi	sp,sp,-24
 8017d40:	dfc00515 	stw	ra,20(sp)
 8017d44:	df000415 	stw	fp,16(sp)
 8017d48:	df000404 	addi	fp,sp,16
 8017d4c:	e13ffe15 	stw	r4,-8(fp)
 8017d50:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8017d54:	e0bffe17 	ldw	r2,-8(fp)
 8017d58:	10000326 	beq	r2,zero,8017d68 <alt_dev_llist_insert+0x2c>
 8017d5c:	e0bffe17 	ldw	r2,-8(fp)
 8017d60:	10800217 	ldw	r2,8(r2)
 8017d64:	1000061e 	bne	r2,zero,8017d80 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8017d68:	8017d000 	call	8017d00 <alt_get_errno>
 8017d6c:	1007883a 	mov	r3,r2
 8017d70:	00800584 	movi	r2,22
 8017d74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8017d78:	00bffa84 	movi	r2,-22
 8017d7c:	00001306 	br	8017dcc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8017d80:	e0bffe17 	ldw	r2,-8(fp)
 8017d84:	e0ffff17 	ldw	r3,-4(fp)
 8017d88:	e0fffc15 	stw	r3,-16(fp)
 8017d8c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017d90:	e0bffd17 	ldw	r2,-12(fp)
 8017d94:	e0fffc17 	ldw	r3,-16(fp)
 8017d98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8017d9c:	e0bffc17 	ldw	r2,-16(fp)
 8017da0:	10c00017 	ldw	r3,0(r2)
 8017da4:	e0bffd17 	ldw	r2,-12(fp)
 8017da8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8017dac:	e0bffc17 	ldw	r2,-16(fp)
 8017db0:	10800017 	ldw	r2,0(r2)
 8017db4:	e0fffd17 	ldw	r3,-12(fp)
 8017db8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017dbc:	e0bffc17 	ldw	r2,-16(fp)
 8017dc0:	e0fffd17 	ldw	r3,-12(fp)
 8017dc4:	10c00015 	stw	r3,0(r2)

  return 0;  
 8017dc8:	0005883a 	mov	r2,zero
}
 8017dcc:	e037883a 	mov	sp,fp
 8017dd0:	dfc00117 	ldw	ra,4(sp)
 8017dd4:	df000017 	ldw	fp,0(sp)
 8017dd8:	dec00204 	addi	sp,sp,8
 8017ddc:	f800283a 	ret

08017de0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8017de0:	defffd04 	addi	sp,sp,-12
 8017de4:	dfc00215 	stw	ra,8(sp)
 8017de8:	df000115 	stw	fp,4(sp)
 8017dec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017df0:	008200b4 	movhi	r2,2050
 8017df4:	10a3ae04 	addi	r2,r2,-29000
 8017df8:	e0bfff15 	stw	r2,-4(fp)
 8017dfc:	00000606 	br	8017e18 <_do_ctors+0x38>
        (*ctor) (); 
 8017e00:	e0bfff17 	ldw	r2,-4(fp)
 8017e04:	10800017 	ldw	r2,0(r2)
 8017e08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017e0c:	e0bfff17 	ldw	r2,-4(fp)
 8017e10:	10bfff04 	addi	r2,r2,-4
 8017e14:	e0bfff15 	stw	r2,-4(fp)
 8017e18:	e0ffff17 	ldw	r3,-4(fp)
 8017e1c:	008200b4 	movhi	r2,2050
 8017e20:	10a3af04 	addi	r2,r2,-28996
 8017e24:	18bff62e 	bgeu	r3,r2,8017e00 <__alt_data_end+0xf8017e00>
        (*ctor) (); 
}
 8017e28:	0001883a 	nop
 8017e2c:	e037883a 	mov	sp,fp
 8017e30:	dfc00117 	ldw	ra,4(sp)
 8017e34:	df000017 	ldw	fp,0(sp)
 8017e38:	dec00204 	addi	sp,sp,8
 8017e3c:	f800283a 	ret

08017e40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8017e40:	defffd04 	addi	sp,sp,-12
 8017e44:	dfc00215 	stw	ra,8(sp)
 8017e48:	df000115 	stw	fp,4(sp)
 8017e4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017e50:	008200b4 	movhi	r2,2050
 8017e54:	10a3ae04 	addi	r2,r2,-29000
 8017e58:	e0bfff15 	stw	r2,-4(fp)
 8017e5c:	00000606 	br	8017e78 <_do_dtors+0x38>
        (*dtor) (); 
 8017e60:	e0bfff17 	ldw	r2,-4(fp)
 8017e64:	10800017 	ldw	r2,0(r2)
 8017e68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017e6c:	e0bfff17 	ldw	r2,-4(fp)
 8017e70:	10bfff04 	addi	r2,r2,-4
 8017e74:	e0bfff15 	stw	r2,-4(fp)
 8017e78:	e0ffff17 	ldw	r3,-4(fp)
 8017e7c:	008200b4 	movhi	r2,2050
 8017e80:	10a3af04 	addi	r2,r2,-28996
 8017e84:	18bff62e 	bgeu	r3,r2,8017e60 <__alt_data_end+0xf8017e60>
        (*dtor) (); 
}
 8017e88:	0001883a 	nop
 8017e8c:	e037883a 	mov	sp,fp
 8017e90:	dfc00117 	ldw	ra,4(sp)
 8017e94:	df000017 	ldw	fp,0(sp)
 8017e98:	dec00204 	addi	sp,sp,8
 8017e9c:	f800283a 	ret

08017ea0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8017ea0:	defffa04 	addi	sp,sp,-24
 8017ea4:	dfc00515 	stw	ra,20(sp)
 8017ea8:	df000415 	stw	fp,16(sp)
 8017eac:	df000404 	addi	fp,sp,16
 8017eb0:	e13ffe15 	stw	r4,-8(fp)
 8017eb4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8017eb8:	e0bfff17 	ldw	r2,-4(fp)
 8017ebc:	10800017 	ldw	r2,0(r2)
 8017ec0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8017ec4:	e13ffe17 	ldw	r4,-8(fp)
 8017ec8:	80007e80 	call	80007e8 <strlen>
 8017ecc:	10800044 	addi	r2,r2,1
 8017ed0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017ed4:	00000d06 	br	8017f0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8017ed8:	e0bffc17 	ldw	r2,-16(fp)
 8017edc:	10800217 	ldw	r2,8(r2)
 8017ee0:	e0fffd17 	ldw	r3,-12(fp)
 8017ee4:	180d883a 	mov	r6,r3
 8017ee8:	e17ffe17 	ldw	r5,-8(fp)
 8017eec:	1009883a 	mov	r4,r2
 8017ef0:	8018b740 	call	8018b74 <memcmp>
 8017ef4:	1000021e 	bne	r2,zero,8017f00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8017ef8:	e0bffc17 	ldw	r2,-16(fp)
 8017efc:	00000706 	br	8017f1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8017f00:	e0bffc17 	ldw	r2,-16(fp)
 8017f04:	10800017 	ldw	r2,0(r2)
 8017f08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017f0c:	e0fffc17 	ldw	r3,-16(fp)
 8017f10:	e0bfff17 	ldw	r2,-4(fp)
 8017f14:	18bff01e 	bne	r3,r2,8017ed8 <__alt_data_end+0xf8017ed8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8017f18:	0005883a 	mov	r2,zero
}
 8017f1c:	e037883a 	mov	sp,fp
 8017f20:	dfc00117 	ldw	ra,4(sp)
 8017f24:	df000017 	ldw	fp,0(sp)
 8017f28:	dec00204 	addi	sp,sp,8
 8017f2c:	f800283a 	ret

08017f30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8017f30:	defffe04 	addi	sp,sp,-8
 8017f34:	dfc00115 	stw	ra,4(sp)
 8017f38:	df000015 	stw	fp,0(sp)
 8017f3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8017f40:	01440004 	movi	r5,4096
 8017f44:	0009883a 	mov	r4,zero
 8017f48:	8018a980 	call	8018a98 <alt_icache_flush>
#endif
}
 8017f4c:	0001883a 	nop
 8017f50:	e037883a 	mov	sp,fp
 8017f54:	dfc00117 	ldw	ra,4(sp)
 8017f58:	df000017 	ldw	fp,0(sp)
 8017f5c:	dec00204 	addi	sp,sp,8
 8017f60:	f800283a 	ret

08017f64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8017f64:	defffe04 	addi	sp,sp,-8
 8017f68:	df000115 	stw	fp,4(sp)
 8017f6c:	df000104 	addi	fp,sp,4
 8017f70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8017f74:	e0bfff17 	ldw	r2,-4(fp)
 8017f78:	10bffe84 	addi	r2,r2,-6
 8017f7c:	10c00428 	cmpgeui	r3,r2,16
 8017f80:	18001a1e 	bne	r3,zero,8017fec <alt_exception_cause_generated_bad_addr+0x88>
 8017f84:	100690ba 	slli	r3,r2,2
 8017f88:	00820074 	movhi	r2,2049
 8017f8c:	109fe704 	addi	r2,r2,32668
 8017f90:	1885883a 	add	r2,r3,r2
 8017f94:	10800017 	ldw	r2,0(r2)
 8017f98:	1000683a 	jmp	r2
 8017f9c:	08017fdc 	xori	zero,at,1535
 8017fa0:	08017fdc 	xori	zero,at,1535
 8017fa4:	08017fec 	andhi	zero,at,1535
 8017fa8:	08017fec 	andhi	zero,at,1535
 8017fac:	08017fec 	andhi	zero,at,1535
 8017fb0:	08017fdc 	xori	zero,at,1535
 8017fb4:	08017fe4 	muli	zero,at,1535
 8017fb8:	08017fec 	andhi	zero,at,1535
 8017fbc:	08017fdc 	xori	zero,at,1535
 8017fc0:	08017fdc 	xori	zero,at,1535
 8017fc4:	08017fec 	andhi	zero,at,1535
 8017fc8:	08017fdc 	xori	zero,at,1535
 8017fcc:	08017fe4 	muli	zero,at,1535
 8017fd0:	08017fec 	andhi	zero,at,1535
 8017fd4:	08017fec 	andhi	zero,at,1535
 8017fd8:	08017fdc 	xori	zero,at,1535
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8017fdc:	00800044 	movi	r2,1
 8017fe0:	00000306 	br	8017ff0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8017fe4:	0005883a 	mov	r2,zero
 8017fe8:	00000106 	br	8017ff0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8017fec:	0005883a 	mov	r2,zero
  }
}
 8017ff0:	e037883a 	mov	sp,fp
 8017ff4:	df000017 	ldw	fp,0(sp)
 8017ff8:	dec00104 	addi	sp,sp,4
 8017ffc:	f800283a 	ret

08018000 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8018000:	defff904 	addi	sp,sp,-28
 8018004:	dfc00615 	stw	ra,24(sp)
 8018008:	df000515 	stw	fp,20(sp)
 801800c:	df000504 	addi	fp,sp,20
 8018010:	e13ffc15 	stw	r4,-16(fp)
 8018014:	e17ffd15 	stw	r5,-12(fp)
 8018018:	e1bffe15 	stw	r6,-8(fp)
 801801c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8018020:	e1bfff17 	ldw	r6,-4(fp)
 8018024:	e17ffe17 	ldw	r5,-8(fp)
 8018028:	e13ffd17 	ldw	r4,-12(fp)
 801802c:	80182400 	call	8018240 <open>
 8018030:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8018034:	e0bffb17 	ldw	r2,-20(fp)
 8018038:	10001c16 	blt	r2,zero,80180ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801803c:	008200b4 	movhi	r2,2050
 8018040:	10a71804 	addi	r2,r2,-25504
 8018044:	e0fffb17 	ldw	r3,-20(fp)
 8018048:	18c00324 	muli	r3,r3,12
 801804c:	10c5883a 	add	r2,r2,r3
 8018050:	10c00017 	ldw	r3,0(r2)
 8018054:	e0bffc17 	ldw	r2,-16(fp)
 8018058:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801805c:	008200b4 	movhi	r2,2050
 8018060:	10a71804 	addi	r2,r2,-25504
 8018064:	e0fffb17 	ldw	r3,-20(fp)
 8018068:	18c00324 	muli	r3,r3,12
 801806c:	10c5883a 	add	r2,r2,r3
 8018070:	10800104 	addi	r2,r2,4
 8018074:	10c00017 	ldw	r3,0(r2)
 8018078:	e0bffc17 	ldw	r2,-16(fp)
 801807c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8018080:	008200b4 	movhi	r2,2050
 8018084:	10a71804 	addi	r2,r2,-25504
 8018088:	e0fffb17 	ldw	r3,-20(fp)
 801808c:	18c00324 	muli	r3,r3,12
 8018090:	10c5883a 	add	r2,r2,r3
 8018094:	10800204 	addi	r2,r2,8
 8018098:	10c00017 	ldw	r3,0(r2)
 801809c:	e0bffc17 	ldw	r2,-16(fp)
 80180a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80180a4:	e13ffb17 	ldw	r4,-20(fp)
 80180a8:	800d95c0 	call	800d95c <alt_release_fd>
  }
} 
 80180ac:	0001883a 	nop
 80180b0:	e037883a 	mov	sp,fp
 80180b4:	dfc00117 	ldw	ra,4(sp)
 80180b8:	df000017 	ldw	fp,0(sp)
 80180bc:	dec00204 	addi	sp,sp,8
 80180c0:	f800283a 	ret

080180c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80180c4:	defffb04 	addi	sp,sp,-20
 80180c8:	dfc00415 	stw	ra,16(sp)
 80180cc:	df000315 	stw	fp,12(sp)
 80180d0:	df000304 	addi	fp,sp,12
 80180d4:	e13ffd15 	stw	r4,-12(fp)
 80180d8:	e17ffe15 	stw	r5,-8(fp)
 80180dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80180e0:	01c07fc4 	movi	r7,511
 80180e4:	01800044 	movi	r6,1
 80180e8:	e17ffd17 	ldw	r5,-12(fp)
 80180ec:	010200b4 	movhi	r4,2050
 80180f0:	21271b04 	addi	r4,r4,-25492
 80180f4:	80180000 	call	8018000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80180f8:	01c07fc4 	movi	r7,511
 80180fc:	000d883a 	mov	r6,zero
 8018100:	e17ffe17 	ldw	r5,-8(fp)
 8018104:	010200b4 	movhi	r4,2050
 8018108:	21271804 	addi	r4,r4,-25504
 801810c:	80180000 	call	8018000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8018110:	01c07fc4 	movi	r7,511
 8018114:	01800044 	movi	r6,1
 8018118:	e17fff17 	ldw	r5,-4(fp)
 801811c:	010200b4 	movhi	r4,2050
 8018120:	21271e04 	addi	r4,r4,-25480
 8018124:	80180000 	call	8018000 <alt_open_fd>
}  
 8018128:	0001883a 	nop
 801812c:	e037883a 	mov	sp,fp
 8018130:	dfc00117 	ldw	ra,4(sp)
 8018134:	df000017 	ldw	fp,0(sp)
 8018138:	dec00204 	addi	sp,sp,8
 801813c:	f800283a 	ret

08018140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018140:	defffe04 	addi	sp,sp,-8
 8018144:	dfc00115 	stw	ra,4(sp)
 8018148:	df000015 	stw	fp,0(sp)
 801814c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018150:	d0a00b17 	ldw	r2,-32724(gp)
 8018154:	10000326 	beq	r2,zero,8018164 <alt_get_errno+0x24>
 8018158:	d0a00b17 	ldw	r2,-32724(gp)
 801815c:	103ee83a 	callr	r2
 8018160:	00000106 	br	8018168 <alt_get_errno+0x28>
 8018164:	d0a71f04 	addi	r2,gp,-25476
}
 8018168:	e037883a 	mov	sp,fp
 801816c:	dfc00117 	ldw	ra,4(sp)
 8018170:	df000017 	ldw	fp,0(sp)
 8018174:	dec00204 	addi	sp,sp,8
 8018178:	f800283a 	ret

0801817c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801817c:	defffd04 	addi	sp,sp,-12
 8018180:	df000215 	stw	fp,8(sp)
 8018184:	df000204 	addi	fp,sp,8
 8018188:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801818c:	e0bfff17 	ldw	r2,-4(fp)
 8018190:	10800217 	ldw	r2,8(r2)
 8018194:	10d00034 	orhi	r3,r2,16384
 8018198:	e0bfff17 	ldw	r2,-4(fp)
 801819c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80181a0:	e03ffe15 	stw	zero,-8(fp)
 80181a4:	00001d06 	br	801821c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80181a8:	008200b4 	movhi	r2,2050
 80181ac:	10a71804 	addi	r2,r2,-25504
 80181b0:	e0fffe17 	ldw	r3,-8(fp)
 80181b4:	18c00324 	muli	r3,r3,12
 80181b8:	10c5883a 	add	r2,r2,r3
 80181bc:	10c00017 	ldw	r3,0(r2)
 80181c0:	e0bfff17 	ldw	r2,-4(fp)
 80181c4:	10800017 	ldw	r2,0(r2)
 80181c8:	1880111e 	bne	r3,r2,8018210 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80181cc:	008200b4 	movhi	r2,2050
 80181d0:	10a71804 	addi	r2,r2,-25504
 80181d4:	e0fffe17 	ldw	r3,-8(fp)
 80181d8:	18c00324 	muli	r3,r3,12
 80181dc:	10c5883a 	add	r2,r2,r3
 80181e0:	10800204 	addi	r2,r2,8
 80181e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80181e8:	1000090e 	bge	r2,zero,8018210 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80181ec:	e0bffe17 	ldw	r2,-8(fp)
 80181f0:	10c00324 	muli	r3,r2,12
 80181f4:	008200b4 	movhi	r2,2050
 80181f8:	10a71804 	addi	r2,r2,-25504
 80181fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8018200:	e0bfff17 	ldw	r2,-4(fp)
 8018204:	18800226 	beq	r3,r2,8018210 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8018208:	00bffcc4 	movi	r2,-13
 801820c:	00000806 	br	8018230 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8018210:	e0bffe17 	ldw	r2,-8(fp)
 8018214:	10800044 	addi	r2,r2,1
 8018218:	e0bffe15 	stw	r2,-8(fp)
 801821c:	d0a00a17 	ldw	r2,-32728(gp)
 8018220:	1007883a 	mov	r3,r2
 8018224:	e0bffe17 	ldw	r2,-8(fp)
 8018228:	18bfdf2e 	bgeu	r3,r2,80181a8 <__alt_data_end+0xf80181a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801822c:	0005883a 	mov	r2,zero
}
 8018230:	e037883a 	mov	sp,fp
 8018234:	df000017 	ldw	fp,0(sp)
 8018238:	dec00104 	addi	sp,sp,4
 801823c:	f800283a 	ret

08018240 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8018240:	defff604 	addi	sp,sp,-40
 8018244:	dfc00915 	stw	ra,36(sp)
 8018248:	df000815 	stw	fp,32(sp)
 801824c:	df000804 	addi	fp,sp,32
 8018250:	e13ffd15 	stw	r4,-12(fp)
 8018254:	e17ffe15 	stw	r5,-8(fp)
 8018258:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801825c:	00bfffc4 	movi	r2,-1
 8018260:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8018264:	00bffb44 	movi	r2,-19
 8018268:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801826c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8018270:	d1600804 	addi	r5,gp,-32736
 8018274:	e13ffd17 	ldw	r4,-12(fp)
 8018278:	8017ea00 	call	8017ea0 <alt_find_dev>
 801827c:	e0bff815 	stw	r2,-32(fp)
 8018280:	e0bff817 	ldw	r2,-32(fp)
 8018284:	1000051e 	bne	r2,zero,801829c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8018288:	e13ffd17 	ldw	r4,-12(fp)
 801828c:	80188b40 	call	80188b4 <alt_find_file>
 8018290:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8018294:	00800044 	movi	r2,1
 8018298:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801829c:	e0bff817 	ldw	r2,-32(fp)
 80182a0:	10002926 	beq	r2,zero,8018348 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80182a4:	e13ff817 	ldw	r4,-32(fp)
 80182a8:	80189bc0 	call	80189bc <alt_get_fd>
 80182ac:	e0bff915 	stw	r2,-28(fp)
 80182b0:	e0bff917 	ldw	r2,-28(fp)
 80182b4:	1000030e 	bge	r2,zero,80182c4 <open+0x84>
    {
      status = index;
 80182b8:	e0bff917 	ldw	r2,-28(fp)
 80182bc:	e0bffa15 	stw	r2,-24(fp)
 80182c0:	00002306 	br	8018350 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80182c4:	e0bff917 	ldw	r2,-28(fp)
 80182c8:	10c00324 	muli	r3,r2,12
 80182cc:	008200b4 	movhi	r2,2050
 80182d0:	10a71804 	addi	r2,r2,-25504
 80182d4:	1885883a 	add	r2,r3,r2
 80182d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80182dc:	e0fffe17 	ldw	r3,-8(fp)
 80182e0:	00900034 	movhi	r2,16384
 80182e4:	10bfffc4 	addi	r2,r2,-1
 80182e8:	1886703a 	and	r3,r3,r2
 80182ec:	e0bffc17 	ldw	r2,-16(fp)
 80182f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80182f4:	e0bffb17 	ldw	r2,-20(fp)
 80182f8:	1000051e 	bne	r2,zero,8018310 <open+0xd0>
 80182fc:	e13ffc17 	ldw	r4,-16(fp)
 8018300:	801817c0 	call	801817c <alt_file_locked>
 8018304:	e0bffa15 	stw	r2,-24(fp)
 8018308:	e0bffa17 	ldw	r2,-24(fp)
 801830c:	10001016 	blt	r2,zero,8018350 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8018310:	e0bff817 	ldw	r2,-32(fp)
 8018314:	10800317 	ldw	r2,12(r2)
 8018318:	10000826 	beq	r2,zero,801833c <open+0xfc>
 801831c:	e0bff817 	ldw	r2,-32(fp)
 8018320:	10800317 	ldw	r2,12(r2)
 8018324:	e1ffff17 	ldw	r7,-4(fp)
 8018328:	e1bffe17 	ldw	r6,-8(fp)
 801832c:	e17ffd17 	ldw	r5,-12(fp)
 8018330:	e13ffc17 	ldw	r4,-16(fp)
 8018334:	103ee83a 	callr	r2
 8018338:	00000106 	br	8018340 <open+0x100>
 801833c:	0005883a 	mov	r2,zero
 8018340:	e0bffa15 	stw	r2,-24(fp)
 8018344:	00000206 	br	8018350 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8018348:	00bffb44 	movi	r2,-19
 801834c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8018350:	e0bffa17 	ldw	r2,-24(fp)
 8018354:	1000090e 	bge	r2,zero,801837c <open+0x13c>
  {
    alt_release_fd (index);  
 8018358:	e13ff917 	ldw	r4,-28(fp)
 801835c:	800d95c0 	call	800d95c <alt_release_fd>
    ALT_ERRNO = -status;
 8018360:	80181400 	call	8018140 <alt_get_errno>
 8018364:	1007883a 	mov	r3,r2
 8018368:	e0bffa17 	ldw	r2,-24(fp)
 801836c:	0085c83a 	sub	r2,zero,r2
 8018370:	18800015 	stw	r2,0(r3)
    return -1;
 8018374:	00bfffc4 	movi	r2,-1
 8018378:	00000106 	br	8018380 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 801837c:	e0bff917 	ldw	r2,-28(fp)
}
 8018380:	e037883a 	mov	sp,fp
 8018384:	dfc00117 	ldw	ra,4(sp)
 8018388:	df000017 	ldw	fp,0(sp)
 801838c:	dec00204 	addi	sp,sp,8
 8018390:	f800283a 	ret

08018394 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8018394:	defffa04 	addi	sp,sp,-24
 8018398:	df000515 	stw	fp,20(sp)
 801839c:	df000504 	addi	fp,sp,20
 80183a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80183a4:	0005303a 	rdctl	r2,status
 80183a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80183ac:	e0fffc17 	ldw	r3,-16(fp)
 80183b0:	00bfff84 	movi	r2,-2
 80183b4:	1884703a 	and	r2,r3,r2
 80183b8:	1001703a 	wrctl	status,r2
  
  return context;
 80183bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80183c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80183c4:	e0bfff17 	ldw	r2,-4(fp)
 80183c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80183cc:	e0bffd17 	ldw	r2,-12(fp)
 80183d0:	10800017 	ldw	r2,0(r2)
 80183d4:	e0fffd17 	ldw	r3,-12(fp)
 80183d8:	18c00117 	ldw	r3,4(r3)
 80183dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80183e0:	e0bffd17 	ldw	r2,-12(fp)
 80183e4:	10800117 	ldw	r2,4(r2)
 80183e8:	e0fffd17 	ldw	r3,-12(fp)
 80183ec:	18c00017 	ldw	r3,0(r3)
 80183f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80183f4:	e0bffd17 	ldw	r2,-12(fp)
 80183f8:	e0fffd17 	ldw	r3,-12(fp)
 80183fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8018400:	e0bffd17 	ldw	r2,-12(fp)
 8018404:	e0fffd17 	ldw	r3,-12(fp)
 8018408:	10c00015 	stw	r3,0(r2)
 801840c:	e0bffb17 	ldw	r2,-20(fp)
 8018410:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018414:	e0bffe17 	ldw	r2,-8(fp)
 8018418:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801841c:	0001883a 	nop
 8018420:	e037883a 	mov	sp,fp
 8018424:	df000017 	ldw	fp,0(sp)
 8018428:	dec00104 	addi	sp,sp,4
 801842c:	f800283a 	ret

08018430 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8018430:	defffb04 	addi	sp,sp,-20
 8018434:	dfc00415 	stw	ra,16(sp)
 8018438:	df000315 	stw	fp,12(sp)
 801843c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8018440:	d0a02d17 	ldw	r2,-32588(gp)
 8018444:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8018448:	d0a73f17 	ldw	r2,-25348(gp)
 801844c:	10800044 	addi	r2,r2,1
 8018450:	d0a73f15 	stw	r2,-25348(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8018454:	00002e06 	br	8018510 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8018458:	e0bffd17 	ldw	r2,-12(fp)
 801845c:	10800017 	ldw	r2,0(r2)
 8018460:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8018464:	e0bffd17 	ldw	r2,-12(fp)
 8018468:	10800403 	ldbu	r2,16(r2)
 801846c:	10803fcc 	andi	r2,r2,255
 8018470:	10000426 	beq	r2,zero,8018484 <alt_tick+0x54>
 8018474:	d0a73f17 	ldw	r2,-25348(gp)
 8018478:	1000021e 	bne	r2,zero,8018484 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801847c:	e0bffd17 	ldw	r2,-12(fp)
 8018480:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8018484:	e0bffd17 	ldw	r2,-12(fp)
 8018488:	10800217 	ldw	r2,8(r2)
 801848c:	d0e73f17 	ldw	r3,-25348(gp)
 8018490:	18801d36 	bltu	r3,r2,8018508 <alt_tick+0xd8>
 8018494:	e0bffd17 	ldw	r2,-12(fp)
 8018498:	10800403 	ldbu	r2,16(r2)
 801849c:	10803fcc 	andi	r2,r2,255
 80184a0:	1000191e 	bne	r2,zero,8018508 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80184a4:	e0bffd17 	ldw	r2,-12(fp)
 80184a8:	10800317 	ldw	r2,12(r2)
 80184ac:	e0fffd17 	ldw	r3,-12(fp)
 80184b0:	18c00517 	ldw	r3,20(r3)
 80184b4:	1809883a 	mov	r4,r3
 80184b8:	103ee83a 	callr	r2
 80184bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80184c0:	e0bfff17 	ldw	r2,-4(fp)
 80184c4:	1000031e 	bne	r2,zero,80184d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80184c8:	e13ffd17 	ldw	r4,-12(fp)
 80184cc:	80183940 	call	8018394 <alt_alarm_stop>
 80184d0:	00000d06 	br	8018508 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80184d4:	e0bffd17 	ldw	r2,-12(fp)
 80184d8:	10c00217 	ldw	r3,8(r2)
 80184dc:	e0bfff17 	ldw	r2,-4(fp)
 80184e0:	1887883a 	add	r3,r3,r2
 80184e4:	e0bffd17 	ldw	r2,-12(fp)
 80184e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80184ec:	e0bffd17 	ldw	r2,-12(fp)
 80184f0:	10c00217 	ldw	r3,8(r2)
 80184f4:	d0a73f17 	ldw	r2,-25348(gp)
 80184f8:	1880032e 	bgeu	r3,r2,8018508 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80184fc:	e0bffd17 	ldw	r2,-12(fp)
 8018500:	00c00044 	movi	r3,1
 8018504:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8018508:	e0bffe17 	ldw	r2,-8(fp)
 801850c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8018510:	e0fffd17 	ldw	r3,-12(fp)
 8018514:	d0a02d04 	addi	r2,gp,-32588
 8018518:	18bfcf1e 	bne	r3,r2,8018458 <__alt_data_end+0xf8018458>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801851c:	800eb480 	call	800eb48 <OSTimeTick>
}
 8018520:	0001883a 	nop
 8018524:	e037883a 	mov	sp,fp
 8018528:	dfc00117 	ldw	ra,4(sp)
 801852c:	df000017 	ldw	fp,0(sp)
 8018530:	dec00204 	addi	sp,sp,8
 8018534:	f800283a 	ret

08018538 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8018538:	deffff04 	addi	sp,sp,-4
 801853c:	df000015 	stw	fp,0(sp)
 8018540:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8018544:	000170fa 	wrctl	ienable,zero
}
 8018548:	0001883a 	nop
 801854c:	e037883a 	mov	sp,fp
 8018550:	df000017 	ldw	fp,0(sp)
 8018554:	dec00104 	addi	sp,sp,4
 8018558:	f800283a 	ret

0801855c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 801855c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 8018560:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 8018564:	d1273817 	ldw	r4,-25376(gp)

      stw ra,  0(sp)
 8018568:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 801856c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 8018570:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 8018574:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 8018578:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 801857c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 8018580:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 8018584:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 8018588:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 801858c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 8018590:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 8018594:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 8018598:	80187d00 	call	80187d0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 801859c:	d1273317 	ldw	r4,-25396(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 80185a0:	d1672b07 	ldb	r5,-25428(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 80185a4:	d1273815 	stw	r4,-25376(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 80185a8:	d1672b45 	stb	r5,-25427(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 80185ac:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 80185b0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 80185b4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 80185b8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 80185bc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 80185c0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 80185c4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 80185c8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 80185cc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 80185d0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 80185d4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 80185d8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 80185dc:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 80185e0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 80185e4:	f800283a 	ret

080185e8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 80185e8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 80185ec:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 80185f0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 80185f4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 80185f8:	80187d00 	call	80187d0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 80185fc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 8018600:	d4a72945 	stb	r18,-25435(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 8018604:	003fe506 	br	801859c <__alt_data_end+0xf801859c>

08018608 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 8018608:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 801860c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 8018610:	10800054 	ori	r2,r2,1
      wrctl status, r2
 8018614:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 8018618:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 801861c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 8018620:	dec00204 	addi	sp,sp,8

      callr r2
 8018624:	103ee83a 	callr	r2

      nop
 8018628:	0001883a 	nop

0801862c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 801862c:	defff704 	addi	sp,sp,-36
 8018630:	dfc00815 	stw	ra,32(sp)
 8018634:	df000715 	stw	fp,28(sp)
 8018638:	df000704 	addi	fp,sp,28
 801863c:	e13ffc15 	stw	r4,-16(fp)
 8018640:	e17ffd15 	stw	r5,-12(fp)
 8018644:	e1bffe15 	stw	r6,-8(fp)
 8018648:	3805883a 	mov	r2,r7
 801864c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 8018650:	e0fffe17 	ldw	r3,-8(fp)
 8018654:	00bfff04 	movi	r2,-4
 8018658:	1884703a 	and	r2,r3,r2
 801865c:	10bef704 	addi	r2,r2,-1060
 8018660:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 8018664:	01810904 	movi	r6,1060
 8018668:	000b883a 	mov	r5,zero
 801866c:	e13ff917 	ldw	r4,-28(fp)
 8018670:	80064180 	call	8006418 <memset>
 8018674:	e0bff917 	ldw	r2,-28(fp)
 8018678:	10c0bb04 	addi	r3,r2,748
 801867c:	e0bff917 	ldw	r2,-28(fp)
 8018680:	10c00115 	stw	r3,4(r2)
 8018684:	e0bff917 	ldw	r2,-28(fp)
 8018688:	10c0d504 	addi	r3,r2,852
 801868c:	e0bff917 	ldw	r2,-28(fp)
 8018690:	10c00215 	stw	r3,8(r2)
 8018694:	e0bff917 	ldw	r2,-28(fp)
 8018698:	10c0ef04 	addi	r3,r2,956
 801869c:	e0bff917 	ldw	r2,-28(fp)
 80186a0:	10c00315 	stw	r3,12(r2)
 80186a4:	e0fff917 	ldw	r3,-28(fp)
 80186a8:	008200b4 	movhi	r2,2050
 80186ac:	10a4e404 	addi	r2,r2,-27760
 80186b0:	18800d15 	stw	r2,52(r3)
 80186b4:	e0bff917 	ldw	r2,-28(fp)
 80186b8:	00c00044 	movi	r3,1
 80186bc:	10c02915 	stw	r3,164(r2)
 80186c0:	10002a15 	stw	zero,168(r2)
 80186c4:	e0bff917 	ldw	r2,-28(fp)
 80186c8:	00ccc384 	movi	r3,13070
 80186cc:	10c02b0d 	sth	r3,172(r2)
 80186d0:	e0bff917 	ldw	r2,-28(fp)
 80186d4:	00eaf344 	movi	r3,-21555
 80186d8:	10c02b8d 	sth	r3,174(r2)
 80186dc:	e0bff917 	ldw	r2,-28(fp)
 80186e0:	00c48d04 	movi	r3,4660
 80186e4:	10c02c0d 	sth	r3,176(r2)
 80186e8:	e0bff917 	ldw	r2,-28(fp)
 80186ec:	00f99b44 	movi	r3,-6547
 80186f0:	10c02c8d 	sth	r3,178(r2)
 80186f4:	e0bff917 	ldw	r2,-28(fp)
 80186f8:	00f7bb04 	movi	r3,-8468
 80186fc:	10c02d0d 	sth	r3,180(r2)
 8018700:	e0bff917 	ldw	r2,-28(fp)
 8018704:	00c00144 	movi	r3,5
 8018708:	10c02d8d 	sth	r3,182(r2)
 801870c:	e0bff917 	ldw	r2,-28(fp)
 8018710:	00c002c4 	movi	r3,11
 8018714:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 8018718:	e0bff917 	ldw	r2,-28(fp)
 801871c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 8018720:	e0bffa17 	ldw	r2,-24(fp)
 8018724:	10bff304 	addi	r2,r2,-52
 8018728:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 801872c:	e0bffb17 	ldw	r2,-20(fp)
 8018730:	10800c04 	addi	r2,r2,48
 8018734:	e0fffc17 	ldw	r3,-16(fp)
 8018738:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 801873c:	e0bffb17 	ldw	r2,-20(fp)
 8018740:	10800b04 	addi	r2,r2,44
 8018744:	e0fffd17 	ldw	r3,-12(fp)
 8018748:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 801874c:	e0bffb17 	ldw	r2,-20(fp)
 8018750:	10800a04 	addi	r2,r2,40
 8018754:	e0fff917 	ldw	r3,-28(fp)
 8018758:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 801875c:	008200b4 	movhi	r2,2050
 8018760:	10a18204 	addi	r2,r2,-31224
 8018764:	10c00104 	addi	r3,r2,4
 8018768:	e0bffb17 	ldw	r2,-20(fp)
 801876c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 8018770:	e0bffb17 	ldw	r2,-20(fp)
}
 8018774:	e037883a 	mov	sp,fp
 8018778:	dfc00117 	ldw	ra,4(sp)
 801877c:	df000017 	ldw	fp,0(sp)
 8018780:	dec00204 	addi	sp,sp,8
 8018784:	f800283a 	ret

08018788 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 8018788:	defffe04 	addi	sp,sp,-8
 801878c:	df000115 	stw	fp,4(sp)
 8018790:	df000104 	addi	fp,sp,4
 8018794:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 8018798:	0001883a 	nop
 801879c:	e037883a 	mov	sp,fp
 80187a0:	df000017 	ldw	fp,0(sp)
 80187a4:	dec00104 	addi	sp,sp,4
 80187a8:	f800283a 	ret

080187ac <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 80187ac:	defffe04 	addi	sp,sp,-8
 80187b0:	df000115 	stw	fp,4(sp)
 80187b4:	df000104 	addi	fp,sp,4
 80187b8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 80187bc:	0001883a 	nop
 80187c0:	e037883a 	mov	sp,fp
 80187c4:	df000017 	ldw	fp,0(sp)
 80187c8:	dec00104 	addi	sp,sp,4
 80187cc:	f800283a 	ret

080187d0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 80187d0:	deffff04 	addi	sp,sp,-4
 80187d4:	df000015 	stw	fp,0(sp)
 80187d8:	d839883a 	mov	fp,sp
}
 80187dc:	0001883a 	nop
 80187e0:	e037883a 	mov	sp,fp
 80187e4:	df000017 	ldw	fp,0(sp)
 80187e8:	dec00104 	addi	sp,sp,4
 80187ec:	f800283a 	ret

080187f0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 80187f0:	deffff04 	addi	sp,sp,-4
 80187f4:	df000015 	stw	fp,0(sp)
 80187f8:	d839883a 	mov	fp,sp
}
 80187fc:	0001883a 	nop
 8018800:	e037883a 	mov	sp,fp
 8018804:	df000017 	ldw	fp,0(sp)
 8018808:	dec00104 	addi	sp,sp,4
 801880c:	f800283a 	ret

08018810 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 8018810:	deffff04 	addi	sp,sp,-4
 8018814:	df000015 	stw	fp,0(sp)
 8018818:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 801881c:	0001883a 	nop
 8018820:	e037883a 	mov	sp,fp
 8018824:	df000017 	ldw	fp,0(sp)
 8018828:	dec00104 	addi	sp,sp,4
 801882c:	f800283a 	ret

08018830 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 8018830:	deffff04 	addi	sp,sp,-4
 8018834:	df000015 	stw	fp,0(sp)
 8018838:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 801883c:	0001883a 	nop
 8018840:	e037883a 	mov	sp,fp
 8018844:	df000017 	ldw	fp,0(sp)
 8018848:	dec00104 	addi	sp,sp,4
 801884c:	f800283a 	ret

08018850 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 8018850:	deffff04 	addi	sp,sp,-4
 8018854:	df000015 	stw	fp,0(sp)
 8018858:	d839883a 	mov	fp,sp
}
 801885c:	0001883a 	nop
 8018860:	e037883a 	mov	sp,fp
 8018864:	df000017 	ldw	fp,0(sp)
 8018868:	dec00104 	addi	sp,sp,4
 801886c:	f800283a 	ret

08018870 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 8018870:	deffff04 	addi	sp,sp,-4
 8018874:	df000015 	stw	fp,0(sp)
 8018878:	d839883a 	mov	fp,sp
}
 801887c:	0001883a 	nop
 8018880:	e037883a 	mov	sp,fp
 8018884:	df000017 	ldw	fp,0(sp)
 8018888:	dec00104 	addi	sp,sp,4
 801888c:	f800283a 	ret

08018890 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 8018890:	defffe04 	addi	sp,sp,-8
 8018894:	df000115 	stw	fp,4(sp)
 8018898:	df000104 	addi	fp,sp,4
 801889c:	e13fff15 	stw	r4,-4(fp)
}
 80188a0:	0001883a 	nop
 80188a4:	e037883a 	mov	sp,fp
 80188a8:	df000017 	ldw	fp,0(sp)
 80188ac:	dec00104 	addi	sp,sp,4
 80188b0:	f800283a 	ret

080188b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80188b4:	defffb04 	addi	sp,sp,-20
 80188b8:	dfc00415 	stw	ra,16(sp)
 80188bc:	df000315 	stw	fp,12(sp)
 80188c0:	df000304 	addi	fp,sp,12
 80188c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80188c8:	d0a00617 	ldw	r2,-32744(gp)
 80188cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80188d0:	00003106 	br	8018998 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80188d4:	e0bffd17 	ldw	r2,-12(fp)
 80188d8:	10800217 	ldw	r2,8(r2)
 80188dc:	1009883a 	mov	r4,r2
 80188e0:	80007e80 	call	80007e8 <strlen>
 80188e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80188e8:	e0bffd17 	ldw	r2,-12(fp)
 80188ec:	10c00217 	ldw	r3,8(r2)
 80188f0:	e0bffe17 	ldw	r2,-8(fp)
 80188f4:	10bfffc4 	addi	r2,r2,-1
 80188f8:	1885883a 	add	r2,r3,r2
 80188fc:	10800003 	ldbu	r2,0(r2)
 8018900:	10803fcc 	andi	r2,r2,255
 8018904:	1080201c 	xori	r2,r2,128
 8018908:	10bfe004 	addi	r2,r2,-128
 801890c:	10800bd8 	cmpnei	r2,r2,47
 8018910:	1000031e 	bne	r2,zero,8018920 <alt_find_file+0x6c>
    {
      len -= 1;
 8018914:	e0bffe17 	ldw	r2,-8(fp)
 8018918:	10bfffc4 	addi	r2,r2,-1
 801891c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8018920:	e0bffe17 	ldw	r2,-8(fp)
 8018924:	e0ffff17 	ldw	r3,-4(fp)
 8018928:	1885883a 	add	r2,r3,r2
 801892c:	10800003 	ldbu	r2,0(r2)
 8018930:	10803fcc 	andi	r2,r2,255
 8018934:	1080201c 	xori	r2,r2,128
 8018938:	10bfe004 	addi	r2,r2,-128
 801893c:	10800be0 	cmpeqi	r2,r2,47
 8018940:	1000081e 	bne	r2,zero,8018964 <alt_find_file+0xb0>
 8018944:	e0bffe17 	ldw	r2,-8(fp)
 8018948:	e0ffff17 	ldw	r3,-4(fp)
 801894c:	1885883a 	add	r2,r3,r2
 8018950:	10800003 	ldbu	r2,0(r2)
 8018954:	10803fcc 	andi	r2,r2,255
 8018958:	1080201c 	xori	r2,r2,128
 801895c:	10bfe004 	addi	r2,r2,-128
 8018960:	10000a1e 	bne	r2,zero,801898c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8018964:	e0bffd17 	ldw	r2,-12(fp)
 8018968:	10800217 	ldw	r2,8(r2)
 801896c:	e0fffe17 	ldw	r3,-8(fp)
 8018970:	180d883a 	mov	r6,r3
 8018974:	e17fff17 	ldw	r5,-4(fp)
 8018978:	1009883a 	mov	r4,r2
 801897c:	8018b740 	call	8018b74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8018980:	1000021e 	bne	r2,zero,801898c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8018984:	e0bffd17 	ldw	r2,-12(fp)
 8018988:	00000706 	br	80189a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801898c:	e0bffd17 	ldw	r2,-12(fp)
 8018990:	10800017 	ldw	r2,0(r2)
 8018994:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8018998:	e0fffd17 	ldw	r3,-12(fp)
 801899c:	d0a00604 	addi	r2,gp,-32744
 80189a0:	18bfcc1e 	bne	r3,r2,80188d4 <__alt_data_end+0xf80188d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80189a4:	0005883a 	mov	r2,zero
}
 80189a8:	e037883a 	mov	sp,fp
 80189ac:	dfc00117 	ldw	ra,4(sp)
 80189b0:	df000017 	ldw	fp,0(sp)
 80189b4:	dec00204 	addi	sp,sp,8
 80189b8:	f800283a 	ret

080189bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80189bc:	defff904 	addi	sp,sp,-28
 80189c0:	dfc00615 	stw	ra,24(sp)
 80189c4:	df000515 	stw	fp,20(sp)
 80189c8:	df000504 	addi	fp,sp,20
 80189cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80189d0:	00bffa04 	movi	r2,-24
 80189d4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 80189d8:	d0a72017 	ldw	r2,-25472(gp)
 80189dc:	e0bffd15 	stw	r2,-12(fp)
 80189e0:	e03ffe0d 	sth	zero,-8(fp)
 80189e4:	e0bffe0b 	ldhu	r2,-8(fp)
 80189e8:	e0fffe84 	addi	r3,fp,-6
 80189ec:	180d883a 	mov	r6,r3
 80189f0:	100b883a 	mov	r5,r2
 80189f4:	e13ffd17 	ldw	r4,-12(fp)
 80189f8:	80144a40 	call	80144a4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80189fc:	e03ffb15 	stw	zero,-20(fp)
 8018a00:	00001906 	br	8018a68 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8018a04:	008200b4 	movhi	r2,2050
 8018a08:	10a71804 	addi	r2,r2,-25504
 8018a0c:	e0fffb17 	ldw	r3,-20(fp)
 8018a10:	18c00324 	muli	r3,r3,12
 8018a14:	10c5883a 	add	r2,r2,r3
 8018a18:	10800017 	ldw	r2,0(r2)
 8018a1c:	10000f1e 	bne	r2,zero,8018a5c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8018a20:	008200b4 	movhi	r2,2050
 8018a24:	10a71804 	addi	r2,r2,-25504
 8018a28:	e0fffb17 	ldw	r3,-20(fp)
 8018a2c:	18c00324 	muli	r3,r3,12
 8018a30:	10c5883a 	add	r2,r2,r3
 8018a34:	e0ffff17 	ldw	r3,-4(fp)
 8018a38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8018a3c:	d0e00a17 	ldw	r3,-32728(gp)
 8018a40:	e0bffb17 	ldw	r2,-20(fp)
 8018a44:	1880020e 	bge	r3,r2,8018a50 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8018a48:	e0bffb17 	ldw	r2,-20(fp)
 8018a4c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 8018a50:	e0bffb17 	ldw	r2,-20(fp)
 8018a54:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 8018a58:	00000606 	br	8018a74 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8018a5c:	e0bffb17 	ldw	r2,-20(fp)
 8018a60:	10800044 	addi	r2,r2,1
 8018a64:	e0bffb15 	stw	r2,-20(fp)
 8018a68:	e0bffb17 	ldw	r2,-20(fp)
 8018a6c:	10800810 	cmplti	r2,r2,32
 8018a70:	103fe41e 	bne	r2,zero,8018a04 <__alt_data_end+0xf8018a04>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 8018a74:	d0a72017 	ldw	r2,-25472(gp)
 8018a78:	1009883a 	mov	r4,r2
 8018a7c:	801481c0 	call	801481c <OSSemPost>

  return rc;
 8018a80:	e0bffc17 	ldw	r2,-16(fp)
}
 8018a84:	e037883a 	mov	sp,fp
 8018a88:	dfc00117 	ldw	ra,4(sp)
 8018a8c:	df000017 	ldw	fp,0(sp)
 8018a90:	dec00204 	addi	sp,sp,8
 8018a94:	f800283a 	ret

08018a98 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8018a98:	defffb04 	addi	sp,sp,-20
 8018a9c:	df000415 	stw	fp,16(sp)
 8018aa0:	df000404 	addi	fp,sp,16
 8018aa4:	e13ffe15 	stw	r4,-8(fp)
 8018aa8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8018aac:	e0bfff17 	ldw	r2,-4(fp)
 8018ab0:	10840070 	cmpltui	r2,r2,4097
 8018ab4:	1000021e 	bne	r2,zero,8018ac0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8018ab8:	00840004 	movi	r2,4096
 8018abc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8018ac0:	e0fffe17 	ldw	r3,-8(fp)
 8018ac4:	e0bfff17 	ldw	r2,-4(fp)
 8018ac8:	1885883a 	add	r2,r3,r2
 8018acc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8018ad0:	e0bffe17 	ldw	r2,-8(fp)
 8018ad4:	e0bffc15 	stw	r2,-16(fp)
 8018ad8:	00000506 	br	8018af0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8018adc:	e0bffc17 	ldw	r2,-16(fp)
 8018ae0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8018ae4:	e0bffc17 	ldw	r2,-16(fp)
 8018ae8:	10800804 	addi	r2,r2,32
 8018aec:	e0bffc15 	stw	r2,-16(fp)
 8018af0:	e0fffc17 	ldw	r3,-16(fp)
 8018af4:	e0bffd17 	ldw	r2,-12(fp)
 8018af8:	18bff836 	bltu	r3,r2,8018adc <__alt_data_end+0xf8018adc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8018afc:	e0bffe17 	ldw	r2,-8(fp)
 8018b00:	108007cc 	andi	r2,r2,31
 8018b04:	10000226 	beq	r2,zero,8018b10 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8018b08:	e0bffc17 	ldw	r2,-16(fp)
 8018b0c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8018b10:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8018b14:	0001883a 	nop
 8018b18:	e037883a 	mov	sp,fp
 8018b1c:	df000017 	ldw	fp,0(sp)
 8018b20:	dec00104 	addi	sp,sp,4
 8018b24:	f800283a 	ret

08018b28 <atexit>:
 8018b28:	200b883a 	mov	r5,r4
 8018b2c:	000f883a 	mov	r7,zero
 8018b30:	000d883a 	mov	r6,zero
 8018b34:	0009883a 	mov	r4,zero
 8018b38:	8018bf01 	jmpi	8018bf0 <__register_exitproc>

08018b3c <exit>:
 8018b3c:	defffe04 	addi	sp,sp,-8
 8018b40:	000b883a 	mov	r5,zero
 8018b44:	dc000015 	stw	r16,0(sp)
 8018b48:	dfc00115 	stw	ra,4(sp)
 8018b4c:	2021883a 	mov	r16,r4
 8018b50:	8018d080 	call	8018d08 <__call_exitprocs>
 8018b54:	008200b4 	movhi	r2,2050
 8018b58:	10ab9e04 	addi	r2,r2,-20872
 8018b5c:	11000017 	ldw	r4,0(r2)
 8018b60:	20800f17 	ldw	r2,60(r4)
 8018b64:	10000126 	beq	r2,zero,8018b6c <exit+0x30>
 8018b68:	103ee83a 	callr	r2
 8018b6c:	8009883a 	mov	r4,r16
 8018b70:	8018e880 	call	8018e88 <_exit>

08018b74 <memcmp>:
 8018b74:	01c000c4 	movi	r7,3
 8018b78:	3980192e 	bgeu	r7,r6,8018be0 <memcmp+0x6c>
 8018b7c:	2144b03a 	or	r2,r4,r5
 8018b80:	11c4703a 	and	r2,r2,r7
 8018b84:	10000f26 	beq	r2,zero,8018bc4 <memcmp+0x50>
 8018b88:	20800003 	ldbu	r2,0(r4)
 8018b8c:	28c00003 	ldbu	r3,0(r5)
 8018b90:	10c0151e 	bne	r2,r3,8018be8 <memcmp+0x74>
 8018b94:	31bfff84 	addi	r6,r6,-2
 8018b98:	01ffffc4 	movi	r7,-1
 8018b9c:	00000406 	br	8018bb0 <memcmp+0x3c>
 8018ba0:	20800003 	ldbu	r2,0(r4)
 8018ba4:	28c00003 	ldbu	r3,0(r5)
 8018ba8:	31bfffc4 	addi	r6,r6,-1
 8018bac:	10c00e1e 	bne	r2,r3,8018be8 <memcmp+0x74>
 8018bb0:	21000044 	addi	r4,r4,1
 8018bb4:	29400044 	addi	r5,r5,1
 8018bb8:	31fff91e 	bne	r6,r7,8018ba0 <__alt_data_end+0xf8018ba0>
 8018bbc:	0005883a 	mov	r2,zero
 8018bc0:	f800283a 	ret
 8018bc4:	20c00017 	ldw	r3,0(r4)
 8018bc8:	28800017 	ldw	r2,0(r5)
 8018bcc:	18bfee1e 	bne	r3,r2,8018b88 <__alt_data_end+0xf8018b88>
 8018bd0:	31bfff04 	addi	r6,r6,-4
 8018bd4:	21000104 	addi	r4,r4,4
 8018bd8:	29400104 	addi	r5,r5,4
 8018bdc:	39bff936 	bltu	r7,r6,8018bc4 <__alt_data_end+0xf8018bc4>
 8018be0:	303fe91e 	bne	r6,zero,8018b88 <__alt_data_end+0xf8018b88>
 8018be4:	003ff506 	br	8018bbc <__alt_data_end+0xf8018bbc>
 8018be8:	10c5c83a 	sub	r2,r2,r3
 8018bec:	f800283a 	ret

08018bf0 <__register_exitproc>:
 8018bf0:	defffa04 	addi	sp,sp,-24
 8018bf4:	dc000315 	stw	r16,12(sp)
 8018bf8:	040200b4 	movhi	r16,2050
 8018bfc:	842b9e04 	addi	r16,r16,-20872
 8018c00:	80c00017 	ldw	r3,0(r16)
 8018c04:	dc400415 	stw	r17,16(sp)
 8018c08:	dfc00515 	stw	ra,20(sp)
 8018c0c:	18805217 	ldw	r2,328(r3)
 8018c10:	2023883a 	mov	r17,r4
 8018c14:	10003726 	beq	r2,zero,8018cf4 <__register_exitproc+0x104>
 8018c18:	10c00117 	ldw	r3,4(r2)
 8018c1c:	010007c4 	movi	r4,31
 8018c20:	20c00e16 	blt	r4,r3,8018c5c <__register_exitproc+0x6c>
 8018c24:	1a000044 	addi	r8,r3,1
 8018c28:	8800221e 	bne	r17,zero,8018cb4 <__register_exitproc+0xc4>
 8018c2c:	18c00084 	addi	r3,r3,2
 8018c30:	18c7883a 	add	r3,r3,r3
 8018c34:	18c7883a 	add	r3,r3,r3
 8018c38:	12000115 	stw	r8,4(r2)
 8018c3c:	10c7883a 	add	r3,r2,r3
 8018c40:	19400015 	stw	r5,0(r3)
 8018c44:	0005883a 	mov	r2,zero
 8018c48:	dfc00517 	ldw	ra,20(sp)
 8018c4c:	dc400417 	ldw	r17,16(sp)
 8018c50:	dc000317 	ldw	r16,12(sp)
 8018c54:	dec00604 	addi	sp,sp,24
 8018c58:	f800283a 	ret
 8018c5c:	00800034 	movhi	r2,0
 8018c60:	10800004 	addi	r2,r2,0
 8018c64:	10002626 	beq	r2,zero,8018d00 <__register_exitproc+0x110>
 8018c68:	01006404 	movi	r4,400
 8018c6c:	d9400015 	stw	r5,0(sp)
 8018c70:	d9800115 	stw	r6,4(sp)
 8018c74:	d9c00215 	stw	r7,8(sp)
 8018c78:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 8018c7c:	d9400017 	ldw	r5,0(sp)
 8018c80:	d9800117 	ldw	r6,4(sp)
 8018c84:	d9c00217 	ldw	r7,8(sp)
 8018c88:	10001d26 	beq	r2,zero,8018d00 <__register_exitproc+0x110>
 8018c8c:	81000017 	ldw	r4,0(r16)
 8018c90:	10000115 	stw	zero,4(r2)
 8018c94:	02000044 	movi	r8,1
 8018c98:	22405217 	ldw	r9,328(r4)
 8018c9c:	0007883a 	mov	r3,zero
 8018ca0:	12400015 	stw	r9,0(r2)
 8018ca4:	20805215 	stw	r2,328(r4)
 8018ca8:	10006215 	stw	zero,392(r2)
 8018cac:	10006315 	stw	zero,396(r2)
 8018cb0:	883fde26 	beq	r17,zero,8018c2c <__alt_data_end+0xf8018c2c>
 8018cb4:	18c9883a 	add	r4,r3,r3
 8018cb8:	2109883a 	add	r4,r4,r4
 8018cbc:	1109883a 	add	r4,r2,r4
 8018cc0:	21802215 	stw	r6,136(r4)
 8018cc4:	01800044 	movi	r6,1
 8018cc8:	12406217 	ldw	r9,392(r2)
 8018ccc:	30cc983a 	sll	r6,r6,r3
 8018cd0:	4992b03a 	or	r9,r9,r6
 8018cd4:	12406215 	stw	r9,392(r2)
 8018cd8:	21c04215 	stw	r7,264(r4)
 8018cdc:	01000084 	movi	r4,2
 8018ce0:	893fd21e 	bne	r17,r4,8018c2c <__alt_data_end+0xf8018c2c>
 8018ce4:	11006317 	ldw	r4,396(r2)
 8018ce8:	218cb03a 	or	r6,r4,r6
 8018cec:	11806315 	stw	r6,396(r2)
 8018cf0:	003fce06 	br	8018c2c <__alt_data_end+0xf8018c2c>
 8018cf4:	18805304 	addi	r2,r3,332
 8018cf8:	18805215 	stw	r2,328(r3)
 8018cfc:	003fc606 	br	8018c18 <__alt_data_end+0xf8018c18>
 8018d00:	00bfffc4 	movi	r2,-1
 8018d04:	003fd006 	br	8018c48 <__alt_data_end+0xf8018c48>

08018d08 <__call_exitprocs>:
 8018d08:	defff504 	addi	sp,sp,-44
 8018d0c:	df000915 	stw	fp,36(sp)
 8018d10:	dd400615 	stw	r21,24(sp)
 8018d14:	dc800315 	stw	r18,12(sp)
 8018d18:	dfc00a15 	stw	ra,40(sp)
 8018d1c:	ddc00815 	stw	r23,32(sp)
 8018d20:	dd800715 	stw	r22,28(sp)
 8018d24:	dd000515 	stw	r20,20(sp)
 8018d28:	dcc00415 	stw	r19,16(sp)
 8018d2c:	dc400215 	stw	r17,8(sp)
 8018d30:	dc000115 	stw	r16,4(sp)
 8018d34:	d9000015 	stw	r4,0(sp)
 8018d38:	2839883a 	mov	fp,r5
 8018d3c:	04800044 	movi	r18,1
 8018d40:	057fffc4 	movi	r21,-1
 8018d44:	008200b4 	movhi	r2,2050
 8018d48:	10ab9e04 	addi	r2,r2,-20872
 8018d4c:	12000017 	ldw	r8,0(r2)
 8018d50:	45005217 	ldw	r20,328(r8)
 8018d54:	44c05204 	addi	r19,r8,328
 8018d58:	a0001c26 	beq	r20,zero,8018dcc <__call_exitprocs+0xc4>
 8018d5c:	a0800117 	ldw	r2,4(r20)
 8018d60:	15ffffc4 	addi	r23,r2,-1
 8018d64:	b8000d16 	blt	r23,zero,8018d9c <__call_exitprocs+0x94>
 8018d68:	14000044 	addi	r16,r2,1
 8018d6c:	8421883a 	add	r16,r16,r16
 8018d70:	8421883a 	add	r16,r16,r16
 8018d74:	84402004 	addi	r17,r16,128
 8018d78:	a463883a 	add	r17,r20,r17
 8018d7c:	a421883a 	add	r16,r20,r16
 8018d80:	e0001e26 	beq	fp,zero,8018dfc <__call_exitprocs+0xf4>
 8018d84:	80804017 	ldw	r2,256(r16)
 8018d88:	e0801c26 	beq	fp,r2,8018dfc <__call_exitprocs+0xf4>
 8018d8c:	bdffffc4 	addi	r23,r23,-1
 8018d90:	843fff04 	addi	r16,r16,-4
 8018d94:	8c7fff04 	addi	r17,r17,-4
 8018d98:	bd7ff91e 	bne	r23,r21,8018d80 <__alt_data_end+0xf8018d80>
 8018d9c:	00800034 	movhi	r2,0
 8018da0:	10800004 	addi	r2,r2,0
 8018da4:	10000926 	beq	r2,zero,8018dcc <__call_exitprocs+0xc4>
 8018da8:	a0800117 	ldw	r2,4(r20)
 8018dac:	1000301e 	bne	r2,zero,8018e70 <__call_exitprocs+0x168>
 8018db0:	a0800017 	ldw	r2,0(r20)
 8018db4:	10003226 	beq	r2,zero,8018e80 <__call_exitprocs+0x178>
 8018db8:	a009883a 	mov	r4,r20
 8018dbc:	98800015 	stw	r2,0(r19)
 8018dc0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 8018dc4:	9d000017 	ldw	r20,0(r19)
 8018dc8:	a03fe41e 	bne	r20,zero,8018d5c <__alt_data_end+0xf8018d5c>
 8018dcc:	dfc00a17 	ldw	ra,40(sp)
 8018dd0:	df000917 	ldw	fp,36(sp)
 8018dd4:	ddc00817 	ldw	r23,32(sp)
 8018dd8:	dd800717 	ldw	r22,28(sp)
 8018ddc:	dd400617 	ldw	r21,24(sp)
 8018de0:	dd000517 	ldw	r20,20(sp)
 8018de4:	dcc00417 	ldw	r19,16(sp)
 8018de8:	dc800317 	ldw	r18,12(sp)
 8018dec:	dc400217 	ldw	r17,8(sp)
 8018df0:	dc000117 	ldw	r16,4(sp)
 8018df4:	dec00b04 	addi	sp,sp,44
 8018df8:	f800283a 	ret
 8018dfc:	a0800117 	ldw	r2,4(r20)
 8018e00:	80c00017 	ldw	r3,0(r16)
 8018e04:	10bfffc4 	addi	r2,r2,-1
 8018e08:	15c01426 	beq	r2,r23,8018e5c <__call_exitprocs+0x154>
 8018e0c:	80000015 	stw	zero,0(r16)
 8018e10:	183fde26 	beq	r3,zero,8018d8c <__alt_data_end+0xf8018d8c>
 8018e14:	95c8983a 	sll	r4,r18,r23
 8018e18:	a0806217 	ldw	r2,392(r20)
 8018e1c:	a5800117 	ldw	r22,4(r20)
 8018e20:	2084703a 	and	r2,r4,r2
 8018e24:	10000b26 	beq	r2,zero,8018e54 <__call_exitprocs+0x14c>
 8018e28:	a0806317 	ldw	r2,396(r20)
 8018e2c:	2088703a 	and	r4,r4,r2
 8018e30:	20000c1e 	bne	r4,zero,8018e64 <__call_exitprocs+0x15c>
 8018e34:	89400017 	ldw	r5,0(r17)
 8018e38:	d9000017 	ldw	r4,0(sp)
 8018e3c:	183ee83a 	callr	r3
 8018e40:	a0800117 	ldw	r2,4(r20)
 8018e44:	15bfbf1e 	bne	r2,r22,8018d44 <__alt_data_end+0xf8018d44>
 8018e48:	98800017 	ldw	r2,0(r19)
 8018e4c:	153fcf26 	beq	r2,r20,8018d8c <__alt_data_end+0xf8018d8c>
 8018e50:	003fbc06 	br	8018d44 <__alt_data_end+0xf8018d44>
 8018e54:	183ee83a 	callr	r3
 8018e58:	003ff906 	br	8018e40 <__alt_data_end+0xf8018e40>
 8018e5c:	a5c00115 	stw	r23,4(r20)
 8018e60:	003feb06 	br	8018e10 <__alt_data_end+0xf8018e10>
 8018e64:	89000017 	ldw	r4,0(r17)
 8018e68:	183ee83a 	callr	r3
 8018e6c:	003ff406 	br	8018e40 <__alt_data_end+0xf8018e40>
 8018e70:	a0800017 	ldw	r2,0(r20)
 8018e74:	a027883a 	mov	r19,r20
 8018e78:	1029883a 	mov	r20,r2
 8018e7c:	003fb606 	br	8018d58 <__alt_data_end+0xf8018d58>
 8018e80:	0005883a 	mov	r2,zero
 8018e84:	003ffb06 	br	8018e74 <__alt_data_end+0xf8018e74>

08018e88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8018e88:	defffd04 	addi	sp,sp,-12
 8018e8c:	df000215 	stw	fp,8(sp)
 8018e90:	df000204 	addi	fp,sp,8
 8018e94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8018e98:	d0272945 	stb	zero,-25435(gp)
 8018e9c:	e0bfff17 	ldw	r2,-4(fp)
 8018ea0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8018ea4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8018ea8:	10000226 	beq	r2,zero,8018eb4 <_exit+0x2c>
    ALT_SIM_FAIL();
 8018eac:	002af070 	cmpltui	zero,zero,43969
 8018eb0:	00000106 	br	8018eb8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8018eb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8018eb8:	003fff06 	br	8018eb8 <__alt_data_end+0xf8018eb8>
